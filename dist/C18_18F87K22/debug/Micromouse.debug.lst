

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat May 02 18:56:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001CB6                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ignoreControll
    43  001CB6  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _LATC	set	3979
    58  0000                     _OSCTUNE	set	3995
    59  0000                     _TRISBbits	set	3987
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISEbits	set	3990
    62  0000                     _ADCON0	set	4034
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON1	set	4033
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADRESL	set	4035
    68  0000                     _OSCCON	set	4051
    69  0000                     _T0CON	set	4053
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001BDA                     __pcinit:
    79                           	opt stack 0
    80  001BDA                     start_initialization:
    81                           	opt stack 0
    82  001BDA                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (55 bytes)
    86  001BDA  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  001BDE  0E37               	movlw	55
    88  001BE0                     clear_0:
    89  001BE0  6AEE               	clrf	postinc0,c
    90  001BE2  06E8               	decf	wreg,f,c
    91  001BE4  E1FD               	bnz	clear_0
    92                           
    93                           ; Initialize objects allocated to COMRAM (1 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  001BE6  0EB6               	movlw	low __pidataCOMRAM
    96  001BE8  6EF6               	movwf	tblptrl,c
    97  001BEA  0E1C               	movlw	high __pidataCOMRAM
    98  001BEC  6EF7               	movwf	tblptrh,c
    99  001BEE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  001BF0  6EF8               	movwf	tblptru,c
   101  001BF2  0009               	tblrd		*+	;fetch initializer
   102  001BF4  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   103  001BF8                     end_of_initialization:
   104                           	opt stack 0
   105  001BF8                     __end_of__initialization:
   106                           	opt stack 0
   107  001BF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  001BFA  6EF8               	movwf	tblptru,c
   109  001BFC  0100               	movlb	0
   110  001BFE  EF01  F00E         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000001                     _sensorCorrection:
   122                           	opt stack 0
   123  000001                     	ds	8
   124  000009                     _sensorValue:
   125                           	opt stack 0
   126  000009                     	ds	8
   127  000011                     _ControllerCounter:
   128                           	opt stack 0
   129  000011                     	ds	2
   130  000013                     _Deadend:
   131                           	opt stack 0
   132  000013                     	ds	2
   133  000015                     _ForwardCounter:
   134                           	opt stack 0
   135  000015                     	ds	2
   136  000017                     _LTurnCounter:
   137                           	opt stack 0
   138  000017                     	ds	2
   139  000019                     _MotorDelayCounter:
   140                           	opt stack 0
   141  000019                     	ds	2
   142  00001B                     _RTurnCounter:
   143                           	opt stack 0
   144  00001B                     	ds	2
   145  00001D                     _ReverseCounter:
   146                           	opt stack 0
   147  00001D                     	ds	2
   148  00001F                     _RotateCounter:
   149                           	opt stack 0
   150  00001F                     	ds	2
   151  000021                     _TurnLeft:
   152                           	opt stack 0
   153  000021                     	ds	2
   154  000023                     _TurnRight:
   155                           	opt stack 0
   156  000023                     	ds	2
   157  000025                     _TurnedLeft:
   158                           	opt stack 0
   159  000025                     	ds	2
   160  000027                     _TurnedRight:
   161                           	opt stack 0
   162  000027                     	ds	2
   163  000029                     _delay_time:
   164                           	opt stack 0
   165  000029                     	ds	2
   166  00002B                     _errorD:
   167                           	opt stack 0
   168  00002B                     	ds	2
   169  00002D                     _errorP:
   170                           	opt stack 0
   171  00002D                     	ds	2
   172  00002F                     _oldErrorP:
   173                           	opt stack 0
   174  00002F                     	ds	2
   175  000031                     _totalError:
   176                           	opt stack 0
   177  000031                     	ds	2
   178  000033                     _LMotorCounter:
   179                           	opt stack 0
   180  000033                     	ds	1
   181  000034                     _RMotorCounter:
   182                           	opt stack 0
   183  000034                     	ds	1
   184  000035                     _algorithm:
   185                           	opt stack 0
   186  000035                     	ds	1
   187  000036                     _justTurned:
   188                           	opt stack 0
   189  000036                     	ds	1
   190  000037                     _rotatingSide:
   191                           	opt stack 0
   192  000037                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00005E                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00005E                     _ignoreControll:
   204                           	opt stack 0
   205  00005E                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000080                     __pcstackBANK0:
   215                           	opt stack 0
   216  000080                     ?___wmul:
   217                           	opt stack 0
   218  000080                     ?___awdiv:
   219                           	opt stack 0
   220  000080                     delay@ms:
   221                           	opt stack 0
   222  000080                     ___wmul@multiplier:
   223                           	opt stack 0
   224  000080                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_delay:
   230  000082                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000082                     ___awdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000082                     	ds	1
   237  000083                     delay@x:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000083                     	ds	1
   242  000084                     ___awdiv@counter:
   243                           	opt stack 0
   244  000084                     ___wmul@product:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000084                     	ds	1
   249  000085                     ___awdiv@sign:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  000085                     	ds	1
   254  000086                     ?_MIN:
   255                           	opt stack 0
   256  000086                     ?_MAX:
   257                           	opt stack 0
   258  000086                     MIN@a:
   259                           	opt stack 0
   260  000086                     MAX@a:
   261                           	opt stack 0
   262  000086                     ___awdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000086                     	ds	2
   267  000088                     ??_setCorrection:
   268  000088                     MIN@b:
   269                           	opt stack 0
   270  000088                     MAX@b:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  000088                     	ds	2
   275  00008A                     ??_MIN:
   276  00008A                     ??_MAX:
   277  00008A                     setCorrection@sideAvg:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00008A                     	ds	1
   282  00008B                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00008B                     	ds	1
   287  00008C                     setCorrection@frontAvg:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00008C                     	ds	1
   292  00008D                     sensorComputation@getCorrection:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00008D                     	ds	1
   297  00008E                     ??_sensorComputation:
   298                           
   299                           ; 0 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@max:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@min:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@sum:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     sensorComputation@j:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000096                     	ds	2
   321  000098                     sensorComputation@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x18
   325  000098                     	ds	2
   326  00009A                     ??_sensorUpdate:
   327                           
   328                           ; 0 bytes @ 0x1A
   329  00009A                     	ds	6
   330  0000A0                     sensorUpdate@sensorTemp:
   331                           	opt stack 0
   332                           
   333                           ; 80 bytes @ 0x20
   334  0000A0                     	ds	80
   335  0000F0                     sensorUpdate@getCorrection:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x70
   339  0000F0                     	ds	1
   340  0000F1                     sensorUpdate@i:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x71
   344  0000F1                     	ds	2
   345  0000F3                     sensorUpdate@j:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x73
   349  0000F3                     	ds	2
   350  0000F5                     tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           ; 0 bytes @ 0x75
   358                           
   359                           	psect	cstackCOMRAM
   360  000038                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000038                     ??_low_isr:
   363  000038                     
   364                           ; 0 bytes @ 0x0
   365  000038                     	ds	17
   366  000049                     ?_ABS:
   367                           	opt stack 0
   368  000049                     motorCounterUpdate@reverse:
   369                           	opt stack 0
   370  000049                     merge@right:
   371                           	opt stack 0
   372  000049                     moveMouse@action:
   373                           	opt stack 0
   374  000049                     ABS@x:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000049                     	ds	1
   379  00004A                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  00004A                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  00004A                     	ds	1
   386  00004B                     ??_KController:
   387  00004B                     merge@merged:
   388                           	opt stack 0
   389  00004B                     rotate@side:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x13
   393  00004B                     	ds	2
   394  00004D                     KController@correctTo:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x15
   398  00004D                     	ds	1
   399  00004E                     KController@diff:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x16
   403  00004E                     	ds	2
   404  000050                     ??_high_isr:
   405                           
   406                           ; 0 bytes @ 0x18
   407  000050                     	ds	14
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415 ;;
   416 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   417 ;;
   418 ;; *************** function _main *****************
   419 ;; Defined at:
   420 ;;		line 41 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;		None               void
   427 ;; Registers used:
   428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;Total ram usage:        0 bytes
   439 ;; Hardware stack levels required when called:    7
   440 ;; This function calls:
   441 ;;		_ConfigureOscillator
   442 ;;		_InitApp
   443 ;;		_sensorUpdate
   444 ;;		_setCorrection
   445 ;; This function is called by:
   446 ;;		Startup code after reset
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           	psect	text0
   451  001C02                     __ptext0:
   452                           	opt stack 0
   453  001C02                     _main:
   454                           	opt stack 24
   455                           
   456                           ;main.c: 44: ConfigureOscillator();
   457                           
   458                           ;incstack = 0
   459  001C02  EC52  F00E         	call	_ConfigureOscillator	;wreg free
   460                           
   461                           ;main.c: 47: InitApp();
   462  001C06  EC61  F00D         	call	_InitApp	;wreg free
   463                           
   464                           ;main.c: 48: sensorUpdate(1);
   465  001C0A  0E01               	movlw	1
   466  001C0C  ECF3  F00A         	call	_sensorUpdate
   467                           
   468                           ;main.c: 49: setCorrection();
   469  001C10  ECFD  F00B         	call	_setCorrection	;wreg free
   470                           
   471                           ;main.c: 50: INTCONbits.GIE = 1;
   472  001C14  8EF2               	bsf	intcon,7,c	;volatile
   473  001C16  D000               	goto	l1946
   474  001C18                     l1946:
   475                           
   476                           ;main.c: 52: {
   477                           ;main.c: 53: sensorUpdate(0);
   478  001C18  0E00               	movlw	0
   479  001C1A  ECF3  F00A         	call	_sensorUpdate
   480  001C1E  D7FC               	goto	l1946
   481  001C20  EF51  F000         	goto	start
   482  001C24                     __end_of_main:
   483                           	opt stack 0
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           intcon	equ	0xFF2
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492 ;; *************** function _setCorrection *****************
   493 ;; Defined at:
   494 ;;		line 125 in file "user.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  frontAvg        2   12[BANK0 ] int 
   499 ;;  sideAvg         2   10[BANK0 ] int 
   500 ;; Return value:  Size  Location     Type
   501 ;;		None               void
   502 ;; Registers used:
   503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;Total ram usage:        6 bytes
   514 ;; Hardware stack levels used:    1
   515 ;; Hardware stack levels required when called:    5
   516 ;; This function calls:
   517 ;;		___awdiv
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524  0017FA                     __ptext1:
   525                           	opt stack 0
   526  0017FA                     _setCorrection:
   527                           	opt stack 25
   528                           
   529                           ;user.c: 127: int sideAvg,frontAvg;
   530                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   531                           
   532                           ;incstack = 0
   533  0017FA  5009               	movf	_sensorValue,w,c
   534  0017FC  240B               	addwf	_sensorValue+2,w,c
   535  0017FE  0100               	movlb	0	; () banked
   536  001800  6F80               	movwf	___awdiv@dividend& (0+255),b
   537  001802  500A               	movf	_sensorValue+1,w,c
   538  001804  200C               	addwfc	_sensorValue+3,w,c
   539  001806  0100               	movlb	0	; () banked
   540  001808  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   541  00180A  0E00               	movlw	0
   542  00180C  0100               	movlb	0	; () banked
   543  00180E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   544  001810  0E02               	movlw	2
   545  001812  6F82               	movwf	___awdiv@divisor& (0+255),b
   546  001814  EC76  F00C         	call	___awdiv	;wreg free
   547  001818  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   548  00181C  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   549                           
   550                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   551  001820  500F               	movf	_sensorValue+6,w,c
   552  001822  240D               	addwf	_sensorValue+4,w,c
   553  001824  0100               	movlb	0	; () banked
   554  001826  6F80               	movwf	___awdiv@dividend& (0+255),b
   555  001828  5010               	movf	_sensorValue+7,w,c
   556  00182A  200E               	addwfc	_sensorValue+5,w,c
   557  00182C  0100               	movlb	0	; () banked
   558  00182E  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   559  001830  0E00               	movlw	0
   560  001832  0100               	movlb	0	; () banked
   561  001834  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   562  001836  0E02               	movlw	2
   563  001838  6F82               	movwf	___awdiv@divisor& (0+255),b
   564  00183A  EC76  F00C         	call	___awdiv	;wreg free
   565  00183E  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   566  001842  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   567                           
   568                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   569  001846  C009  F088         	movff	_sensorValue,??_setCorrection
   570  00184A  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   571  00184E  0100               	movlb	0	; () banked
   572  001850  1F88               	comf	??_setCorrection& (0+255),f,b
   573  001852  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   574  001854  4B88               	infsnz	??_setCorrection& (0+255),f,b
   575  001856  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   576  001858  0100               	movlb	0	; () banked
   577  00185A  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   578  00185C  0100               	movlb	0	; () banked
   579  00185E  2588               	addwf	??_setCorrection& (0+255),w,b
   580  001860  6E01               	movwf	_sensorCorrection,c
   581  001862  0100               	movlb	0	; () banked
   582  001864  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   583  001866  0100               	movlb	0	; () banked
   584  001868  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   585  00186A  6E02               	movwf	_sensorCorrection+1,c
   586                           
   587                           ; BSR set to: 0
   588                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   589  00186C  EE20  F00B         	lfsr	2,_sensorValue+2
   590  001870  CFDE F088          	movff	postinc2,??_setCorrection
   591  001874  CFDD F089          	movff	postdec2,??_setCorrection+1
   592  001878  0100               	movlb	0	; () banked
   593  00187A  1F88               	comf	??_setCorrection& (0+255),f,b
   594  00187C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   595  00187E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   596  001880  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   597  001882  0100               	movlb	0	; () banked
   598  001884  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   599  001886  0100               	movlb	0	; () banked
   600  001888  2588               	addwf	??_setCorrection& (0+255),w,b
   601  00188A  6E03               	movwf	_sensorCorrection+2,c
   602  00188C  0100               	movlb	0	; () banked
   603  00188E  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   604  001890  0100               	movlb	0	; () banked
   605  001892  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   606  001894  6E04               	movwf	_sensorCorrection+3,c
   607                           
   608                           ; BSR set to: 0
   609                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   610  001896  EE20  F00D         	lfsr	2,_sensorValue+4
   611  00189A  CFDE F088          	movff	postinc2,??_setCorrection
   612  00189E  CFDD F089          	movff	postdec2,??_setCorrection+1
   613  0018A2  0100               	movlb	0	; () banked
   614  0018A4  1F88               	comf	??_setCorrection& (0+255),f,b
   615  0018A6  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   616  0018A8  4B88               	infsnz	??_setCorrection& (0+255),f,b
   617  0018AA  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   618  0018AC  0100               	movlb	0	; () banked
   619  0018AE  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   620  0018B0  0100               	movlb	0	; () banked
   621  0018B2  2588               	addwf	??_setCorrection& (0+255),w,b
   622  0018B4  6E05               	movwf	_sensorCorrection+4,c
   623  0018B6  0100               	movlb	0	; () banked
   624  0018B8  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   625  0018BA  0100               	movlb	0	; () banked
   626  0018BC  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   627  0018BE  6E06               	movwf	_sensorCorrection+5,c
   628                           
   629                           ; BSR set to: 0
   630                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   631  0018C0  EE20  F00F         	lfsr	2,_sensorValue+6
   632  0018C4  CFDE F088          	movff	postinc2,??_setCorrection
   633  0018C8  CFDD F089          	movff	postdec2,??_setCorrection+1
   634  0018CC  0100               	movlb	0	; () banked
   635  0018CE  1F88               	comf	??_setCorrection& (0+255),f,b
   636  0018D0  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   637  0018D2  4B88               	infsnz	??_setCorrection& (0+255),f,b
   638  0018D4  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   639  0018D6  0100               	movlb	0	; () banked
   640  0018D8  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   641  0018DA  0100               	movlb	0	; () banked
   642  0018DC  2588               	addwf	??_setCorrection& (0+255),w,b
   643  0018DE  6E07               	movwf	_sensorCorrection+6,c
   644  0018E0  0100               	movlb	0	; () banked
   645  0018E2  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   646  0018E4  0100               	movlb	0	; () banked
   647  0018E6  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   648  0018E8  6E08               	movwf	_sensorCorrection+7,c
   649                           
   650                           ; BSR set to: 0
   651  0018EA  0012               	return		;funcret
   652  0018EC                     __end_of_setCorrection:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           intcon	equ	0xFF2
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postinc2	equ	0xFDE
   662                           postdec2	equ	0xFDD
   663                           
   664 ;; *************** function _sensorUpdate *****************
   665 ;; Defined at:
   666 ;;		line 161 in file "user.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  getCorrectio    1    wreg     unsigned char 
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   671 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   672 ;;  j               2  115[BANK0 ] int 
   673 ;;  i               2  113[BANK0 ] int 
   674 ;; Return value:  Size  Location     Type
   675 ;;		None               void
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;Total ram usage:       91 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    6
   690 ;; This function calls:
   691 ;;		___wmul
   692 ;;		_sensorComputation
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text2
   699  0015E6                     __ptext2:
   700                           	opt stack 0
   701  0015E6                     _sensorUpdate:
   702                           	opt stack 24
   703                           
   704                           ; BSR set to: 0
   705                           ;incstack = 0
   706                           ;sensorUpdate@getCorrection stored from wreg
   707  0015E6  0100               	movlb	0	; () banked
   708  0015E8  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   709                           
   710                           ; BSR set to: 0
   711                           ;user.c: 163: int i,j;
   712                           ;user.c: 164: int sensorTemp[4][10];
   713                           ;user.c: 167: for(i = 0; i < 10; i++)
   714  0015EA  0E00               	movlw	0
   715  0015EC  0100               	movlb	0	; () banked
   716  0015EE  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   717  0015F0  0E00               	movlw	0
   718  0015F2  6FF1               	movwf	sensorUpdate@i& (0+255),b
   719  0015F4                     l1900:
   720                           
   721                           ; BSR set to: 0
   722  0015F4  0100               	movlb	0	; () banked
   723  0015F6  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   724  0015F8  D00A               	goto	l1904
   725  0015FA  0100               	movlb	0	; () banked
   726  0015FC  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   727  0015FE  E178               	bnz	l1924
   728  001600  0E0A               	movlw	10
   729  001602  0100               	movlb	0	; () banked
   730  001604  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   731  001606  B0D8               	btfsc	status,0,c
   732  001608  D073               	goto	l1924
   733  00160A  D001               	goto	l1904
   734                           
   735                           ; BSR set to: 0
   736  00160C  D071               	goto	l1924
   737  00160E                     l1904:
   738                           
   739                           ; BSR set to: 0
   740                           ;user.c: 168: {
   741                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   742  00160E  0E00               	movlw	0
   743  001610  0100               	movlb	0	; () banked
   744  001612  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   745  001614  0E00               	movlw	0
   746  001616  6FF3               	movwf	sensorUpdate@j& (0+255),b
   747  001618                     l1906:
   748                           
   749                           ; BSR set to: 0
   750  001618  0100               	movlb	0	; () banked
   751  00161A  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   752  00161C  D00A               	goto	l1910
   753  00161E  0100               	movlb	0	; () banked
   754  001620  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   755  001622  E161               	bnz	l1920
   756  001624  0E04               	movlw	4
   757  001626  0100               	movlb	0	; () banked
   758  001628  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   759  00162A  B0D8               	btfsc	status,0,c
   760  00162C  D05C               	goto	l1920
   761  00162E  D001               	goto	l1910
   762                           
   763                           ; BSR set to: 0
   764  001630  D05A               	goto	l1920
   765  001632                     l1910:
   766                           
   767                           ; BSR set to: 0
   768                           ;user.c: 170: {
   769                           ;user.c: 171: ADCON0 = sensorLocation[j];
   770  001632  0E01               	movlw	low _sensorLocation
   771  001634  0100               	movlb	0	; () banked
   772  001636  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   773  001638  6EF6               	movwf	tblptrl,c
   774  00163A  0E10               	movlw	high _sensorLocation
   775  00163C  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   776  00163E  6EF7               	movwf	tblptrh,c
   777  001640                     	if	0	;There are less than 3 active tblptr bytes
   778  001640                     	endif
   779  001640  0008               	tblrd		*
   780  001642  CFF5 FFC2          	movff	tablat,4034	;volatile
   781                           
   782                           ; BSR set to: 0
   783                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   784  001646  82C2               	bsf	4034,1,c	;volatile
   785                           
   786                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   787  001648  D000               	goto	l297
   788  00164A                     l297:
   789                           
   790                           ; BSR set to: 0
   791  00164A  B2C2               	btfsc	4034,1,c	;volatile
   792  00164C  D7FE               	goto	l297
   793                           
   794                           ; BSR set to: 0
   795                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   796                           
   797                           ; BSR set to: 0
   798  00164E  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   799  001652  0E06               	movlw	6
   800  001654  0100               	movlb	0	; () banked
   801  001656  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   802  001658                     u1635:
   803  001658  0100               	movlb	0	; () banked
   804  00165A  90D8               	bcf	status,0,c
   805  00165C  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   806  00165E  0100               	movlb	0	; () banked
   807  001660  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   808  001662  D7FA               	goto	u1635
   809  001664  0100               	movlb	0	; () banked
   810  001666  519A               	movf	??_sensorUpdate& (0+255),w,b
   811  001668  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   812  00166C  0100               	movlb	0	; () banked
   813  00166E  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   814  001670  0100               	movlb	0	; () banked
   815  001672  90D8               	bcf	status,0,c
   816  001674  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   817  001676  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   818  001678  0100               	movlb	0	; () banked
   819  00167A  90D8               	bcf	status,0,c
   820  00167C  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   821  00167E  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   822  001680  0100               	movlb	0	; () banked
   823  001682  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   824  001684  0E00               	movlw	0
   825  001686  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   826  001688  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   827  00168C  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   828  001690  0E00               	movlw	0
   829  001692  0100               	movlb	0	; () banked
   830  001694  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   831  001696  0E14               	movlw	20
   832  001698  6F82               	movwf	___wmul@multiplicand& (0+255),b
   833  00169A  EC9D  F00D         	call	___wmul	;wreg free
   834  00169E  0EA0               	movlw	low sensorUpdate@sensorTemp
   835  0016A0  0100               	movlb	0	; () banked
   836  0016A2  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   837  0016A4  0E00               	movlw	high sensorUpdate@sensorTemp
   838  0016A6  0100               	movlb	0	; () banked
   839  0016A8  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   840  0016AA  0100               	movlb	0	; () banked
   841  0016AC  5180               	movf	?___wmul& (0+255),w,b
   842  0016AE  0100               	movlb	0	; () banked
   843  0016B0  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   844  0016B2  0100               	movlb	0	; () banked
   845  0016B4  5181               	movf	(?___wmul+1)& (0+255),w,b
   846  0016B6  0100               	movlb	0	; () banked
   847  0016B8  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   848  0016BA  90D8               	bcf	status,0,c
   849  0016BC  0100               	movlb	0	; () banked
   850  0016BE  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   851  0016C0  6ED9               	movwf	fsr2l,c
   852  0016C2  0100               	movlb	0	; () banked
   853  0016C4  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   854  0016C6  6EDA               	movwf	fsr2h,c
   855  0016C8  0100               	movlb	0	; () banked
   856  0016CA  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   857  0016CC  26D9               	addwf	fsr2l,f,c
   858  0016CE  0100               	movlb	0	; () banked
   859  0016D0  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   860  0016D2  22DA               	addwfc	fsr2h,f,c
   861  0016D4  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   862  0016D8  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   863                           
   864                           ; BSR set to: 0
   865  0016DC  0100               	movlb	0	; () banked
   866  0016DE  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   867  0016E0  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   868  0016E2  D79A               	goto	l1906
   869                           
   870                           ; BSR set to: 0
   871  0016E4  D000               	goto	l1920
   872  0016E6                     l1920:
   873                           
   874                           ; BSR set to: 0
   875  0016E6  0100               	movlb	0	; () banked
   876  0016E8  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   877  0016EA  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   878  0016EC  D783               	goto	l1900
   879                           
   880                           ; BSR set to: 0
   881  0016EE  D000               	goto	l1924
   882  0016F0                     l1924:
   883                           
   884                           ; BSR set to: 0
   885                           ;user.c: 176: }
   886                           ;user.c: 177: }
   887                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   888  0016F0  0EA0               	movlw	low sensorUpdate@sensorTemp
   889  0016F2  0100               	movlb	0	; () banked
   890  0016F4  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   891  0016F6  0E00               	movlw	high sensorUpdate@sensorTemp
   892  0016F8  0100               	movlb	0	; () banked
   893  0016FA  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   894  0016FC  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   895  001700  EC91  F009         	call	_sensorComputation	;wreg free
   896  001704  0012               	return		;funcret
   897  001706                     __end_of_sensorUpdate:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           intcon	equ	0xFF2
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           postinc2	equ	0xFDE
   907                           postdec2	equ	0xFDD
   908                           fsr2h	equ	0xFDA
   909                           fsr2l	equ	0xFD9
   910                           status	equ	0xFD8
   911                           
   912 ;; *************** function _sensorComputation *****************
   913 ;; Defined at:
   914 ;;		line 137 in file "user.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   917 ;;		 -> sensorUpdate@sensorTemp(80), 
   918 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  i               2   24[BANK0 ] int 
   921 ;;  j               2   22[BANK0 ] int 
   922 ;;  sum             2   20[BANK0 ] int 
   923 ;;  min             2   18[BANK0 ] int 
   924 ;;  max             2   16[BANK0 ] int 
   925 ;; Return value:  Size  Location     Type
   926 ;;		None               void
   927 ;; Registers used:
   928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   937 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;Total ram usage:       15 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    5
   941 ;; This function calls:
   942 ;;		_MAX
   943 ;;		_MIN
   944 ;;		___awdiv
   945 ;;		___wmul
   946 ;; This function is called by:
   947 ;;		_sensorUpdate
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text3
   952  001322                     __ptext3:
   953                           	opt stack 0
   954  001322                     _sensorComputation:
   955                           	opt stack 24
   956                           
   957                           ;user.c: 139: int max,min,i,j,sum;
   958                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   959                           
   960                           ;incstack = 0
   961  001322  0E00               	movlw	0
   962  001324  0100               	movlb	0	; () banked
   963  001326  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   964  001328  0E00               	movlw	0
   965  00132A  6F98               	movwf	sensorComputation@i& (0+255),b
   966                           
   967                           ; BSR set to: 0
   968  00132C  0100               	movlb	0	; () banked
   969  00132E  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   970  001330  D00A               	goto	l1852
   971  001332  0100               	movlb	0	; () banked
   972  001334  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   973  001336  E106               	bnz	u1540
   974  001338  0E04               	movlw	4
   975  00133A  0100               	movlb	0	; () banked
   976  00133C  5D98               	subwf	sensorComputation@i& (0+255),w,b
   977  00133E  B0D8               	btfsc	status,0,c
   978  001340  D151               	goto	l290
   979  001342  D001               	goto	l1852
   980  001344                     u1540:
   981                           
   982                           ; BSR set to: 0
   983  001344  D14F               	goto	l290
   984  001346                     l1852:
   985                           
   986                           ; BSR set to: 0
   987                           ;user.c: 141: {
   988                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
   989  001346  0E00               	movlw	0
   990  001348  0100               	movlb	0	; () banked
   991  00134A  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
   992  00134C  0E00               	movlw	0
   993  00134E  6F96               	movwf	sensorComputation@j& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996  001350  0100               	movlb	0	; () banked
   997  001352  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   998  001354  D00A               	goto	l1858
   999  001356  0100               	movlb	0	; () banked
  1000  001358  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1001  00135A  E106               	bnz	u1550
  1002  00135C  0E0A               	movlw	10
  1003  00135E  0100               	movlb	0	; () banked
  1004  001360  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1005  001362  B0D8               	btfsc	status,0,c
  1006  001364  D0D3               	goto	l1868
  1007  001366  D001               	goto	l1858
  1008  001368                     u1550:
  1009                           
  1010                           ; BSR set to: 0
  1011  001368  D0D1               	goto	l1868
  1012  00136A                     l1858:
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;user.c: 143: {
  1016                           ;user.c: 144: if(j == 0)
  1017  00136A  0100               	movlb	0	; () banked
  1018  00136C  5196               	movf	sensorComputation@j& (0+255),w,b
  1019  00136E  0100               	movlb	0	; () banked
  1020  001370  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1021  001372  A4D8               	btfss	status,2,c
  1022  001374  D031               	goto	l1862
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;user.c: 145: {
  1026                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1027  001376  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1028  00137A  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1029  00137E  0E00               	movlw	0
  1030  001380  0100               	movlb	0	; () banked
  1031  001382  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1032  001384  0E14               	movlw	20
  1033  001386  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1034  001388  EC9D  F00D         	call	___wmul	;wreg free
  1035  00138C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1036  001390  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1037  001394  0100               	movlb	0	; () banked
  1038  001396  5180               	movf	?___wmul& (0+255),w,b
  1039  001398  0100               	movlb	0	; () banked
  1040  00139A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1041  00139C  0100               	movlb	0	; () banked
  1042  00139E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1043  0013A0  0100               	movlb	0	; () banked
  1044  0013A2  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1045  0013A4  90D8               	bcf	status,0,c
  1046  0013A6  0100               	movlb	0	; () banked
  1047  0013A8  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1048  0013AA  6ED9               	movwf	fsr2l,c
  1049  0013AC  0100               	movlb	0	; () banked
  1050  0013AE  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1051  0013B0  6EDA               	movwf	fsr2h,c
  1052  0013B2  0100               	movlb	0	; () banked
  1053  0013B4  518E               	movf	??_sensorComputation& (0+255),w,b
  1054  0013B6  26D9               	addwf	fsr2l,f,c
  1055  0013B8  0100               	movlb	0	; () banked
  1056  0013BA  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1057  0013BC  22DA               	addwfc	fsr2h,f,c
  1058  0013BE  CFDE F090          	movff	postinc2,sensorComputation@max
  1059  0013C2  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1060  0013C6  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1061  0013CA  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1062  0013CE  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1063  0013D2  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1064                           
  1065                           ;user.c: 147: continue;
  1066  0013D6  D08F               	goto	l1864
  1067  0013D8                     l1862:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;user.c: 148: }
  1071                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1072  0013D8  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1073  0013DC  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1074  0013E0  0E00               	movlw	0
  1075  0013E2  0100               	movlb	0	; () banked
  1076  0013E4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1077  0013E6  0E14               	movlw	20
  1078  0013E8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1079  0013EA  EC9D  F00D         	call	___wmul	;wreg free
  1080  0013EE  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1081  0013F2  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1082  0013F6  0100               	movlb	0	; () banked
  1083  0013F8  5180               	movf	?___wmul& (0+255),w,b
  1084  0013FA  0100               	movlb	0	; () banked
  1085  0013FC  278E               	addwf	??_sensorComputation& (0+255),f,b
  1086  0013FE  0100               	movlb	0	; () banked
  1087  001400  5181               	movf	(?___wmul+1)& (0+255),w,b
  1088  001402  0100               	movlb	0	; () banked
  1089  001404  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1090  001406  90D8               	bcf	status,0,c
  1091  001408  0100               	movlb	0	; () banked
  1092  00140A  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1093  00140C  6ED9               	movwf	fsr2l,c
  1094  00140E  0100               	movlb	0	; () banked
  1095  001410  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1096  001412  6EDA               	movwf	fsr2h,c
  1097  001414  0100               	movlb	0	; () banked
  1098  001416  518E               	movf	??_sensorComputation& (0+255),w,b
  1099  001418  26D9               	addwf	fsr2l,f,c
  1100  00141A  0100               	movlb	0	; () banked
  1101  00141C  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1102  00141E  22DA               	addwfc	fsr2h,f,c
  1103  001420  CFDE F086          	movff	postinc2,MIN@a
  1104  001424  CFDD F087          	movff	postdec2,MIN@a+1
  1105  001428  C092  F088         	movff	sensorComputation@min,MIN@b
  1106  00142C  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1107  001430  ECB9  F00D         	call	_MIN	;wreg free
  1108  001434  C086  F092         	movff	?_MIN,sensorComputation@min
  1109  001438  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1110                           
  1111                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1112  00143C  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1113  001440  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1114  001444  0E00               	movlw	0
  1115  001446  0100               	movlb	0	; () banked
  1116  001448  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1117  00144A  0E14               	movlw	20
  1118  00144C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1119  00144E  EC9D  F00D         	call	___wmul	;wreg free
  1120  001452  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1121  001456  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1122  00145A  0100               	movlb	0	; () banked
  1123  00145C  5180               	movf	?___wmul& (0+255),w,b
  1124  00145E  0100               	movlb	0	; () banked
  1125  001460  278E               	addwf	??_sensorComputation& (0+255),f,b
  1126  001462  0100               	movlb	0	; () banked
  1127  001464  5181               	movf	(?___wmul+1)& (0+255),w,b
  1128  001466  0100               	movlb	0	; () banked
  1129  001468  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1130  00146A  90D8               	bcf	status,0,c
  1131  00146C  0100               	movlb	0	; () banked
  1132  00146E  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1133  001470  6ED9               	movwf	fsr2l,c
  1134  001472  0100               	movlb	0	; () banked
  1135  001474  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1136  001476  6EDA               	movwf	fsr2h,c
  1137  001478  0100               	movlb	0	; () banked
  1138  00147A  518E               	movf	??_sensorComputation& (0+255),w,b
  1139  00147C  26D9               	addwf	fsr2l,f,c
  1140  00147E  0100               	movlb	0	; () banked
  1141  001480  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1142  001482  22DA               	addwfc	fsr2h,f,c
  1143  001484  CFDE F086          	movff	postinc2,MAX@a
  1144  001488  CFDD F087          	movff	postdec2,MAX@a+1
  1145  00148C  C090  F088         	movff	sensorComputation@max,MAX@b
  1146  001490  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1147  001494  ECD3  F00D         	call	_MAX	;wreg free
  1148  001498  C086  F090         	movff	?_MAX,sensorComputation@max
  1149  00149C  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1150                           
  1151                           ;user.c: 151: sum += sensorTemp[i][j];
  1152  0014A0  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1153  0014A4  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1154  0014A8  0E00               	movlw	0
  1155  0014AA  0100               	movlb	0	; () banked
  1156  0014AC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1157  0014AE  0E14               	movlw	20
  1158  0014B0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1159  0014B2  EC9D  F00D         	call	___wmul	;wreg free
  1160  0014B6  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1161  0014BA  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1162  0014BE  0100               	movlb	0	; () banked
  1163  0014C0  5180               	movf	?___wmul& (0+255),w,b
  1164  0014C2  0100               	movlb	0	; () banked
  1165  0014C4  278E               	addwf	??_sensorComputation& (0+255),f,b
  1166  0014C6  0100               	movlb	0	; () banked
  1167  0014C8  5181               	movf	(?___wmul+1)& (0+255),w,b
  1168  0014CA  0100               	movlb	0	; () banked
  1169  0014CC  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1170  0014CE  90D8               	bcf	status,0,c
  1171  0014D0  0100               	movlb	0	; () banked
  1172  0014D2  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1173  0014D4  6ED9               	movwf	fsr2l,c
  1174  0014D6  0100               	movlb	0	; () banked
  1175  0014D8  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1176  0014DA  6EDA               	movwf	fsr2h,c
  1177  0014DC  0100               	movlb	0	; () banked
  1178  0014DE  518E               	movf	??_sensorComputation& (0+255),w,b
  1179  0014E0  26D9               	addwf	fsr2l,f,c
  1180  0014E2  0100               	movlb	0	; () banked
  1181  0014E4  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1182  0014E6  22DA               	addwfc	fsr2h,f,c
  1183  0014E8  50DE               	movf	postinc2,w,c
  1184  0014EA  0100               	movlb	0	; () banked
  1185  0014EC  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1186  0014EE  50DD               	movf	postdec2,w,c
  1187  0014F0  0100               	movlb	0	; () banked
  1188  0014F2  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1189  0014F4  D000               	goto	l1864
  1190  0014F6                     l1864:
  1191                           
  1192                           ; BSR set to: 0
  1193  0014F6  0100               	movlb	0	; () banked
  1194  0014F8  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1195  0014FA  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1196                           
  1197                           ; BSR set to: 0
  1198  0014FC  0100               	movlb	0	; () banked
  1199  0014FE  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1200  001500  D734               	goto	l1858
  1201  001502  0100               	movlb	0	; () banked
  1202  001504  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1203  001506  E102               	bnz	l1868
  1204  001508  D729               	goto	L2
  1205  00150A  D000               	goto	l1868
  1206  00150C                     l1868:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;user.c: 152: }
  1210                           ;user.c: 153: sum = sum - min - max;
  1211  00150C  0100               	movlb	0	; () banked
  1212  00150E  5190               	movf	sensorComputation@max& (0+255),w,b
  1213  001510  0100               	movlb	0	; () banked
  1214  001512  2592               	addwf	sensorComputation@min& (0+255),w,b
  1215  001514  0100               	movlb	0	; () banked
  1216  001516  6F8E               	movwf	??_sensorComputation& (0+255),b
  1217  001518  0100               	movlb	0	; () banked
  1218  00151A  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1219  00151C  0100               	movlb	0	; () banked
  1220  00151E  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1221  001520  0100               	movlb	0	; () banked
  1222  001522  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1223  001524  0100               	movlb	0	; () banked
  1224  001526  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1225  001528  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1226  00152A  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1227  00152C  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1228  00152E  0100               	movlb	0	; () banked
  1229  001530  5194               	movf	sensorComputation@sum& (0+255),w,b
  1230  001532  0100               	movlb	0	; () banked
  1231  001534  258E               	addwf	??_sensorComputation& (0+255),w,b
  1232  001536  0100               	movlb	0	; () banked
  1233  001538  6F94               	movwf	sensorComputation@sum& (0+255),b
  1234  00153A  0100               	movlb	0	; () banked
  1235  00153C  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1236  00153E  0100               	movlb	0	; () banked
  1237  001540  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1238  001542  0100               	movlb	0	; () banked
  1239  001544  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1240                           
  1241                           ;user.c: 154: if(getCorrection == 1)
  1242  001546  0100               	movlb	0	; () banked
  1243  001548  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1244  00154A  A4D8               	btfss	status,2,c
  1245  00154C  D00C               	goto	l1872
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1249  00154E  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1250  001552  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1251  001556  0E00               	movlw	0
  1252  001558  0100               	movlb	0	; () banked
  1253  00155A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1254  00155C  0E08               	movlw	8
  1255  00155E  6F82               	movwf	___awdiv@divisor& (0+255),b
  1256  001560  EC76  F00C         	call	___awdiv	;wreg free
  1257  001564  D022               	goto	L3
  1258  001566                     l1872:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;user.c: 156: else
  1262                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1263  001566  90D8               	bcf	status,0,c
  1264  001568  0100               	movlb	0	; () banked
  1265  00156A  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1266  00156C  6ED9               	movwf	fsr2l,c
  1267  00156E  0100               	movlb	0	; () banked
  1268  001570  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1269  001572  6EDA               	movwf	fsr2h,c
  1270  001574  0E01               	movlw	low _sensorCorrection
  1271  001576  26D9               	addwf	fsr2l,f,c
  1272  001578  0E00               	movlw	high _sensorCorrection
  1273  00157A  22DA               	addwfc	fsr2h,f,c
  1274  00157C  CFDE F08E          	movff	postinc2,??_sensorComputation
  1275  001580  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1276  001584  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1277  001588  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1278  00158C  0E00               	movlw	0
  1279  00158E  0100               	movlb	0	; () banked
  1280  001590  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1281  001592  0E08               	movlw	8
  1282  001594  6F82               	movwf	___awdiv@divisor& (0+255),b
  1283  001596  EC76  F00C         	call	___awdiv	;wreg free
  1284  00159A  0100               	movlb	0	; () banked
  1285  00159C  518E               	movf	??_sensorComputation& (0+255),w,b
  1286  00159E  0100               	movlb	0	; () banked
  1287  0015A0  2780               	addwf	?___awdiv& (0+255),f,b
  1288  0015A2  0100               	movlb	0	; () banked
  1289  0015A4  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1290  0015A6  0100               	movlb	0	; () banked
  1291  0015A8  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1292  0015AA                     L3:
  1293  0015AA  90D8               	bcf	status,0,c
  1294  0015AC  0100               	movlb	0	; () banked
  1295  0015AE  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1296  0015B0  6ED9               	movwf	fsr2l,c
  1297  0015B2  0100               	movlb	0	; () banked
  1298  0015B4  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1299  0015B6  6EDA               	movwf	fsr2h,c
  1300  0015B8  0E09               	movlw	low _sensorValue
  1301  0015BA  26D9               	addwf	fsr2l,f,c
  1302  0015BC  0E00               	movlw	high _sensorValue
  1303  0015BE  22DA               	addwfc	fsr2h,f,c
  1304  0015C0  0100               	movlb	0	; () banked
  1305  0015C2  C080  FFDE         	movff	?___awdiv,postinc2
  1306  0015C6  0100               	movlb	0	; () banked
  1307  0015C8  C081  FFDD         	movff	?___awdiv+1,postdec2
  1308  0015CC  D000               	goto	l1874
  1309  0015CE                     l1874:
  1310                           
  1311                           ; BSR set to: 0
  1312  0015CE  0100               	movlb	0	; () banked
  1313  0015D0  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1314  0015D2  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1315                           
  1316                           ; BSR set to: 0
  1317  0015D4  0100               	movlb	0	; () banked
  1318  0015D6  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1319  0015D8  D6B6               	goto	l1852
  1320  0015DA  0100               	movlb	0	; () banked
  1321  0015DC  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1322  0015DE  E102               	bnz	l290
  1323  0015E0  D6AB               	goto	L4
  1324  0015E2  D000               	goto	l290
  1325  0015E4                     l290:
  1326                           
  1327                           ; BSR set to: 0
  1328  0015E4  0012               	return		;funcret
  1329  0015E6                     __end_of_sensorComputation:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           intcon	equ	0xFF2
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postinc2	equ	0xFDE
  1339                           postdec2	equ	0xFDD
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function ___wmul *****************
  1345 ;; Defined at:
  1346 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1349 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  product         2    4[BANK0 ] unsigned int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2    0[BANK0 ] unsigned int 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, prodl, prodh
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;Total ram usage:        6 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_sensorComputation
  1372 ;;		_sensorUpdate
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text4
  1377  001B3A                     __ptext4:
  1378                           	opt stack 0
  1379  001B3A                     ___wmul:
  1380                           	opt stack 24
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;incstack = 0
  1384  001B3A  0100               	movlb	0	; () banked
  1385  001B3C  5180               	movf	___wmul@multiplier& (0+255),w,b
  1386  001B3E  0100               	movlb	0	; () banked
  1387  001B40  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1388  001B42  CFF3 F084          	movff	prodl,___wmul@product
  1389  001B46  CFF4 F085          	movff	prodh,___wmul@product+1
  1390  001B4A  0100               	movlb	0	; () banked
  1391  001B4C  5180               	movf	___wmul@multiplier& (0+255),w,b
  1392  001B4E  0100               	movlb	0	; () banked
  1393  001B50  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1394  001B52  50F3               	movf	prodl,w,c
  1395  001B54  0100               	movlb	0	; () banked
  1396  001B56  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1397  001B58  0100               	movlb	0	; () banked
  1398  001B5A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1399  001B5C  0100               	movlb	0	; () banked
  1400  001B5E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1401  001B60  50F3               	movf	prodl,w,c
  1402  001B62  0100               	movlb	0	; () banked
  1403  001B64  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1404                           
  1405                           ; BSR set to: 0
  1406  001B66  C084  F080         	movff	___wmul@product,?___wmul
  1407  001B6A  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1408  001B6E  D000               	goto	l311
  1409  001B70                     l311:
  1410                           
  1411                           ; BSR set to: 0
  1412  001B70  0012               	return		;funcret
  1413  001B72                     __end_of___wmul:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           intcon	equ	0xFF2
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postinc2	equ	0xFDE
  1425                           postdec2	equ	0xFDD
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function ___awdiv *****************
  1431 ;; Defined at:
  1432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  dividend        2    0[BANK0 ] int 
  1435 ;;  divisor         2    2[BANK0 ] int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  quotient        2    6[BANK0 ] int 
  1438 ;;  sign            1    5[BANK0 ] unsigned char 
  1439 ;;  counter         1    4[BANK0 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2    0[BANK0 ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;Total ram usage:        8 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    4
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_setCorrection
  1460 ;;		_sensorComputation
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text5
  1465  0018EC                     __ptext5:
  1466                           	opt stack 0
  1467  0018EC                     ___awdiv:
  1468                           	opt stack 25
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;incstack = 0
  1472  0018EC  0E00               	movlw	0
  1473  0018EE  0100               	movlb	0	; () banked
  1474  0018F0  6F85               	movwf	___awdiv@sign& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477  0018F2  0100               	movlb	0	; () banked
  1478  0018F4  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1479  0018F6  D009               	goto	l1794
  1480                           
  1481                           ; BSR set to: 0
  1482  0018F8  0100               	movlb	0	; () banked
  1483  0018FA  6D82               	negf	___awdiv@divisor& (0+255),b
  1484  0018FC  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1485  0018FE  B0D8               	btfsc	status,0,c
  1486  001900  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489  001902  0E01               	movlw	1
  1490  001904  0100               	movlb	0	; () banked
  1491  001906  6F85               	movwf	___awdiv@sign& (0+255),b
  1492  001908  D000               	goto	l1794
  1493  00190A                     l1794:
  1494                           
  1495                           ; BSR set to: 0
  1496  00190A  0100               	movlb	0	; () banked
  1497  00190C  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1498  00190E  D009               	goto	l1800
  1499                           
  1500                           ; BSR set to: 0
  1501  001910  0100               	movlb	0	; () banked
  1502  001912  6D80               	negf	___awdiv@dividend& (0+255),b
  1503  001914  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1504  001916  B0D8               	btfsc	status,0,c
  1505  001918  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  00191A  0E01               	movlw	1
  1509  00191C  0100               	movlb	0	; () banked
  1510  00191E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1511  001920  D000               	goto	l1800
  1512  001922                     l1800:
  1513                           
  1514                           ; BSR set to: 0
  1515  001922  0E00               	movlw	0
  1516  001924  0100               	movlb	0	; () banked
  1517  001926  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1518  001928  0E00               	movlw	0
  1519  00192A  6F86               	movwf	___awdiv@quotient& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522  00192C  0100               	movlb	0	; () banked
  1523  00192E  5182               	movf	___awdiv@divisor& (0+255),w,b
  1524  001930  0100               	movlb	0	; () banked
  1525  001932  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1526  001934  B4D8               	btfsc	status,2,c
  1527  001936  D031               	goto	l1822
  1528                           
  1529                           ; BSR set to: 0
  1530  001938  0E01               	movlw	1
  1531  00193A  0100               	movlb	0	; () banked
  1532  00193C  6F84               	movwf	___awdiv@counter& (0+255),b
  1533  00193E  D007               	goto	l1808
  1534  001940                     l1806:
  1535                           
  1536                           ; BSR set to: 0
  1537  001940  0100               	movlb	0	; () banked
  1538  001942  90D8               	bcf	status,0,c
  1539  001944  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1540  001946  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1541  001948  0100               	movlb	0	; () banked
  1542  00194A  2B84               	incf	___awdiv@counter& (0+255),f,b
  1543  00194C  D000               	goto	l1808
  1544  00194E                     l1808:
  1545                           
  1546                           ; BSR set to: 0
  1547  00194E  0100               	movlb	0	; () banked
  1548  001950  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1549  001952  D002               	goto	l1810
  1550  001954  D7F5               	goto	l1806
  1551                           
  1552                           ; BSR set to: 0
  1553  001956  D000               	goto	l1810
  1554  001958                     l1810:
  1555                           
  1556                           ; BSR set to: 0
  1557  001958  0100               	movlb	0	; () banked
  1558  00195A  90D8               	bcf	status,0,c
  1559  00195C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1560  00195E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563  001960  0100               	movlb	0	; () banked
  1564  001962  5182               	movf	___awdiv@divisor& (0+255),w,b
  1565  001964  0100               	movlb	0	; () banked
  1566  001966  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1567  001968  0100               	movlb	0	; () banked
  1568  00196A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1569  00196C  0100               	movlb	0	; () banked
  1570  00196E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1571  001970  A0D8               	btfss	status,0,c
  1572  001972  D00B               	goto	l1818
  1573                           
  1574                           ; BSR set to: 0
  1575  001974  0100               	movlb	0	; () banked
  1576  001976  5182               	movf	___awdiv@divisor& (0+255),w,b
  1577  001978  0100               	movlb	0	; () banked
  1578  00197A  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1579  00197C  0100               	movlb	0	; () banked
  1580  00197E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1581  001980  0100               	movlb	0	; () banked
  1582  001982  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1583                           
  1584                           ; BSR set to: 0
  1585  001984  0100               	movlb	0	; () banked
  1586  001986  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1587  001988  D000               	goto	l1818
  1588  00198A                     l1818:
  1589                           
  1590                           ; BSR set to: 0
  1591  00198A  0100               	movlb	0	; () banked
  1592  00198C  90D8               	bcf	status,0,c
  1593  00198E  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1594  001990  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1595                           
  1596                           ; BSR set to: 0
  1597  001992  0100               	movlb	0	; () banked
  1598  001994  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1599  001996  D7E0               	goto	l1810
  1600                           
  1601                           ; BSR set to: 0
  1602  001998  D000               	goto	l1822
  1603  00199A                     l1822:
  1604                           
  1605                           ; BSR set to: 0
  1606  00199A  0100               	movlb	0	; () banked
  1607  00199C  5185               	movf	___awdiv@sign& (0+255),w,b
  1608  00199E  0100               	movlb	0	; () banked
  1609  0019A0  B4D8               	btfsc	status,2,c
  1610  0019A2  D006               	goto	l1826
  1611                           
  1612                           ; BSR set to: 0
  1613  0019A4  0100               	movlb	0	; () banked
  1614  0019A6  6D86               	negf	___awdiv@quotient& (0+255),b
  1615  0019A8  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1616  0019AA  B0D8               	btfsc	status,0,c
  1617  0019AC  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1618  0019AE  D000               	goto	l1826
  1619  0019B0                     l1826:
  1620                           
  1621                           ; BSR set to: 0
  1622  0019B0  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1623  0019B4  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1624  0019B8  D000               	goto	l504
  1625  0019BA                     l504:
  1626                           
  1627                           ; BSR set to: 0
  1628  0019BA  0012               	return		;funcret
  1629  0019BC                     __end_of___awdiv:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           prodh	equ	0xFF4
  1636                           prodl	equ	0xFF3
  1637                           intcon	equ	0xFF2
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postinc2	equ	0xFDE
  1641                           postdec2	equ	0xFDD
  1642                           fsr2h	equ	0xFDA
  1643                           fsr2l	equ	0xFD9
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _MIN *****************
  1647 ;; Defined at:
  1648 ;;		line 184 in file "user.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  a               2    6[BANK0 ] int 
  1651 ;;  b               2    8[BANK0 ] int 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  2    6[BANK0 ] int 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_sensorComputation
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text6
  1678  001B72                     __ptext6:
  1679                           	opt stack 0
  1680  001B72                     _MIN:
  1681                           	opt stack 24
  1682                           
  1683                           ;user.c: 186: if(a>b) return b;
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;incstack = 0
  1687  001B72  0100               	movlb	0	; () banked
  1688  001B74  5186               	movf	MIN@a& (0+255),w,b
  1689  001B76  0100               	movlb	0	; () banked
  1690  001B78  5D88               	subwf	MIN@b& (0+255),w,b
  1691  001B7A  0100               	movlb	0	; () banked
  1692  001B7C  5189               	movf	(MIN@b+1)& (0+255),w,b
  1693  001B7E  0A80               	xorlw	128
  1694  001B80  0100               	movlb	0	; () banked
  1695  001B82  6F8A               	movwf	??_MIN& (0+255),b
  1696  001B84  0100               	movlb	0	; () banked
  1697  001B86  5187               	movf	(MIN@a+1)& (0+255),w,b
  1698  001B88  0A80               	xorlw	128
  1699  001B8A  0100               	movlb	0	; () banked
  1700  001B8C  598A               	subwfb	??_MIN& (0+255),w,b
  1701  001B8E  B0D8               	btfsc	status,0,c
  1702  001B90  D005               	goto	l303
  1703                           
  1704                           ; BSR set to: 0
  1705  001B92  C088  F086         	movff	MIN@b,?_MIN
  1706  001B96  C089  F087         	movff	MIN@b+1,?_MIN+1
  1707  001B9A  D004               	goto	l304
  1708  001B9C                     l303:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;user.c: 187: return a;
  1712  001B9C  C086  F086         	movff	MIN@a,?_MIN
  1713  001BA0  C087  F087         	movff	MIN@a+1,?_MIN+1
  1714  001BA4                     l304:
  1715                           
  1716                           ; BSR set to: 0
  1717  001BA4  0012               	return		;funcret
  1718  001BA6                     __end_of_MIN:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postinc2	equ	0xFDE
  1730                           postdec2	equ	0xFDD
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _MAX *****************
  1736 ;; Defined at:
  1737 ;;		line 190 in file "user.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  a               2    6[BANK0 ] int 
  1740 ;;  b               2    8[BANK0 ] int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    6[BANK0 ] int 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;Total ram usage:        5 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    4
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_sensorComputation
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text7
  1767  001BA6                     __ptext7:
  1768                           	opt stack 0
  1769  001BA6                     _MAX:
  1770                           	opt stack 24
  1771                           
  1772                           ;user.c: 192: if(a>b) return a;
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;incstack = 0
  1776  001BA6  0100               	movlb	0	; () banked
  1777  001BA8  5186               	movf	MAX@a& (0+255),w,b
  1778  001BAA  0100               	movlb	0	; () banked
  1779  001BAC  5D88               	subwf	MAX@b& (0+255),w,b
  1780  001BAE  0100               	movlb	0	; () banked
  1781  001BB0  5189               	movf	(MAX@b+1)& (0+255),w,b
  1782  001BB2  0A80               	xorlw	128
  1783  001BB4  0100               	movlb	0	; () banked
  1784  001BB6  6F8A               	movwf	??_MAX& (0+255),b
  1785  001BB8  0100               	movlb	0	; () banked
  1786  001BBA  5187               	movf	(MAX@a+1)& (0+255),w,b
  1787  001BBC  0A80               	xorlw	128
  1788  001BBE  0100               	movlb	0	; () banked
  1789  001BC0  598A               	subwfb	??_MAX& (0+255),w,b
  1790  001BC2  B0D8               	btfsc	status,0,c
  1791  001BC4  D005               	goto	l307
  1792                           
  1793                           ; BSR set to: 0
  1794  001BC6  C086  F086         	movff	MAX@a,?_MAX
  1795  001BCA  C087  F087         	movff	MAX@a+1,?_MAX+1
  1796  001BCE  D004               	goto	l308
  1797  001BD0                     l307:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;user.c: 193: return b;
  1801  001BD0  C088  F086         	movff	MAX@b,?_MAX
  1802  001BD4  C089  F087         	movff	MAX@b+1,?_MAX+1
  1803  001BD8                     l308:
  1804                           
  1805                           ; BSR set to: 0
  1806  001BD8  0012               	return		;funcret
  1807  001BDA                     __end_of_MAX:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           intcon	equ	0xFF2
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _InitApp *****************
  1825 ;; Defined at:
  1826 ;;		line 35 in file "user.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    5
  1847 ;; This function calls:
  1848 ;;		_AlgorithmSelection
  1849 ;;		_delay
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text8
  1856  001AC2                     __ptext8:
  1857                           	opt stack 0
  1858  001AC2                     _InitApp:
  1859                           	opt stack 25
  1860                           
  1861                           ;user.c: 39: TRISC = 0;
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  001AC2  0E00               	movlw	0
  1866  001AC4  6E94               	movwf	3988,c	;volatile
  1867                           
  1868                           ;user.c: 43: TRISEbits.TRISE1=1;
  1869  001AC6  8296               	bsf	3990,1,c	;volatile
  1870                           
  1871                           ;user.c: 45: TRISEbits.TRISE2=1;
  1872  001AC8  8496               	bsf	3990,2,c	;volatile
  1873                           
  1874                           ;user.c: 47: TRISBbits.RB1=1;
  1875  001ACA  8293               	bsf	3987,1,c	;volatile
  1876                           
  1877                           ;user.c: 49: TRISBbits.RB0=1;
  1878  001ACC  8093               	bsf	3987,0,c	;volatile
  1879                           
  1880                           ;user.c: 52: TRISBbits.RB3=1;
  1881  001ACE  8693               	bsf	3987,3,c	;volatile
  1882                           
  1883                           ;user.c: 54: TRISBbits.RB2=1;
  1884  001AD0  8493               	bsf	3987,2,c	;volatile
  1885                           
  1886                           ;user.c: 58: ADCON1 =0b00000001;
  1887  001AD2  0E01               	movlw	1
  1888  001AD4  6EC1               	movwf	4033,c	;volatile
  1889                           
  1890                           ;user.c: 63: ADCON2=0b00001010;
  1891  001AD6  0E0A               	movlw	10
  1892  001AD8  6EC0               	movwf	4032,c	;volatile
  1893                           
  1894                           ;user.c: 68: ADCON0=0b00101011;
  1895  001ADA  0E2B               	movlw	43
  1896  001ADC  6EC2               	movwf	4034,c	;volatile
  1897                           
  1898                           ;user.c: 77: T0CON = 0b11000100;
  1899  001ADE  0EC4               	movlw	196
  1900  001AE0  6ED5               	movwf	4053,c	;volatile
  1901                           
  1902                           ;user.c: 85: INTCON2 = 0b11110100;
  1903  001AE2  0EF4               	movlw	244
  1904  001AE4  6EF1               	movwf	intcon2,c	;volatile
  1905                           
  1906                           ;user.c: 95: INTCON = 0b00100000;
  1907  001AE6  0E20               	movlw	32
  1908  001AE8  6EF2               	movwf	intcon,c	;volatile
  1909                           
  1910                           ;user.c: 105: AlgorithmSelection();
  1911  001AEA  EC12  F00E         	call	_AlgorithmSelection	;wreg free
  1912                           
  1913                           ;user.c: 108: delay(1000);
  1914  001AEE  0E03               	movlw	3
  1915  001AF0  0100               	movlb	0	; () banked
  1916  001AF2  6F81               	movwf	(delay@ms+1)& (0+255),b
  1917  001AF4  0EE8               	movlw	232
  1918  001AF6  6F80               	movwf	delay@ms& (0+255),b
  1919  001AF8  EC3F  F00D         	call	_delay	;wreg free
  1920  001AFC  0012               	return		;funcret
  1921  001AFE                     __end_of_InitApp:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon	equ	0xFF2
  1930                           intcon2	equ	0xFF1
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _delay *****************
  1940 ;; Defined at:
  1941 ;;		line 29 in file "user.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  ms              2    0[BANK0 ] unsigned int 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  x               2    3[BANK0 ] int 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;Total ram usage:        5 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    4
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_InitApp
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text9
  1970  001A7E                     __ptext9:
  1971                           	opt stack 0
  1972  001A7E                     _delay:
  1973                           	opt stack 25
  1974                           
  1975                           ;user.c: 30: int x = 0;
  1976                           
  1977                           ;incstack = 0
  1978  001A7E  0E00               	movlw	0
  1979  001A80  0100               	movlb	0	; () banked
  1980  001A82  6F84               	movwf	(delay@x+1)& (0+255),b
  1981  001A84  0E00               	movlw	0
  1982  001A86  6F83               	movwf	delay@x& (0+255),b
  1983                           
  1984                           ;user.c: 31: for (x = 0; x < ms; x++)
  1985  001A88  0E00               	movlw	0
  1986  001A8A  0100               	movlb	0	; () banked
  1987  001A8C  6F84               	movwf	(delay@x+1)& (0+255),b
  1988  001A8E  0E00               	movlw	0
  1989  001A90  6F83               	movwf	delay@x& (0+255),b
  1990  001A92  D00C               	goto	l262
  1991  001A94                     l1832:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1995  001A94  0E0B               	movlw	11
  1996  001A96  0100               	movlb	0	; () banked
  1997  001A98  6F82               	movwf	??_delay& (0+255),b
  1998  001A9A  0E62               	movlw	98
  1999  001A9C                     u1667:
  2000  001A9C  2EE8               	decfsz	wreg,f,c
  2001  001A9E  D7FE               	goto	u1667
  2002  001AA0  2F82               	decfsz	??_delay& (0+255),f,b
  2003  001AA2  D7FC               	goto	u1667
  2004  001AA4  D000               	nop2	
  2005  001AA6  0100               	movlb	0	; () banked
  2006  001AA8  4B83               	infsnz	delay@x& (0+255),f,b
  2007  001AAA  2B84               	incf	(delay@x+1)& (0+255),f,b
  2008  001AAC                     l262:
  2009                           
  2010                           ; BSR set to: 0
  2011  001AAC  0100               	movlb	0	; () banked
  2012  001AAE  5180               	movf	delay@ms& (0+255),w,b
  2013  001AB0  0100               	movlb	0	; () banked
  2014  001AB2  5D83               	subwf	delay@x& (0+255),w,b
  2015  001AB4  0100               	movlb	0	; () banked
  2016  001AB6  5181               	movf	(delay@ms+1)& (0+255),w,b
  2017  001AB8  0100               	movlb	0	; () banked
  2018  001ABA  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2019  001ABC  A0D8               	btfss	status,0,c
  2020  001ABE  D7EA               	goto	l1832
  2021                           
  2022                           ; BSR set to: 0
  2023                           
  2024                           ; BSR set to: 0
  2025  001AC0  0012               	return		;funcret
  2026  001AC2                     __end_of_delay:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           intcon	equ	0xFF2
  2035                           intcon2	equ	0xFF1
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _AlgorithmSelection *****************
  2045 ;; Defined at:
  2046 ;;		line 112 in file "user.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    4
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_InitApp
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text10
  2075  001C24                     __ptext10:
  2076                           	opt stack 0
  2077  001C24                     _AlgorithmSelection:
  2078                           	opt stack 25
  2079                           
  2080                           ;user.c: 114: ADCON0 = 0b00100111;
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;incstack = 0
  2084  001C24  0E27               	movlw	39
  2085  001C26  6EC2               	movwf	4034,c	;volatile
  2086                           
  2087                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2088  001C28  82C2               	bsf	4034,1,c	;volatile
  2089                           
  2090                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2091  001C2A  D000               	goto	l271
  2092  001C2C                     l271:
  2093  001C2C  B2C2               	btfsc	4034,1,c	;volatile
  2094  001C2E  D7FE               	goto	l271
  2095                           
  2096                           ;user.c: 119: if(ADRESL > 0b10000000)
  2097  001C30  0E80               	movlw	128
  2098  001C32  64C3               	cpfsgt	4035,c	;volatile
  2099  001C34  D002               	goto	l1844
  2100                           
  2101                           ;user.c: 120: algorithm = LEFTWALL;
  2102  001C36  0E00               	movlw	0
  2103  001C38  D001               	goto	L5
  2104  001C3A                     l1844:
  2105                           
  2106                           ;user.c: 121: else
  2107                           ;user.c: 122: algorithm = RIGHTWALL;
  2108  001C3A  0E01               	movlw	1
  2109  001C3C                     L5:
  2110  001C3C  6E35               	movwf	_algorithm,c
  2111  001C3E  D000               	goto	l276
  2112  001C40                     l276:
  2113  001C40  0012               	return		;funcret
  2114  001C42                     __end_of_AlgorithmSelection:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           prodh	equ	0xFF4
  2121                           prodl	equ	0xFF3
  2122                           intcon	equ	0xFF2
  2123                           intcon2	equ	0xFF1
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _ConfigureOscillator *****************
  2133 ;; Defined at:
  2134 ;;		line 24 in file "system.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		wreg, status,2
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    4
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text11
  2163  001CA4                     __ptext11:
  2164                           	opt stack 0
  2165  001CA4                     _ConfigureOscillator:
  2166                           	opt stack 26
  2167                           
  2168                           ;system.c: 29: OSCCON = 0b01111100;
  2169                           
  2170                           ;incstack = 0
  2171  001CA4  0E7C               	movlw	124
  2172  001CA6  6ED3               	movwf	4051,c	;volatile
  2173                           
  2174                           ;system.c: 31: OSCTUNE = 0b01001111;
  2175  001CA8  0E4F               	movlw	79
  2176  001CAA  6E9B               	movwf	3995,c	;volatile
  2177  001CAC  0012               	return		;funcret
  2178  001CAE                     __end_of_ConfigureOscillator:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           intcon	equ	0xFF2
  2187                           intcon2	equ	0xFF1
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _low_isr *****************
  2197 ;; Defined at:
  2198 ;;		line 234 in file "interrupts.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;		None               void
  2205 ;; Registers used:
  2206 ;;		None
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:       17 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    3
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		Interrupt level 1
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	intcodelo
  2227  000018                     __pintcodelo:
  2228                           	opt stack 0
  2229  000018                     _low_isr:
  2230                           	opt stack 24
  2231                           
  2232                           ;incstack = 0
  2233  000018  CFD8 F038          	movff	status,??_low_isr
  2234  00001C  CFE8 F039          	movff	wreg,??_low_isr+1
  2235  000020  CFE0 F03A          	movff	bsr,??_low_isr+2
  2236  000024  CFFA F03B          	movff	pclath,??_low_isr+3
  2237  000028  CFFB F03C          	movff	pclatu,??_low_isr+4
  2238  00002C  CFE9 F03D          	movff	fsr0l,??_low_isr+5
  2239  000030  CFEA F03E          	movff	fsr0h,??_low_isr+6
  2240  000034  CFE1 F03F          	movff	fsr1l,??_low_isr+7
  2241  000038  CFE2 F040          	movff	fsr1h,??_low_isr+8
  2242  00003C  CFD9 F041          	movff	fsr2l,??_low_isr+9
  2243  000040  CFDA F042          	movff	fsr2h,??_low_isr+10
  2244  000044  CFF3 F043          	movff	prodl,??_low_isr+11
  2245  000048  CFF4 F044          	movff	prodh,??_low_isr+12
  2246  00004C  CFF6 F045          	movff	tblptrl,??_low_isr+13
  2247  000050  CFF7 F046          	movff	tblptrh,??_low_isr+14
  2248  000054  CFF8 F047          	movff	tblptru,??_low_isr+15
  2249  000058  CFF5 F048          	movff	tablat,??_low_isr+16
  2250  00005C  C048  FFF5         	movff	??_low_isr+16,tablat
  2251  000060  C047  FFF8         	movff	??_low_isr+15,tblptru
  2252  000064  C046  FFF7         	movff	??_low_isr+14,tblptrh
  2253  000068  C045  FFF6         	movff	??_low_isr+13,tblptrl
  2254  00006C  C044  FFF4         	movff	??_low_isr+12,prodh
  2255  000070  C043  FFF3         	movff	??_low_isr+11,prodl
  2256  000074  C042  FFDA         	movff	??_low_isr+10,fsr2h
  2257  000078  C041  FFD9         	movff	??_low_isr+9,fsr2l
  2258  00007C  C040  FFE2         	movff	??_low_isr+8,fsr1h
  2259  000080  C03F  FFE1         	movff	??_low_isr+7,fsr1l
  2260  000084  C03E  FFEA         	movff	??_low_isr+6,fsr0h
  2261  000088  C03D  FFE9         	movff	??_low_isr+5,fsr0l
  2262  00008C  C03C  FFFB         	movff	??_low_isr+4,pclatu
  2263  000090  C03B  FFFA         	movff	??_low_isr+3,pclath
  2264  000094  C03A  FFE0         	movff	??_low_isr+2,bsr
  2265  000098  C039  FFE8         	movff	??_low_isr+1,wreg
  2266  00009C  C038  FFD8         	movff	??_low_isr,status
  2267  0000A0  0010               	retfie	
  2268  0000A2                     __end_of_low_isr:
  2269                           	opt stack 0
  2270                           pclatu	equ	0xFFB
  2271                           pclath	equ	0xFFA
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           intcon2	equ	0xFF1
  2280                           postinc0	equ	0xFEE
  2281                           fsr0h	equ	0xFEA
  2282                           fsr0l	equ	0xFE9
  2283                           wreg	equ	0xFE8
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           bsr	equ	0xFE0
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _high_isr *****************
  2294 ;; Defined at:
  2295 ;;		line 99 in file "interrupts.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:       14 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    2
  2316 ;; This function calls:
  2317 ;;		_KController
  2318 ;;		_Reversing
  2319 ;;		_forward
  2320 ;;		_merge
  2321 ;;		_motorCounterUpdate
  2322 ;;		_moveMouse
  2323 ;;		_rotate
  2324 ;; This function is called by:
  2325 ;;		Interrupt level 2
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	intcode
  2330  000008                     __pintcode:
  2331                           	opt stack 0
  2332  000008                     _high_isr:
  2333                           	opt stack 24
  2334                           
  2335                           ;incstack = 0
  2336  000008  CFFA F050          	movff	pclath,??_high_isr
  2337  00000C  CFFB F051          	movff	pclatu,??_high_isr+1
  2338  000010  CFE9 F052          	movff	fsr0l,??_high_isr+2
  2339  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2340                           pclatu	equ	0xFFB
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           intcon2	equ	0xFF1
  2350                           postinc0	equ	0xFEE
  2351                           fsr0h	equ	0xFEA
  2352                           fsr0l	equ	0xFE9
  2353                           wreg	equ	0xFE8
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           bsr	equ	0xFE0
  2357                           postinc2	equ	0xFDE
  2358                           postdec2	equ	0xFDD
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363                           	psect	intcode_body
  2364  001006                     __pintcode_body:
  2365                           	opt stack 24
  2366  001006                     int_func:
  2367                           	opt stack 24
  2368  001006  0006               	pop		; remove dummy address from shadow register refresh
  2369  001008  CFEA F053          	movff	fsr0h,??_high_isr+3
  2370  00100C  CFE1 F054          	movff	fsr1l,??_high_isr+4
  2371  001010  CFE2 F055          	movff	fsr1h,??_high_isr+5
  2372  001014  CFD9 F056          	movff	fsr2l,??_high_isr+6
  2373  001018  CFDA F057          	movff	fsr2h,??_high_isr+7
  2374  00101C  CFF3 F058          	movff	prodl,??_high_isr+8
  2375  001020  CFF4 F059          	movff	prodh,??_high_isr+9
  2376  001024  CFF6 F05A          	movff	tblptrl,??_high_isr+10
  2377  001028  CFF7 F05B          	movff	tblptrh,??_high_isr+11
  2378  00102C  CFF8 F05C          	movff	tblptru,??_high_isr+12
  2379  001030  CFF5 F05D          	movff	tablat,??_high_isr+13
  2380                           
  2381                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2382  001034  A4F2               	btfss	intcon,2,c	;volatile
  2383  001036  D158               	goto	i2l106
  2384                           
  2385                           ;interrupts.c: 119: {
  2386                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2387  001038  BE1A               	btfsc	_MotorDelayCounter+1,7,c
  2388  00103A  D152               	goto	i2l1744
  2389  00103C  501A               	movf	_MotorDelayCounter+1,w,c
  2390  00103E  E104               	bnz	i2u110_40
  2391  001040  0E03               	movlw	3
  2392  001042  5C19               	subwf	_MotorDelayCounter,w,c
  2393  001044  A0D8               	btfss	status,0,c
  2394  001046  D14C               	goto	i2l1744
  2395  001048                     i2u110_40:
  2396                           
  2397                           ;interrupts.c: 121: {
  2398                           ;interrupts.c: 123: if(ignoreControll > 0){
  2399  001048  505E               	movf	_ignoreControll,w,c
  2400  00104A  B4D8               	btfsc	status,2,c
  2401  00104C  D015               	goto	i2l1642
  2402                           
  2403                           ;interrupts.c: 124: KController();
  2404  00104E  ECDE  F00C         	call	_KController	;wreg free
  2405                           
  2406                           ;interrupts.c: 125: if (sensorValue[3] > 100 && sensorValue[2] > 100){
  2407  001052  BE10               	btfsc	_sensorValue+7,7,c
  2408  001054  D139               	goto	i2l1742
  2409  001056  5010               	movf	_sensorValue+7,w,c
  2410  001058  E104               	bnz	i2u112_40
  2411  00105A  0E65               	movlw	101
  2412  00105C  5C0F               	subwf	_sensorValue+6,w,c
  2413  00105E  A0D8               	btfss	status,0,c
  2414  001060  D133               	goto	i2l1742
  2415  001062                     i2u112_40:
  2416  001062  BE0E               	btfsc	_sensorValue+5,7,c
  2417  001064  D131               	goto	i2l1742
  2418  001066  500E               	movf	_sensorValue+5,w,c
  2419  001068  E104               	bnz	i2u113_40
  2420  00106A  0E65               	movlw	101
  2421  00106C  5C0D               	subwf	_sensorValue+4,w,c
  2422  00106E  A0D8               	btfss	status,0,c
  2423  001070  D12B               	goto	i2l1742
  2424  001072                     i2u113_40:
  2425                           
  2426                           ;interrupts.c: 126: ignoreControll = 0;
  2427  001072  0E00               	movlw	0
  2428  001074  6E5E               	movwf	_ignoreControll,c
  2429                           
  2430                           ;interrupts.c: 127: }
  2431                           ;interrupts.c: 129: }
  2432  001076  D128               	goto	i2l1742
  2433  001078                     i2l1642:
  2434                           
  2435                           ;interrupts.c: 131: else if (ForwardCounter > 0) {
  2436  001078  BE16               	btfsc	_ForwardCounter+1,7,c
  2437  00107A  D008               	goto	i2l1646
  2438  00107C  5016               	movf	_ForwardCounter+1,w,c
  2439  00107E  E103               	bnz	i2u114_40
  2440  001080  0415               	decf	_ForwardCounter,w,c
  2441  001082  A0D8               	btfss	status,0,c
  2442  001084  D003               	goto	i2l1646
  2443  001086                     i2u114_40:
  2444                           
  2445                           ;interrupts.c: 132: forward();
  2446  001086  EC21  F00E         	call	_forward	;wreg free
  2447                           
  2448                           ;interrupts.c: 139: }
  2449  00108A  D11E               	goto	i2l1742
  2450  00108C                     i2l1646:
  2451                           
  2452                           ;interrupts.c: 141: else if (ReverseCounter > 0) {
  2453  00108C  BE1E               	btfsc	_ReverseCounter+1,7,c
  2454  00108E  D008               	goto	i2l1650
  2455  001090  501E               	movf	_ReverseCounter+1,w,c
  2456  001092  E103               	bnz	i2u115_40
  2457  001094  041D               	decf	_ReverseCounter,w,c
  2458  001096  A0D8               	btfss	status,0,c
  2459  001098  D003               	goto	i2l1650
  2460  00109A                     i2u115_40:
  2461                           
  2462                           ;interrupts.c: 142: Reversing();
  2463  00109A  EC2F  F00E         	call	_Reversing	;wreg free
  2464                           
  2465                           ;interrupts.c: 143: }
  2466  00109E  D114               	goto	i2l1742
  2467  0010A0                     i2l1650:
  2468                           
  2469                           ;interrupts.c: 145: else if(RotateCounter > 0) {
  2470  0010A0  BE20               	btfsc	_RotateCounter+1,7,c
  2471  0010A2  D03A               	goto	i2l1672
  2472  0010A4  5020               	movf	_RotateCounter+1,w,c
  2473  0010A6  E103               	bnz	i2u116_40
  2474  0010A8  041F               	decf	_RotateCounter,w,c
  2475  0010AA  A0D8               	btfss	status,0,c
  2476  0010AC  D035               	goto	i2l1672
  2477  0010AE                     i2u116_40:
  2478                           
  2479                           ;interrupts.c: 147: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2480  0010AE  BE0E               	btfsc	_sensorValue+5,7,c
  2481  0010B0  D006               	goto	i2l1654
  2482  0010B2  0E21               	movlw	33
  2483  0010B4  5C0D               	subwf	_sensorValue+4,w,c
  2484  0010B6  0E03               	movlw	3
  2485  0010B8  580E               	subwfb	_sensorValue+5,w,c
  2486  0010BA  B0D8               	btfsc	status,0,c
  2487  0010BC  D008               	goto	i2l1656
  2488  0010BE                     i2l1654:
  2489  0010BE  BE10               	btfsc	_sensorValue+7,7,c
  2490  0010C0  D00D               	goto	i2l1660
  2491  0010C2  0E21               	movlw	33
  2492  0010C4  5C0F               	subwf	_sensorValue+6,w,c
  2493  0010C6  0E03               	movlw	3
  2494  0010C8  5810               	subwfb	_sensorValue+7,w,c
  2495  0010CA  A0D8               	btfss	status,0,c
  2496  0010CC  D007               	goto	i2l1660
  2497  0010CE                     i2l1656:
  2498                           
  2499                           ;interrupts.c: 148: ReverseCounter = 15;
  2500  0010CE  0E00               	movlw	0
  2501  0010D0  6E1E               	movwf	_ReverseCounter+1,c
  2502  0010D2  0E0F               	movlw	15
  2503  0010D4  6E1D               	movwf	_ReverseCounter,c
  2504                           
  2505                           ;interrupts.c: 149: Reversing();
  2506  0010D6  EC2F  F00E         	call	_Reversing	;wreg free
  2507                           
  2508                           ;interrupts.c: 150: }
  2509  0010DA  D0F6               	goto	i2l1742
  2510  0010DC                     i2l1660:
  2511                           
  2512                           ;interrupts.c: 151: else if(sensorValue[2] < 100 && sensorValue[3] < 100)
  2513  0010DC  BE0E               	btfsc	_sensorValue+5,7,c
  2514  0010DE  D006               	goto	i2l1662
  2515  0010E0  500E               	movf	_sensorValue+5,w,c
  2516  0010E2  E111               	bnz	i2l1666
  2517  0010E4  0E64               	movlw	100
  2518  0010E6  5C0D               	subwf	_sensorValue+4,w,c
  2519  0010E8  B0D8               	btfsc	status,0,c
  2520  0010EA  D00D               	goto	i2l1666
  2521  0010EC                     i2l1662:
  2522  0010EC  BE10               	btfsc	_sensorValue+7,7,c
  2523  0010EE  D006               	goto	i2l1664
  2524  0010F0  5010               	movf	_sensorValue+7,w,c
  2525  0010F2  E109               	bnz	i2l1666
  2526  0010F4  0E64               	movlw	100
  2527  0010F6  5C0F               	subwf	_sensorValue+6,w,c
  2528  0010F8  B0D8               	btfsc	status,0,c
  2529  0010FA  D005               	goto	i2l1666
  2530  0010FC                     i2l1664:
  2531                           
  2532                           ;interrupts.c: 152: RotateCounter = 20;
  2533  0010FC  0E00               	movlw	0
  2534  0010FE  6E20               	movwf	_RotateCounter+1,c
  2535  001100  0E14               	movlw	20
  2536  001102  6E1F               	movwf	_RotateCounter,c
  2537  001104  D0E1               	goto	i2l1742
  2538  001106                     i2l1666:
  2539                           
  2540                           ;interrupts.c: 153: else{
  2541                           ;interrupts.c: 154: rotate(rotatingSide);
  2542  001106  5037               	movf	_rotatingSide,w,c
  2543  001108  EC7F  F00D         	call	_rotate
  2544                           
  2545                           ;interrupts.c: 155: TurnRight = 0;
  2546  00110C  0E00               	movlw	0
  2547  00110E  6E24               	movwf	_TurnRight+1,c
  2548  001110  0E00               	movlw	0
  2549  001112  6E23               	movwf	_TurnRight,c
  2550  001114  D00D               	goto	L6
  2551                           
  2552                           ;interrupts.c: 157: }
  2553                           ;interrupts.c: 158: }
  2554                           
  2555                           ;interrupts.c: 156: TurnLeft = 0;
  2556  001116  D0D8               	goto	i2l1742
  2557  001118                     i2l1672:
  2558                           
  2559                           ;interrupts.c: 160: else if (TurnLeft == 1){
  2560  001118  0421               	decf	_TurnLeft,w,c
  2561  00111A  1022               	iorwf	_TurnLeft+1,w,c
  2562  00111C  A4D8               	btfss	status,2,c
  2563  00111E  D00D               	goto	i2l1676
  2564                           
  2565                           ;interrupts.c: 161: RotateCounter = 170;
  2566  001120  0E00               	movlw	0
  2567  001122  6E20               	movwf	_RotateCounter+1,c
  2568  001124  0EAA               	movlw	170
  2569  001126  6E1F               	movwf	_RotateCounter,c
  2570                           
  2571                           ;interrupts.c: 162: rotatingSide = LEFT;
  2572  001128  0E00               	movlw	0
  2573  00112A  6E37               	movwf	_rotatingSide,c
  2574                           
  2575                           ;interrupts.c: 163: justTurned = 1;
  2576  00112C  0E01               	movlw	1
  2577  00112E  6E36               	movwf	_justTurned,c
  2578  001130                     L6:
  2579                           
  2580                           ;interrupts.c: 164: TurnLeft = 0;
  2581  001130  0E00               	movlw	0
  2582  001132  6E22               	movwf	_TurnLeft+1,c
  2583  001134  0E00               	movlw	0
  2584  001136  6E21               	movwf	_TurnLeft,c
  2585                           
  2586                           ;interrupts.c: 165: }
  2587  001138  D0C7               	goto	i2l1742
  2588  00113A                     i2l1676:
  2589                           
  2590                           ;interrupts.c: 167: else if (TurnRight == 1 && sensorValue[3] > 480 - 40 && sensorValue[
      +                          2] > 480 - 40) {
  2591  00113A  0423               	decf	_TurnRight,w,c
  2592  00113C  1024               	iorwf	_TurnRight+1,w,c
  2593  00113E  B4D8               	btfsc	status,2,c
  2594  001140  BE10               	btfsc	_sensorValue+7,7,c
  2595  001142  D016               	goto	i2l1684
  2596  001144  0EB9               	movlw	185
  2597  001146  5C0F               	subwf	_sensorValue+6,w,c
  2598  001148  0E01               	movlw	1
  2599  00114A  5810               	subwfb	_sensorValue+7,w,c
  2600  00114C  B0D8               	btfsc	status,0,c
  2601  00114E  BE0E               	btfsc	_sensorValue+5,7,c
  2602  001150  D00F               	goto	i2l1684
  2603  001152  0EB9               	movlw	185
  2604  001154  5C0D               	subwf	_sensorValue+4,w,c
  2605  001156  0E01               	movlw	1
  2606  001158  580E               	subwfb	_sensorValue+5,w,c
  2607  00115A  A0D8               	btfss	status,0,c
  2608  00115C  D009               	goto	i2l1684
  2609                           
  2610                           ;interrupts.c: 168: RotateCounter = 170;
  2611  00115E  0E00               	movlw	0
  2612  001160  6E20               	movwf	_RotateCounter+1,c
  2613  001162  0EAA               	movlw	170
  2614  001164  6E1F               	movwf	_RotateCounter,c
  2615                           
  2616                           ;interrupts.c: 169: rotatingSide = RIGHT;
  2617  001166  0E01               	movlw	1
  2618  001168  6E37               	movwf	_rotatingSide,c
  2619                           
  2620                           ;interrupts.c: 170: justTurned = 1;
  2621  00116A  0E01               	movlw	1
  2622  00116C  6E36               	movwf	_justTurned,c
  2623  00116E  D0A7               	goto	i2l1740
  2624  001170                     i2l1684:
  2625                           
  2626                           ;interrupts.c: 174: else if (sensorValue[0] < 95 && algorithm == LEFTWALL) {
  2627  001170  BE0A               	btfsc	_sensorValue+1,7,c
  2628  001172  D006               	goto	i2l1686
  2629  001174  500A               	movf	_sensorValue+1,w,c
  2630  001176  E11A               	bnz	i2l1696
  2631  001178  0E5F               	movlw	95
  2632  00117A  5C09               	subwf	_sensorValue,w,c
  2633  00117C  B0D8               	btfsc	status,0,c
  2634  00117E  D016               	goto	i2l1696
  2635  001180                     i2l1686:
  2636  001180  5035               	movf	_algorithm,w,c
  2637  001182  A4D8               	btfss	status,2,c
  2638  001184  D013               	goto	i2l1696
  2639                           
  2640                           ;interrupts.c: 175: TurnLeft = 1;
  2641  001186  0E00               	movlw	0
  2642  001188  6E22               	movwf	_TurnLeft+1,c
  2643  00118A  0E01               	movlw	1
  2644  00118C  6E21               	movwf	_TurnLeft,c
  2645                           
  2646                           ;interrupts.c: 176: if(justTurned == 0) {
  2647  00118E  5036               	movf	_justTurned,w,c
  2648  001190  A4D8               	btfss	status,2,c
  2649  001192  D004               	goto	i2l1692
  2650                           
  2651                           ;interrupts.c: 177: ForwardCounter = 450;
  2652  001194  0E01               	movlw	1
  2653  001196  6E16               	movwf	_ForwardCounter+1,c
  2654  001198  0EC2               	movlw	194
  2655  00119A  D003               	goto	L7
  2656  00119C                     i2l1692:
  2657                           
  2658                           ;interrupts.c: 179: ForwardCounter = 410;
  2659  00119C  0E01               	movlw	1
  2660  00119E  6E16               	movwf	_ForwardCounter+1,c
  2661  0011A0  0E9A               	movlw	154
  2662  0011A2                     L7:
  2663  0011A2  6E15               	movwf	_ForwardCounter,c
  2664  0011A4  D000               	goto	i2l1694
  2665  0011A6                     i2l1694:
  2666                           
  2667                           ;interrupts.c: 180: }
  2668                           ;interrupts.c: 181: forward();
  2669  0011A6  EC21  F00E         	call	_forward	;wreg free
  2670                           
  2671                           ;interrupts.c: 182: }
  2672  0011AA  D08E               	goto	i2l1742
  2673  0011AC                     i2l1696:
  2674                           
  2675                           ;interrupts.c: 184: else if (sensorValue[1] < 95 && sensorValue[0] > 95 && algorithm == 
      +                          LEFTWALL) {
  2676  0011AC  BE0C               	btfsc	_sensorValue+3,7,c
  2677  0011AE  D006               	goto	i2l1698
  2678  0011B0  500C               	movf	_sensorValue+3,w,c
  2679  0011B2  E122               	bnz	i2l1710
  2680  0011B4  0E5F               	movlw	95
  2681  0011B6  5C0B               	subwf	_sensorValue+2,w,c
  2682  0011B8  B0D8               	btfsc	status,0,c
  2683  0011BA  D01E               	goto	i2l1710
  2684  0011BC                     i2l1698:
  2685  0011BC  BE0A               	btfsc	_sensorValue+1,7,c
  2686  0011BE  D01C               	goto	i2l1710
  2687  0011C0  500A               	movf	_sensorValue+1,w,c
  2688  0011C2  E104               	bnz	i2u129_40
  2689  0011C4  0E60               	movlw	96
  2690  0011C6  5C09               	subwf	_sensorValue,w,c
  2691  0011C8  A0D8               	btfss	status,0,c
  2692  0011CA  D016               	goto	i2l1710
  2693  0011CC                     i2u129_40:
  2694  0011CC  5035               	movf	_algorithm,w,c
  2695  0011CE  A4D8               	btfss	status,2,c
  2696  0011D0  D013               	goto	i2l1710
  2697                           
  2698                           ;interrupts.c: 185: TurnRight = 1;
  2699  0011D2  0E00               	movlw	0
  2700  0011D4  6E24               	movwf	_TurnRight+1,c
  2701  0011D6  0E01               	movlw	1
  2702  0011D8  6E23               	movwf	_TurnRight,c
  2703                           
  2704                           ;interrupts.c: 186: if(justTurned == 0) {
  2705  0011DA  5036               	movf	_justTurned,w,c
  2706  0011DC  A4D8               	btfss	status,2,c
  2707  0011DE  D004               	goto	i2l1706
  2708                           
  2709                           ;interrupts.c: 187: ForwardCounter = 430;
  2710  0011E0  0E01               	movlw	1
  2711  0011E2  6E16               	movwf	_ForwardCounter+1,c
  2712  0011E4  0EAE               	movlw	174
  2713  0011E6  D003               	goto	L8
  2714  0011E8                     i2l1706:
  2715                           
  2716                           ;interrupts.c: 189: ForwardCounter = 390;
  2717  0011E8  0E01               	movlw	1
  2718  0011EA  6E16               	movwf	_ForwardCounter+1,c
  2719  0011EC  0E86               	movlw	134
  2720  0011EE                     L8:
  2721  0011EE  6E15               	movwf	_ForwardCounter,c
  2722  0011F0  D000               	goto	i2l1708
  2723  0011F2                     i2l1708:
  2724                           
  2725                           ;interrupts.c: 190: }
  2726                           ;interrupts.c: 191: forward();
  2727  0011F2  EC21  F00E         	call	_forward	;wreg free
  2728                           
  2729                           ;interrupts.c: 192: }
  2730  0011F6  D068               	goto	i2l1742
  2731  0011F8                     i2l1710:
  2732                           
  2733                           ;interrupts.c: 194: else if ((sensorValue[0] > 95 && sensorValue[1] > 95 )
  2734                           ;interrupts.c: 195: && (sensorValue[3] > 480 && sensorValue[2] > 480) && RotateCounter <
      +                          = 0)
  2735  0011F8  BE0A               	btfsc	_sensorValue+1,7,c
  2736  0011FA  D02C               	goto	i2l1722
  2737  0011FC  500A               	movf	_sensorValue+1,w,c
  2738  0011FE  E104               	bnz	i2u132_40
  2739  001200  0E60               	movlw	96
  2740  001202  5C09               	subwf	_sensorValue,w,c
  2741  001204  A0D8               	btfss	status,0,c
  2742  001206  D026               	goto	i2l1722
  2743  001208                     i2u132_40:
  2744  001208  BE0C               	btfsc	_sensorValue+3,7,c
  2745  00120A  D024               	goto	i2l1722
  2746  00120C  500C               	movf	_sensorValue+3,w,c
  2747  00120E  E104               	bnz	i2u133_40
  2748  001210  0E60               	movlw	96
  2749  001212  5C0B               	subwf	_sensorValue+2,w,c
  2750  001214  A0D8               	btfss	status,0,c
  2751  001216  D01E               	goto	i2l1722
  2752  001218                     i2u133_40:
  2753  001218  BE10               	btfsc	_sensorValue+7,7,c
  2754  00121A  D01C               	goto	i2l1722
  2755  00121C  0EE1               	movlw	225
  2756  00121E  5C0F               	subwf	_sensorValue+6,w,c
  2757  001220  0E01               	movlw	1
  2758  001222  5810               	subwfb	_sensorValue+7,w,c
  2759  001224  B0D8               	btfsc	status,0,c
  2760  001226  BE0E               	btfsc	_sensorValue+5,7,c
  2761  001228  D015               	goto	i2l1722
  2762  00122A  0EE1               	movlw	225
  2763  00122C  5C0D               	subwf	_sensorValue+4,w,c
  2764  00122E  0E01               	movlw	1
  2765  001230  580E               	subwfb	_sensorValue+5,w,c
  2766  001232  A0D8               	btfss	status,0,c
  2767  001234  D00F               	goto	i2l1722
  2768  001236  BE20               	btfsc	_RotateCounter+1,7,c
  2769  001238  D005               	goto	i2l1720
  2770  00123A  5020               	movf	_RotateCounter+1,w,c
  2771  00123C  E10B               	bnz	i2l1722
  2772  00123E  041F               	decf	_RotateCounter,w,c
  2773  001240  B0D8               	btfsc	status,0,c
  2774  001242  D008               	goto	i2l1722
  2775  001244                     i2l1720:
  2776                           
  2777                           ;interrupts.c: 196: {
  2778                           ;interrupts.c: 197: RotateCounter = 170*2;
  2779  001244  0E01               	movlw	1
  2780  001246  6E20               	movwf	_RotateCounter+1,c
  2781  001248  0E54               	movlw	84
  2782  00124A  6E1F               	movwf	_RotateCounter,c
  2783                           
  2784                           ;interrupts.c: 198: rotatingSide = LEFT;
  2785  00124C  0E00               	movlw	0
  2786  00124E  6E37               	movwf	_rotatingSide,c
  2787                           
  2788                           ;interrupts.c: 199: justTurned = 1;
  2789  001250  0E01               	movlw	1
  2790  001252  D023               	goto	L9
  2791  001254                     i2l1722:
  2792                           
  2793                           ;interrupts.c: 202: else if ((sensorValue[0] > 95 && sensorValue[1] > 95)
  2794                           ;interrupts.c: 203: && sensorValue[3] < 100 && sensorValue[2] < 100 ) {
  2795  001254  BE0A               	btfsc	_sensorValue+1,7,c
  2796  001256  D023               	goto	i2l1734
  2797  001258  500A               	movf	_sensorValue+1,w,c
  2798  00125A  E104               	bnz	i2u137_40
  2799  00125C  0E60               	movlw	96
  2800  00125E  5C09               	subwf	_sensorValue,w,c
  2801  001260  A0D8               	btfss	status,0,c
  2802  001262  D01D               	goto	i2l1734
  2803  001264                     i2u137_40:
  2804  001264  BE0C               	btfsc	_sensorValue+3,7,c
  2805  001266  D01B               	goto	i2l1734
  2806  001268  500C               	movf	_sensorValue+3,w,c
  2807  00126A  E104               	bnz	i2u138_40
  2808  00126C  0E60               	movlw	96
  2809  00126E  5C0B               	subwf	_sensorValue+2,w,c
  2810  001270  A0D8               	btfss	status,0,c
  2811  001272  D015               	goto	i2l1734
  2812  001274                     i2u138_40:
  2813  001274  BE10               	btfsc	_sensorValue+7,7,c
  2814  001276  D006               	goto	i2l1728
  2815  001278  5010               	movf	_sensorValue+7,w,c
  2816  00127A  E111               	bnz	i2l1734
  2817  00127C  0E64               	movlw	100
  2818  00127E  5C0F               	subwf	_sensorValue+6,w,c
  2819  001280  B0D8               	btfsc	status,0,c
  2820  001282  D00D               	goto	i2l1734
  2821  001284                     i2l1728:
  2822  001284  BE0E               	btfsc	_sensorValue+5,7,c
  2823  001286  D006               	goto	i2l1730
  2824  001288  500E               	movf	_sensorValue+5,w,c
  2825  00128A  E109               	bnz	i2l1734
  2826  00128C  0E64               	movlw	100
  2827  00128E  5C0D               	subwf	_sensorValue+4,w,c
  2828  001290  B0D8               	btfsc	status,0,c
  2829  001292  D005               	goto	i2l1734
  2830  001294                     i2l1730:
  2831                           
  2832                           ;interrupts.c: 205: KController();
  2833  001294  ECDE  F00C         	call	_KController	;wreg free
  2834                           
  2835                           ;interrupts.c: 206: justTurned = 0;
  2836  001298  0E00               	movlw	0
  2837  00129A                     L9:
  2838  00129A  6E36               	movwf	_justTurned,c
  2839                           
  2840                           ;interrupts.c: 208: }
  2841  00129C  D015               	goto	i2l1742
  2842  00129E                     i2l1734:
  2843                           
  2844                           ;interrupts.c: 214: else {
  2845                           ;interrupts.c: 215: motorCounterUpdate(RIGHT,0);
  2846  00129E  0E00               	movlw	0
  2847  0012A0  6E49               	movwf	motorCounterUpdate@reverse,c
  2848  0012A2  0E01               	movlw	1
  2849  0012A4  EC83  F00B         	call	_motorCounterUpdate
  2850                           
  2851                           ;interrupts.c: 216: motorCounterUpdate(LEFT,0);
  2852  0012A8  0E00               	movlw	0
  2853  0012AA  6E49               	movwf	motorCounterUpdate@reverse,c
  2854  0012AC  0E00               	movlw	0
  2855  0012AE  EC83  F00B         	call	_motorCounterUpdate
  2856                           
  2857                           ;interrupts.c: 217: justTurned = 0;
  2858  0012B2  0E00               	movlw	0
  2859  0012B4  6E36               	movwf	_justTurned,c
  2860                           
  2861                           ;interrupts.c: 218: TurnLeft = 0;
  2862  0012B6  0E00               	movlw	0
  2863  0012B8  6E22               	movwf	_TurnLeft+1,c
  2864  0012BA  0E00               	movlw	0
  2865  0012BC  6E21               	movwf	_TurnLeft,c
  2866  0012BE                     i2l1740:
  2867                           
  2868                           ;interrupts.c: 219: TurnRight = 0;
  2869  0012BE  0E00               	movlw	0
  2870  0012C0  6E24               	movwf	_TurnRight+1,c
  2871  0012C2  0E00               	movlw	0
  2872  0012C4  6E23               	movwf	_TurnRight,c
  2873  0012C6  D000               	goto	i2l1742
  2874  0012C8                     i2l1742:
  2875                           
  2876                           ;interrupts.c: 220: }
  2877                           ;interrupts.c: 221: moveMouse(merge(LMotorCounter,RMotorCounter));
  2878  0012C8  C034  F049         	movff	_RMotorCounter,merge@right
  2879  0012CC  5033               	movf	_LMotorCounter,w,c
  2880  0012CE  EC4A  F00E         	call	_merge
  2881  0012D2  EC57  F00E         	call	_moveMouse
  2882                           
  2883                           ;interrupts.c: 222: MotorDelayCounter = 0;
  2884  0012D6  0E00               	movlw	0
  2885  0012D8  6E1A               	movwf	_MotorDelayCounter+1,c
  2886  0012DA  0E00               	movlw	0
  2887  0012DC  6E19               	movwf	_MotorDelayCounter,c
  2888  0012DE  D000               	goto	i2l1744
  2889  0012E0                     i2l1744:
  2890                           
  2891                           ;interrupts.c: 223: }
  2892                           ;interrupts.c: 225: MotorDelayCounter++;
  2893  0012E0  4A19               	infsnz	_MotorDelayCounter,f,c
  2894  0012E2  2A1A               	incf	_MotorDelayCounter+1,f,c
  2895                           
  2896                           ;interrupts.c: 226: INTCONbits.TMR0IF = 0;
  2897  0012E4  94F2               	bcf	intcon,2,c	;volatile
  2898  0012E6  D000               	goto	i2l106
  2899  0012E8                     i2l106:
  2900  0012E8  C05D  FFF5         	movff	??_high_isr+13,tablat
  2901  0012EC  C05C  FFF8         	movff	??_high_isr+12,tblptru
  2902  0012F0  C05B  FFF7         	movff	??_high_isr+11,tblptrh
  2903  0012F4  C05A  FFF6         	movff	??_high_isr+10,tblptrl
  2904  0012F8  C059  FFF4         	movff	??_high_isr+9,prodh
  2905  0012FC  C058  FFF3         	movff	??_high_isr+8,prodl
  2906  001300  C057  FFDA         	movff	??_high_isr+7,fsr2h
  2907  001304  C056  FFD9         	movff	??_high_isr+6,fsr2l
  2908  001308  C055  FFE2         	movff	??_high_isr+5,fsr1h
  2909  00130C  C054  FFE1         	movff	??_high_isr+4,fsr1l
  2910  001310  C053  FFEA         	movff	??_high_isr+3,fsr0h
  2911  001314  C052  FFE9         	movff	??_high_isr+2,fsr0l
  2912  001318  C051  FFFB         	movff	??_high_isr+1,pclatu
  2913  00131C  C050  FFFA         	movff	??_high_isr,pclath
  2914  001320  0011               	retfie		f
  2915  001322                     __end_of_high_isr:
  2916                           	opt stack 0
  2917                           pclatu	equ	0xFFB
  2918                           pclath	equ	0xFFA
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           intcon2	equ	0xFF1
  2927                           postinc0	equ	0xFEE
  2928                           fsr0h	equ	0xFEA
  2929                           fsr0l	equ	0xFE9
  2930                           wreg	equ	0xFE8
  2931                           fsr1h	equ	0xFE2
  2932                           fsr1l	equ	0xFE1
  2933                           bsr	equ	0xFE0
  2934                           postinc2	equ	0xFDE
  2935                           postdec2	equ	0xFDD
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _rotate *****************
  2941 ;; Defined at:
  2942 ;;		line 370 in file "interrupts.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  side            1    wreg     enum E4145
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  side            1   19[COMRAM] enum E4145
  2947 ;; Return value:  Size  Location     Type
  2948 ;;		None               void
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;Total ram usage:        1 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    1
  2963 ;; This function calls:
  2964 ;;		_motorCounterUpdate
  2965 ;; This function is called by:
  2966 ;;		_high_isr
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text14
  2971  001AFE                     __ptext14:
  2972                           	opt stack 0
  2973  001AFE                     _rotate:
  2974                           	opt stack 24
  2975                           
  2976                           ;incstack = 0
  2977                           ;rotate@side stored from wreg
  2978  001AFE  6E4B               	movwf	rotate@side,c
  2979                           
  2980                           ;interrupts.c: 372: if (side == LEFT){
  2981  001B00  504B               	movf	rotate@side,w,c
  2982  001B02  A4D8               	btfss	status,2,c
  2983  001B04  D00B               	goto	i2l1562
  2984                           
  2985                           ;interrupts.c: 373: motorCounterUpdate(RIGHT,0);
  2986  001B06  0E00               	movlw	0
  2987  001B08  6E49               	movwf	motorCounterUpdate@reverse,c
  2988  001B0A  0E01               	movlw	1
  2989  001B0C  EC83  F00B         	call	_motorCounterUpdate
  2990                           
  2991                           ;interrupts.c: 374: motorCounterUpdate(LEFT,1);
  2992  001B10  0E01               	movlw	1
  2993  001B12  6E49               	movwf	motorCounterUpdate@reverse,c
  2994  001B14  0E00               	movlw	0
  2995  001B16  EC83  F00B         	call	_motorCounterUpdate
  2996                           
  2997                           ;interrupts.c: 375: } else {
  2998  001B1A  D00B               	goto	i2l1564
  2999  001B1C                     i2l1562:
  3000                           
  3001                           ;interrupts.c: 376: motorCounterUpdate(LEFT,0);
  3002  001B1C  0E00               	movlw	0
  3003  001B1E  6E49               	movwf	motorCounterUpdate@reverse,c
  3004  001B20  0E00               	movlw	0
  3005  001B22  EC83  F00B         	call	_motorCounterUpdate
  3006                           
  3007                           ;interrupts.c: 377: motorCounterUpdate(RIGHT,1);
  3008  001B26  0E01               	movlw	1
  3009  001B28  6E49               	movwf	motorCounterUpdate@reverse,c
  3010  001B2A  0E01               	movlw	1
  3011  001B2C  EC83  F00B         	call	_motorCounterUpdate
  3012  001B30  D000               	goto	i2l1564
  3013  001B32                     i2l1564:
  3014                           
  3015                           ;interrupts.c: 378: }
  3016                           ;interrupts.c: 379: RotateCounter--;
  3017  001B32  061F               	decf	_RotateCounter,f,c
  3018  001B34  A0D8               	btfss	status,0,c
  3019  001B36  0620               	decf	_RotateCounter+1,f,c
  3020  001B38  0012               	return		;funcret
  3021  001B3A                     __end_of_rotate:
  3022                           	opt stack 0
  3023                           pclatu	equ	0xFFB
  3024                           pclath	equ	0xFFA
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           intcon	equ	0xFF2
  3032                           intcon2	equ	0xFF1
  3033                           postinc0	equ	0xFEE
  3034                           fsr0h	equ	0xFEA
  3035                           fsr0l	equ	0xFE9
  3036                           wreg	equ	0xFE8
  3037                           fsr1h	equ	0xFE2
  3038                           fsr1l	equ	0xFE1
  3039                           bsr	equ	0xFE0
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _moveMouse *****************
  3047 ;; Defined at:
  3048 ;;		line 323 in file "interrupts.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  action          1    wreg     unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  action          1   17[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        1 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_high_isr
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text15
  3076  001CAE                     __ptext15:
  3077                           	opt stack 0
  3078  001CAE                     _moveMouse:
  3079                           	opt stack 25
  3080                           
  3081                           ;incstack = 0
  3082                           ;moveMouse@action stored from wreg
  3083  001CAE  6E49               	movwf	moveMouse@action,c
  3084                           
  3085                           ;interrupts.c: 325: LATC = action;
  3086  001CB0  C049  FF8B         	movff	moveMouse@action,3979	;volatile
  3087  001CB4  0012               	return		;funcret
  3088  001CB6                     __end_of_moveMouse:
  3089                           	opt stack 0
  3090                           pclatu	equ	0xFFB
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           intcon2	equ	0xFF1
  3100                           postinc0	equ	0xFEE
  3101                           fsr0h	equ	0xFEA
  3102                           fsr0l	equ	0xFE9
  3103                           wreg	equ	0xFE8
  3104                           fsr1h	equ	0xFE2
  3105                           fsr1l	equ	0xFE1
  3106                           bsr	equ	0xFE0
  3107                           postinc2	equ	0xFDE
  3108                           postdec2	equ	0xFDD
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _merge *****************
  3114 ;; Defined at:
  3115 ;;		line 316 in file "interrupts.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  left            1    wreg     unsigned char 
  3118 ;;  right           1   17[COMRAM] unsigned char 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  left            1   18[COMRAM] unsigned char 
  3121 ;;  merged          1   19[COMRAM] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      unsigned char 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3131 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;Total ram usage:        3 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_high_isr
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text16
  3145  001C94                     __ptext16:
  3146                           	opt stack 0
  3147  001C94                     _merge:
  3148                           	opt stack 25
  3149                           
  3150                           ;incstack = 0
  3151                           ;merge@left stored from wreg
  3152  001C94  6E4A               	movwf	merge@left,c
  3153                           
  3154                           ;interrupts.c: 318: unsigned char merged;
  3155                           ;interrupts.c: 319: merged = left + (right << 4);
  3156  001C96  3849               	swapf	merge@right,w,c
  3157  001C98  0BF0               	andlw	240
  3158  001C9A  244A               	addwf	merge@left,w,c
  3159  001C9C  6E4B               	movwf	merge@merged,c
  3160                           
  3161                           ;interrupts.c: 320: return merged;
  3162  001C9E  504B               	movf	merge@merged,w,c
  3163  001CA0  D000               	goto	i2l150
  3164  001CA2                     i2l150:
  3165  001CA2  0012               	return		;funcret
  3166  001CA4                     __end_of_merge:
  3167                           	opt stack 0
  3168                           pclatu	equ	0xFFB
  3169                           pclath	equ	0xFFA
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           intcon	equ	0xFF2
  3177                           intcon2	equ	0xFF1
  3178                           postinc0	equ	0xFEE
  3179                           fsr0h	equ	0xFEA
  3180                           fsr0l	equ	0xFE9
  3181                           wreg	equ	0xFE8
  3182                           fsr1h	equ	0xFE2
  3183                           fsr1l	equ	0xFE1
  3184                           bsr	equ	0xFE0
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _forward *****************
  3192 ;; Defined at:
  3193 ;;		line 415 in file "interrupts.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    1
  3214 ;; This function calls:
  3215 ;;		_motorCounterUpdate
  3216 ;; This function is called by:
  3217 ;;		_high_isr
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text17
  3222  001C42                     __ptext17:
  3223                           	opt stack 0
  3224  001C42                     _forward:
  3225                           	opt stack 24
  3226                           
  3227                           ;interrupts.c: 417: motorCounterUpdate(RIGHT,0);
  3228                           
  3229                           ;incstack = 0
  3230  001C42  0E00               	movlw	0
  3231  001C44  6E49               	movwf	motorCounterUpdate@reverse,c
  3232  001C46  0E01               	movlw	1
  3233  001C48  EC83  F00B         	call	_motorCounterUpdate
  3234                           
  3235                           ;interrupts.c: 418: motorCounterUpdate(LEFT,0);
  3236  001C4C  0E00               	movlw	0
  3237  001C4E  6E49               	movwf	motorCounterUpdate@reverse,c
  3238  001C50  0E00               	movlw	0
  3239  001C52  EC83  F00B         	call	_motorCounterUpdate
  3240                           
  3241                           ;interrupts.c: 419: ForwardCounter--;
  3242  001C56  0615               	decf	_ForwardCounter,f,c
  3243  001C58  A0D8               	btfss	status,0,c
  3244  001C5A  0616               	decf	_ForwardCounter+1,f,c
  3245  001C5C  0012               	return		;funcret
  3246  001C5E                     __end_of_forward:
  3247                           	opt stack 0
  3248                           pclatu	equ	0xFFB
  3249                           pclath	equ	0xFFA
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           intcon2	equ	0xFF1
  3258                           postinc0	equ	0xFEE
  3259                           fsr0h	equ	0xFEA
  3260                           fsr0l	equ	0xFE9
  3261                           wreg	equ	0xFE8
  3262                           fsr1h	equ	0xFE2
  3263                           fsr1l	equ	0xFE1
  3264                           bsr	equ	0xFE0
  3265                           postinc2	equ	0xFDE
  3266                           postdec2	equ	0xFDD
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _Reversing *****************
  3272 ;; Defined at:
  3273 ;;		line 394 in file "interrupts.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;		None
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;		None
  3278 ;; Return value:  Size  Location     Type
  3279 ;;		None               void
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;Total ram usage:        0 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    1
  3294 ;; This function calls:
  3295 ;;		_motorCounterUpdate
  3296 ;; This function is called by:
  3297 ;;		_high_isr
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text18
  3302  001C5E                     __ptext18:
  3303                           	opt stack 0
  3304  001C5E                     _Reversing:
  3305                           	opt stack 24
  3306                           
  3307                           ;interrupts.c: 396: motorCounterUpdate(RIGHT,1);
  3308                           
  3309                           ;incstack = 0
  3310  001C5E  0E01               	movlw	1
  3311  001C60  6E49               	movwf	motorCounterUpdate@reverse,c
  3312  001C62  0E01               	movlw	1
  3313  001C64  EC83  F00B         	call	_motorCounterUpdate
  3314                           
  3315                           ;interrupts.c: 397: motorCounterUpdate(LEFT,1);
  3316  001C68  0E01               	movlw	1
  3317  001C6A  6E49               	movwf	motorCounterUpdate@reverse,c
  3318  001C6C  0E00               	movlw	0
  3319  001C6E  EC83  F00B         	call	_motorCounterUpdate
  3320                           
  3321                           ;interrupts.c: 398: ReverseCounter--;
  3322  001C72  061D               	decf	_ReverseCounter,f,c
  3323  001C74  A0D8               	btfss	status,0,c
  3324  001C76  061E               	decf	_ReverseCounter+1,f,c
  3325  001C78  0012               	return		;funcret
  3326  001C7A                     __end_of_Reversing:
  3327                           	opt stack 0
  3328                           pclatu	equ	0xFFB
  3329                           pclath	equ	0xFFA
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           postinc0	equ	0xFEE
  3339                           fsr0h	equ	0xFEA
  3340                           fsr0l	equ	0xFE9
  3341                           wreg	equ	0xFE8
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           bsr	equ	0xFE0
  3345                           postinc2	equ	0xFDE
  3346                           postdec2	equ	0xFDD
  3347                           fsr2h	equ	0xFDA
  3348                           fsr2l	equ	0xFD9
  3349                           status	equ	0xFD8
  3350                           
  3351 ;; *************** function _KController *****************
  3352 ;; Defined at:
  3353 ;;		line 336 in file "interrupts.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  diff            2   22[COMRAM] int 
  3358 ;;  correctTo       1   21[COMRAM] enum E4145
  3359 ;; Return value:  Size  Location     Type
  3360 ;;		None               void
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;Total ram usage:        5 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    1
  3375 ;; This function calls:
  3376 ;;		_ABS
  3377 ;;		_motorCounterUpdate
  3378 ;; This function is called by:
  3379 ;;		_high_isr
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text19
  3384  0019BC                     __ptext19:
  3385                           	opt stack 0
  3386  0019BC                     _KController:
  3387                           	opt stack 24
  3388                           
  3389                           ;interrupts.c: 338: Side correctTo;
  3390                           ;interrupts.c: 339: int diff = 0;
  3391                           
  3392                           ;incstack = 0
  3393  0019BC  0E00               	movlw	0
  3394  0019BE  6E4F               	movwf	KController@diff+1,c
  3395  0019C0  0E00               	movlw	0
  3396  0019C2  6E4E               	movwf	KController@diff,c
  3397                           
  3398                           ;interrupts.c: 340: if(ignoreControll > 0){
  3399  0019C4  505E               	movf	_ignoreControll,w,c
  3400  0019C6  B4D8               	btfsc	status,2,c
  3401  0019C8  D00C               	goto	i2l1526
  3402                           
  3403                           ;interrupts.c: 341: motorCounterUpdate(RIGHT,0);
  3404  0019CA  0E00               	movlw	0
  3405  0019CC  6E49               	movwf	motorCounterUpdate@reverse,c
  3406  0019CE  0E01               	movlw	1
  3407  0019D0  EC83  F00B         	call	_motorCounterUpdate
  3408                           
  3409                           ;interrupts.c: 342: motorCounterUpdate(LEFT,0);
  3410  0019D4  0E00               	movlw	0
  3411  0019D6  6E49               	movwf	motorCounterUpdate@reverse,c
  3412  0019D8  0E00               	movlw	0
  3413  0019DA  EC83  F00B         	call	_motorCounterUpdate
  3414                           
  3415                           ;interrupts.c: 343: ignoreControll--;
  3416  0019DE  065E               	decf	_ignoreControll,f,c
  3417                           
  3418                           ;interrupts.c: 344: return;
  3419  0019E0  D04D               	goto	i2l161
  3420  0019E2                     i2l1526:
  3421                           
  3422                           ;interrupts.c: 345: }
  3423                           ;interrupts.c: 347: diff = ABS(sensorValue[1] - sensorValue[0]);
  3424  0019E2  C009  F04B         	movff	_sensorValue,??_KController
  3425  0019E6  C00A  F04C         	movff	_sensorValue+1,??_KController+1
  3426  0019EA  1E4B               	comf	??_KController,f,c
  3427  0019EC  1E4C               	comf	??_KController+1,f,c
  3428  0019EE  4A4B               	infsnz	??_KController,f,c
  3429  0019F0  2A4C               	incf	??_KController+1,f,c
  3430  0019F2  500B               	movf	_sensorValue+2,w,c
  3431  0019F4  244B               	addwf	??_KController,w,c
  3432  0019F6  6E49               	movwf	ABS@x,c
  3433  0019F8  500C               	movf	_sensorValue+3,w,c
  3434  0019FA  204C               	addwfc	??_KController+1,w,c
  3435  0019FC  6E4A               	movwf	ABS@x+1,c
  3436  0019FE  EC3D  F00E         	call	_ABS	;wreg free
  3437  001A02  C049  F04E         	movff	?_ABS,KController@diff
  3438  001A06  C04A  F04F         	movff	?_ABS+1,KController@diff+1
  3439                           
  3440                           ;interrupts.c: 349: if(sensorValue[0] > sensorValue[1])
  3441  001A0A  5009               	movf	_sensorValue,w,c
  3442  001A0C  5C0B               	subwf	_sensorValue+2,w,c
  3443  001A0E  500C               	movf	_sensorValue+3,w,c
  3444  001A10  0A80               	xorlw	128
  3445  001A12  6E4B               	movwf	??_KController& (0+255),c
  3446  001A14  500A               	movf	_sensorValue+1,w,c
  3447  001A16  0A80               	xorlw	128
  3448  001A18  584B               	subwfb	??_KController& (0+255),w,c
  3449  001A1A  B0D8               	btfsc	status,0,c
  3450  001A1C  D008               	goto	i2l1534
  3451                           
  3452                           ;interrupts.c: 350: {
  3453                           ;interrupts.c: 351: correctTo = LEFT;
  3454  001A1E  0E00               	movlw	0
  3455  001A20  6E4D               	movwf	KController@correctTo,c
  3456                           
  3457                           ;interrupts.c: 352: motorCounterUpdate(correctTo,0);
  3458  001A22  0E00               	movlw	0
  3459  001A24  6E49               	movwf	motorCounterUpdate@reverse,c
  3460  001A26  504D               	movf	KController@correctTo,w,c
  3461  001A28  EC83  F00B         	call	_motorCounterUpdate
  3462                           
  3463                           ;interrupts.c: 353: }
  3464  001A2C  D008               	goto	i2l1538
  3465  001A2E                     i2l1534:
  3466                           
  3467                           ;interrupts.c: 354: else
  3468                           ;interrupts.c: 355: {
  3469                           ;interrupts.c: 356: correctTo = RIGHT;
  3470  001A2E  0E01               	movlw	1
  3471  001A30  6E4D               	movwf	KController@correctTo,c
  3472                           
  3473                           ;interrupts.c: 357: motorCounterUpdate(correctTo,0);
  3474  001A32  0E00               	movlw	0
  3475  001A34  6E49               	movwf	motorCounterUpdate@reverse,c
  3476  001A36  504D               	movf	KController@correctTo,w,c
  3477  001A38  EC83  F00B         	call	_motorCounterUpdate
  3478  001A3C  D000               	goto	i2l1538
  3479  001A3E                     i2l1538:
  3480                           
  3481                           ;interrupts.c: 358: }
  3482                           ;interrupts.c: 360: if(diff > 60)
  3483  001A3E  BE4F               	btfsc	KController@diff+1,7,c
  3484  001A40  D008               	goto	i2l1542
  3485  001A42  504F               	movf	KController@diff+1,w,c
  3486  001A44  E104               	bnz	i2u99_40
  3487  001A46  0E3D               	movlw	61
  3488  001A48  5C4E               	subwf	KController@diff,w,c
  3489  001A4A  A0D8               	btfss	status,0,c
  3490  001A4C  D002               	goto	i2l1542
  3491  001A4E                     i2u99_40:
  3492                           
  3493                           ;interrupts.c: 361: ignoreControll = 1;
  3494  001A4E  0E01               	movlw	1
  3495  001A50  D013               	goto	L11
  3496  001A52                     i2l1542:
  3497                           
  3498                           ;interrupts.c: 362: else if(diff <= 60 && diff > 20)
  3499  001A52  BE4F               	btfsc	KController@diff+1,7,c
  3500  001A54  D006               	goto	i2l1544
  3501  001A56  504F               	movf	KController@diff+1,w,c
  3502  001A58  E10E               	bnz	i2l1548
  3503  001A5A  0E3D               	movlw	61
  3504  001A5C  5C4E               	subwf	KController@diff,w,c
  3505  001A5E  B0D8               	btfsc	status,0,c
  3506  001A60  D00A               	goto	i2l1548
  3507  001A62                     i2l1544:
  3508  001A62  BE4F               	btfsc	KController@diff+1,7,c
  3509  001A64  D008               	goto	i2l1548
  3510  001A66  504F               	movf	KController@diff+1,w,c
  3511  001A68  E104               	bnz	i2u101_40
  3512  001A6A  0E15               	movlw	21
  3513  001A6C  5C4E               	subwf	KController@diff,w,c
  3514  001A6E  A0D8               	btfss	status,0,c
  3515  001A70  D002               	goto	i2l1548
  3516  001A72                     i2u101_40:
  3517                           
  3518                           ;interrupts.c: 363: ignoreControll = 3;
  3519  001A72  0E03               	movlw	3
  3520  001A74  D001               	goto	L11
  3521  001A76                     i2l1548:
  3522                           
  3523                           ;interrupts.c: 364: else
  3524                           ;interrupts.c: 365: ignoreControll = 10;
  3525  001A76  0E0A               	movlw	10
  3526  001A78                     L11:
  3527  001A78  6E5E               	movwf	_ignoreControll,c
  3528  001A7A  D000               	goto	i2l161
  3529  001A7C                     i2l161:
  3530  001A7C  0012               	return		;funcret
  3531  001A7E                     __end_of_KController:
  3532                           	opt stack 0
  3533                           pclatu	equ	0xFFB
  3534                           pclath	equ	0xFFA
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           postinc0	equ	0xFEE
  3544                           fsr0h	equ	0xFEA
  3545                           fsr0l	equ	0xFE9
  3546                           wreg	equ	0xFE8
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           bsr	equ	0xFE0
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           fsr2h	equ	0xFDA
  3553                           fsr2l	equ	0xFD9
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _motorCounterUpdate *****************
  3557 ;; Defined at:
  3558 ;;		line 271 in file "interrupts.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  side            1    wreg     enum E4145
  3561 ;;  reverse         1   17[COMRAM] unsigned char 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  side            1   18[COMRAM] enum E4145
  3564 ;; Return value:  Size  Location     Type
  3565 ;;		None               void
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        2 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_high_isr
  3583 ;;		_KController
  3584 ;;		_rotate
  3585 ;;		_Reversing
  3586 ;;		_forward
  3587 ;;		_smoothTurn
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text20
  3592  001706                     __ptext20:
  3593                           	opt stack 0
  3594  001706                     _motorCounterUpdate:
  3595                           	opt stack 24
  3596                           
  3597                           ;incstack = 0
  3598                           ;motorCounterUpdate@side stored from wreg
  3599  001706  6E4A               	movwf	motorCounterUpdate@side,c
  3600                           
  3601                           ;interrupts.c: 273: if(side == LEFT && reverse == 1)
  3602  001708  504A               	movf	motorCounterUpdate@side,w,c
  3603  00170A  A4D8               	btfss	status,2,c
  3604  00170C  D01B               	goto	i2l1418
  3605  00170E  0449               	decf	motorCounterUpdate@reverse,w,c
  3606  001710  B4D8               	btfsc	status,2,c
  3607  001712  D00B               	goto	i2l1416
  3608  001714  D017               	goto	i2l1418
  3609                           
  3610                           ;interrupts.c: 274: {
  3611                           ;interrupts.c: 275: switch(LMotorCounter)
  3612  001716  D009               	goto	i2l1416
  3613  001718                     i2l1406:
  3614  001718  0E02               	movlw	2
  3615  00171A  D004               	goto	L14
  3616  00171C                     i2l1408:
  3617  00171C  0E04               	movlw	4
  3618  00171E  D002               	goto	L14
  3619                           
  3620                           ;interrupts.c: 279: case 0b00000100: LMotorCounter = 0b00001000; break;
  3621  001720  D03E               	goto	i2l1450
  3622                           
  3623                           ;interrupts.c: 280: case 0b00001000: LMotorCounter = 0b00000001; break;
  3624  001722  D039               	goto	i2l1444
  3625  001724                     L14:
  3626  001724  6E33               	movwf	_LMotorCounter,c
  3627  001726  D068               	goto	i2l147
  3628                           
  3629                           ;interrupts.c: 281: default: LMotorCounter = 0b00000001;
  3630  001728  D036               	goto	i2l1444
  3631  00172A                     i2l1416:
  3632  00172A  5033               	movf	_LMotorCounter,w,c
  3633                           
  3634                           ; Switch size 1, requested type "space"
  3635                           ; Number of cases is 4, Range of values is 1 to 8
  3636                           ; switch strategies available:
  3637                           ; Name         Instructions Cycles
  3638                           ; simple_byte           13     7 (average)
  3639                           ;	Chosen strategy is simple_byte
  3640  00172C  0A01               	xorlw	1	; case 1
  3641  00172E  B4D8               	btfsc	status,2,c
  3642  001730  D7F3               	goto	i2l1406
  3643  001732  0A03               	xorlw	3	; case 2
  3644  001734  B4D8               	btfsc	status,2,c
  3645  001736  D7F2               	goto	i2l1408
  3646  001738  0A06               	xorlw	6	; case 4
  3647  00173A  B4D8               	btfsc	status,2,c
  3648  00173C  D030               	goto	i2l1450
  3649  00173E  0A0C               	xorlw	12	; case 8
  3650  001740  D02A               	goto	i2l1444
  3651                           
  3652                           ;interrupts.c: 283: } else if(side == RIGHT && reverse == 1)
  3653  001742  D05A               	goto	i2l147
  3654  001744                     i2l1418:
  3655  001744  044A               	decf	motorCounterUpdate@side,w,c
  3656  001746  A4D8               	btfss	status,2,c
  3657  001748  D01D               	goto	i2l1436
  3658  00174A  0449               	decf	motorCounterUpdate@reverse,w,c
  3659  00174C  B4D8               	btfsc	status,2,c
  3660  00174E  D00B               	goto	i2l1434
  3661  001750  D019               	goto	i2l1436
  3662                           
  3663                           ;interrupts.c: 284: {
  3664                           ;interrupts.c: 285: switch(RMotorCounter)
  3665  001752  D009               	goto	i2l1434
  3666  001754                     i2l1424:
  3667  001754  0E08               	movlw	8
  3668  001756  D040               	goto	L22
  3669  001758                     i2l1426:
  3670  001758  0E01               	movlw	1
  3671  00175A  D03E               	goto	L22
  3672  00175C                     i2l1428:
  3673  00175C  0E02               	movlw	2
  3674  00175E  D03C               	goto	L22
  3675  001760                     i2l1430:
  3676  001760  0E04               	movlw	4
  3677  001762  D03A               	goto	L22
  3678                           
  3679                           ;interrupts.c: 291: default: RMotorCounter = 0b00001000;
  3680  001764  D7F7               	goto	i2l1424
  3681  001766                     i2l1434:
  3682  001766  5034               	movf	_RMotorCounter,w,c
  3683                           
  3684                           ; Switch size 1, requested type "space"
  3685                           ; Number of cases is 4, Range of values is 1 to 8
  3686                           ; switch strategies available:
  3687                           ; Name         Instructions Cycles
  3688                           ; simple_byte           13     7 (average)
  3689                           ;	Chosen strategy is simple_byte
  3690  001768  0A01               	xorlw	1	; case 1
  3691  00176A  B4D8               	btfsc	status,2,c
  3692  00176C  D7F3               	goto	i2l1424
  3693  00176E  0A03               	xorlw	3	; case 2
  3694  001770  B4D8               	btfsc	status,2,c
  3695  001772  D7F2               	goto	i2l1426
  3696  001774  0A06               	xorlw	6	; case 4
  3697  001776  B4D8               	btfsc	status,2,c
  3698  001778  D7F1               	goto	i2l1428
  3699  00177A  0A0C               	xorlw	12	; case 8
  3700  00177C  B4D8               	btfsc	status,2,c
  3701  00177E  D7F0               	goto	i2l1430
  3702  001780  D7E9               	goto	i2l1424
  3703                           
  3704                           ;interrupts.c: 293: } else if(side == LEFT && reverse == 0)
  3705  001782  D03A               	goto	i2l147
  3706  001784                     i2l1436:
  3707  001784  504A               	movf	motorCounterUpdate@side,w,c
  3708  001786  A4D8               	btfss	status,2,c
  3709  001788  D01B               	goto	i2l1454
  3710  00178A  5049               	movf	motorCounterUpdate@reverse,w,c
  3711  00178C  B4D8               	btfsc	status,2,c
  3712  00178E  D009               	goto	i2l1452
  3713  001790  D017               	goto	i2l1454
  3714                           
  3715                           ;interrupts.c: 294: {
  3716                           ;interrupts.c: 295: switch(LMotorCounter)
  3717  001792  D007               	goto	i2l1452
  3718                           
  3719                           ;interrupts.c: 296: {
  3720                           ;interrupts.c: 297: case 0b00000001: LMotorCounter = 0b00001000; break;
  3721  001794  D004               	goto	i2l1450
  3722  001796                     i2l1444:
  3723  001796  0E01               	movlw	1
  3724  001798  D7C5               	goto	L14
  3725                           
  3726                           ;interrupts.c: 299: case 0b00000100: LMotorCounter = 0b00000010; break;
  3727  00179A  D7BE               	goto	i2l1406
  3728                           
  3729                           ;interrupts.c: 300: case 0b00001000: LMotorCounter = 0b00000100; break;
  3730  00179C  D7BF               	goto	i2l1408
  3731  00179E                     i2l1450:
  3732  00179E  0E08               	movlw	8
  3733  0017A0  D7C1               	goto	L14
  3734  0017A2                     i2l1452:
  3735  0017A2  5033               	movf	_LMotorCounter,w,c
  3736                           
  3737                           ; Switch size 1, requested type "space"
  3738                           ; Number of cases is 4, Range of values is 1 to 8
  3739                           ; switch strategies available:
  3740                           ; Name         Instructions Cycles
  3741                           ; simple_byte           13     7 (average)
  3742                           ;	Chosen strategy is simple_byte
  3743  0017A4  0A01               	xorlw	1	; case 1
  3744  0017A6  B4D8               	btfsc	status,2,c
  3745  0017A8  D7FA               	goto	i2l1450
  3746  0017AA  0A03               	xorlw	3	; case 2
  3747  0017AC  B4D8               	btfsc	status,2,c
  3748  0017AE  D7F3               	goto	i2l1444
  3749  0017B0  0A06               	xorlw	6	; case 4
  3750  0017B2  B4D8               	btfsc	status,2,c
  3751  0017B4  D7B1               	goto	i2l1406
  3752  0017B6  0A0C               	xorlw	12	; case 8
  3753  0017B8  B4D8               	btfsc	status,2,c
  3754  0017BA  D7B0               	goto	i2l1408
  3755  0017BC  D7F0               	goto	i2l1450
  3756                           
  3757                           ;interrupts.c: 303: } else if(side == RIGHT && reverse == 0)
  3758  0017BE  D01C               	goto	i2l147
  3759  0017C0                     i2l1454:
  3760  0017C0  044A               	decf	motorCounterUpdate@side,w,c
  3761  0017C2  A4D8               	btfss	status,2,c
  3762  0017C4  D019               	goto	i2l147
  3763  0017C6  5049               	movf	motorCounterUpdate@reverse,w,c
  3764  0017C8  B4D8               	btfsc	status,2,c
  3765  0017CA  D009               	goto	i2l1470
  3766  0017CC  D015               	goto	i2l147
  3767                           
  3768                           ;interrupts.c: 304: {
  3769                           ;interrupts.c: 305: switch(RMotorCounter)
  3770  0017CE  D007               	goto	i2l1470
  3771                           
  3772                           ;interrupts.c: 306: {
  3773                           ;interrupts.c: 307: case 0b00000001: RMotorCounter = 0b00000010; break;
  3774  0017D0  D7C5               	goto	i2l1428
  3775                           
  3776                           ;interrupts.c: 308: case 0b00000010: RMotorCounter = 0b00000100; break;
  3777  0017D2  D7C6               	goto	i2l1430
  3778                           
  3779                           ;interrupts.c: 309: case 0b00000100: RMotorCounter = 0b00001000; break;
  3780  0017D4  D7BF               	goto	i2l1424
  3781                           
  3782                           ;interrupts.c: 310: case 0b00001000: RMotorCounter = 0b00000001; break;
  3783  0017D6  D7C0               	goto	i2l1426
  3784  0017D8                     L22:
  3785  0017D8  6E34               	movwf	_RMotorCounter,c
  3786  0017DA  D00E               	goto	i2l147
  3787                           
  3788                           ;interrupts.c: 311: default: RMotorCounter = 0b00000001;
  3789  0017DC  D7BD               	goto	i2l1426
  3790  0017DE                     i2l1470:
  3791  0017DE  5034               	movf	_RMotorCounter,w,c
  3792                           
  3793                           ; Switch size 1, requested type "space"
  3794                           ; Number of cases is 4, Range of values is 1 to 8
  3795                           ; switch strategies available:
  3796                           ; Name         Instructions Cycles
  3797                           ; simple_byte           13     7 (average)
  3798                           ;	Chosen strategy is simple_byte
  3799  0017E0  0A01               	xorlw	1	; case 1
  3800  0017E2  B4D8               	btfsc	status,2,c
  3801  0017E4  D7BB               	goto	i2l1428
  3802  0017E6  0A03               	xorlw	3	; case 2
  3803  0017E8  B4D8               	btfsc	status,2,c
  3804  0017EA  D7BA               	goto	i2l1430
  3805  0017EC  0A06               	xorlw	6	; case 4
  3806  0017EE  B4D8               	btfsc	status,2,c
  3807  0017F0  D7B1               	goto	i2l1424
  3808  0017F2  0A0C               	xorlw	12	; case 8
  3809  0017F4  D7B1               	goto	i2l1426
  3810  0017F6  D000               	goto	i2l147
  3811  0017F8                     i2l147:
  3812  0017F8  0012               	return		;funcret
  3813  0017FA                     __end_of_motorCounterUpdate:
  3814                           	opt stack 0
  3815                           pclatu	equ	0xFFB
  3816                           pclath	equ	0xFFA
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           intcon2	equ	0xFF1
  3825                           postinc0	equ	0xFEE
  3826                           fsr0h	equ	0xFEA
  3827                           fsr0l	equ	0xFE9
  3828                           wreg	equ	0xFE8
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           bsr	equ	0xFE0
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _ABS *****************
  3839 ;; Defined at:
  3840 ;;		line 329 in file "interrupts.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  x               2   17[COMRAM] int 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  2   17[COMRAM] int 
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;Total ram usage:        2 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_KController
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text21
  3868  001C7A                     __ptext21:
  3869                           	opt stack 0
  3870  001C7A                     _ABS:
  3871                           	opt stack 24
  3872                           
  3873                           ;interrupts.c: 331: if(x<0) x = -x;
  3874                           
  3875                           ;incstack = 0
  3876  001C7A  AE4A               	btfss	ABS@x+1,7,c
  3877  001C7C  D005               	goto	i2l1476
  3878  001C7E  6C49               	negf	ABS@x,c
  3879  001C80  1E4A               	comf	ABS@x+1,f,c
  3880  001C82  B0D8               	btfsc	status,0,c
  3881  001C84  2A4A               	incf	ABS@x+1,f,c
  3882  001C86  D000               	goto	i2l1476
  3883  001C88                     i2l1476:
  3884                           
  3885                           ;interrupts.c: 332: return x;
  3886  001C88  C049  F049         	movff	ABS@x,?_ABS
  3887  001C8C  C04A  F04A         	movff	ABS@x+1,?_ABS+1
  3888  001C90  D000               	goto	i2l157
  3889  001C92                     i2l157:
  3890  001C92  0012               	return		;funcret
  3891  001C94                     __end_of_ABS:
  3892                           	opt stack 0
  3893                           pclatu	equ	0xFFB
  3894                           pclath	equ	0xFFA
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           fsr0h	equ	0xFEA
  3905                           fsr0l	equ	0xFE9
  3906                           wreg	equ	0xFE8
  3907                           fsr1h	equ	0xFE2
  3908                           fsr1l	equ	0xFE1
  3909                           bsr	equ	0xFE0
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           intcon2	equ	0xFF1
  3925                           postinc0	equ	0xFEE
  3926                           fsr0h	equ	0xFEA
  3927                           fsr0l	equ	0xFE9
  3928                           wreg	equ	0xFE8
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           bsr	equ	0xFE0
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938                           	psect	rparam
  3939  0000                     pclatu	equ	0xFFB
  3940                           pclath	equ	0xFFA
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon2	equ	0xFF1
  3949                           postinc0	equ	0xFEE
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           bsr	equ	0xFE0
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      94
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_ABS
    _KController->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5511
                                             24 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1258
                                             19 COMRAM     5     5      0
                                _ABS
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _motorCounterUpdate
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      5E       1       74.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3       6        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat May 02 18:56:36 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l303 1B9C                             l311 1B70                             l304 1BA4  
                           l307 1BD0                             l308 1BD8                             l262 1AAC  
                           l271 1C2C                             l504 19BA                             l290 15E4  
                           l276 1C40                             l297 164A                             _ABS 1C7A  
                  __CFG_CPB$OFF 000000                             _MAX 1BA6                             _MIN 1B72  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1C42                    _rotatingSide 0037  
                           wreg 000FE8                            ABS@x 0049                            ?_ABS 0049  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l1800 1922                            l1810 1958  
                          l1900 15F4                            l1806 1940                            l1822 199A  
                          l1910 1632                            l1832 1A94                            l1808 194E  
                          l1920 16E6                            l1904 160E                            l1826 19B0  
                          l1818 198A                            l1906 1618                            l1844 1C3A  
                          l1852 1346                            l1924 16F0                            l1862 13D8  
                          l1872 1566                            l1864 14F6                            l1794 190A  
                          l1874 15CE                            l1858 136A                            l1946 1C18  
                          l1868 150C                            _LATC 000F8B                            u1540 1344  
                          u1550 1368                            u1635 1658                            u1667 1A9C  
                          _main 1C02                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1AFE           __end_of_setCorrection 18EC                           ??_ABS 004B  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0038                 __end_of___awdiv 19BC                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l106 12E8                           i2l150 1CA2  
                         i2l161 1A7C                           i2l147 17F8                           i2l157 1C92  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1CA4  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1A7E  
                         _merge 1C94                 __end_of_forward 1C5E                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0038  
             _ControllerCounter 0011                 __initialization 1BDA                    __end_of_main 1C24  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0049                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1430 1760                          i2l1406 1718  
                        i2l1424 1754                          i2l1408 171C                          i2l1416 172A  
                        i2l1450 179E                          i2l1426 1758                          i2l1434 1766  
                        i2l1418 1744                          i2l1444 1796                          i2l1452 17A2  
                        i2l1428 175C                          i2l1436 1784                          i2l1470 17DE  
                        i2l1454 17C0                          i2l1542 1A52                          i2l1534 1A2E  
                        i2l1526 19E2                          i2l1710 11F8                          i2l1544 1A62  
                        i2l1720 1244                          i2l1538 1A3E                          i2l1562 1B1C  
                        i2l1730 1294                          i2l1722 1254                          i2l1706 11E8  
                        i2l1650 10A0                          i2l1642 1078                          i2l1476 1C88  
                        i2l1548 1A76                          i2l1564 1B32                          i2l1740 12BE  
                        i2l1708 11F2                          i2l1660 10DC                          i2l1734 129E  
                        i2l1662 10EC                          i2l1654 10BE                          i2l1646 108C  
                        i2l1742 12C8                          i2l1728 1284                          i2l1664 10FC  
                        i2l1656 10CE                          i2l1672 1118                          i2l1744 12E0  
                        i2l1666 1106                          i2l1692 119C                          i2l1684 1170  
                        i2l1676 113A                          i2l1694 11A6                          i2l1686 1180  
                        i2l1696 11AC                          i2l1698 11BC                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 004B                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 1322                          ___wmul 1B3A  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 002B  
                        _errorP 002D                          delay@x 0083                          clear_0 1BE0  
              ___awdiv@quotient 0086                          _rotate 1AFE              __size_of_Reversing 001C  
                  __pdataCOMRAM 005E                       ??_forward 004B                    __mediumconst 0000  
                     ??_low_isr 0038                  _ReverseCounter 001D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1BF8                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0038                  __pcstackCOMRAM 0038                   __end_of_delay 1AC2  
                    _TurnedLeft 0025                 moveMouse@action 0049                   __end_of_merge 1CA4  
          KController@correctTo 004D      __end_of_motorCounterUpdate 17FA                  _ignoreControll 005E  
                _ForwardCounter 0015                         ??_delay 0082                         ??_merge 004A  
            _AlgorithmSelection 1C24                    _LTurnCounter 0017               __end_of_Reversing 1C7A  
                    _delay_time 0029               _MotorDelayCounter 0019             ?_AlgorithmSelection 0038  
          setCorrection@sideAvg 008A                         ?___wmul 0080              __size_of_moveMouse 0008  
                       ?_rotate 0038                         _INTCON2 000FF1                         _OSCTUNE 000F9B  
                       i2u99_40 1A4E            ??_AlgorithmSelection 0080                       ?_high_isr 0038  
                       _Deadend 0013                   _LMotorCounter 0033                         _InitApp 1AC2  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 18EC  
               __size_of___wmul 0038                    __psmallconst 1000                         __pcinit 1BDA  
                       __ramtop 1000                         __ptext0 1C02                         __ptext1 17FA  
                       __ptext2 15E6                         __ptext3 1322                         __ptext4 1B3A  
                       __ptext5 18EC                         __ptext6 1B72                         __ptext7 1BA6  
                       __ptext8 1AC2                         __ptext9 1A7E                 __size_of_rotate 003C  
                  __size_of_ABS 001A                    __size_of_MAX 0034                    __size_of_MIN 0034  
                       _forward 1C42                         delay@ms 0080                         _low_isr 0018  
                 ?_sensorUpdate 0038                      ??_high_isr 0050                  __pintcode_body 1006  
        __size_of_setCorrection 00F2            end_of_initialization 1BF8                _sensorCorrection 0001  
             __end_of_moveMouse 1CB6                   __Lmediumconst 0000                         int_func 1006  
                    _justTurned 0036            __size_of_KController 00C2                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                       _TRISBbits 000F93  
                     _TRISEbits 000F96                  ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1CAE  
                    _totalError 0031                    _RTurnCounter 001B  sensorComputation@getCorrection 008D  
                 _setCorrection 17FA                  __end_of___wmul 1B72                   __pidataCOMRAM 1CB6  
                   _TurnedRight 0027                  __end_of_rotate 1B3A             start_initialization 1BDA  
                   __end_of_ABS 1C94                     __end_of_MAX 1BDA                     __end_of_MIN 1BA6  
            _motorCounterUpdate 1706                __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0049  
                    merge@right 0049                       _Reversing 1C5E                  ?_setCorrection 0038  
                      ??___wmul 0084                __CFG_LPT1OSC$OFF 000000                        ??_rotate 004B  
                _sensorLocation 1001            ??_motorCounterUpdate 004A                     __pbssCOMRAM 0001  
                 __pcstackBANK0 0080                       _TurnRight 0023       sensorUpdate@getCorrection 00F0  
        sensorUpdate@sensorTemp 00A0               __size_of_high_isr 131A                        ?_InitApp 0038  
             __CFG_CCP2MX$PORTC 000000                      ?_Reversing 0038                       _algorithm 0035  
                     __pintcode 0008           setCorrection@frontAvg 008C          motorCounterUpdate@side 004A  
                      ?___awdiv 0080            __end_of_sensorUpdate 1706          __end_of_sensorLocation 1005  
                   __pintcodelo 0018                     __smallconst 1000                        ?_forward 0038  
                      ?_low_isr 0038                       _oldErrorP 002F                  __size_of_delay 0044  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0084  
                     _moveMouse 1CAE                        i2u101_40 1A72                        i2u110_40 1048  
                      i2u112_40 1062                        i2u113_40 1072                        i2u114_40 1086  
                      i2u115_40 109A                        i2u132_40 1208                        i2u116_40 10AE  
                      i2u133_40 1218                        i2u137_40 1264                        i2u129_40 11CC  
                      i2u138_40 1274                 ??_setCorrection 0088                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0034  
                    rotate@side 004B                   ??_KController 004B                      ?_moveMouse 0038  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 004A  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 004B              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0021                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1C24                        __ptext11 1CA4  
                      __ptext20 1706                        __ptext21 1C7A                        __ptext14 1AFE  
                      __ptext15 1CAE                        __ptext16 1C94                        __ptext17 1C42  
                      __ptext18 1C5E                        __ptext19 19BC                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001F           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1A7E               _sensorComputation 1322  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 15E6                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0049  
               KController@diff 004E       __end_of_sensorComputation 15E6                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0049                     _KController 19BC  
