

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 13:42:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001DA6                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _cState
    43  001DA6  02                 	db	2
    44                           
    45                           ;initializer for _ignoreControll
    46  001DA7  0A                 	db	10
    47                           
    48                           ;initializer for _pState
    49  001DA8  02                 	db	2
    50                           
    51                           	psect	smallconst
    52  001000                     __psmallconst:
    53                           	opt stack 0
    54  001000  00                 	db	0
    55  001001                     _sensorLocation:
    56                           	opt stack 0
    57  001001  1B                 	db	27
    58  001002  2B                 	db	43
    59  001003  1F                 	db	31
    60  001004  33                 	db	51
    61  001005                     __end_of_sensorLocation:
    62                           	opt stack 0
    63  0000                     _LATC	set	3979
    64  0000                     _OSCTUNE	set	3995
    65  0000                     _TRISBbits	set	3987
    66  0000                     _TRISC	set	3988
    67  0000                     _TRISEbits	set	3990
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON0bits	set	4034
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON2	set	4032
    72  0000                     _ADRESH	set	4036
    73  0000                     _ADRESL	set	4035
    74  0000                     _OSCCON	set	4051
    75  0000                     _T0CON	set	4053
    76  0000                     _INTCON	set	4082
    77  0000                     _INTCON2	set	4081
    78  0000                     _INTCONbits	set	4082
    79                           
    80                           ; #config settings
    81  001005  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           	psect	cinit
    84  001C1E                     __pcinit:
    85                           	opt stack 0
    86  001C1E                     start_initialization:
    87                           	opt stack 0
    88  001C1E                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to COMRAM (53 bytes)
    92  001C1E  EE00  F001         	lfsr	0,__pbssCOMRAM
    93  001C22  0E35               	movlw	53
    94  001C24                     clear_0:
    95  001C24  6AEE               	clrf	postinc0,c
    96  001C26  06E8               	decf	wreg,f,c
    97  001C28  E1FD               	bnz	clear_0
    98                           
    99                           ; Initialize objects allocated to COMRAM (3 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  001C2A  0EA6               	movlw	low __pidataCOMRAM
   102  001C2C  6EF6               	movwf	tblptrl,c
   103  001C2E  0E1D               	movlw	high __pidataCOMRAM
   104  001C30  6EF7               	movwf	tblptrh,c
   105  001C32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   106  001C34  6EF8               	movwf	tblptru,c
   107  001C36  0009               	tblrd		*+	;fetch initializer
   108  001C38  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   109  001C3C  0009               	tblrd		*+	;fetch initializer
   110  001C3E  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
   111  001C42  0009               	tblrd		*+	;fetch initializer
   112  001C44  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
   113  001C48                     end_of_initialization:
   114                           	opt stack 0
   115  001C48                     __end_of__initialization:
   116                           	opt stack 0
   117  001C48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   118  001C4A  6EF8               	movwf	tblptru,c
   119  001C4C  0100               	movlb	0
   120  001C4E  EF77  F00E         	goto	_main	;jump to C main() function
   121                           tblptru	equ	0xFF8
   122                           tblptrh	equ	0xFF7
   123                           tblptrl	equ	0xFF6
   124                           tablat	equ	0xFF5
   125                           postinc0	equ	0xFEE
   126                           wreg	equ	0xFE8
   127                           
   128                           	psect	bssCOMRAM
   129  000001                     __pbssCOMRAM:
   130                           	opt stack 0
   131  000001                     _sensorCorrection:
   132                           	opt stack 0
   133  000001                     	ds	8
   134  000009                     _sensorValue:
   135                           	opt stack 0
   136  000009                     	ds	8
   137  000011                     _Deadend:
   138                           	opt stack 0
   139  000011                     	ds	2
   140  000013                     _ForwardCounter:
   141                           	opt stack 0
   142  000013                     	ds	2
   143  000015                     _LTurnCounter:
   144                           	opt stack 0
   145  000015                     	ds	2
   146  000017                     _MotorDelayCounter:
   147                           	opt stack 0
   148  000017                     	ds	2
   149  000019                     _RTurnCounter:
   150                           	opt stack 0
   151  000019                     	ds	2
   152  00001B                     _ReverseCounter:
   153                           	opt stack 0
   154  00001B                     	ds	2
   155  00001D                     _RotateCounter:
   156                           	opt stack 0
   157  00001D                     	ds	2
   158  00001F                     _TurnLeft:
   159                           	opt stack 0
   160  00001F                     	ds	2
   161  000021                     _TurnRight:
   162                           	opt stack 0
   163  000021                     	ds	2
   164  000023                     _TurnedLeft:
   165                           	opt stack 0
   166  000023                     	ds	2
   167  000025                     _TurnedRight:
   168                           	opt stack 0
   169  000025                     	ds	2
   170  000027                     _controlToLeft:
   171                           	opt stack 0
   172  000027                     	ds	2
   173  000029                     _controlToRight:
   174                           	opt stack 0
   175  000029                     	ds	2
   176  00002B                     _delay_time:
   177                           	opt stack 0
   178  00002B                     	ds	2
   179  00002D                     _oldErrorP:
   180                           	opt stack 0
   181  00002D                     	ds	2
   182  00002F                     _ChangeRequired:
   183                           	opt stack 0
   184  00002F                     	ds	1
   185  000030                     _LMotorCounter:
   186                           	opt stack 0
   187  000030                     	ds	1
   188  000031                     _RMotorCounter:
   189                           	opt stack 0
   190  000031                     	ds	1
   191  000032                     _algorithm:
   192                           	opt stack 0
   193  000032                     	ds	1
   194  000033                     _deadEnd:
   195                           	opt stack 0
   196  000033                     	ds	1
   197  000034                     _justTurned:
   198                           	opt stack 0
   199  000034                     	ds	1
   200  000035                     _rotatingSide:
   201                           	opt stack 0
   202  000035                     	ds	1
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           
   210                           	psect	dataCOMRAM
   211  00005B                     __pdataCOMRAM:
   212                           	opt stack 0
   213  00005B                     _cState:
   214                           	opt stack 0
   215  00005B                     	ds	1
   216  00005C                     _ignoreControll:
   217                           	opt stack 0
   218  00005C                     	ds	1
   219  00005D                     _pState:
   220                           	opt stack 0
   221  00005D                     	ds	1
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	cstackBANK0
   230  000080                     __pcstackBANK0:
   231                           	opt stack 0
   232  000080                     ?___wmul:
   233                           	opt stack 0
   234  000080                     ?___awdiv:
   235                           	opt stack 0
   236  000080                     delay@ms:
   237                           	opt stack 0
   238  000080                     ___wmul@multiplier:
   239                           	opt stack 0
   240  000080                     ___awdiv@dividend:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x0
   244  000080                     	ds	2
   245  000082                     ??_delay:
   246  000082                     ___wmul@multiplicand:
   247                           	opt stack 0
   248  000082                     ___awdiv@divisor:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x2
   252  000082                     	ds	1
   253  000083                     delay@x:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x3
   257  000083                     	ds	1
   258  000084                     ___awdiv@counter:
   259                           	opt stack 0
   260  000084                     ___wmul@product:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x4
   264  000084                     	ds	1
   265  000085                     ___awdiv@sign:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x5
   269  000085                     	ds	1
   270  000086                     ?_MIN:
   271                           	opt stack 0
   272  000086                     ?_MAX:
   273                           	opt stack 0
   274  000086                     MIN@a:
   275                           	opt stack 0
   276  000086                     MAX@a:
   277                           	opt stack 0
   278  000086                     ___awdiv@quotient:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x6
   282  000086                     	ds	2
   283  000088                     ??_setCorrection:
   284  000088                     MIN@b:
   285                           	opt stack 0
   286  000088                     MAX@b:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x8
   290  000088                     	ds	2
   291  00008A                     ??_MIN:
   292  00008A                     ??_MAX:
   293  00008A                     setCorrection@sideAvg:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0xA
   297  00008A                     	ds	1
   298  00008B                     sensorComputation@sensorTemp:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0xB
   302  00008B                     	ds	1
   303  00008C                     setCorrection@frontAvg:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0xC
   307  00008C                     	ds	1
   308  00008D                     sensorComputation@getCorrection:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0xD
   312  00008D                     	ds	1
   313  00008E                     ??_sensorComputation:
   314                           
   315                           ; 0 bytes @ 0xE
   316  00008E                     	ds	2
   317  000090                     sensorComputation@max:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x10
   321  000090                     	ds	2
   322  000092                     sensorComputation@min:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x12
   326  000092                     	ds	2
   327  000094                     sensorComputation@sum:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x14
   331  000094                     	ds	2
   332  000096                     sensorComputation@j:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x16
   336  000096                     	ds	2
   337  000098                     sensorComputation@i:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x18
   341  000098                     	ds	2
   342  00009A                     ??_sensorUpdate:
   343                           
   344                           ; 0 bytes @ 0x1A
   345  00009A                     	ds	6
   346  0000A0                     sensorUpdate@sensorTemp:
   347                           	opt stack 0
   348                           
   349                           ; 80 bytes @ 0x20
   350  0000A0                     	ds	80
   351  0000F0                     sensorUpdate@getCorrection:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x70
   355  0000F0                     	ds	1
   356  0000F1                     sensorUpdate@i:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x71
   360  0000F1                     	ds	2
   361  0000F3                     sensorUpdate@j:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x73
   365  0000F3                     	ds	2
   366  0000F5                     tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           
   373                           ; 0 bytes @ 0x75
   374                           
   375                           	psect	cstackCOMRAM
   376  000036                     __pcstackCOMRAM:
   377                           	opt stack 0
   378  000036                     ??_low_isr:
   379  000036                     
   380                           ; 0 bytes @ 0x0
   381  000036                     	ds	17
   382  000047                     motorCounterUpdate@reverse:
   383                           	opt stack 0
   384  000047                     merge@right:
   385                           	opt stack 0
   386  000047                     moveMouse@action:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x11
   390  000047                     	ds	1
   391  000048                     motorCounterUpdate@side:
   392                           	opt stack 0
   393  000048                     merge@left:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x12
   397  000048                     	ds	1
   398  000049                     merge@merged:
   399                           	opt stack 0
   400  000049                     rotate@side:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x13
   404  000049                     	ds	1
   405  00004A                     initialRotation@isDeadEnd:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x14
   409  00004A                     	ds	2
   410  00004C                     initialRotation@side:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x16
   414  00004C                     	ds	1
   415  00004D                     ??_high_isr:
   416                           
   417                           ; 0 bytes @ 0x17
   418  00004D                     	ds	14
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 41 in file "main.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;		None               void
   438 ;; Registers used:
   439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;Total ram usage:        0 bytes
   450 ;; Hardware stack levels required when called:    8
   451 ;; This function calls:
   452 ;;		_ConfigureOscillator
   453 ;;		_InitApp
   454 ;;		_sensorUpdate
   455 ;;		_setCorrection
   456 ;; This function is called by:
   457 ;;		Startup code after reset
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461                           	psect	text0
   462  001CEE                     __ptext0:
   463                           	opt stack 0
   464  001CEE                     _main:
   465                           	opt stack 23
   466                           
   467                           ;main.c: 44: ConfigureOscillator();
   468                           
   469                           ;incstack = 0
   470  001CEE  ECCA  F00E         	call	_ConfigureOscillator	;wreg free
   471                           
   472                           ;main.c: 47: InitApp();
   473  001CF2  ECB7  F00D         	call	_InitApp	;wreg free
   474                           
   475                           ;main.c: 48: sensorUpdate(1);
   476  001CF6  0E01               	movlw	1
   477  001CF8  ECAA  F00B         	call	_sensorUpdate
   478                           
   479                           ;main.c: 49: sensorUpdate(1);
   480  001CFC  0E01               	movlw	1
   481  001CFE  ECAA  F00B         	call	_sensorUpdate
   482                           
   483                           ;main.c: 50: sensorUpdate(1);
   484  001D02  0E01               	movlw	1
   485  001D04  ECAA  F00B         	call	_sensorUpdate
   486                           
   487                           ;main.c: 51: setCorrection();
   488  001D08  ECB4  F00C         	call	_setCorrection	;wreg free
   489                           
   490                           ;main.c: 52: INTCONbits.GIE = 1;
   491  001D0C  8EF2               	bsf	intcon,7,c	;volatile
   492  001D0E  D000               	goto	l2053
   493  001D10                     l2053:
   494                           
   495                           ;main.c: 54: {
   496                           ;main.c: 55: sensorUpdate(0);
   497  001D10  0E00               	movlw	0
   498  001D12  ECAA  F00B         	call	_sensorUpdate
   499  001D16  D7FC               	goto	l2053
   500  001D18  EF51  F000         	goto	start
   501  001D1C                     __end_of_main:
   502                           	opt stack 0
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           intcon	equ	0xFF2
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           
   511 ;; *************** function _setCorrection *****************
   512 ;; Defined at:
   513 ;;		line 125 in file "user.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  frontAvg        2   12[BANK0 ] int 
   518 ;;  sideAvg         2   10[BANK0 ] int 
   519 ;; Return value:  Size  Location     Type
   520 ;;		None               void
   521 ;; Registers used:
   522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;Total ram usage:        6 bytes
   533 ;; Hardware stack levels used:    1
   534 ;; Hardware stack levels required when called:    6
   535 ;; This function calls:
   536 ;;		___awdiv
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text1
   543  001968                     __ptext1:
   544                           	opt stack 0
   545  001968                     _setCorrection:
   546                           	opt stack 24
   547                           
   548                           ;user.c: 127: int sideAvg,frontAvg;
   549                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   550                           
   551                           ;incstack = 0
   552  001968  5009               	movf	_sensorValue,w,c
   553  00196A  240B               	addwf	_sensorValue+2,w,c
   554  00196C  0100               	movlb	0	; () banked
   555  00196E  6F80               	movwf	___awdiv@dividend& (0+255),b
   556  001970  500A               	movf	_sensorValue+1,w,c
   557  001972  200C               	addwfc	_sensorValue+3,w,c
   558  001974  0100               	movlb	0	; () banked
   559  001976  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   560  001978  0E00               	movlw	0
   561  00197A  0100               	movlb	0	; () banked
   562  00197C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   563  00197E  0E02               	movlw	2
   564  001980  6F82               	movwf	___awdiv@divisor& (0+255),b
   565  001982  EC2D  F00D         	call	___awdiv	;wreg free
   566  001986  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   567  00198A  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   568                           
   569                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   570  00198E  500F               	movf	_sensorValue+6,w,c
   571  001990  240D               	addwf	_sensorValue+4,w,c
   572  001992  0100               	movlb	0	; () banked
   573  001994  6F80               	movwf	___awdiv@dividend& (0+255),b
   574  001996  5010               	movf	_sensorValue+7,w,c
   575  001998  200E               	addwfc	_sensorValue+5,w,c
   576  00199A  0100               	movlb	0	; () banked
   577  00199C  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   578  00199E  0E00               	movlw	0
   579  0019A0  0100               	movlb	0	; () banked
   580  0019A2  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   581  0019A4  0E02               	movlw	2
   582  0019A6  6F82               	movwf	___awdiv@divisor& (0+255),b
   583  0019A8  EC2D  F00D         	call	___awdiv	;wreg free
   584  0019AC  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   585  0019B0  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   586                           
   587                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   588  0019B4  C009  F088         	movff	_sensorValue,??_setCorrection
   589  0019B8  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   590  0019BC  0100               	movlb	0	; () banked
   591  0019BE  1F88               	comf	??_setCorrection& (0+255),f,b
   592  0019C0  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   593  0019C2  4B88               	infsnz	??_setCorrection& (0+255),f,b
   594  0019C4  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   595  0019C6  0100               	movlb	0	; () banked
   596  0019C8  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   597  0019CA  0100               	movlb	0	; () banked
   598  0019CC  2588               	addwf	??_setCorrection& (0+255),w,b
   599  0019CE  6E01               	movwf	_sensorCorrection,c
   600  0019D0  0100               	movlb	0	; () banked
   601  0019D2  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   602  0019D4  0100               	movlb	0	; () banked
   603  0019D6  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   604  0019D8  6E02               	movwf	_sensorCorrection+1,c
   605                           
   606                           ; BSR set to: 0
   607                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   608  0019DA  EE20  F00B         	lfsr	2,_sensorValue+2
   609  0019DE  CFDE F088          	movff	postinc2,??_setCorrection
   610  0019E2  CFDD F089          	movff	postdec2,??_setCorrection+1
   611  0019E6  0100               	movlb	0	; () banked
   612  0019E8  1F88               	comf	??_setCorrection& (0+255),f,b
   613  0019EA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   614  0019EC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   615  0019EE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   616  0019F0  0100               	movlb	0	; () banked
   617  0019F2  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   618  0019F4  0100               	movlb	0	; () banked
   619  0019F6  2588               	addwf	??_setCorrection& (0+255),w,b
   620  0019F8  6E03               	movwf	_sensorCorrection+2,c
   621  0019FA  0100               	movlb	0	; () banked
   622  0019FC  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   623  0019FE  0100               	movlb	0	; () banked
   624  001A00  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   625  001A02  6E04               	movwf	_sensorCorrection+3,c
   626                           
   627                           ; BSR set to: 0
   628                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   629  001A04  EE20  F00D         	lfsr	2,_sensorValue+4
   630  001A08  CFDE F088          	movff	postinc2,??_setCorrection
   631  001A0C  CFDD F089          	movff	postdec2,??_setCorrection+1
   632  001A10  0100               	movlb	0	; () banked
   633  001A12  1F88               	comf	??_setCorrection& (0+255),f,b
   634  001A14  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   635  001A16  4B88               	infsnz	??_setCorrection& (0+255),f,b
   636  001A18  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   637  001A1A  0100               	movlb	0	; () banked
   638  001A1C  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   639  001A1E  0100               	movlb	0	; () banked
   640  001A20  2588               	addwf	??_setCorrection& (0+255),w,b
   641  001A22  6E05               	movwf	_sensorCorrection+4,c
   642  001A24  0100               	movlb	0	; () banked
   643  001A26  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   644  001A28  0100               	movlb	0	; () banked
   645  001A2A  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   646  001A2C  6E06               	movwf	_sensorCorrection+5,c
   647                           
   648                           ; BSR set to: 0
   649                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   650  001A2E  EE20  F00F         	lfsr	2,_sensorValue+6
   651  001A32  CFDE F088          	movff	postinc2,??_setCorrection
   652  001A36  CFDD F089          	movff	postdec2,??_setCorrection+1
   653  001A3A  0100               	movlb	0	; () banked
   654  001A3C  1F88               	comf	??_setCorrection& (0+255),f,b
   655  001A3E  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   656  001A40  4B88               	infsnz	??_setCorrection& (0+255),f,b
   657  001A42  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   658  001A44  0100               	movlb	0	; () banked
   659  001A46  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   660  001A48  0100               	movlb	0	; () banked
   661  001A4A  2588               	addwf	??_setCorrection& (0+255),w,b
   662  001A4C  6E07               	movwf	_sensorCorrection+6,c
   663  001A4E  0100               	movlb	0	; () banked
   664  001A50  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   665  001A52  0100               	movlb	0	; () banked
   666  001A54  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   667  001A56  6E08               	movwf	_sensorCorrection+7,c
   668                           
   669                           ; BSR set to: 0
   670  001A58  0012               	return		;funcret
   671  001A5A                     __end_of_setCorrection:
   672                           	opt stack 0
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           intcon	equ	0xFF2
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           postinc2	equ	0xFDE
   681                           postdec2	equ	0xFDD
   682                           
   683 ;; *************** function _sensorUpdate *****************
   684 ;; Defined at:
   685 ;;		line 161 in file "user.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;  getCorrectio    1    wreg     unsigned char 
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   690 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   691 ;;  j               2  115[BANK0 ] int 
   692 ;;  i               2  113[BANK0 ] int 
   693 ;; Return value:  Size  Location     Type
   694 ;;		None               void
   695 ;; Registers used:
   696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;Total ram usage:       91 bytes
   707 ;; Hardware stack levels used:    1
   708 ;; Hardware stack levels required when called:    7
   709 ;; This function calls:
   710 ;;		___wmul
   711 ;;		_sensorComputation
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text2
   718  001754                     __ptext2:
   719                           	opt stack 0
   720  001754                     _sensorUpdate:
   721                           	opt stack 23
   722                           
   723                           ; BSR set to: 0
   724                           ;incstack = 0
   725                           ;sensorUpdate@getCorrection stored from wreg
   726  001754  0100               	movlb	0	; () banked
   727  001756  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   728                           
   729                           ; BSR set to: 0
   730                           ;user.c: 163: int i,j;
   731                           ;user.c: 164: int sensorTemp[4][10];
   732                           ;user.c: 167: for(i = 0; i < 10; i++)
   733  001758  0E00               	movlw	0
   734  00175A  0100               	movlb	0	; () banked
   735  00175C  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   736  00175E  0E00               	movlw	0
   737  001760  6FF1               	movwf	sensorUpdate@i& (0+255),b
   738  001762                     l2003:
   739                           
   740                           ; BSR set to: 0
   741  001762  0100               	movlb	0	; () banked
   742  001764  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  001766  D00A               	goto	l2007
   744  001768  0100               	movlb	0	; () banked
   745  00176A  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  00176C  E178               	bnz	l2027
   747  00176E  0E0A               	movlw	10
   748  001770  0100               	movlb	0	; () banked
   749  001772  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   750  001774  B0D8               	btfsc	status,0,c
   751  001776  D073               	goto	l2027
   752  001778  D001               	goto	l2007
   753                           
   754                           ; BSR set to: 0
   755  00177A  D071               	goto	l2027
   756  00177C                     l2007:
   757                           
   758                           ; BSR set to: 0
   759                           ;user.c: 168: {
   760                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   761  00177C  0E00               	movlw	0
   762  00177E  0100               	movlb	0	; () banked
   763  001780  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   764  001782  0E00               	movlw	0
   765  001784  6FF3               	movwf	sensorUpdate@j& (0+255),b
   766  001786                     l2009:
   767                           
   768                           ; BSR set to: 0
   769  001786  0100               	movlb	0	; () banked
   770  001788  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   771  00178A  D00A               	goto	l2013
   772  00178C  0100               	movlb	0	; () banked
   773  00178E  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   774  001790  E161               	bnz	l2023
   775  001792  0E04               	movlw	4
   776  001794  0100               	movlb	0	; () banked
   777  001796  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   778  001798  B0D8               	btfsc	status,0,c
   779  00179A  D05C               	goto	l2023
   780  00179C  D001               	goto	l2013
   781                           
   782                           ; BSR set to: 0
   783  00179E  D05A               	goto	l2023
   784  0017A0                     l2013:
   785                           
   786                           ; BSR set to: 0
   787                           ;user.c: 170: {
   788                           ;user.c: 171: ADCON0 = sensorLocation[j];
   789  0017A0  0E01               	movlw	low _sensorLocation
   790  0017A2  0100               	movlb	0	; () banked
   791  0017A4  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   792  0017A6  6EF6               	movwf	tblptrl,c
   793  0017A8  0E10               	movlw	high _sensorLocation
   794  0017AA  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   795  0017AC  6EF7               	movwf	tblptrh,c
   796  0017AE                     	if	0	;There are less than 3 active tblptr bytes
   797  0017AE                     	endif
   798  0017AE  0008               	tblrd		*
   799  0017B0  CFF5 FFC2          	movff	tablat,4034	;volatile
   800                           
   801                           ; BSR set to: 0
   802                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   803  0017B4  82C2               	bsf	4034,1,c	;volatile
   804                           
   805                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   806  0017B6  D000               	goto	l340
   807  0017B8                     l340:
   808                           
   809                           ; BSR set to: 0
   810  0017B8  B2C2               	btfsc	4034,1,c	;volatile
   811  0017BA  D7FE               	goto	l340
   812                           
   813                           ; BSR set to: 0
   814                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   815                           
   816                           ; BSR set to: 0
   817  0017BC  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   818  0017C0  0E06               	movlw	6
   819  0017C2  0100               	movlb	0	; () banked
   820  0017C4  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   821  0017C6                     u1895:
   822  0017C6  0100               	movlb	0	; () banked
   823  0017C8  90D8               	bcf	status,0,c
   824  0017CA  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   825  0017CC  0100               	movlb	0	; () banked
   826  0017CE  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   827  0017D0  D7FA               	goto	u1895
   828  0017D2  0100               	movlb	0	; () banked
   829  0017D4  519A               	movf	??_sensorUpdate& (0+255),w,b
   830  0017D6  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   831  0017DA  0100               	movlb	0	; () banked
   832  0017DC  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   833  0017DE  0100               	movlb	0	; () banked
   834  0017E0  90D8               	bcf	status,0,c
   835  0017E2  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   836  0017E4  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   837  0017E6  0100               	movlb	0	; () banked
   838  0017E8  90D8               	bcf	status,0,c
   839  0017EA  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   840  0017EC  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   841  0017EE  0100               	movlb	0	; () banked
   842  0017F0  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   843  0017F2  0E00               	movlw	0
   844  0017F4  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   845  0017F6  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   846  0017FA  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   847  0017FE  0E00               	movlw	0
   848  001800  0100               	movlb	0	; () banked
   849  001802  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   850  001804  0E14               	movlw	20
   851  001806  6F82               	movwf	___wmul@multiplicand& (0+255),b
   852  001808  ECF3  F00D         	call	___wmul	;wreg free
   853  00180C  0EA0               	movlw	low sensorUpdate@sensorTemp
   854  00180E  0100               	movlb	0	; () banked
   855  001810  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   856  001812  0E00               	movlw	high sensorUpdate@sensorTemp
   857  001814  0100               	movlb	0	; () banked
   858  001816  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   859  001818  0100               	movlb	0	; () banked
   860  00181A  5180               	movf	?___wmul& (0+255),w,b
   861  00181C  0100               	movlb	0	; () banked
   862  00181E  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   863  001820  0100               	movlb	0	; () banked
   864  001822  5181               	movf	(?___wmul+1)& (0+255),w,b
   865  001824  0100               	movlb	0	; () banked
   866  001826  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   867  001828  90D8               	bcf	status,0,c
   868  00182A  0100               	movlb	0	; () banked
   869  00182C  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   870  00182E  6ED9               	movwf	fsr2l,c
   871  001830  0100               	movlb	0	; () banked
   872  001832  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   873  001834  6EDA               	movwf	fsr2h,c
   874  001836  0100               	movlb	0	; () banked
   875  001838  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   876  00183A  26D9               	addwf	fsr2l,f,c
   877  00183C  0100               	movlb	0	; () banked
   878  00183E  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   879  001840  22DA               	addwfc	fsr2h,f,c
   880  001842  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   881  001846  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   882                           
   883                           ; BSR set to: 0
   884  00184A  0100               	movlb	0	; () banked
   885  00184C  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   886  00184E  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   887  001850  D79A               	goto	l2009
   888                           
   889                           ; BSR set to: 0
   890  001852  D000               	goto	l2023
   891  001854                     l2023:
   892                           
   893                           ; BSR set to: 0
   894  001854  0100               	movlb	0	; () banked
   895  001856  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   896  001858  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   897  00185A  D783               	goto	l2003
   898                           
   899                           ; BSR set to: 0
   900  00185C  D000               	goto	l2027
   901  00185E                     l2027:
   902                           
   903                           ; BSR set to: 0
   904                           ;user.c: 176: }
   905                           ;user.c: 177: }
   906                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   907  00185E  0EA0               	movlw	low sensorUpdate@sensorTemp
   908  001860  0100               	movlb	0	; () banked
   909  001862  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   910  001864  0E00               	movlw	high sensorUpdate@sensorTemp
   911  001866  0100               	movlb	0	; () banked
   912  001868  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   913  00186A  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   914  00186E  EC03  F008         	call	_sensorComputation	;wreg free
   915  001872  0012               	return		;funcret
   916  001874                     __end_of_sensorUpdate:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           intcon	equ	0xFF2
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           postinc2	equ	0xFDE
   926                           postdec2	equ	0xFDD
   927                           fsr2h	equ	0xFDA
   928                           fsr2l	equ	0xFD9
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _sensorComputation *****************
   932 ;; Defined at:
   933 ;;		line 137 in file "user.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   936 ;;		 -> sensorUpdate@sensorTemp(80), 
   937 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  i               2   24[BANK0 ] int 
   940 ;;  j               2   22[BANK0 ] int 
   941 ;;  sum             2   20[BANK0 ] int 
   942 ;;  min             2   18[BANK0 ] int 
   943 ;;  max             2   16[BANK0 ] int 
   944 ;; Return value:  Size  Location     Type
   945 ;;		None               void
   946 ;; Registers used:
   947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;Total ram usage:       15 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    6
   960 ;; This function calls:
   961 ;;		_MAX
   962 ;;		_MIN
   963 ;;		___awdiv
   964 ;;		___wmul
   965 ;; This function is called by:
   966 ;;		_sensorUpdate
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text3
   971  001006                     __ptext3:
   972                           	opt stack 0
   973  001006                     _sensorComputation:
   974                           	opt stack 23
   975                           
   976                           ;user.c: 139: int max,min,i,j,sum;
   977                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   978                           
   979                           ;incstack = 0
   980  001006  0E00               	movlw	0
   981  001008  0100               	movlb	0	; () banked
   982  00100A  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   983  00100C  0E00               	movlw	0
   984  00100E  6F98               	movwf	sensorComputation@i& (0+255),b
   985                           
   986                           ; BSR set to: 0
   987  001010  0100               	movlb	0	; () banked
   988  001012  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   989  001014  D00A               	goto	l1955
   990  001016  0100               	movlb	0	; () banked
   991  001018  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   992  00101A  E106               	bnz	u1800
   993  00101C  0E04               	movlw	4
   994  00101E  0100               	movlb	0	; () banked
   995  001020  5D98               	subwf	sensorComputation@i& (0+255),w,b
   996  001022  B0D8               	btfsc	status,0,c
   997  001024  D151               	goto	l333
   998  001026  D001               	goto	l1955
   999  001028                     u1800:
  1000                           
  1001                           ; BSR set to: 0
  1002  001028  D14F               	goto	l333
  1003  00102A                     l1955:
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;user.c: 141: {
  1007                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1008  00102A  0E00               	movlw	0
  1009  00102C  0100               	movlb	0	; () banked
  1010  00102E  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
  1011  001030  0E00               	movlw	0
  1012  001032  6F96               	movwf	sensorComputation@j& (0+255),b
  1013                           
  1014                           ; BSR set to: 0
  1015  001034  0100               	movlb	0	; () banked
  1016  001036  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1017  001038  D00A               	goto	l1961
  1018  00103A  0100               	movlb	0	; () banked
  1019  00103C  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1020  00103E  E106               	bnz	u1810
  1021  001040  0E0A               	movlw	10
  1022  001042  0100               	movlb	0	; () banked
  1023  001044  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1024  001046  B0D8               	btfsc	status,0,c
  1025  001048  D0D3               	goto	l1971
  1026  00104A  D001               	goto	l1961
  1027  00104C                     u1810:
  1028                           
  1029                           ; BSR set to: 0
  1030  00104C  D0D1               	goto	l1971
  1031  00104E                     l1961:
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;user.c: 143: {
  1035                           ;user.c: 144: if(j == 0)
  1036  00104E  0100               	movlb	0	; () banked
  1037  001050  5196               	movf	sensorComputation@j& (0+255),w,b
  1038  001052  0100               	movlb	0	; () banked
  1039  001054  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1040  001056  A4D8               	btfss	status,2,c
  1041  001058  D031               	goto	l1965
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;user.c: 145: {
  1045                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1046  00105A  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1047  00105E  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1048  001062  0E00               	movlw	0
  1049  001064  0100               	movlb	0	; () banked
  1050  001066  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1051  001068  0E14               	movlw	20
  1052  00106A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1053  00106C  ECF3  F00D         	call	___wmul	;wreg free
  1054  001070  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1055  001074  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1056  001078  0100               	movlb	0	; () banked
  1057  00107A  5180               	movf	?___wmul& (0+255),w,b
  1058  00107C  0100               	movlb	0	; () banked
  1059  00107E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1060  001080  0100               	movlb	0	; () banked
  1061  001082  5181               	movf	(?___wmul+1)& (0+255),w,b
  1062  001084  0100               	movlb	0	; () banked
  1063  001086  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1064  001088  90D8               	bcf	status,0,c
  1065  00108A  0100               	movlb	0	; () banked
  1066  00108C  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1067  00108E  6ED9               	movwf	fsr2l,c
  1068  001090  0100               	movlb	0	; () banked
  1069  001092  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1070  001094  6EDA               	movwf	fsr2h,c
  1071  001096  0100               	movlb	0	; () banked
  1072  001098  518E               	movf	??_sensorComputation& (0+255),w,b
  1073  00109A  26D9               	addwf	fsr2l,f,c
  1074  00109C  0100               	movlb	0	; () banked
  1075  00109E  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1076  0010A0  22DA               	addwfc	fsr2h,f,c
  1077  0010A2  CFDE F090          	movff	postinc2,sensorComputation@max
  1078  0010A6  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1079  0010AA  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1080  0010AE  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1081  0010B2  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1082  0010B6  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1083                           
  1084                           ;user.c: 147: continue;
  1085  0010BA  D08F               	goto	l1967
  1086  0010BC                     l1965:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;user.c: 148: }
  1090                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1091  0010BC  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1092  0010C0  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1093  0010C4  0E00               	movlw	0
  1094  0010C6  0100               	movlb	0	; () banked
  1095  0010C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1096  0010CA  0E14               	movlw	20
  1097  0010CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1098  0010CE  ECF3  F00D         	call	___wmul	;wreg free
  1099  0010D2  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1100  0010D6  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1101  0010DA  0100               	movlb	0	; () banked
  1102  0010DC  5180               	movf	?___wmul& (0+255),w,b
  1103  0010DE  0100               	movlb	0	; () banked
  1104  0010E0  278E               	addwf	??_sensorComputation& (0+255),f,b
  1105  0010E2  0100               	movlb	0	; () banked
  1106  0010E4  5181               	movf	(?___wmul+1)& (0+255),w,b
  1107  0010E6  0100               	movlb	0	; () banked
  1108  0010E8  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1109  0010EA  90D8               	bcf	status,0,c
  1110  0010EC  0100               	movlb	0	; () banked
  1111  0010EE  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1112  0010F0  6ED9               	movwf	fsr2l,c
  1113  0010F2  0100               	movlb	0	; () banked
  1114  0010F4  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1115  0010F6  6EDA               	movwf	fsr2h,c
  1116  0010F8  0100               	movlb	0	; () banked
  1117  0010FA  518E               	movf	??_sensorComputation& (0+255),w,b
  1118  0010FC  26D9               	addwf	fsr2l,f,c
  1119  0010FE  0100               	movlb	0	; () banked
  1120  001100  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1121  001102  22DA               	addwfc	fsr2h,f,c
  1122  001104  CFDE F086          	movff	postinc2,MIN@a
  1123  001108  CFDD F087          	movff	postdec2,MIN@a+1
  1124  00110C  C092  F088         	movff	sensorComputation@min,MIN@b
  1125  001110  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1126  001114  EC29  F00E         	call	_MIN	;wreg free
  1127  001118  C086  F092         	movff	?_MIN,sensorComputation@min
  1128  00111C  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1129                           
  1130                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1131  001120  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1132  001124  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1133  001128  0E00               	movlw	0
  1134  00112A  0100               	movlb	0	; () banked
  1135  00112C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1136  00112E  0E14               	movlw	20
  1137  001130  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1138  001132  ECF3  F00D         	call	___wmul	;wreg free
  1139  001136  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1140  00113A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1141  00113E  0100               	movlb	0	; () banked
  1142  001140  5180               	movf	?___wmul& (0+255),w,b
  1143  001142  0100               	movlb	0	; () banked
  1144  001144  278E               	addwf	??_sensorComputation& (0+255),f,b
  1145  001146  0100               	movlb	0	; () banked
  1146  001148  5181               	movf	(?___wmul+1)& (0+255),w,b
  1147  00114A  0100               	movlb	0	; () banked
  1148  00114C  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1149  00114E  90D8               	bcf	status,0,c
  1150  001150  0100               	movlb	0	; () banked
  1151  001152  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1152  001154  6ED9               	movwf	fsr2l,c
  1153  001156  0100               	movlb	0	; () banked
  1154  001158  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1155  00115A  6EDA               	movwf	fsr2h,c
  1156  00115C  0100               	movlb	0	; () banked
  1157  00115E  518E               	movf	??_sensorComputation& (0+255),w,b
  1158  001160  26D9               	addwf	fsr2l,f,c
  1159  001162  0100               	movlb	0	; () banked
  1160  001164  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1161  001166  22DA               	addwfc	fsr2h,f,c
  1162  001168  CFDE F086          	movff	postinc2,MAX@a
  1163  00116C  CFDD F087          	movff	postdec2,MAX@a+1
  1164  001170  C090  F088         	movff	sensorComputation@max,MAX@b
  1165  001174  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1166  001178  EC43  F00E         	call	_MAX	;wreg free
  1167  00117C  C086  F090         	movff	?_MAX,sensorComputation@max
  1168  001180  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1169                           
  1170                           ;user.c: 151: sum += sensorTemp[i][j];
  1171  001184  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1172  001188  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1173  00118C  0E00               	movlw	0
  1174  00118E  0100               	movlb	0	; () banked
  1175  001190  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1176  001192  0E14               	movlw	20
  1177  001194  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1178  001196  ECF3  F00D         	call	___wmul	;wreg free
  1179  00119A  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1180  00119E  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1181  0011A2  0100               	movlb	0	; () banked
  1182  0011A4  5180               	movf	?___wmul& (0+255),w,b
  1183  0011A6  0100               	movlb	0	; () banked
  1184  0011A8  278E               	addwf	??_sensorComputation& (0+255),f,b
  1185  0011AA  0100               	movlb	0	; () banked
  1186  0011AC  5181               	movf	(?___wmul+1)& (0+255),w,b
  1187  0011AE  0100               	movlb	0	; () banked
  1188  0011B0  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1189  0011B2  90D8               	bcf	status,0,c
  1190  0011B4  0100               	movlb	0	; () banked
  1191  0011B6  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1192  0011B8  6ED9               	movwf	fsr2l,c
  1193  0011BA  0100               	movlb	0	; () banked
  1194  0011BC  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1195  0011BE  6EDA               	movwf	fsr2h,c
  1196  0011C0  0100               	movlb	0	; () banked
  1197  0011C2  518E               	movf	??_sensorComputation& (0+255),w,b
  1198  0011C4  26D9               	addwf	fsr2l,f,c
  1199  0011C6  0100               	movlb	0	; () banked
  1200  0011C8  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1201  0011CA  22DA               	addwfc	fsr2h,f,c
  1202  0011CC  50DE               	movf	postinc2,w,c
  1203  0011CE  0100               	movlb	0	; () banked
  1204  0011D0  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1205  0011D2  50DD               	movf	postdec2,w,c
  1206  0011D4  0100               	movlb	0	; () banked
  1207  0011D6  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1208  0011D8  D000               	goto	l1967
  1209  0011DA                     l1967:
  1210                           
  1211                           ; BSR set to: 0
  1212  0011DA  0100               	movlb	0	; () banked
  1213  0011DC  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1214  0011DE  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1215                           
  1216                           ; BSR set to: 0
  1217  0011E0  0100               	movlb	0	; () banked
  1218  0011E2  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1219  0011E4  D734               	goto	l1961
  1220  0011E6  0100               	movlb	0	; () banked
  1221  0011E8  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1222  0011EA  E102               	bnz	l1971
  1223  0011EC  D729               	goto	L2
  1224  0011EE  D000               	goto	l1971
  1225  0011F0                     l1971:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;user.c: 152: }
  1229                           ;user.c: 153: sum = sum - min - max;
  1230  0011F0  0100               	movlb	0	; () banked
  1231  0011F2  5190               	movf	sensorComputation@max& (0+255),w,b
  1232  0011F4  0100               	movlb	0	; () banked
  1233  0011F6  2592               	addwf	sensorComputation@min& (0+255),w,b
  1234  0011F8  0100               	movlb	0	; () banked
  1235  0011FA  6F8E               	movwf	??_sensorComputation& (0+255),b
  1236  0011FC  0100               	movlb	0	; () banked
  1237  0011FE  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1238  001200  0100               	movlb	0	; () banked
  1239  001202  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1240  001204  0100               	movlb	0	; () banked
  1241  001206  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1242  001208  0100               	movlb	0	; () banked
  1243  00120A  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1244  00120C  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1245  00120E  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1246  001210  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1247  001212  0100               	movlb	0	; () banked
  1248  001214  5194               	movf	sensorComputation@sum& (0+255),w,b
  1249  001216  0100               	movlb	0	; () banked
  1250  001218  258E               	addwf	??_sensorComputation& (0+255),w,b
  1251  00121A  0100               	movlb	0	; () banked
  1252  00121C  6F94               	movwf	sensorComputation@sum& (0+255),b
  1253  00121E  0100               	movlb	0	; () banked
  1254  001220  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1255  001222  0100               	movlb	0	; () banked
  1256  001224  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1257  001226  0100               	movlb	0	; () banked
  1258  001228  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1259                           
  1260                           ;user.c: 154: if(getCorrection == 1)
  1261  00122A  0100               	movlb	0	; () banked
  1262  00122C  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1263  00122E  A4D8               	btfss	status,2,c
  1264  001230  D00C               	goto	l1975
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1268  001232  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1269  001236  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1270  00123A  0E00               	movlw	0
  1271  00123C  0100               	movlb	0	; () banked
  1272  00123E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1273  001240  0E08               	movlw	8
  1274  001242  6F82               	movwf	___awdiv@divisor& (0+255),b
  1275  001244  EC2D  F00D         	call	___awdiv	;wreg free
  1276  001248  D022               	goto	L3
  1277  00124A                     l1975:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;user.c: 156: else
  1281                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1282  00124A  90D8               	bcf	status,0,c
  1283  00124C  0100               	movlb	0	; () banked
  1284  00124E  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1285  001250  6ED9               	movwf	fsr2l,c
  1286  001252  0100               	movlb	0	; () banked
  1287  001254  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1288  001256  6EDA               	movwf	fsr2h,c
  1289  001258  0E01               	movlw	low _sensorCorrection
  1290  00125A  26D9               	addwf	fsr2l,f,c
  1291  00125C  0E00               	movlw	high _sensorCorrection
  1292  00125E  22DA               	addwfc	fsr2h,f,c
  1293  001260  CFDE F08E          	movff	postinc2,??_sensorComputation
  1294  001264  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1295  001268  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1296  00126C  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1297  001270  0E00               	movlw	0
  1298  001272  0100               	movlb	0	; () banked
  1299  001274  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1300  001276  0E08               	movlw	8
  1301  001278  6F82               	movwf	___awdiv@divisor& (0+255),b
  1302  00127A  EC2D  F00D         	call	___awdiv	;wreg free
  1303  00127E  0100               	movlb	0	; () banked
  1304  001280  518E               	movf	??_sensorComputation& (0+255),w,b
  1305  001282  0100               	movlb	0	; () banked
  1306  001284  2780               	addwf	?___awdiv& (0+255),f,b
  1307  001286  0100               	movlb	0	; () banked
  1308  001288  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1309  00128A  0100               	movlb	0	; () banked
  1310  00128C  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1311  00128E                     L3:
  1312  00128E  90D8               	bcf	status,0,c
  1313  001290  0100               	movlb	0	; () banked
  1314  001292  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1315  001294  6ED9               	movwf	fsr2l,c
  1316  001296  0100               	movlb	0	; () banked
  1317  001298  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1318  00129A  6EDA               	movwf	fsr2h,c
  1319  00129C  0E09               	movlw	low _sensorValue
  1320  00129E  26D9               	addwf	fsr2l,f,c
  1321  0012A0  0E00               	movlw	high _sensorValue
  1322  0012A2  22DA               	addwfc	fsr2h,f,c
  1323  0012A4  0100               	movlb	0	; () banked
  1324  0012A6  C080  FFDE         	movff	?___awdiv,postinc2
  1325  0012AA  0100               	movlb	0	; () banked
  1326  0012AC  C081  FFDD         	movff	?___awdiv+1,postdec2
  1327  0012B0  D000               	goto	l1977
  1328  0012B2                     l1977:
  1329                           
  1330                           ; BSR set to: 0
  1331  0012B2  0100               	movlb	0	; () banked
  1332  0012B4  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1333  0012B6  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1334                           
  1335                           ; BSR set to: 0
  1336  0012B8  0100               	movlb	0	; () banked
  1337  0012BA  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1338  0012BC  D6B6               	goto	l1955
  1339  0012BE  0100               	movlb	0	; () banked
  1340  0012C0  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1341  0012C2  E102               	bnz	l333
  1342  0012C4  D6AB               	goto	L4
  1343  0012C6  D000               	goto	l333
  1344  0012C8                     l333:
  1345                           
  1346                           ; BSR set to: 0
  1347  0012C8  0012               	return		;funcret
  1348  0012CA                     __end_of_sensorComputation:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           intcon	equ	0xFF2
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           postinc2	equ	0xFDE
  1358                           postdec2	equ	0xFDD
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function ___wmul *****************
  1364 ;; Defined at:
  1365 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1368 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  product         2    4[BANK0 ] unsigned int 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2    0[BANK0 ] unsigned int 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0, prodl, prodh
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;Total ram usage:        6 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    5
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_sensorComputation
  1391 ;;		_sensorUpdate
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text4
  1396  001BE6                     __ptext4:
  1397                           	opt stack 0
  1398  001BE6                     ___wmul:
  1399                           	opt stack 23
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;incstack = 0
  1403  001BE6  0100               	movlb	0	; () banked
  1404  001BE8  5180               	movf	___wmul@multiplier& (0+255),w,b
  1405  001BEA  0100               	movlb	0	; () banked
  1406  001BEC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1407  001BEE  CFF3 F084          	movff	prodl,___wmul@product
  1408  001BF2  CFF4 F085          	movff	prodh,___wmul@product+1
  1409  001BF6  0100               	movlb	0	; () banked
  1410  001BF8  5180               	movf	___wmul@multiplier& (0+255),w,b
  1411  001BFA  0100               	movlb	0	; () banked
  1412  001BFC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1413  001BFE  50F3               	movf	prodl,w,c
  1414  001C00  0100               	movlb	0	; () banked
  1415  001C02  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1416  001C04  0100               	movlb	0	; () banked
  1417  001C06  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1418  001C08  0100               	movlb	0	; () banked
  1419  001C0A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1420  001C0C  50F3               	movf	prodl,w,c
  1421  001C0E  0100               	movlb	0	; () banked
  1422  001C10  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1423                           
  1424                           ; BSR set to: 0
  1425  001C12  C084  F080         	movff	___wmul@product,?___wmul
  1426  001C16  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1427  001C1A  D000               	goto	l354
  1428  001C1C                     l354:
  1429                           
  1430                           ; BSR set to: 0
  1431  001C1C  0012               	return		;funcret
  1432  001C1E                     __end_of___wmul:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           intcon	equ	0xFF2
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postinc2	equ	0xFDE
  1444                           postdec2	equ	0xFDD
  1445                           fsr2h	equ	0xFDA
  1446                           fsr2l	equ	0xFD9
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function ___awdiv *****************
  1450 ;; Defined at:
  1451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  dividend        2    0[BANK0 ] int 
  1454 ;;  divisor         2    2[BANK0 ] int 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  quotient        2    6[BANK0 ] int 
  1457 ;;  sign            1    5[BANK0 ] unsigned char 
  1458 ;;  counter         1    4[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    0[BANK0 ] int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:        8 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    5
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_setCorrection
  1479 ;;		_sensorComputation
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text5
  1484  001A5A                     __ptext5:
  1485                           	opt stack 0
  1486  001A5A                     ___awdiv:
  1487                           	opt stack 24
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;incstack = 0
  1491  001A5A  0E00               	movlw	0
  1492  001A5C  0100               	movlb	0	; () banked
  1493  001A5E  6F85               	movwf	___awdiv@sign& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496  001A60  0100               	movlb	0	; () banked
  1497  001A62  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1498  001A64  D009               	goto	l1897
  1499                           
  1500                           ; BSR set to: 0
  1501  001A66  0100               	movlb	0	; () banked
  1502  001A68  6D82               	negf	___awdiv@divisor& (0+255),b
  1503  001A6A  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1504  001A6C  B0D8               	btfsc	status,0,c
  1505  001A6E  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  001A70  0E01               	movlw	1
  1509  001A72  0100               	movlb	0	; () banked
  1510  001A74  6F85               	movwf	___awdiv@sign& (0+255),b
  1511  001A76  D000               	goto	l1897
  1512  001A78                     l1897:
  1513                           
  1514                           ; BSR set to: 0
  1515  001A78  0100               	movlb	0	; () banked
  1516  001A7A  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1517  001A7C  D009               	goto	l1903
  1518                           
  1519                           ; BSR set to: 0
  1520  001A7E  0100               	movlb	0	; () banked
  1521  001A80  6D80               	negf	___awdiv@dividend& (0+255),b
  1522  001A82  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1523  001A84  B0D8               	btfsc	status,0,c
  1524  001A86  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1525                           
  1526                           ; BSR set to: 0
  1527  001A88  0E01               	movlw	1
  1528  001A8A  0100               	movlb	0	; () banked
  1529  001A8C  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1530  001A8E  D000               	goto	l1903
  1531  001A90                     l1903:
  1532                           
  1533                           ; BSR set to: 0
  1534  001A90  0E00               	movlw	0
  1535  001A92  0100               	movlb	0	; () banked
  1536  001A94  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1537  001A96  0E00               	movlw	0
  1538  001A98  6F86               	movwf	___awdiv@quotient& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541  001A9A  0100               	movlb	0	; () banked
  1542  001A9C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1543  001A9E  0100               	movlb	0	; () banked
  1544  001AA0  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1545  001AA2  B4D8               	btfsc	status,2,c
  1546  001AA4  D031               	goto	l1925
  1547                           
  1548                           ; BSR set to: 0
  1549  001AA6  0E01               	movlw	1
  1550  001AA8  0100               	movlb	0	; () banked
  1551  001AAA  6F84               	movwf	___awdiv@counter& (0+255),b
  1552  001AAC  D007               	goto	l1911
  1553  001AAE                     l1909:
  1554                           
  1555                           ; BSR set to: 0
  1556  001AAE  0100               	movlb	0	; () banked
  1557  001AB0  90D8               	bcf	status,0,c
  1558  001AB2  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1559  001AB4  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1560  001AB6  0100               	movlb	0	; () banked
  1561  001AB8  2B84               	incf	___awdiv@counter& (0+255),f,b
  1562  001ABA  D000               	goto	l1911
  1563  001ABC                     l1911:
  1564                           
  1565                           ; BSR set to: 0
  1566  001ABC  0100               	movlb	0	; () banked
  1567  001ABE  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1568  001AC0  D002               	goto	l1913
  1569  001AC2  D7F5               	goto	l1909
  1570                           
  1571                           ; BSR set to: 0
  1572  001AC4  D000               	goto	l1913
  1573  001AC6                     l1913:
  1574                           
  1575                           ; BSR set to: 0
  1576  001AC6  0100               	movlb	0	; () banked
  1577  001AC8  90D8               	bcf	status,0,c
  1578  001ACA  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1579  001ACC  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1580                           
  1581                           ; BSR set to: 0
  1582  001ACE  0100               	movlb	0	; () banked
  1583  001AD0  5182               	movf	___awdiv@divisor& (0+255),w,b
  1584  001AD2  0100               	movlb	0	; () banked
  1585  001AD4  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1586  001AD6  0100               	movlb	0	; () banked
  1587  001AD8  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1588  001ADA  0100               	movlb	0	; () banked
  1589  001ADC  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1590  001ADE  A0D8               	btfss	status,0,c
  1591  001AE0  D00B               	goto	l1921
  1592                           
  1593                           ; BSR set to: 0
  1594  001AE2  0100               	movlb	0	; () banked
  1595  001AE4  5182               	movf	___awdiv@divisor& (0+255),w,b
  1596  001AE6  0100               	movlb	0	; () banked
  1597  001AE8  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1598  001AEA  0100               	movlb	0	; () banked
  1599  001AEC  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1600  001AEE  0100               	movlb	0	; () banked
  1601  001AF0  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1602                           
  1603                           ; BSR set to: 0
  1604  001AF2  0100               	movlb	0	; () banked
  1605  001AF4  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1606  001AF6  D000               	goto	l1921
  1607  001AF8                     l1921:
  1608                           
  1609                           ; BSR set to: 0
  1610  001AF8  0100               	movlb	0	; () banked
  1611  001AFA  90D8               	bcf	status,0,c
  1612  001AFC  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1613  001AFE  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 0
  1616  001B00  0100               	movlb	0	; () banked
  1617  001B02  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1618  001B04  D7E0               	goto	l1913
  1619                           
  1620                           ; BSR set to: 0
  1621  001B06  D000               	goto	l1925
  1622  001B08                     l1925:
  1623                           
  1624                           ; BSR set to: 0
  1625  001B08  0100               	movlb	0	; () banked
  1626  001B0A  5185               	movf	___awdiv@sign& (0+255),w,b
  1627  001B0C  0100               	movlb	0	; () banked
  1628  001B0E  B4D8               	btfsc	status,2,c
  1629  001B10  D006               	goto	l1929
  1630                           
  1631                           ; BSR set to: 0
  1632  001B12  0100               	movlb	0	; () banked
  1633  001B14  6D86               	negf	___awdiv@quotient& (0+255),b
  1634  001B16  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1635  001B18  B0D8               	btfsc	status,0,c
  1636  001B1A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1637  001B1C  D000               	goto	l1929
  1638  001B1E                     l1929:
  1639                           
  1640                           ; BSR set to: 0
  1641  001B1E  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1642  001B22  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1643  001B26  D000               	goto	l547
  1644  001B28                     l547:
  1645                           
  1646                           ; BSR set to: 0
  1647  001B28  0012               	return		;funcret
  1648  001B2A                     __end_of___awdiv:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           intcon	equ	0xFF2
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _MIN *****************
  1666 ;; Defined at:
  1667 ;;		line 184 in file "user.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  a               2    6[BANK0 ] int 
  1670 ;;  b               2    8[BANK0 ] int 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  2    6[BANK0 ] int 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1682 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;Total ram usage:        5 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    5
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_sensorComputation
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text6
  1697  001C52                     __ptext6:
  1698                           	opt stack 0
  1699  001C52                     _MIN:
  1700                           	opt stack 23
  1701                           
  1702                           ;user.c: 186: if(a>b) return b;
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;incstack = 0
  1706  001C52  0100               	movlb	0	; () banked
  1707  001C54  5186               	movf	MIN@a& (0+255),w,b
  1708  001C56  0100               	movlb	0	; () banked
  1709  001C58  5D88               	subwf	MIN@b& (0+255),w,b
  1710  001C5A  0100               	movlb	0	; () banked
  1711  001C5C  5189               	movf	(MIN@b+1)& (0+255),w,b
  1712  001C5E  0A80               	xorlw	128
  1713  001C60  0100               	movlb	0	; () banked
  1714  001C62  6F8A               	movwf	??_MIN& (0+255),b
  1715  001C64  0100               	movlb	0	; () banked
  1716  001C66  5187               	movf	(MIN@a+1)& (0+255),w,b
  1717  001C68  0A80               	xorlw	128
  1718  001C6A  0100               	movlb	0	; () banked
  1719  001C6C  598A               	subwfb	??_MIN& (0+255),w,b
  1720  001C6E  B0D8               	btfsc	status,0,c
  1721  001C70  D005               	goto	l346
  1722                           
  1723                           ; BSR set to: 0
  1724  001C72  C088  F086         	movff	MIN@b,?_MIN
  1725  001C76  C089  F087         	movff	MIN@b+1,?_MIN+1
  1726  001C7A  D004               	goto	l347
  1727  001C7C                     l346:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;user.c: 187: return a;
  1731  001C7C  C086  F086         	movff	MIN@a,?_MIN
  1732  001C80  C087  F087         	movff	MIN@a+1,?_MIN+1
  1733  001C84                     l347:
  1734                           
  1735                           ; BSR set to: 0
  1736  001C84  0012               	return		;funcret
  1737  001C86                     __end_of_MIN:
  1738                           	opt stack 0
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           prodh	equ	0xFF4
  1744                           prodl	equ	0xFF3
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _MAX *****************
  1755 ;; Defined at:
  1756 ;;		line 190 in file "user.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  a               2    6[BANK0 ] int 
  1759 ;;  b               2    8[BANK0 ] int 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  2    6[BANK0 ] int 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        5 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    5
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_sensorComputation
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text7
  1786  001C86                     __ptext7:
  1787                           	opt stack 0
  1788  001C86                     _MAX:
  1789                           	opt stack 23
  1790                           
  1791                           ;user.c: 192: if(a>b) return a;
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;incstack = 0
  1795  001C86  0100               	movlb	0	; () banked
  1796  001C88  5186               	movf	MAX@a& (0+255),w,b
  1797  001C8A  0100               	movlb	0	; () banked
  1798  001C8C  5D88               	subwf	MAX@b& (0+255),w,b
  1799  001C8E  0100               	movlb	0	; () banked
  1800  001C90  5189               	movf	(MAX@b+1)& (0+255),w,b
  1801  001C92  0A80               	xorlw	128
  1802  001C94  0100               	movlb	0	; () banked
  1803  001C96  6F8A               	movwf	??_MAX& (0+255),b
  1804  001C98  0100               	movlb	0	; () banked
  1805  001C9A  5187               	movf	(MAX@a+1)& (0+255),w,b
  1806  001C9C  0A80               	xorlw	128
  1807  001C9E  0100               	movlb	0	; () banked
  1808  001CA0  598A               	subwfb	??_MAX& (0+255),w,b
  1809  001CA2  B0D8               	btfsc	status,0,c
  1810  001CA4  D005               	goto	l350
  1811                           
  1812                           ; BSR set to: 0
  1813  001CA6  C086  F086         	movff	MAX@a,?_MAX
  1814  001CAA  C087  F087         	movff	MAX@a+1,?_MAX+1
  1815  001CAE  D004               	goto	l351
  1816  001CB0                     l350:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;user.c: 193: return b;
  1820  001CB0  C088  F086         	movff	MAX@b,?_MAX
  1821  001CB4  C089  F087         	movff	MAX@b+1,?_MAX+1
  1822  001CB8                     l351:
  1823                           
  1824                           ; BSR set to: 0
  1825  001CB8  0012               	return		;funcret
  1826  001CBA                     __end_of_MAX:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _InitApp *****************
  1844 ;; Defined at:
  1845 ;;		line 35 in file "user.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;		None               void
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;Total ram usage:        0 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    6
  1866 ;; This function calls:
  1867 ;;		_AlgorithmSelection
  1868 ;;		_delay
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text8
  1875  001B6E                     __ptext8:
  1876                           	opt stack 0
  1877  001B6E                     _InitApp:
  1878                           	opt stack 24
  1879                           
  1880                           ;user.c: 39: TRISC = 0;
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;incstack = 0
  1884  001B6E  0E00               	movlw	0
  1885  001B70  6E94               	movwf	3988,c	;volatile
  1886                           
  1887                           ;user.c: 43: TRISEbits.TRISE1=1;
  1888  001B72  8296               	bsf	3990,1,c	;volatile
  1889                           
  1890                           ;user.c: 45: TRISEbits.TRISE2=1;
  1891  001B74  8496               	bsf	3990,2,c	;volatile
  1892                           
  1893                           ;user.c: 47: TRISBbits.RB1=1;
  1894  001B76  8293               	bsf	3987,1,c	;volatile
  1895                           
  1896                           ;user.c: 49: TRISBbits.RB0=1;
  1897  001B78  8093               	bsf	3987,0,c	;volatile
  1898                           
  1899                           ;user.c: 52: TRISBbits.RB3=1;
  1900  001B7A  8693               	bsf	3987,3,c	;volatile
  1901                           
  1902                           ;user.c: 54: TRISBbits.RB2=1;
  1903  001B7C  8493               	bsf	3987,2,c	;volatile
  1904                           
  1905                           ;user.c: 58: ADCON1 =0b00000001;
  1906  001B7E  0E01               	movlw	1
  1907  001B80  6EC1               	movwf	4033,c	;volatile
  1908                           
  1909                           ;user.c: 63: ADCON2=0b00001010;
  1910  001B82  0E0A               	movlw	10
  1911  001B84  6EC0               	movwf	4032,c	;volatile
  1912                           
  1913                           ;user.c: 68: ADCON0=0b00101011;
  1914  001B86  0E2B               	movlw	43
  1915  001B88  6EC2               	movwf	4034,c	;volatile
  1916                           
  1917                           ;user.c: 77: T0CON = 0b11000100;
  1918  001B8A  0EC4               	movlw	196
  1919  001B8C  6ED5               	movwf	4053,c	;volatile
  1920                           
  1921                           ;user.c: 85: INTCON2 = 0b11110100;
  1922  001B8E  0EF4               	movlw	244
  1923  001B90  6EF1               	movwf	intcon2,c	;volatile
  1924                           
  1925                           ;user.c: 95: INTCON = 0b00100000;
  1926  001B92  0E20               	movlw	32
  1927  001B94  6EF2               	movwf	intcon,c	;volatile
  1928                           
  1929                           ;user.c: 105: AlgorithmSelection();
  1930  001B96  ECB3  F00E         	call	_AlgorithmSelection	;wreg free
  1931                           
  1932                           ;user.c: 108: delay(1000);
  1933  001B9A  0E03               	movlw	3
  1934  001B9C  0100               	movlb	0	; () banked
  1935  001B9E  6F81               	movwf	(delay@ms+1)& (0+255),b
  1936  001BA0  0EE8               	movlw	232
  1937  001BA2  6F80               	movwf	delay@ms& (0+255),b
  1938  001BA4  EC95  F00D         	call	_delay	;wreg free
  1939  001BA8  0012               	return		;funcret
  1940  001BAA                     __end_of_InitApp:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon	equ	0xFF2
  1949                           intcon2	equ	0xFF1
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _delay *****************
  1959 ;; Defined at:
  1960 ;;		line 29 in file "user.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  ms              2    0[BANK0 ] unsigned int 
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  x               2    3[BANK0 ] int 
  1965 ;; Return value:  Size  Location     Type
  1966 ;;		None               void
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, status,0
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;Total ram usage:        5 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    5
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_InitApp
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           	psect	text9
  1989  001B2A                     __ptext9:
  1990                           	opt stack 0
  1991  001B2A                     _delay:
  1992                           	opt stack 24
  1993                           
  1994                           ;user.c: 30: int x = 0;
  1995                           
  1996                           ;incstack = 0
  1997  001B2A  0E00               	movlw	0
  1998  001B2C  0100               	movlb	0	; () banked
  1999  001B2E  6F84               	movwf	(delay@x+1)& (0+255),b
  2000  001B30  0E00               	movlw	0
  2001  001B32  6F83               	movwf	delay@x& (0+255),b
  2002                           
  2003                           ;user.c: 31: for (x = 0; x < ms; x++)
  2004  001B34  0E00               	movlw	0
  2005  001B36  0100               	movlb	0	; () banked
  2006  001B38  6F84               	movwf	(delay@x+1)& (0+255),b
  2007  001B3A  0E00               	movlw	0
  2008  001B3C  6F83               	movwf	delay@x& (0+255),b
  2009  001B3E  D00C               	goto	l305
  2010  001B40                     l1935:
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2014  001B40  0E0B               	movlw	11
  2015  001B42  0100               	movlb	0	; () banked
  2016  001B44  6F82               	movwf	??_delay& (0+255),b
  2017  001B46  0E62               	movlw	98
  2018  001B48                     u1927:
  2019  001B48  2EE8               	decfsz	wreg,f,c
  2020  001B4A  D7FE               	goto	u1927
  2021  001B4C  2F82               	decfsz	??_delay& (0+255),f,b
  2022  001B4E  D7FC               	goto	u1927
  2023  001B50  D000               	nop2	
  2024  001B52  0100               	movlb	0	; () banked
  2025  001B54  4B83               	infsnz	delay@x& (0+255),f,b
  2026  001B56  2B84               	incf	(delay@x+1)& (0+255),f,b
  2027  001B58                     l305:
  2028                           
  2029                           ; BSR set to: 0
  2030  001B58  0100               	movlb	0	; () banked
  2031  001B5A  5180               	movf	delay@ms& (0+255),w,b
  2032  001B5C  0100               	movlb	0	; () banked
  2033  001B5E  5D83               	subwf	delay@x& (0+255),w,b
  2034  001B60  0100               	movlb	0	; () banked
  2035  001B62  5181               	movf	(delay@ms+1)& (0+255),w,b
  2036  001B64  0100               	movlb	0	; () banked
  2037  001B66  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2038  001B68  A0D8               	btfss	status,0,c
  2039  001B6A  D7EA               	goto	l1935
  2040                           
  2041                           ; BSR set to: 0
  2042                           
  2043                           ; BSR set to: 0
  2044  001B6C  0012               	return		;funcret
  2045  001B6E                     __end_of_delay:
  2046                           	opt stack 0
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           prodh	equ	0xFF4
  2052                           prodl	equ	0xFF3
  2053                           intcon	equ	0xFF2
  2054                           intcon2	equ	0xFF1
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           postinc2	equ	0xFDE
  2058                           postdec2	equ	0xFDD
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _AlgorithmSelection *****************
  2064 ;; Defined at:
  2065 ;;		line 112 in file "user.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    5
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_InitApp
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text10
  2094  001D66                     __ptext10:
  2095                           	opt stack 0
  2096  001D66                     _AlgorithmSelection:
  2097                           	opt stack 24
  2098                           
  2099                           ;user.c: 114: ADCON0 = 0b00100111;
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;incstack = 0
  2103  001D66  0E27               	movlw	39
  2104  001D68  6EC2               	movwf	4034,c	;volatile
  2105                           
  2106                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2107  001D6A  82C2               	bsf	4034,1,c	;volatile
  2108                           
  2109                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2110  001D6C  D000               	goto	l314
  2111  001D6E                     l314:
  2112  001D6E  B2C2               	btfsc	4034,1,c	;volatile
  2113  001D70  D7FE               	goto	l314
  2114                           
  2115                           ;user.c: 119: if(ADRESL > 0b10000000)
  2116  001D72  0E80               	movlw	128
  2117  001D74  64C3               	cpfsgt	4035,c	;volatile
  2118  001D76  D002               	goto	l1947
  2119                           
  2120                           ;user.c: 120: algorithm = LEFTWALL;
  2121  001D78  0E00               	movlw	0
  2122  001D7A  D001               	goto	L5
  2123  001D7C                     l1947:
  2124                           
  2125                           ;user.c: 121: else
  2126                           ;user.c: 122: algorithm = RIGHTWALL;
  2127  001D7C  0E01               	movlw	1
  2128  001D7E                     L5:
  2129  001D7E  6E32               	movwf	_algorithm,c
  2130  001D80  D000               	goto	l319
  2131  001D82                     l319:
  2132  001D82  0012               	return		;funcret
  2133  001D84                     __end_of_AlgorithmSelection:
  2134                           	opt stack 0
  2135                           tblptru	equ	0xFF8
  2136                           tblptrh	equ	0xFF7
  2137                           tblptrl	equ	0xFF6
  2138                           tablat	equ	0xFF5
  2139                           prodh	equ	0xFF4
  2140                           prodl	equ	0xFF3
  2141                           intcon	equ	0xFF2
  2142                           intcon2	equ	0xFF1
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _ConfigureOscillator *****************
  2152 ;; Defined at:
  2153 ;;		line 24 in file "system.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;Total ram usage:        0 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    5
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text11
  2182  001D94                     __ptext11:
  2183                           	opt stack 0
  2184  001D94                     _ConfigureOscillator:
  2185                           	opt stack 25
  2186                           
  2187                           ;system.c: 29: OSCCON = 0b01111100;
  2188                           
  2189                           ;incstack = 0
  2190  001D94  0E7C               	movlw	124
  2191  001D96  6ED3               	movwf	4051,c	;volatile
  2192                           
  2193                           ;system.c: 31: OSCTUNE = 0b01001111;
  2194  001D98  0E4F               	movlw	79
  2195  001D9A  6E9B               	movwf	3995,c	;volatile
  2196  001D9C  0012               	return		;funcret
  2197  001D9E                     __end_of_ConfigureOscillator:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           intcon	equ	0xFF2
  2206                           intcon2	equ	0xFF1
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _low_isr *****************
  2216 ;; Defined at:
  2217 ;;		line 199 in file "interrupts.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;		None
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;		None               void
  2224 ;; Registers used:
  2225 ;;		None
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;Total ram usage:       17 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    4
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		Interrupt level 1
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	intcodelo
  2246  000018                     __pintcodelo:
  2247                           	opt stack 0
  2248  000018                     _low_isr:
  2249                           	opt stack 23
  2250                           
  2251                           ;incstack = 0
  2252  000018  CFD8 F036          	movff	status,??_low_isr
  2253  00001C  CFE8 F037          	movff	wreg,??_low_isr+1
  2254  000020  CFE0 F038          	movff	bsr,??_low_isr+2
  2255  000024  CFFA F039          	movff	pclath,??_low_isr+3
  2256  000028  CFFB F03A          	movff	pclatu,??_low_isr+4
  2257  00002C  CFE9 F03B          	movff	fsr0l,??_low_isr+5
  2258  000030  CFEA F03C          	movff	fsr0h,??_low_isr+6
  2259  000034  CFE1 F03D          	movff	fsr1l,??_low_isr+7
  2260  000038  CFE2 F03E          	movff	fsr1h,??_low_isr+8
  2261  00003C  CFD9 F03F          	movff	fsr2l,??_low_isr+9
  2262  000040  CFDA F040          	movff	fsr2h,??_low_isr+10
  2263  000044  CFF3 F041          	movff	prodl,??_low_isr+11
  2264  000048  CFF4 F042          	movff	prodh,??_low_isr+12
  2265  00004C  CFF6 F043          	movff	tblptrl,??_low_isr+13
  2266  000050  CFF7 F044          	movff	tblptrh,??_low_isr+14
  2267  000054  CFF8 F045          	movff	tblptru,??_low_isr+15
  2268  000058  CFF5 F046          	movff	tablat,??_low_isr+16
  2269  00005C  C046  FFF5         	movff	??_low_isr+16,tablat
  2270  000060  C045  FFF8         	movff	??_low_isr+15,tblptru
  2271  000064  C044  FFF7         	movff	??_low_isr+14,tblptrh
  2272  000068  C043  FFF6         	movff	??_low_isr+13,tblptrl
  2273  00006C  C042  FFF4         	movff	??_low_isr+12,prodh
  2274  000070  C041  FFF3         	movff	??_low_isr+11,prodl
  2275  000074  C040  FFDA         	movff	??_low_isr+10,fsr2h
  2276  000078  C03F  FFD9         	movff	??_low_isr+9,fsr2l
  2277  00007C  C03E  FFE2         	movff	??_low_isr+8,fsr1h
  2278  000080  C03D  FFE1         	movff	??_low_isr+7,fsr1l
  2279  000084  C03C  FFEA         	movff	??_low_isr+6,fsr0h
  2280  000088  C03B  FFE9         	movff	??_low_isr+5,fsr0l
  2281  00008C  C03A  FFFB         	movff	??_low_isr+4,pclatu
  2282  000090  C039  FFFA         	movff	??_low_isr+3,pclath
  2283  000094  C038  FFE0         	movff	??_low_isr+2,bsr
  2284  000098  C037  FFE8         	movff	??_low_isr+1,wreg
  2285  00009C  C036  FFD8         	movff	??_low_isr,status
  2286  0000A0  0010               	retfie	
  2287  0000A2                     __end_of_low_isr:
  2288                           	opt stack 0
  2289                           pclatu	equ	0xFFB
  2290                           pclath	equ	0xFFA
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           prodh	equ	0xFF4
  2296                           prodl	equ	0xFF3
  2297                           intcon	equ	0xFF2
  2298                           intcon2	equ	0xFF1
  2299                           postinc0	equ	0xFEE
  2300                           fsr0h	equ	0xFEA
  2301                           fsr0l	equ	0xFE9
  2302                           wreg	equ	0xFE8
  2303                           fsr1h	equ	0xFE2
  2304                           fsr1l	equ	0xFE1
  2305                           bsr	equ	0xFE0
  2306                           postinc2	equ	0xFDE
  2307                           postdec2	equ	0xFDD
  2308                           fsr2h	equ	0xFDA
  2309                           fsr2l	equ	0xFD9
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _high_isr *****************
  2313 ;; Defined at:
  2314 ;;		line 106 in file "interrupts.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;		None
  2319 ;; Return value:  Size  Location     Type
  2320 ;;		None               void
  2321 ;; Registers used:
  2322 ;;		wreg, status,2, status,0, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;Total ram usage:       14 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    3
  2335 ;; This function calls:
  2336 ;;		_forward
  2337 ;;		_initialRotation
  2338 ;;		_merge
  2339 ;;		_motorCounterUpdate
  2340 ;;		_moveMouse
  2341 ;;		_rotate
  2342 ;;		_singleForward
  2343 ;;		_stateUpdate
  2344 ;; This function is called by:
  2345 ;;		Interrupt level 2
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	intcode
  2350  000008                     __pintcode:
  2351                           	opt stack 0
  2352  000008                     _high_isr:
  2353                           	opt stack 23
  2354                           
  2355                           ;incstack = 0
  2356  000008  CFFA F04D          	movff	pclath,??_high_isr
  2357  00000C  CFFB F04E          	movff	pclatu,??_high_isr+1
  2358  000010  CFE9 F04F          	movff	fsr0l,??_high_isr+2
  2359  000014  ED65  F009         	call	int_func,f	;refresh shadow registers
  2360                           pclatu	equ	0xFFB
  2361                           pclath	equ	0xFFA
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           prodh	equ	0xFF4
  2367                           prodl	equ	0xFF3
  2368                           intcon	equ	0xFF2
  2369                           intcon2	equ	0xFF1
  2370                           postinc0	equ	0xFEE
  2371                           fsr0h	equ	0xFEA
  2372                           fsr0l	equ	0xFE9
  2373                           wreg	equ	0xFE8
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           bsr	equ	0xFE0
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383                           	psect	intcode_body
  2384  0012CA                     __pintcode_body:
  2385                           	opt stack 23
  2386  0012CA                     int_func:
  2387                           	opt stack 23
  2388  0012CA  0006               	pop		; remove dummy address from shadow register refresh
  2389  0012CC  CFEA F050          	movff	fsr0h,??_high_isr+3
  2390  0012D0  CFE1 F051          	movff	fsr1l,??_high_isr+4
  2391  0012D4  CFE2 F052          	movff	fsr1h,??_high_isr+5
  2392  0012D8  CFD9 F053          	movff	fsr2l,??_high_isr+6
  2393  0012DC  CFDA F054          	movff	fsr2h,??_high_isr+7
  2394  0012E0  CFF3 F055          	movff	prodl,??_high_isr+8
  2395  0012E4  CFF4 F056          	movff	prodh,??_high_isr+9
  2396  0012E8  CFF6 F057          	movff	tblptrl,??_high_isr+10
  2397  0012EC  CFF7 F058          	movff	tblptrh,??_high_isr+11
  2398  0012F0  CFF8 F059          	movff	tblptru,??_high_isr+12
  2399  0012F4  CFF5 F05A          	movff	tablat,??_high_isr+13
  2400                           
  2401                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2402  0012F8  A4F2               	btfss	intcon,2,c	;volatile
  2403  0012FA  D101               	goto	i2l116
  2404                           
  2405                           ;interrupts.c: 126: {
  2406                           ;interrupts.c: 127: if(MotorDelayCounter > 2)
  2407  0012FC  BE18               	btfsc	_MotorDelayCounter+1,7,c
  2408  0012FE  D0FB               	goto	i2l1839
  2409  001300  5018               	movf	_MotorDelayCounter+1,w,c
  2410  001302  E104               	bnz	i2u142_40
  2411  001304  0E03               	movlw	3
  2412  001306  5C17               	subwf	_MotorDelayCounter,w,c
  2413  001308  A0D8               	btfss	status,0,c
  2414  00130A  D0F5               	goto	i2l1839
  2415  00130C                     i2u142_40:
  2416                           
  2417                           ;interrupts.c: 128: {
  2418                           ;interrupts.c: 129: stateUpdate();
  2419  00130C  EC9C  F00A         	call	_stateUpdate	;wreg free
  2420                           
  2421                           ;interrupts.c: 131: if(cState != pState)
  2422  001310  505D               	movf	_pState,w,c
  2423  001312  185B               	xorwf	_cState,w,c
  2424  001314  B4D8               	btfsc	status,2,c
  2425  001316  D002               	goto	i2l1745
  2426                           
  2427                           ;interrupts.c: 132: ChangeRequired = 1;
  2428  001318  0E01               	movlw	1
  2429  00131A  D001               	goto	L6
  2430  00131C                     i2l1745:
  2431                           
  2432                           ;interrupts.c: 133: else
  2433                           ;interrupts.c: 134: ChangeRequired = 0;
  2434  00131C  0E00               	movlw	0
  2435  00131E                     L6:
  2436  00131E  6E2F               	movwf	_ChangeRequired,c
  2437  001320  D000               	goto	i2l1747
  2438  001322                     i2l1747:
  2439                           
  2440                           ;interrupts.c: 136: if(ChangeRequired == 1 && RotateCounter == 0)
  2441  001322  042F               	decf	_ChangeRequired,w,c
  2442  001324  A4D8               	btfss	status,2,c
  2443  001326  D01B               	goto	i2l1765
  2444  001328  501D               	movf	_RotateCounter,w,c
  2445  00132A  101E               	iorwf	_RotateCounter+1,w,c
  2446  00132C  A4D8               	btfss	status,2,c
  2447  00132E  D017               	goto	i2l1765
  2448                           
  2449                           ;interrupts.c: 137: {
  2450                           ;interrupts.c: 138: if(ForwardCounter == 0)
  2451  001330  5013               	movf	_ForwardCounter,w,c
  2452  001332  1014               	iorwf	_ForwardCounter+1,w,c
  2453  001334  A4D8               	btfss	status,2,c
  2454  001336  D00C               	goto	i2l1759
  2455                           
  2456                           ;interrupts.c: 139: {
  2457                           ;interrupts.c: 140: if(justTurned == 1)
  2458  001338  0434               	decf	_justTurned,w,c
  2459  00133A  A4D8               	btfss	status,2,c
  2460  00133C  D004               	goto	i2l1757
  2461                           
  2462                           ;interrupts.c: 141: ForwardCounter = 350;
  2463  00133E  0E01               	movlw	1
  2464  001340  6E14               	movwf	_ForwardCounter+1,c
  2465  001342  0E5E               	movlw	94
  2466  001344  D003               	goto	L7
  2467  001346                     i2l1757:
  2468                           
  2469                           ;interrupts.c: 142: else
  2470                           ;interrupts.c: 143: ForwardCounter = 320;
  2471  001346  0E01               	movlw	1
  2472  001348  6E14               	movwf	_ForwardCounter+1,c
  2473  00134A  0E40               	movlw	64
  2474  00134C                     L7:
  2475  00134C  6E13               	movwf	_ForwardCounter,c
  2476  00134E  D000               	goto	i2l1759
  2477  001350                     i2l1759:
  2478                           
  2479                           ;interrupts.c: 144: }
  2480                           ;interrupts.c: 145: forward();
  2481  001350  EC8E  F00E         	call	_forward	;wreg free
  2482                           
  2483                           ;interrupts.c: 146: pState = cState;
  2484  001354  C05B  F05D         	movff	_cState,_pState
  2485                           
  2486                           ;interrupts.c: 147: ChangeRequired = 0;
  2487  001358  0E00               	movlw	0
  2488  00135A  6E2F               	movwf	_ChangeRequired,c
  2489                           
  2490                           ;interrupts.c: 148: }
  2491  00135C  D0C0               	goto	i2l87
  2492  00135E                     i2l1765:
  2493                           
  2494                           ;interrupts.c: 149: else if(RotateCounter > 0) {
  2495  00135E  BE1E               	btfsc	_RotateCounter+1,7,c
  2496  001360  D029               	goto	i2l1781
  2497  001362  501E               	movf	_RotateCounter+1,w,c
  2498  001364  E103               	bnz	i2u148_40
  2499  001366  041D               	decf	_RotateCounter,w,c
  2500  001368  A0D8               	btfss	status,0,c
  2501  00136A  D024               	goto	i2l1781
  2502  00136C                     i2u148_40:
  2503                           
  2504                           ;interrupts.c: 150: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2505  00136C  BE0E               	btfsc	_sensorValue+5,7,c
  2506  00136E  D006               	goto	i2l1769
  2507  001370  500E               	movf	_sensorValue+5,w,c
  2508  001372  E114               	bnz	i2l1775
  2509  001374  0E64               	movlw	100
  2510  001376  5C0D               	subwf	_sensorValue+4,w,c
  2511  001378  B0D8               	btfsc	status,0,c
  2512  00137A  D010               	goto	i2l1775
  2513  00137C                     i2l1769:
  2514  00137C  BE10               	btfsc	_sensorValue+7,7,c
  2515  00137E  D006               	goto	i2l1771
  2516  001380  5010               	movf	_sensorValue+7,w,c
  2517  001382  E10C               	bnz	i2l1775
  2518  001384  0E64               	movlw	100
  2519  001386  5C0F               	subwf	_sensorValue+6,w,c
  2520  001388  B0D8               	btfsc	status,0,c
  2521  00138A  D008               	goto	i2l1775
  2522  00138C                     i2l1771:
  2523  00138C  0433               	decf	_deadEnd,w,c
  2524  00138E  A4D8               	btfss	status,2,c
  2525  001390  D005               	goto	i2l1775
  2526                           
  2527                           ;interrupts.c: 151: RotateCounter = 5;
  2528  001392  0E00               	movlw	0
  2529  001394  6E1E               	movwf	_RotateCounter+1,c
  2530  001396  0E05               	movlw	5
  2531  001398  6E1D               	movwf	_RotateCounter,c
  2532  00139A  D000               	goto	i2l1775
  2533  00139C                     i2l1775:
  2534                           
  2535                           ;interrupts.c: 152: rotate(rotatingSide);
  2536  00139C  5035               	movf	_rotatingSide,w,c
  2537  00139E  ECD5  F00D         	call	_rotate
  2538                           
  2539                           ;interrupts.c: 153: TurnRight = 0;
  2540  0013A2  0E00               	movlw	0
  2541  0013A4  6E22               	movwf	_TurnRight+1,c
  2542  0013A6  0E00               	movlw	0
  2543  0013A8  6E21               	movwf	_TurnRight,c
  2544                           
  2545                           ;interrupts.c: 154: TurnLeft = 0;
  2546  0013AA  0E00               	movlw	0
  2547  0013AC  6E20               	movwf	_TurnLeft+1,c
  2548  0013AE  0E00               	movlw	0
  2549  0013B0  6E1F               	movwf	_TurnLeft,c
  2550                           
  2551                           ;interrupts.c: 155: }
  2552  0013B2  D095               	goto	i2l87
  2553  0013B4                     i2l1781:
  2554                           
  2555                           ;interrupts.c: 156: else if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 
      +                          0)
  2556  0013B4  BE28               	btfsc	_controlToLeft+1,7,c
  2557  0013B6  D005               	goto	i2l1783
  2558  0013B8  5028               	movf	_controlToLeft+1,w,c
  2559  0013BA  E113               	bnz	i2l1787
  2560  0013BC  0427               	decf	_controlToLeft,w,c
  2561  0013BE  B0D8               	btfsc	status,0,c
  2562  0013C0  D010               	goto	i2l1787
  2563  0013C2                     i2l1783:
  2564  0013C2  BE2A               	btfsc	_controlToRight+1,7,c
  2565  0013C4  D005               	goto	i2l1785
  2566  0013C6  502A               	movf	_controlToRight+1,w,c
  2567  0013C8  E10C               	bnz	i2l1787
  2568  0013CA  0429               	decf	_controlToRight,w,c
  2569  0013CC  B0D8               	btfsc	status,0,c
  2570  0013CE  D009               	goto	i2l1787
  2571  0013D0                     i2l1785:
  2572  0013D0  BE14               	btfsc	_ForwardCounter+1,7,c
  2573  0013D2  D02A               	goto	i2l1801
  2574  0013D4  5014               	movf	_ForwardCounter+1,w,c
  2575  0013D6  E105               	bnz	i2l1787
  2576  0013D8  0413               	decf	_ForwardCounter,w,c
  2577  0013DA  B0D8               	btfsc	status,0,c
  2578  0013DC  D002               	goto	i2l1787
  2579  0013DE  D024               	goto	i2l1801
  2580  0013E0  D000               	goto	i2l1787
  2581  0013E2                     i2l1787:
  2582                           
  2583                           ;interrupts.c: 157: {
  2584                           ;interrupts.c: 160: if(controlToLeft > 0 )
  2585  0013E2  BE28               	btfsc	_controlToLeft+1,7,c
  2586  0013E4  D00E               	goto	i2l1793
  2587  0013E6  5028               	movf	_controlToLeft+1,w,c
  2588  0013E8  E103               	bnz	i2u155_40
  2589  0013EA  0427               	decf	_controlToLeft,w,c
  2590  0013EC  A0D8               	btfss	status,0,c
  2591  0013EE  D009               	goto	i2l1793
  2592  0013F0                     i2u155_40:
  2593                           
  2594                           ;interrupts.c: 161: {
  2595                           ;interrupts.c: 162: motorCounterUpdate(RIGHT,0);
  2596  0013F0  0E00               	movlw	0
  2597  0013F2  6E47               	movwf	motorCounterUpdate@reverse,c
  2598  0013F4  0E01               	movlw	1
  2599  0013F6  EC3A  F00C         	call	_motorCounterUpdate
  2600                           
  2601                           ;interrupts.c: 163: controlToLeft--;
  2602  0013FA  0627               	decf	_controlToLeft,f,c
  2603  0013FC  A0D8               	btfss	status,0,c
  2604  0013FE  0628               	decf	_controlToLeft+1,f,c
  2605                           
  2606                           ;interrupts.c: 164: } else if(controlToRight > 0){
  2607  001400  D06E               	goto	i2l87
  2608  001402                     i2l1793:
  2609  001402  BE2A               	btfsc	_controlToRight+1,7,c
  2610  001404  D00E               	goto	i2l1799
  2611  001406  502A               	movf	_controlToRight+1,w,c
  2612  001408  E103               	bnz	i2u156_40
  2613  00140A  0429               	decf	_controlToRight,w,c
  2614  00140C  A0D8               	btfss	status,0,c
  2615  00140E  D009               	goto	i2l1799
  2616  001410                     i2u156_40:
  2617                           
  2618                           ;interrupts.c: 165: motorCounterUpdate(LEFT,0);
  2619  001410  0E00               	movlw	0
  2620  001412  6E47               	movwf	motorCounterUpdate@reverse,c
  2621  001414  0E00               	movlw	0
  2622  001416  EC3A  F00C         	call	_motorCounterUpdate
  2623                           
  2624                           ;interrupts.c: 166: controlToRight--;
  2625  00141A  0629               	decf	_controlToRight,f,c
  2626  00141C  A0D8               	btfss	status,0,c
  2627  00141E  062A               	decf	_controlToRight+1,f,c
  2628                           
  2629                           ;interrupts.c: 167: } else {
  2630  001420  D05E               	goto	i2l87
  2631  001422                     i2l1799:
  2632                           
  2633                           ;interrupts.c: 168: forward();
  2634  001422  EC8E  F00E         	call	_forward	;wreg free
  2635                           
  2636                           ;interrupts.c: 169: }
  2637                           ;interrupts.c: 171: } else if(ForwardCounter == 0)
  2638  001426  D05B               	goto	i2l87
  2639  001428                     i2l1801:
  2640  001428  5013               	movf	_ForwardCounter,w,c
  2641  00142A  1014               	iorwf	_ForwardCounter+1,w,c
  2642  00142C  A4D8               	btfss	status,2,c
  2643  00142E  D057               	goto	i2l87
  2644                           
  2645                           ;interrupts.c: 172: {
  2646                           ;interrupts.c: 173: if(algorithm == LEFTWALL)
  2647  001430  5032               	movf	_algorithm,w,c
  2648  001432  A4D8               	btfss	status,2,c
  2649  001434  D054               	goto	i2l87
  2650                           
  2651                           ;interrupts.c: 174: {
  2652                           ;interrupts.c: 175: if(cState == empty) initialRotation(LEFT,0);
  2653  001436  505B               	movf	_cState,w,c
  2654  001438  A4D8               	btfss	status,2,c
  2655  00143A  D008               	goto	i2l1809
  2656  00143C  0E00               	movlw	0
  2657  00143E  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2658  001440  0E00               	movlw	0
  2659  001442  6E4A               	movwf	initialRotation@isDeadEnd,c
  2660  001444  0E00               	movlw	0
  2661  001446  EC5D  F00E         	call	_initialRotation
  2662  00144A  D049               	goto	i2l87
  2663  00144C                     i2l1809:
  2664                           
  2665                           ;interrupts.c: 176: else if(cState == twoside) singleForward();
  2666  00144C  0E02               	movlw	2
  2667  00144E  185B               	xorwf	_cState,w,c
  2668  001450  A4D8               	btfss	status,2,c
  2669  001452  D003               	goto	i2l1813
  2670  001454  ECA3  F00E         	call	_singleForward	;wreg free
  2671  001458  D042               	goto	i2l87
  2672  00145A                     i2l1813:
  2673                           
  2674                           ;interrupts.c: 177: else if(cState == threeside) initialRotation(LEFT,1);
  2675  00145A  0E03               	movlw	3
  2676  00145C  185B               	xorwf	_cState,w,c
  2677  00145E  A4D8               	btfss	status,2,c
  2678  001460  D008               	goto	i2l1817
  2679  001462  0E00               	movlw	0
  2680  001464  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2681  001466  0E01               	movlw	1
  2682  001468  6E4A               	movwf	initialRotation@isDeadEnd,c
  2683  00146A  0E00               	movlw	0
  2684  00146C  EC5D  F00E         	call	_initialRotation
  2685  001470  D036               	goto	i2l87
  2686  001472                     i2l1817:
  2687                           
  2688                           ;interrupts.c: 178: else if(cState == leftside) singleForward();
  2689  001472  0E04               	movlw	4
  2690  001474  185B               	xorwf	_cState,w,c
  2691  001476  A4D8               	btfss	status,2,c
  2692  001478  D003               	goto	i2l1821
  2693  00147A  ECA3  F00E         	call	_singleForward	;wreg free
  2694  00147E  D02F               	goto	i2l87
  2695  001480                     i2l1821:
  2696                           
  2697                           ;interrupts.c: 179: else if(cState == rightside) initialRotation(LEFT,0);
  2698  001480  0E05               	movlw	5
  2699  001482  185B               	xorwf	_cState,w,c
  2700  001484  A4D8               	btfss	status,2,c
  2701  001486  D008               	goto	i2l1825
  2702  001488  0E00               	movlw	0
  2703  00148A  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2704  00148C  0E00               	movlw	0
  2705  00148E  6E4A               	movwf	initialRotation@isDeadEnd,c
  2706  001490  0E00               	movlw	0
  2707  001492  EC5D  F00E         	call	_initialRotation
  2708  001496  D023               	goto	i2l87
  2709  001498                     i2l1825:
  2710                           
  2711                           ;interrupts.c: 180: else if(cState == frontleft) initialRotation(RIGHT,0);
  2712  001498  0E06               	movlw	6
  2713  00149A  185B               	xorwf	_cState,w,c
  2714  00149C  A4D8               	btfss	status,2,c
  2715  00149E  D008               	goto	i2l1829
  2716  0014A0  0E00               	movlw	0
  2717  0014A2  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2718  0014A4  0E00               	movlw	0
  2719  0014A6  6E4A               	movwf	initialRotation@isDeadEnd,c
  2720  0014A8  0E01               	movlw	1
  2721  0014AA  EC5D  F00E         	call	_initialRotation
  2722  0014AE  D017               	goto	i2l87
  2723  0014B0                     i2l1829:
  2724                           
  2725                           ;interrupts.c: 181: else if(cState == frontright) initialRotation(LEFT,0);
  2726  0014B0  0E07               	movlw	7
  2727  0014B2  185B               	xorwf	_cState,w,c
  2728  0014B4  A4D8               	btfss	status,2,c
  2729  0014B6  D008               	goto	i2l1833
  2730  0014B8  0E00               	movlw	0
  2731  0014BA  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2732  0014BC  0E00               	movlw	0
  2733  0014BE  6E4A               	movwf	initialRotation@isDeadEnd,c
  2734  0014C0  0E00               	movlw	0
  2735  0014C2  EC5D  F00E         	call	_initialRotation
  2736  0014C6  D00B               	goto	i2l87
  2737  0014C8                     i2l1833:
  2738                           
  2739                           ;interrupts.c: 182: else if(cState == front) initialRotation(LEFT,0);
  2740  0014C8  045B               	decf	_cState,w,c
  2741  0014CA  A4D8               	btfss	status,2,c
  2742  0014CC  D008               	goto	i2l87
  2743  0014CE  0E00               	movlw	0
  2744  0014D0  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2745  0014D2  0E00               	movlw	0
  2746  0014D4  6E4A               	movwf	initialRotation@isDeadEnd,c
  2747  0014D6  0E00               	movlw	0
  2748  0014D8  EC5D  F00E         	call	_initialRotation
  2749  0014DC  D000               	goto	i2l87
  2750  0014DE                     i2l87:
  2751                           
  2752                           ;interrupts.c: 183: }
  2753                           ;interrupts.c: 184: }
  2754                           ;interrupts.c: 186: moveMouse(merge(LMotorCounter,RMotorCounter));
  2755  0014DE  C031  F047         	movff	_RMotorCounter,merge@right
  2756  0014E2  5030               	movf	_LMotorCounter,w,c
  2757  0014E4  ECC2  F00E         	call	_merge
  2758  0014E8  ECCF  F00E         	call	_moveMouse
  2759                           
  2760                           ;interrupts.c: 187: MotorDelayCounter = 0;
  2761  0014EC  0E00               	movlw	0
  2762  0014EE  6E18               	movwf	_MotorDelayCounter+1,c
  2763  0014F0  0E00               	movlw	0
  2764  0014F2  6E17               	movwf	_MotorDelayCounter,c
  2765  0014F4  D000               	goto	i2l1839
  2766  0014F6                     i2l1839:
  2767                           
  2768                           ;interrupts.c: 188: }
  2769                           ;interrupts.c: 190: MotorDelayCounter++;
  2770  0014F6  4A17               	infsnz	_MotorDelayCounter,f,c
  2771  0014F8  2A18               	incf	_MotorDelayCounter+1,f,c
  2772                           
  2773                           ;interrupts.c: 191: INTCONbits.TMR0IF = 0;
  2774  0014FA  94F2               	bcf	intcon,2,c	;volatile
  2775  0014FC  D000               	goto	i2l116
  2776  0014FE                     i2l116:
  2777  0014FE  C05A  FFF5         	movff	??_high_isr+13,tablat
  2778  001502  C059  FFF8         	movff	??_high_isr+12,tblptru
  2779  001506  C058  FFF7         	movff	??_high_isr+11,tblptrh
  2780  00150A  C057  FFF6         	movff	??_high_isr+10,tblptrl
  2781  00150E  C056  FFF4         	movff	??_high_isr+9,prodh
  2782  001512  C055  FFF3         	movff	??_high_isr+8,prodl
  2783  001516  C054  FFDA         	movff	??_high_isr+7,fsr2h
  2784  00151A  C053  FFD9         	movff	??_high_isr+6,fsr2l
  2785  00151E  C052  FFE2         	movff	??_high_isr+5,fsr1h
  2786  001522  C051  FFE1         	movff	??_high_isr+4,fsr1l
  2787  001526  C050  FFEA         	movff	??_high_isr+3,fsr0h
  2788  00152A  C04F  FFE9         	movff	??_high_isr+2,fsr0l
  2789  00152E  C04E  FFFB         	movff	??_high_isr+1,pclatu
  2790  001532  C04D  FFFA         	movff	??_high_isr,pclath
  2791  001536  0011               	retfie		f
  2792  001538                     __end_of_high_isr:
  2793                           	opt stack 0
  2794                           pclatu	equ	0xFFB
  2795                           pclath	equ	0xFFA
  2796                           tblptru	equ	0xFF8
  2797                           tblptrh	equ	0xFF7
  2798                           tblptrl	equ	0xFF6
  2799                           tablat	equ	0xFF5
  2800                           prodh	equ	0xFF4
  2801                           prodl	equ	0xFF3
  2802                           intcon	equ	0xFF2
  2803                           intcon2	equ	0xFF1
  2804                           postinc0	equ	0xFEE
  2805                           fsr0h	equ	0xFEA
  2806                           fsr0l	equ	0xFE9
  2807                           wreg	equ	0xFE8
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           bsr	equ	0xFE0
  2811                           postinc2	equ	0xFDE
  2812                           postdec2	equ	0xFDD
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _stateUpdate *****************
  2818 ;; Defined at:
  2819 ;;		line 411 in file "interrupts.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;		None               void
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_high_isr
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text14
  2847  001538                     __ptext14:
  2848                           	opt stack 0
  2849  001538                     _stateUpdate:
  2850                           	opt stack 25
  2851                           
  2852                           ;interrupts.c: 413: if(sensorValue[0] < 120 && sensorValue[1] < 120 &&
  2853                           ;interrupts.c: 414: (sensorValue[2] < 300 && sensorValue[3] < 300))
  2854                           
  2855                           ;incstack = 0
  2856  001538  BE0A               	btfsc	_sensorValue+1,7,c
  2857  00153A  D006               	goto	i2l1137
  2858  00153C  500A               	movf	_sensorValue+1,w,c
  2859  00153E  E11E               	bnz	i2l1145
  2860  001540  0E78               	movlw	120
  2861  001542  5C09               	subwf	_sensorValue,w,c
  2862  001544  B0D8               	btfsc	status,0,c
  2863  001546  D01A               	goto	i2l1145
  2864  001548                     i2l1137:
  2865  001548  BE0C               	btfsc	_sensorValue+3,7,c
  2866  00154A  D006               	goto	i2l1139
  2867  00154C  500C               	movf	_sensorValue+3,w,c
  2868  00154E  E116               	bnz	i2l1145
  2869  001550  0E78               	movlw	120
  2870  001552  5C0B               	subwf	_sensorValue+2,w,c
  2871  001554  B0D8               	btfsc	status,0,c
  2872  001556  D012               	goto	i2l1145
  2873  001558                     i2l1139:
  2874  001558  BE0E               	btfsc	_sensorValue+5,7,c
  2875  00155A  D006               	goto	i2l1141
  2876  00155C  0E2C               	movlw	44
  2877  00155E  5C0D               	subwf	_sensorValue+4,w,c
  2878  001560  0E01               	movlw	1
  2879  001562  580E               	subwfb	_sensorValue+5,w,c
  2880  001564  B0D8               	btfsc	status,0,c
  2881  001566  D00A               	goto	i2l1145
  2882  001568                     i2l1141:
  2883  001568  BE10               	btfsc	_sensorValue+7,7,c
  2884  00156A  D006               	goto	i2l1143
  2885  00156C  0E2C               	movlw	44
  2886  00156E  5C0F               	subwf	_sensorValue+6,w,c
  2887  001570  0E01               	movlw	1
  2888  001572  5810               	subwfb	_sensorValue+7,w,c
  2889  001574  B0D8               	btfsc	status,0,c
  2890  001576  D002               	goto	i2l1145
  2891  001578                     i2l1143:
  2892                           
  2893                           ;interrupts.c: 415: cState = empty;
  2894  001578  0E00               	movlw	0
  2895  00157A  D0E9               	goto	L14
  2896  00157C                     i2l1145:
  2897                           
  2898                           ;interrupts.c: 416: else if(sensorValue[0] > 120 && sensorValue[1] > 120 &&
  2899                           ;interrupts.c: 417: (sensorValue[2] < 300 && sensorValue[3] < 300))
  2900  00157C  BE0A               	btfsc	_sensorValue+1,7,c
  2901  00157E  D020               	goto	i2l1155
  2902  001580  500A               	movf	_sensorValue+1,w,c
  2903  001582  E104               	bnz	i2u32_40
  2904  001584  0E79               	movlw	121
  2905  001586  5C09               	subwf	_sensorValue,w,c
  2906  001588  A0D8               	btfss	status,0,c
  2907  00158A  D01A               	goto	i2l1155
  2908  00158C                     i2u32_40:
  2909  00158C  BE0C               	btfsc	_sensorValue+3,7,c
  2910  00158E  D018               	goto	i2l1155
  2911  001590  500C               	movf	_sensorValue+3,w,c
  2912  001592  E104               	bnz	i2u33_40
  2913  001594  0E79               	movlw	121
  2914  001596  5C0B               	subwf	_sensorValue+2,w,c
  2915  001598  A0D8               	btfss	status,0,c
  2916  00159A  D012               	goto	i2l1155
  2917  00159C                     i2u33_40:
  2918  00159C  BE0E               	btfsc	_sensorValue+5,7,c
  2919  00159E  D006               	goto	i2l1151
  2920  0015A0  0E2C               	movlw	44
  2921  0015A2  5C0D               	subwf	_sensorValue+4,w,c
  2922  0015A4  0E01               	movlw	1
  2923  0015A6  580E               	subwfb	_sensorValue+5,w,c
  2924  0015A8  B0D8               	btfsc	status,0,c
  2925  0015AA  D00A               	goto	i2l1155
  2926  0015AC                     i2l1151:
  2927  0015AC  BE10               	btfsc	_sensorValue+7,7,c
  2928  0015AE  D006               	goto	i2l1153
  2929  0015B0  0E2C               	movlw	44
  2930  0015B2  5C0F               	subwf	_sensorValue+6,w,c
  2931  0015B4  0E01               	movlw	1
  2932  0015B6  5810               	subwfb	_sensorValue+7,w,c
  2933  0015B8  B0D8               	btfsc	status,0,c
  2934  0015BA  D002               	goto	i2l1155
  2935  0015BC                     i2l1153:
  2936                           
  2937                           ;interrupts.c: 418: cState = twoside;
  2938  0015BC  0E02               	movlw	2
  2939  0015BE  D0C7               	goto	L14
  2940  0015C0                     i2l1155:
  2941                           
  2942                           ;interrupts.c: 419: else if(sensorValue[0] > 120 && sensorValue[1] > 120 &&
  2943                           ;interrupts.c: 420: (sensorValue[2] > 300 && sensorValue[3] > 300))
  2944  0015C0  BE0A               	btfsc	_sensorValue+1,7,c
  2945  0015C2  D01F               	goto	i2l1165
  2946  0015C4  500A               	movf	_sensorValue+1,w,c
  2947  0015C6  E104               	bnz	i2u36_40
  2948  0015C8  0E79               	movlw	121
  2949  0015CA  5C09               	subwf	_sensorValue,w,c
  2950  0015CC  A0D8               	btfss	status,0,c
  2951  0015CE  D019               	goto	i2l1165
  2952  0015D0                     i2u36_40:
  2953  0015D0  BE0C               	btfsc	_sensorValue+3,7,c
  2954  0015D2  D017               	goto	i2l1165
  2955  0015D4  500C               	movf	_sensorValue+3,w,c
  2956  0015D6  E104               	bnz	i2u37_40
  2957  0015D8  0E79               	movlw	121
  2958  0015DA  5C0B               	subwf	_sensorValue+2,w,c
  2959  0015DC  A0D8               	btfss	status,0,c
  2960  0015DE  D011               	goto	i2l1165
  2961  0015E0                     i2u37_40:
  2962  0015E0  BE0E               	btfsc	_sensorValue+5,7,c
  2963  0015E2  D00F               	goto	i2l1165
  2964  0015E4  0E2D               	movlw	45
  2965  0015E6  5C0D               	subwf	_sensorValue+4,w,c
  2966  0015E8  0E01               	movlw	1
  2967  0015EA  580E               	subwfb	_sensorValue+5,w,c
  2968  0015EC  B0D8               	btfsc	status,0,c
  2969  0015EE  BE10               	btfsc	_sensorValue+7,7,c
  2970  0015F0  D008               	goto	i2l1165
  2971  0015F2  0E2D               	movlw	45
  2972  0015F4  5C0F               	subwf	_sensorValue+6,w,c
  2973  0015F6  0E01               	movlw	1
  2974  0015F8  5810               	subwfb	_sensorValue+7,w,c
  2975  0015FA  A0D8               	btfss	status,0,c
  2976  0015FC  D002               	goto	i2l1165
  2977                           
  2978                           ;interrupts.c: 421: cState = threeside;
  2979  0015FE  0E03               	movlw	3
  2980  001600  D0A6               	goto	L14
  2981  001602                     i2l1165:
  2982                           
  2983                           ;interrupts.c: 422: else if(sensorValue[0] > 120 && sensorValue[1] < 120 &&
  2984                           ;interrupts.c: 423: (sensorValue[2] < 300 && sensorValue[3] < 300))
  2985  001602  BE0A               	btfsc	_sensorValue+1,7,c
  2986  001604  D020               	goto	i2l1175
  2987  001606  500A               	movf	_sensorValue+1,w,c
  2988  001608  E104               	bnz	i2u40_40
  2989  00160A  0E79               	movlw	121
  2990  00160C  5C09               	subwf	_sensorValue,w,c
  2991  00160E  A0D8               	btfss	status,0,c
  2992  001610  D01A               	goto	i2l1175
  2993  001612                     i2u40_40:
  2994  001612  BE0C               	btfsc	_sensorValue+3,7,c
  2995  001614  D006               	goto	i2l1169
  2996  001616  500C               	movf	_sensorValue+3,w,c
  2997  001618  E116               	bnz	i2l1175
  2998  00161A  0E78               	movlw	120
  2999  00161C  5C0B               	subwf	_sensorValue+2,w,c
  3000  00161E  B0D8               	btfsc	status,0,c
  3001  001620  D012               	goto	i2l1175
  3002  001622                     i2l1169:
  3003  001622  BE0E               	btfsc	_sensorValue+5,7,c
  3004  001624  D006               	goto	i2l1171
  3005  001626  0E2C               	movlw	44
  3006  001628  5C0D               	subwf	_sensorValue+4,w,c
  3007  00162A  0E01               	movlw	1
  3008  00162C  580E               	subwfb	_sensorValue+5,w,c
  3009  00162E  B0D8               	btfsc	status,0,c
  3010  001630  D00A               	goto	i2l1175
  3011  001632                     i2l1171:
  3012  001632  BE10               	btfsc	_sensorValue+7,7,c
  3013  001634  D006               	goto	i2l1173
  3014  001636  0E2C               	movlw	44
  3015  001638  5C0F               	subwf	_sensorValue+6,w,c
  3016  00163A  0E01               	movlw	1
  3017  00163C  5810               	subwfb	_sensorValue+7,w,c
  3018  00163E  B0D8               	btfsc	status,0,c
  3019  001640  D002               	goto	i2l1175
  3020  001642                     i2l1173:
  3021                           
  3022                           ;interrupts.c: 424: cState = leftside;
  3023  001642  0E04               	movlw	4
  3024  001644  D084               	goto	L14
  3025  001646                     i2l1175:
  3026                           
  3027                           ;interrupts.c: 425: else if(sensorValue[0] < 120 && sensorValue[1] > 120 &&
  3028                           ;interrupts.c: 426: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3029  001646  BE0A               	btfsc	_sensorValue+1,7,c
  3030  001648  D006               	goto	i2l1177
  3031  00164A  500A               	movf	_sensorValue+1,w,c
  3032  00164C  E11E               	bnz	i2l1185
  3033  00164E  0E78               	movlw	120
  3034  001650  5C09               	subwf	_sensorValue,w,c
  3035  001652  B0D8               	btfsc	status,0,c
  3036  001654  D01A               	goto	i2l1185
  3037  001656                     i2l1177:
  3038  001656  BE0C               	btfsc	_sensorValue+3,7,c
  3039  001658  D018               	goto	i2l1185
  3040  00165A  500C               	movf	_sensorValue+3,w,c
  3041  00165C  E104               	bnz	i2u45_40
  3042  00165E  0E79               	movlw	121
  3043  001660  5C0B               	subwf	_sensorValue+2,w,c
  3044  001662  A0D8               	btfss	status,0,c
  3045  001664  D012               	goto	i2l1185
  3046  001666                     i2u45_40:
  3047  001666  BE0E               	btfsc	_sensorValue+5,7,c
  3048  001668  D006               	goto	i2l1181
  3049  00166A  0E2C               	movlw	44
  3050  00166C  5C0D               	subwf	_sensorValue+4,w,c
  3051  00166E  0E01               	movlw	1
  3052  001670  580E               	subwfb	_sensorValue+5,w,c
  3053  001672  B0D8               	btfsc	status,0,c
  3054  001674  D00A               	goto	i2l1185
  3055  001676                     i2l1181:
  3056  001676  BE10               	btfsc	_sensorValue+7,7,c
  3057  001678  D006               	goto	i2l1183
  3058  00167A  0E2C               	movlw	44
  3059  00167C  5C0F               	subwf	_sensorValue+6,w,c
  3060  00167E  0E01               	movlw	1
  3061  001680  5810               	subwfb	_sensorValue+7,w,c
  3062  001682  B0D8               	btfsc	status,0,c
  3063  001684  D002               	goto	i2l1185
  3064  001686                     i2l1183:
  3065                           
  3066                           ;interrupts.c: 427: cState = rightside;
  3067  001686  0E05               	movlw	5
  3068  001688  D062               	goto	L14
  3069  00168A                     i2l1185:
  3070                           
  3071                           ;interrupts.c: 428: else if(sensorValue[0] > 120 && sensorValue[1] < 120 &&
  3072                           ;interrupts.c: 429: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3073  00168A  BE0A               	btfsc	_sensorValue+1,7,c
  3074  00168C  D01F               	goto	i2l1195
  3075  00168E  500A               	movf	_sensorValue+1,w,c
  3076  001690  E104               	bnz	i2u48_40
  3077  001692  0E79               	movlw	121
  3078  001694  5C09               	subwf	_sensorValue,w,c
  3079  001696  A0D8               	btfss	status,0,c
  3080  001698  D019               	goto	i2l1195
  3081  00169A                     i2u48_40:
  3082  00169A  BE0C               	btfsc	_sensorValue+3,7,c
  3083  00169C  D006               	goto	i2l1189
  3084  00169E  500C               	movf	_sensorValue+3,w,c
  3085  0016A0  E115               	bnz	i2l1195
  3086  0016A2  0E78               	movlw	120
  3087  0016A4  5C0B               	subwf	_sensorValue+2,w,c
  3088  0016A6  B0D8               	btfsc	status,0,c
  3089  0016A8  D011               	goto	i2l1195
  3090  0016AA                     i2l1189:
  3091  0016AA  BE0E               	btfsc	_sensorValue+5,7,c
  3092  0016AC  D00F               	goto	i2l1195
  3093  0016AE  0E2D               	movlw	45
  3094  0016B0  5C0D               	subwf	_sensorValue+4,w,c
  3095  0016B2  0E01               	movlw	1
  3096  0016B4  580E               	subwfb	_sensorValue+5,w,c
  3097  0016B6  B0D8               	btfsc	status,0,c
  3098  0016B8  BE10               	btfsc	_sensorValue+7,7,c
  3099  0016BA  D008               	goto	i2l1195
  3100  0016BC  0E2D               	movlw	45
  3101  0016BE  5C0F               	subwf	_sensorValue+6,w,c
  3102  0016C0  0E01               	movlw	1
  3103  0016C2  5810               	subwfb	_sensorValue+7,w,c
  3104  0016C4  A0D8               	btfss	status,0,c
  3105  0016C6  D002               	goto	i2l1195
  3106                           
  3107                           ;interrupts.c: 430: cState = frontleft;
  3108  0016C8  0E06               	movlw	6
  3109  0016CA  D041               	goto	L14
  3110  0016CC                     i2l1195:
  3111                           
  3112                           ;interrupts.c: 431: else if(sensorValue[0] < 120 && sensorValue[1] > 120 &&
  3113                           ;interrupts.c: 432: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3114  0016CC  BE0A               	btfsc	_sensorValue+1,7,c
  3115  0016CE  D006               	goto	i2l1197
  3116  0016D0  500A               	movf	_sensorValue+1,w,c
  3117  0016D2  E11D               	bnz	i2l1205
  3118  0016D4  0E78               	movlw	120
  3119  0016D6  5C09               	subwf	_sensorValue,w,c
  3120  0016D8  B0D8               	btfsc	status,0,c
  3121  0016DA  D019               	goto	i2l1205
  3122  0016DC                     i2l1197:
  3123  0016DC  BE0C               	btfsc	_sensorValue+3,7,c
  3124  0016DE  D017               	goto	i2l1205
  3125  0016E0  500C               	movf	_sensorValue+3,w,c
  3126  0016E2  E104               	bnz	i2u53_40
  3127  0016E4  0E79               	movlw	121
  3128  0016E6  5C0B               	subwf	_sensorValue+2,w,c
  3129  0016E8  A0D8               	btfss	status,0,c
  3130  0016EA  D011               	goto	i2l1205
  3131  0016EC                     i2u53_40:
  3132  0016EC  BE0E               	btfsc	_sensorValue+5,7,c
  3133  0016EE  D00F               	goto	i2l1205
  3134  0016F0  0E2D               	movlw	45
  3135  0016F2  5C0D               	subwf	_sensorValue+4,w,c
  3136  0016F4  0E01               	movlw	1
  3137  0016F6  580E               	subwfb	_sensorValue+5,w,c
  3138  0016F8  B0D8               	btfsc	status,0,c
  3139  0016FA  BE10               	btfsc	_sensorValue+7,7,c
  3140  0016FC  D008               	goto	i2l1205
  3141  0016FE  0E2D               	movlw	45
  3142  001700  5C0F               	subwf	_sensorValue+6,w,c
  3143  001702  0E01               	movlw	1
  3144  001704  5810               	subwfb	_sensorValue+7,w,c
  3145  001706  A0D8               	btfss	status,0,c
  3146  001708  D002               	goto	i2l1205
  3147                           
  3148                           ;interrupts.c: 433: cState = frontright;
  3149  00170A  0E07               	movlw	7
  3150  00170C  D020               	goto	L14
  3151  00170E                     i2l1205:
  3152                           
  3153                           ;interrupts.c: 434: else if(sensorValue[0] < 120 && sensorValue[1] < 120 &&
  3154                           ;interrupts.c: 435: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3155  00170E  BE0A               	btfsc	_sensorValue+1,7,c
  3156  001710  D006               	goto	i2l1207
  3157  001712  500A               	movf	_sensorValue+1,w,c
  3158  001714  E11E               	bnz	i2l227
  3159  001716  0E78               	movlw	120
  3160  001718  5C09               	subwf	_sensorValue,w,c
  3161  00171A  B0D8               	btfsc	status,0,c
  3162  00171C  D01A               	goto	i2l227
  3163  00171E                     i2l1207:
  3164  00171E  BE0C               	btfsc	_sensorValue+3,7,c
  3165  001720  D006               	goto	i2l1209
  3166  001722  500C               	movf	_sensorValue+3,w,c
  3167  001724  E116               	bnz	i2l227
  3168  001726  0E78               	movlw	120
  3169  001728  5C0B               	subwf	_sensorValue+2,w,c
  3170  00172A  B0D8               	btfsc	status,0,c
  3171  00172C  D012               	goto	i2l227
  3172  00172E                     i2l1209:
  3173  00172E  BE0E               	btfsc	_sensorValue+5,7,c
  3174  001730  D010               	goto	i2l227
  3175  001732  0E2D               	movlw	45
  3176  001734  5C0D               	subwf	_sensorValue+4,w,c
  3177  001736  0E01               	movlw	1
  3178  001738  580E               	subwfb	_sensorValue+5,w,c
  3179  00173A  B0D8               	btfsc	status,0,c
  3180  00173C  BE10               	btfsc	_sensorValue+7,7,c
  3181  00173E  D009               	goto	i2l227
  3182  001740  0E2D               	movlw	45
  3183  001742  5C0F               	subwf	_sensorValue+6,w,c
  3184  001744  0E01               	movlw	1
  3185  001746  5810               	subwfb	_sensorValue+7,w,c
  3186  001748  A0D8               	btfss	status,0,c
  3187  00174A  D003               	goto	i2l227
  3188                           
  3189                           ;interrupts.c: 436: cState = front;
  3190  00174C  0E01               	movlw	1
  3191  00174E                     L14:
  3192  00174E  6E5B               	movwf	_cState,c
  3193  001750  D000               	goto	i2l227
  3194  001752                     i2l227:
  3195  001752  0012               	return		;funcret
  3196  001754                     __end_of_stateUpdate:
  3197                           	opt stack 0
  3198                           pclatu	equ	0xFFB
  3199                           pclath	equ	0xFFA
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           intcon	equ	0xFF2
  3207                           intcon2	equ	0xFF1
  3208                           postinc0	equ	0xFEE
  3209                           fsr0h	equ	0xFEA
  3210                           fsr0l	equ	0xFE9
  3211                           wreg	equ	0xFE8
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           bsr	equ	0xFE0
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _singleForward *****************
  3222 ;; Defined at:
  3223 ;;		line 381 in file "interrupts.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;		None               void
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;Total ram usage:        0 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    2
  3244 ;; This function calls:
  3245 ;;		_forward
  3246 ;; This function is called by:
  3247 ;;		_high_isr
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text15
  3252  001D46                     __ptext15:
  3253                           	opt stack 0
  3254  001D46                     _singleForward:
  3255                           	opt stack 23
  3256                           
  3257                           ;interrupts.c: 383: if(ForwardCounter == 0 || ForwardCounter == 1)
  3258                           
  3259                           ;incstack = 0
  3260  001D46  5013               	movf	_ForwardCounter,w,c
  3261  001D48  1014               	iorwf	_ForwardCounter+1,w,c
  3262  001D4A  B4D8               	btfsc	status,2,c
  3263  001D4C  D004               	goto	i2l1669
  3264  001D4E  0413               	decf	_ForwardCounter,w,c
  3265  001D50  1014               	iorwf	_ForwardCounter+1,w,c
  3266  001D52  A4D8               	btfss	status,2,c
  3267  001D54  D007               	goto	i2l204
  3268  001D56                     i2l1669:
  3269                           
  3270                           ;interrupts.c: 384: {
  3271                           ;interrupts.c: 385: ForwardCounter = 1;
  3272  001D56  0E00               	movlw	0
  3273  001D58  6E14               	movwf	_ForwardCounter+1,c
  3274  001D5A  0E01               	movlw	1
  3275  001D5C  6E13               	movwf	_ForwardCounter,c
  3276                           
  3277                           ;interrupts.c: 386: forward();
  3278  001D5E  EC8E  F00E         	call	_forward	;wreg free
  3279  001D62  D000               	goto	i2l204
  3280  001D64                     i2l204:
  3281  001D64  0012               	return		;funcret
  3282  001D66                     __end_of_singleForward:
  3283                           	opt stack 0
  3284                           pclatu	equ	0xFFB
  3285                           pclath	equ	0xFFA
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           intcon2	equ	0xFF1
  3294                           postinc0	equ	0xFEE
  3295                           fsr0h	equ	0xFEA
  3296                           fsr0l	equ	0xFE9
  3297                           wreg	equ	0xFE8
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           bsr	equ	0xFE0
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _forward *****************
  3308 ;; Defined at:
  3309 ;;		line 371 in file "interrupts.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;Total ram usage:        0 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    1
  3330 ;; This function calls:
  3331 ;;		_motorCounterUpdate
  3332 ;; This function is called by:
  3333 ;;		_high_isr
  3334 ;;		_singleForward
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text16
  3339  001D1C                     __ptext16:
  3340                           	opt stack 0
  3341  001D1C                     _forward:
  3342                           	opt stack 23
  3343                           
  3344                           ;interrupts.c: 373: motorCounterUpdate(RIGHT,0);
  3345                           
  3346                           ;incstack = 0
  3347  001D1C  0E00               	movlw	0
  3348  001D1E  6E47               	movwf	motorCounterUpdate@reverse,c
  3349  001D20  0E01               	movlw	1
  3350  001D22  EC3A  F00C         	call	_motorCounterUpdate
  3351                           
  3352                           ;interrupts.c: 374: motorCounterUpdate(LEFT,0);
  3353  001D26  0E00               	movlw	0
  3354  001D28  6E47               	movwf	motorCounterUpdate@reverse,c
  3355  001D2A  0E00               	movlw	0
  3356  001D2C  EC3A  F00C         	call	_motorCounterUpdate
  3357                           
  3358                           ;interrupts.c: 375: ForwardCounter--;
  3359  001D30  0613               	decf	_ForwardCounter,f,c
  3360  001D32  A0D8               	btfss	status,0,c
  3361  001D34  0614               	decf	_ForwardCounter+1,f,c
  3362                           
  3363                           ;interrupts.c: 376: if(ForwardCounter == 0)
  3364  001D36  5013               	movf	_ForwardCounter,w,c
  3365  001D38  1014               	iorwf	_ForwardCounter+1,w,c
  3366  001D3A  A4D8               	btfss	status,2,c
  3367  001D3C  D003               	goto	i2l198
  3368                           
  3369                           ;interrupts.c: 377: justTurned = 0;
  3370  001D3E  0E00               	movlw	0
  3371  001D40  6E34               	movwf	_justTurned,c
  3372  001D42  D000               	goto	i2l198
  3373  001D44                     i2l198:
  3374  001D44  0012               	return		;funcret
  3375  001D46                     __end_of_forward:
  3376                           	opt stack 0
  3377                           pclatu	equ	0xFFB
  3378                           pclath	equ	0xFFA
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           intcon2	equ	0xFF1
  3387                           postinc0	equ	0xFEE
  3388                           fsr0h	equ	0xFEA
  3389                           fsr0l	equ	0xFE9
  3390                           wreg	equ	0xFE8
  3391                           fsr1h	equ	0xFE2
  3392                           fsr1l	equ	0xFE1
  3393                           bsr	equ	0xFE0
  3394                           postinc2	equ	0xFDE
  3395                           postdec2	equ	0xFDD
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function _moveMouse *****************
  3401 ;; Defined at:
  3402 ;;		line 288 in file "interrupts.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  action          1    wreg     unsigned char 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  action          1   17[COMRAM] unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;		None               void
  3409 ;; Registers used:
  3410 ;;		wreg
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;Total ram usage:        1 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_high_isr
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text17
  3430  001D9E                     __ptext17:
  3431                           	opt stack 0
  3432  001D9E                     _moveMouse:
  3433                           	opt stack 25
  3434                           
  3435                           ;incstack = 0
  3436                           ;moveMouse@action stored from wreg
  3437  001D9E  6E47               	movwf	moveMouse@action,c
  3438                           
  3439                           ;interrupts.c: 290: LATC = action;
  3440  001DA0  C047  FF8B         	movff	moveMouse@action,3979	;volatile
  3441  001DA4  0012               	return		;funcret
  3442  001DA6                     __end_of_moveMouse:
  3443                           	opt stack 0
  3444                           pclatu	equ	0xFFB
  3445                           pclath	equ	0xFFA
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           intcon2	equ	0xFF1
  3454                           postinc0	equ	0xFEE
  3455                           fsr0h	equ	0xFEA
  3456                           fsr0l	equ	0xFE9
  3457                           wreg	equ	0xFE8
  3458                           fsr1h	equ	0xFE2
  3459                           fsr1l	equ	0xFE1
  3460                           bsr	equ	0xFE0
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _merge *****************
  3468 ;; Defined at:
  3469 ;;		line 281 in file "interrupts.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  left            1    wreg     unsigned char 
  3472 ;;  right           1   17[COMRAM] unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  left            1   18[COMRAM] unsigned char 
  3475 ;;  merged          1   19[COMRAM] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      unsigned char 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:        3 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_high_isr
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text18
  3499  001D84                     __ptext18:
  3500                           	opt stack 0
  3501  001D84                     _merge:
  3502                           	opt stack 25
  3503                           
  3504                           ;incstack = 0
  3505                           ;merge@left stored from wreg
  3506  001D84  6E48               	movwf	merge@left,c
  3507                           
  3508                           ;interrupts.c: 283: unsigned char merged;
  3509                           ;interrupts.c: 284: merged = left + (right << 4);
  3510  001D86  3847               	swapf	merge@right,w,c
  3511  001D88  0BF0               	andlw	240
  3512  001D8A  2448               	addwf	merge@left,w,c
  3513  001D8C  6E49               	movwf	merge@merged,c
  3514                           
  3515                           ;interrupts.c: 285: return merged;
  3516  001D8E  5049               	movf	merge@merged,w,c
  3517  001D90  D000               	goto	i2l160
  3518  001D92                     i2l160:
  3519  001D92  0012               	return		;funcret
  3520  001D94                     __end_of_merge:
  3521                           	opt stack 0
  3522                           pclatu	equ	0xFFB
  3523                           pclath	equ	0xFFA
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           intcon	equ	0xFF2
  3531                           intcon2	equ	0xFF1
  3532                           postinc0	equ	0xFEE
  3533                           fsr0h	equ	0xFEA
  3534                           fsr0l	equ	0xFE9
  3535                           wreg	equ	0xFE8
  3536                           fsr1h	equ	0xFE2
  3537                           fsr1l	equ	0xFE1
  3538                           bsr	equ	0xFE0
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _initialRotation *****************
  3546 ;; Defined at:
  3547 ;;		line 391 in file "interrupts.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  side            1    wreg     enum E4145
  3550 ;;  isDeadEnd       2   20[COMRAM] int 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  side            1   22[COMRAM] enum E4145
  3553 ;; Return value:  Size  Location     Type
  3554 ;;		None               void
  3555 ;; Registers used:
  3556 ;;		wreg, status,2, status,0, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;Total ram usage:        3 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    2
  3569 ;; This function calls:
  3570 ;;		_rotate
  3571 ;; This function is called by:
  3572 ;;		_high_isr
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text19
  3577  001CBA                     __ptext19:
  3578                           	opt stack 0
  3579  001CBA                     _initialRotation:
  3580                           	opt stack 23
  3581                           
  3582                           ;incstack = 0
  3583                           ;initialRotation@side stored from wreg
  3584  001CBA  6E4C               	movwf	initialRotation@side,c
  3585                           
  3586                           ;interrupts.c: 393: if(isDeadEnd == 1)
  3587  001CBC  044A               	decf	initialRotation@isDeadEnd,w,c
  3588  001CBE  104B               	iorwf	initialRotation@isDeadEnd+1,w,c
  3589  001CC0  A4D8               	btfss	status,2,c
  3590  001CC2  D006               	goto	i2l1659
  3591                           
  3592                           ;interrupts.c: 394: {
  3593                           ;interrupts.c: 395: RotateCounter = 170*2;
  3594  001CC4  0E01               	movlw	1
  3595  001CC6  6E1E               	movwf	_RotateCounter+1,c
  3596  001CC8  0E54               	movlw	84
  3597  001CCA  6E1D               	movwf	_RotateCounter,c
  3598                           
  3599                           ;interrupts.c: 396: deadEnd = 1;
  3600  001CCC  0E01               	movlw	1
  3601  001CCE  D005               	goto	L15
  3602  001CD0                     i2l1659:
  3603                           
  3604                           ;interrupts.c: 398: else
  3605                           ;interrupts.c: 399: {
  3606                           ;interrupts.c: 400: RotateCounter = 170;
  3607  001CD0  0E00               	movlw	0
  3608  001CD2  6E1E               	movwf	_RotateCounter+1,c
  3609  001CD4  0EAA               	movlw	170
  3610  001CD6  6E1D               	movwf	_RotateCounter,c
  3611                           
  3612                           ;interrupts.c: 401: deadEnd = 0;
  3613  001CD8  0E00               	movlw	0
  3614  001CDA                     L15:
  3615  001CDA  6E33               	movwf	_deadEnd,c
  3616  001CDC  D000               	goto	i2l1661
  3617  001CDE                     i2l1661:
  3618                           
  3619                           ;interrupts.c: 402: }
  3620                           ;interrupts.c: 404: rotatingSide = side;
  3621  001CDE  C04C  F035         	movff	initialRotation@side,_rotatingSide
  3622                           
  3623                           ;interrupts.c: 405: justTurned = 1;
  3624  001CE2  0E01               	movlw	1
  3625  001CE4  6E34               	movwf	_justTurned,c
  3626                           
  3627                           ;interrupts.c: 406: rotate(rotatingSide);
  3628  001CE6  5035               	movf	_rotatingSide,w,c
  3629  001CE8  ECD5  F00D         	call	_rotate
  3630  001CEC  0012               	return		;funcret
  3631  001CEE                     __end_of_initialRotation:
  3632                           	opt stack 0
  3633                           pclatu	equ	0xFFB
  3634                           pclath	equ	0xFFA
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           intcon2	equ	0xFF1
  3643                           postinc0	equ	0xFEE
  3644                           fsr0h	equ	0xFEA
  3645                           fsr0l	equ	0xFE9
  3646                           wreg	equ	0xFE8
  3647                           fsr1h	equ	0xFE2
  3648                           fsr1l	equ	0xFE1
  3649                           bsr	equ	0xFE0
  3650                           postinc2	equ	0xFDE
  3651                           postdec2	equ	0xFDD
  3652                           fsr2h	equ	0xFDA
  3653                           fsr2l	equ	0xFD9
  3654                           status	equ	0xFD8
  3655                           
  3656 ;; *************** function _rotate *****************
  3657 ;; Defined at:
  3658 ;;		line 326 in file "interrupts.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  side            1    wreg     enum E4145
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  side            1   19[COMRAM] enum E4145
  3663 ;; Return value:  Size  Location     Type
  3664 ;;		None               void
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;Total ram usage:        1 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    1
  3679 ;; This function calls:
  3680 ;;		_motorCounterUpdate
  3681 ;; This function is called by:
  3682 ;;		_high_isr
  3683 ;;		_initialRotation
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text20
  3688  001BAA                     __ptext20:
  3689                           	opt stack 0
  3690  001BAA                     _rotate:
  3691                           	opt stack 24
  3692                           
  3693                           ;incstack = 0
  3694                           ;rotate@side stored from wreg
  3695  001BAA  6E49               	movwf	rotate@side,c
  3696                           
  3697                           ;interrupts.c: 328: if (side == LEFT){
  3698  001BAC  5049               	movf	rotate@side,w,c
  3699  001BAE  A4D8               	btfss	status,2,c
  3700  001BB0  D00B               	goto	i2l1613
  3701                           
  3702                           ;interrupts.c: 329: motorCounterUpdate(RIGHT,0);
  3703  001BB2  0E00               	movlw	0
  3704  001BB4  6E47               	movwf	motorCounterUpdate@reverse,c
  3705  001BB6  0E01               	movlw	1
  3706  001BB8  EC3A  F00C         	call	_motorCounterUpdate
  3707                           
  3708                           ;interrupts.c: 330: motorCounterUpdate(LEFT,1);
  3709  001BBC  0E01               	movlw	1
  3710  001BBE  6E47               	movwf	motorCounterUpdate@reverse,c
  3711  001BC0  0E00               	movlw	0
  3712  001BC2  EC3A  F00C         	call	_motorCounterUpdate
  3713                           
  3714                           ;interrupts.c: 331: } else {
  3715  001BC6  D00B               	goto	i2l1615
  3716  001BC8                     i2l1613:
  3717                           
  3718                           ;interrupts.c: 332: motorCounterUpdate(LEFT,0);
  3719  001BC8  0E00               	movlw	0
  3720  001BCA  6E47               	movwf	motorCounterUpdate@reverse,c
  3721  001BCC  0E00               	movlw	0
  3722  001BCE  EC3A  F00C         	call	_motorCounterUpdate
  3723                           
  3724                           ;interrupts.c: 333: motorCounterUpdate(RIGHT,1);
  3725  001BD2  0E01               	movlw	1
  3726  001BD4  6E47               	movwf	motorCounterUpdate@reverse,c
  3727  001BD6  0E01               	movlw	1
  3728  001BD8  EC3A  F00C         	call	_motorCounterUpdate
  3729  001BDC  D000               	goto	i2l1615
  3730  001BDE                     i2l1615:
  3731                           
  3732                           ;interrupts.c: 334: }
  3733                           ;interrupts.c: 335: RotateCounter--;
  3734  001BDE  061D               	decf	_RotateCounter,f,c
  3735  001BE0  A0D8               	btfss	status,0,c
  3736  001BE2  061E               	decf	_RotateCounter+1,f,c
  3737  001BE4  0012               	return		;funcret
  3738  001BE6                     __end_of_rotate:
  3739                           	opt stack 0
  3740                           pclatu	equ	0xFFB
  3741                           pclath	equ	0xFFA
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           intcon2	equ	0xFF1
  3750                           postinc0	equ	0xFEE
  3751                           fsr0h	equ	0xFEA
  3752                           fsr0l	equ	0xFE9
  3753                           wreg	equ	0xFE8
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           bsr	equ	0xFE0
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _motorCounterUpdate *****************
  3764 ;; Defined at:
  3765 ;;		line 236 in file "interrupts.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  side            1    wreg     enum E4145
  3768 ;;  reverse         1   17[COMRAM] unsigned char 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  side            1   18[COMRAM] enum E4145
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3780 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;Total ram usage:        2 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; This function calls:
  3787 ;;		Nothing
  3788 ;; This function is called by:
  3789 ;;		_high_isr
  3790 ;;		_rotate
  3791 ;;		_forward
  3792 ;;		_smoothTurn
  3793 ;;		_Reversing
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text21
  3798  001874                     __ptext21:
  3799                           	opt stack 0
  3800  001874                     _motorCounterUpdate:
  3801                           	opt stack 23
  3802                           
  3803                           ;incstack = 0
  3804                           ;motorCounterUpdate@side stored from wreg
  3805  001874  6E48               	movwf	motorCounterUpdate@side,c
  3806                           
  3807                           ;interrupts.c: 238: if(side == LEFT && reverse == 1)
  3808  001876  5048               	movf	motorCounterUpdate@side,w,c
  3809  001878  A4D8               	btfss	status,2,c
  3810  00187A  D01B               	goto	i2l1489
  3811  00187C  0447               	decf	motorCounterUpdate@reverse,w,c
  3812  00187E  B4D8               	btfsc	status,2,c
  3813  001880  D00B               	goto	i2l1487
  3814  001882  D017               	goto	i2l1489
  3815                           
  3816                           ;interrupts.c: 239: {
  3817                           ;interrupts.c: 240: switch(LMotorCounter)
  3818  001884  D009               	goto	i2l1487
  3819  001886                     i2l1477:
  3820  001886  0E02               	movlw	2
  3821  001888  D004               	goto	L18
  3822  00188A                     i2l1479:
  3823  00188A  0E04               	movlw	4
  3824  00188C  D002               	goto	L18
  3825                           
  3826                           ;interrupts.c: 244: case 0b00000100: LMotorCounter = 0b00001000; break;
  3827  00188E  D03E               	goto	i2l1521
  3828                           
  3829                           ;interrupts.c: 245: case 0b00001000: LMotorCounter = 0b00000001; break;
  3830  001890  D039               	goto	i2l1515
  3831  001892                     L18:
  3832  001892  6E30               	movwf	_LMotorCounter,c
  3833  001894  D068               	goto	i2l157
  3834                           
  3835                           ;interrupts.c: 246: default: LMotorCounter = 0b00000001;
  3836  001896  D036               	goto	i2l1515
  3837  001898                     i2l1487:
  3838  001898  5030               	movf	_LMotorCounter,w,c
  3839                           
  3840                           ; Switch size 1, requested type "space"
  3841                           ; Number of cases is 4, Range of values is 1 to 8
  3842                           ; switch strategies available:
  3843                           ; Name         Instructions Cycles
  3844                           ; simple_byte           13     7 (average)
  3845                           ;	Chosen strategy is simple_byte
  3846  00189A  0A01               	xorlw	1	; case 1
  3847  00189C  B4D8               	btfsc	status,2,c
  3848  00189E  D7F3               	goto	i2l1477
  3849  0018A0  0A03               	xorlw	3	; case 2
  3850  0018A2  B4D8               	btfsc	status,2,c
  3851  0018A4  D7F2               	goto	i2l1479
  3852  0018A6  0A06               	xorlw	6	; case 4
  3853  0018A8  B4D8               	btfsc	status,2,c
  3854  0018AA  D030               	goto	i2l1521
  3855  0018AC  0A0C               	xorlw	12	; case 8
  3856  0018AE  D02A               	goto	i2l1515
  3857                           
  3858                           ;interrupts.c: 248: } else if(side == RIGHT && reverse == 1)
  3859  0018B0  D05A               	goto	i2l157
  3860  0018B2                     i2l1489:
  3861  0018B2  0448               	decf	motorCounterUpdate@side,w,c
  3862  0018B4  A4D8               	btfss	status,2,c
  3863  0018B6  D01D               	goto	i2l1507
  3864  0018B8  0447               	decf	motorCounterUpdate@reverse,w,c
  3865  0018BA  B4D8               	btfsc	status,2,c
  3866  0018BC  D00B               	goto	i2l1505
  3867  0018BE  D019               	goto	i2l1507
  3868                           
  3869                           ;interrupts.c: 249: {
  3870                           ;interrupts.c: 250: switch(RMotorCounter)
  3871  0018C0  D009               	goto	i2l1505
  3872  0018C2                     i2l1495:
  3873  0018C2  0E08               	movlw	8
  3874  0018C4  D040               	goto	L26
  3875  0018C6                     i2l1497:
  3876  0018C6  0E01               	movlw	1
  3877  0018C8  D03E               	goto	L26
  3878  0018CA                     i2l1499:
  3879  0018CA  0E02               	movlw	2
  3880  0018CC  D03C               	goto	L26
  3881  0018CE                     i2l1501:
  3882  0018CE  0E04               	movlw	4
  3883  0018D0  D03A               	goto	L26
  3884                           
  3885                           ;interrupts.c: 256: default: RMotorCounter = 0b00001000;
  3886  0018D2  D7F7               	goto	i2l1495
  3887  0018D4                     i2l1505:
  3888  0018D4  5031               	movf	_RMotorCounter,w,c
  3889                           
  3890                           ; Switch size 1, requested type "space"
  3891                           ; Number of cases is 4, Range of values is 1 to 8
  3892                           ; switch strategies available:
  3893                           ; Name         Instructions Cycles
  3894                           ; simple_byte           13     7 (average)
  3895                           ;	Chosen strategy is simple_byte
  3896  0018D6  0A01               	xorlw	1	; case 1
  3897  0018D8  B4D8               	btfsc	status,2,c
  3898  0018DA  D7F3               	goto	i2l1495
  3899  0018DC  0A03               	xorlw	3	; case 2
  3900  0018DE  B4D8               	btfsc	status,2,c
  3901  0018E0  D7F2               	goto	i2l1497
  3902  0018E2  0A06               	xorlw	6	; case 4
  3903  0018E4  B4D8               	btfsc	status,2,c
  3904  0018E6  D7F1               	goto	i2l1499
  3905  0018E8  0A0C               	xorlw	12	; case 8
  3906  0018EA  B4D8               	btfsc	status,2,c
  3907  0018EC  D7F0               	goto	i2l1501
  3908  0018EE  D7E9               	goto	i2l1495
  3909                           
  3910                           ;interrupts.c: 258: } else if(side == LEFT && reverse == 0)
  3911  0018F0  D03A               	goto	i2l157
  3912  0018F2                     i2l1507:
  3913  0018F2  5048               	movf	motorCounterUpdate@side,w,c
  3914  0018F4  A4D8               	btfss	status,2,c
  3915  0018F6  D01B               	goto	i2l1525
  3916  0018F8  5047               	movf	motorCounterUpdate@reverse,w,c
  3917  0018FA  B4D8               	btfsc	status,2,c
  3918  0018FC  D009               	goto	i2l1523
  3919  0018FE  D017               	goto	i2l1525
  3920                           
  3921                           ;interrupts.c: 259: {
  3922                           ;interrupts.c: 260: switch(LMotorCounter)
  3923  001900  D007               	goto	i2l1523
  3924                           
  3925                           ;interrupts.c: 261: {
  3926                           ;interrupts.c: 262: case 0b00000001: LMotorCounter = 0b00001000; break;
  3927  001902  D004               	goto	i2l1521
  3928  001904                     i2l1515:
  3929  001904  0E01               	movlw	1
  3930  001906  D7C5               	goto	L18
  3931                           
  3932                           ;interrupts.c: 264: case 0b00000100: LMotorCounter = 0b00000010; break;
  3933  001908  D7BE               	goto	i2l1477
  3934                           
  3935                           ;interrupts.c: 265: case 0b00001000: LMotorCounter = 0b00000100; break;
  3936  00190A  D7BF               	goto	i2l1479
  3937  00190C                     i2l1521:
  3938  00190C  0E08               	movlw	8
  3939  00190E  D7C1               	goto	L18
  3940  001910                     i2l1523:
  3941  001910  5030               	movf	_LMotorCounter,w,c
  3942                           
  3943                           ; Switch size 1, requested type "space"
  3944                           ; Number of cases is 4, Range of values is 1 to 8
  3945                           ; switch strategies available:
  3946                           ; Name         Instructions Cycles
  3947                           ; simple_byte           13     7 (average)
  3948                           ;	Chosen strategy is simple_byte
  3949  001912  0A01               	xorlw	1	; case 1
  3950  001914  B4D8               	btfsc	status,2,c
  3951  001916  D7FA               	goto	i2l1521
  3952  001918  0A03               	xorlw	3	; case 2
  3953  00191A  B4D8               	btfsc	status,2,c
  3954  00191C  D7F3               	goto	i2l1515
  3955  00191E  0A06               	xorlw	6	; case 4
  3956  001920  B4D8               	btfsc	status,2,c
  3957  001922  D7B1               	goto	i2l1477
  3958  001924  0A0C               	xorlw	12	; case 8
  3959  001926  B4D8               	btfsc	status,2,c
  3960  001928  D7B0               	goto	i2l1479
  3961  00192A  D7F0               	goto	i2l1521
  3962                           
  3963                           ;interrupts.c: 268: } else if(side == RIGHT && reverse == 0)
  3964  00192C  D01C               	goto	i2l157
  3965  00192E                     i2l1525:
  3966  00192E  0448               	decf	motorCounterUpdate@side,w,c
  3967  001930  A4D8               	btfss	status,2,c
  3968  001932  D019               	goto	i2l157
  3969  001934  5047               	movf	motorCounterUpdate@reverse,w,c
  3970  001936  B4D8               	btfsc	status,2,c
  3971  001938  D009               	goto	i2l1541
  3972  00193A  D015               	goto	i2l157
  3973                           
  3974                           ;interrupts.c: 269: {
  3975                           ;interrupts.c: 270: switch(RMotorCounter)
  3976  00193C  D007               	goto	i2l1541
  3977                           
  3978                           ;interrupts.c: 271: {
  3979                           ;interrupts.c: 272: case 0b00000001: RMotorCounter = 0b00000010; break;
  3980  00193E  D7C5               	goto	i2l1499
  3981                           
  3982                           ;interrupts.c: 273: case 0b00000010: RMotorCounter = 0b00000100; break;
  3983  001940  D7C6               	goto	i2l1501
  3984                           
  3985                           ;interrupts.c: 274: case 0b00000100: RMotorCounter = 0b00001000; break;
  3986  001942  D7BF               	goto	i2l1495
  3987                           
  3988                           ;interrupts.c: 275: case 0b00001000: RMotorCounter = 0b00000001; break;
  3989  001944  D7C0               	goto	i2l1497
  3990  001946                     L26:
  3991  001946  6E31               	movwf	_RMotorCounter,c
  3992  001948  D00E               	goto	i2l157
  3993                           
  3994                           ;interrupts.c: 276: default: RMotorCounter = 0b00000001;
  3995  00194A  D7BD               	goto	i2l1497
  3996  00194C                     i2l1541:
  3997  00194C  5031               	movf	_RMotorCounter,w,c
  3998                           
  3999                           ; Switch size 1, requested type "space"
  4000                           ; Number of cases is 4, Range of values is 1 to 8
  4001                           ; switch strategies available:
  4002                           ; Name         Instructions Cycles
  4003                           ; simple_byte           13     7 (average)
  4004                           ;	Chosen strategy is simple_byte
  4005  00194E  0A01               	xorlw	1	; case 1
  4006  001950  B4D8               	btfsc	status,2,c
  4007  001952  D7BB               	goto	i2l1499
  4008  001954  0A03               	xorlw	3	; case 2
  4009  001956  B4D8               	btfsc	status,2,c
  4010  001958  D7BA               	goto	i2l1501
  4011  00195A  0A06               	xorlw	6	; case 4
  4012  00195C  B4D8               	btfsc	status,2,c
  4013  00195E  D7B1               	goto	i2l1495
  4014  001960  0A0C               	xorlw	12	; case 8
  4015  001962  D7B1               	goto	i2l1497
  4016  001964  D000               	goto	i2l157
  4017  001966                     i2l157:
  4018  001966  0012               	return		;funcret
  4019  001968                     __end_of_motorCounterUpdate:
  4020                           	opt stack 0
  4021                           pclatu	equ	0xFFB
  4022                           pclath	equ	0xFFA
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           prodh	equ	0xFF4
  4028                           prodl	equ	0xFF3
  4029                           intcon	equ	0xFF2
  4030                           intcon2	equ	0xFF1
  4031                           postinc0	equ	0xFEE
  4032                           fsr0h	equ	0xFEA
  4033                           fsr0l	equ	0xFE9
  4034                           wreg	equ	0xFE8
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           bsr	equ	0xFE0
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           pclatu	equ	0xFFB
  4044                           pclath	equ	0xFFA
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           intcon2	equ	0xFF1
  4053                           postinc0	equ	0xFEE
  4054                           fsr0h	equ	0xFEA
  4055                           fsr0l	equ	0xFE9
  4056                           wreg	equ	0xFE8
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           bsr	equ	0xFE0
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066                           	psect	rparam
  4067  0000                     pclatu	equ	0xFFB
  4068                           pclath	equ	0xFFA
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           intcon	equ	0xFF2
  4076                           intcon2	equ	0xFF1
  4077                           postinc0	equ	0xFEE
  4078                           fsr0h	equ	0xFEA
  4079                           fsr0l	equ	0xFE9
  4080                           wreg	equ	0xFE8
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           bsr	equ	0xFE0
  4084                           postinc2	equ	0xFDE
  4085                           postdec2	equ	0xFDD
  4086                           fsr2h	equ	0xFDA
  4087                           fsr2l	equ	0xFD9
  4088                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      93
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_initialRotation
    _forward->_motorCounterUpdate
    _initialRotation->_rotate
    _rotate->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4601
                                             23 COMRAM    14    14      0
                            _forward
                    _initialRotation
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
                      _singleForward
                        _stateUpdate
 ---------------------------------------------------------------------------------
 (6) _stateUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _singleForward                                        0     0      0     812
                            _forward
 ---------------------------------------------------------------------------------
 (7) _forward                                              0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _initialRotation                                      3     1      2    1196
                                             20 COMRAM     3     1      2
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     834
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (8) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _forward
     _motorCounterUpdate
   _initialRotation
     _rotate
       _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate
   _singleForward
     _forward
       _motorCounterUpdate
   _stateUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     25      5D       1       73.2%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D2       6        0.0%
DATA                 0      0      D2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 13:42:50 2015

                   _stateUpdate 1538                    ___awdiv@sign 0085                              bsr 000FE0  
           ___wmul@multiplicand 0082                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_LVP$ON 000000                             l305 1B58                             l314 1D6E  
                           l340 17B8                             l333 12C8                             l350 1CB0  
                           l319 1D82                             l351 1CB8                             l346 1C7C  
                           l354 1C1C                             l347 1C84                             l547 1B28  
                  __CFG_CPB$OFF 000000                             _MAX 1C86                             _MIN 1C52  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1D84                    _rotatingSide 0035  
                           wreg 000FE8                            ?_MAX 0086                            ?_MIN 0086  
                          MAX@a 0086                            MAX@b 0088                            MIN@a 0086  
                          MIN@b 0088                    __CFG_WDT$OFF 000000                            l2003 1762  
                          l2013 17A0                            l2023 1854                            l2007 177C  
                          l2009 1786                            l2027 185E                            l2053 1D10  
                          l1911 1ABC                            l1903 1A90                            l1921 1AF8  
                          l1913 1AC6                            l1909 1AAE                            l1925 1B08  
                          l1935 1B40                            l1929 1B1E                            l1961 104E  
                          l1947 1D7C                            l1971 11F0                            l1955 102A  
                          l1965 10BC                            l1975 124A                            l1967 11DA  
                          l1897 1A78                            l1977 12B2                            _LATC 000F8B  
                          u1800 1028                            u1810 104C                            u1927 1B48  
                          u1895 17C6                            i2l87 14DE               ??_initialRotation 004C  
                          _main 1CEE                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1BAA           __end_of_setCorrection 1A5A                           ??_MAX 008A  
                         ??_MIN 008A      __size_of_sensorComputation 02C4                           ?_main 0036  
               __end_of___awdiv 1B2A                           _T0CON 000FD5                 ___awdiv@divisor 0082  
                         i2l204 1D64                           i2l116 14FE                           i2l160 1D92  
                         i2l227 1752                           i2l157 1966                           i2l198 1D44  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1D94  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                   _controlToLeft 0027                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                         _delay 1B2A                           _merge 1D84                 __end_of_forward 1D46  
               __end_of_low_isr 00A2                           tablat 000FF5                           status 000FD8  
          ?_ConfigureOscillator 0036                 __initialization 1C1E                    __end_of_main 1D1C  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0047                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1205 170E                          i2l1141 1568  
                        i2l1207 171E                          i2l1151 15AC                          i2l1143 1578  
                        i2l1209 172E                          i2l1153 15BC                          i2l1137 1548  
                        i2l1145 157C                          i2l1171 1632                          i2l1155 15C0  
                        i2l1139 1558                          i2l1501 18CE                          i2l1181 1676  
                        i2l1173 1642                          i2l1165 1602                          i2l1183 1686  
                        i2l1175 1646                          i2l1521 190C                          i2l1505 18D4  
                        i2l1177 1656                          i2l1185 168A                          i2l1169 1622  
                        i2l1515 1904                          i2l1523 1910                          i2l1507 18F2  
                        i2l1195 16CC                          i2l1541 194C                          i2l1525 192E  
                        i2l1613 1BC8                          i2l1197 16DC                          i2l1189 16AA  
                        i2l1615 1BDE                          i2l1801 1428                          i2l1477 1886  
                        i2l1661 1CDE                          i2l1821 1480                          i2l1813 145A  
                        i2l1495 18C2                          i2l1479 188A                          i2l1487 1898  
                        i2l1497 18C6                          i2l1489 18B2                          i2l1833 14C8  
                        i2l1825 1498                          i2l1817 1472                          i2l1809 144C  
                        i2l1745 131C                          i2l1499 18CA                          i2l1659 1CD0  
                        i2l1771 138C                          i2l1747 1322                          i2l1669 1D56  
                        i2l1829 14B0                          i2l1781 13B4                          i2l1757 1346  
                        i2l1765 135E                          i2l1783 13C2                          i2l1775 139C  
                        i2l1759 1350                          i2l1839 14F6                          i2l1793 1402  
                        i2l1785 13D0                          i2l1769 137C                          i2l1787 13E2  
                        i2l1799 1422                          _INTCON 000FF2                          _OSCCON 000FD3  
                     ??_InitApp 0085           ??_ConfigureOscillator 0080                     merge@merged 0049  
                __CFG_XINST$OFF 000000              sensorComputation@i 0098              sensorComputation@j 0096  
                _controlToRight 0029                __end_of_high_isr 1538                          _cState 005B  
                        ___wmul 1BE6                       ??___awdiv 0084                  __CFG_STVREN$ON 000000  
                        _pState 005D                          delay@x 0083                          clear_0 1C24  
              ___awdiv@quotient 0086                          _rotate 1BAA                    __pdataCOMRAM 005B  
                     ??_forward 0049                    __mediumconst 0000                       ??_low_isr 0036  
                _ReverseCounter 001B                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                      __accesstop 0080         __end_of__initialization 1C48  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                  __pcstackCOMRAM 0036  
                 __end_of_delay 1B6E                    ?_stateUpdate 0036                      _TurnedLeft 0023  
               moveMouse@action 0047                   __end_of_merge 1D94      __end_of_motorCounterUpdate 1968  
               _initialRotation 1CBA                  _ignoreControll 005C                  _ForwardCounter 0013  
                       ??_delay 0082                         ??_merge 0048              _AlgorithmSelection 1D66  
                  _LTurnCounter 0015                      _delay_time 002B           __end_of_singleForward 1D66  
             _MotorDelayCounter 0017             ?_AlgorithmSelection 0036            setCorrection@sideAvg 008A  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0036  
                       _INTCON2 000FF1                         i2u40_40 1612                         i2u32_40 158C  
                       i2u33_40 159C                         i2u36_40 15D0                         i2u53_40 16EC  
                       i2u45_40 1666                         i2u37_40 15E0                         _OSCTUNE 000F9B  
                       i2u48_40 169A            ??_AlgorithmSelection 0080                       ?_high_isr 0036  
                       _Deadend 0011                   _LMotorCounter 0030                         _InitApp 1B6E  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1A5A  
               __size_of___wmul 0038                         _deadEnd 0033         __end_of_initialRotation 1CEE  
                  __psmallconst 1000                         __pcinit 1C1E                         __ramtop 1000  
                       __ptext0 1CEE                         __ptext1 1968                         __ptext2 1754  
                       __ptext3 1006                         __ptext4 1BE6                         __ptext5 1A5A  
                       __ptext6 1C52                         __ptext7 1C86                         __ptext8 1B6E  
                       __ptext9 1B2A                 __size_of_rotate 003C                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1D1C                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0036                      ??_high_isr 004D  
                __pintcode_body 12CA          __size_of_setCorrection 00F2            end_of_initialization 1C48  
              _sensorCorrection 0001               __end_of_moveMouse 1DA6                   __Lmediumconst 0000  
                       int_func 12CA                      _justTurned 0034                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE            __size_of_stateUpdate 021C  
                     _TRISBbits 000F93                       _TRISEbits 000F96                  ??_sensorUpdate 009A  
   __end_of_ConfigureOscillator 1D9E                    _RTurnCounter 0019  sensorComputation@getCorrection 008D  
                 _setCorrection 1968                ?_initialRotation 004A                  __end_of___wmul 1C1E  
                 __pidataCOMRAM 1DA6                     _TurnedRight 0025                  __end_of_rotate 1BE6  
           start_initialization 1C1E                     __end_of_MAX 1CBA                     __end_of_MIN 1C86  
            _motorCounterUpdate 1874                __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0047  
                    merge@right 0047                  ?_setCorrection 0036                        ??___wmul 0084  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 0049                  _sensorLocation 1001  
          ??_motorCounterUpdate 0048                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 0021       sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0  
             __size_of_high_isr 1530                        ?_InitApp 0036               __CFG_CCP2MX$PORTC 000000  
                     _algorithm 0032                       __pintcode 0008           setCorrection@frontAvg 008C  
        motorCounterUpdate@side 0048                        ?___awdiv 0080            __end_of_sensorUpdate 1874  
        __end_of_sensorLocation 1005                     __pintcodelo 0018             initialRotation@side 004C  
                _ChangeRequired 002F                     __smallconst 1000                        ?_forward 0036  
                      ?_low_isr 0036                       _oldErrorP 002D          __size_of_singleForward 0020  
                __size_of_delay 0044     __size_of_AlgorithmSelection 001E                  __size_of_merge 0010  
                ___wmul@product 0084                       _moveMouse 1D9E                        i2u142_40 130C  
               ??_setCorrection 0088                        i2u155_40 13F0                        i2u156_40 1410  
                      i2u148_40 136C                __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2  
             ___wmul@multiplier 0080                   _RMotorCounter 0031                      rotate@side 0049  
                    ?_moveMouse 0036                __size_of_InitApp 003C                        __Hrparam 0000  
                     merge@left 0048            sensorComputation@max 0090                        __Lrparam 0000  
          sensorComputation@min 0092            sensorComputation@sum 0094              __CFG_BOREN$SBORDIS 000000  
                 _singleForward 1D46                   ??_stateUpdate 0047                __size_of___awdiv 00D0  
                      _TurnLeft 001F                __size_of_forward 002A                __size_of_low_isr 008A  
                      __ptext10 1D66                        __ptext11 1D94                        __ptext20 1BAA  
                      __ptext21 1874                        __ptext14 1538                        __ptext15 1D46  
                      __ptext16 1D1C                        __ptext17 1D9E                        __ptext18 1D84  
                      __ptext19 1CBA                        _high_isr 0008                   __size_of_main 002E  
                 _RotateCounter 001D           __size_of_sensorUpdate 0120    __size_of_ConfigureOscillator 000A  
                ?_singleForward 0036               _sensorComputation 1006             __end_of_stateUpdate 1754  
                    _INTCONbits 000FF2              ?_sensorComputation 008B        __size_of_initialRotation 0034  
                 sensorUpdate@i 00F1                   sensorUpdate@j 00F3                    _sensorUpdate 1754  
                      intlevel1 0000                        intlevel2 0000             ??_sensorComputation 008E  
                   ??_moveMouse 0047        initialRotation@isDeadEnd 004A       __end_of_sensorComputation 12CA  
                   _sensorValue 0009     __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0047  
               ??_singleForward 0049  
