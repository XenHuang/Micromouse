

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 23:41:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataCOMRAM
    42  002096                     __pidataCOMRAM:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _MOTORDELAYMAX
    46  002096  02                 	db	2
    47                           
    48                           ;initializer for _cState
    49  002097  02                 	db	2
    50                           
    51                           ;initializer for _ignoreControll
    52  002098  0A                 	db	10
    53                           
    54                           ;initializer for _pState
    55  002099  02                 	db	2
    56                           
    57                           	psect	smallconst
    58  001000                     __psmallconst:
    59                           	opt stack 0
    60  001000  00                 	db	0
    61  001001                     _sensorLocation:
    62                           	opt stack 0
    63  001001  1B                 	db	27
    64  001002  2B                 	db	43
    65  001003  1F                 	db	31
    66  001004  33                 	db	51
    67  001005                     __end_of_sensorLocation:
    68                           	opt stack 0
    69  0000                     _LATC	set	3979
    70  0000                     _OSCTUNE	set	3995
    71  0000                     _TRISBbits	set	3987
    72  0000                     _TRISC	set	3988
    73  0000                     _TRISEbits	set	3990
    74  0000                     _ADCON0	set	4034
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _ADCON1	set	4033
    77  0000                     _ADCON2	set	4032
    78  0000                     _ADRESH	set	4036
    79  0000                     _ADRESL	set	4035
    80  0000                     _OSCCON	set	4051
    81  0000                     _T0CON	set	4053
    82  0000                     _INTCON	set	4082
    83  0000                     _INTCON2	set	4081
    84  0000                     _INTCONbits	set	4082
    85                           
    86                           ; #config settings
    87  001005  00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           	psect	cinit
    90  001E30                     __pcinit:
    91                           	opt stack 0
    92  001E30                     start_initialization:
    93                           	opt stack 0
    94  001E30                     __initialization:
    95                           	opt stack 0
    96                           
    97                           ; Clear objects allocated to BANK0 (8 bytes)
    98  001E30  EE00  F0F7         	lfsr	0,__pbssBANK0
    99  001E34  0E08               	movlw	8
   100  001E36                     clear_0:
   101  001E36  6AEE               	clrf	postinc0,c
   102  001E38  06E8               	decf	wreg,f,c
   103  001E3A  E1FD               	bnz	clear_0
   104                           
   105                           ; Clear objects allocated to COMRAM (45 bytes)
   106  001E3C  EE00  F001         	lfsr	0,__pbssCOMRAM
   107  001E40  0E2D               	movlw	45
   108  001E42                     clear_1:
   109  001E42  6AEE               	clrf	postinc0,c
   110  001E44  06E8               	decf	wreg,f,c
   111  001E46  E1FD               	bnz	clear_1
   112                           
   113                           ; Initialize objects allocated to COMRAM (4 bytes)
   114                           ; load TBLPTR registers with __pidataCOMRAM
   115  001E48  0E96               	movlw	low __pidataCOMRAM
   116  001E4A  6EF6               	movwf	tblptrl,c
   117  001E4C  0E20               	movlw	high __pidataCOMRAM
   118  001E4E  6EF7               	movwf	tblptrh,c
   119  001E50  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   120  001E52  6EF8               	movwf	tblptru,c
   121  001E54  EE00  F058         	lfsr	0,__pdataCOMRAM
   122  001E58  EE10 F004          	lfsr	1,4
   123  001E5C                     copy_data0:
   124  001E5C  0009               	tblrd		*+
   125  001E5E  CFF5 FFEE          	movff	tablat,postinc0
   126  001E62  50E5               	movf	postdec1,w,c
   127  001E64  50E1               	movf	fsr1l,w,c
   128  001E66  E1FA               	bnz	copy_data0
   129  001E68                     end_of_initialization:
   130                           	opt stack 0
   131  001E68                     __end_of__initialization:
   132                           	opt stack 0
   133  001E68  0E00               	movlw	low (__Lmediumconst shr (0+16))
   134  001E6A  6EF8               	movwf	tblptru,c
   135  001E6C  0100               	movlb	0
   136  001E6E  EFDF  F00F         	goto	_main	;jump to C main() function
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           wreg	equ	0xFE8
   143                           postdec1	equ	0xFE5
   144                           fsr1l	equ	0xFE1
   145                           
   146                           	psect	bssCOMRAM
   147  000001                     __pbssCOMRAM:
   148                           	opt stack 0
   149  000001                     _sensorValue:
   150                           	opt stack 0
   151  000001                     	ds	8
   152  000009                     _Deadend:
   153                           	opt stack 0
   154  000009                     	ds	2
   155  00000B                     _ForwardCounter:
   156                           	opt stack 0
   157  00000B                     	ds	2
   158  00000D                     _LTurnCounter:
   159                           	opt stack 0
   160  00000D                     	ds	2
   161  00000F                     _MotorDelayCounter:
   162                           	opt stack 0
   163  00000F                     	ds	2
   164  000011                     _RTurnCounter:
   165                           	opt stack 0
   166  000011                     	ds	2
   167  000013                     _ReverseCounter:
   168                           	opt stack 0
   169  000013                     	ds	2
   170  000015                     _RotateCounter:
   171                           	opt stack 0
   172  000015                     	ds	2
   173  000017                     _TurnLeft:
   174                           	opt stack 0
   175  000017                     	ds	2
   176  000019                     _TurnRight:
   177                           	opt stack 0
   178  000019                     	ds	2
   179  00001B                     _TurnedLeft:
   180                           	opt stack 0
   181  00001B                     	ds	2
   182  00001D                     _TurnedRight:
   183                           	opt stack 0
   184  00001D                     	ds	2
   185  00001F                     _controlToLeft:
   186                           	opt stack 0
   187  00001F                     	ds	2
   188  000021                     _controlToRight:
   189                           	opt stack 0
   190  000021                     	ds	2
   191  000023                     _delay_time:
   192                           	opt stack 0
   193  000023                     	ds	2
   194  000025                     _oldErrorP:
   195                           	opt stack 0
   196  000025                     	ds	2
   197  000027                     _ChangeRequired:
   198                           	opt stack 0
   199  000027                     	ds	1
   200  000028                     _LMotorCounter:
   201                           	opt stack 0
   202  000028                     	ds	1
   203  000029                     _RMotorCounter:
   204                           	opt stack 0
   205  000029                     	ds	1
   206  00002A                     _algorithm:
   207                           	opt stack 0
   208  00002A                     	ds	1
   209  00002B                     _deadEnd:
   210                           	opt stack 0
   211  00002B                     	ds	1
   212  00002C                     _justTurned:
   213                           	opt stack 0
   214  00002C                     	ds	1
   215  00002D                     _rotatingSide:
   216                           	opt stack 0
   217  00002D                     	ds	1
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           postdec1	equ	0xFE5
   225                           fsr1l	equ	0xFE1
   226                           
   227                           	psect	dataCOMRAM
   228  000058                     __pdataCOMRAM:
   229                           	opt stack 0
   230  000058                     _MOTORDELAYMAX:
   231                           	opt stack 0
   232  000058                     	ds	1
   233  000059                     _cState:
   234                           	opt stack 0
   235  000059                     	ds	1
   236  00005A                     _ignoreControll:
   237                           	opt stack 0
   238  00005A                     	ds	1
   239  00005B                     _pState:
   240                           	opt stack 0
   241  00005B                     	ds	1
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           postdec1	equ	0xFE5
   249                           fsr1l	equ	0xFE1
   250                           
   251                           	psect	bssBANK0
   252  0000F7                     __pbssBANK0:
   253                           	opt stack 0
   254  0000F7                     _sensorCorrection:
   255                           	opt stack 0
   256  0000F7                     	ds	8
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           postdec1	equ	0xFE5
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	cstackBANK0
   267  000080                     __pcstackBANK0:
   268                           	opt stack 0
   269  000080                     ?___wmul:
   270                           	opt stack 0
   271  000080                     ?___awdiv:
   272                           	opt stack 0
   273  000080                     delay@ms:
   274                           	opt stack 0
   275  000080                     ___wmul@multiplier:
   276                           	opt stack 0
   277  000080                     ___awdiv@dividend:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x0
   281  000080                     	ds	2
   282  000082                     ??_delay:
   283  000082                     ___wmul@multiplicand:
   284                           	opt stack 0
   285  000082                     ___awdiv@divisor:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x2
   289  000082                     	ds	1
   290  000083                     delay@x:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x3
   294  000083                     	ds	1
   295  000084                     ___awdiv@counter:
   296                           	opt stack 0
   297  000084                     ___wmul@product:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x4
   301  000084                     	ds	1
   302  000085                     ___awdiv@sign:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x5
   306  000085                     	ds	1
   307  000086                     ?_MIN:
   308                           	opt stack 0
   309  000086                     ?_MAX:
   310                           	opt stack 0
   311  000086                     MIN@a:
   312                           	opt stack 0
   313  000086                     MAX@a:
   314                           	opt stack 0
   315  000086                     ___awdiv@quotient:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x6
   319  000086                     	ds	2
   320  000088                     ??_setCorrection:
   321  000088                     MIN@b:
   322                           	opt stack 0
   323  000088                     MAX@b:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x8
   327  000088                     	ds	2
   328  00008A                     ??_MIN:
   329  00008A                     ??_MAX:
   330  00008A                     setCorrection@sideAvg:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0xA
   334  00008A                     	ds	1
   335  00008B                     sensorComputation@sensorTemp:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0xB
   339  00008B                     	ds	1
   340  00008C                     setCorrection@frontAvg:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0xC
   344  00008C                     	ds	1
   345  00008D                     sensorComputation@getCorrection:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xD
   349  00008D                     	ds	1
   350  00008E                     ??_sensorComputation:
   351                           
   352                           ; 0 bytes @ 0xE
   353  00008E                     	ds	4
   354  000092                     sensorComputation@max:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x12
   358  000092                     	ds	2
   359  000094                     sensorComputation@min:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x14
   363  000094                     	ds	2
   364  000096                     sensorComputation@sum:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x16
   368  000096                     	ds	2
   369  000098                     sensorComputation@j:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x18
   373  000098                     	ds	2
   374  00009A                     sensorComputation@i:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00009A                     	ds	2
   379  00009C                     ??_sensorUpdate:
   380                           
   381                           ; 0 bytes @ 0x1C
   382  00009C                     	ds	6
   383  0000A2                     sensorUpdate@sensorTemp:
   384                           	opt stack 0
   385                           
   386                           ; 80 bytes @ 0x22
   387  0000A2                     	ds	80
   388  0000F2                     sensorUpdate@getCorrection:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x72
   392  0000F2                     	ds	1
   393  0000F3                     sensorUpdate@i:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x73
   397  0000F3                     	ds	2
   398  0000F5                     sensorUpdate@j:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x75
   402  0000F5                     	ds	2
   403  0000F7                     tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           ; 0 bytes @ 0x77
   413                           
   414                           	psect	cstackCOMRAM
   415  00002E                     __pcstackCOMRAM:
   416                           	opt stack 0
   417  00002E                     ??_low_isr:
   418  00002E                     
   419                           ; 0 bytes @ 0x0
   420  00002E                     	ds	17
   421  00003F                     motorCounterUpdate@reverse:
   422                           	opt stack 0
   423  00003F                     merge@right:
   424                           	opt stack 0
   425  00003F                     moveMouse@action:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x11
   429  00003F                     	ds	1
   430  000040                     motorCounterUpdate@side:
   431                           	opt stack 0
   432  000040                     merge@left:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x12
   436  000040                     	ds	1
   437  000041                     merge@merged:
   438                           	opt stack 0
   439  000041                     rotate@side:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x13
   443  000041                     	ds	1
   444  000042                     initialRotation@isDeadEnd:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x14
   448  000042                     	ds	2
   449  000044                     initialRotation@side:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x16
   453  000044                     	ds	1
   454  000045                     ??_high_isr:
   455                           
   456                           ; 0 bytes @ 0x17
   457  000045                     	ds	17
   458  000056                     high_isr@a:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x28
   462  000056                     	ds	2
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1l	equ	0xFE1
   471                           
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 41 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;		None               void
   484 ;; Registers used:
   485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;Total ram usage:        0 bytes
   496 ;; Hardware stack levels required when called:    8
   497 ;; This function calls:
   498 ;;		_ConfigureOscillator
   499 ;;		_InitApp
   500 ;;		_sensorUpdate
   501 ;;		_setCorrection
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text0
   508  001FBE                     __ptext0:
   509                           	opt stack 0
   510  001FBE                     _main:
   511                           	opt stack 23
   512                           
   513                           ;main.c: 44: ConfigureOscillator();
   514                           
   515                           ;incstack = 0
   516  001FBE  EC42  F010         	call	_ConfigureOscillator	;wreg free
   517                           
   518                           ;main.c: 47: InitApp();
   519  001FC2  EC39  F00F         	call	_InitApp	;wreg free
   520                           
   521                           ;main.c: 48: sensorUpdate(1);
   522  001FC6  0E01               	movlw	1
   523  001FC8  ECD8  F00C         	call	_sensorUpdate
   524                           
   525                           ;main.c: 49: sensorUpdate(1);
   526  001FCC  0E01               	movlw	1
   527  001FCE  ECD8  F00C         	call	_sensorUpdate
   528                           
   529                           ;main.c: 50: sensorUpdate(1);
   530  001FD2  0E01               	movlw	1
   531  001FD4  ECD8  F00C         	call	_sensorUpdate
   532                           
   533                           ;main.c: 51: setCorrection();
   534  001FD8  EC68  F00D         	call	_setCorrection	;wreg free
   535                           
   536                           ;main.c: 52: INTCONbits.GIE = 1;
   537  001FDC  8EF2               	bsf	intcon,7,c	;volatile
   538  001FDE  D000               	goto	l2254
   539  001FE0                     l2254:
   540                           
   541                           ;main.c: 54: {
   542                           ;main.c: 55: sensorUpdate(0);
   543  001FE0  0E00               	movlw	0
   544  001FE2  ECD8  F00C         	call	_sensorUpdate
   545  001FE6  D7FC               	goto	l2254
   546  001FE8  EF51  F000         	goto	start
   547  001FEC                     __end_of_main:
   548                           	opt stack 0
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           intcon	equ	0xFF2
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1l	equ	0xFE1
   558                           
   559 ;; *************** function _setCorrection *****************
   560 ;; Defined at:
   561 ;;		line 125 in file "user.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  frontAvg        2   12[BANK0 ] int 
   566 ;;  sideAvg         2   10[BANK0 ] int 
   567 ;; Return value:  Size  Location     Type
   568 ;;		None               void
   569 ;; Registers used:
   570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;Total ram usage:        6 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    6
   583 ;; This function calls:
   584 ;;		___awdiv
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text1
   591  001AD0                     __ptext1:
   592                           	opt stack 0
   593  001AD0                     _setCorrection:
   594                           	opt stack 24
   595                           
   596                           ;user.c: 127: int sideAvg,frontAvg;
   597                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   598                           
   599                           ;incstack = 0
   600  001AD0  5001               	movf	_sensorValue,w,c
   601  001AD2  2403               	addwf	_sensorValue+2,w,c
   602  001AD4  0100               	movlb	0	; () banked
   603  001AD6  6F80               	movwf	___awdiv@dividend& (0+255),b
   604  001AD8  5002               	movf	_sensorValue+1,w,c
   605  001ADA  2004               	addwfc	_sensorValue+3,w,c
   606  001ADC  0100               	movlb	0	; () banked
   607  001ADE  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   608  001AE0  0E00               	movlw	0
   609  001AE2  0100               	movlb	0	; () banked
   610  001AE4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   611  001AE6  0E02               	movlw	2
   612  001AE8  6F82               	movwf	___awdiv@divisor& (0+255),b
   613  001AEA  EC63  F00E         	call	___awdiv	;wreg free
   614  001AEE  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   615  001AF2  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   616                           
   617                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   618  001AF6  5007               	movf	_sensorValue+6,w,c
   619  001AF8  2405               	addwf	_sensorValue+4,w,c
   620  001AFA  0100               	movlb	0	; () banked
   621  001AFC  6F80               	movwf	___awdiv@dividend& (0+255),b
   622  001AFE  5008               	movf	_sensorValue+7,w,c
   623  001B00  2006               	addwfc	_sensorValue+5,w,c
   624  001B02  0100               	movlb	0	; () banked
   625  001B04  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   626  001B06  0E00               	movlw	0
   627  001B08  0100               	movlb	0	; () banked
   628  001B0A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   629  001B0C  0E02               	movlw	2
   630  001B0E  6F82               	movwf	___awdiv@divisor& (0+255),b
   631  001B10  EC63  F00E         	call	___awdiv	;wreg free
   632  001B14  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   633  001B18  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   634                           
   635                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   636  001B1C  C001  F088         	movff	_sensorValue,??_setCorrection
   637  001B20  C002  F089         	movff	_sensorValue+1,??_setCorrection+1
   638  001B24  0100               	movlb	0	; () banked
   639  001B26  1F88               	comf	??_setCorrection& (0+255),f,b
   640  001B28  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   641  001B2A  4B88               	infsnz	??_setCorrection& (0+255),f,b
   642  001B2C  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   643  001B2E  0100               	movlb	0	; () banked
   644  001B30  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   645  001B32  0100               	movlb	0	; () banked
   646  001B34  2588               	addwf	??_setCorrection& (0+255),w,b
   647  001B36  0100               	movlb	0	; () banked
   648  001B38  6FF7               	movwf	_sensorCorrection& (0+255),b
   649  001B3A  0100               	movlb	0	; () banked
   650  001B3C  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   651  001B3E  0100               	movlb	0	; () banked
   652  001B40  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   653  001B42  0100               	movlb	0	; () banked
   654  001B44  6FF8               	movwf	(_sensorCorrection+1)& (0+255),b
   655                           
   656                           ; BSR set to: 0
   657                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   658  001B46  EE20  F003         	lfsr	2,_sensorValue+2
   659  001B4A  CFDE F088          	movff	postinc2,??_setCorrection
   660  001B4E  CFDD F089          	movff	postdec2,??_setCorrection+1
   661  001B52  0100               	movlb	0	; () banked
   662  001B54  1F88               	comf	??_setCorrection& (0+255),f,b
   663  001B56  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   664  001B58  4B88               	infsnz	??_setCorrection& (0+255),f,b
   665  001B5A  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   666  001B5C  0100               	movlb	0	; () banked
   667  001B5E  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   668  001B60  0100               	movlb	0	; () banked
   669  001B62  2588               	addwf	??_setCorrection& (0+255),w,b
   670  001B64  0100               	movlb	0	; () banked
   671  001B66  6FF9               	movwf	(_sensorCorrection+2)& (0+255),b
   672  001B68  0100               	movlb	0	; () banked
   673  001B6A  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   674  001B6C  0100               	movlb	0	; () banked
   675  001B6E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   676  001B70  0100               	movlb	0	; () banked
   677  001B72  6FFA               	movwf	(_sensorCorrection+3)& (0+255),b
   678                           
   679                           ; BSR set to: 0
   680                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   681  001B74  EE20  F005         	lfsr	2,_sensorValue+4
   682  001B78  CFDE F088          	movff	postinc2,??_setCorrection
   683  001B7C  CFDD F089          	movff	postdec2,??_setCorrection+1
   684  001B80  0100               	movlb	0	; () banked
   685  001B82  1F88               	comf	??_setCorrection& (0+255),f,b
   686  001B84  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   687  001B86  4B88               	infsnz	??_setCorrection& (0+255),f,b
   688  001B88  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   689  001B8A  0100               	movlb	0	; () banked
   690  001B8C  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   691  001B8E  0100               	movlb	0	; () banked
   692  001B90  2588               	addwf	??_setCorrection& (0+255),w,b
   693  001B92  0100               	movlb	0	; () banked
   694  001B94  6FFB               	movwf	(_sensorCorrection+4)& (0+255),b
   695  001B96  0100               	movlb	0	; () banked
   696  001B98  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   697  001B9A  0100               	movlb	0	; () banked
   698  001B9C  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   699  001B9E  0100               	movlb	0	; () banked
   700  001BA0  6FFC               	movwf	(_sensorCorrection+5)& (0+255),b
   701                           
   702                           ; BSR set to: 0
   703                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   704  001BA2  EE20  F007         	lfsr	2,_sensorValue+6
   705  001BA6  CFDE F088          	movff	postinc2,??_setCorrection
   706  001BAA  CFDD F089          	movff	postdec2,??_setCorrection+1
   707  001BAE  0100               	movlb	0	; () banked
   708  001BB0  1F88               	comf	??_setCorrection& (0+255),f,b
   709  001BB2  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   710  001BB4  4B88               	infsnz	??_setCorrection& (0+255),f,b
   711  001BB6  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   712  001BB8  0100               	movlb	0	; () banked
   713  001BBA  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   714  001BBC  0100               	movlb	0	; () banked
   715  001BBE  2588               	addwf	??_setCorrection& (0+255),w,b
   716  001BC0  0100               	movlb	0	; () banked
   717  001BC2  6FFD               	movwf	(_sensorCorrection+6)& (0+255),b
   718  001BC4  0100               	movlb	0	; () banked
   719  001BC6  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   720  001BC8  0100               	movlb	0	; () banked
   721  001BCA  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   722  001BCC  0100               	movlb	0	; () banked
   723  001BCE  6FFE               	movwf	(_sensorCorrection+7)& (0+255),b
   724                           
   725                           ; BSR set to: 0
   726  001BD0  0012               	return		;funcret
   727  001BD2                     __end_of_setCorrection:
   728                           	opt stack 0
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           intcon	equ	0xFF2
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           postinc2	equ	0xFDE
   739                           postdec2	equ	0xFDD
   740                           
   741 ;; *************** function _sensorUpdate *****************
   742 ;; Defined at:
   743 ;;		line 168 in file "user.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  getCorrectio    1    wreg     unsigned char 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  getCorrectio    1  114[BANK0 ] unsigned char 
   748 ;;  sensorTemp     80   34[BANK0 ] int [10][4]
   749 ;;  j               2  117[BANK0 ] int 
   750 ;;  i               2  115[BANK0 ] int 
   751 ;; Return value:  Size  Location     Type
   752 ;;		None               void
   753 ;; Registers used:
   754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;Total ram usage:       91 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    7
   767 ;; This function calls:
   768 ;;		___wmul
   769 ;;		_sensorComputation
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text2
   776  0019B0                     __ptext2:
   777                           	opt stack 0
   778  0019B0                     _sensorUpdate:
   779                           	opt stack 23
   780                           
   781                           ; BSR set to: 0
   782                           ;incstack = 0
   783                           ;sensorUpdate@getCorrection stored from wreg
   784  0019B0  0100               	movlb	0	; () banked
   785  0019B2  6FF2               	movwf	sensorUpdate@getCorrection& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 170: int i,j;
   789                           ;user.c: 171: int sensorTemp[4][10];
   790                           ;user.c: 174: for(i = 0; i < 10; i++)
   791  0019B4  0E00               	movlw	0
   792  0019B6  0100               	movlb	0	; () banked
   793  0019B8  6FF4               	movwf	(sensorUpdate@i+1)& (0+255),b
   794  0019BA  0E00               	movlw	0
   795  0019BC  6FF3               	movwf	sensorUpdate@i& (0+255),b
   796  0019BE                     l2204:
   797                           
   798                           ; BSR set to: 0
   799  0019BE  0100               	movlb	0	; () banked
   800  0019C0  BFF4               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   801  0019C2  D00A               	goto	l2208
   802  0019C4  0100               	movlb	0	; () banked
   803  0019C6  51F4               	movf	(sensorUpdate@i+1)& (0+255),w,b
   804  0019C8  E178               	bnz	l2228
   805  0019CA  0E0A               	movlw	10
   806  0019CC  0100               	movlb	0	; () banked
   807  0019CE  5DF3               	subwf	sensorUpdate@i& (0+255),w,b
   808  0019D0  B0D8               	btfsc	status,0,c
   809  0019D2  D073               	goto	l2228
   810  0019D4  D001               	goto	l2208
   811                           
   812                           ; BSR set to: 0
   813  0019D6  D071               	goto	l2228
   814  0019D8                     l2208:
   815                           
   816                           ; BSR set to: 0
   817                           ;user.c: 175: {
   818                           ;user.c: 176: for(j = 0 ; j < 4 ; j++)
   819  0019D8  0E00               	movlw	0
   820  0019DA  0100               	movlb	0	; () banked
   821  0019DC  6FF6               	movwf	(sensorUpdate@j+1)& (0+255),b
   822  0019DE  0E00               	movlw	0
   823  0019E0  6FF5               	movwf	sensorUpdate@j& (0+255),b
   824  0019E2                     l2210:
   825                           
   826                           ; BSR set to: 0
   827  0019E2  0100               	movlb	0	; () banked
   828  0019E4  BFF6               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   829  0019E6  D00A               	goto	l2214
   830  0019E8  0100               	movlb	0	; () banked
   831  0019EA  51F6               	movf	(sensorUpdate@j+1)& (0+255),w,b
   832  0019EC  E161               	bnz	l2224
   833  0019EE  0E04               	movlw	4
   834  0019F0  0100               	movlb	0	; () banked
   835  0019F2  5DF5               	subwf	sensorUpdate@j& (0+255),w,b
   836  0019F4  B0D8               	btfsc	status,0,c
   837  0019F6  D05C               	goto	l2224
   838  0019F8  D001               	goto	l2214
   839                           
   840                           ; BSR set to: 0
   841  0019FA  D05A               	goto	l2224
   842  0019FC                     l2214:
   843                           
   844                           ; BSR set to: 0
   845                           ;user.c: 177: {
   846                           ;user.c: 178: ADCON0 = sensorLocation[j];
   847  0019FC  0E01               	movlw	low _sensorLocation
   848  0019FE  0100               	movlb	0	; () banked
   849  001A00  25F5               	addwf	sensorUpdate@j& (0+255),w,b
   850  001A02  6EF6               	movwf	tblptrl,c
   851  001A04  0E10               	movlw	high _sensorLocation
   852  001A06  21F6               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   853  001A08  6EF7               	movwf	tblptrh,c
   854  001A0A                     	if	0	;There are less than 3 active tblptr bytes
   855  001A0A                     	endif
   856  001A0A  0008               	tblrd		*
   857  001A0C  CFF5 FFC2          	movff	tablat,4034	;volatile
   858                           
   859                           ; BSR set to: 0
   860                           ;user.c: 180: ADCON0bits.GO_DONE = 1;
   861  001A10  82C2               	bsf	4034,1,c	;volatile
   862                           
   863                           ;user.c: 181: while(ADCON0bits.GO_DONE != 0);
   864  001A12  D000               	goto	l375
   865  001A14                     l375:
   866                           
   867                           ; BSR set to: 0
   868  001A14  B2C2               	btfsc	4034,1,c	;volatile
   869  001A16  D7FE               	goto	l375
   870                           
   871                           ; BSR set to: 0
   872                           ;user.c: 182: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   873                           
   874                           ; BSR set to: 0
   875  001A18  CFC3 F09C          	movff	4035,??_sensorUpdate	;volatile
   876  001A1C  0E06               	movlw	6
   877  001A1E  0100               	movlb	0	; () banked
   878  001A20  6F9D               	movwf	(??_sensorUpdate+1)& (0+255),b
   879  001A22                     u2305:
   880  001A22  0100               	movlb	0	; () banked
   881  001A24  90D8               	bcf	status,0,c
   882  001A26  339C               	rrcf	??_sensorUpdate& (0+255),f,b
   883  001A28  0100               	movlb	0	; () banked
   884  001A2A  2F9D               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   885  001A2C  D7FA               	goto	u2305
   886  001A2E  0100               	movlb	0	; () banked
   887  001A30  519C               	movf	??_sensorUpdate& (0+255),w,b
   888  001A32  CFC4 F09E          	movff	4036,??_sensorUpdate+2	;volatile
   889  001A36  0100               	movlb	0	; () banked
   890  001A38  6B9F               	clrf	(??_sensorUpdate+3)& (0+255),b
   891  001A3A  0100               	movlb	0	; () banked
   892  001A3C  90D8               	bcf	status,0,c
   893  001A3E  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   894  001A40  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   895  001A42  0100               	movlb	0	; () banked
   896  001A44  90D8               	bcf	status,0,c
   897  001A46  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   898  001A48  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   899  001A4A  0100               	movlb	0	; () banked
   900  001A4C  279E               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   901  001A4E  0E00               	movlw	0
   902  001A50  239F               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   903  001A52  C0F5  F080         	movff	sensorUpdate@j,___wmul@multiplier
   904  001A56  C0F6  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   905  001A5A  0E00               	movlw	0
   906  001A5C  0100               	movlb	0	; () banked
   907  001A5E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   908  001A60  0E14               	movlw	20
   909  001A62  6F82               	movwf	___wmul@multiplicand& (0+255),b
   910  001A64  EC75  F00F         	call	___wmul	;wreg free
   911  001A68  0EA2               	movlw	low sensorUpdate@sensorTemp
   912  001A6A  0100               	movlb	0	; () banked
   913  001A6C  6FA0               	movwf	(??_sensorUpdate+4)& (0+255),b
   914  001A6E  0E00               	movlw	high sensorUpdate@sensorTemp
   915  001A70  0100               	movlb	0	; () banked
   916  001A72  6FA1               	movwf	(??_sensorUpdate+5)& (0+255),b
   917  001A74  0100               	movlb	0	; () banked
   918  001A76  5180               	movf	?___wmul& (0+255),w,b
   919  001A78  0100               	movlb	0	; () banked
   920  001A7A  27A0               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   921  001A7C  0100               	movlb	0	; () banked
   922  001A7E  5181               	movf	(?___wmul+1)& (0+255),w,b
   923  001A80  0100               	movlb	0	; () banked
   924  001A82  23A1               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   925  001A84  90D8               	bcf	status,0,c
   926  001A86  0100               	movlb	0	; () banked
   927  001A88  35F3               	rlcf	sensorUpdate@i& (0+255),w,b
   928  001A8A  6ED9               	movwf	fsr2l,c
   929  001A8C  0100               	movlb	0	; () banked
   930  001A8E  35F4               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   931  001A90  6EDA               	movwf	fsr2h,c
   932  001A92  0100               	movlb	0	; () banked
   933  001A94  51A0               	movf	(??_sensorUpdate+4)& (0+255),w,b
   934  001A96  26D9               	addwf	fsr2l,f,c
   935  001A98  0100               	movlb	0	; () banked
   936  001A9A  51A1               	movf	(??_sensorUpdate+5)& (0+255),w,b
   937  001A9C  22DA               	addwfc	fsr2h,f,c
   938  001A9E  C09E  FFDE         	movff	??_sensorUpdate+2,postinc2
   939  001AA2  C09F  FFDD         	movff	??_sensorUpdate+3,postdec2
   940                           
   941                           ; BSR set to: 0
   942  001AA6  0100               	movlb	0	; () banked
   943  001AA8  4BF5               	infsnz	sensorUpdate@j& (0+255),f,b
   944  001AAA  2BF6               	incf	(sensorUpdate@j+1)& (0+255),f,b
   945  001AAC  D79A               	goto	l2210
   946                           
   947                           ; BSR set to: 0
   948  001AAE  D000               	goto	l2224
   949  001AB0                     l2224:
   950                           
   951                           ; BSR set to: 0
   952  001AB0  0100               	movlb	0	; () banked
   953  001AB2  4BF3               	infsnz	sensorUpdate@i& (0+255),f,b
   954  001AB4  2BF4               	incf	(sensorUpdate@i+1)& (0+255),f,b
   955  001AB6  D783               	goto	l2204
   956                           
   957                           ; BSR set to: 0
   958  001AB8  D000               	goto	l2228
   959  001ABA                     l2228:
   960                           
   961                           ; BSR set to: 0
   962                           ;user.c: 183: }
   963                           ;user.c: 184: }
   964                           ;user.c: 187: sensorComputation(sensorTemp,getCorrection);
   965  001ABA  0EA2               	movlw	low sensorUpdate@sensorTemp
   966  001ABC  0100               	movlb	0	; () banked
   967  001ABE  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   968  001AC0  0E00               	movlw	high sensorUpdate@sensorTemp
   969  001AC2  0100               	movlb	0	; () banked
   970  001AC4  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   971  001AC6  C0F2  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   972  001ACA  EC03  F008         	call	_sensorComputation	;wreg free
   973  001ACE  0012               	return		;funcret
   974  001AD0                     __end_of_sensorUpdate:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           intcon	equ	0xFF2
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1l	equ	0xFE1
   985                           postinc2	equ	0xFDE
   986                           postdec2	equ	0xFDD
   987                           fsr2h	equ	0xFDA
   988                           fsr2l	equ	0xFD9
   989                           status	equ	0xFD8
   990                           
   991 ;; *************** function _sensorComputation *****************
   992 ;; Defined at:
   993 ;;		line 137 in file "user.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   996 ;;		 -> sensorUpdate@sensorTemp(80), 
   997 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  i               2   26[BANK0 ] int 
  1000 ;;  j               2   24[BANK0 ] int 
  1001 ;;  sum             2   22[BANK0 ] int 
  1002 ;;  min             2   20[BANK0 ] int 
  1003 ;;  max             2   18[BANK0 ] int 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;		None               void
  1006 ;; Registers used:
  1007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1016 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1017 ;;Total ram usage:       17 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    6
  1020 ;; This function calls:
  1021 ;;		_MAX
  1022 ;;		_MIN
  1023 ;;		___awdiv
  1024 ;;		___wmul
  1025 ;; This function is called by:
  1026 ;;		_sensorUpdate
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text3
  1031  001006                     __ptext3:
  1032                           	opt stack 0
  1033  001006                     _sensorComputation:
  1034                           	opt stack 23
  1035                           
  1036                           ;user.c: 139: int max,min,i,j,sum;
  1037                           ;user.c: 140: for(i = 0; i < 4 ; i++)
  1038                           
  1039                           ;incstack = 0
  1040  001006  0E00               	movlw	0
  1041  001008  0100               	movlb	0	; () banked
  1042  00100A  6F9B               	movwf	(sensorComputation@i+1)& (0+255),b
  1043  00100C  0E00               	movlw	0
  1044  00100E  6F9A               	movwf	sensorComputation@i& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047  001010  0100               	movlb	0	; () banked
  1048  001012  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1049  001014  D00A               	goto	l2144
  1050  001016  0100               	movlb	0	; () banked
  1051  001018  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
  1052  00101A  E106               	bnz	u2170
  1053  00101C  0E04               	movlw	4
  1054  00101E  0100               	movlb	0	; () banked
  1055  001020  5D9A               	subwf	sensorComputation@i& (0+255),w,b
  1056  001022  B0D8               	btfsc	status,0,c
  1057  001024  D1D3               	goto	l368
  1058  001026  D001               	goto	l2144
  1059  001028                     u2170:
  1060                           
  1061                           ; BSR set to: 0
  1062  001028  D1D1               	goto	l368
  1063  00102A                     l2144:
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;user.c: 141: {
  1067                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1068  00102A  0E00               	movlw	0
  1069  00102C  0100               	movlb	0	; () banked
  1070  00102E  6F99               	movwf	(sensorComputation@j+1)& (0+255),b
  1071  001030  0E00               	movlw	0
  1072  001032  6F98               	movwf	sensorComputation@j& (0+255),b
  1073                           
  1074                           ; BSR set to: 0
  1075  001034  0100               	movlb	0	; () banked
  1076  001036  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1077  001038  D00A               	goto	l2150
  1078  00103A  0100               	movlb	0	; () banked
  1079  00103C  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1080  00103E  E106               	bnz	u2180
  1081  001040  0E0A               	movlw	10
  1082  001042  0100               	movlb	0	; () banked
  1083  001044  5D98               	subwf	sensorComputation@j& (0+255),w,b
  1084  001046  B0D8               	btfsc	status,0,c
  1085  001048  D0D3               	goto	l2160
  1086  00104A  D001               	goto	l2150
  1087  00104C                     u2180:
  1088                           
  1089                           ; BSR set to: 0
  1090  00104C  D0D1               	goto	l2160
  1091  00104E                     l2150:
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;user.c: 143: {
  1095                           ;user.c: 144: if(j == 0)
  1096  00104E  0100               	movlb	0	; () banked
  1097  001050  5198               	movf	sensorComputation@j& (0+255),w,b
  1098  001052  0100               	movlb	0	; () banked
  1099  001054  1199               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1100  001056  A4D8               	btfss	status,2,c
  1101  001058  D031               	goto	l2154
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;user.c: 145: {
  1105                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1106  00105A  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1107  00105E  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1108  001062  0E00               	movlw	0
  1109  001064  0100               	movlb	0	; () banked
  1110  001066  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1111  001068  0E14               	movlw	20
  1112  00106A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1113  00106C  EC75  F00F         	call	___wmul	;wreg free
  1114  001070  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1115  001074  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1116  001078  0100               	movlb	0	; () banked
  1117  00107A  5180               	movf	?___wmul& (0+255),w,b
  1118  00107C  0100               	movlb	0	; () banked
  1119  00107E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1120  001080  0100               	movlb	0	; () banked
  1121  001082  5181               	movf	(?___wmul+1)& (0+255),w,b
  1122  001084  0100               	movlb	0	; () banked
  1123  001086  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1124  001088  90D8               	bcf	status,0,c
  1125  00108A  0100               	movlb	0	; () banked
  1126  00108C  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1127  00108E  6ED9               	movwf	fsr2l,c
  1128  001090  0100               	movlb	0	; () banked
  1129  001092  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1130  001094  6EDA               	movwf	fsr2h,c
  1131  001096  0100               	movlb	0	; () banked
  1132  001098  518E               	movf	??_sensorComputation& (0+255),w,b
  1133  00109A  26D9               	addwf	fsr2l,f,c
  1134  00109C  0100               	movlb	0	; () banked
  1135  00109E  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1136  0010A0  22DA               	addwfc	fsr2h,f,c
  1137  0010A2  CFDE F092          	movff	postinc2,sensorComputation@max
  1138  0010A6  CFDD F093          	movff	postdec2,sensorComputation@max+1
  1139  0010AA  C092  F094         	movff	sensorComputation@max,sensorComputation@min
  1140  0010AE  C093  F095         	movff	sensorComputation@max+1,sensorComputation@min+1
  1141  0010B2  C094  F096         	movff	sensorComputation@min,sensorComputation@sum
  1142  0010B6  C095  F097         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1143                           
  1144                           ;user.c: 147: continue;
  1145  0010BA  D08F               	goto	l2156
  1146  0010BC                     l2154:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;user.c: 148: }
  1150                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1151  0010BC  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1152  0010C0  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1153  0010C4  0E00               	movlw	0
  1154  0010C6  0100               	movlb	0	; () banked
  1155  0010C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1156  0010CA  0E14               	movlw	20
  1157  0010CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1158  0010CE  EC75  F00F         	call	___wmul	;wreg free
  1159  0010D2  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1160  0010D6  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1161  0010DA  0100               	movlb	0	; () banked
  1162  0010DC  5180               	movf	?___wmul& (0+255),w,b
  1163  0010DE  0100               	movlb	0	; () banked
  1164  0010E0  278E               	addwf	??_sensorComputation& (0+255),f,b
  1165  0010E2  0100               	movlb	0	; () banked
  1166  0010E4  5181               	movf	(?___wmul+1)& (0+255),w,b
  1167  0010E6  0100               	movlb	0	; () banked
  1168  0010E8  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1169  0010EA  90D8               	bcf	status,0,c
  1170  0010EC  0100               	movlb	0	; () banked
  1171  0010EE  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1172  0010F0  6ED9               	movwf	fsr2l,c
  1173  0010F2  0100               	movlb	0	; () banked
  1174  0010F4  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1175  0010F6  6EDA               	movwf	fsr2h,c
  1176  0010F8  0100               	movlb	0	; () banked
  1177  0010FA  518E               	movf	??_sensorComputation& (0+255),w,b
  1178  0010FC  26D9               	addwf	fsr2l,f,c
  1179  0010FE  0100               	movlb	0	; () banked
  1180  001100  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1181  001102  22DA               	addwfc	fsr2h,f,c
  1182  001104  CFDE F086          	movff	postinc2,MIN@a
  1183  001108  CFDD F087          	movff	postdec2,MIN@a+1
  1184  00110C  C094  F088         	movff	sensorComputation@min,MIN@b
  1185  001110  C095  F089         	movff	sensorComputation@min+1,MIN@b+1
  1186  001114  EC91  F00F         	call	_MIN	;wreg free
  1187  001118  C086  F094         	movff	?_MIN,sensorComputation@min
  1188  00111C  C087  F095         	movff	?_MIN+1,sensorComputation@min+1
  1189                           
  1190                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1191  001120  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1192  001124  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1193  001128  0E00               	movlw	0
  1194  00112A  0100               	movlb	0	; () banked
  1195  00112C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1196  00112E  0E14               	movlw	20
  1197  001130  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1198  001132  EC75  F00F         	call	___wmul	;wreg free
  1199  001136  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1200  00113A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1201  00113E  0100               	movlb	0	; () banked
  1202  001140  5180               	movf	?___wmul& (0+255),w,b
  1203  001142  0100               	movlb	0	; () banked
  1204  001144  278E               	addwf	??_sensorComputation& (0+255),f,b
  1205  001146  0100               	movlb	0	; () banked
  1206  001148  5181               	movf	(?___wmul+1)& (0+255),w,b
  1207  00114A  0100               	movlb	0	; () banked
  1208  00114C  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1209  00114E  90D8               	bcf	status,0,c
  1210  001150  0100               	movlb	0	; () banked
  1211  001152  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1212  001154  6ED9               	movwf	fsr2l,c
  1213  001156  0100               	movlb	0	; () banked
  1214  001158  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1215  00115A  6EDA               	movwf	fsr2h,c
  1216  00115C  0100               	movlb	0	; () banked
  1217  00115E  518E               	movf	??_sensorComputation& (0+255),w,b
  1218  001160  26D9               	addwf	fsr2l,f,c
  1219  001162  0100               	movlb	0	; () banked
  1220  001164  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1221  001166  22DA               	addwfc	fsr2h,f,c
  1222  001168  CFDE F086          	movff	postinc2,MAX@a
  1223  00116C  CFDD F087          	movff	postdec2,MAX@a+1
  1224  001170  C092  F088         	movff	sensorComputation@max,MAX@b
  1225  001174  C093  F089         	movff	sensorComputation@max+1,MAX@b+1
  1226  001178  ECAB  F00F         	call	_MAX	;wreg free
  1227  00117C  C086  F092         	movff	?_MAX,sensorComputation@max
  1228  001180  C087  F093         	movff	?_MAX+1,sensorComputation@max+1
  1229                           
  1230                           ;user.c: 151: sum += sensorTemp[i][j];
  1231  001184  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1232  001188  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1233  00118C  0E00               	movlw	0
  1234  00118E  0100               	movlb	0	; () banked
  1235  001190  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1236  001192  0E14               	movlw	20
  1237  001194  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1238  001196  EC75  F00F         	call	___wmul	;wreg free
  1239  00119A  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1240  00119E  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1241  0011A2  0100               	movlb	0	; () banked
  1242  0011A4  5180               	movf	?___wmul& (0+255),w,b
  1243  0011A6  0100               	movlb	0	; () banked
  1244  0011A8  278E               	addwf	??_sensorComputation& (0+255),f,b
  1245  0011AA  0100               	movlb	0	; () banked
  1246  0011AC  5181               	movf	(?___wmul+1)& (0+255),w,b
  1247  0011AE  0100               	movlb	0	; () banked
  1248  0011B0  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1249  0011B2  90D8               	bcf	status,0,c
  1250  0011B4  0100               	movlb	0	; () banked
  1251  0011B6  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1252  0011B8  6ED9               	movwf	fsr2l,c
  1253  0011BA  0100               	movlb	0	; () banked
  1254  0011BC  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1255  0011BE  6EDA               	movwf	fsr2h,c
  1256  0011C0  0100               	movlb	0	; () banked
  1257  0011C2  518E               	movf	??_sensorComputation& (0+255),w,b
  1258  0011C4  26D9               	addwf	fsr2l,f,c
  1259  0011C6  0100               	movlb	0	; () banked
  1260  0011C8  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1261  0011CA  22DA               	addwfc	fsr2h,f,c
  1262  0011CC  50DE               	movf	postinc2,w,c
  1263  0011CE  0100               	movlb	0	; () banked
  1264  0011D0  2796               	addwf	sensorComputation@sum& (0+255),f,b
  1265  0011D2  50DD               	movf	postdec2,w,c
  1266  0011D4  0100               	movlb	0	; () banked
  1267  0011D6  2397               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1268  0011D8  D000               	goto	l2156
  1269  0011DA                     l2156:
  1270                           
  1271                           ; BSR set to: 0
  1272  0011DA  0100               	movlb	0	; () banked
  1273  0011DC  4B98               	infsnz	sensorComputation@j& (0+255),f,b
  1274  0011DE  2B99               	incf	(sensorComputation@j+1)& (0+255),f,b
  1275                           
  1276                           ; BSR set to: 0
  1277  0011E0  0100               	movlb	0	; () banked
  1278  0011E2  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1279  0011E4  D734               	goto	l2150
  1280  0011E6  0100               	movlb	0	; () banked
  1281  0011E8  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1282  0011EA  E102               	bnz	l2160
  1283  0011EC  D729               	goto	L2
  1284  0011EE  D000               	goto	l2160
  1285  0011F0                     l2160:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;user.c: 152: }
  1289                           ;user.c: 153: sum = sum - min - max;
  1290  0011F0  0100               	movlb	0	; () banked
  1291  0011F2  5192               	movf	sensorComputation@max& (0+255),w,b
  1292  0011F4  0100               	movlb	0	; () banked
  1293  0011F6  2594               	addwf	sensorComputation@min& (0+255),w,b
  1294  0011F8  0100               	movlb	0	; () banked
  1295  0011FA  6F8E               	movwf	??_sensorComputation& (0+255),b
  1296  0011FC  0100               	movlb	0	; () banked
  1297  0011FE  5193               	movf	(sensorComputation@max+1)& (0+255),w,b
  1298  001200  0100               	movlb	0	; () banked
  1299  001202  2195               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1300  001204  0100               	movlb	0	; () banked
  1301  001206  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1302  001208  0100               	movlb	0	; () banked
  1303  00120A  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1304  00120C  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1305  00120E  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1306  001210  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1307  001212  0100               	movlb	0	; () banked
  1308  001214  5196               	movf	sensorComputation@sum& (0+255),w,b
  1309  001216  0100               	movlb	0	; () banked
  1310  001218  258E               	addwf	??_sensorComputation& (0+255),w,b
  1311  00121A  0100               	movlb	0	; () banked
  1312  00121C  6F96               	movwf	sensorComputation@sum& (0+255),b
  1313  00121E  0100               	movlb	0	; () banked
  1314  001220  5197               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1315  001222  0100               	movlb	0	; () banked
  1316  001224  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1317  001226  0100               	movlb	0	; () banked
  1318  001228  6F97               	movwf	(sensorComputation@sum+1)& (0+255),b
  1319                           
  1320                           ;user.c: 154: if(getCorrection == 1)
  1321  00122A  0100               	movlb	0	; () banked
  1322  00122C  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1323  00122E  A4D8               	btfss	status,2,c
  1324  001230  D01D               	goto	l2164
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1328  001232  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1329  001236  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1330  00123A  0E00               	movlw	0
  1331  00123C  0100               	movlb	0	; () banked
  1332  00123E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1333  001240  0E08               	movlw	8
  1334  001242  6F82               	movwf	___awdiv@divisor& (0+255),b
  1335  001244  EC63  F00E         	call	___awdiv	;wreg free
  1336  001248  90D8               	bcf	status,0,c
  1337  00124A  0100               	movlb	0	; () banked
  1338  00124C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1339  00124E  6ED9               	movwf	fsr2l,c
  1340  001250  0100               	movlb	0	; () banked
  1341  001252  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1342  001254  6EDA               	movwf	fsr2h,c
  1343  001256  0E01               	movlw	low _sensorValue
  1344  001258  26D9               	addwf	fsr2l,f,c
  1345  00125A  0E00               	movlw	high _sensorValue
  1346  00125C  22DA               	addwfc	fsr2h,f,c
  1347  00125E  0100               	movlb	0	; () banked
  1348  001260  C080  FFDE         	movff	?___awdiv,postinc2
  1349  001264  0100               	movlb	0	; () banked
  1350  001266  C081  FFDD         	movff	?___awdiv+1,postdec2
  1351  00126A  D0A5               	goto	l2178
  1352  00126C                     l2164:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;user.c: 156: else
  1356                           ;user.c: 157: {
  1357                           ;user.c: 158: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1358  00126C  90D8               	bcf	status,0,c
  1359  00126E  0100               	movlb	0	; () banked
  1360  001270  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1361  001272  6ED9               	movwf	fsr2l,c
  1362  001274  0100               	movlb	0	; () banked
  1363  001276  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1364  001278  6EDA               	movwf	fsr2h,c
  1365  00127A  0EF7               	movlw	low _sensorCorrection
  1366  00127C  26D9               	addwf	fsr2l,f,c
  1367  00127E  0E00               	movlw	high _sensorCorrection
  1368  001280  22DA               	addwfc	fsr2h,f,c
  1369  001282  CFDE F08E          	movff	postinc2,??_sensorComputation
  1370  001286  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1371  00128A  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1372  00128E  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1373  001292  0E00               	movlw	0
  1374  001294  0100               	movlb	0	; () banked
  1375  001296  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1376  001298  0E08               	movlw	8
  1377  00129A  6F82               	movwf	___awdiv@divisor& (0+255),b
  1378  00129C  EC63  F00E         	call	___awdiv	;wreg free
  1379  0012A0  0100               	movlb	0	; () banked
  1380  0012A2  518E               	movf	??_sensorComputation& (0+255),w,b
  1381  0012A4  0100               	movlb	0	; () banked
  1382  0012A6  2780               	addwf	?___awdiv& (0+255),f,b
  1383  0012A8  0100               	movlb	0	; () banked
  1384  0012AA  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1385  0012AC  0100               	movlb	0	; () banked
  1386  0012AE  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1387  0012B0  90D8               	bcf	status,0,c
  1388  0012B2  0100               	movlb	0	; () banked
  1389  0012B4  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1390  0012B6  6ED9               	movwf	fsr2l,c
  1391  0012B8  0100               	movlb	0	; () banked
  1392  0012BA  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1393  0012BC  6EDA               	movwf	fsr2h,c
  1394  0012BE  0E01               	movlw	low _sensorValue
  1395  0012C0  26D9               	addwf	fsr2l,f,c
  1396  0012C2  0E00               	movlw	high _sensorValue
  1397  0012C4  22DA               	addwfc	fsr2h,f,c
  1398  0012C6  0100               	movlb	0	; () banked
  1399  0012C8  C080  FFDE         	movff	?___awdiv,postinc2
  1400  0012CC  0100               	movlb	0	; () banked
  1401  0012CE  C081  FFDD         	movff	?___awdiv+1,postdec2
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;user.c: 159: if( i == 3)
  1405  0012D2  0E03               	movlw	3
  1406  0012D4  0100               	movlb	0	; () banked
  1407  0012D6  199A               	xorwf	sensorComputation@i& (0+255),w,b
  1408  0012D8  0100               	movlb	0	; () banked
  1409  0012DA  119B               	iorwf	(sensorComputation@i+1)& (0+255),w,b
  1410  0012DC  A4D8               	btfss	status,2,c
  1411  0012DE  D06B               	goto	l2178
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;user.c: 160: {
  1415                           ;user.c: 161: if(sensorValue[i] > 350 && sensorValue[i] <= 450) sensorValue[i] = sensorV
      +                          alue[i] - 40;
  1416  0012E0  90D8               	bcf	status,0,c
  1417  0012E2  0100               	movlb	0	; () banked
  1418  0012E4  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1419  0012E6  6ED9               	movwf	fsr2l,c
  1420  0012E8  0100               	movlb	0	; () banked
  1421  0012EA  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1422  0012EC  6EDA               	movwf	fsr2h,c
  1423  0012EE  0E01               	movlw	low _sensorValue
  1424  0012F0  26D9               	addwf	fsr2l,f,c
  1425  0012F2  0E00               	movlw	high _sensorValue
  1426  0012F4  22DA               	addwfc	fsr2h,f,c
  1427  0012F6  0E01               	movlw	1
  1428  0012F8  BEDB               	btfsc	plusw2,7,c
  1429  0012FA  D01C               	goto	l2174
  1430  0012FC  0E5F               	movlw	95
  1431  0012FE  5CDE               	subwf	postinc2,w,c
  1432  001300  0E01               	movlw	1
  1433  001302  58DE               	subwfb	postinc2,w,c
  1434  001304  A0D8               	btfss	status,0,c
  1435  001306  D016               	goto	l2174
  1436                           
  1437                           ; BSR set to: 0
  1438  001308  90D8               	bcf	status,0,c
  1439  00130A  0100               	movlb	0	; () banked
  1440  00130C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1441  00130E  6ED9               	movwf	fsr2l,c
  1442  001310  0100               	movlb	0	; () banked
  1443  001312  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1444  001314  6EDA               	movwf	fsr2h,c
  1445  001316  0E01               	movlw	low _sensorValue
  1446  001318  26D9               	addwf	fsr2l,f,c
  1447  00131A  0E00               	movlw	high _sensorValue
  1448  00131C  22DA               	addwfc	fsr2h,f,c
  1449  00131E  0E01               	movlw	1
  1450  001320  BEDB               	btfsc	plusw2,7,c
  1451  001322  D006               	goto	l2172
  1452  001324  0EC3               	movlw	195
  1453  001326  5CDE               	subwf	postinc2,w,c
  1454  001328  0E01               	movlw	1
  1455  00132A  58DE               	subwfb	postinc2,w,c
  1456  00132C  B0D8               	btfsc	status,0,c
  1457  00132E  D002               	goto	l2174
  1458  001330                     l2172:
  1459                           
  1460                           ; BSR set to: 0
  1461  001330  0ED8               	movlw	216
  1462  001332  D015               	goto	L3
  1463  001334                     l2174:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;user.c: 162: else if(sensorValue[i] > 450) sensorValue[i] = sensorValue[i] - 60;
  1467  001334  90D8               	bcf	status,0,c
  1468  001336  0100               	movlb	0	; () banked
  1469  001338  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1470  00133A  6ED9               	movwf	fsr2l,c
  1471  00133C  0100               	movlb	0	; () banked
  1472  00133E  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1473  001340  6EDA               	movwf	fsr2h,c
  1474  001342  0E01               	movlw	low _sensorValue
  1475  001344  26D9               	addwf	fsr2l,f,c
  1476  001346  0E00               	movlw	high _sensorValue
  1477  001348  22DA               	addwfc	fsr2h,f,c
  1478  00134A  0E01               	movlw	1
  1479  00134C  BEDB               	btfsc	plusw2,7,c
  1480  00134E  D033               	goto	l2178
  1481  001350  0EC3               	movlw	195
  1482  001352  5CDE               	subwf	postinc2,w,c
  1483  001354  0E01               	movlw	1
  1484  001356  58DE               	subwfb	postinc2,w,c
  1485  001358  A0D8               	btfss	status,0,c
  1486  00135A  D02D               	goto	l2178
  1487                           
  1488                           ; BSR set to: 0
  1489  00135C  0EC4               	movlw	196
  1490  00135E                     L3:
  1491  00135E  0100               	movlb	0	; () banked
  1492  001360  6F8E               	movwf	??_sensorComputation& (0+255),b
  1493  001362  0EFF               	movlw	255
  1494  001364  0100               	movlb	0	; () banked
  1495  001366  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1496  001368  90D8               	bcf	status,0,c
  1497  00136A  0100               	movlb	0	; () banked
  1498  00136C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1499  00136E  6ED9               	movwf	fsr2l,c
  1500  001370  0100               	movlb	0	; () banked
  1501  001372  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1502  001374  6EDA               	movwf	fsr2h,c
  1503  001376  0E01               	movlw	low _sensorValue
  1504  001378  26D9               	addwf	fsr2l,f,c
  1505  00137A  0E00               	movlw	high _sensorValue
  1506  00137C  22DA               	addwfc	fsr2h,f,c
  1507  00137E  CFDE F090          	movff	postinc2,??_sensorComputation+2
  1508  001382  CFDD F091          	movff	postdec2,??_sensorComputation+3
  1509  001386  0100               	movlb	0	; () banked
  1510  001388  518E               	movf	??_sensorComputation& (0+255),w,b
  1511  00138A  0100               	movlb	0	; () banked
  1512  00138C  2790               	addwf	(??_sensorComputation+2)& (0+255),f,b
  1513  00138E  0100               	movlb	0	; () banked
  1514  001390  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1515  001392  0100               	movlb	0	; () banked
  1516  001394  2391               	addwfc	(??_sensorComputation+3)& (0+255),f,b
  1517  001396  90D8               	bcf	status,0,c
  1518  001398  0100               	movlb	0	; () banked
  1519  00139A  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1520  00139C  6ED9               	movwf	fsr2l,c
  1521  00139E  0100               	movlb	0	; () banked
  1522  0013A0  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1523  0013A2  6EDA               	movwf	fsr2h,c
  1524  0013A4  0E01               	movlw	low _sensorValue
  1525  0013A6  26D9               	addwf	fsr2l,f,c
  1526  0013A8  0E00               	movlw	high _sensorValue
  1527  0013AA  22DA               	addwfc	fsr2h,f,c
  1528  0013AC  C090  FFDE         	movff	??_sensorComputation+2,postinc2
  1529  0013B0  C091  FFDD         	movff	??_sensorComputation+3,postdec2
  1530                           
  1531                           ; BSR set to: 0
  1532                           
  1533                           ; BSR set to: 0
  1534                           
  1535                           ; BSR set to: 0
  1536  0013B4  D000               	goto	l2178
  1537  0013B6                     l2178:
  1538                           
  1539                           ; BSR set to: 0
  1540  0013B6  0100               	movlb	0	; () banked
  1541  0013B8  4B9A               	infsnz	sensorComputation@i& (0+255),f,b
  1542  0013BA  2B9B               	incf	(sensorComputation@i+1)& (0+255),f,b
  1543                           
  1544                           ; BSR set to: 0
  1545  0013BC  0100               	movlb	0	; () banked
  1546  0013BE  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1547  0013C0  D634               	goto	l2144
  1548  0013C2  0100               	movlb	0	; () banked
  1549  0013C4  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
  1550  0013C6  E102               	bnz	l368
  1551  0013C8  D629               	goto	L4
  1552  0013CA  D000               	goto	l368
  1553  0013CC                     l368:
  1554                           
  1555                           ; BSR set to: 0
  1556  0013CC  0012               	return		;funcret
  1557  0013CE                     __end_of_sensorComputation:
  1558                           	opt stack 0
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           intcon	equ	0xFF2
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1l	equ	0xFE1
  1568                           postinc2	equ	0xFDE
  1569                           postdec2	equ	0xFDD
  1570                           plusw2	equ	0xFDB
  1571                           fsr2h	equ	0xFDA
  1572                           fsr2l	equ	0xFD9
  1573                           status	equ	0xFD8
  1574                           
  1575 ;; *************** function ___wmul *****************
  1576 ;; Defined at:
  1577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1580 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  product         2    4[BANK0 ] unsigned int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  2    0[BANK0 ] unsigned int 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0, prodl, prodh
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;Total ram usage:        6 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    5
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_sensorComputation
  1603 ;;		_sensorUpdate
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text4
  1608  001EEA                     __ptext4:
  1609                           	opt stack 0
  1610  001EEA                     ___wmul:
  1611                           	opt stack 23
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;incstack = 0
  1615  001EEA  0100               	movlb	0	; () banked
  1616  001EEC  5180               	movf	___wmul@multiplier& (0+255),w,b
  1617  001EEE  0100               	movlb	0	; () banked
  1618  001EF0  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1619  001EF2  CFF3 F084          	movff	prodl,___wmul@product
  1620  001EF6  CFF4 F085          	movff	prodh,___wmul@product+1
  1621  001EFA  0100               	movlb	0	; () banked
  1622  001EFC  5180               	movf	___wmul@multiplier& (0+255),w,b
  1623  001EFE  0100               	movlb	0	; () banked
  1624  001F00  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1625  001F02  50F3               	movf	prodl,w,c
  1626  001F04  0100               	movlb	0	; () banked
  1627  001F06  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1628  001F08  0100               	movlb	0	; () banked
  1629  001F0A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1630  001F0C  0100               	movlb	0	; () banked
  1631  001F0E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1632  001F10  50F3               	movf	prodl,w,c
  1633  001F12  0100               	movlb	0	; () banked
  1634  001F14  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 0
  1637  001F16  C084  F080         	movff	___wmul@product,?___wmul
  1638  001F1A  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1639  001F1E  D000               	goto	l389
  1640  001F20                     l389:
  1641                           
  1642                           ; BSR set to: 0
  1643  001F20  0012               	return		;funcret
  1644  001F22                     __end_of___wmul:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           intcon	equ	0xFF2
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1l	equ	0xFE1
  1657                           postinc2	equ	0xFDE
  1658                           postdec2	equ	0xFDD
  1659                           plusw2	equ	0xFDB
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function ___awdiv *****************
  1665 ;; Defined at:
  1666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  dividend        2    0[BANK0 ] int 
  1669 ;;  divisor         2    2[BANK0 ] int 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  quotient        2    6[BANK0 ] int 
  1672 ;;  sign            1    5[BANK0 ] unsigned char 
  1673 ;;  counter         1    4[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2    0[BANK0 ] int 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:        8 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    5
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_setCorrection
  1694 ;;		_sensorComputation
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text5
  1699  001CC6                     __ptext5:
  1700                           	opt stack 0
  1701  001CC6                     ___awdiv:
  1702                           	opt stack 24
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;incstack = 0
  1706  001CC6  0E00               	movlw	0
  1707  001CC8  0100               	movlb	0	; () banked
  1708  001CCA  6F85               	movwf	___awdiv@sign& (0+255),b
  1709                           
  1710                           ; BSR set to: 0
  1711  001CCC  0100               	movlb	0	; () banked
  1712  001CCE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1713  001CD0  D009               	goto	l2086
  1714                           
  1715                           ; BSR set to: 0
  1716  001CD2  0100               	movlb	0	; () banked
  1717  001CD4  6D82               	negf	___awdiv@divisor& (0+255),b
  1718  001CD6  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1719  001CD8  B0D8               	btfsc	status,0,c
  1720  001CDA  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1721                           
  1722                           ; BSR set to: 0
  1723  001CDC  0E01               	movlw	1
  1724  001CDE  0100               	movlb	0	; () banked
  1725  001CE0  6F85               	movwf	___awdiv@sign& (0+255),b
  1726  001CE2  D000               	goto	l2086
  1727  001CE4                     l2086:
  1728                           
  1729                           ; BSR set to: 0
  1730  001CE4  0100               	movlb	0	; () banked
  1731  001CE6  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1732  001CE8  D009               	goto	l2092
  1733                           
  1734                           ; BSR set to: 0
  1735  001CEA  0100               	movlb	0	; () banked
  1736  001CEC  6D80               	negf	___awdiv@dividend& (0+255),b
  1737  001CEE  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1738  001CF0  B0D8               	btfsc	status,0,c
  1739  001CF2  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1740                           
  1741                           ; BSR set to: 0
  1742  001CF4  0E01               	movlw	1
  1743  001CF6  0100               	movlb	0	; () banked
  1744  001CF8  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1745  001CFA  D000               	goto	l2092
  1746  001CFC                     l2092:
  1747                           
  1748                           ; BSR set to: 0
  1749  001CFC  0E00               	movlw	0
  1750  001CFE  0100               	movlb	0	; () banked
  1751  001D00  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1752  001D02  0E00               	movlw	0
  1753  001D04  6F86               	movwf	___awdiv@quotient& (0+255),b
  1754                           
  1755                           ; BSR set to: 0
  1756  001D06  0100               	movlb	0	; () banked
  1757  001D08  5182               	movf	___awdiv@divisor& (0+255),w,b
  1758  001D0A  0100               	movlb	0	; () banked
  1759  001D0C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1760  001D0E  B4D8               	btfsc	status,2,c
  1761  001D10  D031               	goto	l2114
  1762                           
  1763                           ; BSR set to: 0
  1764  001D12  0E01               	movlw	1
  1765  001D14  0100               	movlb	0	; () banked
  1766  001D16  6F84               	movwf	___awdiv@counter& (0+255),b
  1767  001D18  D007               	goto	l2100
  1768  001D1A                     l2098:
  1769                           
  1770                           ; BSR set to: 0
  1771  001D1A  0100               	movlb	0	; () banked
  1772  001D1C  90D8               	bcf	status,0,c
  1773  001D1E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1774  001D20  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1775  001D22  0100               	movlb	0	; () banked
  1776  001D24  2B84               	incf	___awdiv@counter& (0+255),f,b
  1777  001D26  D000               	goto	l2100
  1778  001D28                     l2100:
  1779                           
  1780                           ; BSR set to: 0
  1781  001D28  0100               	movlb	0	; () banked
  1782  001D2A  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1783  001D2C  D002               	goto	l2102
  1784  001D2E  D7F5               	goto	l2098
  1785                           
  1786                           ; BSR set to: 0
  1787  001D30  D000               	goto	l2102
  1788  001D32                     l2102:
  1789                           
  1790                           ; BSR set to: 0
  1791  001D32  0100               	movlb	0	; () banked
  1792  001D34  90D8               	bcf	status,0,c
  1793  001D36  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1794  001D38  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1795                           
  1796                           ; BSR set to: 0
  1797  001D3A  0100               	movlb	0	; () banked
  1798  001D3C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1799  001D3E  0100               	movlb	0	; () banked
  1800  001D40  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1801  001D42  0100               	movlb	0	; () banked
  1802  001D44  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1803  001D46  0100               	movlb	0	; () banked
  1804  001D48  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1805  001D4A  A0D8               	btfss	status,0,c
  1806  001D4C  D00B               	goto	l2110
  1807                           
  1808                           ; BSR set to: 0
  1809  001D4E  0100               	movlb	0	; () banked
  1810  001D50  5182               	movf	___awdiv@divisor& (0+255),w,b
  1811  001D52  0100               	movlb	0	; () banked
  1812  001D54  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1813  001D56  0100               	movlb	0	; () banked
  1814  001D58  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1815  001D5A  0100               	movlb	0	; () banked
  1816  001D5C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1817                           
  1818                           ; BSR set to: 0
  1819  001D5E  0100               	movlb	0	; () banked
  1820  001D60  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1821  001D62  D000               	goto	l2110
  1822  001D64                     l2110:
  1823                           
  1824                           ; BSR set to: 0
  1825  001D64  0100               	movlb	0	; () banked
  1826  001D66  90D8               	bcf	status,0,c
  1827  001D68  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1828  001D6A  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1829                           
  1830                           ; BSR set to: 0
  1831  001D6C  0100               	movlb	0	; () banked
  1832  001D6E  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1833  001D70  D7E0               	goto	l2102
  1834                           
  1835                           ; BSR set to: 0
  1836  001D72  D000               	goto	l2114
  1837  001D74                     l2114:
  1838                           
  1839                           ; BSR set to: 0
  1840  001D74  0100               	movlb	0	; () banked
  1841  001D76  5185               	movf	___awdiv@sign& (0+255),w,b
  1842  001D78  0100               	movlb	0	; () banked
  1843  001D7A  B4D8               	btfsc	status,2,c
  1844  001D7C  D006               	goto	l2118
  1845                           
  1846                           ; BSR set to: 0
  1847  001D7E  0100               	movlb	0	; () banked
  1848  001D80  6D86               	negf	___awdiv@quotient& (0+255),b
  1849  001D82  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1850  001D84  B0D8               	btfsc	status,0,c
  1851  001D86  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1852  001D88  D000               	goto	l2118
  1853  001D8A                     l2118:
  1854                           
  1855                           ; BSR set to: 0
  1856  001D8A  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1857  001D8E  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1858  001D92  D000               	goto	l582
  1859  001D94                     l582:
  1860                           
  1861                           ; BSR set to: 0
  1862  001D94  0012               	return		;funcret
  1863  001D96                     __end_of___awdiv:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           prodh	equ	0xFF4
  1870                           prodl	equ	0xFF3
  1871                           intcon	equ	0xFF2
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           plusw2	equ	0xFDB
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _MIN *****************
  1884 ;; Defined at:
  1885 ;;		line 191 in file "user.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  a               2    6[BANK0 ] int 
  1888 ;;  b               2    8[BANK0 ] int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    6[BANK0 ] int 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:        5 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    5
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_sensorComputation
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text6
  1915  001F22                     __ptext6:
  1916                           	opt stack 0
  1917  001F22                     _MIN:
  1918                           	opt stack 23
  1919                           
  1920                           ;user.c: 193: if(a>b) return b;
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;incstack = 0
  1924  001F22  0100               	movlb	0	; () banked
  1925  001F24  5186               	movf	MIN@a& (0+255),w,b
  1926  001F26  0100               	movlb	0	; () banked
  1927  001F28  5D88               	subwf	MIN@b& (0+255),w,b
  1928  001F2A  0100               	movlb	0	; () banked
  1929  001F2C  5189               	movf	(MIN@b+1)& (0+255),w,b
  1930  001F2E  0A80               	xorlw	128
  1931  001F30  0100               	movlb	0	; () banked
  1932  001F32  6F8A               	movwf	??_MIN& (0+255),b
  1933  001F34  0100               	movlb	0	; () banked
  1934  001F36  5187               	movf	(MIN@a+1)& (0+255),w,b
  1935  001F38  0A80               	xorlw	128
  1936  001F3A  0100               	movlb	0	; () banked
  1937  001F3C  598A               	subwfb	??_MIN& (0+255),w,b
  1938  001F3E  B0D8               	btfsc	status,0,c
  1939  001F40  D005               	goto	l381
  1940                           
  1941                           ; BSR set to: 0
  1942  001F42  C088  F086         	movff	MIN@b,?_MIN
  1943  001F46  C089  F087         	movff	MIN@b+1,?_MIN+1
  1944  001F4A  D004               	goto	l382
  1945  001F4C                     l381:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;user.c: 194: return a;
  1949  001F4C  C086  F086         	movff	MIN@a,?_MIN
  1950  001F50  C087  F087         	movff	MIN@a+1,?_MIN+1
  1951  001F54                     l382:
  1952                           
  1953                           ; BSR set to: 0
  1954  001F54  0012               	return		;funcret
  1955  001F56                     __end_of_MIN:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           plusw2	equ	0xFDB
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _MAX *****************
  1976 ;; Defined at:
  1977 ;;		line 197 in file "user.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  a               2    6[BANK0 ] int 
  1980 ;;  b               2    8[BANK0 ] int 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    6[BANK0 ] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;Total ram usage:        5 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    5
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_sensorComputation
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text7
  2007  001F56                     __ptext7:
  2008                           	opt stack 0
  2009  001F56                     _MAX:
  2010                           	opt stack 23
  2011                           
  2012                           ;user.c: 199: if(a>b) return a;
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016  001F56  0100               	movlb	0	; () banked
  2017  001F58  5186               	movf	MAX@a& (0+255),w,b
  2018  001F5A  0100               	movlb	0	; () banked
  2019  001F5C  5D88               	subwf	MAX@b& (0+255),w,b
  2020  001F5E  0100               	movlb	0	; () banked
  2021  001F60  5189               	movf	(MAX@b+1)& (0+255),w,b
  2022  001F62  0A80               	xorlw	128
  2023  001F64  0100               	movlb	0	; () banked
  2024  001F66  6F8A               	movwf	??_MAX& (0+255),b
  2025  001F68  0100               	movlb	0	; () banked
  2026  001F6A  5187               	movf	(MAX@a+1)& (0+255),w,b
  2027  001F6C  0A80               	xorlw	128
  2028  001F6E  0100               	movlb	0	; () banked
  2029  001F70  598A               	subwfb	??_MAX& (0+255),w,b
  2030  001F72  B0D8               	btfsc	status,0,c
  2031  001F74  D005               	goto	l385
  2032                           
  2033                           ; BSR set to: 0
  2034  001F76  C086  F086         	movff	MAX@a,?_MAX
  2035  001F7A  C087  F087         	movff	MAX@a+1,?_MAX+1
  2036  001F7E  D004               	goto	l386
  2037  001F80                     l385:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;user.c: 200: return b;
  2041  001F80  C088  F086         	movff	MAX@b,?_MAX
  2042  001F84  C089  F087         	movff	MAX@b+1,?_MAX+1
  2043  001F88                     l386:
  2044                           
  2045                           ; BSR set to: 0
  2046  001F88  0012               	return		;funcret
  2047  001F8A                     __end_of_MAX:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           tblptrh	equ	0xFF7
  2051                           tblptrl	equ	0xFF6
  2052                           tablat	equ	0xFF5
  2053                           prodh	equ	0xFF4
  2054                           prodl	equ	0xFF3
  2055                           intcon	equ	0xFF2
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postdec1	equ	0xFE5
  2059                           fsr1l	equ	0xFE1
  2060                           postinc2	equ	0xFDE
  2061                           postdec2	equ	0xFDD
  2062                           plusw2	equ	0xFDB
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _InitApp *****************
  2068 ;; Defined at:
  2069 ;;		line 35 in file "user.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    6
  2090 ;; This function calls:
  2091 ;;		_AlgorithmSelection
  2092 ;;		_delay
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text8
  2099  001E72                     __ptext8:
  2100                           	opt stack 0
  2101  001E72                     _InitApp:
  2102                           	opt stack 24
  2103                           
  2104                           ;user.c: 39: TRISC = 0;
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;incstack = 0
  2108  001E72  0E00               	movlw	0
  2109  001E74  6E94               	movwf	3988,c	;volatile
  2110                           
  2111                           ;user.c: 43: TRISEbits.TRISE1=1;
  2112  001E76  8296               	bsf	3990,1,c	;volatile
  2113                           
  2114                           ;user.c: 45: TRISEbits.TRISE2=1;
  2115  001E78  8496               	bsf	3990,2,c	;volatile
  2116                           
  2117                           ;user.c: 47: TRISBbits.RB1=1;
  2118  001E7A  8293               	bsf	3987,1,c	;volatile
  2119                           
  2120                           ;user.c: 49: TRISBbits.RB0=1;
  2121  001E7C  8093               	bsf	3987,0,c	;volatile
  2122                           
  2123                           ;user.c: 52: TRISBbits.RB3=1;
  2124  001E7E  8693               	bsf	3987,3,c	;volatile
  2125                           
  2126                           ;user.c: 54: TRISBbits.RB2=1;
  2127  001E80  8493               	bsf	3987,2,c	;volatile
  2128                           
  2129                           ;user.c: 58: ADCON1 =0b00000001;
  2130  001E82  0E01               	movlw	1
  2131  001E84  6EC1               	movwf	4033,c	;volatile
  2132                           
  2133                           ;user.c: 63: ADCON2=0b00001010;
  2134  001E86  0E0A               	movlw	10
  2135  001E88  6EC0               	movwf	4032,c	;volatile
  2136                           
  2137                           ;user.c: 68: ADCON0=0b00101011;
  2138  001E8A  0E2B               	movlw	43
  2139  001E8C  6EC2               	movwf	4034,c	;volatile
  2140                           
  2141                           ;user.c: 77: T0CON = 0b11000100;
  2142  001E8E  0EC4               	movlw	196
  2143  001E90  6ED5               	movwf	4053,c	;volatile
  2144                           
  2145                           ;user.c: 85: INTCON2 = 0b11110100;
  2146  001E92  0EF4               	movlw	244
  2147  001E94  6EF1               	movwf	intcon2,c	;volatile
  2148                           
  2149                           ;user.c: 95: INTCON = 0b00100000;
  2150  001E96  0E20               	movlw	32
  2151  001E98  6EF2               	movwf	intcon,c	;volatile
  2152                           
  2153                           ;user.c: 105: AlgorithmSelection();
  2154  001E9A  EC1D  F010         	call	_AlgorithmSelection	;wreg free
  2155                           
  2156                           ;user.c: 108: delay(1000);
  2157  001E9E  0E03               	movlw	3
  2158  001EA0  0100               	movlb	0	; () banked
  2159  001EA2  6F81               	movwf	(delay@ms+1)& (0+255),b
  2160  001EA4  0EE8               	movlw	232
  2161  001EA6  6F80               	movwf	delay@ms& (0+255),b
  2162  001EA8  ECF6  F00E         	call	_delay	;wreg free
  2163  001EAC  0012               	return		;funcret
  2164  001EAE                     __end_of_InitApp:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           intcon	equ	0xFF2
  2173                           intcon2	equ	0xFF1
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           postdec1	equ	0xFE5
  2177                           fsr1l	equ	0xFE1
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           plusw2	equ	0xFDB
  2181                           fsr2h	equ	0xFDA
  2182                           fsr2l	equ	0xFD9
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _delay *****************
  2186 ;; Defined at:
  2187 ;;		line 29 in file "user.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  ms              2    0[BANK0 ] unsigned int 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  x               2    3[BANK0 ] int 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;		None               void
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;Total ram usage:        5 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    5
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_InitApp
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text9
  2216  001DEC                     __ptext9:
  2217                           	opt stack 0
  2218  001DEC                     _delay:
  2219                           	opt stack 24
  2220                           
  2221                           ;user.c: 30: int x = 0;
  2222                           
  2223                           ;incstack = 0
  2224  001DEC  0E00               	movlw	0
  2225  001DEE  0100               	movlb	0	; () banked
  2226  001DF0  6F84               	movwf	(delay@x+1)& (0+255),b
  2227  001DF2  0E00               	movlw	0
  2228  001DF4  6F83               	movwf	delay@x& (0+255),b
  2229                           
  2230                           ;user.c: 31: for (x = 0; x < ms; x++)
  2231  001DF6  0E00               	movlw	0
  2232  001DF8  0100               	movlb	0	; () banked
  2233  001DFA  6F84               	movwf	(delay@x+1)& (0+255),b
  2234  001DFC  0E00               	movlw	0
  2235  001DFE  6F83               	movwf	delay@x& (0+255),b
  2236  001E00  D00C               	goto	l336
  2237  001E02                     l2124:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2241  001E02  0E0B               	movlw	11
  2242  001E04  0100               	movlb	0	; () banked
  2243  001E06  6F82               	movwf	??_delay& (0+255),b
  2244  001E08  0E62               	movlw	98
  2245  001E0A                     u2337:
  2246  001E0A  2EE8               	decfsz	wreg,f,c
  2247  001E0C  D7FE               	goto	u2337
  2248  001E0E  2F82               	decfsz	??_delay& (0+255),f,b
  2249  001E10  D7FC               	goto	u2337
  2250  001E12  D000               	nop2	
  2251  001E14  0100               	movlb	0	; () banked
  2252  001E16  4B83               	infsnz	delay@x& (0+255),f,b
  2253  001E18  2B84               	incf	(delay@x+1)& (0+255),f,b
  2254  001E1A                     l336:
  2255                           
  2256                           ; BSR set to: 0
  2257  001E1A  0100               	movlb	0	; () banked
  2258  001E1C  5180               	movf	delay@ms& (0+255),w,b
  2259  001E1E  0100               	movlb	0	; () banked
  2260  001E20  5D83               	subwf	delay@x& (0+255),w,b
  2261  001E22  0100               	movlb	0	; () banked
  2262  001E24  5181               	movf	(delay@ms+1)& (0+255),w,b
  2263  001E26  0100               	movlb	0	; () banked
  2264  001E28  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2265  001E2A  A0D8               	btfss	status,0,c
  2266  001E2C  D7EA               	goto	l2124
  2267                           
  2268                           ; BSR set to: 0
  2269                           
  2270                           ; BSR set to: 0
  2271  001E2E  0012               	return		;funcret
  2272  001E30                     __end_of_delay:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           intcon2	equ	0xFF1
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1l	equ	0xFE1
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           plusw2	equ	0xFDB
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _AlgorithmSelection *****************
  2294 ;; Defined at:
  2295 ;;		line 112 in file "user.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_InitApp
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text10
  2324  00203A                     __ptext10:
  2325                           	opt stack 0
  2326  00203A                     _AlgorithmSelection:
  2327                           	opt stack 24
  2328                           
  2329                           ;user.c: 114: ADCON0 = 0b00100111;
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  00203A  0E27               	movlw	39
  2334  00203C  6EC2               	movwf	4034,c	;volatile
  2335                           
  2336                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2337  00203E  82C2               	bsf	4034,1,c	;volatile
  2338                           
  2339                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2340  002040  D000               	goto	l345
  2341  002042                     l345:
  2342  002042  B2C2               	btfsc	4034,1,c	;volatile
  2343  002044  D7FE               	goto	l345
  2344                           
  2345                           ;user.c: 119: if(ADRESL > 0b10000000)
  2346  002046  0E80               	movlw	128
  2347  002048  64C3               	cpfsgt	4035,c	;volatile
  2348  00204A  D002               	goto	l2136
  2349                           
  2350                           ;user.c: 120: algorithm = LEFTWALL;
  2351  00204C  0E00               	movlw	0
  2352  00204E  D001               	goto	L5
  2353  002050                     l2136:
  2354                           
  2355                           ;user.c: 121: else
  2356                           ;user.c: 122: algorithm = RIGHTWALL;
  2357  002050  0E01               	movlw	1
  2358  002052                     L5:
  2359  002052  6E2A               	movwf	_algorithm,c
  2360  002054  D000               	goto	l350
  2361  002056                     l350:
  2362  002056  0012               	return		;funcret
  2363  002058                     __end_of_AlgorithmSelection:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1l	equ	0xFE1
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           plusw2	equ	0xFDB
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _ConfigureOscillator *****************
  2385 ;; Defined at:
  2386 ;;		line 24 in file "system.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;		None               void
  2393 ;; Registers used:
  2394 ;;		wreg, status,2
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;Total ram usage:        0 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    5
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text11
  2415  002084                     __ptext11:
  2416                           	opt stack 0
  2417  002084                     _ConfigureOscillator:
  2418                           	opt stack 25
  2419                           
  2420                           ;system.c: 29: OSCCON = 0b01111100;
  2421                           
  2422                           ;incstack = 0
  2423  002084  0E7C               	movlw	124
  2424  002086  6ED3               	movwf	4051,c	;volatile
  2425                           
  2426                           ;system.c: 31: OSCTUNE = 0b01001111;
  2427  002088  0E4F               	movlw	79
  2428  00208A  6E9B               	movwf	3995,c	;volatile
  2429  00208C  0012               	return		;funcret
  2430  00208E                     __end_of_ConfigureOscillator:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           intcon	equ	0xFF2
  2439                           intcon2	equ	0xFF1
  2440                           postinc0	equ	0xFEE
  2441                           wreg	equ	0xFE8
  2442                           postdec1	equ	0xFE5
  2443                           fsr1l	equ	0xFE1
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           plusw2	equ	0xFDB
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _low_isr *****************
  2452 ;; Defined at:
  2453 ;;		line 235 in file "interrupts.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;		None               void
  2460 ;; Registers used:
  2461 ;;		None
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;Total ram usage:       17 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    4
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		Interrupt level 1
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	intcodelo
  2482  000018                     __pintcodelo:
  2483                           	opt stack 0
  2484  000018                     _low_isr:
  2485                           	opt stack 23
  2486                           
  2487                           ;incstack = 0
  2488  000018  CFD8 F02E          	movff	status,??_low_isr
  2489  00001C  CFE8 F02F          	movff	wreg,??_low_isr+1
  2490  000020  CFE0 F030          	movff	bsr,??_low_isr+2
  2491  000024  CFFA F031          	movff	pclath,??_low_isr+3
  2492  000028  CFFB F032          	movff	pclatu,??_low_isr+4
  2493  00002C  CFE9 F033          	movff	fsr0l,??_low_isr+5
  2494  000030  CFEA F034          	movff	fsr0h,??_low_isr+6
  2495  000034  CFE1 F035          	movff	fsr1l,??_low_isr+7
  2496  000038  CFE2 F036          	movff	fsr1h,??_low_isr+8
  2497  00003C  CFD9 F037          	movff	fsr2l,??_low_isr+9
  2498  000040  CFDA F038          	movff	fsr2h,??_low_isr+10
  2499  000044  CFF3 F039          	movff	prodl,??_low_isr+11
  2500  000048  CFF4 F03A          	movff	prodh,??_low_isr+12
  2501  00004C  CFF6 F03B          	movff	tblptrl,??_low_isr+13
  2502  000050  CFF7 F03C          	movff	tblptrh,??_low_isr+14
  2503  000054  CFF8 F03D          	movff	tblptru,??_low_isr+15
  2504  000058  CFF5 F03E          	movff	tablat,??_low_isr+16
  2505  00005C  C03E  FFF5         	movff	??_low_isr+16,tablat
  2506  000060  C03D  FFF8         	movff	??_low_isr+15,tblptru
  2507  000064  C03C  FFF7         	movff	??_low_isr+14,tblptrh
  2508  000068  C03B  FFF6         	movff	??_low_isr+13,tblptrl
  2509  00006C  C03A  FFF4         	movff	??_low_isr+12,prodh
  2510  000070  C039  FFF3         	movff	??_low_isr+11,prodl
  2511  000074  C038  FFDA         	movff	??_low_isr+10,fsr2h
  2512  000078  C037  FFD9         	movff	??_low_isr+9,fsr2l
  2513  00007C  C036  FFE2         	movff	??_low_isr+8,fsr1h
  2514  000080  C035  FFE1         	movff	??_low_isr+7,fsr1l
  2515  000084  C034  FFEA         	movff	??_low_isr+6,fsr0h
  2516  000088  C033  FFE9         	movff	??_low_isr+5,fsr0l
  2517  00008C  C032  FFFB         	movff	??_low_isr+4,pclatu
  2518  000090  C031  FFFA         	movff	??_low_isr+3,pclath
  2519  000094  C030  FFE0         	movff	??_low_isr+2,bsr
  2520  000098  C02F  FFE8         	movff	??_low_isr+1,wreg
  2521  00009C  C02E  FFD8         	movff	??_low_isr,status
  2522  0000A0  0010               	retfie	
  2523  0000A2                     __end_of_low_isr:
  2524                           	opt stack 0
  2525                           pclatu	equ	0xFFB
  2526                           pclath	equ	0xFFA
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           intcon2	equ	0xFF1
  2535                           postinc0	equ	0xFEE
  2536                           fsr0h	equ	0xFEA
  2537                           fsr0l	equ	0xFE9
  2538                           wreg	equ	0xFE8
  2539                           postdec1	equ	0xFE5
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           bsr	equ	0xFE0
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           plusw2	equ	0xFDB
  2546                           fsr2h	equ	0xFDA
  2547                           fsr2l	equ	0xFD9
  2548                           status	equ	0xFD8
  2549                           
  2550 ;; *************** function _high_isr *****************
  2551 ;; Defined at:
  2552 ;;		line 106 in file "interrupts.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;		None
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  a               2   40[COMRAM] int 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;		None               void
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;Total ram usage:       19 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    3
  2573 ;; This function calls:
  2574 ;;		_KController
  2575 ;;		_Reversing
  2576 ;;		_forward
  2577 ;;		_initialRotation
  2578 ;;		_merge
  2579 ;;		_motorCounterUpdate
  2580 ;;		_moveMouse
  2581 ;;		_rotate
  2582 ;;		_singleForward
  2583 ;;		_stateUpdate
  2584 ;; This function is called by:
  2585 ;;		Interrupt level 2
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	intcode
  2590  000008                     __pintcode:
  2591                           	opt stack 0
  2592  000008                     _high_isr:
  2593                           	opt stack 23
  2594                           
  2595                           ;incstack = 0
  2596  000008  CFFA F048          	movff	pclath,??_high_isr+3
  2597  00000C  CFFB F049          	movff	pclatu,??_high_isr+4
  2598  000010  CFE9 F04A          	movff	fsr0l,??_high_isr+5
  2599  000014  EDE7  F009         	call	int_func,f	;refresh shadow registers
  2600                           pclatu	equ	0xFFB
  2601                           pclath	equ	0xFFA
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon2	equ	0xFF1
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           bsr	equ	0xFE0
  2618                           postinc2	equ	0xFDE
  2619                           postdec2	equ	0xFDD
  2620                           plusw2	equ	0xFDB
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625                           	psect	intcode_body
  2626  0013CE                     __pintcode_body:
  2627                           	opt stack 23
  2628  0013CE                     int_func:
  2629                           	opt stack 23
  2630  0013CE  0006               	pop		; remove dummy address from shadow register refresh
  2631  0013D0  CFEA F04B          	movff	fsr0h,??_high_isr+6
  2632  0013D4  CFE1 F04C          	movff	fsr1l,??_high_isr+7
  2633  0013D8  CFE2 F04D          	movff	fsr1h,??_high_isr+8
  2634  0013DC  CFD9 F04E          	movff	fsr2l,??_high_isr+9
  2635  0013E0  CFDA F04F          	movff	fsr2h,??_high_isr+10
  2636  0013E4  CFF3 F050          	movff	prodl,??_high_isr+11
  2637  0013E8  CFF4 F051          	movff	prodh,??_high_isr+12
  2638  0013EC  CFF6 F052          	movff	tblptrl,??_high_isr+13
  2639  0013F0  CFF7 F053          	movff	tblptrh,??_high_isr+14
  2640  0013F4  CFF8 F054          	movff	tblptru,??_high_isr+15
  2641  0013F8  CFF5 F055          	movff	tablat,??_high_isr+16
  2642                           
  2643                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2644  0013FC  A4F2               	btfss	intcon,2,c	;volatile
  2645  0013FE  D1AD               	goto	i2l151
  2646                           
  2647                           ;interrupts.c: 126: {
  2648                           ;interrupts.c: 127: if(MotorDelayCounter > MOTORDELAYMAX)
  2649  001400  5058               	movf	_MOTORDELAYMAX,w,c
  2650  001402  6E45               	movwf	??_high_isr& (0+255),c
  2651  001404  6A46               	clrf	(??_high_isr+1)& (0+255),c
  2652  001406  500F               	movf	_MotorDelayCounter,w,c
  2653  001408  5C45               	subwf	??_high_isr,w,c
  2654  00140A  5046               	movf	??_high_isr+1,w,c
  2655  00140C  0A80               	xorlw	128
  2656  00140E  6E47               	movwf	(??_high_isr+2)& (0+255),c
  2657  001410  5010               	movf	_MotorDelayCounter+1,w,c
  2658  001412  0A80               	xorlw	128
  2659  001414  5847               	subwfb	(??_high_isr+2)& (0+255),w,c
  2660  001416  B0D8               	btfsc	status,0,c
  2661  001418  D19C               	goto	i2l2032
  2662                           
  2663                           ;interrupts.c: 128: {
  2664                           ;interrupts.c: 129: stateUpdate();
  2665  00141A  ECCA  F00B         	call	_stateUpdate	;wreg free
  2666                           
  2667                           ;interrupts.c: 131: if(cState != pState)
  2668  00141E  505B               	movf	_pState,w,c
  2669  001420  1859               	xorwf	_cState,w,c
  2670  001422  B4D8               	btfsc	status,2,c
  2671  001424  D002               	goto	i2l1870
  2672                           
  2673                           ;interrupts.c: 132: ChangeRequired = 1;
  2674  001426  0E01               	movlw	1
  2675  001428  D001               	goto	L6
  2676  00142A                     i2l1870:
  2677                           
  2678                           ;interrupts.c: 133: else
  2679                           ;interrupts.c: 134: ChangeRequired = 0;
  2680  00142A  0E00               	movlw	0
  2681  00142C                     L6:
  2682  00142C  6E27               	movwf	_ChangeRequired,c
  2683  00142E  D000               	goto	i2l1872
  2684  001430                     i2l1872:
  2685                           
  2686                           ;interrupts.c: 137: if(RotateCounter == 170*2-1 || RotateCounter == 170-1)
  2687  001430  0E53               	movlw	83
  2688  001432  1815               	xorwf	_RotateCounter,w,c
  2689  001434  E103               	bnz	i2u164_40
  2690  001436  0416               	decf	_RotateCounter+1,w,c
  2691  001438  B4D8               	btfsc	status,2,c
  2692  00143A  D005               	goto	i2l1876
  2693  00143C                     i2u164_40:
  2694  00143C  0EA9               	movlw	169
  2695  00143E  1815               	xorwf	_RotateCounter,w,c
  2696  001440  1016               	iorwf	_RotateCounter+1,w,c
  2697  001442  A4D8               	btfss	status,2,c
  2698  001444  D005               	goto	i2l1878
  2699  001446                     i2l1876:
  2700                           
  2701                           ;interrupts.c: 138: {
  2702                           ;interrupts.c: 139: int a = 0;
  2703  001446  0E00               	movlw	0
  2704  001448  6E57               	movwf	high_isr@a+1,c
  2705  00144A  0E00               	movlw	0
  2706  00144C  6E56               	movwf	high_isr@a,c
  2707  00144E  D000               	goto	i2l1878
  2708  001450                     i2l1878:
  2709                           
  2710                           ;interrupts.c: 140: }
  2711                           ;interrupts.c: 142: if (ReverseCounter > 0) {
  2712  001450  BE14               	btfsc	_ReverseCounter+1,7,c
  2713  001452  D008               	goto	i2l1882
  2714  001454  5014               	movf	_ReverseCounter+1,w,c
  2715  001456  E103               	bnz	i2u166_40
  2716  001458  0413               	decf	_ReverseCounter,w,c
  2717  00145A  A0D8               	btfss	status,0,c
  2718  00145C  D003               	goto	i2l1882
  2719  00145E                     i2u166_40:
  2720                           
  2721                           ;interrupts.c: 143: Reversing();
  2722  00145E  EC2C  F010         	call	_Reversing	;wreg free
  2723                           
  2724                           ;interrupts.c: 144: }
  2725  001462  D16B               	goto	i2l93
  2726  001464                     i2l1882:
  2727                           
  2728                           ;interrupts.c: 145: else if(ChangeRequired == 1 && RotateCounter == 0)
  2729  001464  0427               	decf	_ChangeRequired,w,c
  2730  001466  A4D8               	btfss	status,2,c
  2731  001468  D026               	goto	i2l1904
  2732  00146A  5015               	movf	_RotateCounter,w,c
  2733  00146C  1016               	iorwf	_RotateCounter+1,w,c
  2734  00146E  A4D8               	btfss	status,2,c
  2735  001470  D022               	goto	i2l1904
  2736                           
  2737                           ;interrupts.c: 146: {
  2738                           ;interrupts.c: 147: if(sensorValue[2] < 300-50 && sensorValue[3] < 300-50)
  2739  001472  BE06               	btfsc	_sensorValue+5,7,c
  2740  001474  D006               	goto	i2l1888
  2741  001476  5006               	movf	_sensorValue+5,w,c
  2742  001478  E112               	bnz	i2l1896
  2743  00147A  0EFA               	movlw	250
  2744  00147C  5C05               	subwf	_sensorValue+4,w,c
  2745  00147E  B0D8               	btfsc	status,0,c
  2746  001480  D00E               	goto	i2l1896
  2747  001482                     i2l1888:
  2748  001482  BE08               	btfsc	_sensorValue+7,7,c
  2749  001484  D006               	goto	i2l1890
  2750  001486  5008               	movf	_sensorValue+7,w,c
  2751  001488  E10A               	bnz	i2l1896
  2752  00148A  0EFA               	movlw	250
  2753  00148C  5C07               	subwf	_sensorValue+6,w,c
  2754  00148E  B0D8               	btfsc	status,0,c
  2755  001490  D006               	goto	i2l1896
  2756  001492                     i2l1890:
  2757                           
  2758                           ;interrupts.c: 148: {
  2759                           ;interrupts.c: 149: if(justTurned == 1)
  2760  001492  042C               	decf	_justTurned,w,c
  2761                           
  2762                           ;interrupts.c: 151: else
  2763                           ;interrupts.c: 152: ForwardCounter = 350;
  2764                           
  2765                           ;interrupts.c: 150: ForwardCounter = 350;
  2766  001494  0E01               	movlw	1
  2767  001496  6E0C               	movwf	_ForwardCounter+1,c
  2768  001498  0E5E               	movlw	94
  2769  00149A  D004               	goto	L7
  2770                           
  2771                           ;interrupts.c: 153: } else
  2772  00149C  D005               	goto	i2l1898
  2773  00149E                     i2l1896:
  2774                           
  2775                           ;interrupts.c: 154: ForwardCounter = 1;
  2776  00149E  0E00               	movlw	0
  2777  0014A0  6E0C               	movwf	_ForwardCounter+1,c
  2778  0014A2  0E01               	movlw	1
  2779  0014A4                     L7:
  2780  0014A4  6E0B               	movwf	_ForwardCounter,c
  2781  0014A6  D000               	goto	i2l1898
  2782  0014A8                     i2l1898:
  2783                           
  2784                           ;interrupts.c: 155: forward();
  2785  0014A8  ECF6  F00F         	call	_forward	;wreg free
  2786                           
  2787                           ;interrupts.c: 156: pState = cState;
  2788  0014AC  C059  F05B         	movff	_cState,_pState
  2789                           
  2790                           ;interrupts.c: 157: ChangeRequired = 0;
  2791  0014B0  0E00               	movlw	0
  2792  0014B2  6E27               	movwf	_ChangeRequired,c
  2793                           
  2794                           ;interrupts.c: 158: }
  2795  0014B4  D142               	goto	i2l93
  2796  0014B6                     i2l1904:
  2797                           
  2798                           ;interrupts.c: 159: else if(RotateCounter > 0) {
  2799  0014B6  BE16               	btfsc	_RotateCounter+1,7,c
  2800  0014B8  D04D               	goto	i2l1936
  2801  0014BA  5016               	movf	_RotateCounter+1,w,c
  2802  0014BC  E103               	bnz	i2u172_40
  2803  0014BE  0415               	decf	_RotateCounter,w,c
  2804  0014C0  A0D8               	btfss	status,0,c
  2805  0014C2  D048               	goto	i2l1936
  2806  0014C4                     i2u172_40:
  2807                           
  2808                           ;interrupts.c: 160: if ((sensorValue[2] > 800 || sensorValue[3] > 800))
  2809  0014C4  BE06               	btfsc	_sensorValue+5,7,c
  2810  0014C6  D006               	goto	i2l1908
  2811  0014C8  0E21               	movlw	33
  2812  0014CA  5C05               	subwf	_sensorValue+4,w,c
  2813  0014CC  0E03               	movlw	3
  2814  0014CE  5806               	subwfb	_sensorValue+5,w,c
  2815  0014D0  B0D8               	btfsc	status,0,c
  2816  0014D2  D008               	goto	i2l1910
  2817  0014D4                     i2l1908:
  2818  0014D4  BE08               	btfsc	_sensorValue+7,7,c
  2819  0014D6  D00D               	goto	i2l1914
  2820  0014D8  0E21               	movlw	33
  2821  0014DA  5C07               	subwf	_sensorValue+6,w,c
  2822  0014DC  0E03               	movlw	3
  2823  0014DE  5808               	subwfb	_sensorValue+7,w,c
  2824  0014E0  A0D8               	btfss	status,0,c
  2825  0014E2  D007               	goto	i2l1914
  2826  0014E4                     i2l1910:
  2827                           
  2828                           ;interrupts.c: 161: {
  2829                           ;interrupts.c: 162: ReverseCounter = 5;
  2830  0014E4  0E00               	movlw	0
  2831  0014E6  6E14               	movwf	_ReverseCounter+1,c
  2832  0014E8  0E05               	movlw	5
  2833  0014EA  6E13               	movwf	_ReverseCounter,c
  2834                           
  2835                           ;interrupts.c: 163: Reversing();
  2836  0014EC  EC2C  F010         	call	_Reversing	;wreg free
  2837  0014F0  D000               	goto	i2l1914
  2838  0014F2                     i2l1914:
  2839                           
  2840                           ;interrupts.c: 164: }
  2841                           ;interrupts.c: 165: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2842  0014F2  BE06               	btfsc	_sensorValue+5,7,c
  2843  0014F4  D006               	goto	i2l1916
  2844  0014F6  5006               	movf	_sensorValue+5,w,c
  2845  0014F8  E114               	bnz	i2l1922
  2846  0014FA  0E64               	movlw	100
  2847  0014FC  5C05               	subwf	_sensorValue+4,w,c
  2848  0014FE  B0D8               	btfsc	status,0,c
  2849  001500  D010               	goto	i2l1922
  2850  001502                     i2l1916:
  2851  001502  BE08               	btfsc	_sensorValue+7,7,c
  2852  001504  D006               	goto	i2l1918
  2853  001506  5008               	movf	_sensorValue+7,w,c
  2854  001508  E10C               	bnz	i2l1922
  2855  00150A  0E64               	movlw	100
  2856  00150C  5C07               	subwf	_sensorValue+6,w,c
  2857  00150E  B0D8               	btfsc	status,0,c
  2858  001510  D008               	goto	i2l1922
  2859  001512                     i2l1918:
  2860  001512  042B               	decf	_deadEnd,w,c
  2861  001514  A4D8               	btfss	status,2,c
  2862  001516  D005               	goto	i2l1922
  2863                           
  2864                           ;interrupts.c: 166: RotateCounter = 5;
  2865  001518  0E00               	movlw	0
  2866  00151A  6E16               	movwf	_RotateCounter+1,c
  2867  00151C  0E05               	movlw	5
  2868  00151E  6E15               	movwf	_RotateCounter,c
  2869  001520  D000               	goto	i2l1922
  2870  001522                     i2l1922:
  2871                           
  2872                           ;interrupts.c: 167: rotate(rotatingSide);
  2873  001522  502D               	movf	_rotatingSide,w,c
  2874  001524  EC57  F00F         	call	_rotate
  2875                           
  2876                           ;interrupts.c: 168: TurnRight = 0;
  2877  001528  0E00               	movlw	0
  2878  00152A  6E1A               	movwf	_TurnRight+1,c
  2879  00152C  0E00               	movlw	0
  2880  00152E  6E19               	movwf	_TurnRight,c
  2881                           
  2882                           ;interrupts.c: 169: TurnLeft = 0;
  2883  001530  0E00               	movlw	0
  2884  001532  6E18               	movwf	_TurnLeft+1,c
  2885  001534  0E00               	movlw	0
  2886  001536  6E17               	movwf	_TurnLeft,c
  2887                           
  2888                           ;interrupts.c: 170: if(RotateCounter == 0)
  2889  001538  5015               	movf	_RotateCounter,w,c
  2890  00153A  1016               	iorwf	_RotateCounter+1,w,c
  2891  00153C  A4D8               	btfss	status,2,c
  2892  00153E  D0FD               	goto	i2l93
  2893                           
  2894                           ;interrupts.c: 171: {
  2895                           ;interrupts.c: 172: justTurned = 1;
  2896  001540  0E01               	movlw	1
  2897  001542  6E2C               	movwf	_justTurned,c
  2898                           
  2899                           ;interrupts.c: 173: if(deadEnd == 1)
  2900  001544  042B               	decf	_deadEnd,w,c
  2901  001546  A4D8               	btfss	status,2,c
  2902  001548  D0F8               	goto	i2l93
  2903                           
  2904                           ;interrupts.c: 174: {
  2905                           ;interrupts.c: 175: ReverseCounter = 5*2;
  2906  00154A  0E00               	movlw	0
  2907  00154C  6E14               	movwf	_ReverseCounter+1,c
  2908  00154E  0E0A               	movlw	10
  2909  001550  6E13               	movwf	_ReverseCounter,c
  2910                           
  2911                           ;interrupts.c: 176: }
  2912                           ;interrupts.c: 177: }
  2913                           ;interrupts.c: 178: }
  2914  001552  D0F3               	goto	i2l93
  2915  001554                     i2l1936:
  2916                           
  2917                           ;interrupts.c: 179: else if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 
      +                          0)
  2918  001554  BE20               	btfsc	_controlToLeft+1,7,c
  2919  001556  D005               	goto	i2l1938
  2920  001558  5020               	movf	_controlToLeft+1,w,c
  2921  00155A  E113               	bnz	i2l1942
  2922  00155C  041F               	decf	_controlToLeft,w,c
  2923  00155E  B0D8               	btfsc	status,0,c
  2924  001560  D010               	goto	i2l1942
  2925  001562                     i2l1938:
  2926  001562  BE22               	btfsc	_controlToRight+1,7,c
  2927  001564  D005               	goto	i2l1940
  2928  001566  5022               	movf	_controlToRight+1,w,c
  2929  001568  E10C               	bnz	i2l1942
  2930  00156A  0421               	decf	_controlToRight,w,c
  2931  00156C  B0D8               	btfsc	status,0,c
  2932  00156E  D009               	goto	i2l1942
  2933  001570                     i2l1940:
  2934  001570  BE0C               	btfsc	_ForwardCounter+1,7,c
  2935  001572  D02C               	goto	i2l1958
  2936  001574  500C               	movf	_ForwardCounter+1,w,c
  2937  001576  E105               	bnz	i2l1942
  2938  001578  040B               	decf	_ForwardCounter,w,c
  2939  00157A  B0D8               	btfsc	status,0,c
  2940  00157C  D002               	goto	i2l1942
  2941  00157E  D026               	goto	i2l1958
  2942  001580  D000               	goto	i2l1942
  2943  001582                     i2l1942:
  2944                           
  2945                           ;interrupts.c: 180: {
  2946                           ;interrupts.c: 181: KController();
  2947  001582  ECCB  F00E         	call	_KController	;wreg free
  2948                           
  2949                           ;interrupts.c: 183: if(controlToLeft > 0 )
  2950  001586  BE20               	btfsc	_controlToLeft+1,7,c
  2951  001588  D00E               	goto	i2l1950
  2952  00158A  5020               	movf	_controlToLeft+1,w,c
  2953  00158C  E103               	bnz	i2u183_40
  2954  00158E  041F               	decf	_controlToLeft,w,c
  2955  001590  A0D8               	btfss	status,0,c
  2956  001592  D009               	goto	i2l1950
  2957  001594                     i2u183_40:
  2958                           
  2959                           ;interrupts.c: 184: {
  2960                           ;interrupts.c: 185: motorCounterUpdate(RIGHT,0);
  2961  001594  0E00               	movlw	0
  2962  001596  6E3F               	movwf	motorCounterUpdate@reverse,c
  2963  001598  0E01               	movlw	1
  2964  00159A  ECE9  F00D         	call	_motorCounterUpdate
  2965                           
  2966                           ;interrupts.c: 186: controlToLeft--;
  2967  00159E  061F               	decf	_controlToLeft,f,c
  2968  0015A0  A0D8               	btfss	status,0,c
  2969  0015A2  0620               	decf	_controlToLeft+1,f,c
  2970                           
  2971                           ;interrupts.c: 187: } else if(controlToRight > 0){
  2972  0015A4  D0CA               	goto	i2l93
  2973  0015A6                     i2l1950:
  2974  0015A6  BE22               	btfsc	_controlToRight+1,7,c
  2975  0015A8  D00E               	goto	i2l1956
  2976  0015AA  5022               	movf	_controlToRight+1,w,c
  2977  0015AC  E103               	bnz	i2u184_40
  2978  0015AE  0421               	decf	_controlToRight,w,c
  2979  0015B0  A0D8               	btfss	status,0,c
  2980  0015B2  D009               	goto	i2l1956
  2981  0015B4                     i2u184_40:
  2982                           
  2983                           ;interrupts.c: 188: motorCounterUpdate(LEFT,0);
  2984  0015B4  0E00               	movlw	0
  2985  0015B6  6E3F               	movwf	motorCounterUpdate@reverse,c
  2986  0015B8  0E00               	movlw	0
  2987  0015BA  ECE9  F00D         	call	_motorCounterUpdate
  2988                           
  2989                           ;interrupts.c: 189: controlToRight--;
  2990  0015BE  0621               	decf	_controlToRight,f,c
  2991  0015C0  A0D8               	btfss	status,0,c
  2992  0015C2  0622               	decf	_controlToRight+1,f,c
  2993                           
  2994                           ;interrupts.c: 190: } else {
  2995  0015C4  D0BA               	goto	i2l93
  2996  0015C6                     i2l1956:
  2997                           
  2998                           ;interrupts.c: 191: forward();
  2999  0015C6  ECF6  F00F         	call	_forward	;wreg free
  3000                           
  3001                           ;interrupts.c: 192: }
  3002                           ;interrupts.c: 194: } else if(ForwardCounter == 0)
  3003  0015CA  D0B7               	goto	i2l93
  3004  0015CC                     i2l1958:
  3005  0015CC  500B               	movf	_ForwardCounter,w,c
  3006  0015CE  100C               	iorwf	_ForwardCounter+1,w,c
  3007  0015D0  A4D8               	btfss	status,2,c
  3008  0015D2  D0B3               	goto	i2l93
  3009                           
  3010                           ;interrupts.c: 195: {
  3011                           ;interrupts.c: 196: if(algorithm == LEFTWALL)
  3012  0015D4  502A               	movf	_algorithm,w,c
  3013  0015D6  A4D8               	btfss	status,2,c
  3014  0015D8  D05C               	goto	i2l1998
  3015                           
  3016                           ;interrupts.c: 197: {
  3017                           ;interrupts.c: 198: if(cState == empty)
  3018  0015DA  5059               	movf	_cState,w,c
  3019  0015DC  A4D8               	btfss	status,2,c
  3020  0015DE  D010               	goto	i2l1970
  3021                           
  3022                           ;interrupts.c: 199: if(justTurned == 0)
  3023  0015E0  502C               	movf	_justTurned,w,c
  3024  0015E2  A4D8               	btfss	status,2,c
  3025  0015E4  D008               	goto	i2l1968
  3026                           
  3027                           ;interrupts.c: 200: initialRotation(LEFT,0);
  3028  0015E6  0E00               	movlw	0
  3029  0015E8  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3030  0015EA  0E00               	movlw	0
  3031  0015EC  6E42               	movwf	initialRotation@isDeadEnd,c
  3032  0015EE  0E00               	movlw	0
  3033  0015F0  ECC5  F00F         	call	_initialRotation
  3034  0015F4  D0A2               	goto	i2l93
  3035  0015F6                     i2l1968:
  3036                           
  3037                           ;interrupts.c: 201: else
  3038                           ;interrupts.c: 202: ForwardCounter = 350;
  3039  0015F6  0E01               	movlw	1
  3040  0015F8  6E0C               	movwf	_ForwardCounter+1,c
  3041  0015FA  0E5E               	movlw	94
  3042  0015FC  6E0B               	movwf	_ForwardCounter,c
  3043  0015FE  D09D               	goto	i2l93
  3044  001600                     i2l1970:
  3045                           
  3046                           ;interrupts.c: 203: else if(cState == twoside) singleForward();
  3047  001600  0E02               	movlw	2
  3048  001602  1859               	xorwf	_cState,w,c
  3049  001604  A4D8               	btfss	status,2,c
  3050  001606  D003               	goto	i2l1974
  3051  001608  EC0B  F010         	call	_singleForward	;wreg free
  3052  00160C  D096               	goto	i2l93
  3053  00160E                     i2l1974:
  3054                           
  3055                           ;interrupts.c: 204: else if(cState == threeside) initialRotation(LEFT,1);
  3056  00160E  0E03               	movlw	3
  3057  001610  1859               	xorwf	_cState,w,c
  3058  001612  A4D8               	btfss	status,2,c
  3059  001614  D008               	goto	i2l1978
  3060  001616  0E00               	movlw	0
  3061  001618  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3062  00161A  0E01               	movlw	1
  3063  00161C  6E42               	movwf	initialRotation@isDeadEnd,c
  3064  00161E  0E00               	movlw	0
  3065  001620  ECC5  F00F         	call	_initialRotation
  3066  001624  D08A               	goto	i2l93
  3067  001626                     i2l1978:
  3068                           
  3069                           ;interrupts.c: 205: else if(cState == leftside) singleForward();
  3070  001626  0E04               	movlw	4
  3071  001628  1859               	xorwf	_cState,w,c
  3072  00162A  A4D8               	btfss	status,2,c
  3073  00162C  D003               	goto	i2l1982
  3074  00162E  EC0B  F010         	call	_singleForward	;wreg free
  3075  001632  D083               	goto	i2l93
  3076  001634                     i2l1982:
  3077                           
  3078                           ;interrupts.c: 206: else if(cState == rightside) initialRotation(LEFT,0);
  3079  001634  0E05               	movlw	5
  3080  001636  1859               	xorwf	_cState,w,c
  3081  001638  A4D8               	btfss	status,2,c
  3082  00163A  D008               	goto	i2l1986
  3083  00163C  0E00               	movlw	0
  3084  00163E  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3085  001640  0E00               	movlw	0
  3086  001642  6E42               	movwf	initialRotation@isDeadEnd,c
  3087  001644  0E00               	movlw	0
  3088  001646  ECC5  F00F         	call	_initialRotation
  3089  00164A  D077               	goto	i2l93
  3090  00164C                     i2l1986:
  3091                           
  3092                           ;interrupts.c: 207: else if(cState == frontleft) initialRotation(RIGHT,0);
  3093  00164C  0E06               	movlw	6
  3094  00164E  1859               	xorwf	_cState,w,c
  3095  001650  A4D8               	btfss	status,2,c
  3096  001652  D008               	goto	i2l1990
  3097  001654  0E00               	movlw	0
  3098  001656  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3099  001658  0E00               	movlw	0
  3100  00165A  6E42               	movwf	initialRotation@isDeadEnd,c
  3101  00165C  0E01               	movlw	1
  3102  00165E  ECC5  F00F         	call	_initialRotation
  3103  001662  D06B               	goto	i2l93
  3104  001664                     i2l1990:
  3105                           
  3106                           ;interrupts.c: 208: else if(cState == frontright) initialRotation(LEFT,0);
  3107  001664  0E07               	movlw	7
  3108  001666  1859               	xorwf	_cState,w,c
  3109  001668  A4D8               	btfss	status,2,c
  3110  00166A  D008               	goto	i2l1994
  3111  00166C  0E00               	movlw	0
  3112  00166E  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3113  001670  0E00               	movlw	0
  3114  001672  6E42               	movwf	initialRotation@isDeadEnd,c
  3115  001674  0E00               	movlw	0
  3116  001676  ECC5  F00F         	call	_initialRotation
  3117  00167A  D05F               	goto	i2l93
  3118  00167C                     i2l1994:
  3119                           
  3120                           ;interrupts.c: 209: else if(cState == front) initialRotation(LEFT,0);
  3121  00167C  0459               	decf	_cState,w,c
  3122  00167E  A4D8               	btfss	status,2,c
  3123  001680  D05C               	goto	i2l93
  3124  001682  0E00               	movlw	0
  3125  001684  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3126  001686  0E00               	movlw	0
  3127  001688  6E42               	movwf	initialRotation@isDeadEnd,c
  3128  00168A  0E00               	movlw	0
  3129  00168C  ECC5  F00F         	call	_initialRotation
  3130                           
  3131                           ;interrupts.c: 210: } else {
  3132  001690  D054               	goto	i2l93
  3133  001692                     i2l1998:
  3134                           
  3135                           ;interrupts.c: 211: if(cState == empty) initialRotation(RIGHT,0);
  3136  001692  5059               	movf	_cState,w,c
  3137  001694  A4D8               	btfss	status,2,c
  3138  001696  D008               	goto	i2l2002
  3139  001698  0E00               	movlw	0
  3140  00169A  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3141  00169C  0E00               	movlw	0
  3142  00169E  6E42               	movwf	initialRotation@isDeadEnd,c
  3143  0016A0  0E01               	movlw	1
  3144  0016A2  ECC5  F00F         	call	_initialRotation
  3145  0016A6  D049               	goto	i2l93
  3146  0016A8                     i2l2002:
  3147                           
  3148                           ;interrupts.c: 212: else if(cState == twoside) singleForward();
  3149  0016A8  0E02               	movlw	2
  3150  0016AA  1859               	xorwf	_cState,w,c
  3151  0016AC  A4D8               	btfss	status,2,c
  3152  0016AE  D003               	goto	i2l2006
  3153  0016B0  EC0B  F010         	call	_singleForward	;wreg free
  3154  0016B4  D042               	goto	i2l93
  3155  0016B6                     i2l2006:
  3156                           
  3157                           ;interrupts.c: 213: else if(cState == threeside) initialRotation(RIGHT,1);
  3158  0016B6  0E03               	movlw	3
  3159  0016B8  1859               	xorwf	_cState,w,c
  3160  0016BA  A4D8               	btfss	status,2,c
  3161  0016BC  D008               	goto	i2l2010
  3162  0016BE  0E00               	movlw	0
  3163  0016C0  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3164  0016C2  0E01               	movlw	1
  3165  0016C4  6E42               	movwf	initialRotation@isDeadEnd,c
  3166  0016C6  0E01               	movlw	1
  3167  0016C8  ECC5  F00F         	call	_initialRotation
  3168  0016CC  D036               	goto	i2l93
  3169  0016CE                     i2l2010:
  3170                           
  3171                           ;interrupts.c: 214: else if(cState == leftside) initialRotation(RIGHT,0);
  3172  0016CE  0E04               	movlw	4
  3173  0016D0  1859               	xorwf	_cState,w,c
  3174  0016D2  A4D8               	btfss	status,2,c
  3175  0016D4  D008               	goto	i2l2014
  3176  0016D6  0E00               	movlw	0
  3177  0016D8  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3178  0016DA  0E00               	movlw	0
  3179  0016DC  6E42               	movwf	initialRotation@isDeadEnd,c
  3180  0016DE  0E01               	movlw	1
  3181  0016E0  ECC5  F00F         	call	_initialRotation
  3182  0016E4  D02A               	goto	i2l93
  3183  0016E6                     i2l2014:
  3184                           
  3185                           ;interrupts.c: 215: else if(cState == rightside) singleForward();
  3186  0016E6  0E05               	movlw	5
  3187  0016E8  1859               	xorwf	_cState,w,c
  3188  0016EA  A4D8               	btfss	status,2,c
  3189  0016EC  D003               	goto	i2l2018
  3190  0016EE  EC0B  F010         	call	_singleForward	;wreg free
  3191  0016F2  D023               	goto	i2l93
  3192  0016F4                     i2l2018:
  3193                           
  3194                           ;interrupts.c: 216: else if(cState == frontleft) initialRotation(RIGHT,0);
  3195  0016F4  0E06               	movlw	6
  3196  0016F6  1859               	xorwf	_cState,w,c
  3197  0016F8  A4D8               	btfss	status,2,c
  3198  0016FA  D008               	goto	i2l2022
  3199  0016FC  0E00               	movlw	0
  3200  0016FE  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3201  001700  0E00               	movlw	0
  3202  001702  6E42               	movwf	initialRotation@isDeadEnd,c
  3203  001704  0E01               	movlw	1
  3204  001706  ECC5  F00F         	call	_initialRotation
  3205  00170A  D017               	goto	i2l93
  3206  00170C                     i2l2022:
  3207                           
  3208                           ;interrupts.c: 217: else if(cState == frontright) initialRotation(LEFT,0);
  3209  00170C  0E07               	movlw	7
  3210  00170E  1859               	xorwf	_cState,w,c
  3211  001710  A4D8               	btfss	status,2,c
  3212  001712  D008               	goto	i2l2026
  3213  001714  0E00               	movlw	0
  3214  001716  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3215  001718  0E00               	movlw	0
  3216  00171A  6E42               	movwf	initialRotation@isDeadEnd,c
  3217  00171C  0E00               	movlw	0
  3218  00171E  ECC5  F00F         	call	_initialRotation
  3219  001722  D00B               	goto	i2l93
  3220  001724                     i2l2026:
  3221                           
  3222                           ;interrupts.c: 218: else if(cState == front) initialRotation(RIGHT,0);
  3223  001724  0459               	decf	_cState,w,c
  3224  001726  A4D8               	btfss	status,2,c
  3225  001728  D008               	goto	i2l93
  3226  00172A  0E00               	movlw	0
  3227  00172C  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3228  00172E  0E00               	movlw	0
  3229  001730  6E42               	movwf	initialRotation@isDeadEnd,c
  3230  001732  0E01               	movlw	1
  3231  001734  ECC5  F00F         	call	_initialRotation
  3232  001738  D000               	goto	i2l93
  3233  00173A                     i2l93:
  3234                           
  3235                           ;interrupts.c: 219: }
  3236                           ;interrupts.c: 220: }
  3237                           ;interrupts.c: 222: moveMouse(merge(LMotorCounter,RMotorCounter));
  3238  00173A  C029  F03F         	movff	_RMotorCounter,merge@right
  3239  00173E  5028               	movf	_LMotorCounter,w,c
  3240  001740  EC3A  F010         	call	_merge
  3241  001744  EC47  F010         	call	_moveMouse
  3242                           
  3243                           ;interrupts.c: 223: MotorDelayCounter = 0;
  3244  001748  0E00               	movlw	0
  3245  00174A  6E10               	movwf	_MotorDelayCounter+1,c
  3246  00174C  0E00               	movlw	0
  3247  00174E  6E0F               	movwf	_MotorDelayCounter,c
  3248  001750  D000               	goto	i2l2032
  3249  001752                     i2l2032:
  3250                           
  3251                           ;interrupts.c: 224: }
  3252                           ;interrupts.c: 226: MotorDelayCounter++;
  3253  001752  4A0F               	infsnz	_MotorDelayCounter,f,c
  3254  001754  2A10               	incf	_MotorDelayCounter+1,f,c
  3255                           
  3256                           ;interrupts.c: 227: INTCONbits.TMR0IF = 0;
  3257  001756  94F2               	bcf	intcon,2,c	;volatile
  3258  001758  D000               	goto	i2l151
  3259  00175A                     i2l151:
  3260  00175A  C055  FFF5         	movff	??_high_isr+16,tablat
  3261  00175E  C054  FFF8         	movff	??_high_isr+15,tblptru
  3262  001762  C053  FFF7         	movff	??_high_isr+14,tblptrh
  3263  001766  C052  FFF6         	movff	??_high_isr+13,tblptrl
  3264  00176A  C051  FFF4         	movff	??_high_isr+12,prodh
  3265  00176E  C050  FFF3         	movff	??_high_isr+11,prodl
  3266  001772  C04F  FFDA         	movff	??_high_isr+10,fsr2h
  3267  001776  C04E  FFD9         	movff	??_high_isr+9,fsr2l
  3268  00177A  C04D  FFE2         	movff	??_high_isr+8,fsr1h
  3269  00177E  C04C  FFE1         	movff	??_high_isr+7,fsr1l
  3270  001782  C04B  FFEA         	movff	??_high_isr+6,fsr0h
  3271  001786  C04A  FFE9         	movff	??_high_isr+5,fsr0l
  3272  00178A  C049  FFFB         	movff	??_high_isr+4,pclatu
  3273  00178E  C048  FFFA         	movff	??_high_isr+3,pclath
  3274  001792  0011               	retfie		f
  3275  001794                     __end_of_high_isr:
  3276                           	opt stack 0
  3277                           pclatu	equ	0xFFB
  3278                           pclath	equ	0xFFA
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           prodh	equ	0xFF4
  3284                           prodl	equ	0xFF3
  3285                           intcon	equ	0xFF2
  3286                           intcon2	equ	0xFF1
  3287                           postinc0	equ	0xFEE
  3288                           fsr0h	equ	0xFEA
  3289                           fsr0l	equ	0xFE9
  3290                           wreg	equ	0xFE8
  3291                           postdec1	equ	0xFE5
  3292                           fsr1h	equ	0xFE2
  3293                           fsr1l	equ	0xFE1
  3294                           bsr	equ	0xFE0
  3295                           postinc2	equ	0xFDE
  3296                           postdec2	equ	0xFDD
  3297                           plusw2	equ	0xFDB
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _stateUpdate *****************
  3303 ;; Defined at:
  3304 ;;		line 449 in file "interrupts.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_high_isr
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text14
  3332  001794                     __ptext14:
  3333                           	opt stack 0
  3334  001794                     _stateUpdate:
  3335                           	opt stack 25
  3336                           
  3337                           ;interrupts.c: 451: if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3338                           ;interrupts.c: 452: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3339                           
  3340                           ;incstack = 0
  3341  001794  BE02               	btfsc	_sensorValue+1,7,c
  3342  001796  D006               	goto	i2l1184
  3343  001798  5002               	movf	_sensorValue+1,w,c
  3344  00179A  E11E               	bnz	i2l1192
  3345  00179C  0EC8               	movlw	200
  3346  00179E  5C01               	subwf	_sensorValue,w,c
  3347  0017A0  B0D8               	btfsc	status,0,c
  3348  0017A2  D01A               	goto	i2l1192
  3349  0017A4                     i2l1184:
  3350  0017A4  BE04               	btfsc	_sensorValue+3,7,c
  3351  0017A6  D006               	goto	i2l1186
  3352  0017A8  5004               	movf	_sensorValue+3,w,c
  3353  0017AA  E116               	bnz	i2l1192
  3354  0017AC  0EC8               	movlw	200
  3355  0017AE  5C03               	subwf	_sensorValue+2,w,c
  3356  0017B0  B0D8               	btfsc	status,0,c
  3357  0017B2  D012               	goto	i2l1192
  3358  0017B4                     i2l1186:
  3359  0017B4  BE06               	btfsc	_sensorValue+5,7,c
  3360  0017B6  D006               	goto	i2l1188
  3361  0017B8  0E2C               	movlw	44
  3362  0017BA  5C05               	subwf	_sensorValue+4,w,c
  3363  0017BC  0E01               	movlw	1
  3364  0017BE  5806               	subwfb	_sensorValue+5,w,c
  3365  0017C0  B0D8               	btfsc	status,0,c
  3366  0017C2  D00A               	goto	i2l1192
  3367  0017C4                     i2l1188:
  3368  0017C4  BE08               	btfsc	_sensorValue+7,7,c
  3369  0017C6  D006               	goto	i2l1190
  3370  0017C8  0E2C               	movlw	44
  3371  0017CA  5C07               	subwf	_sensorValue+6,w,c
  3372  0017CC  0E01               	movlw	1
  3373  0017CE  5808               	subwfb	_sensorValue+7,w,c
  3374  0017D0  B0D8               	btfsc	status,0,c
  3375  0017D2  D002               	goto	i2l1192
  3376  0017D4                     i2l1190:
  3377                           
  3378                           ;interrupts.c: 453: cState = empty;
  3379  0017D4  0E00               	movlw	0
  3380  0017D6  D0E9               	goto	L14
  3381  0017D8                     i2l1192:
  3382                           
  3383                           ;interrupts.c: 454: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3384                           ;interrupts.c: 455: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3385  0017D8  BE02               	btfsc	_sensorValue+1,7,c
  3386  0017DA  D020               	goto	i2l1202
  3387  0017DC  5002               	movf	_sensorValue+1,w,c
  3388  0017DE  E104               	bnz	i2u36_40
  3389  0017E0  0EC9               	movlw	201
  3390  0017E2  5C01               	subwf	_sensorValue,w,c
  3391  0017E4  A0D8               	btfss	status,0,c
  3392  0017E6  D01A               	goto	i2l1202
  3393  0017E8                     i2u36_40:
  3394  0017E8  BE04               	btfsc	_sensorValue+3,7,c
  3395  0017EA  D018               	goto	i2l1202
  3396  0017EC  5004               	movf	_sensorValue+3,w,c
  3397  0017EE  E104               	bnz	i2u37_40
  3398  0017F0  0EC9               	movlw	201
  3399  0017F2  5C03               	subwf	_sensorValue+2,w,c
  3400  0017F4  A0D8               	btfss	status,0,c
  3401  0017F6  D012               	goto	i2l1202
  3402  0017F8                     i2u37_40:
  3403  0017F8  BE06               	btfsc	_sensorValue+5,7,c
  3404  0017FA  D006               	goto	i2l1198
  3405  0017FC  0E2C               	movlw	44
  3406  0017FE  5C05               	subwf	_sensorValue+4,w,c
  3407  001800  0E01               	movlw	1
  3408  001802  5806               	subwfb	_sensorValue+5,w,c
  3409  001804  B0D8               	btfsc	status,0,c
  3410  001806  D00A               	goto	i2l1202
  3411  001808                     i2l1198:
  3412  001808  BE08               	btfsc	_sensorValue+7,7,c
  3413  00180A  D006               	goto	i2l1200
  3414  00180C  0E2C               	movlw	44
  3415  00180E  5C07               	subwf	_sensorValue+6,w,c
  3416  001810  0E01               	movlw	1
  3417  001812  5808               	subwfb	_sensorValue+7,w,c
  3418  001814  B0D8               	btfsc	status,0,c
  3419  001816  D002               	goto	i2l1202
  3420  001818                     i2l1200:
  3421                           
  3422                           ;interrupts.c: 456: cState = twoside;
  3423  001818  0E02               	movlw	2
  3424  00181A  D0C7               	goto	L14
  3425  00181C                     i2l1202:
  3426                           
  3427                           ;interrupts.c: 457: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3428                           ;interrupts.c: 458: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3429  00181C  BE02               	btfsc	_sensorValue+1,7,c
  3430  00181E  D01F               	goto	i2l1212
  3431  001820  5002               	movf	_sensorValue+1,w,c
  3432  001822  E104               	bnz	i2u40_40
  3433  001824  0EC9               	movlw	201
  3434  001826  5C01               	subwf	_sensorValue,w,c
  3435  001828  A0D8               	btfss	status,0,c
  3436  00182A  D019               	goto	i2l1212
  3437  00182C                     i2u40_40:
  3438  00182C  BE04               	btfsc	_sensorValue+3,7,c
  3439  00182E  D017               	goto	i2l1212
  3440  001830  5004               	movf	_sensorValue+3,w,c
  3441  001832  E104               	bnz	i2u41_40
  3442  001834  0EC9               	movlw	201
  3443  001836  5C03               	subwf	_sensorValue+2,w,c
  3444  001838  A0D8               	btfss	status,0,c
  3445  00183A  D011               	goto	i2l1212
  3446  00183C                     i2u41_40:
  3447  00183C  BE06               	btfsc	_sensorValue+5,7,c
  3448  00183E  D00F               	goto	i2l1212
  3449  001840  0E2D               	movlw	45
  3450  001842  5C05               	subwf	_sensorValue+4,w,c
  3451  001844  0E01               	movlw	1
  3452  001846  5806               	subwfb	_sensorValue+5,w,c
  3453  001848  B0D8               	btfsc	status,0,c
  3454  00184A  BE08               	btfsc	_sensorValue+7,7,c
  3455  00184C  D008               	goto	i2l1212
  3456  00184E  0E2D               	movlw	45
  3457  001850  5C07               	subwf	_sensorValue+6,w,c
  3458  001852  0E01               	movlw	1
  3459  001854  5808               	subwfb	_sensorValue+7,w,c
  3460  001856  A0D8               	btfss	status,0,c
  3461  001858  D002               	goto	i2l1212
  3462                           
  3463                           ;interrupts.c: 459: cState = threeside;
  3464  00185A  0E03               	movlw	3
  3465  00185C  D0A6               	goto	L14
  3466  00185E                     i2l1212:
  3467                           
  3468                           ;interrupts.c: 460: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3469                           ;interrupts.c: 461: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3470  00185E  BE02               	btfsc	_sensorValue+1,7,c
  3471  001860  D020               	goto	i2l1222
  3472  001862  5002               	movf	_sensorValue+1,w,c
  3473  001864  E104               	bnz	i2u44_40
  3474  001866  0EC9               	movlw	201
  3475  001868  5C01               	subwf	_sensorValue,w,c
  3476  00186A  A0D8               	btfss	status,0,c
  3477  00186C  D01A               	goto	i2l1222
  3478  00186E                     i2u44_40:
  3479  00186E  BE04               	btfsc	_sensorValue+3,7,c
  3480  001870  D006               	goto	i2l1216
  3481  001872  5004               	movf	_sensorValue+3,w,c
  3482  001874  E116               	bnz	i2l1222
  3483  001876  0EC8               	movlw	200
  3484  001878  5C03               	subwf	_sensorValue+2,w,c
  3485  00187A  B0D8               	btfsc	status,0,c
  3486  00187C  D012               	goto	i2l1222
  3487  00187E                     i2l1216:
  3488  00187E  BE06               	btfsc	_sensorValue+5,7,c
  3489  001880  D006               	goto	i2l1218
  3490  001882  0E2C               	movlw	44
  3491  001884  5C05               	subwf	_sensorValue+4,w,c
  3492  001886  0E01               	movlw	1
  3493  001888  5806               	subwfb	_sensorValue+5,w,c
  3494  00188A  B0D8               	btfsc	status,0,c
  3495  00188C  D00A               	goto	i2l1222
  3496  00188E                     i2l1218:
  3497  00188E  BE08               	btfsc	_sensorValue+7,7,c
  3498  001890  D006               	goto	i2l1220
  3499  001892  0E2C               	movlw	44
  3500  001894  5C07               	subwf	_sensorValue+6,w,c
  3501  001896  0E01               	movlw	1
  3502  001898  5808               	subwfb	_sensorValue+7,w,c
  3503  00189A  B0D8               	btfsc	status,0,c
  3504  00189C  D002               	goto	i2l1222
  3505  00189E                     i2l1220:
  3506                           
  3507                           ;interrupts.c: 462: cState = leftside;
  3508  00189E  0E04               	movlw	4
  3509  0018A0  D084               	goto	L14
  3510  0018A2                     i2l1222:
  3511                           
  3512                           ;interrupts.c: 463: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3513                           ;interrupts.c: 464: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3514  0018A2  BE02               	btfsc	_sensorValue+1,7,c
  3515  0018A4  D006               	goto	i2l1224
  3516  0018A6  5002               	movf	_sensorValue+1,w,c
  3517  0018A8  E11E               	bnz	i2l1232
  3518  0018AA  0EC8               	movlw	200
  3519  0018AC  5C01               	subwf	_sensorValue,w,c
  3520  0018AE  B0D8               	btfsc	status,0,c
  3521  0018B0  D01A               	goto	i2l1232
  3522  0018B2                     i2l1224:
  3523  0018B2  BE04               	btfsc	_sensorValue+3,7,c
  3524  0018B4  D018               	goto	i2l1232
  3525  0018B6  5004               	movf	_sensorValue+3,w,c
  3526  0018B8  E104               	bnz	i2u49_40
  3527  0018BA  0EC9               	movlw	201
  3528  0018BC  5C03               	subwf	_sensorValue+2,w,c
  3529  0018BE  A0D8               	btfss	status,0,c
  3530  0018C0  D012               	goto	i2l1232
  3531  0018C2                     i2u49_40:
  3532  0018C2  BE06               	btfsc	_sensorValue+5,7,c
  3533  0018C4  D006               	goto	i2l1228
  3534  0018C6  0E2C               	movlw	44
  3535  0018C8  5C05               	subwf	_sensorValue+4,w,c
  3536  0018CA  0E01               	movlw	1
  3537  0018CC  5806               	subwfb	_sensorValue+5,w,c
  3538  0018CE  B0D8               	btfsc	status,0,c
  3539  0018D0  D00A               	goto	i2l1232
  3540  0018D2                     i2l1228:
  3541  0018D2  BE08               	btfsc	_sensorValue+7,7,c
  3542  0018D4  D006               	goto	i2l1230
  3543  0018D6  0E2C               	movlw	44
  3544  0018D8  5C07               	subwf	_sensorValue+6,w,c
  3545  0018DA  0E01               	movlw	1
  3546  0018DC  5808               	subwfb	_sensorValue+7,w,c
  3547  0018DE  B0D8               	btfsc	status,0,c
  3548  0018E0  D002               	goto	i2l1232
  3549  0018E2                     i2l1230:
  3550                           
  3551                           ;interrupts.c: 465: cState = rightside;
  3552  0018E2  0E05               	movlw	5
  3553  0018E4  D062               	goto	L14
  3554  0018E6                     i2l1232:
  3555                           
  3556                           ;interrupts.c: 466: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3557                           ;interrupts.c: 467: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3558  0018E6  BE02               	btfsc	_sensorValue+1,7,c
  3559  0018E8  D01F               	goto	i2l1242
  3560  0018EA  5002               	movf	_sensorValue+1,w,c
  3561  0018EC  E104               	bnz	i2u52_40
  3562  0018EE  0EC9               	movlw	201
  3563  0018F0  5C01               	subwf	_sensorValue,w,c
  3564  0018F2  A0D8               	btfss	status,0,c
  3565  0018F4  D019               	goto	i2l1242
  3566  0018F6                     i2u52_40:
  3567  0018F6  BE04               	btfsc	_sensorValue+3,7,c
  3568  0018F8  D006               	goto	i2l1236
  3569  0018FA  5004               	movf	_sensorValue+3,w,c
  3570  0018FC  E115               	bnz	i2l1242
  3571  0018FE  0EC8               	movlw	200
  3572  001900  5C03               	subwf	_sensorValue+2,w,c
  3573  001902  B0D8               	btfsc	status,0,c
  3574  001904  D011               	goto	i2l1242
  3575  001906                     i2l1236:
  3576  001906  BE06               	btfsc	_sensorValue+5,7,c
  3577  001908  D00F               	goto	i2l1242
  3578  00190A  0E2D               	movlw	45
  3579  00190C  5C05               	subwf	_sensorValue+4,w,c
  3580  00190E  0E01               	movlw	1
  3581  001910  5806               	subwfb	_sensorValue+5,w,c
  3582  001912  B0D8               	btfsc	status,0,c
  3583  001914  BE08               	btfsc	_sensorValue+7,7,c
  3584  001916  D008               	goto	i2l1242
  3585  001918  0E2D               	movlw	45
  3586  00191A  5C07               	subwf	_sensorValue+6,w,c
  3587  00191C  0E01               	movlw	1
  3588  00191E  5808               	subwfb	_sensorValue+7,w,c
  3589  001920  A0D8               	btfss	status,0,c
  3590  001922  D002               	goto	i2l1242
  3591                           
  3592                           ;interrupts.c: 468: cState = frontleft;
  3593  001924  0E06               	movlw	6
  3594  001926  D041               	goto	L14
  3595  001928                     i2l1242:
  3596                           
  3597                           ;interrupts.c: 469: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3598                           ;interrupts.c: 470: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3599  001928  BE02               	btfsc	_sensorValue+1,7,c
  3600  00192A  D006               	goto	i2l1244
  3601  00192C  5002               	movf	_sensorValue+1,w,c
  3602  00192E  E11D               	bnz	i2l1252
  3603  001930  0EC8               	movlw	200
  3604  001932  5C01               	subwf	_sensorValue,w,c
  3605  001934  B0D8               	btfsc	status,0,c
  3606  001936  D019               	goto	i2l1252
  3607  001938                     i2l1244:
  3608  001938  BE04               	btfsc	_sensorValue+3,7,c
  3609  00193A  D017               	goto	i2l1252
  3610  00193C  5004               	movf	_sensorValue+3,w,c
  3611  00193E  E104               	bnz	i2u57_40
  3612  001940  0EC9               	movlw	201
  3613  001942  5C03               	subwf	_sensorValue+2,w,c
  3614  001944  A0D8               	btfss	status,0,c
  3615  001946  D011               	goto	i2l1252
  3616  001948                     i2u57_40:
  3617  001948  BE06               	btfsc	_sensorValue+5,7,c
  3618  00194A  D00F               	goto	i2l1252
  3619  00194C  0E2D               	movlw	45
  3620  00194E  5C05               	subwf	_sensorValue+4,w,c
  3621  001950  0E01               	movlw	1
  3622  001952  5806               	subwfb	_sensorValue+5,w,c
  3623  001954  B0D8               	btfsc	status,0,c
  3624  001956  BE08               	btfsc	_sensorValue+7,7,c
  3625  001958  D008               	goto	i2l1252
  3626  00195A  0E2D               	movlw	45
  3627  00195C  5C07               	subwf	_sensorValue+6,w,c
  3628  00195E  0E01               	movlw	1
  3629  001960  5808               	subwfb	_sensorValue+7,w,c
  3630  001962  A0D8               	btfss	status,0,c
  3631  001964  D002               	goto	i2l1252
  3632                           
  3633                           ;interrupts.c: 471: cState = frontright;
  3634  001966  0E07               	movlw	7
  3635  001968  D020               	goto	L14
  3636  00196A                     i2l1252:
  3637                           
  3638                           ;interrupts.c: 472: else if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3639                           ;interrupts.c: 473: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3640  00196A  BE02               	btfsc	_sensorValue+1,7,c
  3641  00196C  D006               	goto	i2l1254
  3642  00196E  5002               	movf	_sensorValue+1,w,c
  3643  001970  E11E               	bnz	i2l258
  3644  001972  0EC8               	movlw	200
  3645  001974  5C01               	subwf	_sensorValue,w,c
  3646  001976  B0D8               	btfsc	status,0,c
  3647  001978  D01A               	goto	i2l258
  3648  00197A                     i2l1254:
  3649  00197A  BE04               	btfsc	_sensorValue+3,7,c
  3650  00197C  D006               	goto	i2l1256
  3651  00197E  5004               	movf	_sensorValue+3,w,c
  3652  001980  E116               	bnz	i2l258
  3653  001982  0EC8               	movlw	200
  3654  001984  5C03               	subwf	_sensorValue+2,w,c
  3655  001986  B0D8               	btfsc	status,0,c
  3656  001988  D012               	goto	i2l258
  3657  00198A                     i2l1256:
  3658  00198A  BE06               	btfsc	_sensorValue+5,7,c
  3659  00198C  D010               	goto	i2l258
  3660  00198E  0E2D               	movlw	45
  3661  001990  5C05               	subwf	_sensorValue+4,w,c
  3662  001992  0E01               	movlw	1
  3663  001994  5806               	subwfb	_sensorValue+5,w,c
  3664  001996  B0D8               	btfsc	status,0,c
  3665  001998  BE08               	btfsc	_sensorValue+7,7,c
  3666  00199A  D009               	goto	i2l258
  3667  00199C  0E2D               	movlw	45
  3668  00199E  5C07               	subwf	_sensorValue+6,w,c
  3669  0019A0  0E01               	movlw	1
  3670  0019A2  5808               	subwfb	_sensorValue+7,w,c
  3671  0019A4  A0D8               	btfss	status,0,c
  3672  0019A6  D003               	goto	i2l258
  3673                           
  3674                           ;interrupts.c: 474: cState = front;
  3675  0019A8  0E01               	movlw	1
  3676  0019AA                     L14:
  3677  0019AA  6E59               	movwf	_cState,c
  3678  0019AC  D000               	goto	i2l258
  3679  0019AE                     i2l258:
  3680  0019AE  0012               	return		;funcret
  3681  0019B0                     __end_of_stateUpdate:
  3682                           	opt stack 0
  3683                           pclatu	equ	0xFFB
  3684                           pclath	equ	0xFFA
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           prodh	equ	0xFF4
  3690                           prodl	equ	0xFF3
  3691                           intcon	equ	0xFF2
  3692                           intcon2	equ	0xFF1
  3693                           postinc0	equ	0xFEE
  3694                           fsr0h	equ	0xFEA
  3695                           fsr0l	equ	0xFE9
  3696                           wreg	equ	0xFE8
  3697                           postdec1	equ	0xFE5
  3698                           fsr1h	equ	0xFE2
  3699                           fsr1l	equ	0xFE1
  3700                           bsr	equ	0xFE0
  3701                           postinc2	equ	0xFDE
  3702                           postdec2	equ	0xFDD
  3703                           plusw2	equ	0xFDB
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _singleForward *****************
  3709 ;; Defined at:
  3710 ;;		line 418 in file "interrupts.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;		None               void
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;Total ram usage:        0 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    2
  3731 ;; This function calls:
  3732 ;;		_forward
  3733 ;; This function is called by:
  3734 ;;		_high_isr
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text15
  3739  002016                     __ptext15:
  3740                           	opt stack 0
  3741  002016                     _singleForward:
  3742                           	opt stack 23
  3743                           
  3744                           ;interrupts.c: 420: MOTORDELAYMAX = 2;
  3745                           
  3746                           ;incstack = 0
  3747  002016  0E02               	movlw	2
  3748  002018  6E58               	movwf	_MOTORDELAYMAX,c
  3749                           
  3750                           ;interrupts.c: 421: if(ForwardCounter == 0 || ForwardCounter == 1)
  3751  00201A  500B               	movf	_ForwardCounter,w,c
  3752  00201C  100C               	iorwf	_ForwardCounter+1,w,c
  3753  00201E  B4D8               	btfsc	status,2,c
  3754  002020  D004               	goto	i2l1794
  3755  002022  040B               	decf	_ForwardCounter,w,c
  3756  002024  100C               	iorwf	_ForwardCounter+1,w,c
  3757  002026  A4D8               	btfss	status,2,c
  3758  002028  D007               	goto	i2l235
  3759  00202A                     i2l1794:
  3760                           
  3761                           ;interrupts.c: 422: {
  3762                           ;interrupts.c: 423: ForwardCounter = 1;
  3763  00202A  0E00               	movlw	0
  3764  00202C  6E0C               	movwf	_ForwardCounter+1,c
  3765  00202E  0E01               	movlw	1
  3766  002030  6E0B               	movwf	_ForwardCounter,c
  3767                           
  3768                           ;interrupts.c: 424: forward();
  3769  002032  ECF6  F00F         	call	_forward	;wreg free
  3770  002036  D000               	goto	i2l235
  3771  002038                     i2l235:
  3772  002038  0012               	return		;funcret
  3773  00203A                     __end_of_singleForward:
  3774                           	opt stack 0
  3775                           pclatu	equ	0xFFB
  3776                           pclath	equ	0xFFA
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           intcon2	equ	0xFF1
  3785                           postinc0	equ	0xFEE
  3786                           fsr0h	equ	0xFEA
  3787                           fsr0l	equ	0xFE9
  3788                           wreg	equ	0xFE8
  3789                           postdec1	equ	0xFE5
  3790                           fsr1h	equ	0xFE2
  3791                           fsr1l	equ	0xFE1
  3792                           bsr	equ	0xFE0
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           plusw2	equ	0xFDB
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _forward *****************
  3801 ;; Defined at:
  3802 ;;		line 408 in file "interrupts.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;		None               void
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    1
  3823 ;; This function calls:
  3824 ;;		_motorCounterUpdate
  3825 ;; This function is called by:
  3826 ;;		_high_isr
  3827 ;;		_singleForward
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text16
  3832  001FEC                     __ptext16:
  3833                           	opt stack 0
  3834  001FEC                     _forward:
  3835                           	opt stack 23
  3836                           
  3837                           ;interrupts.c: 410: motorCounterUpdate(RIGHT,0);
  3838                           
  3839                           ;incstack = 0
  3840  001FEC  0E00               	movlw	0
  3841  001FEE  6E3F               	movwf	motorCounterUpdate@reverse,c
  3842  001FF0  0E01               	movlw	1
  3843  001FF2  ECE9  F00D         	call	_motorCounterUpdate
  3844                           
  3845                           ;interrupts.c: 411: motorCounterUpdate(LEFT,0);
  3846  001FF6  0E00               	movlw	0
  3847  001FF8  6E3F               	movwf	motorCounterUpdate@reverse,c
  3848  001FFA  0E00               	movlw	0
  3849  001FFC  ECE9  F00D         	call	_motorCounterUpdate
  3850                           
  3851                           ;interrupts.c: 412: ForwardCounter--;
  3852  002000  060B               	decf	_ForwardCounter,f,c
  3853  002002  A0D8               	btfss	status,0,c
  3854  002004  060C               	decf	_ForwardCounter+1,f,c
  3855                           
  3856                           ;interrupts.c: 413: if(ForwardCounter == 0)
  3857  002006  500B               	movf	_ForwardCounter,w,c
  3858  002008  100C               	iorwf	_ForwardCounter+1,w,c
  3859  00200A  A4D8               	btfss	status,2,c
  3860  00200C  D003               	goto	i2l229
  3861                           
  3862                           ;interrupts.c: 414: justTurned = 0;
  3863  00200E  0E00               	movlw	0
  3864  002010  6E2C               	movwf	_justTurned,c
  3865  002012  D000               	goto	i2l229
  3866  002014                     i2l229:
  3867  002014  0012               	return		;funcret
  3868  002016                     __end_of_forward:
  3869                           	opt stack 0
  3870                           pclatu	equ	0xFFB
  3871                           pclath	equ	0xFFA
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           intcon2	equ	0xFF1
  3880                           postinc0	equ	0xFEE
  3881                           fsr0h	equ	0xFEA
  3882                           fsr0l	equ	0xFE9
  3883                           wreg	equ	0xFE8
  3884                           postdec1	equ	0xFE5
  3885                           fsr1h	equ	0xFE2
  3886                           fsr1l	equ	0xFE1
  3887                           bsr	equ	0xFE0
  3888                           postinc2	equ	0xFDE
  3889                           postdec2	equ	0xFDD
  3890                           plusw2	equ	0xFDB
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _moveMouse *****************
  3896 ;; Defined at:
  3897 ;;		line 324 in file "interrupts.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  action          1    wreg     unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  action          1   17[COMRAM] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;		None               void
  3904 ;; Registers used:
  3905 ;;		wreg
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;Total ram usage:        1 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_high_isr
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text17
  3925  00208E                     __ptext17:
  3926                           	opt stack 0
  3927  00208E                     _moveMouse:
  3928                           	opt stack 25
  3929                           
  3930                           ;incstack = 0
  3931                           ;moveMouse@action stored from wreg
  3932  00208E  6E3F               	movwf	moveMouse@action,c
  3933                           
  3934                           ;interrupts.c: 326: LATC = action;
  3935  002090  C03F  FF8B         	movff	moveMouse@action,3979	;volatile
  3936  002094  0012               	return		;funcret
  3937  002096                     __end_of_moveMouse:
  3938                           	opt stack 0
  3939                           pclatu	equ	0xFFB
  3940                           pclath	equ	0xFFA
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon2	equ	0xFF1
  3949                           postinc0	equ	0xFEE
  3950                           fsr0h	equ	0xFEA
  3951                           fsr0l	equ	0xFE9
  3952                           wreg	equ	0xFE8
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           bsr	equ	0xFE0
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           plusw2	equ	0xFDB
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _merge *****************
  3965 ;; Defined at:
  3966 ;;		line 317 in file "interrupts.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  left            1    wreg     unsigned char 
  3969 ;;  right           1   17[COMRAM] unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  left            1   18[COMRAM] unsigned char 
  3972 ;;  merged          1   19[COMRAM] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      unsigned char 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;Total ram usage:        3 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_high_isr
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text18
  3996  002074                     __ptext18:
  3997                           	opt stack 0
  3998  002074                     _merge:
  3999                           	opt stack 25
  4000                           
  4001                           ;incstack = 0
  4002                           ;merge@left stored from wreg
  4003  002074  6E40               	movwf	merge@left,c
  4004                           
  4005                           ;interrupts.c: 319: unsigned char merged;
  4006                           ;interrupts.c: 320: merged = left + (right << 4);
  4007  002076  383F               	swapf	merge@right,w,c
  4008  002078  0BF0               	andlw	240
  4009  00207A  2440               	addwf	merge@left,w,c
  4010  00207C  6E41               	movwf	merge@merged,c
  4011                           
  4012                           ;interrupts.c: 321: return merged;
  4013  00207E  5041               	movf	merge@merged,w,c
  4014  002080  D000               	goto	i2l195
  4015  002082                     i2l195:
  4016  002082  0012               	return		;funcret
  4017  002084                     __end_of_merge:
  4018                           	opt stack 0
  4019                           pclatu	equ	0xFFB
  4020                           pclath	equ	0xFFA
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           intcon	equ	0xFF2
  4028                           intcon2	equ	0xFF1
  4029                           postinc0	equ	0xFEE
  4030                           fsr0h	equ	0xFEA
  4031                           fsr0l	equ	0xFE9
  4032                           wreg	equ	0xFE8
  4033                           postdec1	equ	0xFE5
  4034                           fsr1h	equ	0xFE2
  4035                           fsr1l	equ	0xFE1
  4036                           bsr	equ	0xFE0
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           plusw2	equ	0xFDB
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _initialRotation *****************
  4045 ;; Defined at:
  4046 ;;		line 429 in file "interrupts.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  side            1    wreg     enum E4146
  4049 ;;  isDeadEnd       2   20[COMRAM] int 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  side            1   22[COMRAM] enum E4146
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:        3 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    2
  4068 ;; This function calls:
  4069 ;;		_rotate
  4070 ;; This function is called by:
  4071 ;;		_high_isr
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text19
  4076  001F8A                     __ptext19:
  4077                           	opt stack 0
  4078  001F8A                     _initialRotation:
  4079                           	opt stack 23
  4080                           
  4081                           ;incstack = 0
  4082                           ;initialRotation@side stored from wreg
  4083  001F8A  6E44               	movwf	initialRotation@side,c
  4084                           
  4085                           ;interrupts.c: 431: MOTORDELAYMAX=2;
  4086  001F8C  0E02               	movlw	2
  4087  001F8E  6E58               	movwf	_MOTORDELAYMAX,c
  4088                           
  4089                           ;interrupts.c: 432: if(isDeadEnd == 1)
  4090  001F90  0442               	decf	initialRotation@isDeadEnd,w,c
  4091  001F92  1043               	iorwf	initialRotation@isDeadEnd+1,w,c
  4092  001F94  A4D8               	btfss	status,2,c
  4093  001F96  D006               	goto	i2l1782
  4094                           
  4095                           ;interrupts.c: 433: {
  4096                           ;interrupts.c: 434: RotateCounter = 170*2;
  4097  001F98  0E01               	movlw	1
  4098  001F9A  6E16               	movwf	_RotateCounter+1,c
  4099  001F9C  0E54               	movlw	84
  4100  001F9E  6E15               	movwf	_RotateCounter,c
  4101                           
  4102                           ;interrupts.c: 435: deadEnd = 1;
  4103  001FA0  0E01               	movlw	1
  4104  001FA2  D005               	goto	L15
  4105  001FA4                     i2l1782:
  4106                           
  4107                           ;interrupts.c: 437: else
  4108                           ;interrupts.c: 438: {
  4109                           ;interrupts.c: 439: RotateCounter = 170;
  4110  001FA4  0E00               	movlw	0
  4111  001FA6  6E16               	movwf	_RotateCounter+1,c
  4112  001FA8  0EAA               	movlw	170
  4113  001FAA  6E15               	movwf	_RotateCounter,c
  4114                           
  4115                           ;interrupts.c: 440: deadEnd = 0;
  4116  001FAC  0E00               	movlw	0
  4117  001FAE                     L15:
  4118  001FAE  6E2B               	movwf	_deadEnd,c
  4119  001FB0  D000               	goto	i2l1784
  4120  001FB2                     i2l1784:
  4121                           
  4122                           ;interrupts.c: 441: }
  4123                           ;interrupts.c: 443: rotatingSide = side;
  4124  001FB2  C044  F02D         	movff	initialRotation@side,_rotatingSide
  4125                           
  4126                           ;interrupts.c: 444: rotate(rotatingSide);
  4127  001FB6  502D               	movf	_rotatingSide,w,c
  4128  001FB8  EC57  F00F         	call	_rotate
  4129  001FBC  0012               	return		;funcret
  4130  001FBE                     __end_of_initialRotation:
  4131                           	opt stack 0
  4132                           pclatu	equ	0xFFB
  4133                           pclath	equ	0xFFA
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           intcon2	equ	0xFF1
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1h	equ	0xFE2
  4148                           fsr1l	equ	0xFE1
  4149                           bsr	equ	0xFE0
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           plusw2	equ	0xFDB
  4153                           fsr2h	equ	0xFDA
  4154                           fsr2l	equ	0xFD9
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _rotate *****************
  4158 ;; Defined at:
  4159 ;;		line 363 in file "interrupts.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  side            1    wreg     enum E4146
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  side            1   19[COMRAM] enum E4146
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;Total ram usage:        1 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    1
  4180 ;; This function calls:
  4181 ;;		_motorCounterUpdate
  4182 ;; This function is called by:
  4183 ;;		_high_isr
  4184 ;;		_initialRotation
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text20
  4189  001EAE                     __ptext20:
  4190                           	opt stack 0
  4191  001EAE                     _rotate:
  4192                           	opt stack 24
  4193                           
  4194                           ;incstack = 0
  4195                           ;rotate@side stored from wreg
  4196  001EAE  6E41               	movwf	rotate@side,c
  4197                           
  4198                           ;interrupts.c: 365: if (side == LEFT){
  4199  001EB0  5041               	movf	rotate@side,w,c
  4200  001EB2  A4D8               	btfss	status,2,c
  4201  001EB4  D00B               	goto	i2l1718
  4202                           
  4203                           ;interrupts.c: 366: motorCounterUpdate(RIGHT,0);
  4204  001EB6  0E00               	movlw	0
  4205  001EB8  6E3F               	movwf	motorCounterUpdate@reverse,c
  4206  001EBA  0E01               	movlw	1
  4207  001EBC  ECE9  F00D         	call	_motorCounterUpdate
  4208                           
  4209                           ;interrupts.c: 367: motorCounterUpdate(LEFT,1);
  4210  001EC0  0E01               	movlw	1
  4211  001EC2  6E3F               	movwf	motorCounterUpdate@reverse,c
  4212  001EC4  0E00               	movlw	0
  4213  001EC6  ECE9  F00D         	call	_motorCounterUpdate
  4214                           
  4215                           ;interrupts.c: 368: } else {
  4216  001ECA  D00B               	goto	i2l1720
  4217  001ECC                     i2l1718:
  4218                           
  4219                           ;interrupts.c: 369: motorCounterUpdate(LEFT,0);
  4220  001ECC  0E00               	movlw	0
  4221  001ECE  6E3F               	movwf	motorCounterUpdate@reverse,c
  4222  001ED0  0E00               	movlw	0
  4223  001ED2  ECE9  F00D         	call	_motorCounterUpdate
  4224                           
  4225                           ;interrupts.c: 370: motorCounterUpdate(RIGHT,1);
  4226  001ED6  0E01               	movlw	1
  4227  001ED8  6E3F               	movwf	motorCounterUpdate@reverse,c
  4228  001EDA  0E01               	movlw	1
  4229  001EDC  ECE9  F00D         	call	_motorCounterUpdate
  4230  001EE0  D000               	goto	i2l1720
  4231  001EE2                     i2l1720:
  4232                           
  4233                           ;interrupts.c: 371: }
  4234                           ;interrupts.c: 372: RotateCounter--;
  4235  001EE2  0615               	decf	_RotateCounter,f,c
  4236  001EE4  A0D8               	btfss	status,0,c
  4237  001EE6  0616               	decf	_RotateCounter+1,f,c
  4238  001EE8  0012               	return		;funcret
  4239  001EEA                     __end_of_rotate:
  4240                           	opt stack 0
  4241                           pclatu	equ	0xFFB
  4242                           pclath	equ	0xFFA
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           prodh	equ	0xFF4
  4248                           prodl	equ	0xFF3
  4249                           intcon	equ	0xFF2
  4250                           intcon2	equ	0xFF1
  4251                           postinc0	equ	0xFEE
  4252                           fsr0h	equ	0xFEA
  4253                           fsr0l	equ	0xFE9
  4254                           wreg	equ	0xFE8
  4255                           postdec1	equ	0xFE5
  4256                           fsr1h	equ	0xFE2
  4257                           fsr1l	equ	0xFE1
  4258                           bsr	equ	0xFE0
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           plusw2	equ	0xFDB
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266 ;; *************** function _Reversing *****************
  4267 ;; Defined at:
  4268 ;;		line 387 in file "interrupts.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, status,2, status,0, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;Total ram usage:        0 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    1
  4289 ;; This function calls:
  4290 ;;		_motorCounterUpdate
  4291 ;; This function is called by:
  4292 ;;		_high_isr
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text21
  4297  002058                     __ptext21:
  4298                           	opt stack 0
  4299  002058                     _Reversing:
  4300                           	opt stack 24
  4301                           
  4302                           ;interrupts.c: 389: motorCounterUpdate(RIGHT,1);
  4303                           
  4304                           ;incstack = 0
  4305  002058  0E01               	movlw	1
  4306  00205A  6E3F               	movwf	motorCounterUpdate@reverse,c
  4307  00205C  0E01               	movlw	1
  4308  00205E  ECE9  F00D         	call	_motorCounterUpdate
  4309                           
  4310                           ;interrupts.c: 390: motorCounterUpdate(LEFT,1);
  4311  002062  0E01               	movlw	1
  4312  002064  6E3F               	movwf	motorCounterUpdate@reverse,c
  4313  002066  0E00               	movlw	0
  4314  002068  ECE9  F00D         	call	_motorCounterUpdate
  4315                           
  4316                           ;interrupts.c: 391: ReverseCounter--;
  4317  00206C  0613               	decf	_ReverseCounter,f,c
  4318  00206E  A0D8               	btfss	status,0,c
  4319  002070  0614               	decf	_ReverseCounter+1,f,c
  4320  002072  0012               	return		;funcret
  4321  002074                     __end_of_Reversing:
  4322                           	opt stack 0
  4323                           pclatu	equ	0xFFB
  4324                           pclath	equ	0xFFA
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           intcon2	equ	0xFF1
  4333                           postinc0	equ	0xFEE
  4334                           fsr0h	equ	0xFEA
  4335                           fsr0l	equ	0xFE9
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1h	equ	0xFE2
  4339                           fsr1l	equ	0xFE1
  4340                           bsr	equ	0xFE0
  4341                           postinc2	equ	0xFDE
  4342                           postdec2	equ	0xFDD
  4343                           plusw2	equ	0xFDB
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function _motorCounterUpdate *****************
  4349 ;; Defined at:
  4350 ;;		line 272 in file "interrupts.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  side            1    wreg     enum E4146
  4353 ;;  reverse         1   17[COMRAM] unsigned char 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  side            1   18[COMRAM] enum E4146
  4356 ;; Return value:  Size  Location     Type
  4357 ;;		None               void
  4358 ;; Registers used:
  4359 ;;		wreg, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4365 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;Total ram usage:        2 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_high_isr
  4375 ;;		_rotate
  4376 ;;		_Reversing
  4377 ;;		_forward
  4378 ;;		_smoothTurn
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text22
  4383  001BD2                     __ptext22:
  4384                           	opt stack 0
  4385  001BD2                     _motorCounterUpdate:
  4386                           	opt stack 23
  4387                           
  4388                           ;incstack = 0
  4389                           ;motorCounterUpdate@side stored from wreg
  4390  001BD2  6E40               	movwf	motorCounterUpdate@side,c
  4391                           
  4392                           ;interrupts.c: 274: if(side == LEFT && reverse == 1)
  4393  001BD4  5040               	movf	motorCounterUpdate@side,w,c
  4394  001BD6  A4D8               	btfss	status,2,c
  4395  001BD8  D01B               	goto	i2l1594
  4396  001BDA  043F               	decf	motorCounterUpdate@reverse,w,c
  4397  001BDC  B4D8               	btfsc	status,2,c
  4398  001BDE  D00B               	goto	i2l1592
  4399  001BE0  D017               	goto	i2l1594
  4400                           
  4401                           ;interrupts.c: 275: {
  4402                           ;interrupts.c: 276: switch(LMotorCounter)
  4403  001BE2  D009               	goto	i2l1592
  4404  001BE4                     i2l1582:
  4405  001BE4  0E02               	movlw	2
  4406  001BE6  D004               	goto	L18
  4407  001BE8                     i2l1584:
  4408  001BE8  0E04               	movlw	4
  4409  001BEA  D002               	goto	L18
  4410                           
  4411                           ;interrupts.c: 280: case 0b00000100: LMotorCounter = 0b00001000; break;
  4412  001BEC  D03E               	goto	i2l1626
  4413                           
  4414                           ;interrupts.c: 281: case 0b00001000: LMotorCounter = 0b00000001; break;
  4415  001BEE  D039               	goto	i2l1620
  4416  001BF0                     L18:
  4417  001BF0  6E28               	movwf	_LMotorCounter,c
  4418  001BF2  D068               	goto	i2l192
  4419                           
  4420                           ;interrupts.c: 282: default: LMotorCounter = 0b00000001;
  4421  001BF4  D036               	goto	i2l1620
  4422  001BF6                     i2l1592:
  4423  001BF6  5028               	movf	_LMotorCounter,w,c
  4424                           
  4425                           ; Switch size 1, requested type "space"
  4426                           ; Number of cases is 4, Range of values is 1 to 8
  4427                           ; switch strategies available:
  4428                           ; Name         Instructions Cycles
  4429                           ; simple_byte           13     7 (average)
  4430                           ;	Chosen strategy is simple_byte
  4431  001BF8  0A01               	xorlw	1	; case 1
  4432  001BFA  B4D8               	btfsc	status,2,c
  4433  001BFC  D7F3               	goto	i2l1582
  4434  001BFE  0A03               	xorlw	3	; case 2
  4435  001C00  B4D8               	btfsc	status,2,c
  4436  001C02  D7F2               	goto	i2l1584
  4437  001C04  0A06               	xorlw	6	; case 4
  4438  001C06  B4D8               	btfsc	status,2,c
  4439  001C08  D030               	goto	i2l1626
  4440  001C0A  0A0C               	xorlw	12	; case 8
  4441  001C0C  D02A               	goto	i2l1620
  4442                           
  4443                           ;interrupts.c: 284: } else if(side == RIGHT && reverse == 1)
  4444  001C0E  D05A               	goto	i2l192
  4445  001C10                     i2l1594:
  4446  001C10  0440               	decf	motorCounterUpdate@side,w,c
  4447  001C12  A4D8               	btfss	status,2,c
  4448  001C14  D01D               	goto	i2l1612
  4449  001C16  043F               	decf	motorCounterUpdate@reverse,w,c
  4450  001C18  B4D8               	btfsc	status,2,c
  4451  001C1A  D00B               	goto	i2l1610
  4452  001C1C  D019               	goto	i2l1612
  4453                           
  4454                           ;interrupts.c: 285: {
  4455                           ;interrupts.c: 286: switch(RMotorCounter)
  4456  001C1E  D009               	goto	i2l1610
  4457  001C20                     i2l1600:
  4458  001C20  0E08               	movlw	8
  4459  001C22  D040               	goto	L26
  4460  001C24                     i2l1602:
  4461  001C24  0E01               	movlw	1
  4462  001C26  D03E               	goto	L26
  4463  001C28                     i2l1604:
  4464  001C28  0E02               	movlw	2
  4465  001C2A  D03C               	goto	L26
  4466  001C2C                     i2l1606:
  4467  001C2C  0E04               	movlw	4
  4468  001C2E  D03A               	goto	L26
  4469                           
  4470                           ;interrupts.c: 292: default: RMotorCounter = 0b00001000;
  4471  001C30  D7F7               	goto	i2l1600
  4472  001C32                     i2l1610:
  4473  001C32  5029               	movf	_RMotorCounter,w,c
  4474                           
  4475                           ; Switch size 1, requested type "space"
  4476                           ; Number of cases is 4, Range of values is 1 to 8
  4477                           ; switch strategies available:
  4478                           ; Name         Instructions Cycles
  4479                           ; simple_byte           13     7 (average)
  4480                           ;	Chosen strategy is simple_byte
  4481  001C34  0A01               	xorlw	1	; case 1
  4482  001C36  B4D8               	btfsc	status,2,c
  4483  001C38  D7F3               	goto	i2l1600
  4484  001C3A  0A03               	xorlw	3	; case 2
  4485  001C3C  B4D8               	btfsc	status,2,c
  4486  001C3E  D7F2               	goto	i2l1602
  4487  001C40  0A06               	xorlw	6	; case 4
  4488  001C42  B4D8               	btfsc	status,2,c
  4489  001C44  D7F1               	goto	i2l1604
  4490  001C46  0A0C               	xorlw	12	; case 8
  4491  001C48  B4D8               	btfsc	status,2,c
  4492  001C4A  D7F0               	goto	i2l1606
  4493  001C4C  D7E9               	goto	i2l1600
  4494                           
  4495                           ;interrupts.c: 294: } else if(side == LEFT && reverse == 0)
  4496  001C4E  D03A               	goto	i2l192
  4497  001C50                     i2l1612:
  4498  001C50  5040               	movf	motorCounterUpdate@side,w,c
  4499  001C52  A4D8               	btfss	status,2,c
  4500  001C54  D01B               	goto	i2l1630
  4501  001C56  503F               	movf	motorCounterUpdate@reverse,w,c
  4502  001C58  B4D8               	btfsc	status,2,c
  4503  001C5A  D009               	goto	i2l1628
  4504  001C5C  D017               	goto	i2l1630
  4505                           
  4506                           ;interrupts.c: 295: {
  4507                           ;interrupts.c: 296: switch(LMotorCounter)
  4508  001C5E  D007               	goto	i2l1628
  4509                           
  4510                           ;interrupts.c: 297: {
  4511                           ;interrupts.c: 298: case 0b00000001: LMotorCounter = 0b00001000; break;
  4512  001C60  D004               	goto	i2l1626
  4513  001C62                     i2l1620:
  4514  001C62  0E01               	movlw	1
  4515  001C64  D7C5               	goto	L18
  4516                           
  4517                           ;interrupts.c: 300: case 0b00000100: LMotorCounter = 0b00000010; break;
  4518  001C66  D7BE               	goto	i2l1582
  4519                           
  4520                           ;interrupts.c: 301: case 0b00001000: LMotorCounter = 0b00000100; break;
  4521  001C68  D7BF               	goto	i2l1584
  4522  001C6A                     i2l1626:
  4523  001C6A  0E08               	movlw	8
  4524  001C6C  D7C1               	goto	L18
  4525  001C6E                     i2l1628:
  4526  001C6E  5028               	movf	_LMotorCounter,w,c
  4527                           
  4528                           ; Switch size 1, requested type "space"
  4529                           ; Number of cases is 4, Range of values is 1 to 8
  4530                           ; switch strategies available:
  4531                           ; Name         Instructions Cycles
  4532                           ; simple_byte           13     7 (average)
  4533                           ;	Chosen strategy is simple_byte
  4534  001C70  0A01               	xorlw	1	; case 1
  4535  001C72  B4D8               	btfsc	status,2,c
  4536  001C74  D7FA               	goto	i2l1626
  4537  001C76  0A03               	xorlw	3	; case 2
  4538  001C78  B4D8               	btfsc	status,2,c
  4539  001C7A  D7F3               	goto	i2l1620
  4540  001C7C  0A06               	xorlw	6	; case 4
  4541  001C7E  B4D8               	btfsc	status,2,c
  4542  001C80  D7B1               	goto	i2l1582
  4543  001C82  0A0C               	xorlw	12	; case 8
  4544  001C84  B4D8               	btfsc	status,2,c
  4545  001C86  D7B0               	goto	i2l1584
  4546  001C88  D7F0               	goto	i2l1626
  4547                           
  4548                           ;interrupts.c: 304: } else if(side == RIGHT && reverse == 0)
  4549  001C8A  D01C               	goto	i2l192
  4550  001C8C                     i2l1630:
  4551  001C8C  0440               	decf	motorCounterUpdate@side,w,c
  4552  001C8E  A4D8               	btfss	status,2,c
  4553  001C90  D019               	goto	i2l192
  4554  001C92  503F               	movf	motorCounterUpdate@reverse,w,c
  4555  001C94  B4D8               	btfsc	status,2,c
  4556  001C96  D009               	goto	i2l1646
  4557  001C98  D015               	goto	i2l192
  4558                           
  4559                           ;interrupts.c: 305: {
  4560                           ;interrupts.c: 306: switch(RMotorCounter)
  4561  001C9A  D007               	goto	i2l1646
  4562                           
  4563                           ;interrupts.c: 307: {
  4564                           ;interrupts.c: 308: case 0b00000001: RMotorCounter = 0b00000010; break;
  4565  001C9C  D7C5               	goto	i2l1604
  4566                           
  4567                           ;interrupts.c: 309: case 0b00000010: RMotorCounter = 0b00000100; break;
  4568  001C9E  D7C6               	goto	i2l1606
  4569                           
  4570                           ;interrupts.c: 310: case 0b00000100: RMotorCounter = 0b00001000; break;
  4571  001CA0  D7BF               	goto	i2l1600
  4572                           
  4573                           ;interrupts.c: 311: case 0b00001000: RMotorCounter = 0b00000001; break;
  4574  001CA2  D7C0               	goto	i2l1602
  4575  001CA4                     L26:
  4576  001CA4  6E29               	movwf	_RMotorCounter,c
  4577  001CA6  D00E               	goto	i2l192
  4578                           
  4579                           ;interrupts.c: 312: default: RMotorCounter = 0b00000001;
  4580  001CA8  D7BD               	goto	i2l1602
  4581  001CAA                     i2l1646:
  4582  001CAA  5029               	movf	_RMotorCounter,w,c
  4583                           
  4584                           ; Switch size 1, requested type "space"
  4585                           ; Number of cases is 4, Range of values is 1 to 8
  4586                           ; switch strategies available:
  4587                           ; Name         Instructions Cycles
  4588                           ; simple_byte           13     7 (average)
  4589                           ;	Chosen strategy is simple_byte
  4590  001CAC  0A01               	xorlw	1	; case 1
  4591  001CAE  B4D8               	btfsc	status,2,c
  4592  001CB0  D7BB               	goto	i2l1604
  4593  001CB2  0A03               	xorlw	3	; case 2
  4594  001CB4  B4D8               	btfsc	status,2,c
  4595  001CB6  D7BA               	goto	i2l1606
  4596  001CB8  0A06               	xorlw	6	; case 4
  4597  001CBA  B4D8               	btfsc	status,2,c
  4598  001CBC  D7B1               	goto	i2l1600
  4599  001CBE  0A0C               	xorlw	12	; case 8
  4600  001CC0  D7B1               	goto	i2l1602
  4601  001CC2  D000               	goto	i2l192
  4602  001CC4                     i2l192:
  4603  001CC4  0012               	return		;funcret
  4604  001CC6                     __end_of_motorCounterUpdate:
  4605                           	opt stack 0
  4606                           pclatu	equ	0xFFB
  4607                           pclath	equ	0xFFA
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           intcon	equ	0xFF2
  4615                           intcon2	equ	0xFF1
  4616                           postinc0	equ	0xFEE
  4617                           fsr0h	equ	0xFEA
  4618                           fsr0l	equ	0xFE9
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           bsr	equ	0xFE0
  4624                           postinc2	equ	0xFDE
  4625                           postdec2	equ	0xFDD
  4626                           plusw2	equ	0xFDB
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _KController *****************
  4632 ;; Defined at:
  4633 ;;		line 337 in file "interrupts.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;Total ram usage:        0 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; This function calls:
  4654 ;;		Nothing
  4655 ;; This function is called by:
  4656 ;;		_high_isr
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text23
  4661  001D96                     __ptext23:
  4662                           	opt stack 0
  4663  001D96                     _KController:
  4664                           	opt stack 25
  4665                           
  4666                           ;interrupts.c: 348: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  4667                           
  4668                           ;incstack = 0
  4669  001D96  BE06               	btfsc	_sensorValue+5,7,c
  4670  001D98  D00E               	goto	i2l1270
  4671  001D9A  5006               	movf	_sensorValue+5,w,c
  4672  001D9C  E104               	bnz	i2u64_40
  4673  001D9E  0E96               	movlw	150
  4674  001DA0  5C05               	subwf	_sensorValue+4,w,c
  4675  001DA2  A0D8               	btfss	status,0,c
  4676  001DA4  D008               	goto	i2l1270
  4677  001DA6                     i2u64_40:
  4678  001DA6  BE08               	btfsc	_sensorValue+7,7,c
  4679  001DA8  D006               	goto	i2l1270
  4680  001DAA  5008               	movf	_sensorValue+7,w,c
  4681  001DAC  E11E               	bnz	i2l211
  4682  001DAE  0E96               	movlw	150
  4683  001DB0  5C07               	subwf	_sensorValue+6,w,c
  4684  001DB2  B0D8               	btfsc	status,0,c
  4685  001DB4  D01A               	goto	i2l211
  4686  001DB6                     i2l1270:
  4687                           
  4688                           ;interrupts.c: 349: {
  4689                           ;interrupts.c: 351: if(sensorValue[0] > 400)
  4690  001DB6  BE02               	btfsc	_sensorValue+1,7,c
  4691  001DB8  D00B               	goto	i2l1274
  4692  001DBA  0E91               	movlw	145
  4693  001DBC  5C01               	subwf	_sensorValue,w,c
  4694  001DBE  0E01               	movlw	1
  4695  001DC0  5802               	subwfb	_sensorValue+1,w,c
  4696  001DC2  A0D8               	btfss	status,0,c
  4697  001DC4  D005               	goto	i2l1274
  4698                           
  4699                           ;interrupts.c: 352: {
  4700                           ;interrupts.c: 353: controlToRight = 30;
  4701  001DC6  0E00               	movlw	0
  4702  001DC8  6E22               	movwf	_controlToRight+1,c
  4703  001DCA  0E1E               	movlw	30
  4704  001DCC  6E21               	movwf	_controlToRight,c
  4705                           
  4706                           ;interrupts.c: 354: } else if(sensorValue[1] > 400)
  4707  001DCE  D00D               	goto	i2l211
  4708  001DD0                     i2l1274:
  4709  001DD0  BE04               	btfsc	_sensorValue+3,7,c
  4710  001DD2  D00B               	goto	i2l211
  4711  001DD4  0E91               	movlw	145
  4712  001DD6  5C03               	subwf	_sensorValue+2,w,c
  4713  001DD8  0E01               	movlw	1
  4714  001DDA  5804               	subwfb	_sensorValue+3,w,c
  4715  001DDC  A0D8               	btfss	status,0,c
  4716  001DDE  D005               	goto	i2l211
  4717                           
  4718                           ;interrupts.c: 355: {
  4719                           ;interrupts.c: 356: controlToLeft = 30;
  4720  001DE0  0E00               	movlw	0
  4721  001DE2  6E20               	movwf	_controlToLeft+1,c
  4722  001DE4  0E1E               	movlw	30
  4723  001DE6  6E1F               	movwf	_controlToLeft,c
  4724  001DE8  D000               	goto	i2l211
  4725  001DEA                     i2l211:
  4726  001DEA  0012               	return		;funcret
  4727  001DEC                     __end_of_KController:
  4728                           	opt stack 0
  4729                           pclatu	equ	0xFFB
  4730                           pclath	equ	0xFFA
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           intcon2	equ	0xFF1
  4739                           postinc0	equ	0xFEE
  4740                           fsr0h	equ	0xFEA
  4741                           fsr0l	equ	0xFE9
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1h	equ	0xFE2
  4745                           fsr1l	equ	0xFE1
  4746                           bsr	equ	0xFE0
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           plusw2	equ	0xFDB
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           pclatu	equ	0xFFB
  4754                           pclath	equ	0xFFA
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           intcon2	equ	0xFF1
  4763                           postinc0	equ	0xFEE
  4764                           fsr0h	equ	0xFEA
  4765                           fsr0l	equ	0xFE9
  4766                           wreg	equ	0xFE8
  4767                           postdec1	equ	0xFE5
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           bsr	equ	0xFE0
  4771                           postinc2	equ	0xFDE
  4772                           postdec2	equ	0xFDD
  4773                           plusw2	equ	0xFDB
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778                           	psect	rparam
  4779  0000                     pclatu	equ	0xFFB
  4780                           pclath	equ	0xFFA
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           intcon2	equ	0xFF1
  4789                           postinc0	equ	0xFEE
  4790                           fsr0h	equ	0xFEA
  4791                           fsr0l	equ	0xFE9
  4792                           wreg	equ	0xFE8
  4793                           postdec1	equ	0xFE5
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           bsr	equ	0xFE0
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           plusw2	equ	0xFDB
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        4
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     42      91
    BANK0           128    119     127
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_initialRotation
    _forward->_motorCounterUpdate
    _initialRotation->_rotate
    _rotate->_motorCounterUpdate
    _Reversing->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6087
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4856
                                             28 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   17    14      3    3634
                                             11 BANK0     17    14      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            19    19      0    5732
                                             23 COMRAM    19    19      0
                        _KController
                          _Reversing
                            _forward
                    _initialRotation
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
                      _singleForward
                        _stateUpdate
 ---------------------------------------------------------------------------------
 (6) _stateUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _singleForward                                        0     0      0     812
                            _forward
 ---------------------------------------------------------------------------------
 (7) _forward                                              0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _initialRotation                                      3     1      2    1514
                                             20 COMRAM     3     1      2
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     834
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (8) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _initialRotation
     _rotate
       _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate
   _singleForward
     _forward
       _motorCounterUpdate
   _stateUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      7F       5       99.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2A      5B       1       71.7%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DA       6        0.0%
DATA                 0      0      DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 23:41:49 2015

                   _stateUpdate 1794                    ___awdiv@sign 0085                              bsr 000FE0  
           ___wmul@multiplicand 0082                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_LVP$ON 000000                             l350 2056                             l336 1E1A  
                           l345 2042                             l381 1F4C                             l382 1F54  
                           l375 1A14                             l368 13CC                             l385 1F80  
                           l386 1F88                             l389 1F20                             l582 1D94  
                  __CFG_CPB$OFF 000000                             _MAX 1F56                             _MIN 1F22  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 2058                    _rotatingSide 002D  
                           wreg 000FE8                            ?_MAX 0086                            ?_MIN 0086  
                          MAX@a 0086                            MAX@b 0088                            MIN@a 0086  
                          MIN@b 0088                    __CFG_WDT$OFF 000000                            l2100 1D28  
                          l2110 1D64                            l2102 1D32                            l2114 1D74  
                          l2210 19E2                            l2124 1E02                            l2204 19BE  
                          l2118 1D8A                            l2150 104E                            l2214 19FC  
                          l2136 2050                            l2160 11F0                            l2144 102A  
                          l2224 1AB0                            l2208 19D8                            l2154 10BC  
                          l2092 1CFC                            l2172 1330                            l2164 126C  
                          l2156 11DA                            l2228 1ABA                            l2086 1CE4  
                          l2174 1334                            l2254 1FE0                            l2098 1D1A  
                          l2178 13B6                            _LATC 000F8B                            u2305 1A22  
                          u2170 1028                            u2180 104C                            u2337 1E0A  
                          i2l93 173A               ??_initialRotation 0044                            _main 1FBE  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            fsr2l 000FD9  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00A2                   __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 008B  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                 __end_of_InitApp 1EAE  
         __end_of_setCorrection 1BD2                           ??_MAX 008A                           ??_MIN 008A  
    __size_of_sensorComputation 03C8                           ?_main 002E                 __end_of___awdiv 1D96  
                         _T0CON 000FD5                 ___awdiv@divisor 0082                           i2l211 1DEA  
                         i2l151 175A                           i2l235 2038                           i2l229 2014  
                         i2l192 1CC4                           i2l258 19AE                           i2l195 2082  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 2084  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                   _controlToLeft 001F                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                         _delay 1DEC                           _merge 2074                 __end_of_forward 2016  
               __end_of_low_isr 00A2                           tablat 000FF5                           plusw2 000FDB  
                         status 000FD8            ?_ConfigureOscillator 002E                 __initialization 1E30  
                  __end_of_main 1FEC                          ??_main 00F7                   __activetblptr 000002  
                        ?_delay 0080                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          ?_merge 003F                          _ADRESH 000FC4  
                        _ADRESL 000FC3                ___awdiv@dividend 0080                          i2l1200 1818  
                        i2l1202 181C                          i2l2010 16CE                          i2l2002 16A8  
                        i2l1220 189E                          i2l1212 185E                          i2l1230 18E2  
                        i2l1222 18A2                          i2l2022 170C                          i2l2014 16E6  
                        i2l2006 16B6                          i2l1224 18B2                          i2l1232 18E6  
                        i2l1216 187E                          i2l2032 1752                          i2l1242 1928  
                        i2l1218 188E                          i2l2026 1724                          i2l2018 16F4  
                        i2l1244 1938                          i2l1252 196A                          i2l1236 1906  
                        i2l1228 18D2                          i2l1270 1DB6                          i2l1254 197A  
                        i2l1190 17D4                          i2l1600 1C20                          i2l1256 198A  
                        i2l1184 17A4                          i2l1192 17D8                          i2l1274 1DD0  
                        i2l1602 1C24                          i2l1610 1C32                          i2l1186 17B4  
                        i2l1620 1C62                          i2l1604 1C28                          i2l1612 1C50  
                        i2l1188 17C4                          i2l1630 1C8C                          i2l1606 1C2C  
                        i2l1198 1808                          i2l1720 1EE2                          i2l1626 1C6A  
                        i2l1628 1C6E                          i2l1646 1CAA                          i2l1582 1BE4  
                        i2l1718 1ECC                          i2l1910 14E4                          i2l1584 1BE8  
                        i2l1592 1BF6                          i2l1904 14B6                          i2l1594 1C10  
                        i2l1922 1522                          i2l1914 14F2                          i2l1940 1570  
                        i2l1916 1502                          i2l1908 14D4                          i2l1782 1FA4  
                        i2l1950 15A6                          i2l1942 1582                          i2l1918 1512  
                        i2l1870 142A                          i2l1784 1FB2                          i2l1936 1554  
                        i2l1872 1430                          i2l1794 202A                          i2l1970 1600  
                        i2l1938 1562                          i2l1890 1492                          i2l1882 1464  
                        i2l1956 15C6                          i2l1876 1446                          i2l1990 1664  
                        i2l1982 1634                          i2l1974 160E                          i2l1958 15CC  
                        i2l1878 1450                          i2l1968 15F6                          i2l1888 1482  
                        i2l1896 149E                          i2l1994 167C                          i2l1986 164C  
                        i2l1978 1626                          i2l1898 14A8                          i2l1998 1692  
                        _INTCON 000FF2                          _OSCCON 000FD3                       ??_InitApp 0085  
         ??_ConfigureOscillator 0080                     merge@merged 0041                  __CFG_XINST$OFF 000000  
            sensorComputation@i 009A              sensorComputation@j 0098                  _controlToRight 0021  
              __end_of_high_isr 1794                          _cState 0059                          ___wmul 1EEA  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _pState 005B  
                        delay@x 0083                          clear_0 1E36                          clear_1 1E42  
              ___awdiv@quotient 0086                          _rotate 1EAE              __size_of_Reversing 001C  
                  __pdataCOMRAM 0058                       ??_forward 0041                    __mediumconst 0000  
                     ??_low_isr 002E                  _ReverseCounter 0013                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1E68                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 002E                  __pcstackCOMRAM 002E                   __end_of_delay 1E30  
                  ?_stateUpdate 002E                      _TurnedLeft 001B                 moveMouse@action 003F  
                 __end_of_merge 2084      __end_of_motorCounterUpdate 1CC6                 _initialRotation 1F8A  
                _ignoreControll 005A                  _ForwardCounter 000B                         ??_delay 0082  
                       ??_merge 0040                      __pbssBANK0 00F7              _AlgorithmSelection 203A  
                  _LTurnCounter 000D               __end_of_Reversing 2074                      _delay_time 0023  
         __end_of_singleForward 203A               _MotorDelayCounter 000F             ?_AlgorithmSelection 002E  
          setCorrection@sideAvg 008A                         ?___wmul 0080              __size_of_moveMouse 0008  
                       ?_rotate 002E                         _INTCON2 000FF1                         i2u40_40 182C  
                       i2u41_40 183C                         i2u52_40 18F6                         i2u44_40 186E  
                       i2u36_40 17E8                         i2u37_40 17F8                         _OSCTUNE 000F9B  
                       i2u64_40 1DA6                         i2u57_40 1948                         i2u49_40 18C2  
          ??_AlgorithmSelection 0080                       ?_high_isr 002E                         _Deadend 0009  
                 _LMotorCounter 0028                         _InitApp 1E72                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 1CC6                 __size_of___wmul 0038  
                       _deadEnd 002B         __end_of_initialRotation 1FBE                    __psmallconst 1000  
                       __pcinit 1E30                         __ramtop 1000                         __ptext0 1FBE  
                       __ptext1 1AD0                         __ptext2 19B0                         __ptext3 1006  
                       __ptext4 1EEA                         __ptext5 1CC6                         __ptext6 1F22  
                       __ptext7 1F56                         __ptext8 1E72                         __ptext9 1DEC  
               __size_of_rotate 003C                    __size_of_MAX 0034                    __size_of_MIN 0034  
                       _forward 1FEC                         delay@ms 0080                         _low_isr 0018  
                 ?_sensorUpdate 002E                      ??_high_isr 0045                  __pintcode_body 13CE  
        __size_of_setCorrection 0102            end_of_initialization 1E68                _sensorCorrection 00F7  
             __end_of_moveMouse 2096                   __Lmediumconst 0000                         int_func 13CE  
                    _justTurned 002C            __size_of_KController 0056                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
          __size_of_stateUpdate 021C                   _MOTORDELAYMAX 0058                       _TRISBbits 000F93  
                     _TRISEbits 000F96                  ??_sensorUpdate 009C     __end_of_ConfigureOscillator 208E  
                  _RTurnCounter 0011  sensorComputation@getCorrection 008D                   _setCorrection 1AD0  
              ?_initialRotation 0042                  __end_of___wmul 1F22                   __pidataCOMRAM 2096  
                   _TurnedRight 001D                  __end_of_rotate 1EEA             start_initialization 1E30  
                   __end_of_MAX 1F8A                     __end_of_MIN 1F56              _motorCounterUpdate 1BD2  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 003F                      merge@right 003F  
                     _Reversing 2058                  ?_setCorrection 002E                        ??___wmul 0084  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 0041                  _sensorLocation 1001  
          ??_motorCounterUpdate 0040                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 0019       sensorUpdate@getCorrection 00F2          sensorUpdate@sensorTemp 00A2  
             __size_of_high_isr 178C                        ?_InitApp 002E               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 002E                       _algorithm 002A                       __pintcode 0008  
         setCorrection@frontAvg 008C          motorCounterUpdate@side 0040                        ?___awdiv 0080  
          __end_of_sensorUpdate 1AD0          __end_of_sensorLocation 1005                     __pintcodelo 0018  
           initialRotation@side 0044                  _ChangeRequired 0027                     __smallconst 1000  
                      ?_forward 002E                        ?_low_isr 002E                       _oldErrorP 0025  
        __size_of_singleForward 0024                  __size_of_delay 0044     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 0084                       _moveMouse 208E  
               ??_setCorrection 0088                        i2u172_40 14C4                        i2u164_40 143C  
                      i2u166_40 145E                        i2u183_40 1594                        i2u184_40 15B4  
              __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2               ___wmul@multiplier 0080  
                     high_isr@a 0056                       copy_data0 1E5C                   _RMotorCounter 0029  
                    rotate@side 0041                   ??_KController 003F                      ?_moveMouse 002E  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 0040  
          sensorComputation@max 0092                        __Lrparam 0000            sensorComputation@min 0094  
          sensorComputation@sum 0096                     ??_Reversing 0041              __CFG_BOREN$SBORDIS 000000  
                 _singleForward 2016                   ??_stateUpdate 003F                __size_of___awdiv 00D0  
                      _TurnLeft 0017                __size_of_forward 002A                __size_of_low_isr 008A  
                      __ptext10 203A                        __ptext11 2084                        __ptext20 1EAE  
                      __ptext21 2058                        __ptext22 1BD2                        __ptext14 1794  
                      __ptext23 1D96                        __ptext15 2016                        __ptext16 1FEC  
                      __ptext17 208E                        __ptext18 2074                        __ptext19 1F8A  
                      _high_isr 0008                   __size_of_main 002E                   _RotateCounter 0015  
         __size_of_sensorUpdate 0120    __size_of_ConfigureOscillator 000A                  ?_singleForward 002E  
           __end_of_KController 1DEC               _sensorComputation 1006             __end_of_stateUpdate 19B0  
                    _INTCONbits 000FF2              ?_sensorComputation 008B        __size_of_initialRotation 0034  
                 sensorUpdate@i 00F3                   sensorUpdate@j 00F5                    _sensorUpdate 19B0  
                      intlevel1 0000                        intlevel2 0000             ??_sensorComputation 008E  
                   ??_moveMouse 003F        initialRotation@isDeadEnd 0042       __end_of_sensorComputation 13CE  
                   _sensorValue 0001     __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 003F  
               ??_singleForward 0041                     _KController 1D96  
