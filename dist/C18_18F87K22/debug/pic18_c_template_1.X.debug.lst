

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 15 19:32:35 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  00197A                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _controllerSteps
    41  00197A  0A                 	db	10
    42                           
    43                           	psect	smallconst
    44  001000                     __psmallconst:
    45                           	opt stack 0
    46  001000  00                 	db	0
    47  001001                     _sensorCorrection:
    48                           	opt stack 0
    49  001001  27                 	db	39
    50  001002  27                 	db	39
    51  001003  47                 	db	71
    52  001004  47                 	db	71
    53  001005                     __end_of_sensorCorrection:
    54                           	opt stack 0
    55  001005                     _sensorLocation:
    56                           	opt stack 0
    57  001005  1B                 	db	27
    58  001006  2B                 	db	43
    59  001007  1F                 	db	31
    60  001008  33                 	db	51
    61  001009                     __end_of_sensorLocation:
    62                           	opt stack 0
    63  0000                     _LATC	set	3979
    64  0000                     _OSCTUNE	set	3995
    65  0000                     _TRISBbits	set	3987
    66  0000                     _TRISC	set	3988
    67  0000                     _TRISEbits	set	3990
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON0bits	set	4034
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON2	set	4032
    72  0000                     _ADRESH	set	4036
    73  0000                     _ADRESL	set	4035
    74  0000                     _OSCCON	set	4051
    75  0000                     _T0CON	set	4053
    76  0000                     _INTCON	set	4082
    77  0000                     _INTCON2	set	4081
    78  0000                     _INTCONbits	set	4082
    79                           
    80                           ; #config settings
    81  001009  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           	psect	cinit
    84  001834                     __pcinit:
    85                           	opt stack 0
    86  001834                     start_initialization:
    87                           	opt stack 0
    88  001834                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to COMRAM (23 bytes)
    92  001834  EE00  F03F         	lfsr	0,__pbssCOMRAM
    93  001838  0E17               	movlw	23
    94  00183A                     clear_0:
    95  00183A  6AEE               	clrf	postinc0,c
    96  00183C  06E8               	decf	wreg,f,c
    97  00183E  E1FD               	bnz	clear_0
    98                           
    99                           ; Initialize objects allocated to COMRAM (1 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  001840  0E7A               	movlw	low __pidataCOMRAM
   102  001842  6EF6               	movwf	tblptrl,c
   103  001844  0E19               	movlw	high __pidataCOMRAM
   104  001846  6EF7               	movwf	tblptrh,c
   105  001848  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   106  00184A  6EF8               	movwf	tblptru,c
   107  00184C  0009               	tblrd		*+	;fetch initializer
   108  00184E  CFF5 F056          	movff	tablat,__pdataCOMRAM
   109  001852                     end_of_initialization:
   110                           	opt stack 0
   111  001852                     __end_of__initialization:
   112                           	opt stack 0
   113  001852  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114  001854  6EF8               	movwf	tblptru,c
   115  001856  0100               	movlb	0
   116  001858  EFA2  F00C         	goto	_main	;jump to C main() function
   117                           tblptru	equ	0xFF8
   118                           tblptrh	equ	0xFF7
   119                           tblptrl	equ	0xFF6
   120                           tablat	equ	0xFF5
   121                           postinc0	equ	0xFEE
   122                           wreg	equ	0xFE8
   123                           
   124                           	psect	bssCOMRAM
   125  00003F                     __pbssCOMRAM:
   126                           	opt stack 0
   127  00003F                     _sensorValue:
   128                           	opt stack 0
   129  00003F                     	ds	8
   130  000047                     _LTurnCounter:
   131                           	opt stack 0
   132  000047                     	ds	2
   133  000049                     _MotorDelayCounter:
   134                           	opt stack 0
   135  000049                     	ds	2
   136  00004B                     _RTurnCounter:
   137                           	opt stack 0
   138  00004B                     	ds	2
   139  00004D                     _ReverseCounter:
   140                           	opt stack 0
   141  00004D                     	ds	2
   142  00004F                     _RotateCounter:
   143                           	opt stack 0
   144  00004F                     	ds	2
   145  000051                     _delay_time:
   146                           	opt stack 0
   147  000051                     	ds	2
   148  000053                     _LMotorCounter:
   149                           	opt stack 0
   150  000053                     	ds	1
   151  000054                     _RMotorCounter:
   152                           	opt stack 0
   153  000054                     	ds	1
   154  000055                     _algorithm:
   155                           	opt stack 0
   156  000055                     	ds	1
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	dataCOMRAM
   165  000056                     __pdataCOMRAM:
   166                           	opt stack 0
   167  000056                     _controllerSteps:
   168                           	opt stack 0
   169  000056                     	ds	1
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	cstackBANK0
   178  000080                     __pcstackBANK0:
   179                           	opt stack 0
   180  000080                     sensorComputation@max:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0x0
   184  000080                     	ds	2
   185  000082                     sensorComputation@min:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000082                     	ds	2
   190  000084                     sensorComputation@sum:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x4
   194  000084                     	ds	2
   195  000086                     sensorComputation@i:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x6
   199  000086                     	ds	2
   200  000088                     sensorComputation@j:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x8
   204  000088                     	ds	2
   205  00008A                     sensorUpdate@sensorTemp:
   206                           	opt stack 0
   207                           
   208                           ; 80 bytes @ 0xA
   209  00008A                     	ds	80
   210  0000DA                     sensorUpdate@i:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x5A
   214  0000DA                     	ds	2
   215  0000DC                     sensorUpdate@j:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x5C
   219  0000DC                     	ds	2
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	cstackCOMRAM
   228  000001                     __pcstackCOMRAM:
   229                           	opt stack 0
   230  000001                     ??_low_isr:
   231  000001                     
   232                           ; 0 bytes @ 0x0
   233  000001                     	ds	17
   234  000012                     ?_ABS:
   235                           	opt stack 0
   236  000012                     motorCounterUpdate@reverse:
   237                           	opt stack 0
   238  000012                     merge@right:
   239                           	opt stack 0
   240  000012                     moveMouse@action:
   241                           	opt stack 0
   242  000012                     ABS@x:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x11
   246  000012                     	ds	1
   247  000013                     motorCounterUpdate@side:
   248                           	opt stack 0
   249  000013                     merge@left:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x12
   253  000013                     	ds	1
   254  000014                     merge@merged:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x13
   258  000014                     	ds	1
   259  000015                     ??_KController:
   260                           
   261                           ; 0 bytes @ 0x14
   262  000015                     	ds	2
   263  000017                     KController@diff:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x16
   267  000017                     	ds	2
   268  000019                     KController@steps:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x18
   272  000019                     	ds	2
   273  00001B                     KController@correctTo:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x1A
   277  00001B                     	ds	1
   278  00001C                     ??_high_isr:
   279                           
   280                           ; 0 bytes @ 0x1B
   281  00001C                     	ds	14
   282  00002A                     ?___wmul:
   283                           	opt stack 0
   284  00002A                     ?___awdiv:
   285                           	opt stack 0
   286  00002A                     delay@ms:
   287                           	opt stack 0
   288  00002A                     ___wmul@multiplier:
   289                           	opt stack 0
   290  00002A                     ___awdiv@dividend:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x29
   294  00002A                     	ds	2
   295  00002C                     ??_delay:
   296  00002C                     ___wmul@multiplicand:
   297                           	opt stack 0
   298  00002C                     ___awdiv@divisor:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x2B
   302  00002C                     	ds	1
   303  00002D                     delay@x:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x2C
   307  00002D                     	ds	1
   308  00002E                     ___awdiv@counter:
   309                           	opt stack 0
   310  00002E                     ___wmul@product:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2D
   314  00002E                     	ds	1
   315  00002F                     ___awdiv@sign:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x2E
   319  00002F                     	ds	1
   320  000030                     ?_MIN:
   321                           	opt stack 0
   322  000030                     ?_MAX:
   323                           	opt stack 0
   324  000030                     MIN@a:
   325                           	opt stack 0
   326  000030                     MAX@a:
   327                           	opt stack 0
   328  000030                     ___awdiv@quotient:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x2F
   332  000030                     	ds	2
   333  000032                     MIN@b:
   334                           	opt stack 0
   335  000032                     MAX@b:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x31
   339  000032                     	ds	2
   340  000034                     ??_MIN:
   341  000034                     ??_MAX:
   342                           
   343                           ; 0 bytes @ 0x33
   344  000034                     	ds	1
   345  000035                     sensorComputation@sensorTemp:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x34
   349  000035                     	ds	2
   350  000037                     ??_sensorComputation:
   351                           
   352                           ; 0 bytes @ 0x36
   353  000037                     	ds	2
   354  000039                     ??_sensorUpdate:
   355                           
   356                           ; 0 bytes @ 0x38
   357  000039                     	ds	6
   358  00003F                     tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           
   365                           ; 0 bytes @ 0x3E
   366 ;;
   367 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   368 ;;
   369 ;; *************** function _main *****************
   370 ;; Defined at:
   371 ;;		line 41 in file "main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;		None               void
   378 ;; Registers used:
   379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;Total ram usage:        0 bytes
   390 ;; Hardware stack levels required when called:    7
   391 ;; This function calls:
   392 ;;		_ConfigureOscillator
   393 ;;		_InitApp
   394 ;;		_sensorUpdate
   395 ;; This function is called by:
   396 ;;		Startup code after reset
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text0
   401  001944                     __ptext0:
   402                           	opt stack 0
   403  001944                     _main:
   404                           	opt stack 24
   405                           
   406                           ;main.c: 44: ConfigureOscillator();
   407                           
   408                           ;incstack = 0
   409  001944  ECB4  F00C         	call	_ConfigureOscillator	;wreg free
   410                           
   411                           ;main.c: 47: InitApp();
   412  001948  ECE2  F00B         	call	_InitApp	;wreg free
   413  00194C  D000               	goto	l1658
   414  00194E                     l1658:
   415                           
   416                           ;main.c: 50: {
   417                           ;main.c: 51: sensorUpdate();
   418  00194E  EC1B  F009         	call	_sensorUpdate	;wreg free
   419  001952  D7FD               	goto	l1658
   420  001954  EF51  F000         	goto	start
   421  001958                     __end_of_main:
   422                           	opt stack 0
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           
   430 ;; *************** function _sensorUpdate *****************
   431 ;; Defined at:
   432 ;;		line 146 in file "user.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   437 ;;  j               2   92[BANK0 ] int 
   438 ;;  i               2   90[BANK0 ] int 
   439 ;; Return value:  Size  Location     Type
   440 ;;		None               void
   441 ;; Registers used:
   442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   451 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   452 ;;Total ram usage:       90 bytes
   453 ;; Hardware stack levels used:    1
   454 ;; Hardware stack levels required when called:    6
   455 ;; This function calls:
   456 ;;		___wmul
   457 ;;		_sensorComputation
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text1
   464  001236                     __ptext1:
   465                           	opt stack 0
   466  001236                     _sensorUpdate:
   467                           	opt stack 24
   468                           
   469                           ;user.c: 148: int i,j;
   470                           ;user.c: 149: int sensorTemp[4][10];
   471                           ;user.c: 152: for(i = 0; i < 10; i++)
   472                           
   473                           ;incstack = 0
   474  001236  0E00               	movlw	0
   475  001238  0100               	movlb	0	; () banked
   476  00123A  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   477  00123C  0E00               	movlw	0
   478  00123E  6FDA               	movwf	sensorUpdate@i& (0+255),b
   479                           
   480                           ; BSR set to: 0
   481  001240  0100               	movlb	0	; () banked
   482  001242  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   483  001244  D00A               	goto	l1624
   484  001246  0100               	movlb	0	; () banked
   485  001248  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   486  00124A  E106               	bnz	u1160
   487  00124C  0E0A               	movlw	10
   488  00124E  0100               	movlb	0	; () banked
   489  001250  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   490  001252  B0D8               	btfsc	status,0,c
   491  001254  D0CF               	goto	l1652
   492  001256  D001               	goto	l1624
   493  001258                     u1160:
   494                           
   495                           ; BSR set to: 0
   496  001258  D0CD               	goto	l1652
   497  00125A                     l1624:
   498                           
   499                           ; BSR set to: 0
   500                           ;user.c: 153: {
   501                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   502  00125A  0E00               	movlw	0
   503  00125C  0100               	movlb	0	; () banked
   504  00125E  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   505  001260  0E00               	movlw	0
   506  001262  6FDC               	movwf	sensorUpdate@j& (0+255),b
   507                           
   508                           ; BSR set to: 0
   509  001264  0100               	movlb	0	; () banked
   510  001266  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   511  001268  D00A               	goto	l1630
   512  00126A  0100               	movlb	0	; () banked
   513  00126C  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   514  00126E  E106               	bnz	u1170
   515  001270  0E04               	movlw	4
   516  001272  0100               	movlb	0	; () banked
   517  001274  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   518  001276  B0D8               	btfsc	status,0,c
   519  001278  D0B2               	goto	l1648
   520  00127A  D001               	goto	l1630
   521  00127C                     u1170:
   522                           
   523                           ; BSR set to: 0
   524  00127C  D0B0               	goto	l1648
   525  00127E                     l1630:
   526                           
   527                           ; BSR set to: 0
   528                           ;user.c: 155: {
   529                           ;user.c: 156: ADCON0 = sensorLocation[j];
   530  00127E  0E05               	movlw	low _sensorLocation
   531  001280  0100               	movlb	0	; () banked
   532  001282  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   533  001284  6EF6               	movwf	tblptrl,c
   534  001286  0E10               	movlw	high _sensorLocation
   535  001288  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   536  00128A  6EF7               	movwf	tblptrh,c
   537  00128C                     	if	0	;There are less than 3 active tblptr bytes
   538  00128C                     	endif
   539  00128C  0008               	tblrd		*
   540  00128E  CFF5 FFC2          	movff	tablat,4034	;volatile
   541                           
   542                           ; BSR set to: 0
   543                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   544  001292  82C2               	bsf	4034,1,c	;volatile
   545                           
   546                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   547  001294  D000               	goto	l235
   548  001296                     l235:
   549  001296  B2C2               	btfsc	4034,1,c	;volatile
   550  001298  D7FE               	goto	l235
   551                           
   552                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   553  00129A  CFC3 F039          	movff	4035,??_sensorUpdate	;volatile
   554  00129E  0E06               	movlw	6
   555  0012A0  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   556  0012A2                     u1195:
   557  0012A2  90D8               	bcf	status,0,c
   558  0012A4  3239               	rrcf	??_sensorUpdate,f,c
   559  0012A6  2E3A               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   560  0012A8  D7FC               	goto	u1195
   561  0012AA  5039               	movf	??_sensorUpdate,w,c
   562  0012AC  CFC4 F03B          	movff	4036,??_sensorUpdate+2	;volatile
   563  0012B0  6A3C               	clrf	(??_sensorUpdate+3)& (0+255),c
   564  0012B2  90D8               	bcf	status,0,c
   565  0012B4  363B               	rlcf	??_sensorUpdate+2,f,c
   566  0012B6  363C               	rlcf	??_sensorUpdate+3,f,c
   567  0012B8  90D8               	bcf	status,0,c
   568  0012BA  363B               	rlcf	??_sensorUpdate+2,f,c
   569  0012BC  363C               	rlcf	??_sensorUpdate+3,f,c
   570  0012BE  263B               	addwf	??_sensorUpdate+2,f,c
   571  0012C0  0E00               	movlw	0
   572  0012C2  223C               	addwfc	??_sensorUpdate+3,f,c
   573  0012C4  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   574  0012C8  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   575  0012CC  0E00               	movlw	0
   576  0012CE  6E2D               	movwf	___wmul@multiplicand+1,c
   577  0012D0  0E14               	movlw	20
   578  0012D2  6E2C               	movwf	___wmul@multiplicand,c
   579  0012D4  EC2E  F00C         	call	___wmul	;wreg free
   580  0012D8  0E8A               	movlw	low sensorUpdate@sensorTemp
   581  0012DA  6E3D               	movwf	(??_sensorUpdate+4)& (0+255),c
   582  0012DC  0E00               	movlw	high sensorUpdate@sensorTemp
   583  0012DE  6E3E               	movwf	(??_sensorUpdate+5)& (0+255),c
   584  0012E0  502A               	movf	?___wmul,w,c
   585  0012E2  263D               	addwf	??_sensorUpdate+4,f,c
   586  0012E4  502B               	movf	?___wmul+1,w,c
   587  0012E6  223E               	addwfc	??_sensorUpdate+5,f,c
   588  0012E8  90D8               	bcf	status,0,c
   589  0012EA  0100               	movlb	0	; () banked
   590  0012EC  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   591  0012EE  6ED9               	movwf	fsr2l,c
   592  0012F0  0100               	movlb	0	; () banked
   593  0012F2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   594  0012F4  6EDA               	movwf	fsr2h,c
   595  0012F6  503D               	movf	??_sensorUpdate+4,w,c
   596  0012F8  26D9               	addwf	fsr2l,f,c
   597  0012FA  503E               	movf	??_sensorUpdate+5,w,c
   598  0012FC  22DA               	addwfc	fsr2h,f,c
   599  0012FE  C03B  FFDE         	movff	??_sensorUpdate+2,postinc2
   600  001302  C03C  FFDD         	movff	??_sensorUpdate+3,postdec2
   601                           
   602                           ; BSR set to: 0
   603                           ;user.c: 163: if(j == 0 || j == 3)
   604  001306  0100               	movlb	0	; () banked
   605  001308  51DC               	movf	sensorUpdate@j& (0+255),w,b
   606  00130A  0100               	movlb	0	; () banked
   607  00130C  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   608  00130E  B4D8               	btfsc	status,2,c
   609  001310  D007               	goto	l1640
   610                           
   611                           ; BSR set to: 0
   612  001312  0E03               	movlw	3
   613  001314  0100               	movlb	0	; () banked
   614  001316  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   615  001318  0100               	movlb	0	; () banked
   616  00131A  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   617  00131C  A4D8               	btfss	status,2,c
   618  00131E  D02A               	goto	l1642
   619  001320                     l1640:
   620                           
   621                           ; BSR set to: 0
   622                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   623  001320  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   624  001324  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   625  001328  0E00               	movlw	0
   626  00132A  6E2D               	movwf	___wmul@multiplicand+1,c
   627  00132C  0E14               	movlw	20
   628  00132E  6E2C               	movwf	___wmul@multiplicand,c
   629  001330  EC2E  F00C         	call	___wmul	;wreg free
   630  001334  0E8A               	movlw	low sensorUpdate@sensorTemp
   631  001336  6E39               	movwf	??_sensorUpdate& (0+255),c
   632  001338  0E00               	movlw	high sensorUpdate@sensorTemp
   633  00133A  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   634  00133C  502A               	movf	?___wmul,w,c
   635  00133E  2639               	addwf	??_sensorUpdate,f,c
   636  001340  502B               	movf	?___wmul+1,w,c
   637  001342  223A               	addwfc	??_sensorUpdate+1,f,c
   638  001344  90D8               	bcf	status,0,c
   639  001346  0100               	movlb	0	; () banked
   640  001348  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   641  00134A  6ED9               	movwf	fsr2l,c
   642  00134C  0100               	movlb	0	; () banked
   643  00134E  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   644  001350  6EDA               	movwf	fsr2h,c
   645  001352  5039               	movf	??_sensorUpdate,w,c
   646  001354  26D9               	addwf	fsr2l,f,c
   647  001356  503A               	movf	??_sensorUpdate+1,w,c
   648  001358  22DA               	addwfc	fsr2h,f,c
   649  00135A  0E01               	movlw	low _sensorCorrection
   650  00135C  0100               	movlb	0	; () banked
   651  00135E  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   652  001360  6EF6               	movwf	tblptrl,c
   653  001362  0E10               	movlw	high _sensorCorrection
   654  001364  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   655  001366  6EF7               	movwf	tblptrh,c
   656  001368                     	if	0	;There are less than 3 active tblptr bytes
   657  001368                     	endif
   658  001368  0008               	tblrd		*
   659  00136A  50F5               	movf	tablat,w,c
   660  00136C  5EDE               	subwf	postinc2,f,c
   661  00136E  0E00               	movlw	0
   662  001370  5ADD               	subwfb	postdec2,f,c
   663  001372  D02A               	goto	l1644
   664  001374                     l1642:
   665                           
   666                           ; BSR set to: 0
   667                           ;user.c: 165: else
   668                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   669  001374  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   670  001378  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   671  00137C  0E00               	movlw	0
   672  00137E  6E2D               	movwf	___wmul@multiplicand+1,c
   673  001380  0E14               	movlw	20
   674  001382  6E2C               	movwf	___wmul@multiplicand,c
   675  001384  EC2E  F00C         	call	___wmul	;wreg free
   676  001388  0E8A               	movlw	low sensorUpdate@sensorTemp
   677  00138A  6E39               	movwf	??_sensorUpdate& (0+255),c
   678  00138C  0E00               	movlw	high sensorUpdate@sensorTemp
   679  00138E  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   680  001390  502A               	movf	?___wmul,w,c
   681  001392  2639               	addwf	??_sensorUpdate,f,c
   682  001394  502B               	movf	?___wmul+1,w,c
   683  001396  223A               	addwfc	??_sensorUpdate+1,f,c
   684  001398  90D8               	bcf	status,0,c
   685  00139A  0100               	movlb	0	; () banked
   686  00139C  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   687  00139E  6ED9               	movwf	fsr2l,c
   688  0013A0  0100               	movlb	0	; () banked
   689  0013A2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   690  0013A4  6EDA               	movwf	fsr2h,c
   691  0013A6  5039               	movf	??_sensorUpdate,w,c
   692  0013A8  26D9               	addwf	fsr2l,f,c
   693  0013AA  503A               	movf	??_sensorUpdate+1,w,c
   694  0013AC  22DA               	addwfc	fsr2h,f,c
   695  0013AE  0E01               	movlw	low _sensorCorrection
   696  0013B0  0100               	movlb	0	; () banked
   697  0013B2  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   698  0013B4  6EF6               	movwf	tblptrl,c
   699  0013B6  0E10               	movlw	high _sensorCorrection
   700  0013B8  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   701  0013BA  6EF7               	movwf	tblptrh,c
   702  0013BC                     	if	0	;There are less than 3 active tblptr bytes
   703  0013BC                     	endif
   704  0013BC  0008               	tblrd		*
   705  0013BE  50F5               	movf	tablat,w,c
   706  0013C0  26DE               	addwf	postinc2,f,c
   707  0013C2  0E00               	movlw	0
   708  0013C4  22DD               	addwfc	postdec2,f,c
   709  0013C6  D000               	goto	l1644
   710  0013C8                     l1644:
   711                           
   712                           ; BSR set to: 0
   713  0013C8  0100               	movlb	0	; () banked
   714  0013CA  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   715  0013CC  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   716                           
   717                           ; BSR set to: 0
   718  0013CE  0100               	movlb	0	; () banked
   719  0013D0  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   720  0013D2  D755               	goto	l1630
   721  0013D4  0100               	movlb	0	; () banked
   722  0013D6  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   723  0013D8  E102               	bnz	l1648
   724  0013DA  D74A               	goto	L1
   725  0013DC  D000               	goto	l1648
   726  0013DE                     l1648:
   727                           
   728                           ; BSR set to: 0
   729  0013DE  0100               	movlb	0	; () banked
   730  0013E0  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   731  0013E2  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   732                           
   733                           ; BSR set to: 0
   734  0013E4  0100               	movlb	0	; () banked
   735  0013E6  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   736  0013E8  D738               	goto	l1624
   737  0013EA  0100               	movlb	0	; () banked
   738  0013EC  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   739  0013EE  E102               	bnz	l1652
   740  0013F0  D72D               	goto	L2
   741  0013F2  D000               	goto	l1652
   742  0013F4                     l1652:
   743                           
   744                           ; BSR set to: 0
   745                           ;user.c: 167: }
   746                           ;user.c: 168: }
   747                           ;user.c: 171: sensorComputation(sensorTemp);
   748  0013F4  0E8A               	movlw	low sensorUpdate@sensorTemp
   749  0013F6  6E35               	movwf	sensorComputation@sensorTemp,c
   750  0013F8  0E00               	movlw	high sensorUpdate@sensorTemp
   751  0013FA  6E36               	movwf	sensorComputation@sensorTemp+1,c
   752  0013FC  EC05  F008         	call	_sensorComputation	;wreg free
   753  001400  0012               	return		;funcret
   754  001402                     __end_of_sensorUpdate:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postinc2	equ	0xFDE
   763                           postdec2	equ	0xFDD
   764                           fsr2h	equ	0xFDA
   765                           fsr2l	equ	0xFD9
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _sensorComputation *****************
   769 ;; Defined at:
   770 ;;		line 125 in file "user.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  sensorTemp      2   52[COMRAM] PTR int [10]
   773 ;;		 -> sensorUpdate@sensorTemp(80), 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  j               2    8[BANK0 ] int 
   776 ;;  i               2    6[BANK0 ] int 
   777 ;;  sum             2    4[BANK0 ] int 
   778 ;;  min             2    2[BANK0 ] int 
   779 ;;  max             2    0[BANK0 ] int 
   780 ;; Return value:  Size  Location     Type
   781 ;;		None               void
   782 ;; Registers used:
   783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   793 ;;Total ram usage:       14 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; Hardware stack levels required when called:    5
   796 ;; This function calls:
   797 ;;		_MAX
   798 ;;		_MIN
   799 ;;		___awdiv
   800 ;;		___wmul
   801 ;; This function is called by:
   802 ;;		_sensorUpdate
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text2
   807  00100A                     __ptext2:
   808                           	opt stack 0
   809  00100A                     _sensorComputation:
   810                           	opt stack 24
   811                           
   812                           ;user.c: 127: int max,min,i,j,sum;
   813                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   814                           
   815                           ;incstack = 0
   816  00100A  0E00               	movlw	0
   817  00100C  0100               	movlb	0	; () banked
   818  00100E  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   819  001010  0E00               	movlw	0
   820  001012  6F86               	movwf	sensorComputation@i& (0+255),b
   821                           
   822                           ; BSR set to: 0
   823  001014  0100               	movlb	0	; () banked
   824  001016  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   825  001018  D00A               	goto	l1594
   826  00101A  0100               	movlb	0	; () banked
   827  00101C  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   828  00101E  E106               	bnz	u1110
   829  001020  0E04               	movlw	4
   830  001022  0100               	movlb	0	; () banked
   831  001024  5D86               	subwf	sensorComputation@i& (0+255),w,b
   832  001026  B0D8               	btfsc	status,0,c
   833  001028  D105               	goto	l228
   834  00102A  D001               	goto	l1594
   835  00102C                     u1110:
   836                           
   837                           ; BSR set to: 0
   838  00102C  D103               	goto	l228
   839  00102E                     l1594:
   840                           
   841                           ; BSR set to: 0
   842                           ;user.c: 129: {
   843                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   844  00102E  0E00               	movlw	0
   845  001030  0100               	movlb	0	; () banked
   846  001032  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   847  001034  0E00               	movlw	0
   848  001036  6F88               	movwf	sensorComputation@j& (0+255),b
   849                           
   850                           ; BSR set to: 0
   851  001038  0100               	movlb	0	; () banked
   852  00103A  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   853  00103C  D00A               	goto	l1600
   854  00103E  0100               	movlb	0	; () banked
   855  001040  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   856  001042  E106               	bnz	u1120
   857  001044  0E0A               	movlw	10
   858  001046  0100               	movlb	0	; () banked
   859  001048  5D88               	subwf	sensorComputation@j& (0+255),w,b
   860  00104A  B0D8               	btfsc	status,0,c
   861  00104C  D0B7               	goto	l1610
   862  00104E  D001               	goto	l1600
   863  001050                     u1120:
   864                           
   865                           ; BSR set to: 0
   866  001050  D0B5               	goto	l1610
   867  001052                     l1600:
   868                           
   869                           ; BSR set to: 0
   870                           ;user.c: 131: {
   871                           ;user.c: 132: if(j == 0)
   872  001052  0100               	movlb	0	; () banked
   873  001054  5188               	movf	sensorComputation@j& (0+255),w,b
   874  001056  0100               	movlb	0	; () banked
   875  001058  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   876  00105A  A4D8               	btfss	status,2,c
   877  00105C  D02A               	goto	l1604
   878                           
   879                           ; BSR set to: 0
   880                           ;user.c: 133: {
   881                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   882  00105E  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   883  001062  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   884  001066  0E00               	movlw	0
   885  001068  6E2D               	movwf	___wmul@multiplicand+1,c
   886  00106A  0E14               	movlw	20
   887  00106C  6E2C               	movwf	___wmul@multiplicand,c
   888  00106E  EC2E  F00C         	call	___wmul	;wreg free
   889  001072  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   890  001076  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   891  00107A  502A               	movf	?___wmul,w,c
   892  00107C  2637               	addwf	??_sensorComputation,f,c
   893  00107E  502B               	movf	?___wmul+1,w,c
   894  001080  2238               	addwfc	??_sensorComputation+1,f,c
   895  001082  90D8               	bcf	status,0,c
   896  001084  0100               	movlb	0	; () banked
   897  001086  3588               	rlcf	sensorComputation@j& (0+255),w,b
   898  001088  6ED9               	movwf	fsr2l,c
   899  00108A  0100               	movlb	0	; () banked
   900  00108C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   901  00108E  6EDA               	movwf	fsr2h,c
   902  001090  5037               	movf	??_sensorComputation,w,c
   903  001092  26D9               	addwf	fsr2l,f,c
   904  001094  5038               	movf	??_sensorComputation+1,w,c
   905  001096  22DA               	addwfc	fsr2h,f,c
   906  001098  CFDE F080          	movff	postinc2,sensorComputation@max
   907  00109C  CFDD F081          	movff	postdec2,sensorComputation@max+1
   908  0010A0  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   909  0010A4  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   910  0010A8  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   911  0010AC  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   912                           
   913                           ;user.c: 135: continue;
   914  0010B0  D07A               	goto	l1606
   915  0010B2                     l1604:
   916                           
   917                           ; BSR set to: 0
   918                           ;user.c: 136: }
   919                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   920  0010B2  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   921  0010B6  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   922  0010BA  0E00               	movlw	0
   923  0010BC  6E2D               	movwf	___wmul@multiplicand+1,c
   924  0010BE  0E14               	movlw	20
   925  0010C0  6E2C               	movwf	___wmul@multiplicand,c
   926  0010C2  EC2E  F00C         	call	___wmul	;wreg free
   927  0010C6  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   928  0010CA  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   929  0010CE  502A               	movf	?___wmul,w,c
   930  0010D0  2637               	addwf	??_sensorComputation,f,c
   931  0010D2  502B               	movf	?___wmul+1,w,c
   932  0010D4  2238               	addwfc	??_sensorComputation+1,f,c
   933  0010D6  90D8               	bcf	status,0,c
   934  0010D8  0100               	movlb	0	; () banked
   935  0010DA  3588               	rlcf	sensorComputation@j& (0+255),w,b
   936  0010DC  6ED9               	movwf	fsr2l,c
   937  0010DE  0100               	movlb	0	; () banked
   938  0010E0  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   939  0010E2  6EDA               	movwf	fsr2h,c
   940  0010E4  5037               	movf	??_sensorComputation,w,c
   941  0010E6  26D9               	addwf	fsr2l,f,c
   942  0010E8  5038               	movf	??_sensorComputation+1,w,c
   943  0010EA  22DA               	addwfc	fsr2h,f,c
   944  0010EC  CFDE F030          	movff	postinc2,MIN@a
   945  0010F0  CFDD F031          	movff	postdec2,MIN@a+1
   946  0010F4  C082  F032         	movff	sensorComputation@min,MIN@b
   947  0010F8  C083  F033         	movff	sensorComputation@min+1,MIN@b+1
   948  0010FC  EC42  F00C         	call	_MIN	;wreg free
   949  001100  C030  F082         	movff	?_MIN,sensorComputation@min
   950  001104  C031  F083         	movff	?_MIN+1,sensorComputation@min+1
   951                           
   952                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   953  001108  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   954  00110C  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   955  001110  0E00               	movlw	0
   956  001112  6E2D               	movwf	___wmul@multiplicand+1,c
   957  001114  0E14               	movlw	20
   958  001116  6E2C               	movwf	___wmul@multiplicand,c
   959  001118  EC2E  F00C         	call	___wmul	;wreg free
   960  00111C  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   961  001120  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   962  001124  502A               	movf	?___wmul,w,c
   963  001126  2637               	addwf	??_sensorComputation,f,c
   964  001128  502B               	movf	?___wmul+1,w,c
   965  00112A  2238               	addwfc	??_sensorComputation+1,f,c
   966  00112C  90D8               	bcf	status,0,c
   967  00112E  0100               	movlb	0	; () banked
   968  001130  3588               	rlcf	sensorComputation@j& (0+255),w,b
   969  001132  6ED9               	movwf	fsr2l,c
   970  001134  0100               	movlb	0	; () banked
   971  001136  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   972  001138  6EDA               	movwf	fsr2h,c
   973  00113A  5037               	movf	??_sensorComputation,w,c
   974  00113C  26D9               	addwf	fsr2l,f,c
   975  00113E  5038               	movf	??_sensorComputation+1,w,c
   976  001140  22DA               	addwfc	fsr2h,f,c
   977  001142  CFDE F030          	movff	postinc2,MAX@a
   978  001146  CFDD F031          	movff	postdec2,MAX@a+1
   979  00114A  C080  F032         	movff	sensorComputation@max,MAX@b
   980  00114E  C081  F033         	movff	sensorComputation@max+1,MAX@b+1
   981  001152  EC56  F00C         	call	_MAX	;wreg free
   982  001156  C030  F080         	movff	?_MAX,sensorComputation@max
   983  00115A  C031  F081         	movff	?_MAX+1,sensorComputation@max+1
   984                           
   985                           ;user.c: 139: sum += sensorTemp[i][j];
   986  00115E  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   987  001162  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   988  001166  0E00               	movlw	0
   989  001168  6E2D               	movwf	___wmul@multiplicand+1,c
   990  00116A  0E14               	movlw	20
   991  00116C  6E2C               	movwf	___wmul@multiplicand,c
   992  00116E  EC2E  F00C         	call	___wmul	;wreg free
   993  001172  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   994  001176  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   995  00117A  502A               	movf	?___wmul,w,c
   996  00117C  2637               	addwf	??_sensorComputation,f,c
   997  00117E  502B               	movf	?___wmul+1,w,c
   998  001180  2238               	addwfc	??_sensorComputation+1,f,c
   999  001182  90D8               	bcf	status,0,c
  1000  001184  0100               	movlb	0	; () banked
  1001  001186  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1002  001188  6ED9               	movwf	fsr2l,c
  1003  00118A  0100               	movlb	0	; () banked
  1004  00118C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1005  00118E  6EDA               	movwf	fsr2h,c
  1006  001190  5037               	movf	??_sensorComputation,w,c
  1007  001192  26D9               	addwf	fsr2l,f,c
  1008  001194  5038               	movf	??_sensorComputation+1,w,c
  1009  001196  22DA               	addwfc	fsr2h,f,c
  1010  001198  50DE               	movf	postinc2,w,c
  1011  00119A  0100               	movlb	0	; () banked
  1012  00119C  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1013  00119E  50DD               	movf	postdec2,w,c
  1014  0011A0  0100               	movlb	0	; () banked
  1015  0011A2  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1016  0011A4  D000               	goto	l1606
  1017  0011A6                     l1606:
  1018                           
  1019                           ; BSR set to: 0
  1020  0011A6  0100               	movlb	0	; () banked
  1021  0011A8  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1022  0011AA  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1023                           
  1024                           ; BSR set to: 0
  1025  0011AC  0100               	movlb	0	; () banked
  1026  0011AE  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1027  0011B0  D750               	goto	l1600
  1028  0011B2  0100               	movlb	0	; () banked
  1029  0011B4  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1030  0011B6  E102               	bnz	l1610
  1031  0011B8  D745               	goto	L3
  1032  0011BA  D000               	goto	l1610
  1033  0011BC                     l1610:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;user.c: 140: }
  1037                           ;user.c: 141: sum = sum - min - max;
  1038  0011BC  0100               	movlb	0	; () banked
  1039  0011BE  5180               	movf	sensorComputation@max& (0+255),w,b
  1040  0011C0  0100               	movlb	0	; () banked
  1041  0011C2  2582               	addwf	sensorComputation@min& (0+255),w,b
  1042  0011C4  6E37               	movwf	??_sensorComputation& (0+255),c
  1043  0011C6  0100               	movlb	0	; () banked
  1044  0011C8  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1045  0011CA  0100               	movlb	0	; () banked
  1046  0011CC  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1047  0011CE  6E38               	movwf	(??_sensorComputation+1)& (0+255),c
  1048  0011D0  1E37               	comf	??_sensorComputation,f,c
  1049  0011D2  1E38               	comf	??_sensorComputation+1,f,c
  1050  0011D4  4A37               	infsnz	??_sensorComputation,f,c
  1051  0011D6  2A38               	incf	??_sensorComputation+1,f,c
  1052  0011D8  0100               	movlb	0	; () banked
  1053  0011DA  5184               	movf	sensorComputation@sum& (0+255),w,b
  1054  0011DC  2437               	addwf	??_sensorComputation,w,c
  1055  0011DE  0100               	movlb	0	; () banked
  1056  0011E0  6F84               	movwf	sensorComputation@sum& (0+255),b
  1057  0011E2  0100               	movlb	0	; () banked
  1058  0011E4  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1059  0011E6  2038               	addwfc	??_sensorComputation+1,w,c
  1060  0011E8  0100               	movlb	0	; () banked
  1061  0011EA  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1065  0011EC  C084  F02A         	movff	sensorComputation@sum,___awdiv@dividend
  1066  0011F0  C085  F02B         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1067  0011F4  0E00               	movlw	0
  1068  0011F6  6E2D               	movwf	___awdiv@divisor+1,c
  1069  0011F8  0E08               	movlw	8
  1070  0011FA  6E2C               	movwf	___awdiv@divisor,c
  1071  0011FC  EC97  F00B         	call	___awdiv	;wreg free
  1072  001200  90D8               	bcf	status,0,c
  1073  001202  0100               	movlb	0	; () banked
  1074  001204  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1075  001206  6ED9               	movwf	fsr2l,c
  1076  001208  0100               	movlb	0	; () banked
  1077  00120A  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1078  00120C  6EDA               	movwf	fsr2h,c
  1079  00120E  0E3F               	movlw	low _sensorValue
  1080  001210  26D9               	addwf	fsr2l,f,c
  1081  001212  0E00               	movlw	high _sensorValue
  1082  001214  22DA               	addwfc	fsr2h,f,c
  1083  001216  C02A  FFDE         	movff	?___awdiv,postinc2
  1084  00121A  C02B  FFDD         	movff	?___awdiv+1,postdec2
  1085                           
  1086                           ; BSR set to: 0
  1087  00121E  0100               	movlb	0	; () banked
  1088  001220  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1089  001222  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1090                           
  1091                           ; BSR set to: 0
  1092  001224  0100               	movlb	0	; () banked
  1093  001226  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1094  001228  D702               	goto	l1594
  1095  00122A  0100               	movlb	0	; () banked
  1096  00122C  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1097  00122E  E102               	bnz	l228
  1098  001230  D6F7               	goto	L4
  1099  001232  D000               	goto	l228
  1100  001234                     l228:
  1101                           
  1102                           ; BSR set to: 0
  1103  001234  0012               	return		;funcret
  1104  001236                     __end_of_sensorComputation:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postinc2	equ	0xFDE
  1113                           postdec2	equ	0xFDD
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function ___wmul *****************
  1119 ;; Defined at:
  1120 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  multiplier      2   41[COMRAM] unsigned int 
  1123 ;;  multiplicand    2   43[COMRAM] unsigned int 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  product         2   45[COMRAM] unsigned int 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  2   41[COMRAM] unsigned int 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0, prodl, prodh
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;Total ram usage:        6 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; Hardware stack levels required when called:    4
  1142 ;; This function calls:
  1143 ;;		Nothing
  1144 ;; This function is called by:
  1145 ;;		_sensorComputation
  1146 ;;		_sensorUpdate
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text3
  1151  00185C                     __ptext3:
  1152                           	opt stack 0
  1153  00185C                     ___wmul:
  1154                           	opt stack 24
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;incstack = 0
  1158  00185C  502A               	movf	___wmul@multiplier,w,c
  1159  00185E  022C               	mulwf	___wmul@multiplicand,c
  1160  001860  CFF3 F02E          	movff	prodl,___wmul@product
  1161  001864  CFF4 F02F          	movff	prodh,___wmul@product+1
  1162  001868  502A               	movf	___wmul@multiplier,w,c
  1163  00186A  022D               	mulwf	___wmul@multiplicand+1,c
  1164  00186C  50F3               	movf	prodl,w,c
  1165  00186E  262F               	addwf	___wmul@product+1,f,c
  1166  001870  502B               	movf	___wmul@multiplier+1,w,c
  1167  001872  022C               	mulwf	___wmul@multiplicand,c
  1168  001874  50F3               	movf	prodl,w,c
  1169  001876  262F               	addwf	___wmul@product+1,f,c
  1170  001878  C02E  F02A         	movff	___wmul@product,?___wmul
  1171  00187C  C02F  F02B         	movff	___wmul@product+1,?___wmul+1
  1172  001880  D000               	goto	l253
  1173  001882                     l253:
  1174  001882  0012               	return		;funcret
  1175  001884                     __end_of___wmul:
  1176                           	opt stack 0
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           prodh	equ	0xFF4
  1182                           prodl	equ	0xFF3
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           postinc2	equ	0xFDE
  1186                           postdec2	equ	0xFDD
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function ___awdiv *****************
  1192 ;; Defined at:
  1193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  dividend        2   41[COMRAM] int 
  1196 ;;  divisor         2   43[COMRAM] int 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  quotient        2   47[COMRAM] int 
  1199 ;;  sign            1   46[COMRAM] unsigned char 
  1200 ;;  counter         1   45[COMRAM] unsigned char 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  2   41[COMRAM] int 
  1203 ;; Registers used:
  1204 ;;		wreg, status,2, status,0
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1210 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;Total ram usage:        8 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    4
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_sensorComputation
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           	psect	text4
  1225  00172E                     __ptext4:
  1226                           	opt stack 0
  1227  00172E                     ___awdiv:
  1228                           	opt stack 24
  1229                           
  1230                           ;incstack = 0
  1231  00172E  0E00               	movlw	0
  1232  001730  6E2F               	movwf	___awdiv@sign,c
  1233  001732  AE2D               	btfss	___awdiv@divisor+1,7,c
  1234  001734  D007               	goto	l1552
  1235  001736  6C2C               	negf	___awdiv@divisor,c
  1236  001738  1E2D               	comf	___awdiv@divisor+1,f,c
  1237  00173A  B0D8               	btfsc	status,0,c
  1238  00173C  2A2D               	incf	___awdiv@divisor+1,f,c
  1239  00173E  0E01               	movlw	1
  1240  001740  6E2F               	movwf	___awdiv@sign,c
  1241  001742  D000               	goto	l1552
  1242  001744                     l1552:
  1243  001744  AE2B               	btfss	___awdiv@dividend+1,7,c
  1244  001746  D007               	goto	l1558
  1245  001748  6C2A               	negf	___awdiv@dividend,c
  1246  00174A  1E2B               	comf	___awdiv@dividend+1,f,c
  1247  00174C  B0D8               	btfsc	status,0,c
  1248  00174E  2A2B               	incf	___awdiv@dividend+1,f,c
  1249  001750  0E01               	movlw	1
  1250  001752  1A2F               	xorwf	___awdiv@sign,f,c
  1251  001754  D000               	goto	l1558
  1252  001756                     l1558:
  1253  001756  0E00               	movlw	0
  1254  001758  6E31               	movwf	___awdiv@quotient+1,c
  1255  00175A  0E00               	movlw	0
  1256  00175C  6E30               	movwf	___awdiv@quotient,c
  1257  00175E  502C               	movf	___awdiv@divisor,w,c
  1258  001760  102D               	iorwf	___awdiv@divisor+1,w,c
  1259  001762  B4D8               	btfsc	status,2,c
  1260  001764  D021               	goto	l1580
  1261  001766  0E01               	movlw	1
  1262  001768  6E2E               	movwf	___awdiv@counter,c
  1263  00176A  D005               	goto	l1566
  1264  00176C                     l1564:
  1265  00176C  90D8               	bcf	status,0,c
  1266  00176E  362C               	rlcf	___awdiv@divisor,f,c
  1267  001770  362D               	rlcf	___awdiv@divisor+1,f,c
  1268  001772  2A2E               	incf	___awdiv@counter,f,c
  1269  001774  D000               	goto	l1566
  1270  001776                     l1566:
  1271  001776  BE2D               	btfsc	___awdiv@divisor+1,7,c
  1272  001778  D002               	goto	l1568
  1273  00177A  D7F8               	goto	l1564
  1274  00177C  D000               	goto	l1568
  1275  00177E                     l1568:
  1276  00177E  90D8               	bcf	status,0,c
  1277  001780  3630               	rlcf	___awdiv@quotient,f,c
  1278  001782  3631               	rlcf	___awdiv@quotient+1,f,c
  1279  001784  502C               	movf	___awdiv@divisor,w,c
  1280  001786  5C2A               	subwf	___awdiv@dividend,w,c
  1281  001788  502D               	movf	___awdiv@divisor+1,w,c
  1282  00178A  582B               	subwfb	___awdiv@dividend+1,w,c
  1283  00178C  A0D8               	btfss	status,0,c
  1284  00178E  D006               	goto	l1576
  1285  001790  502C               	movf	___awdiv@divisor,w,c
  1286  001792  5E2A               	subwf	___awdiv@dividend,f,c
  1287  001794  502D               	movf	___awdiv@divisor+1,w,c
  1288  001796  5A2B               	subwfb	___awdiv@dividend+1,f,c
  1289  001798  8030               	bsf	___awdiv@quotient,0,c
  1290  00179A  D000               	goto	l1576
  1291  00179C                     l1576:
  1292  00179C  90D8               	bcf	status,0,c
  1293  00179E  322D               	rrcf	___awdiv@divisor+1,f,c
  1294  0017A0  322C               	rrcf	___awdiv@divisor,f,c
  1295  0017A2  2E2E               	decfsz	___awdiv@counter,f,c
  1296  0017A4  D7EC               	goto	l1568
  1297  0017A6  D000               	goto	l1580
  1298  0017A8                     l1580:
  1299  0017A8  502F               	movf	___awdiv@sign,w,c
  1300  0017AA  B4D8               	btfsc	status,2,c
  1301  0017AC  D005               	goto	l1584
  1302  0017AE  6C30               	negf	___awdiv@quotient,c
  1303  0017B0  1E31               	comf	___awdiv@quotient+1,f,c
  1304  0017B2  B0D8               	btfsc	status,0,c
  1305  0017B4  2A31               	incf	___awdiv@quotient+1,f,c
  1306  0017B6  D000               	goto	l1584
  1307  0017B8                     l1584:
  1308  0017B8  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  1309  0017BC  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  1310  0017C0  D000               	goto	l446
  1311  0017C2                     l446:
  1312  0017C2  0012               	return		;funcret
  1313  0017C4                     __end_of___awdiv:
  1314                           	opt stack 0
  1315                           tblptru	equ	0xFF8
  1316                           tblptrh	equ	0xFF7
  1317                           tblptrl	equ	0xFF6
  1318                           tablat	equ	0xFF5
  1319                           prodh	equ	0xFF4
  1320                           prodl	equ	0xFF3
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postinc2	equ	0xFDE
  1324                           postdec2	equ	0xFDD
  1325                           fsr2h	equ	0xFDA
  1326                           fsr2l	equ	0xFD9
  1327                           status	equ	0xFD8
  1328                           
  1329 ;; *************** function _MIN *****************
  1330 ;; Defined at:
  1331 ;;		line 175 in file "user.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  a               2   47[COMRAM] int 
  1334 ;;  b               2   49[COMRAM] int 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  2   47[COMRAM] int 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;Total ram usage:        5 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    4
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_sensorComputation
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text5
  1361  001884                     __ptext5:
  1362                           	opt stack 0
  1363  001884                     _MIN:
  1364                           	opt stack 24
  1365                           
  1366                           ;user.c: 177: if(a>b) return b;
  1367                           
  1368                           ;incstack = 0
  1369  001884  5030               	movf	MIN@a,w,c
  1370  001886  5C32               	subwf	MIN@b,w,c
  1371  001888  5033               	movf	MIN@b+1,w,c
  1372  00188A  0A80               	xorlw	128
  1373  00188C  6E34               	movwf	??_MIN& (0+255),c
  1374  00188E  5031               	movf	MIN@a+1,w,c
  1375  001890  0A80               	xorlw	128
  1376  001892  5834               	subwfb	??_MIN& (0+255),w,c
  1377  001894  B0D8               	btfsc	status,0,c
  1378  001896  D005               	goto	l245
  1379  001898  C032  F030         	movff	MIN@b,?_MIN
  1380  00189C  C033  F031         	movff	MIN@b+1,?_MIN+1
  1381  0018A0  D004               	goto	l246
  1382  0018A2                     l245:
  1383                           
  1384                           ;user.c: 178: return a;
  1385  0018A2  C030  F030         	movff	MIN@a,?_MIN
  1386  0018A6  C031  F031         	movff	MIN@a+1,?_MIN+1
  1387  0018AA                     l246:
  1388  0018AA  0012               	return		;funcret
  1389  0018AC                     __end_of_MIN:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postinc2	equ	0xFDE
  1400                           postdec2	equ	0xFDD
  1401                           fsr2h	equ	0xFDA
  1402                           fsr2l	equ	0xFD9
  1403                           status	equ	0xFD8
  1404                           
  1405 ;; *************** function _MAX *****************
  1406 ;; Defined at:
  1407 ;;		line 181 in file "user.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  a               2   47[COMRAM] int 
  1410 ;;  b               2   49[COMRAM] int 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;		None
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  2   47[COMRAM] int 
  1415 ;; Registers used:
  1416 ;;		wreg, status,2, status,0
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;Total ram usage:        5 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:    4
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_sensorComputation
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text6
  1437  0018AC                     __ptext6:
  1438                           	opt stack 0
  1439  0018AC                     _MAX:
  1440                           	opt stack 24
  1441                           
  1442                           ;user.c: 183: if(a>b) return a;
  1443                           
  1444                           ;incstack = 0
  1445  0018AC  5030               	movf	MAX@a,w,c
  1446  0018AE  5C32               	subwf	MAX@b,w,c
  1447  0018B0  5033               	movf	MAX@b+1,w,c
  1448  0018B2  0A80               	xorlw	128
  1449  0018B4  6E34               	movwf	??_MAX& (0+255),c
  1450  0018B6  5031               	movf	MAX@a+1,w,c
  1451  0018B8  0A80               	xorlw	128
  1452  0018BA  5834               	subwfb	??_MAX& (0+255),w,c
  1453  0018BC  B0D8               	btfsc	status,0,c
  1454  0018BE  D005               	goto	l249
  1455  0018C0  C030  F030         	movff	MAX@a,?_MAX
  1456  0018C4  C031  F031         	movff	MAX@a+1,?_MAX+1
  1457  0018C8  D004               	goto	l250
  1458  0018CA                     l249:
  1459                           
  1460                           ;user.c: 184: return b;
  1461  0018CA  C032  F030         	movff	MAX@b,?_MAX
  1462  0018CE  C033  F031         	movff	MAX@b+1,?_MAX+1
  1463  0018D2                     l250:
  1464  0018D2  0012               	return		;funcret
  1465  0018D4                     __end_of_MAX:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           prodh	equ	0xFF4
  1472                           prodl	equ	0xFF3
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postinc2	equ	0xFDE
  1476                           postdec2	equ	0xFDD
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _InitApp *****************
  1482 ;; Defined at:
  1483 ;;		line 35 in file "user.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;		None               void
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    5
  1504 ;; This function calls:
  1505 ;;		_AlgorithmSelection
  1506 ;;		_delay
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text7
  1513  0017C4                     __ptext7:
  1514                           	opt stack 0
  1515  0017C4                     _InitApp:
  1516                           	opt stack 25
  1517                           
  1518                           ;user.c: 39: TRISC = 0;
  1519                           
  1520                           ;incstack = 0
  1521  0017C4  0E00               	movlw	0
  1522  0017C6  6E94               	movwf	3988,c	;volatile
  1523                           
  1524                           ;user.c: 43: TRISEbits.TRISE1=1;
  1525  0017C8  8296               	bsf	3990,1,c	;volatile
  1526                           
  1527                           ;user.c: 45: TRISEbits.TRISE2=1;
  1528  0017CA  8496               	bsf	3990,2,c	;volatile
  1529                           
  1530                           ;user.c: 47: TRISBbits.RB1=1;
  1531  0017CC  8293               	bsf	3987,1,c	;volatile
  1532                           
  1533                           ;user.c: 49: TRISBbits.RB0=1;
  1534  0017CE  8093               	bsf	3987,0,c	;volatile
  1535                           
  1536                           ;user.c: 52: TRISBbits.RB3=1;
  1537  0017D0  8693               	bsf	3987,3,c	;volatile
  1538                           
  1539                           ;user.c: 54: TRISBbits.RB2=1;
  1540  0017D2  8493               	bsf	3987,2,c	;volatile
  1541                           
  1542                           ;user.c: 58: ADCON1 =0b00000001;
  1543  0017D4  0E01               	movlw	1
  1544  0017D6  6EC1               	movwf	4033,c	;volatile
  1545                           
  1546                           ;user.c: 63: ADCON2=0b00001010;
  1547  0017D8  0E0A               	movlw	10
  1548  0017DA  6EC0               	movwf	4032,c	;volatile
  1549                           
  1550                           ;user.c: 68: ADCON0=0b00101011;
  1551  0017DC  0E2B               	movlw	43
  1552  0017DE  6EC2               	movwf	4034,c	;volatile
  1553                           
  1554                           ;user.c: 77: T0CON = 0b11000100;
  1555  0017E0  0EC4               	movlw	196
  1556  0017E2  6ED5               	movwf	4053,c	;volatile
  1557                           
  1558                           ;user.c: 85: INTCON2 = 0b11110100;
  1559  0017E4  0EF4               	movlw	244
  1560  0017E6  6EF1               	movwf	intcon2,c	;volatile
  1561                           
  1562                           ;user.c: 95: INTCON = 0b00100000;
  1563  0017E8  0E20               	movlw	32
  1564  0017EA  6EF2               	movwf	intcon,c	;volatile
  1565                           
  1566                           ;user.c: 105: AlgorithmSelection();
  1567  0017EC  EC6A  F00C         	call	_AlgorithmSelection	;wreg free
  1568                           
  1569                           ;user.c: 108: delay(1000);
  1570  0017F0  0E03               	movlw	3
  1571  0017F2  6E2B               	movwf	delay@ms+1,c
  1572  0017F4  0EE8               	movlw	232
  1573  0017F6  6E2A               	movwf	delay@ms,c
  1574  0017F8  EC00  F00C         	call	_delay	;wreg free
  1575                           
  1576                           ;user.c: 109: INTCONbits.GIE = 1;
  1577  0017FC  8EF2               	bsf	intcon,7,c	;volatile
  1578  0017FE  0012               	return		;funcret
  1579  001800                     __end_of_InitApp:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           prodh	equ	0xFF4
  1586                           prodl	equ	0xFF3
  1587                           intcon	equ	0xFF2
  1588                           intcon2	equ	0xFF1
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           postinc2	equ	0xFDE
  1592                           postdec2	equ	0xFDD
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597 ;; *************** function _delay *****************
  1598 ;; Defined at:
  1599 ;;		line 29 in file "user.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  ms              2   41[COMRAM] unsigned int 
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  x               2   44[COMRAM] int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;		None               void
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;Total ram usage:        5 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    4
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_InitApp
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text8
  1628  001800                     __ptext8:
  1629                           	opt stack 0
  1630  001800                     _delay:
  1631                           	opt stack 25
  1632                           
  1633                           ;user.c: 30: int x = 0;
  1634                           
  1635                           ;incstack = 0
  1636  001800  0E00               	movlw	0
  1637  001802  6E2E               	movwf	delay@x+1,c
  1638  001804  0E00               	movlw	0
  1639  001806  6E2D               	movwf	delay@x,c
  1640                           
  1641                           ;user.c: 31: for (x = 0; x < ms; x++)
  1642  001808  0E00               	movlw	0
  1643  00180A  6E2E               	movwf	delay@x+1,c
  1644  00180C  0E00               	movlw	0
  1645  00180E  6E2D               	movwf	delay@x,c
  1646  001810  D00A               	goto	l205
  1647  001812                     l1338:
  1648                           
  1649                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1650  001812  0E0B               	movlw	11
  1651  001814  6E2C               	movwf	??_delay& (0+255),c
  1652  001816  0E62               	movlw	98
  1653  001818                     u1247:
  1654  001818  2EE8               	decfsz	wreg,f,c
  1655  00181A  D7FE               	goto	u1247
  1656  00181C  2E2C               	decfsz	??_delay& (0+255),f,c
  1657  00181E  D7FC               	goto	u1247
  1658  001820  D000               	nop2	
  1659  001822  4A2D               	infsnz	delay@x,f,c
  1660  001824  2A2E               	incf	delay@x+1,f,c
  1661  001826                     l205:
  1662  001826  502A               	movf	delay@ms,w,c
  1663  001828  5C2D               	subwf	delay@x,w,c
  1664  00182A  502B               	movf	delay@ms+1,w,c
  1665  00182C  582E               	subwfb	delay@x+1,w,c
  1666  00182E  A0D8               	btfss	status,0,c
  1667  001830  D7F0               	goto	l1338
  1668  001832  0012               	return		;funcret
  1669  001834                     __end_of_delay:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           prodh	equ	0xFF4
  1676                           prodl	equ	0xFF3
  1677                           intcon	equ	0xFF2
  1678                           intcon2	equ	0xFF1
  1679                           postinc0	equ	0xFEE
  1680                           wreg	equ	0xFE8
  1681                           postinc2	equ	0xFDE
  1682                           postdec2	equ	0xFDD
  1683                           fsr2h	equ	0xFDA
  1684                           fsr2l	equ	0xFD9
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _AlgorithmSelection *****************
  1688 ;; Defined at:
  1689 ;;		line 112 in file "user.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;		None               void
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;Total ram usage:        0 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    4
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_InitApp
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text9
  1718  0018D4                     __ptext9:
  1719                           	opt stack 0
  1720  0018D4                     _AlgorithmSelection:
  1721                           	opt stack 25
  1722                           
  1723                           ;user.c: 114: ADCON0 = 0b00100111;
  1724                           
  1725                           ;incstack = 0
  1726  0018D4  0E27               	movlw	39
  1727  0018D6  6EC2               	movwf	4034,c	;volatile
  1728                           
  1729                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1730  0018D8  82C2               	bsf	4034,1,c	;volatile
  1731                           
  1732                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1733  0018DA  D000               	goto	l214
  1734  0018DC                     l214:
  1735  0018DC  B2C2               	btfsc	4034,1,c	;volatile
  1736  0018DE  D7FE               	goto	l214
  1737                           
  1738                           ;user.c: 119: if(ADRESL > 0b10000000)
  1739  0018E0  0E80               	movlw	128
  1740  0018E2  64C3               	cpfsgt	4035,c	;volatile
  1741  0018E4  D002               	goto	l1000
  1742                           
  1743                           ;user.c: 120: algorithm = LEFTWALL;
  1744  0018E6  0E00               	movlw	0
  1745  0018E8  D001               	goto	L5
  1746  0018EA                     l1000:
  1747                           
  1748                           ;user.c: 121: else
  1749                           ;user.c: 122: algorithm = RIGHTWALL;
  1750  0018EA  0E01               	movlw	1
  1751  0018EC                     L5:
  1752  0018EC  6E55               	movwf	_algorithm,c
  1753  0018EE  D000               	goto	l219
  1754  0018F0                     l219:
  1755  0018F0  0012               	return		;funcret
  1756  0018F2                     __end_of_AlgorithmSelection:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           intcon2	equ	0xFF1
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postinc2	equ	0xFDE
  1769                           postdec2	equ	0xFDD
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _ConfigureOscillator *****************
  1775 ;; Defined at:
  1776 ;;		line 24 in file "system.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		wreg, status,2
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    4
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text10
  1805  001968                     __ptext10:
  1806                           	opt stack 0
  1807  001968                     _ConfigureOscillator:
  1808                           	opt stack 26
  1809                           
  1810                           ;system.c: 29: OSCCON = 0b01111100;
  1811                           
  1812                           ;incstack = 0
  1813  001968  0E7C               	movlw	124
  1814  00196A  6ED3               	movwf	4051,c	;volatile
  1815                           
  1816                           ;system.c: 31: OSCTUNE = 0b01001111;
  1817  00196C  0E4F               	movlw	79
  1818  00196E  6E9B               	movwf	3995,c	;volatile
  1819  001970  0012               	return		;funcret
  1820  001972                     __end_of_ConfigureOscillator:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           intcon2	equ	0xFF1
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postinc2	equ	0xFDE
  1833                           postdec2	equ	0xFDD
  1834                           fsr2h	equ	0xFDA
  1835                           fsr2l	equ	0xFD9
  1836                           status	equ	0xFD8
  1837                           
  1838 ;; *************** function _low_isr *****************
  1839 ;; Defined at:
  1840 ;;		line 142 in file "interrupts.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;		None               void
  1847 ;; Registers used:
  1848 ;;		None
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;Total ram usage:       17 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    3
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		Interrupt level 1
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	intcodelo
  1869  000018                     __pintcodelo:
  1870                           	opt stack 0
  1871  000018                     _low_isr:
  1872                           	opt stack 24
  1873                           
  1874                           ;incstack = 0
  1875  000018  CFD8 F001          	movff	status,??_low_isr
  1876  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1877  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1878  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1879  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1880  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1881  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1882  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1883  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1884  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1885  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1886  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1887  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1888  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1889  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1890  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1891  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1892  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1893  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1894  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1895  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1896  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1897  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1898  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1899  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1900  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1901  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1902  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1903  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1904  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1905  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1906  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1907  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1908  00009C  C001  FFD8         	movff	??_low_isr,status
  1909  0000A0  0010               	retfie	
  1910  0000A2                     __end_of_low_isr:
  1911                           	opt stack 0
  1912                           pclatu	equ	0xFFB
  1913                           pclath	equ	0xFFA
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           intcon2	equ	0xFF1
  1922                           postinc0	equ	0xFEE
  1923                           fsr0h	equ	0xFEA
  1924                           fsr0l	equ	0xFE9
  1925                           wreg	equ	0xFE8
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           bsr	equ	0xFE0
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _high_isr *****************
  1936 ;; Defined at:
  1937 ;;		line 70 in file "interrupts.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;		None
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:       14 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    2
  1958 ;; This function calls:
  1959 ;;		_KController
  1960 ;;		_Reversing
  1961 ;;		_merge
  1962 ;;		_moveMouse
  1963 ;;		_rotate
  1964 ;; This function is called by:
  1965 ;;		Interrupt level 2
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	intcode
  1970  000008                     __pintcode:
  1971                           	opt stack 0
  1972  000008                     _high_isr:
  1973                           	opt stack 24
  1974                           
  1975                           ;incstack = 0
  1976  000008  CFFA F01C          	movff	pclath,??_high_isr
  1977  00000C  CFFB F01D          	movff	pclatu,??_high_isr+1
  1978  000010  CFE9 F01E          	movff	fsr0l,??_high_isr+2
  1979  000014  ED01  F00A         	call	int_func,f	;refresh shadow registers
  1980                           pclatu	equ	0xFFB
  1981                           pclath	equ	0xFFA
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon	equ	0xFF2
  1989                           intcon2	equ	0xFF1
  1990                           postinc0	equ	0xFEE
  1991                           fsr0h	equ	0xFEA
  1992                           fsr0l	equ	0xFE9
  1993                           wreg	equ	0xFE8
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           bsr	equ	0xFE0
  1997                           postinc2	equ	0xFDE
  1998                           postdec2	equ	0xFDD
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003                           	psect	intcode_body
  2004  001402                     __pintcode_body:
  2005                           	opt stack 24
  2006  001402                     int_func:
  2007                           	opt stack 24
  2008  001402  0006               	pop		; remove dummy address from shadow register refresh
  2009  001404  CFEA F01F          	movff	fsr0h,??_high_isr+3
  2010  001408  CFE1 F020          	movff	fsr1l,??_high_isr+4
  2011  00140C  CFE2 F021          	movff	fsr1h,??_high_isr+5
  2012  001410  CFD9 F022          	movff	fsr2l,??_high_isr+6
  2013  001414  CFDA F023          	movff	fsr2h,??_high_isr+7
  2014  001418  CFF3 F024          	movff	prodl,??_high_isr+8
  2015  00141C  CFF4 F025          	movff	prodh,??_high_isr+9
  2016  001420  CFF6 F026          	movff	tblptrl,??_high_isr+10
  2017  001424  CFF7 F027          	movff	tblptrh,??_high_isr+11
  2018  001428  CFF8 F028          	movff	tblptru,??_high_isr+12
  2019  00142C  CFF5 F029          	movff	tablat,??_high_isr+13
  2020                           
  2021                           ;interrupts.c: 89: if(INTCONbits.TMR0IF == 1)
  2022  001430  A4F2               	btfss	intcon,2,c	;volatile
  2023  001432  D093               	goto	i2l60
  2024                           
  2025                           ;interrupts.c: 90: {
  2026                           ;interrupts.c: 91: if(MotorDelayCounter > 2)
  2027  001434  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2028  001436  D08D               	goto	i2l1508
  2029  001438  504A               	movf	_MotorDelayCounter+1,w,c
  2030  00143A  E104               	bnz	i2u87_40
  2031  00143C  0E03               	movlw	3
  2032  00143E  5C49               	subwf	_MotorDelayCounter,w,c
  2033  001440  A0D8               	btfss	status,0,c
  2034  001442  D087               	goto	i2l1508
  2035  001444                     i2u87_40:
  2036                           
  2037                           ;interrupts.c: 92: {
  2038                           ;interrupts.c: 94: if (ReverseCounter > 0)
  2039  001444  BE4E               	btfsc	_ReverseCounter+1,7,c
  2040  001446  D008               	goto	i2l1470
  2041  001448  504E               	movf	_ReverseCounter+1,w,c
  2042  00144A  E103               	bnz	i2u88_40
  2043  00144C  044D               	decf	_ReverseCounter,w,c
  2044  00144E  A0D8               	btfss	status,0,c
  2045  001450  D003               	goto	i2l1470
  2046  001452                     i2u88_40:
  2047                           
  2048                           ;interrupts.c: 95: Reversing();
  2049  001452  EC87  F00C         	call	_Reversing	;wreg free
  2050  001456  D071               	goto	i2l1506
  2051  001458                     i2l1470:
  2052                           
  2053                           ;interrupts.c: 96: else if(RotateCounter > 0)
  2054  001458  BE50               	btfsc	_RotateCounter+1,7,c
  2055  00145A  D01F               	goto	i2l1482
  2056  00145C  5050               	movf	_RotateCounter+1,w,c
  2057  00145E  E103               	bnz	i2u89_40
  2058  001460  044F               	decf	_RotateCounter,w,c
  2059  001462  A0D8               	btfss	status,0,c
  2060  001464  D01A               	goto	i2l1482
  2061  001466                     i2u89_40:
  2062                           
  2063                           ;interrupts.c: 97: {
  2064                           ;interrupts.c: 98: if ((sensorValue[2] > 700 || sensorValue[3] > 700)) {
  2065  001466  BE44               	btfsc	_sensorValue+5,7,c
  2066  001468  D006               	goto	i2l1474
  2067  00146A  0EBD               	movlw	189
  2068  00146C  5C43               	subwf	_sensorValue+4,w,c
  2069  00146E  0E02               	movlw	2
  2070  001470  5844               	subwfb	_sensorValue+5,w,c
  2071  001472  B0D8               	btfsc	status,0,c
  2072  001474  D008               	goto	i2l1476
  2073  001476                     i2l1474:
  2074  001476  BE46               	btfsc	_sensorValue+7,7,c
  2075  001478  D00D               	goto	i2l1480
  2076  00147A  0EBD               	movlw	189
  2077  00147C  5C45               	subwf	_sensorValue+6,w,c
  2078  00147E  0E02               	movlw	2
  2079  001480  5846               	subwfb	_sensorValue+7,w,c
  2080  001482  A0D8               	btfss	status,0,c
  2081  001484  D007               	goto	i2l1480
  2082  001486                     i2l1476:
  2083                           
  2084                           ;interrupts.c: 100: ReverseCounter = 15;
  2085  001486  0E00               	movlw	0
  2086  001488  6E4E               	movwf	_ReverseCounter+1,c
  2087  00148A  0E0F               	movlw	15
  2088  00148C  6E4D               	movwf	_ReverseCounter,c
  2089                           
  2090                           ;interrupts.c: 101: Reversing();
  2091  00148E  EC87  F00C         	call	_Reversing	;wreg free
  2092                           
  2093                           ;interrupts.c: 102: } else {
  2094  001492  D053               	goto	i2l1506
  2095  001494                     i2l1480:
  2096                           
  2097                           ;interrupts.c: 103: rotate();
  2098  001494  EC79  F00C         	call	_rotate	;wreg free
  2099                           
  2100                           ;interrupts.c: 104: }
  2101                           ;interrupts.c: 105: }
  2102  001498  D050               	goto	i2l1506
  2103  00149A                     i2l1482:
  2104                           
  2105                           ;interrupts.c: 118: else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2106                           ;interrupts.c: 119: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2107  00149A  BE40               	btfsc	_sensorValue+1,7,c
  2108  00149C  D020               	goto	i2l1492
  2109  00149E  5040               	movf	_sensorValue+1,w,c
  2110  0014A0  E104               	bnz	i2u92_40
  2111  0014A2  0E65               	movlw	101
  2112  0014A4  5C3F               	subwf	_sensorValue,w,c
  2113  0014A6  A0D8               	btfss	status,0,c
  2114  0014A8  D01A               	goto	i2l1492
  2115  0014AA                     i2u92_40:
  2116  0014AA  BE42               	btfsc	_sensorValue+3,7,c
  2117  0014AC  D018               	goto	i2l1492
  2118  0014AE  5042               	movf	_sensorValue+3,w,c
  2119  0014B0  E104               	bnz	i2u93_40
  2120  0014B2  0E65               	movlw	101
  2121  0014B4  5C41               	subwf	_sensorValue+2,w,c
  2122  0014B6  A0D8               	btfss	status,0,c
  2123  0014B8  D012               	goto	i2l1492
  2124  0014BA                     i2u93_40:
  2125  0014BA  BE44               	btfsc	_sensorValue+5,7,c
  2126  0014BC  D00D               	goto	i2l1490
  2127  0014BE  0EA4               	movlw	164
  2128  0014C0  5C43               	subwf	_sensorValue+4,w,c
  2129  0014C2  0E01               	movlw	1
  2130  0014C4  5844               	subwfb	_sensorValue+5,w,c
  2131  0014C6  B0D8               	btfsc	status,0,c
  2132  0014C8  BE46               	btfsc	_sensorValue+7,7,c
  2133  0014CA  D006               	goto	i2l1490
  2134  0014CC  0EA4               	movlw	164
  2135  0014CE  5C45               	subwf	_sensorValue+6,w,c
  2136  0014D0  0E01               	movlw	1
  2137  0014D2  5846               	subwfb	_sensorValue+7,w,c
  2138  0014D4  B0D8               	btfsc	status,0,c
  2139  0014D6  D003               	goto	i2l1492
  2140  0014D8                     i2l1490:
  2141                           
  2142                           ;interrupts.c: 120: {
  2143                           ;interrupts.c: 121: KController();
  2144  0014D8  EC44  F00B         	call	_KController	;wreg free
  2145                           
  2146                           ;interrupts.c: 122: } else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2147  0014DC  D02E               	goto	i2l1506
  2148  0014DE                     i2l1492:
  2149                           
  2150                           ;interrupts.c: 123: && (sensorValue[2] > 420 || sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2151  0014DE  BE40               	btfsc	_sensorValue+1,7,c
  2152  0014E0  D02C               	goto	i2l1506
  2153  0014E2  5040               	movf	_sensorValue+1,w,c
  2154  0014E4  E104               	bnz	i2u96_40
  2155  0014E6  0E65               	movlw	101
  2156  0014E8  5C3F               	subwf	_sensorValue,w,c
  2157  0014EA  A0D8               	btfss	status,0,c
  2158  0014EC  D026               	goto	i2l1506
  2159  0014EE                     i2u96_40:
  2160  0014EE  BE42               	btfsc	_sensorValue+3,7,c
  2161  0014F0  D024               	goto	i2l1506
  2162  0014F2  5042               	movf	_sensorValue+3,w,c
  2163  0014F4  E104               	bnz	i2u97_40
  2164  0014F6  0E65               	movlw	101
  2165  0014F8  5C41               	subwf	_sensorValue+2,w,c
  2166  0014FA  A0D8               	btfss	status,0,c
  2167  0014FC  D01E               	goto	i2l1506
  2168  0014FE                     i2u97_40:
  2169  0014FE  BE44               	btfsc	_sensorValue+5,7,c
  2170  001500  D006               	goto	i2l1498
  2171  001502  0EA5               	movlw	165
  2172  001504  5C43               	subwf	_sensorValue+4,w,c
  2173  001506  0E01               	movlw	1
  2174  001508  5844               	subwfb	_sensorValue+5,w,c
  2175  00150A  B0D8               	btfsc	status,0,c
  2176  00150C  D008               	goto	i2l1500
  2177  00150E                     i2l1498:
  2178  00150E  BE46               	btfsc	_sensorValue+7,7,c
  2179  001510  D014               	goto	i2l1506
  2180  001512  0EA5               	movlw	165
  2181  001514  5C45               	subwf	_sensorValue+6,w,c
  2182  001516  0E01               	movlw	1
  2183  001518  5846               	subwfb	_sensorValue+7,w,c
  2184  00151A  A0D8               	btfss	status,0,c
  2185  00151C  D00E               	goto	i2l1506
  2186  00151E                     i2l1500:
  2187  00151E  BE50               	btfsc	_RotateCounter+1,7,c
  2188  001520  D005               	goto	i2l1502
  2189  001522  5050               	movf	_RotateCounter+1,w,c
  2190  001524  E10A               	bnz	i2l1506
  2191  001526  044F               	decf	_RotateCounter,w,c
  2192  001528  B0D8               	btfsc	status,0,c
  2193  00152A  D007               	goto	i2l1506
  2194  00152C                     i2l1502:
  2195                           
  2196                           ;interrupts.c: 124: {
  2197                           ;interrupts.c: 125: RotateCounter = 167*2;
  2198  00152C  0E01               	movlw	1
  2199  00152E  6E50               	movwf	_RotateCounter+1,c
  2200  001530  0E4E               	movlw	78
  2201  001532  6E4F               	movwf	_RotateCounter,c
  2202                           
  2203                           ;interrupts.c: 126: rotate();
  2204  001534  EC79  F00C         	call	_rotate	;wreg free
  2205  001538  D000               	goto	i2l1506
  2206  00153A                     i2l1506:
  2207                           
  2208                           ;interrupts.c: 127: }
  2209                           ;interrupts.c: 128: moveMouse(merge(LMotorCounter,RMotorCounter));
  2210  00153A  C054  F012         	movff	_RMotorCounter,merge@right
  2211  00153E  5053               	movf	_LMotorCounter,w,c
  2212  001540  ECAC  F00C         	call	_merge
  2213  001544  ECB9  F00C         	call	_moveMouse
  2214                           
  2215                           ;interrupts.c: 129: MotorDelayCounter = 0;
  2216  001548  0E00               	movlw	0
  2217  00154A  6E4A               	movwf	_MotorDelayCounter+1,c
  2218  00154C  0E00               	movlw	0
  2219  00154E  6E49               	movwf	_MotorDelayCounter,c
  2220  001550  D000               	goto	i2l1508
  2221  001552                     i2l1508:
  2222                           
  2223                           ;interrupts.c: 130: }
  2224                           ;interrupts.c: 132: MotorDelayCounter++;
  2225  001552  4A49               	infsnz	_MotorDelayCounter,f,c
  2226  001554  2A4A               	incf	_MotorDelayCounter+1,f,c
  2227                           
  2228                           ;interrupts.c: 133: INTCONbits.TMR0IF = 0;
  2229  001556  94F2               	bcf	intcon,2,c	;volatile
  2230  001558  D000               	goto	i2l60
  2231  00155A                     i2l60:
  2232  00155A  C029  FFF5         	movff	??_high_isr+13,tablat
  2233  00155E  C028  FFF8         	movff	??_high_isr+12,tblptru
  2234  001562  C027  FFF7         	movff	??_high_isr+11,tblptrh
  2235  001566  C026  FFF6         	movff	??_high_isr+10,tblptrl
  2236  00156A  C025  FFF4         	movff	??_high_isr+9,prodh
  2237  00156E  C024  FFF3         	movff	??_high_isr+8,prodl
  2238  001572  C023  FFDA         	movff	??_high_isr+7,fsr2h
  2239  001576  C022  FFD9         	movff	??_high_isr+6,fsr2l
  2240  00157A  C021  FFE2         	movff	??_high_isr+5,fsr1h
  2241  00157E  C020  FFE1         	movff	??_high_isr+4,fsr1l
  2242  001582  C01F  FFEA         	movff	??_high_isr+3,fsr0h
  2243  001586  C01E  FFE9         	movff	??_high_isr+2,fsr0l
  2244  00158A  C01D  FFFB         	movff	??_high_isr+1,pclatu
  2245  00158E  C01C  FFFA         	movff	??_high_isr,pclath
  2246  001592  0011               	retfie		f
  2247  001594                     __end_of_high_isr:
  2248                           	opt stack 0
  2249                           pclatu	equ	0xFFB
  2250                           pclath	equ	0xFFA
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           intcon	equ	0xFF2
  2258                           intcon2	equ	0xFF1
  2259                           postinc0	equ	0xFEE
  2260                           fsr0h	equ	0xFEA
  2261                           fsr0l	equ	0xFE9
  2262                           wreg	equ	0xFE8
  2263                           fsr1h	equ	0xFE2
  2264                           fsr1l	equ	0xFE1
  2265                           bsr	equ	0xFE0
  2266                           postinc2	equ	0xFDE
  2267                           postdec2	equ	0xFDD
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8
  2271                           
  2272 ;; *************** function _rotate *****************
  2273 ;; Defined at:
  2274 ;;		line 273 in file "interrupts.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;		None               void
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    1
  2295 ;; This function calls:
  2296 ;;		_motorCounterUpdate
  2297 ;; This function is called by:
  2298 ;;		_high_isr
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text13
  2303  0018F2                     __ptext13:
  2304                           	opt stack 0
  2305  0018F2                     _rotate:
  2306                           	opt stack 24
  2307                           
  2308                           ;interrupts.c: 279: motorCounterUpdate(LEFT,0);
  2309                           
  2310                           ;incstack = 0
  2311  0018F2  0E00               	movlw	0
  2312  0018F4  6E12               	movwf	motorCounterUpdate@reverse,c
  2313  0018F6  0E00               	movlw	0
  2314  0018F8  ECCA  F00A         	call	_motorCounterUpdate
  2315                           
  2316                           ;interrupts.c: 280: motorCounterUpdate(RIGHT,1);
  2317  0018FC  0E01               	movlw	1
  2318  0018FE  6E12               	movwf	motorCounterUpdate@reverse,c
  2319  001900  0E01               	movlw	1
  2320  001902  ECCA  F00A         	call	_motorCounterUpdate
  2321                           
  2322                           ;interrupts.c: 282: RotateCounter--;
  2323  001906  064F               	decf	_RotateCounter,f,c
  2324  001908  A0D8               	btfss	status,0,c
  2325  00190A  0650               	decf	_RotateCounter+1,f,c
  2326  00190C  0012               	return		;funcret
  2327  00190E                     __end_of_rotate:
  2328                           	opt stack 0
  2329                           pclatu	equ	0xFFB
  2330                           pclath	equ	0xFFA
  2331                           tblptru	equ	0xFF8
  2332                           tblptrh	equ	0xFF7
  2333                           tblptrl	equ	0xFF6
  2334                           tablat	equ	0xFF5
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           intcon	equ	0xFF2
  2338                           intcon2	equ	0xFF1
  2339                           postinc0	equ	0xFEE
  2340                           fsr0h	equ	0xFEA
  2341                           fsr0l	equ	0xFE9
  2342                           wreg	equ	0xFE8
  2343                           fsr1h	equ	0xFE2
  2344                           fsr1l	equ	0xFE1
  2345                           bsr	equ	0xFE0
  2346                           postinc2	equ	0xFDE
  2347                           postdec2	equ	0xFDD
  2348                           fsr2h	equ	0xFDA
  2349                           fsr2l	equ	0xFD9
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _Reversing *****************
  2353 ;; Defined at:
  2354 ;;		line 297 in file "interrupts.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;		None               void
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    1
  2375 ;; This function calls:
  2376 ;;		_motorCounterUpdate
  2377 ;; This function is called by:
  2378 ;;		_high_isr
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text14
  2383  00190E                     __ptext14:
  2384                           	opt stack 0
  2385  00190E                     _Reversing:
  2386                           	opt stack 24
  2387                           
  2388                           ;interrupts.c: 299: motorCounterUpdate(RIGHT,1);
  2389                           
  2390                           ;incstack = 0
  2391  00190E  0E01               	movlw	1
  2392  001910  6E12               	movwf	motorCounterUpdate@reverse,c
  2393  001912  0E01               	movlw	1
  2394  001914  ECCA  F00A         	call	_motorCounterUpdate
  2395                           
  2396                           ;interrupts.c: 300: motorCounterUpdate(LEFT,1);
  2397  001918  0E01               	movlw	1
  2398  00191A  6E12               	movwf	motorCounterUpdate@reverse,c
  2399  00191C  0E00               	movlw	0
  2400  00191E  ECCA  F00A         	call	_motorCounterUpdate
  2401                           
  2402                           ;interrupts.c: 301: ReverseCounter--;
  2403  001922  064D               	decf	_ReverseCounter,f,c
  2404  001924  A0D8               	btfss	status,0,c
  2405  001926  064E               	decf	_ReverseCounter+1,f,c
  2406  001928  0012               	return		;funcret
  2407  00192A                     __end_of_Reversing:
  2408                           	opt stack 0
  2409                           pclatu	equ	0xFFB
  2410                           pclath	equ	0xFFA
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           intcon	equ	0xFF2
  2418                           intcon2	equ	0xFF1
  2419                           postinc0	equ	0xFEE
  2420                           fsr0h	equ	0xFEA
  2421                           fsr0l	equ	0xFE9
  2422                           wreg	equ	0xFE8
  2423                           fsr1h	equ	0xFE2
  2424                           fsr1l	equ	0xFE1
  2425                           bsr	equ	0xFE0
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function _KController *****************
  2433 ;; Defined at:
  2434 ;;		line 244 in file "interrupts.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;		None
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  steps           2   24[COMRAM] int 
  2439 ;;  diff            2   22[COMRAM] int 
  2440 ;;  correctTo       1   26[COMRAM] enum E4082
  2441 ;; Return value:  Size  Location     Type
  2442 ;;		None               void
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2454 ;;Total ram usage:        7 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    1
  2457 ;; This function calls:
  2458 ;;		_ABS
  2459 ;;		_merge
  2460 ;;		_motorCounterUpdate
  2461 ;;		_moveMouse
  2462 ;; This function is called by:
  2463 ;;		_high_isr
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text15
  2468  001688                     __ptext15:
  2469                           	opt stack 0
  2470  001688                     _KController:
  2471                           	opt stack 24
  2472                           
  2473                           ;interrupts.c: 246: Side correctTo;
  2474                           ;interrupts.c: 247: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2475                           
  2476                           ;incstack = 0
  2477  001688  EE20  F041         	lfsr	2,_sensorValue+2
  2478  00168C  CFDE F015          	movff	postinc2,??_KController
  2479  001690  CFDD F016          	movff	postdec2,??_KController+1
  2480  001694  1E15               	comf	??_KController,f,c
  2481  001696  1E16               	comf	??_KController+1,f,c
  2482  001698  4A15               	infsnz	??_KController,f,c
  2483  00169A  2A16               	incf	??_KController+1,f,c
  2484  00169C  503F               	movf	_sensorValue,w,c
  2485  00169E  2415               	addwf	??_KController,w,c
  2486  0016A0  6E12               	movwf	ABS@x,c
  2487  0016A2  5040               	movf	_sensorValue+1,w,c
  2488  0016A4  2016               	addwfc	??_KController+1,w,c
  2489  0016A6  6E13               	movwf	ABS@x+1,c
  2490  0016A8  EC95  F00C         	call	_ABS	;wreg free
  2491  0016AC  C012  F017         	movff	?_ABS,KController@diff
  2492  0016B0  C013  F018         	movff	?_ABS+1,KController@diff+1
  2493                           
  2494                           ;interrupts.c: 249: int steps = 0;
  2495  0016B4  0E00               	movlw	0
  2496  0016B6  6E1A               	movwf	KController@steps+1,c
  2497  0016B8  0E00               	movlw	0
  2498  0016BA  6E19               	movwf	KController@steps,c
  2499                           
  2500                           ;interrupts.c: 250: if(controllerSteps > 0)
  2501  0016BC  5056               	movf	_controllerSteps,w,c
  2502  0016BE  B4D8               	btfsc	status,2,c
  2503  0016C0  D00C               	goto	i2l1392
  2504                           
  2505                           ;interrupts.c: 251: {
  2506                           ;interrupts.c: 252: motorCounterUpdate(RIGHT,0);
  2507  0016C2  0E00               	movlw	0
  2508  0016C4  6E12               	movwf	motorCounterUpdate@reverse,c
  2509  0016C6  0E01               	movlw	1
  2510  0016C8  ECCA  F00A         	call	_motorCounterUpdate
  2511                           
  2512                           ;interrupts.c: 253: motorCounterUpdate(LEFT,0);
  2513  0016CC  0E00               	movlw	0
  2514  0016CE  6E12               	movwf	motorCounterUpdate@reverse,c
  2515  0016D0  0E00               	movlw	0
  2516  0016D2  ECCA  F00A         	call	_motorCounterUpdate
  2517                           
  2518                           ;interrupts.c: 254: controllerSteps--;
  2519  0016D6  0656               	decf	_controllerSteps,f,c
  2520                           
  2521                           ;interrupts.c: 255: return;
  2522  0016D8  D029               	goto	i2l115
  2523  0016DA                     i2l1392:
  2524                           
  2525                           ;interrupts.c: 256: }
  2526                           ;interrupts.c: 258: if(sensorValue[0] > sensorValue[1])
  2527  0016DA  503F               	movf	_sensorValue,w,c
  2528  0016DC  5C41               	subwf	_sensorValue+2,w,c
  2529  0016DE  5042               	movf	_sensorValue+3,w,c
  2530  0016E0  0A80               	xorlw	128
  2531  0016E2  6E15               	movwf	??_KController& (0+255),c
  2532  0016E4  5040               	movf	_sensorValue+1,w,c
  2533  0016E6  0A80               	xorlw	128
  2534  0016E8  5815               	subwfb	??_KController& (0+255),w,c
  2535  0016EA  B0D8               	btfsc	status,0,c
  2536  0016EC  D00F               	goto	i2l1400
  2537                           
  2538                           ;interrupts.c: 259: {
  2539                           ;interrupts.c: 260: correctTo = LEFT;
  2540  0016EE  0E00               	movlw	0
  2541  0016F0  6E1B               	movwf	KController@correctTo,c
  2542                           
  2543                           ;interrupts.c: 261: motorCounterUpdate(correctTo,0);
  2544  0016F2  0E00               	movlw	0
  2545  0016F4  6E12               	movwf	motorCounterUpdate@reverse,c
  2546  0016F6  501B               	movf	KController@correctTo,w,c
  2547  0016F8  ECCA  F00A         	call	_motorCounterUpdate
  2548                           
  2549                           ;interrupts.c: 262: moveMouse(merge(LMotorCounter,RMotorCounter));
  2550  0016FC  C054  F012         	movff	_RMotorCounter,merge@right
  2551  001700  5053               	movf	_LMotorCounter,w,c
  2552  001702  ECAC  F00C         	call	_merge
  2553  001706  ECB9  F00C         	call	_moveMouse
  2554                           
  2555                           ;interrupts.c: 263: }
  2556  00170A  D00E               	goto	i2l117
  2557  00170C                     i2l1400:
  2558                           
  2559                           ;interrupts.c: 264: else
  2560                           ;interrupts.c: 265: {
  2561                           ;interrupts.c: 266: correctTo = RIGHT;
  2562  00170C  0E01               	movlw	1
  2563  00170E  6E1B               	movwf	KController@correctTo,c
  2564                           
  2565                           ;interrupts.c: 267: motorCounterUpdate(correctTo,0);
  2566  001710  0E00               	movlw	0
  2567  001712  6E12               	movwf	motorCounterUpdate@reverse,c
  2568  001714  501B               	movf	KController@correctTo,w,c
  2569  001716  ECCA  F00A         	call	_motorCounterUpdate
  2570                           
  2571                           ;interrupts.c: 268: moveMouse(merge(LMotorCounter,RMotorCounter));
  2572  00171A  C054  F012         	movff	_RMotorCounter,merge@right
  2573  00171E  5053               	movf	_LMotorCounter,w,c
  2574  001720  ECAC  F00C         	call	_merge
  2575  001724  ECB9  F00C         	call	_moveMouse
  2576  001728                     i2l117:
  2577                           
  2578                           ;interrupts.c: 269: }
  2579                           ;interrupts.c: 270: controllerSteps = 10;
  2580  001728  0E0A               	movlw	10
  2581  00172A  6E56               	movwf	_controllerSteps,c
  2582  00172C                     i2l115:
  2583  00172C  0012               	return		;funcret
  2584  00172E                     __end_of_KController:
  2585                           	opt stack 0
  2586                           pclatu	equ	0xFFB
  2587                           pclath	equ	0xFFA
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           prodh	equ	0xFF4
  2593                           prodl	equ	0xFF3
  2594                           intcon	equ	0xFF2
  2595                           intcon2	equ	0xFF1
  2596                           postinc0	equ	0xFEE
  2597                           fsr0h	equ	0xFEA
  2598                           fsr0l	equ	0xFE9
  2599                           wreg	equ	0xFE8
  2600                           fsr1h	equ	0xFE2
  2601                           fsr1l	equ	0xFE1
  2602                           bsr	equ	0xFE0
  2603                           postinc2	equ	0xFDE
  2604                           postdec2	equ	0xFDD
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function _moveMouse *****************
  2610 ;; Defined at:
  2611 ;;		line 231 in file "interrupts.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  action          1    wreg     unsigned char 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  action          1   17[COMRAM] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;		None               void
  2618 ;; Registers used:
  2619 ;;		wreg
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;Total ram usage:        1 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_high_isr
  2635 ;;		_KController
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text16
  2640  001972                     __ptext16:
  2641                           	opt stack 0
  2642  001972                     _moveMouse:
  2643                           	opt stack 25
  2644                           
  2645                           ;incstack = 0
  2646                           ;moveMouse@action stored from wreg
  2647  001972  6E12               	movwf	moveMouse@action,c
  2648                           
  2649                           ;interrupts.c: 233: LATC = action;
  2650  001974  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2651  001978  0012               	return		;funcret
  2652  00197A                     __end_of_moveMouse:
  2653                           	opt stack 0
  2654                           pclatu	equ	0xFFB
  2655                           pclath	equ	0xFFA
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           intcon	equ	0xFF2
  2663                           intcon2	equ	0xFF1
  2664                           postinc0	equ	0xFEE
  2665                           fsr0h	equ	0xFEA
  2666                           fsr0l	equ	0xFE9
  2667                           wreg	equ	0xFE8
  2668                           fsr1h	equ	0xFE2
  2669                           fsr1l	equ	0xFE1
  2670                           bsr	equ	0xFE0
  2671                           postinc2	equ	0xFDE
  2672                           postdec2	equ	0xFDD
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _motorCounterUpdate *****************
  2678 ;; Defined at:
  2679 ;;		line 179 in file "interrupts.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  side            1    wreg     enum E4082
  2682 ;;  reverse         1   17[COMRAM] unsigned char 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  side            1   18[COMRAM] enum E4082
  2685 ;; Return value:  Size  Location     Type
  2686 ;;		None               void
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2694 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;Total ram usage:        2 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_KController
  2704 ;;		_rotate
  2705 ;;		_Reversing
  2706 ;;		_smoothTurn
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           	psect	text17
  2711  001594                     __ptext17:
  2712                           	opt stack 0
  2713  001594                     _motorCounterUpdate:
  2714                           	opt stack 24
  2715                           
  2716                           ;incstack = 0
  2717                           ;motorCounterUpdate@side stored from wreg
  2718  001594  6E13               	movwf	motorCounterUpdate@side,c
  2719                           
  2720                           ;interrupts.c: 181: if(side == LEFT && reverse == 1)
  2721  001596  5013               	movf	motorCounterUpdate@side,w,c
  2722  001598  A4D8               	btfss	status,2,c
  2723  00159A  D01B               	goto	i2l1274
  2724  00159C  0412               	decf	motorCounterUpdate@reverse,w,c
  2725  00159E  B4D8               	btfsc	status,2,c
  2726  0015A0  D00B               	goto	i2l1272
  2727  0015A2  D017               	goto	i2l1274
  2728                           
  2729                           ;interrupts.c: 182: {
  2730                           ;interrupts.c: 183: switch(LMotorCounter)
  2731  0015A4  D009               	goto	i2l1272
  2732  0015A6                     i2l1262:
  2733  0015A6  0E02               	movlw	2
  2734  0015A8  D004               	goto	L8
  2735  0015AA                     i2l1264:
  2736  0015AA  0E04               	movlw	4
  2737  0015AC  D002               	goto	L8
  2738                           
  2739                           ;interrupts.c: 187: case 0b00000100: LMotorCounter = 0b00001000; break;
  2740  0015AE  D03E               	goto	i2l1306
  2741                           
  2742                           ;interrupts.c: 188: case 0b00001000: LMotorCounter = 0b00000001; break;
  2743  0015B0  D039               	goto	i2l1300
  2744  0015B2                     L8:
  2745  0015B2  6E53               	movwf	_LMotorCounter,c
  2746  0015B4  D068               	goto	i2l101
  2747                           
  2748                           ;interrupts.c: 189: default: LMotorCounter = 0b00000001;
  2749  0015B6  D036               	goto	i2l1300
  2750  0015B8                     i2l1272:
  2751  0015B8  5053               	movf	_LMotorCounter,w,c
  2752                           
  2753                           ; Switch size 1, requested type "space"
  2754                           ; Number of cases is 4, Range of values is 1 to 8
  2755                           ; switch strategies available:
  2756                           ; Name         Instructions Cycles
  2757                           ; simple_byte           13     7 (average)
  2758                           ;	Chosen strategy is simple_byte
  2759  0015BA  0A01               	xorlw	1	; case 1
  2760  0015BC  B4D8               	btfsc	status,2,c
  2761  0015BE  D7F3               	goto	i2l1262
  2762  0015C0  0A03               	xorlw	3	; case 2
  2763  0015C2  B4D8               	btfsc	status,2,c
  2764  0015C4  D7F2               	goto	i2l1264
  2765  0015C6  0A06               	xorlw	6	; case 4
  2766  0015C8  B4D8               	btfsc	status,2,c
  2767  0015CA  D030               	goto	i2l1306
  2768  0015CC  0A0C               	xorlw	12	; case 8
  2769  0015CE  D02A               	goto	i2l1300
  2770                           
  2771                           ;interrupts.c: 191: } else if(side == RIGHT && reverse == 1)
  2772  0015D0  D05A               	goto	i2l101
  2773  0015D2                     i2l1274:
  2774  0015D2  0413               	decf	motorCounterUpdate@side,w,c
  2775  0015D4  A4D8               	btfss	status,2,c
  2776  0015D6  D01D               	goto	i2l1292
  2777  0015D8  0412               	decf	motorCounterUpdate@reverse,w,c
  2778  0015DA  B4D8               	btfsc	status,2,c
  2779  0015DC  D00B               	goto	i2l1290
  2780  0015DE  D019               	goto	i2l1292
  2781                           
  2782                           ;interrupts.c: 192: {
  2783                           ;interrupts.c: 193: switch(RMotorCounter)
  2784  0015E0  D009               	goto	i2l1290
  2785  0015E2                     i2l1280:
  2786  0015E2  0E08               	movlw	8
  2787  0015E4  D040               	goto	L16
  2788  0015E6                     i2l1282:
  2789  0015E6  0E01               	movlw	1
  2790  0015E8  D03E               	goto	L16
  2791  0015EA                     i2l1284:
  2792  0015EA  0E02               	movlw	2
  2793  0015EC  D03C               	goto	L16
  2794  0015EE                     i2l1286:
  2795  0015EE  0E04               	movlw	4
  2796  0015F0  D03A               	goto	L16
  2797                           
  2798                           ;interrupts.c: 199: default: RMotorCounter = 0b00001000;
  2799  0015F2  D7F7               	goto	i2l1280
  2800  0015F4                     i2l1290:
  2801  0015F4  5054               	movf	_RMotorCounter,w,c
  2802                           
  2803                           ; Switch size 1, requested type "space"
  2804                           ; Number of cases is 4, Range of values is 1 to 8
  2805                           ; switch strategies available:
  2806                           ; Name         Instructions Cycles
  2807                           ; simple_byte           13     7 (average)
  2808                           ;	Chosen strategy is simple_byte
  2809  0015F6  0A01               	xorlw	1	; case 1
  2810  0015F8  B4D8               	btfsc	status,2,c
  2811  0015FA  D7F3               	goto	i2l1280
  2812  0015FC  0A03               	xorlw	3	; case 2
  2813  0015FE  B4D8               	btfsc	status,2,c
  2814  001600  D7F2               	goto	i2l1282
  2815  001602  0A06               	xorlw	6	; case 4
  2816  001604  B4D8               	btfsc	status,2,c
  2817  001606  D7F1               	goto	i2l1284
  2818  001608  0A0C               	xorlw	12	; case 8
  2819  00160A  B4D8               	btfsc	status,2,c
  2820  00160C  D7F0               	goto	i2l1286
  2821  00160E  D7E9               	goto	i2l1280
  2822                           
  2823                           ;interrupts.c: 201: } else if(side == LEFT && reverse == 0)
  2824  001610  D03A               	goto	i2l101
  2825  001612                     i2l1292:
  2826  001612  5013               	movf	motorCounterUpdate@side,w,c
  2827  001614  A4D8               	btfss	status,2,c
  2828  001616  D01B               	goto	i2l1310
  2829  001618  5012               	movf	motorCounterUpdate@reverse,w,c
  2830  00161A  B4D8               	btfsc	status,2,c
  2831  00161C  D009               	goto	i2l1308
  2832  00161E  D017               	goto	i2l1310
  2833                           
  2834                           ;interrupts.c: 202: {
  2835                           ;interrupts.c: 203: switch(LMotorCounter)
  2836  001620  D007               	goto	i2l1308
  2837                           
  2838                           ;interrupts.c: 204: {
  2839                           ;interrupts.c: 205: case 0b00000001: LMotorCounter = 0b00001000; break;
  2840  001622  D004               	goto	i2l1306
  2841  001624                     i2l1300:
  2842  001624  0E01               	movlw	1
  2843  001626  D7C5               	goto	L8
  2844                           
  2845                           ;interrupts.c: 207: case 0b00000100: LMotorCounter = 0b00000010; break;
  2846  001628  D7BE               	goto	i2l1262
  2847                           
  2848                           ;interrupts.c: 208: case 0b00001000: LMotorCounter = 0b00000100; break;
  2849  00162A  D7BF               	goto	i2l1264
  2850  00162C                     i2l1306:
  2851  00162C  0E08               	movlw	8
  2852  00162E  D7C1               	goto	L8
  2853  001630                     i2l1308:
  2854  001630  5053               	movf	_LMotorCounter,w,c
  2855                           
  2856                           ; Switch size 1, requested type "space"
  2857                           ; Number of cases is 4, Range of values is 1 to 8
  2858                           ; switch strategies available:
  2859                           ; Name         Instructions Cycles
  2860                           ; simple_byte           13     7 (average)
  2861                           ;	Chosen strategy is simple_byte
  2862  001632  0A01               	xorlw	1	; case 1
  2863  001634  B4D8               	btfsc	status,2,c
  2864  001636  D7FA               	goto	i2l1306
  2865  001638  0A03               	xorlw	3	; case 2
  2866  00163A  B4D8               	btfsc	status,2,c
  2867  00163C  D7F3               	goto	i2l1300
  2868  00163E  0A06               	xorlw	6	; case 4
  2869  001640  B4D8               	btfsc	status,2,c
  2870  001642  D7B1               	goto	i2l1262
  2871  001644  0A0C               	xorlw	12	; case 8
  2872  001646  B4D8               	btfsc	status,2,c
  2873  001648  D7B0               	goto	i2l1264
  2874  00164A  D7F0               	goto	i2l1306
  2875                           
  2876                           ;interrupts.c: 211: } else if(side == RIGHT && reverse == 0)
  2877  00164C  D01C               	goto	i2l101
  2878  00164E                     i2l1310:
  2879  00164E  0413               	decf	motorCounterUpdate@side,w,c
  2880  001650  A4D8               	btfss	status,2,c
  2881  001652  D019               	goto	i2l101
  2882  001654  5012               	movf	motorCounterUpdate@reverse,w,c
  2883  001656  B4D8               	btfsc	status,2,c
  2884  001658  D009               	goto	i2l1326
  2885  00165A  D015               	goto	i2l101
  2886                           
  2887                           ;interrupts.c: 212: {
  2888                           ;interrupts.c: 213: switch(RMotorCounter)
  2889  00165C  D007               	goto	i2l1326
  2890                           
  2891                           ;interrupts.c: 214: {
  2892                           ;interrupts.c: 215: case 0b00000001: RMotorCounter = 0b00000010; break;
  2893  00165E  D7C5               	goto	i2l1284
  2894                           
  2895                           ;interrupts.c: 216: case 0b00000010: RMotorCounter = 0b00000100; break;
  2896  001660  D7C6               	goto	i2l1286
  2897                           
  2898                           ;interrupts.c: 217: case 0b00000100: RMotorCounter = 0b00001000; break;
  2899  001662  D7BF               	goto	i2l1280
  2900                           
  2901                           ;interrupts.c: 218: case 0b00001000: RMotorCounter = 0b00000001; break;
  2902  001664  D7C0               	goto	i2l1282
  2903  001666                     L16:
  2904  001666  6E54               	movwf	_RMotorCounter,c
  2905  001668  D00E               	goto	i2l101
  2906                           
  2907                           ;interrupts.c: 219: default: RMotorCounter = 0b00000001;
  2908  00166A  D7BD               	goto	i2l1282
  2909  00166C                     i2l1326:
  2910  00166C  5054               	movf	_RMotorCounter,w,c
  2911                           
  2912                           ; Switch size 1, requested type "space"
  2913                           ; Number of cases is 4, Range of values is 1 to 8
  2914                           ; switch strategies available:
  2915                           ; Name         Instructions Cycles
  2916                           ; simple_byte           13     7 (average)
  2917                           ;	Chosen strategy is simple_byte
  2918  00166E  0A01               	xorlw	1	; case 1
  2919  001670  B4D8               	btfsc	status,2,c
  2920  001672  D7BB               	goto	i2l1284
  2921  001674  0A03               	xorlw	3	; case 2
  2922  001676  B4D8               	btfsc	status,2,c
  2923  001678  D7BA               	goto	i2l1286
  2924  00167A  0A06               	xorlw	6	; case 4
  2925  00167C  B4D8               	btfsc	status,2,c
  2926  00167E  D7B1               	goto	i2l1280
  2927  001680  0A0C               	xorlw	12	; case 8
  2928  001682  D7B1               	goto	i2l1282
  2929  001684  D000               	goto	i2l101
  2930  001686                     i2l101:
  2931  001686  0012               	return		;funcret
  2932  001688                     __end_of_motorCounterUpdate:
  2933                           	opt stack 0
  2934                           pclatu	equ	0xFFB
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           intcon2	equ	0xFF1
  2944                           postinc0	equ	0xFEE
  2945                           fsr0h	equ	0xFEA
  2946                           fsr0l	equ	0xFE9
  2947                           wreg	equ	0xFE8
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           bsr	equ	0xFE0
  2951                           postinc2	equ	0xFDE
  2952                           postdec2	equ	0xFDD
  2953                           fsr2h	equ	0xFDA
  2954                           fsr2l	equ	0xFD9
  2955                           status	equ	0xFD8
  2956                           
  2957 ;; *************** function _merge *****************
  2958 ;; Defined at:
  2959 ;;		line 224 in file "interrupts.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  left            1    wreg     unsigned char 
  2962 ;;  right           1   17[COMRAM] unsigned char 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  left            1   18[COMRAM] unsigned char 
  2965 ;;  merged          1   19[COMRAM] unsigned char 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      unsigned char 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2975 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;Total ram usage:        3 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_high_isr
  2985 ;;		_KController
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text18
  2990  001958                     __ptext18:
  2991                           	opt stack 0
  2992  001958                     _merge:
  2993                           	opt stack 25
  2994                           
  2995                           ;incstack = 0
  2996                           ;merge@left stored from wreg
  2997  001958  6E13               	movwf	merge@left,c
  2998                           
  2999                           ;interrupts.c: 226: unsigned char merged;
  3000                           ;interrupts.c: 227: merged = left + (right << 4);
  3001  00195A  3812               	swapf	merge@right,w,c
  3002  00195C  0BF0               	andlw	240
  3003  00195E  2413               	addwf	merge@left,w,c
  3004  001960  6E14               	movwf	merge@merged,c
  3005                           
  3006                           ;interrupts.c: 228: return merged;
  3007  001962  5014               	movf	merge@merged,w,c
  3008  001964  D000               	goto	i2l104
  3009  001966                     i2l104:
  3010  001966  0012               	return		;funcret
  3011  001968                     __end_of_merge:
  3012                           	opt stack 0
  3013                           pclatu	equ	0xFFB
  3014                           pclath	equ	0xFFA
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           intcon	equ	0xFF2
  3022                           intcon2	equ	0xFF1
  3023                           postinc0	equ	0xFEE
  3024                           fsr0h	equ	0xFEA
  3025                           fsr0l	equ	0xFE9
  3026                           wreg	equ	0xFE8
  3027                           fsr1h	equ	0xFE2
  3028                           fsr1l	equ	0xFE1
  3029                           bsr	equ	0xFE0
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _ABS *****************
  3037 ;; Defined at:
  3038 ;;		line 237 in file "interrupts.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  x               2   17[COMRAM] int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  2   17[COMRAM] int 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;Total ram usage:        2 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_KController
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text19
  3066  00192A                     __ptext19:
  3067                           	opt stack 0
  3068  00192A                     _ABS:
  3069                           	opt stack 24
  3070                           
  3071                           ;interrupts.c: 239: if(x<0) x = -x;
  3072                           
  3073                           ;incstack = 0
  3074  00192A  AE13               	btfss	ABS@x+1,7,c
  3075  00192C  D005               	goto	i2l1332
  3076  00192E  6C12               	negf	ABS@x,c
  3077  001930  1E13               	comf	ABS@x+1,f,c
  3078  001932  B0D8               	btfsc	status,0,c
  3079  001934  2A13               	incf	ABS@x+1,f,c
  3080  001936  D000               	goto	i2l1332
  3081  001938                     i2l1332:
  3082                           
  3083                           ;interrupts.c: 240: return x;
  3084  001938  C012  F012         	movff	ABS@x,?_ABS
  3085  00193C  C013  F013         	movff	ABS@x+1,?_ABS+1
  3086  001940  D000               	goto	i2l111
  3087  001942                     i2l111:
  3088  001942  0012               	return		;funcret
  3089  001944                     __end_of_ABS:
  3090                           	opt stack 0
  3091                           pclatu	equ	0xFFB
  3092                           pclath	equ	0xFFA
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           intcon2	equ	0xFF1
  3101                           postinc0	equ	0xFEE
  3102                           fsr0h	equ	0xFEA
  3103                           fsr0l	equ	0xFE9
  3104                           wreg	equ	0xFE8
  3105                           fsr1h	equ	0xFE2
  3106                           fsr1l	equ	0xFE1
  3107                           bsr	equ	0xFE0
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           pclatu	equ	0xFFB
  3114                           pclath	equ	0xFFA
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           intcon	equ	0xFF2
  3122                           intcon2	equ	0xFF1
  3123                           postinc0	equ	0xFEE
  3124                           fsr0h	equ	0xFEA
  3125                           fsr0l	equ	0xFE9
  3126                           wreg	equ	0xFE8
  3127                           fsr1h	equ	0xFE2
  3128                           fsr1l	equ	0xFE1
  3129                           bsr	equ	0xFE0
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136                           	psect	rparam
  3137  0000                     pclatu	equ	0xFFB
  3138                           pclath	equ	0xFFA
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           intcon2	equ	0xFF1
  3147                           postinc0	equ	0xFEE
  3148                           fsr0h	equ	0xFEA
  3149                           fsr0l	equ	0xFE9
  3150                           wreg	equ	0xFE8
  3151                           fsr1h	equ	0xFE2
  3152                           fsr1l	equ	0xFE1
  3153                           bsr	equ	0xFE0
  3154                           postinc2	equ	0xFDE
  3155                           postdec2	equ	0xFDD
  3156                           fsr2h	equ	0xFDA
  3157                           fsr2l	equ	0xFD9
  3158                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      86
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             56 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             52 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             41 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             41 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             41 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    2768
                                             27 COMRAM    14    14      0
                        _KController
                          _Reversing
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               0     0      0     706
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     706
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          7     7      0    1115
                                             20 COMRAM     7     7      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     706
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      56       1       67.7%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B4       6        0.0%
DATA                 0      0      B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 15 19:32:35 2015

                ___awdiv@sign 002F                            bsr 000FE0           ___wmul@multiplicand 002C  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l205 1826                           l214 18DC                           l250 18D2  
                         l219 18F0                           l235 1296                           l228 1234  
                         l245 18A2                           l253 1882                           l246 18AA  
                         l249 18CA                           l446 17C2                           _ABS 192A  
                __CFG_CPB$OFF 000000                           _MAX 18AC                           _MIN 1884  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 18F2                           wreg 000FE8  
                        ABS@x 0012                          ?_ABS 0012                          ?_MAX 0030  
                        ?_MIN 0030                          MAX@a 0030                          MAX@b 0032  
                        MIN@a 0030                          MIN@b 0032                  __CFG_WDT$OFF 000000  
                        l1000 18EA                          l1600 1052                          l1338 1812  
                        l1610 11BC                          l1604 10B2                          l1606 11A6  
                        l1630 127E                          l1552 1744                          l1640 1320  
                        l1624 125A                          l1642 1374                          l1564 176C  
                        l1580 17A8                          l1644 13C8                          l1652 13F4  
                        l1566 1776                          l1558 1756                          l1584 17B8  
                        l1576 179C                          l1568 177E                          l1648 13DE  
                        l1594 102E                          l1658 194E                          u1110 102C  
                        u1120 1050                          u1160 1258                          u1170 127C  
                        u1247 1818                          _LATC 000F8B                          u1195 12A2  
                        i2l60 155A                          _main 1944                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0035                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 1800                         ??_ABS 0014  
                       ??_MAX 0034                         ??_MIN 0034    __size_of_sensorComputation 022C  
                       ?_main 0001               __end_of___awdiv 17C4                         _T0CON 000FD5  
             ___awdiv@divisor 002C                         i2l101 1686                         i2l111 1942  
                       i2l104 1966                         i2l115 172C                         i2l117 1728  
             ___awdiv@counter 002E                         _TRISC 000F94           _ConfigureOscillator 1968  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1800  
                       _merge 1958               __end_of_low_isr 00A2                         tablat 000FF5  
                       status 000FD8          ?_ConfigureOscillator 0001               __initialization 1834  
                __end_of_main 1958                        ??_main 003F                 __activetblptr 000002  
                      ?_delay 002A                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        ?_merge 0012                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 002A                        i2l1300 1624  
                      i2l1310 164E                        i2l1400 170C                        i2l1306 162C  
                      i2l1332 1938                        i2l1308 1630                        i2l1500 151E  
                      i2l1326 166C                        i2l1262 15A6                        i2l1502 152C  
                      i2l1280 15E2                        i2l1264 15AA                        i2l1272 15B8  
                      i2l1282 15E6                        i2l1290 15F4                        i2l1274 15D2  
                      i2l1506 153A                        i2l1284 15EA                        i2l1292 1612  
                      i2l1508 1552                        i2l1286 15EE                        i2l1470 1458  
                      i2l1392 16DA                        i2l1480 1494                        i2l1490 14D8  
                      i2l1474 1476                        i2l1482 149A                        i2l1492 14DE  
                      i2l1476 1486                        i2l1498 150E                        _INTCON 000FF2  
                      _OSCCON 000FD3                     ??_InitApp 002F         ??_ConfigureOscillator 002A  
                 merge@merged 0014                __CFG_XINST$OFF 000000            sensorComputation@i 0086  
          sensorComputation@j 0088              __end_of_high_isr 1594                        ___wmul 185C  
                   ??___awdiv 002E                __CFG_STVREN$ON 000000                        delay@x 002D  
                      clear_0 183A              ___awdiv@quotient 0030                        _rotate 18F2  
          __size_of_Reversing 001C                  __pdataCOMRAM 0056                  __mediumconst 0000  
                   ??_low_isr 0001                _ReverseCounter 004D                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 1852               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
                ?_KController 0001                __pcstackCOMRAM 0001                 __end_of_delay 1834  
             moveMouse@action 0012                 __end_of_merge 1968          KController@correctTo 001B  
  __end_of_motorCounterUpdate 1688                       ??_delay 002C                       ??_merge 0013  
          _AlgorithmSelection 18D4                  _LTurnCounter 0047             __end_of_Reversing 192A  
                  _delay_time 0051             _MotorDelayCounter 0049           ?_AlgorithmSelection 0001  
                     ?___wmul 002A            __size_of_moveMouse 0008                       ?_rotate 0001  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u92_40 14AA  
                     i2u93_40 14BA                       i2u87_40 1444                       i2u96_40 14EE  
                     i2u88_40 1452                       i2u97_40 14FE                       i2u89_40 1466  
        ??_AlgorithmSelection 002A                     ?_high_isr 0001                 _LMotorCounter 0053  
                     _InitApp 17C4                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 172E               __size_of___wmul 0028                  __psmallconst 1000  
                     __pcinit 1834                       __ramtop 1000                       __ptext0 1944  
                     __ptext1 1236                       __ptext2 100A                       __ptext3 185C  
                     __ptext4 172E                       __ptext5 1884                       __ptext6 18AC  
                     __ptext7 17C4                       __ptext8 1800                       __ptext9 18D4  
             __size_of_rotate 001C                  __size_of_ABS 001A                  __size_of_MAX 0028  
                __size_of_MIN 0028                       delay@ms 002A                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001C                __pintcode_body 1402  
        end_of_initialization 1852              _sensorCorrection 1001             __end_of_moveMouse 197A  
               __Lmediumconst 0000                       int_func 1402               _controllerSteps 0056  
        __size_of_KController 00A6                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0039   __end_of_ConfigureOscillator 1972                  _RTurnCounter 004B  
              __end_of___wmul 1884                 __pidataCOMRAM 197A                __end_of_rotate 190E  
         start_initialization 1834                   __end_of_ABS 1944                   __end_of_MAX 18D4  
                 __end_of_MIN 18AC            _motorCounterUpdate 1594              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 190E  
                    ??___wmul 002E              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 003F  
               __pcstackBANK0 0080        sensorUpdate@sensorTemp 008A             __size_of_high_isr 158C  
                    ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001  
                   _algorithm 0055                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 002A          __end_of_sensorUpdate 1402        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_low_isr 0001                __size_of_delay 0034   __size_of_AlgorithmSelection 001E  
              __size_of_merge 0010                ___wmul@product 002E                     _moveMouse 1972  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 002A  
               _RMotorCounter 0054                 ??_KController 0015                    ?_moveMouse 0001  
            __size_of_InitApp 003C                      __Hrparam 0000                     merge@left 0013  
        sensorComputation@max 0080                      __Lrparam 0000          sensorComputation@min 0082  
        sensorComputation@sum 0084                   ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of_low_isr 008A                      __ptext10 1968  
                    __ptext13 18F2                      __ptext14 190E                      __ptext15 1688  
                    __ptext16 1972                      __ptext17 1594                      __ptext18 1958  
                    __ptext19 192A                      _high_isr 0008                 __size_of_main 0014  
               _RotateCounter 004F         __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A  
         __end_of_KController 172E             _sensorComputation 100A                    _INTCONbits 000FF2  
            KController@steps 0019            ?_sensorComputation 0035                 sensorUpdate@i 00DA  
               sensorUpdate@j 00DC                  _sensorUpdate 1236                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 0037                   ??_moveMouse 0012  
             KController@diff 0017     __end_of_sensorComputation 1236                   _sensorValue 003F  
 __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012                   _KController 1688  
