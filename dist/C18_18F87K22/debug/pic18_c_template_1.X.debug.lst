

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 01:35:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001CE6                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ignoreControll
    43  001CE6  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _LATC	set	3979
    58  0000                     _OSCTUNE	set	3995
    59  0000                     _TRISBbits	set	3987
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISEbits	set	3990
    62  0000                     _ADCON0	set	4034
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON1	set	4033
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADRESL	set	4035
    68  0000                     _OSCCON	set	4051
    69  0000                     _T0CON	set	4053
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001B6A                     __pcinit:
    79                           	opt stack 0
    80  001B6A                     start_initialization:
    81                           	opt stack 0
    82  001B6A                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to BANK0 (8 bytes)
    86  001B6A  EE00  F0F1         	lfsr	0,__pbssBANK0
    87  001B6E  0E08               	movlw	8
    88  001B70                     clear_0:
    89  001B70  6AEE               	clrf	postinc0,c
    90  001B72  06E8               	decf	wreg,f,c
    91  001B74  E1FD               	bnz	clear_0
    92                           
    93                           ; Clear objects allocated to COMRAM (54 bytes)
    94  001B76  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  001B7A  0E36               	movlw	54
    96  001B7C                     clear_1:
    97  001B7C  6AEE               	clrf	postinc0,c
    98  001B7E  06E8               	decf	wreg,f,c
    99  001B80  E1FD               	bnz	clear_1
   100                           
   101                           ; Initialize objects allocated to COMRAM (1 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  001B82  0EE6               	movlw	low __pidataCOMRAM
   104  001B84  6EF6               	movwf	tblptrl,c
   105  001B86  0E1C               	movlw	high __pidataCOMRAM
   106  001B88  6EF7               	movwf	tblptrh,c
   107  001B8A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  001B8C  6EF8               	movwf	tblptru,c
   109  001B8E  0009               	tblrd		*+	;fetch initializer
   110  001B90  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   111  001B94                     end_of_initialization:
   112                           	opt stack 0
   113  001B94                     __end_of__initialization:
   114                           	opt stack 0
   115  001B94  0E00               	movlw	low (__Lmediumconst shr (0+16))
   116  001B96  6EF8               	movwf	tblptru,c
   117  001B98  0100               	movlb	0
   118  001B9A  EF03  F00E         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssCOMRAM
   127  000001                     __pbssCOMRAM:
   128                           	opt stack 0
   129  000001                     _sensorValue:
   130                           	opt stack 0
   131  000001                     	ds	8
   132  000009                     _ControllerCounter:
   133                           	opt stack 0
   134  000009                     	ds	2
   135  00000B                     _Deadend:
   136                           	opt stack 0
   137  00000B                     	ds	2
   138  00000D                     _ForwardCounter:
   139                           	opt stack 0
   140  00000D                     	ds	2
   141  00000F                     _LTurnCounter:
   142                           	opt stack 0
   143  00000F                     	ds	2
   144  000011                     _MotorDelayCounter:
   145                           	opt stack 0
   146  000011                     	ds	2
   147  000013                     _RTurnCounter:
   148                           	opt stack 0
   149  000013                     	ds	2
   150  000015                     _ReverseCounter:
   151                           	opt stack 0
   152  000015                     	ds	2
   153  000017                     _RotateCounter:
   154                           	opt stack 0
   155  000017                     	ds	2
   156  000019                     _TurnLeft:
   157                           	opt stack 0
   158  000019                     	ds	2
   159  00001B                     _TurnLeftAgain:
   160                           	opt stack 0
   161  00001B                     	ds	2
   162  00001D                     _TurnRight:
   163                           	opt stack 0
   164  00001D                     	ds	2
   165  00001F                     _TurnedLeft:
   166                           	opt stack 0
   167  00001F                     	ds	2
   168  000021                     _TurnedRight:
   169                           	opt stack 0
   170  000021                     	ds	2
   171  000023                     _controlToLeft:
   172                           	opt stack 0
   173  000023                     	ds	2
   174  000025                     _controlToRight:
   175                           	opt stack 0
   176  000025                     	ds	2
   177  000027                     _delay_time:
   178                           	opt stack 0
   179  000027                     	ds	2
   180  000029                     _errorD:
   181                           	opt stack 0
   182  000029                     	ds	2
   183  00002B                     _errorP:
   184                           	opt stack 0
   185  00002B                     	ds	2
   186  00002D                     _oldErrorP:
   187                           	opt stack 0
   188  00002D                     	ds	2
   189  00002F                     _totalError:
   190                           	opt stack 0
   191  00002F                     	ds	2
   192  000031                     _LMotorCounter:
   193                           	opt stack 0
   194  000031                     	ds	1
   195  000032                     _RMotorCounter:
   196                           	opt stack 0
   197  000032                     	ds	1
   198  000033                     _algorithm:
   199                           	opt stack 0
   200  000033                     	ds	1
   201  000034                     _deadEnd:
   202                           	opt stack 0
   203  000034                     	ds	1
   204  000035                     _justTurned:
   205                           	opt stack 0
   206  000035                     	ds	1
   207  000036                     _rotatingSide:
   208                           	opt stack 0
   209  000036                     	ds	1
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           
   217                           	psect	dataCOMRAM
   218  00005D                     __pdataCOMRAM:
   219                           	opt stack 0
   220  00005D                     _ignoreControll:
   221                           	opt stack 0
   222  00005D                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	bssBANK0
   231  0000F1                     __pbssBANK0:
   232                           	opt stack 0
   233  0000F1                     _sensorCorrection:
   234                           	opt stack 0
   235  0000F1                     	ds	8
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           
   243                           	psect	cstackBANK0
   244  000080                     __pcstackBANK0:
   245                           	opt stack 0
   246  000080                     ___awdiv@counter:
   247                           	opt stack 0
   248  000080                     delay@x:
   249                           	opt stack 0
   250  000080                     ___wmul@product:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x0
   254  000080                     	ds	1
   255  000081                     ___awdiv@sign:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x1
   259  000081                     	ds	1
   260  000082                     ?_MIN:
   261                           	opt stack 0
   262  000082                     ?_MAX:
   263                           	opt stack 0
   264  000082                     MIN@a:
   265                           	opt stack 0
   266  000082                     MAX@a:
   267                           	opt stack 0
   268  000082                     ___awdiv@quotient:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x2
   272  000082                     	ds	2
   273  000084                     ??_setCorrection:
   274  000084                     MIN@b:
   275                           	opt stack 0
   276  000084                     MAX@b:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x4
   280  000084                     	ds	2
   281  000086                     ??_MIN:
   282  000086                     ??_MAX:
   283  000086                     setCorrection@frontAvg:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x6
   287  000086                     	ds	1
   288  000087                     sensorComputation@sensorTemp:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x7
   292  000087                     	ds	1
   293  000088                     setCorrection@sideAvg:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x8
   297  000088                     	ds	1
   298  000089                     sensorComputation@getCorrection:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x9
   302  000089                     	ds	1
   303  00008A                     ??_sensorComputation:
   304                           
   305                           ; 0 bytes @ 0xA
   306  00008A                     	ds	2
   307  00008C                     sensorComputation@max:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0xC
   311  00008C                     	ds	2
   312  00008E                     sensorComputation@min:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xE
   316  00008E                     	ds	2
   317  000090                     sensorComputation@sum:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x10
   321  000090                     	ds	2
   322  000092                     sensorComputation@j:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x12
   326  000092                     	ds	2
   327  000094                     sensorComputation@i:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x14
   331  000094                     	ds	2
   332  000096                     ??_sensorUpdate:
   333                           
   334                           ; 0 bytes @ 0x16
   335  000096                     	ds	6
   336  00009C                     sensorUpdate@sensorTemp:
   337                           	opt stack 0
   338                           
   339                           ; 80 bytes @ 0x1C
   340  00009C                     	ds	80
   341  0000EC                     sensorUpdate@getCorrection:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6C
   345  0000EC                     	ds	1
   346  0000ED                     sensorUpdate@i:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x6D
   350  0000ED                     	ds	2
   351  0000EF                     sensorUpdate@j:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x6F
   355  0000EF                     	ds	2
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363                           	psect	cstackCOMRAM
   364  000037                     __pcstackCOMRAM:
   365                           	opt stack 0
   366  000037                     ??_low_isr:
   367  000037                     
   368                           ; 0 bytes @ 0x0
   369  000037                     	ds	17
   370  000048                     motorCounterUpdate@reverse:
   371                           	opt stack 0
   372  000048                     merge@right:
   373                           	opt stack 0
   374  000048                     moveMouse@action:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x11
   378  000048                     	ds	1
   379  000049                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  000049                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  000049                     	ds	1
   386  00004A                     merge@merged:
   387                           	opt stack 0
   388  00004A                     rotate@side:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x13
   392  00004A                     	ds	1
   393  00004B                     ??_high_isr:
   394                           
   395                           ; 0 bytes @ 0x14
   396  00004B                     	ds	14
   397  000059                     ?___wmul:
   398                           	opt stack 0
   399  000059                     ?___awdiv:
   400                           	opt stack 0
   401  000059                     delay@ms:
   402                           	opt stack 0
   403  000059                     ___wmul@multiplier:
   404                           	opt stack 0
   405  000059                     ___awdiv@dividend:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x22
   409  000059                     	ds	2
   410  00005B                     ??_delay:
   411  00005B                     ___wmul@multiplicand:
   412                           	opt stack 0
   413  00005B                     ___awdiv@divisor:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x24
   417  00005B                     	ds	1
   418  00005C                     
   419                           ; 0 bytes @ 0x25
   420  00005C                     	ds	1
   421  00005D                     tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           
   428                           ; 0 bytes @ 0x26
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 41 in file "main.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;		None               void
   441 ;; Registers used:
   442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   452 ;;Total ram usage:        0 bytes
   453 ;; Hardware stack levels required when called:    7
   454 ;; This function calls:
   455 ;;		_ConfigureOscillator
   456 ;;		_InitApp
   457 ;;		_sensorUpdate
   458 ;;		_setCorrection
   459 ;; This function is called by:
   460 ;;		Startup code after reset
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text0
   465  001C06                     __ptext0:
   466                           	opt stack 0
   467  001C06                     _main:
   468                           	opt stack 24
   469                           
   470                           ;main.c: 44: ConfigureOscillator();
   471                           
   472                           ;incstack = 0
   473  001C06  EC6A  F00E         	call	_ConfigureOscillator	;wreg free
   474                           
   475                           ;main.c: 47: InitApp();
   476  001C0A  EC98  F00D         	call	_InitApp	;wreg free
   477                           
   478                           ;main.c: 48: sensorUpdate(1);
   479  001C0E  0E01               	movlw	1
   480  001C10  EC57  F00B         	call	_sensorUpdate
   481                           
   482                           ;main.c: 49: sensorUpdate(1);
   483  001C14  0E01               	movlw	1
   484  001C16  EC57  F00B         	call	_sensorUpdate
   485                           
   486                           ;main.c: 50: sensorUpdate(1);
   487  001C1A  0E01               	movlw	1
   488  001C1C  EC57  F00B         	call	_sensorUpdate
   489                           
   490                           ;main.c: 51: setCorrection();
   491  001C20  ECE4  F00B         	call	_setCorrection	;wreg free
   492                           
   493                           ;main.c: 52: INTCONbits.GIE = 1;
   494  001C24  8EF2               	bsf	intcon,7,c	;volatile
   495  001C26  D000               	goto	l1973
   496  001C28                     l1973:
   497                           
   498                           ;main.c: 54: {
   499                           ;main.c: 55: sensorUpdate(0);
   500  001C28  0E00               	movlw	0
   501  001C2A  EC57  F00B         	call	_sensorUpdate
   502  001C2E  D7FC               	goto	l1973
   503  001C30  EF51  F000         	goto	start
   504  001C34                     __end_of_main:
   505                           	opt stack 0
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           intcon	equ	0xFF2
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514 ;; *************** function _setCorrection *****************
   515 ;; Defined at:
   516 ;;		line 125 in file "user.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  sideAvg         2    8[BANK0 ] int 
   521 ;;  frontAvg        2    6[BANK0 ] int 
   522 ;; Return value:  Size  Location     Type
   523 ;;		None               void
   524 ;; Registers used:
   525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;Total ram usage:        6 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; Hardware stack levels required when called:    5
   538 ;; This function calls:
   539 ;;		___awdiv
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text1
   546  0017C8                     __ptext1:
   547                           	opt stack 0
   548  0017C8                     _setCorrection:
   549                           	opt stack 25
   550                           
   551                           ;user.c: 127: int sideAvg,frontAvg;
   552                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   553                           
   554                           ;incstack = 0
   555  0017C8  5001               	movf	_sensorValue,w,c
   556  0017CA  2403               	addwf	_sensorValue+2,w,c
   557  0017CC  6E59               	movwf	___awdiv@dividend,c
   558  0017CE  5002               	movf	_sensorValue+1,w,c
   559  0017D0  2004               	addwfc	_sensorValue+3,w,c
   560  0017D2  6E5A               	movwf	___awdiv@dividend+1,c
   561  0017D4  0E00               	movlw	0
   562  0017D6  6E5C               	movwf	___awdiv@divisor+1,c
   563  0017D8  0E02               	movlw	2
   564  0017DA  6E5B               	movwf	___awdiv@divisor,c
   565  0017DC  ECD9  F00C         	call	___awdiv	;wreg free
   566  0017E0  C059  F088         	movff	?___awdiv,setCorrection@sideAvg
   567  0017E4  C05A  F089         	movff	?___awdiv+1,setCorrection@sideAvg+1
   568                           
   569                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   570  0017E8  5007               	movf	_sensorValue+6,w,c
   571  0017EA  2405               	addwf	_sensorValue+4,w,c
   572  0017EC  6E59               	movwf	___awdiv@dividend,c
   573  0017EE  5008               	movf	_sensorValue+7,w,c
   574  0017F0  2006               	addwfc	_sensorValue+5,w,c
   575  0017F2  6E5A               	movwf	___awdiv@dividend+1,c
   576  0017F4  0E00               	movlw	0
   577  0017F6  6E5C               	movwf	___awdiv@divisor+1,c
   578  0017F8  0E02               	movlw	2
   579  0017FA  6E5B               	movwf	___awdiv@divisor,c
   580  0017FC  ECD9  F00C         	call	___awdiv	;wreg free
   581  001800  C059  F086         	movff	?___awdiv,setCorrection@frontAvg
   582  001804  C05A  F087         	movff	?___awdiv+1,setCorrection@frontAvg+1
   583                           
   584                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   585  001808  C001  F084         	movff	_sensorValue,??_setCorrection
   586  00180C  C002  F085         	movff	_sensorValue+1,??_setCorrection+1
   587  001810  0100               	movlb	0	; () banked
   588  001812  1F84               	comf	??_setCorrection& (0+255),f,b
   589  001814  1F85               	comf	(??_setCorrection+1)& (0+255),f,b
   590  001816  4B84               	infsnz	??_setCorrection& (0+255),f,b
   591  001818  2B85               	incf	(??_setCorrection+1)& (0+255),f,b
   592  00181A  0100               	movlb	0	; () banked
   593  00181C  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   594  00181E  0100               	movlb	0	; () banked
   595  001820  2584               	addwf	??_setCorrection& (0+255),w,b
   596  001822  0100               	movlb	0	; () banked
   597  001824  6FF1               	movwf	_sensorCorrection& (0+255),b
   598  001826  0100               	movlb	0	; () banked
   599  001828  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   600  00182A  0100               	movlb	0	; () banked
   601  00182C  2185               	addwfc	(??_setCorrection+1)& (0+255),w,b
   602  00182E  0100               	movlb	0	; () banked
   603  001830  6FF2               	movwf	(_sensorCorrection+1)& (0+255),b
   604                           
   605                           ; BSR set to: 0
   606                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   607  001832  EE20  F003         	lfsr	2,_sensorValue+2
   608  001836  CFDE F084          	movff	postinc2,??_setCorrection
   609  00183A  CFDD F085          	movff	postdec2,??_setCorrection+1
   610  00183E  0100               	movlb	0	; () banked
   611  001840  1F84               	comf	??_setCorrection& (0+255),f,b
   612  001842  1F85               	comf	(??_setCorrection+1)& (0+255),f,b
   613  001844  4B84               	infsnz	??_setCorrection& (0+255),f,b
   614  001846  2B85               	incf	(??_setCorrection+1)& (0+255),f,b
   615  001848  0100               	movlb	0	; () banked
   616  00184A  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   617  00184C  0100               	movlb	0	; () banked
   618  00184E  2584               	addwf	??_setCorrection& (0+255),w,b
   619  001850  0100               	movlb	0	; () banked
   620  001852  6FF3               	movwf	(_sensorCorrection+2)& (0+255),b
   621  001854  0100               	movlb	0	; () banked
   622  001856  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   623  001858  0100               	movlb	0	; () banked
   624  00185A  2185               	addwfc	(??_setCorrection+1)& (0+255),w,b
   625  00185C  0100               	movlb	0	; () banked
   626  00185E  6FF4               	movwf	(_sensorCorrection+3)& (0+255),b
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 133: sensorCorrection[2] = sideAvg - sensorValue[2];
   630  001860  EE20  F005         	lfsr	2,_sensorValue+4
   631  001864  CFDE F084          	movff	postinc2,??_setCorrection
   632  001868  CFDD F085          	movff	postdec2,??_setCorrection+1
   633  00186C  0100               	movlb	0	; () banked
   634  00186E  1F84               	comf	??_setCorrection& (0+255),f,b
   635  001870  1F85               	comf	(??_setCorrection+1)& (0+255),f,b
   636  001872  4B84               	infsnz	??_setCorrection& (0+255),f,b
   637  001874  2B85               	incf	(??_setCorrection+1)& (0+255),f,b
   638  001876  0100               	movlb	0	; () banked
   639  001878  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   640  00187A  0100               	movlb	0	; () banked
   641  00187C  2584               	addwf	??_setCorrection& (0+255),w,b
   642  00187E  0100               	movlb	0	; () banked
   643  001880  6FF5               	movwf	(_sensorCorrection+4)& (0+255),b
   644  001882  0100               	movlb	0	; () banked
   645  001884  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   646  001886  0100               	movlb	0	; () banked
   647  001888  2185               	addwfc	(??_setCorrection+1)& (0+255),w,b
   648  00188A  0100               	movlb	0	; () banked
   649  00188C  6FF6               	movwf	(_sensorCorrection+5)& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;user.c: 134: sensorCorrection[3] = sideAvg - sensorValue[3];
   653  00188E  EE20  F007         	lfsr	2,_sensorValue+6
   654  001892  CFDE F084          	movff	postinc2,??_setCorrection
   655  001896  CFDD F085          	movff	postdec2,??_setCorrection+1
   656  00189A  0100               	movlb	0	; () banked
   657  00189C  1F84               	comf	??_setCorrection& (0+255),f,b
   658  00189E  1F85               	comf	(??_setCorrection+1)& (0+255),f,b
   659  0018A0  4B84               	infsnz	??_setCorrection& (0+255),f,b
   660  0018A2  2B85               	incf	(??_setCorrection+1)& (0+255),f,b
   661  0018A4  0100               	movlb	0	; () banked
   662  0018A6  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   663  0018A8  0100               	movlb	0	; () banked
   664  0018AA  2584               	addwf	??_setCorrection& (0+255),w,b
   665  0018AC  0100               	movlb	0	; () banked
   666  0018AE  6FF7               	movwf	(_sensorCorrection+6)& (0+255),b
   667  0018B0  0100               	movlb	0	; () banked
   668  0018B2  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   669  0018B4  0100               	movlb	0	; () banked
   670  0018B6  2185               	addwfc	(??_setCorrection+1)& (0+255),w,b
   671  0018B8  0100               	movlb	0	; () banked
   672  0018BA  6FF8               	movwf	(_sensorCorrection+7)& (0+255),b
   673                           
   674                           ; BSR set to: 0
   675  0018BC  0012               	return		;funcret
   676  0018BE                     __end_of_setCorrection:
   677                           	opt stack 0
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           intcon	equ	0xFF2
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postinc2	equ	0xFDE
   686                           postdec2	equ	0xFDD
   687                           
   688 ;; *************** function _sensorUpdate *****************
   689 ;; Defined at:
   690 ;;		line 161 in file "user.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  getCorrectio    1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  getCorrectio    1  108[BANK0 ] unsigned char 
   695 ;;  sensorTemp     80   28[BANK0 ] int [10][4]
   696 ;;  j               2  111[BANK0 ] int 
   697 ;;  i               2  109[BANK0 ] int 
   698 ;; Return value:  Size  Location     Type
   699 ;;		None               void
   700 ;; Registers used:
   701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;Total ram usage:       91 bytes
   712 ;; Hardware stack levels used:    1
   713 ;; Hardware stack levels required when called:    6
   714 ;; This function calls:
   715 ;;		___wmul
   716 ;;		_sensorComputation
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text2
   723  0016AE                     __ptext2:
   724                           	opt stack 0
   725  0016AE                     _sensorUpdate:
   726                           	opt stack 24
   727                           
   728                           ; BSR set to: 0
   729                           ;incstack = 0
   730                           ;sensorUpdate@getCorrection stored from wreg
   731  0016AE  0100               	movlb	0	; () banked
   732  0016B0  6FEC               	movwf	sensorUpdate@getCorrection& (0+255),b
   733                           
   734                           ; BSR set to: 0
   735                           ;user.c: 163: int i,j;
   736                           ;user.c: 164: int sensorTemp[4][10];
   737                           ;user.c: 167: for(i = 0; i < 10; i++)
   738  0016B2  0E00               	movlw	0
   739  0016B4  0100               	movlb	0	; () banked
   740  0016B6  6FEE               	movwf	(sensorUpdate@i+1)& (0+255),b
   741  0016B8  0E00               	movlw	0
   742  0016BA  6FED               	movwf	sensorUpdate@i& (0+255),b
   743  0016BC                     l1923:
   744                           
   745                           ; BSR set to: 0
   746  0016BC  0100               	movlb	0	; () banked
   747  0016BE  BFEE               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   748  0016C0  D00A               	goto	l1927
   749  0016C2  0100               	movlb	0	; () banked
   750  0016C4  51EE               	movf	(sensorUpdate@i+1)& (0+255),w,b
   751  0016C6  E175               	bnz	l1947
   752  0016C8  0E0A               	movlw	10
   753  0016CA  0100               	movlb	0	; () banked
   754  0016CC  5DED               	subwf	sensorUpdate@i& (0+255),w,b
   755  0016CE  B0D8               	btfsc	status,0,c
   756  0016D0  D070               	goto	l1947
   757  0016D2  D001               	goto	l1927
   758                           
   759                           ; BSR set to: 0
   760  0016D4  D06E               	goto	l1947
   761  0016D6                     l1927:
   762                           
   763                           ; BSR set to: 0
   764                           ;user.c: 168: {
   765                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   766  0016D6  0E00               	movlw	0
   767  0016D8  0100               	movlb	0	; () banked
   768  0016DA  6FF0               	movwf	(sensorUpdate@j+1)& (0+255),b
   769  0016DC  0E00               	movlw	0
   770  0016DE  6FEF               	movwf	sensorUpdate@j& (0+255),b
   771  0016E0                     l1929:
   772                           
   773                           ; BSR set to: 0
   774  0016E0  0100               	movlb	0	; () banked
   775  0016E2  BFF0               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   776  0016E4  D00A               	goto	l1933
   777  0016E6  0100               	movlb	0	; () banked
   778  0016E8  51F0               	movf	(sensorUpdate@j+1)& (0+255),w,b
   779  0016EA  E15E               	bnz	l1943
   780  0016EC  0E04               	movlw	4
   781  0016EE  0100               	movlb	0	; () banked
   782  0016F0  5DEF               	subwf	sensorUpdate@j& (0+255),w,b
   783  0016F2  B0D8               	btfsc	status,0,c
   784  0016F4  D059               	goto	l1943
   785  0016F6  D001               	goto	l1933
   786                           
   787                           ; BSR set to: 0
   788  0016F8  D057               	goto	l1943
   789  0016FA                     l1933:
   790                           
   791                           ; BSR set to: 0
   792                           ;user.c: 170: {
   793                           ;user.c: 171: ADCON0 = sensorLocation[j];
   794  0016FA  0E01               	movlw	low _sensorLocation
   795  0016FC  0100               	movlb	0	; () banked
   796  0016FE  25EF               	addwf	sensorUpdate@j& (0+255),w,b
   797  001700  6EF6               	movwf	tblptrl,c
   798  001702  0E10               	movlw	high _sensorLocation
   799  001704  21F0               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   800  001706  6EF7               	movwf	tblptrh,c
   801  001708                     	if	0	;There are less than 3 active tblptr bytes
   802  001708                     	endif
   803  001708  0008               	tblrd		*
   804  00170A  CFF5 FFC2          	movff	tablat,4034	;volatile
   805                           
   806                           ; BSR set to: 0
   807                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   808  00170E  82C2               	bsf	4034,1,c	;volatile
   809                           
   810                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   811  001710  D000               	goto	l314
   812  001712                     l314:
   813                           
   814                           ; BSR set to: 0
   815  001712  B2C2               	btfsc	4034,1,c	;volatile
   816  001714  D7FE               	goto	l314
   817                           
   818                           ; BSR set to: 0
   819                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   820                           
   821                           ; BSR set to: 0
   822  001716  CFC3 F096          	movff	4035,??_sensorUpdate	;volatile
   823  00171A  0E06               	movlw	6
   824  00171C  0100               	movlb	0	; () banked
   825  00171E  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   826  001720                     u1785:
   827  001720  0100               	movlb	0	; () banked
   828  001722  90D8               	bcf	status,0,c
   829  001724  3396               	rrcf	??_sensorUpdate& (0+255),f,b
   830  001726  0100               	movlb	0	; () banked
   831  001728  2F97               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   832  00172A  D7FA               	goto	u1785
   833  00172C  0100               	movlb	0	; () banked
   834  00172E  5196               	movf	??_sensorUpdate& (0+255),w,b
   835  001730  CFC4 F098          	movff	4036,??_sensorUpdate+2	;volatile
   836  001734  0100               	movlb	0	; () banked
   837  001736  6B99               	clrf	(??_sensorUpdate+3)& (0+255),b
   838  001738  0100               	movlb	0	; () banked
   839  00173A  90D8               	bcf	status,0,c
   840  00173C  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   841  00173E  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   842  001740  0100               	movlb	0	; () banked
   843  001742  90D8               	bcf	status,0,c
   844  001744  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   845  001746  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   846  001748  0100               	movlb	0	; () banked
   847  00174A  2798               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   848  00174C  0E00               	movlw	0
   849  00174E  2399               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   850  001750  C0EF  F059         	movff	sensorUpdate@j,___wmul@multiplier
   851  001754  C0F0  F05A         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   852  001758  0E00               	movlw	0
   853  00175A  6E5C               	movwf	___wmul@multiplicand+1,c
   854  00175C  0E14               	movlw	20
   855  00175E  6E5B               	movwf	___wmul@multiplicand,c
   856  001760  EC1A  F00E         	call	___wmul	;wreg free
   857  001764  0E9C               	movlw	low sensorUpdate@sensorTemp
   858  001766  0100               	movlb	0	; () banked
   859  001768  6F9A               	movwf	(??_sensorUpdate+4)& (0+255),b
   860  00176A  0E00               	movlw	high sensorUpdate@sensorTemp
   861  00176C  0100               	movlb	0	; () banked
   862  00176E  6F9B               	movwf	(??_sensorUpdate+5)& (0+255),b
   863  001770  5059               	movf	?___wmul,w,c
   864  001772  0100               	movlb	0	; () banked
   865  001774  279A               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   866  001776  505A               	movf	?___wmul+1,w,c
   867  001778  0100               	movlb	0	; () banked
   868  00177A  239B               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   869  00177C  90D8               	bcf	status,0,c
   870  00177E  0100               	movlb	0	; () banked
   871  001780  35ED               	rlcf	sensorUpdate@i& (0+255),w,b
   872  001782  6ED9               	movwf	fsr2l,c
   873  001784  0100               	movlb	0	; () banked
   874  001786  35EE               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   875  001788  6EDA               	movwf	fsr2h,c
   876  00178A  0100               	movlb	0	; () banked
   877  00178C  519A               	movf	(??_sensorUpdate+4)& (0+255),w,b
   878  00178E  26D9               	addwf	fsr2l,f,c
   879  001790  0100               	movlb	0	; () banked
   880  001792  519B               	movf	(??_sensorUpdate+5)& (0+255),w,b
   881  001794  22DA               	addwfc	fsr2h,f,c
   882  001796  C098  FFDE         	movff	??_sensorUpdate+2,postinc2
   883  00179A  C099  FFDD         	movff	??_sensorUpdate+3,postdec2
   884                           
   885                           ; BSR set to: 0
   886  00179E  0100               	movlb	0	; () banked
   887  0017A0  4BEF               	infsnz	sensorUpdate@j& (0+255),f,b
   888  0017A2  2BF0               	incf	(sensorUpdate@j+1)& (0+255),f,b
   889  0017A4  D79D               	goto	l1929
   890                           
   891                           ; BSR set to: 0
   892  0017A6  D000               	goto	l1943
   893  0017A8                     l1943:
   894                           
   895                           ; BSR set to: 0
   896  0017A8  0100               	movlb	0	; () banked
   897  0017AA  4BED               	infsnz	sensorUpdate@i& (0+255),f,b
   898  0017AC  2BEE               	incf	(sensorUpdate@i+1)& (0+255),f,b
   899  0017AE  D786               	goto	l1923
   900                           
   901                           ; BSR set to: 0
   902  0017B0  D000               	goto	l1947
   903  0017B2                     l1947:
   904                           
   905                           ; BSR set to: 0
   906                           ;user.c: 176: }
   907                           ;user.c: 177: }
   908                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   909  0017B2  0E9C               	movlw	low sensorUpdate@sensorTemp
   910  0017B4  0100               	movlb	0	; () banked
   911  0017B6  6F87               	movwf	sensorComputation@sensorTemp& (0+255),b
   912  0017B8  0E00               	movlw	high sensorUpdate@sensorTemp
   913  0017BA  0100               	movlb	0	; () banked
   914  0017BC  6F88               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   915  0017BE  C0EC  F089         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   916  0017C2  EC07  F00A         	call	_sensorComputation	;wreg free
   917  0017C6  0012               	return		;funcret
   918  0017C8                     __end_of_sensorUpdate:
   919                           	opt stack 0
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           intcon	equ	0xFF2
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postinc2	equ	0xFDE
   928                           postdec2	equ	0xFDD
   929                           fsr2h	equ	0xFDA
   930                           fsr2l	equ	0xFD9
   931                           status	equ	0xFD8
   932                           
   933 ;; *************** function _sensorComputation *****************
   934 ;; Defined at:
   935 ;;		line 137 in file "user.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  sensorTemp      2    7[BANK0 ] PTR int [10]
   938 ;;		 -> sensorUpdate@sensorTemp(80), 
   939 ;;  getCorrectio    1    9[BANK0 ] unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  i               2   20[BANK0 ] int 
   942 ;;  j               2   18[BANK0 ] int 
   943 ;;  sum             2   16[BANK0 ] int 
   944 ;;  min             2   14[BANK0 ] int 
   945 ;;  max             2   12[BANK0 ] int 
   946 ;; Return value:  Size  Location     Type
   947 ;;		None               void
   948 ;; Registers used:
   949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;Total ram usage:       15 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    5
   962 ;; This function calls:
   963 ;;		_MAX
   964 ;;		_MIN
   965 ;;		___awdiv
   966 ;;		___wmul
   967 ;; This function is called by:
   968 ;;		_sensorUpdate
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text3
   973  00140E                     __ptext3:
   974                           	opt stack 0
   975  00140E                     _sensorComputation:
   976                           	opt stack 24
   977                           
   978                           ;user.c: 139: int max,min,i,j,sum;
   979                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   980                           
   981                           ;incstack = 0
   982  00140E  0E00               	movlw	0
   983  001410  0100               	movlb	0	; () banked
   984  001412  6F95               	movwf	(sensorComputation@i+1)& (0+255),b
   985  001414  0E00               	movlw	0
   986  001416  6F94               	movwf	sensorComputation@i& (0+255),b
   987                           
   988                           ; BSR set to: 0
   989  001418  0100               	movlb	0	; () banked
   990  00141A  BF95               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   991  00141C  D00A               	goto	l1877
   992  00141E  0100               	movlb	0	; () banked
   993  001420  5195               	movf	(sensorComputation@i+1)& (0+255),w,b
   994  001422  E106               	bnz	u1690
   995  001424  0E04               	movlw	4
   996  001426  0100               	movlb	0	; () banked
   997  001428  5D94               	subwf	sensorComputation@i& (0+255),w,b
   998  00142A  B0D8               	btfsc	status,0,c
   999  00142C  D13F               	goto	l307
  1000  00142E  D001               	goto	l1877
  1001  001430                     u1690:
  1002                           
  1003                           ; BSR set to: 0
  1004  001430  D13D               	goto	l307
  1005  001432                     l1877:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;user.c: 141: {
  1009                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1010  001432  0E00               	movlw	0
  1011  001434  0100               	movlb	0	; () banked
  1012  001436  6F93               	movwf	(sensorComputation@j+1)& (0+255),b
  1013  001438  0E00               	movlw	0
  1014  00143A  6F92               	movwf	sensorComputation@j& (0+255),b
  1015                           
  1016                           ; BSR set to: 0
  1017  00143C  0100               	movlb	0	; () banked
  1018  00143E  BF93               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1019  001440  D00A               	goto	l1883
  1020  001442  0100               	movlb	0	; () banked
  1021  001444  5193               	movf	(sensorComputation@j+1)& (0+255),w,b
  1022  001446  E106               	bnz	u1700
  1023  001448  0E0A               	movlw	10
  1024  00144A  0100               	movlb	0	; () banked
  1025  00144C  5D92               	subwf	sensorComputation@j& (0+255),w,b
  1026  00144E  B0D8               	btfsc	status,0,c
  1027  001450  D0C7               	goto	l1893
  1028  001452  D001               	goto	l1883
  1029  001454                     u1700:
  1030                           
  1031                           ; BSR set to: 0
  1032  001454  D0C5               	goto	l1893
  1033  001456                     l1883:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;user.c: 143: {
  1037                           ;user.c: 144: if(j == 0)
  1038  001456  0100               	movlb	0	; () banked
  1039  001458  5192               	movf	sensorComputation@j& (0+255),w,b
  1040  00145A  0100               	movlb	0	; () banked
  1041  00145C  1193               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1042  00145E  A4D8               	btfss	status,2,c
  1043  001460  D02E               	goto	l1887
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;user.c: 145: {
  1047                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1048  001462  C094  F059         	movff	sensorComputation@i,___wmul@multiplier
  1049  001466  C095  F05A         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1050  00146A  0E00               	movlw	0
  1051  00146C  6E5C               	movwf	___wmul@multiplicand+1,c
  1052  00146E  0E14               	movlw	20
  1053  001470  6E5B               	movwf	___wmul@multiplicand,c
  1054  001472  EC1A  F00E         	call	___wmul	;wreg free
  1055  001476  C087  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1056  00147A  C088  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1057  00147E  5059               	movf	?___wmul,w,c
  1058  001480  0100               	movlb	0	; () banked
  1059  001482  278A               	addwf	??_sensorComputation& (0+255),f,b
  1060  001484  505A               	movf	?___wmul+1,w,c
  1061  001486  0100               	movlb	0	; () banked
  1062  001488  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1063  00148A  90D8               	bcf	status,0,c
  1064  00148C  0100               	movlb	0	; () banked
  1065  00148E  3592               	rlcf	sensorComputation@j& (0+255),w,b
  1066  001490  6ED9               	movwf	fsr2l,c
  1067  001492  0100               	movlb	0	; () banked
  1068  001494  3593               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1069  001496  6EDA               	movwf	fsr2h,c
  1070  001498  0100               	movlb	0	; () banked
  1071  00149A  518A               	movf	??_sensorComputation& (0+255),w,b
  1072  00149C  26D9               	addwf	fsr2l,f,c
  1073  00149E  0100               	movlb	0	; () banked
  1074  0014A0  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1075  0014A2  22DA               	addwfc	fsr2h,f,c
  1076  0014A4  CFDE F08C          	movff	postinc2,sensorComputation@max
  1077  0014A8  CFDD F08D          	movff	postdec2,sensorComputation@max+1
  1078  0014AC  C08C  F08E         	movff	sensorComputation@max,sensorComputation@min
  1079  0014B0  C08D  F08F         	movff	sensorComputation@max+1,sensorComputation@min+1
  1080  0014B4  C08E  F090         	movff	sensorComputation@min,sensorComputation@sum
  1081  0014B8  C08F  F091         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1082                           
  1083                           ;user.c: 147: continue;
  1084  0014BC  D086               	goto	l1889
  1085  0014BE                     l1887:
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;user.c: 148: }
  1089                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1090  0014BE  C094  F059         	movff	sensorComputation@i,___wmul@multiplier
  1091  0014C2  C095  F05A         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1092  0014C6  0E00               	movlw	0
  1093  0014C8  6E5C               	movwf	___wmul@multiplicand+1,c
  1094  0014CA  0E14               	movlw	20
  1095  0014CC  6E5B               	movwf	___wmul@multiplicand,c
  1096  0014CE  EC1A  F00E         	call	___wmul	;wreg free
  1097  0014D2  C087  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1098  0014D6  C088  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1099  0014DA  5059               	movf	?___wmul,w,c
  1100  0014DC  0100               	movlb	0	; () banked
  1101  0014DE  278A               	addwf	??_sensorComputation& (0+255),f,b
  1102  0014E0  505A               	movf	?___wmul+1,w,c
  1103  0014E2  0100               	movlb	0	; () banked
  1104  0014E4  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1105  0014E6  90D8               	bcf	status,0,c
  1106  0014E8  0100               	movlb	0	; () banked
  1107  0014EA  3592               	rlcf	sensorComputation@j& (0+255),w,b
  1108  0014EC  6ED9               	movwf	fsr2l,c
  1109  0014EE  0100               	movlb	0	; () banked
  1110  0014F0  3593               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1111  0014F2  6EDA               	movwf	fsr2h,c
  1112  0014F4  0100               	movlb	0	; () banked
  1113  0014F6  518A               	movf	??_sensorComputation& (0+255),w,b
  1114  0014F8  26D9               	addwf	fsr2l,f,c
  1115  0014FA  0100               	movlb	0	; () banked
  1116  0014FC  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1117  0014FE  22DA               	addwfc	fsr2h,f,c
  1118  001500  CFDE F082          	movff	postinc2,MIN@a
  1119  001504  CFDD F083          	movff	postdec2,MIN@a+1
  1120  001508  C08E  F084         	movff	sensorComputation@min,MIN@b
  1121  00150C  C08F  F085         	movff	sensorComputation@min+1,MIN@b+1
  1122  001510  ECCF  F00D         	call	_MIN	;wreg free
  1123  001514  C082  F08E         	movff	?_MIN,sensorComputation@min
  1124  001518  C083  F08F         	movff	?_MIN+1,sensorComputation@min+1
  1125                           
  1126                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1127  00151C  C094  F059         	movff	sensorComputation@i,___wmul@multiplier
  1128  001520  C095  F05A         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1129  001524  0E00               	movlw	0
  1130  001526  6E5C               	movwf	___wmul@multiplicand+1,c
  1131  001528  0E14               	movlw	20
  1132  00152A  6E5B               	movwf	___wmul@multiplicand,c
  1133  00152C  EC1A  F00E         	call	___wmul	;wreg free
  1134  001530  C087  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1135  001534  C088  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1136  001538  5059               	movf	?___wmul,w,c
  1137  00153A  0100               	movlb	0	; () banked
  1138  00153C  278A               	addwf	??_sensorComputation& (0+255),f,b
  1139  00153E  505A               	movf	?___wmul+1,w,c
  1140  001540  0100               	movlb	0	; () banked
  1141  001542  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1142  001544  90D8               	bcf	status,0,c
  1143  001546  0100               	movlb	0	; () banked
  1144  001548  3592               	rlcf	sensorComputation@j& (0+255),w,b
  1145  00154A  6ED9               	movwf	fsr2l,c
  1146  00154C  0100               	movlb	0	; () banked
  1147  00154E  3593               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1148  001550  6EDA               	movwf	fsr2h,c
  1149  001552  0100               	movlb	0	; () banked
  1150  001554  518A               	movf	??_sensorComputation& (0+255),w,b
  1151  001556  26D9               	addwf	fsr2l,f,c
  1152  001558  0100               	movlb	0	; () banked
  1153  00155A  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1154  00155C  22DA               	addwfc	fsr2h,f,c
  1155  00155E  CFDE F082          	movff	postinc2,MAX@a
  1156  001562  CFDD F083          	movff	postdec2,MAX@a+1
  1157  001566  C08C  F084         	movff	sensorComputation@max,MAX@b
  1158  00156A  C08D  F085         	movff	sensorComputation@max+1,MAX@b+1
  1159  00156E  ECE9  F00D         	call	_MAX	;wreg free
  1160  001572  C082  F08C         	movff	?_MAX,sensorComputation@max
  1161  001576  C083  F08D         	movff	?_MAX+1,sensorComputation@max+1
  1162                           
  1163                           ;user.c: 151: sum += sensorTemp[i][j];
  1164  00157A  C094  F059         	movff	sensorComputation@i,___wmul@multiplier
  1165  00157E  C095  F05A         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1166  001582  0E00               	movlw	0
  1167  001584  6E5C               	movwf	___wmul@multiplicand+1,c
  1168  001586  0E14               	movlw	20
  1169  001588  6E5B               	movwf	___wmul@multiplicand,c
  1170  00158A  EC1A  F00E         	call	___wmul	;wreg free
  1171  00158E  C087  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1172  001592  C088  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1173  001596  5059               	movf	?___wmul,w,c
  1174  001598  0100               	movlb	0	; () banked
  1175  00159A  278A               	addwf	??_sensorComputation& (0+255),f,b
  1176  00159C  505A               	movf	?___wmul+1,w,c
  1177  00159E  0100               	movlb	0	; () banked
  1178  0015A0  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1179  0015A2  90D8               	bcf	status,0,c
  1180  0015A4  0100               	movlb	0	; () banked
  1181  0015A6  3592               	rlcf	sensorComputation@j& (0+255),w,b
  1182  0015A8  6ED9               	movwf	fsr2l,c
  1183  0015AA  0100               	movlb	0	; () banked
  1184  0015AC  3593               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1185  0015AE  6EDA               	movwf	fsr2h,c
  1186  0015B0  0100               	movlb	0	; () banked
  1187  0015B2  518A               	movf	??_sensorComputation& (0+255),w,b
  1188  0015B4  26D9               	addwf	fsr2l,f,c
  1189  0015B6  0100               	movlb	0	; () banked
  1190  0015B8  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1191  0015BA  22DA               	addwfc	fsr2h,f,c
  1192  0015BC  50DE               	movf	postinc2,w,c
  1193  0015BE  0100               	movlb	0	; () banked
  1194  0015C0  2790               	addwf	sensorComputation@sum& (0+255),f,b
  1195  0015C2  50DD               	movf	postdec2,w,c
  1196  0015C4  0100               	movlb	0	; () banked
  1197  0015C6  2391               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1198  0015C8  D000               	goto	l1889
  1199  0015CA                     l1889:
  1200                           
  1201                           ; BSR set to: 0
  1202  0015CA  0100               	movlb	0	; () banked
  1203  0015CC  4B92               	infsnz	sensorComputation@j& (0+255),f,b
  1204  0015CE  2B93               	incf	(sensorComputation@j+1)& (0+255),f,b
  1205                           
  1206                           ; BSR set to: 0
  1207  0015D0  0100               	movlb	0	; () banked
  1208  0015D2  BF93               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1209  0015D4  D740               	goto	l1883
  1210  0015D6  0100               	movlb	0	; () banked
  1211  0015D8  5193               	movf	(sensorComputation@j+1)& (0+255),w,b
  1212  0015DA  E102               	bnz	l1893
  1213  0015DC  D735               	goto	L2
  1214  0015DE  D000               	goto	l1893
  1215  0015E0                     l1893:
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;user.c: 152: }
  1219                           ;user.c: 153: sum = sum - min - max;
  1220  0015E0  0100               	movlb	0	; () banked
  1221  0015E2  518C               	movf	sensorComputation@max& (0+255),w,b
  1222  0015E4  0100               	movlb	0	; () banked
  1223  0015E6  258E               	addwf	sensorComputation@min& (0+255),w,b
  1224  0015E8  0100               	movlb	0	; () banked
  1225  0015EA  6F8A               	movwf	??_sensorComputation& (0+255),b
  1226  0015EC  0100               	movlb	0	; () banked
  1227  0015EE  518D               	movf	(sensorComputation@max+1)& (0+255),w,b
  1228  0015F0  0100               	movlb	0	; () banked
  1229  0015F2  218F               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1230  0015F4  0100               	movlb	0	; () banked
  1231  0015F6  6F8B               	movwf	(??_sensorComputation+1)& (0+255),b
  1232  0015F8  0100               	movlb	0	; () banked
  1233  0015FA  1F8A               	comf	??_sensorComputation& (0+255),f,b
  1234  0015FC  1F8B               	comf	(??_sensorComputation+1)& (0+255),f,b
  1235  0015FE  4B8A               	infsnz	??_sensorComputation& (0+255),f,b
  1236  001600  2B8B               	incf	(??_sensorComputation+1)& (0+255),f,b
  1237  001602  0100               	movlb	0	; () banked
  1238  001604  5190               	movf	sensorComputation@sum& (0+255),w,b
  1239  001606  0100               	movlb	0	; () banked
  1240  001608  258A               	addwf	??_sensorComputation& (0+255),w,b
  1241  00160A  0100               	movlb	0	; () banked
  1242  00160C  6F90               	movwf	sensorComputation@sum& (0+255),b
  1243  00160E  0100               	movlb	0	; () banked
  1244  001610  5191               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1245  001612  0100               	movlb	0	; () banked
  1246  001614  218B               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1247  001616  0100               	movlb	0	; () banked
  1248  001618  6F91               	movwf	(sensorComputation@sum+1)& (0+255),b
  1249                           
  1250                           ;user.c: 154: if(getCorrection == 1)
  1251  00161A  0100               	movlb	0	; () banked
  1252  00161C  0589               	decf	sensorComputation@getCorrection& (0+255),w,b
  1253  00161E  A4D8               	btfss	status,2,c
  1254  001620  D00B               	goto	l1897
  1255                           
  1256                           ; BSR set to: 0
  1257                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1258  001622  C090  F059         	movff	sensorComputation@sum,___awdiv@dividend
  1259  001626  C091  F05A         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1260  00162A  0E00               	movlw	0
  1261  00162C  6E5C               	movwf	___awdiv@divisor+1,c
  1262  00162E  0E08               	movlw	8
  1263  001630  6E5B               	movwf	___awdiv@divisor,c
  1264  001632  ECD9  F00C         	call	___awdiv	;wreg free
  1265  001636  D01F               	goto	L3
  1266  001638                     l1897:
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;user.c: 156: else
  1270                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1271  001638  90D8               	bcf	status,0,c
  1272  00163A  0100               	movlb	0	; () banked
  1273  00163C  3594               	rlcf	sensorComputation@i& (0+255),w,b
  1274  00163E  6ED9               	movwf	fsr2l,c
  1275  001640  0100               	movlb	0	; () banked
  1276  001642  3595               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1277  001644  6EDA               	movwf	fsr2h,c
  1278  001646  0EF1               	movlw	low _sensorCorrection
  1279  001648  26D9               	addwf	fsr2l,f,c
  1280  00164A  0E00               	movlw	high _sensorCorrection
  1281  00164C  22DA               	addwfc	fsr2h,f,c
  1282  00164E  CFDE F08A          	movff	postinc2,??_sensorComputation
  1283  001652  CFDD F08B          	movff	postdec2,??_sensorComputation+1
  1284  001656  C090  F059         	movff	sensorComputation@sum,___awdiv@dividend
  1285  00165A  C091  F05A         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1286  00165E  0E00               	movlw	0
  1287  001660  6E5C               	movwf	___awdiv@divisor+1,c
  1288  001662  0E08               	movlw	8
  1289  001664  6E5B               	movwf	___awdiv@divisor,c
  1290  001666  ECD9  F00C         	call	___awdiv	;wreg free
  1291  00166A  0100               	movlb	0	; () banked
  1292  00166C  518A               	movf	??_sensorComputation& (0+255),w,b
  1293  00166E  2659               	addwf	?___awdiv,f,c
  1294  001670  0100               	movlb	0	; () banked
  1295  001672  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1296  001674  225A               	addwfc	?___awdiv+1,f,c
  1297  001676                     L3:
  1298  001676  90D8               	bcf	status,0,c
  1299  001678  0100               	movlb	0	; () banked
  1300  00167A  3594               	rlcf	sensorComputation@i& (0+255),w,b
  1301  00167C  6ED9               	movwf	fsr2l,c
  1302  00167E  0100               	movlb	0	; () banked
  1303  001680  3595               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1304  001682  6EDA               	movwf	fsr2h,c
  1305  001684  0E01               	movlw	low _sensorValue
  1306  001686  26D9               	addwf	fsr2l,f,c
  1307  001688  0E00               	movlw	high _sensorValue
  1308  00168A  22DA               	addwfc	fsr2h,f,c
  1309  00168C  C059  FFDE         	movff	?___awdiv,postinc2
  1310  001690  C05A  FFDD         	movff	?___awdiv+1,postdec2
  1311  001694  D000               	goto	l1899
  1312  001696                     l1899:
  1313                           
  1314                           ; BSR set to: 0
  1315  001696  0100               	movlb	0	; () banked
  1316  001698  4B94               	infsnz	sensorComputation@i& (0+255),f,b
  1317  00169A  2B95               	incf	(sensorComputation@i+1)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320  00169C  0100               	movlb	0	; () banked
  1321  00169E  BF95               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1322  0016A0  D6C8               	goto	l1877
  1323  0016A2  0100               	movlb	0	; () banked
  1324  0016A4  5195               	movf	(sensorComputation@i+1)& (0+255),w,b
  1325  0016A6  E102               	bnz	l307
  1326  0016A8  D6BD               	goto	L4
  1327  0016AA  D000               	goto	l307
  1328  0016AC                     l307:
  1329                           
  1330                           ; BSR set to: 0
  1331  0016AC  0012               	return		;funcret
  1332  0016AE                     __end_of_sensorComputation:
  1333                           	opt stack 0
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           intcon	equ	0xFF2
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postinc2	equ	0xFDE
  1342                           postdec2	equ	0xFDD
  1343                           fsr2h	equ	0xFDA
  1344                           fsr2l	equ	0xFD9
  1345                           status	equ	0xFD8
  1346                           
  1347 ;; *************** function ___wmul *****************
  1348 ;; Defined at:
  1349 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  multiplier      2   34[COMRAM] unsigned int 
  1352 ;;  multiplicand    2   36[COMRAM] unsigned int 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  product         2    0[BANK0 ] unsigned int 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  2   34[COMRAM] unsigned int 
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0, prodl, prodh
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:        6 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    4
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_sensorComputation
  1375 ;;		_sensorUpdate
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text4
  1380  001C34                     __ptext4:
  1381                           	opt stack 0
  1382  001C34                     ___wmul:
  1383                           	opt stack 24
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;incstack = 0
  1387  001C34  5059               	movf	___wmul@multiplier,w,c
  1388  001C36  025B               	mulwf	___wmul@multiplicand,c
  1389  001C38  CFF3 F080          	movff	prodl,___wmul@product
  1390  001C3C  CFF4 F081          	movff	prodh,___wmul@product+1
  1391  001C40  5059               	movf	___wmul@multiplier,w,c
  1392  001C42  025C               	mulwf	___wmul@multiplicand+1,c
  1393  001C44  50F3               	movf	prodl,w,c
  1394  001C46  0100               	movlb	0	; () banked
  1395  001C48  2781               	addwf	(___wmul@product+1)& (0+255),f,b
  1396  001C4A  505A               	movf	___wmul@multiplier+1,w,c
  1397  001C4C  025B               	mulwf	___wmul@multiplicand,c
  1398  001C4E  50F3               	movf	prodl,w,c
  1399  001C50  0100               	movlb	0	; () banked
  1400  001C52  2781               	addwf	(___wmul@product+1)& (0+255),f,b
  1401                           
  1402                           ; BSR set to: 0
  1403  001C54  C080  F059         	movff	___wmul@product,?___wmul
  1404  001C58  C081  F05A         	movff	___wmul@product+1,?___wmul+1
  1405  001C5C  D000               	goto	l328
  1406  001C5E                     l328:
  1407                           
  1408                           ; BSR set to: 0
  1409  001C5E  0012               	return		;funcret
  1410  001C60                     __end_of___wmul:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           prodh	equ	0xFF4
  1417                           prodl	equ	0xFF3
  1418                           intcon	equ	0xFF2
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postinc2	equ	0xFDE
  1422                           postdec2	equ	0xFDD
  1423                           fsr2h	equ	0xFDA
  1424                           fsr2l	equ	0xFD9
  1425                           status	equ	0xFD8
  1426                           
  1427 ;; *************** function ___awdiv *****************
  1428 ;; Defined at:
  1429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  dividend        2   34[COMRAM] int 
  1432 ;;  divisor         2   36[COMRAM] int 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  quotient        2    2[BANK0 ] int 
  1435 ;;  sign            1    1[BANK0 ] unsigned char 
  1436 ;;  counter         1    0[BANK0 ] unsigned char 
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  2   34[COMRAM] int 
  1439 ;; Registers used:
  1440 ;;		wreg, status,2, status,0
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;Total ram usage:        8 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    4
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_setCorrection
  1457 ;;		_sensorComputation
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text5
  1462  0019B2                     __ptext5:
  1463                           	opt stack 0
  1464  0019B2                     ___awdiv:
  1465                           	opt stack 25
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;incstack = 0
  1469  0019B2  0E00               	movlw	0
  1470  0019B4  0100               	movlb	0	; () banked
  1471  0019B6  6F81               	movwf	___awdiv@sign& (0+255),b
  1472                           
  1473                           ; BSR set to: 0
  1474  0019B8  AE5C               	btfss	___awdiv@divisor+1,7,c
  1475  0019BA  D008               	goto	l1829
  1476                           
  1477                           ; BSR set to: 0
  1478  0019BC  6C5B               	negf	___awdiv@divisor,c
  1479  0019BE  1E5C               	comf	___awdiv@divisor+1,f,c
  1480  0019C0  B0D8               	btfsc	status,0,c
  1481  0019C2  2A5C               	incf	___awdiv@divisor+1,f,c
  1482                           
  1483                           ; BSR set to: 0
  1484  0019C4  0E01               	movlw	1
  1485  0019C6  0100               	movlb	0	; () banked
  1486  0019C8  6F81               	movwf	___awdiv@sign& (0+255),b
  1487  0019CA  D000               	goto	l1829
  1488  0019CC                     l1829:
  1489                           
  1490                           ; BSR set to: 0
  1491  0019CC  AE5A               	btfss	___awdiv@dividend+1,7,c
  1492  0019CE  D008               	goto	l1835
  1493                           
  1494                           ; BSR set to: 0
  1495  0019D0  6C59               	negf	___awdiv@dividend,c
  1496  0019D2  1E5A               	comf	___awdiv@dividend+1,f,c
  1497  0019D4  B0D8               	btfsc	status,0,c
  1498  0019D6  2A5A               	incf	___awdiv@dividend+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501  0019D8  0E01               	movlw	1
  1502  0019DA  0100               	movlb	0	; () banked
  1503  0019DC  1B81               	xorwf	___awdiv@sign& (0+255),f,b
  1504  0019DE  D000               	goto	l1835
  1505  0019E0                     l1835:
  1506                           
  1507                           ; BSR set to: 0
  1508  0019E0  0E00               	movlw	0
  1509  0019E2  0100               	movlb	0	; () banked
  1510  0019E4  6F83               	movwf	(___awdiv@quotient+1)& (0+255),b
  1511  0019E6  0E00               	movlw	0
  1512  0019E8  6F82               	movwf	___awdiv@quotient& (0+255),b
  1513                           
  1514                           ; BSR set to: 0
  1515  0019EA  505B               	movf	___awdiv@divisor,w,c
  1516  0019EC  105C               	iorwf	___awdiv@divisor+1,w,c
  1517  0019EE  B4D8               	btfsc	status,2,c
  1518  0019F0  D026               	goto	l1857
  1519                           
  1520                           ; BSR set to: 0
  1521  0019F2  0E01               	movlw	1
  1522  0019F4  0100               	movlb	0	; () banked
  1523  0019F6  6F80               	movwf	___awdiv@counter& (0+255),b
  1524  0019F8  D006               	goto	l1843
  1525  0019FA                     l1841:
  1526                           
  1527                           ; BSR set to: 0
  1528  0019FA  90D8               	bcf	status,0,c
  1529  0019FC  365B               	rlcf	___awdiv@divisor,f,c
  1530  0019FE  365C               	rlcf	___awdiv@divisor+1,f,c
  1531  001A00  0100               	movlb	0	; () banked
  1532  001A02  2B80               	incf	___awdiv@counter& (0+255),f,b
  1533  001A04  D000               	goto	l1843
  1534  001A06                     l1843:
  1535                           
  1536                           ; BSR set to: 0
  1537  001A06  BE5C               	btfsc	___awdiv@divisor+1,7,c
  1538  001A08  D002               	goto	l1845
  1539  001A0A  D7F7               	goto	l1841
  1540                           
  1541                           ; BSR set to: 0
  1542  001A0C  D000               	goto	l1845
  1543  001A0E                     l1845:
  1544                           
  1545                           ; BSR set to: 0
  1546  001A0E  0100               	movlb	0	; () banked
  1547  001A10  90D8               	bcf	status,0,c
  1548  001A12  3782               	rlcf	___awdiv@quotient& (0+255),f,b
  1549  001A14  3783               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 0
  1552  001A16  505B               	movf	___awdiv@divisor,w,c
  1553  001A18  5C59               	subwf	___awdiv@dividend,w,c
  1554  001A1A  505C               	movf	___awdiv@divisor+1,w,c
  1555  001A1C  585A               	subwfb	___awdiv@dividend+1,w,c
  1556  001A1E  A0D8               	btfss	status,0,c
  1557  001A20  D007               	goto	l1853
  1558                           
  1559                           ; BSR set to: 0
  1560  001A22  505B               	movf	___awdiv@divisor,w,c
  1561  001A24  5E59               	subwf	___awdiv@dividend,f,c
  1562  001A26  505C               	movf	___awdiv@divisor+1,w,c
  1563  001A28  5A5A               	subwfb	___awdiv@dividend+1,f,c
  1564                           
  1565                           ; BSR set to: 0
  1566  001A2A  0100               	movlb	0	; () banked
  1567  001A2C  8182               	bsf	___awdiv@quotient& (0+255),0,b
  1568  001A2E  D000               	goto	l1853
  1569  001A30                     l1853:
  1570                           
  1571                           ; BSR set to: 0
  1572  001A30  90D8               	bcf	status,0,c
  1573  001A32  325C               	rrcf	___awdiv@divisor+1,f,c
  1574  001A34  325B               	rrcf	___awdiv@divisor,f,c
  1575                           
  1576                           ; BSR set to: 0
  1577  001A36  0100               	movlb	0	; () banked
  1578  001A38  2F80               	decfsz	___awdiv@counter& (0+255),f,b
  1579  001A3A  D7E9               	goto	l1845
  1580                           
  1581                           ; BSR set to: 0
  1582  001A3C  D000               	goto	l1857
  1583  001A3E                     l1857:
  1584                           
  1585                           ; BSR set to: 0
  1586  001A3E  0100               	movlb	0	; () banked
  1587  001A40  5181               	movf	___awdiv@sign& (0+255),w,b
  1588  001A42  0100               	movlb	0	; () banked
  1589  001A44  B4D8               	btfsc	status,2,c
  1590  001A46  D006               	goto	l1861
  1591                           
  1592                           ; BSR set to: 0
  1593  001A48  0100               	movlb	0	; () banked
  1594  001A4A  6D82               	negf	___awdiv@quotient& (0+255),b
  1595  001A4C  1F83               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1596  001A4E  B0D8               	btfsc	status,0,c
  1597  001A50  2B83               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1598  001A52  D000               	goto	l1861
  1599  001A54                     l1861:
  1600                           
  1601                           ; BSR set to: 0
  1602  001A54  C082  F059         	movff	___awdiv@quotient,?___awdiv
  1603  001A58  C083  F05A         	movff	___awdiv@quotient+1,?___awdiv+1
  1604  001A5C  D000               	goto	l521
  1605  001A5E                     l521:
  1606                           
  1607                           ; BSR set to: 0
  1608  001A5E  0012               	return		;funcret
  1609  001A60                     __end_of___awdiv:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           prodh	equ	0xFF4
  1616                           prodl	equ	0xFF3
  1617                           intcon	equ	0xFF2
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           postinc2	equ	0xFDE
  1621                           postdec2	equ	0xFDD
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _MIN *****************
  1627 ;; Defined at:
  1628 ;;		line 184 in file "user.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  a               2    2[BANK0 ] int 
  1631 ;;  b               2    4[BANK0 ] int 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;		None
  1634 ;; Return value:  Size  Location     Type
  1635 ;;                  2    2[BANK0 ] int 
  1636 ;; Registers used:
  1637 ;;		wreg, status,2, status,0
  1638 ;; Tracked objects:
  1639 ;;		On entry : 0/0
  1640 ;;		On exit  : 0/0
  1641 ;;		Unchanged: 0/0
  1642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;Total ram usage:        5 bytes
  1648 ;; Hardware stack levels used:    1
  1649 ;; Hardware stack levels required when called:    4
  1650 ;; This function calls:
  1651 ;;		Nothing
  1652 ;; This function is called by:
  1653 ;;		_sensorComputation
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text6
  1658  001B9E                     __ptext6:
  1659                           	opt stack 0
  1660  001B9E                     _MIN:
  1661                           	opt stack 24
  1662                           
  1663                           ;user.c: 186: if(a>b) return b;
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;incstack = 0
  1667  001B9E  0100               	movlb	0	; () banked
  1668  001BA0  5182               	movf	MIN@a& (0+255),w,b
  1669  001BA2  0100               	movlb	0	; () banked
  1670  001BA4  5D84               	subwf	MIN@b& (0+255),w,b
  1671  001BA6  0100               	movlb	0	; () banked
  1672  001BA8  5185               	movf	(MIN@b+1)& (0+255),w,b
  1673  001BAA  0A80               	xorlw	128
  1674  001BAC  0100               	movlb	0	; () banked
  1675  001BAE  6F86               	movwf	??_MIN& (0+255),b
  1676  001BB0  0100               	movlb	0	; () banked
  1677  001BB2  5183               	movf	(MIN@a+1)& (0+255),w,b
  1678  001BB4  0A80               	xorlw	128
  1679  001BB6  0100               	movlb	0	; () banked
  1680  001BB8  5986               	subwfb	??_MIN& (0+255),w,b
  1681  001BBA  B0D8               	btfsc	status,0,c
  1682  001BBC  D005               	goto	l320
  1683                           
  1684                           ; BSR set to: 0
  1685  001BBE  C084  F082         	movff	MIN@b,?_MIN
  1686  001BC2  C085  F083         	movff	MIN@b+1,?_MIN+1
  1687  001BC6  D004               	goto	l321
  1688  001BC8                     l320:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;user.c: 187: return a;
  1692  001BC8  C082  F082         	movff	MIN@a,?_MIN
  1693  001BCC  C083  F083         	movff	MIN@a+1,?_MIN+1
  1694  001BD0                     l321:
  1695                           
  1696                           ; BSR set to: 0
  1697  001BD0  0012               	return		;funcret
  1698  001BD2                     __end_of_MIN:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _MAX *****************
  1716 ;; Defined at:
  1717 ;;		line 190 in file "user.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;  a               2    2[BANK0 ] int 
  1720 ;;  b               2    4[BANK0 ] int 
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  2    2[BANK0 ] int 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;Total ram usage:        5 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    4
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_sensorComputation
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text7
  1747  001BD2                     __ptext7:
  1748                           	opt stack 0
  1749  001BD2                     _MAX:
  1750                           	opt stack 24
  1751                           
  1752                           ;user.c: 192: if(a>b) return a;
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;incstack = 0
  1756  001BD2  0100               	movlb	0	; () banked
  1757  001BD4  5182               	movf	MAX@a& (0+255),w,b
  1758  001BD6  0100               	movlb	0	; () banked
  1759  001BD8  5D84               	subwf	MAX@b& (0+255),w,b
  1760  001BDA  0100               	movlb	0	; () banked
  1761  001BDC  5185               	movf	(MAX@b+1)& (0+255),w,b
  1762  001BDE  0A80               	xorlw	128
  1763  001BE0  0100               	movlb	0	; () banked
  1764  001BE2  6F86               	movwf	??_MAX& (0+255),b
  1765  001BE4  0100               	movlb	0	; () banked
  1766  001BE6  5183               	movf	(MAX@a+1)& (0+255),w,b
  1767  001BE8  0A80               	xorlw	128
  1768  001BEA  0100               	movlb	0	; () banked
  1769  001BEC  5986               	subwfb	??_MAX& (0+255),w,b
  1770  001BEE  B0D8               	btfsc	status,0,c
  1771  001BF0  D005               	goto	l324
  1772                           
  1773                           ; BSR set to: 0
  1774  001BF2  C082  F082         	movff	MAX@a,?_MAX
  1775  001BF6  C083  F083         	movff	MAX@a+1,?_MAX+1
  1776  001BFA  D004               	goto	l325
  1777  001BFC                     l324:
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;user.c: 193: return b;
  1781  001BFC  C084  F082         	movff	MAX@b,?_MAX
  1782  001C00  C085  F083         	movff	MAX@b+1,?_MAX+1
  1783  001C04                     l325:
  1784                           
  1785                           ; BSR set to: 0
  1786  001C04  0012               	return		;funcret
  1787  001C06                     __end_of_MAX:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postinc2	equ	0xFDE
  1799                           postdec2	equ	0xFDD
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _InitApp *****************
  1805 ;; Defined at:
  1806 ;;		line 35 in file "user.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;		None               void
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;Total ram usage:        0 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    5
  1827 ;; This function calls:
  1828 ;;		_AlgorithmSelection
  1829 ;;		_delay
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text8
  1836  001B30                     __ptext8:
  1837                           	opt stack 0
  1838  001B30                     _InitApp:
  1839                           	opt stack 25
  1840                           
  1841                           ;user.c: 39: TRISC = 0;
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;incstack = 0
  1845  001B30  0E00               	movlw	0
  1846  001B32  6E94               	movwf	3988,c	;volatile
  1847                           
  1848                           ;user.c: 43: TRISEbits.TRISE1=1;
  1849  001B34  8296               	bsf	3990,1,c	;volatile
  1850                           
  1851                           ;user.c: 45: TRISEbits.TRISE2=1;
  1852  001B36  8496               	bsf	3990,2,c	;volatile
  1853                           
  1854                           ;user.c: 47: TRISBbits.RB1=1;
  1855  001B38  8293               	bsf	3987,1,c	;volatile
  1856                           
  1857                           ;user.c: 49: TRISBbits.RB0=1;
  1858  001B3A  8093               	bsf	3987,0,c	;volatile
  1859                           
  1860                           ;user.c: 52: TRISBbits.RB3=1;
  1861  001B3C  8693               	bsf	3987,3,c	;volatile
  1862                           
  1863                           ;user.c: 54: TRISBbits.RB2=1;
  1864  001B3E  8493               	bsf	3987,2,c	;volatile
  1865                           
  1866                           ;user.c: 58: ADCON1 =0b00000001;
  1867  001B40  0E01               	movlw	1
  1868  001B42  6EC1               	movwf	4033,c	;volatile
  1869                           
  1870                           ;user.c: 63: ADCON2=0b00001010;
  1871  001B44  0E0A               	movlw	10
  1872  001B46  6EC0               	movwf	4032,c	;volatile
  1873                           
  1874                           ;user.c: 68: ADCON0=0b00101011;
  1875  001B48  0E2B               	movlw	43
  1876  001B4A  6EC2               	movwf	4034,c	;volatile
  1877                           
  1878                           ;user.c: 77: T0CON = 0b11000100;
  1879  001B4C  0EC4               	movlw	196
  1880  001B4E  6ED5               	movwf	4053,c	;volatile
  1881                           
  1882                           ;user.c: 85: INTCON2 = 0b11110100;
  1883  001B50  0EF4               	movlw	244
  1884  001B52  6EF1               	movwf	intcon2,c	;volatile
  1885                           
  1886                           ;user.c: 95: INTCON = 0b00100000;
  1887  001B54  0E20               	movlw	32
  1888  001B56  6EF2               	movwf	intcon,c	;volatile
  1889                           
  1890                           ;user.c: 105: AlgorithmSelection();
  1891  001B58  EC45  F00E         	call	_AlgorithmSelection	;wreg free
  1892                           
  1893                           ;user.c: 108: delay(1000);
  1894  001B5C  0E03               	movlw	3
  1895  001B5E  6E5A               	movwf	delay@ms+1,c
  1896  001B60  0EE8               	movlw	232
  1897  001B62  6E59               	movwf	delay@ms,c
  1898  001B64  EC5B  F00D         	call	_delay	;wreg free
  1899  001B68  0012               	return		;funcret
  1900  001B6A                     __end_of_InitApp:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           prodh	equ	0xFF4
  1907                           prodl	equ	0xFF3
  1908                           intcon	equ	0xFF2
  1909                           intcon2	equ	0xFF1
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postinc2	equ	0xFDE
  1913                           postdec2	equ	0xFDD
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _delay *****************
  1919 ;; Defined at:
  1920 ;;		line 29 in file "user.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  ms              2   34[COMRAM] unsigned int 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  x               2    0[BANK0 ] int 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;		None               void
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1934 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;Total ram usage:        5 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    4
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		_InitApp
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text9
  1949  001AB6                     __ptext9:
  1950                           	opt stack 0
  1951  001AB6                     _delay:
  1952                           	opt stack 25
  1953                           
  1954                           ;user.c: 30: int x = 0;
  1955                           
  1956                           ;incstack = 0
  1957  001AB6  0E00               	movlw	0
  1958  001AB8  0100               	movlb	0	; () banked
  1959  001ABA  6F81               	movwf	(delay@x+1)& (0+255),b
  1960  001ABC  0E00               	movlw	0
  1961  001ABE  6F80               	movwf	delay@x& (0+255),b
  1962                           
  1963                           ;user.c: 31: for (x = 0; x < ms; x++)
  1964  001AC0  0E00               	movlw	0
  1965  001AC2  0100               	movlb	0	; () banked
  1966  001AC4  6F81               	movwf	(delay@x+1)& (0+255),b
  1967  001AC6  0E00               	movlw	0
  1968  001AC8  6F80               	movwf	delay@x& (0+255),b
  1969  001ACA  D00B               	goto	l279
  1970  001ACC                     l1867:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1974  001ACC  0E0B               	movlw	11
  1975  001ACE  6E5B               	movwf	??_delay& (0+255),c
  1976  001AD0  0E62               	movlw	98
  1977  001AD2                     u1817:
  1978  001AD2  2EE8               	decfsz	wreg,f,c
  1979  001AD4  D7FE               	goto	u1817
  1980  001AD6  2E5B               	decfsz	??_delay& (0+255),f,c
  1981  001AD8  D7FC               	goto	u1817
  1982  001ADA  D000               	nop2	
  1983  001ADC  0100               	movlb	0	; () banked
  1984  001ADE  4B80               	infsnz	delay@x& (0+255),f,b
  1985  001AE0  2B81               	incf	(delay@x+1)& (0+255),f,b
  1986  001AE2                     l279:
  1987                           
  1988                           ; BSR set to: 0
  1989  001AE2  5059               	movf	delay@ms,w,c
  1990  001AE4  0100               	movlb	0	; () banked
  1991  001AE6  5D80               	subwf	delay@x& (0+255),w,b
  1992  001AE8  505A               	movf	delay@ms+1,w,c
  1993  001AEA  0100               	movlb	0	; () banked
  1994  001AEC  5981               	subwfb	(delay@x+1)& (0+255),w,b
  1995  001AEE  A0D8               	btfss	status,0,c
  1996  001AF0  D7ED               	goto	l1867
  1997                           
  1998                           ; BSR set to: 0
  1999                           
  2000                           ; BSR set to: 0
  2001  001AF2  0012               	return		;funcret
  2002  001AF4                     __end_of_delay:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           prodh	equ	0xFF4
  2009                           prodl	equ	0xFF3
  2010                           intcon	equ	0xFF2
  2011                           intcon2	equ	0xFF1
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           postinc2	equ	0xFDE
  2015                           postdec2	equ	0xFDD
  2016                           fsr2h	equ	0xFDA
  2017                           fsr2l	equ	0xFD9
  2018                           status	equ	0xFD8
  2019                           
  2020 ;; *************** function _AlgorithmSelection *****************
  2021 ;; Defined at:
  2022 ;;		line 112 in file "user.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;		None               void
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;Total ram usage:        0 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    4
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_InitApp
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text10
  2051  001C8A                     __ptext10:
  2052                           	opt stack 0
  2053  001C8A                     _AlgorithmSelection:
  2054                           	opt stack 25
  2055                           
  2056                           ;user.c: 114: ADCON0 = 0b00100111;
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;incstack = 0
  2060  001C8A  0E27               	movlw	39
  2061  001C8C  6EC2               	movwf	4034,c	;volatile
  2062                           
  2063                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2064  001C8E  82C2               	bsf	4034,1,c	;volatile
  2065                           
  2066                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2067  001C90  D000               	goto	l288
  2068  001C92                     l288:
  2069  001C92  B2C2               	btfsc	4034,1,c	;volatile
  2070  001C94  D7FE               	goto	l288
  2071                           
  2072                           ;user.c: 119: if(ADRESL > 0b10000000)
  2073  001C96  0E80               	movlw	128
  2074  001C98  64C3               	cpfsgt	4035,c	;volatile
  2075  001C9A  D002               	goto	l1059
  2076                           
  2077                           ;user.c: 120: algorithm = LEFTWALL;
  2078  001C9C  0E00               	movlw	0
  2079  001C9E  D001               	goto	L5
  2080  001CA0                     l1059:
  2081                           
  2082                           ;user.c: 121: else
  2083                           ;user.c: 122: algorithm = RIGHTWALL;
  2084  001CA0  0E01               	movlw	1
  2085  001CA2                     L5:
  2086  001CA2  6E33               	movwf	_algorithm,c
  2087  001CA4  D000               	goto	l293
  2088  001CA6                     l293:
  2089  001CA6  0012               	return		;funcret
  2090  001CA8                     __end_of_AlgorithmSelection:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           prodh	equ	0xFF4
  2097                           prodl	equ	0xFF3
  2098                           intcon	equ	0xFF2
  2099                           intcon2	equ	0xFF1
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           postinc2	equ	0xFDE
  2103                           postdec2	equ	0xFDD
  2104                           fsr2h	equ	0xFDA
  2105                           fsr2l	equ	0xFD9
  2106                           status	equ	0xFD8
  2107                           
  2108 ;; *************** function _ConfigureOscillator *****************
  2109 ;; Defined at:
  2110 ;;		line 24 in file "system.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;		None
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;		None
  2115 ;; Return value:  Size  Location     Type
  2116 ;;		None               void
  2117 ;; Registers used:
  2118 ;;		wreg, status,2
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;Total ram usage:        0 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    4
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text11
  2139  001CD4                     __ptext11:
  2140                           	opt stack 0
  2141  001CD4                     _ConfigureOscillator:
  2142                           	opt stack 26
  2143                           
  2144                           ;system.c: 29: OSCCON = 0b01111100;
  2145                           
  2146                           ;incstack = 0
  2147  001CD4  0E7C               	movlw	124
  2148  001CD6  6ED3               	movwf	4051,c	;volatile
  2149                           
  2150                           ;system.c: 31: OSCTUNE = 0b01001111;
  2151  001CD8  0E4F               	movlw	79
  2152  001CDA  6E9B               	movwf	3995,c	;volatile
  2153  001CDC  0012               	return		;funcret
  2154  001CDE                     __end_of_ConfigureOscillator:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           intcon2	equ	0xFF1
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _low_isr *****************
  2173 ;; Defined at:
  2174 ;;		line 280 in file "interrupts.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;		None               void
  2181 ;; Registers used:
  2182 ;;		None
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;Total ram usage:       17 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    3
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		Interrupt level 1
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	intcodelo
  2203  000018                     __pintcodelo:
  2204                           	opt stack 0
  2205  000018                     _low_isr:
  2206                           	opt stack 24
  2207                           
  2208                           ;incstack = 0
  2209  000018  CFD8 F037          	movff	status,??_low_isr
  2210  00001C  CFE8 F038          	movff	wreg,??_low_isr+1
  2211  000020  CFE0 F039          	movff	bsr,??_low_isr+2
  2212  000024  CFFA F03A          	movff	pclath,??_low_isr+3
  2213  000028  CFFB F03B          	movff	pclatu,??_low_isr+4
  2214  00002C  CFE9 F03C          	movff	fsr0l,??_low_isr+5
  2215  000030  CFEA F03D          	movff	fsr0h,??_low_isr+6
  2216  000034  CFE1 F03E          	movff	fsr1l,??_low_isr+7
  2217  000038  CFE2 F03F          	movff	fsr1h,??_low_isr+8
  2218  00003C  CFD9 F040          	movff	fsr2l,??_low_isr+9
  2219  000040  CFDA F041          	movff	fsr2h,??_low_isr+10
  2220  000044  CFF3 F042          	movff	prodl,??_low_isr+11
  2221  000048  CFF4 F043          	movff	prodh,??_low_isr+12
  2222  00004C  CFF6 F044          	movff	tblptrl,??_low_isr+13
  2223  000050  CFF7 F045          	movff	tblptrh,??_low_isr+14
  2224  000054  CFF8 F046          	movff	tblptru,??_low_isr+15
  2225  000058  CFF5 F047          	movff	tablat,??_low_isr+16
  2226  00005C  C047  FFF5         	movff	??_low_isr+16,tablat
  2227  000060  C046  FFF8         	movff	??_low_isr+15,tblptru
  2228  000064  C045  FFF7         	movff	??_low_isr+14,tblptrh
  2229  000068  C044  FFF6         	movff	??_low_isr+13,tblptrl
  2230  00006C  C043  FFF4         	movff	??_low_isr+12,prodh
  2231  000070  C042  FFF3         	movff	??_low_isr+11,prodl
  2232  000074  C041  FFDA         	movff	??_low_isr+10,fsr2h
  2233  000078  C040  FFD9         	movff	??_low_isr+9,fsr2l
  2234  00007C  C03F  FFE2         	movff	??_low_isr+8,fsr1h
  2235  000080  C03E  FFE1         	movff	??_low_isr+7,fsr1l
  2236  000084  C03D  FFEA         	movff	??_low_isr+6,fsr0h
  2237  000088  C03C  FFE9         	movff	??_low_isr+5,fsr0l
  2238  00008C  C03B  FFFB         	movff	??_low_isr+4,pclatu
  2239  000090  C03A  FFFA         	movff	??_low_isr+3,pclath
  2240  000094  C039  FFE0         	movff	??_low_isr+2,bsr
  2241  000098  C038  FFE8         	movff	??_low_isr+1,wreg
  2242  00009C  C037  FFD8         	movff	??_low_isr,status
  2243  0000A0  0010               	retfie	
  2244  0000A2                     __end_of_low_isr:
  2245                           	opt stack 0
  2246                           pclatu	equ	0xFFB
  2247                           pclath	equ	0xFFA
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           intcon	equ	0xFF2
  2255                           intcon2	equ	0xFF1
  2256                           postinc0	equ	0xFEE
  2257                           fsr0h	equ	0xFEA
  2258                           fsr0l	equ	0xFE9
  2259                           wreg	equ	0xFE8
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           bsr	equ	0xFE0
  2263                           postinc2	equ	0xFDE
  2264                           postdec2	equ	0xFDD
  2265                           fsr2h	equ	0xFDA
  2266                           fsr2l	equ	0xFD9
  2267                           status	equ	0xFD8
  2268                           
  2269 ;; *************** function _high_isr *****************
  2270 ;; Defined at:
  2271 ;;		line 105 in file "interrupts.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;		None               void
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;Total ram usage:       14 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		_KController
  2294 ;;		_Reversing
  2295 ;;		_forward
  2296 ;;		_merge
  2297 ;;		_motorCounterUpdate
  2298 ;;		_moveMouse
  2299 ;;		_rotate
  2300 ;; This function is called by:
  2301 ;;		Interrupt level 2
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	intcode
  2306  000008                     __pintcode:
  2307                           	opt stack 0
  2308  000008                     _high_isr:
  2309                           	opt stack 24
  2310                           
  2311                           ;incstack = 0
  2312  000008  CFFA F04B          	movff	pclath,??_high_isr
  2313  00000C  CFFB F04C          	movff	pclatu,??_high_isr+1
  2314  000010  CFE9 F04D          	movff	fsr0l,??_high_isr+2
  2315  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2316                           pclatu	equ	0xFFB
  2317                           pclath	equ	0xFFA
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           prodh	equ	0xFF4
  2323                           prodl	equ	0xFF3
  2324                           intcon	equ	0xFF2
  2325                           intcon2	equ	0xFF1
  2326                           postinc0	equ	0xFEE
  2327                           fsr0h	equ	0xFEA
  2328                           fsr0l	equ	0xFE9
  2329                           wreg	equ	0xFE8
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           bsr	equ	0xFE0
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339                           	psect	intcode_body
  2340  001006                     __pintcode_body:
  2341                           	opt stack 24
  2342  001006                     int_func:
  2343                           	opt stack 24
  2344  001006  0006               	pop		; remove dummy address from shadow register refresh
  2345  001008  CFEA F04E          	movff	fsr0h,??_high_isr+3
  2346  00100C  CFE1 F04F          	movff	fsr1l,??_high_isr+4
  2347  001010  CFE2 F050          	movff	fsr1h,??_high_isr+5
  2348  001014  CFD9 F051          	movff	fsr2l,??_high_isr+6
  2349  001018  CFDA F052          	movff	fsr2h,??_high_isr+7
  2350  00101C  CFF3 F053          	movff	prodl,??_high_isr+8
  2351  001020  CFF4 F054          	movff	prodh,??_high_isr+9
  2352  001024  CFF6 F055          	movff	tblptrl,??_high_isr+10
  2353  001028  CFF7 F056          	movff	tblptrh,??_high_isr+11
  2354  00102C  CFF8 F057          	movff	tblptru,??_high_isr+12
  2355  001030  CFF5 F058          	movff	tablat,??_high_isr+13
  2356                           
  2357                           ;interrupts.c: 124: if(INTCONbits.TMR0IF == 1)
  2358  001034  A4F2               	btfss	intcon,2,c	;volatile
  2359  001036  D1CE               	goto	i2l123
  2360                           
  2361                           ;interrupts.c: 125: {
  2362                           ;interrupts.c: 126: if(MotorDelayCounter > 2)
  2363  001038  BE12               	btfsc	_MotorDelayCounter+1,7,c
  2364  00103A  D1C8               	goto	i2l1775
  2365  00103C  5012               	movf	_MotorDelayCounter+1,w,c
  2366  00103E  E104               	bnz	i2u116_40
  2367  001040  0E03               	movlw	3
  2368  001042  5C11               	subwf	_MotorDelayCounter,w,c
  2369  001044  A0D8               	btfss	status,0,c
  2370  001046  D1C2               	goto	i2l1775
  2371  001048                     i2u116_40:
  2372                           
  2373                           ;interrupts.c: 127: {
  2374                           ;interrupts.c: 131: if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 0)
  2375  001048  BE24               	btfsc	_controlToLeft+1,7,c
  2376  00104A  D005               	goto	i2l1633
  2377  00104C  5024               	movf	_controlToLeft+1,w,c
  2378  00104E  E113               	bnz	i2l1637
  2379  001050  0423               	decf	_controlToLeft,w,c
  2380  001052  B0D8               	btfsc	status,0,c
  2381  001054  D010               	goto	i2l1637
  2382  001056                     i2l1633:
  2383  001056  BE26               	btfsc	_controlToRight+1,7,c
  2384  001058  D005               	goto	i2l1635
  2385  00105A  5026               	movf	_controlToRight+1,w,c
  2386  00105C  E10C               	bnz	i2l1637
  2387  00105E  0425               	decf	_controlToRight,w,c
  2388  001060  B0D8               	btfsc	status,0,c
  2389  001062  D009               	goto	i2l1637
  2390  001064                     i2l1635:
  2391  001064  BE0E               	btfsc	_ForwardCounter+1,7,c
  2392  001066  D02C               	goto	i2l1653
  2393  001068  500E               	movf	_ForwardCounter+1,w,c
  2394  00106A  E105               	bnz	i2l1637
  2395  00106C  040D               	decf	_ForwardCounter,w,c
  2396  00106E  B0D8               	btfsc	status,0,c
  2397  001070  D002               	goto	i2l1637
  2398  001072  D026               	goto	i2l1653
  2399  001074  D000               	goto	i2l1637
  2400  001076                     i2l1637:
  2401                           
  2402                           ;interrupts.c: 132: {
  2403                           ;interrupts.c: 133: KController();
  2404  001076  EC30  F00D         	call	_KController	;wreg free
  2405                           
  2406                           ;interrupts.c: 135: if(controlToLeft > 0 )
  2407  00107A  BE24               	btfsc	_controlToLeft+1,7,c
  2408  00107C  D00E               	goto	i2l1645
  2409  00107E  5024               	movf	_controlToLeft+1,w,c
  2410  001080  E103               	bnz	i2u120_40
  2411  001082  0423               	decf	_controlToLeft,w,c
  2412  001084  A0D8               	btfss	status,0,c
  2413  001086  D009               	goto	i2l1645
  2414  001088                     i2u120_40:
  2415                           
  2416                           ;interrupts.c: 136: {
  2417                           ;interrupts.c: 137: motorCounterUpdate(RIGHT,0);
  2418  001088  0E00               	movlw	0
  2419  00108A  6E48               	movwf	motorCounterUpdate@reverse,c
  2420  00108C  0E01               	movlw	1
  2421  00108E  EC5F  F00C         	call	_motorCounterUpdate
  2422                           
  2423                           ;interrupts.c: 138: controlToLeft--;
  2424  001092  0623               	decf	_controlToLeft,f,c
  2425  001094  A0D8               	btfss	status,0,c
  2426  001096  0624               	decf	_controlToLeft+1,f,c
  2427                           
  2428                           ;interrupts.c: 139: } else if(controlToRight > 0){
  2429  001098  D18D               	goto	i2l90
  2430  00109A                     i2l1645:
  2431  00109A  BE26               	btfsc	_controlToRight+1,7,c
  2432  00109C  D00E               	goto	i2l1651
  2433  00109E  5026               	movf	_controlToRight+1,w,c
  2434  0010A0  E103               	bnz	i2u121_40
  2435  0010A2  0425               	decf	_controlToRight,w,c
  2436  0010A4  A0D8               	btfss	status,0,c
  2437  0010A6  D009               	goto	i2l1651
  2438  0010A8                     i2u121_40:
  2439                           
  2440                           ;interrupts.c: 140: motorCounterUpdate(LEFT,0);
  2441  0010A8  0E00               	movlw	0
  2442  0010AA  6E48               	movwf	motorCounterUpdate@reverse,c
  2443  0010AC  0E00               	movlw	0
  2444  0010AE  EC5F  F00C         	call	_motorCounterUpdate
  2445                           
  2446                           ;interrupts.c: 141: controlToRight--;
  2447  0010B2  0625               	decf	_controlToRight,f,c
  2448  0010B4  A0D8               	btfss	status,0,c
  2449  0010B6  0626               	decf	_controlToRight+1,f,c
  2450                           
  2451                           ;interrupts.c: 142: } else {
  2452  0010B8  D17D               	goto	i2l90
  2453  0010BA                     i2l1651:
  2454                           
  2455                           ;interrupts.c: 143: forward();
  2456  0010BA  EC30  F00E         	call	_forward	;wreg free
  2457                           
  2458                           ;interrupts.c: 144: }
  2459                           ;interrupts.c: 145: }
  2460  0010BE  D17A               	goto	i2l90
  2461  0010C0                     i2l1653:
  2462                           
  2463                           ;interrupts.c: 147: else if (ReverseCounter > 0) {
  2464  0010C0  BE16               	btfsc	_ReverseCounter+1,7,c
  2465  0010C2  D008               	goto	i2l1657
  2466  0010C4  5016               	movf	_ReverseCounter+1,w,c
  2467  0010C6  E103               	bnz	i2u122_40
  2468  0010C8  0415               	decf	_ReverseCounter,w,c
  2469  0010CA  A0D8               	btfss	status,0,c
  2470  0010CC  D003               	goto	i2l1657
  2471  0010CE                     i2u122_40:
  2472                           
  2473                           ;interrupts.c: 148: Reversing();
  2474  0010CE  EC54  F00E         	call	_Reversing	;wreg free
  2475                           
  2476                           ;interrupts.c: 149: }
  2477  0010D2  D170               	goto	i2l90
  2478  0010D4                     i2l1657:
  2479                           
  2480                           ;interrupts.c: 151: else if(RotateCounter > 0) {
  2481  0010D4  BE18               	btfsc	_RotateCounter+1,7,c
  2482  0010D6  D031               	goto	i2l1673
  2483  0010D8  5018               	movf	_RotateCounter+1,w,c
  2484  0010DA  E103               	bnz	i2u123_40
  2485  0010DC  0417               	decf	_RotateCounter,w,c
  2486  0010DE  A0D8               	btfss	status,0,c
  2487  0010E0  D02C               	goto	i2l1673
  2488  0010E2                     i2u123_40:
  2489                           
  2490                           ;interrupts.c: 157: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2491  0010E2  BE06               	btfsc	_sensorValue+5,7,c
  2492  0010E4  D006               	goto	i2l1661
  2493  0010E6  5006               	movf	_sensorValue+5,w,c
  2494  0010E8  E114               	bnz	i2l1667
  2495  0010EA  0E64               	movlw	100
  2496  0010EC  5C05               	subwf	_sensorValue+4,w,c
  2497  0010EE  B0D8               	btfsc	status,0,c
  2498  0010F0  D010               	goto	i2l1667
  2499  0010F2                     i2l1661:
  2500  0010F2  BE08               	btfsc	_sensorValue+7,7,c
  2501  0010F4  D006               	goto	i2l1663
  2502  0010F6  5008               	movf	_sensorValue+7,w,c
  2503  0010F8  E10C               	bnz	i2l1667
  2504  0010FA  0E64               	movlw	100
  2505  0010FC  5C07               	subwf	_sensorValue+6,w,c
  2506  0010FE  B0D8               	btfsc	status,0,c
  2507  001100  D008               	goto	i2l1667
  2508  001102                     i2l1663:
  2509  001102  0434               	decf	_deadEnd,w,c
  2510  001104  A4D8               	btfss	status,2,c
  2511  001106  D005               	goto	i2l1667
  2512                           
  2513                           ;interrupts.c: 158: RotateCounter = 3;
  2514  001108  0E00               	movlw	0
  2515  00110A  6E18               	movwf	_RotateCounter+1,c
  2516  00110C  0E03               	movlw	3
  2517  00110E  6E17               	movwf	_RotateCounter,c
  2518  001110  D000               	goto	i2l1667
  2519  001112                     i2l1667:
  2520                           
  2521                           ;interrupts.c: 159: rotate(rotatingSide);
  2522  001112  5036               	movf	_rotatingSide,w,c
  2523  001114  EC7A  F00D         	call	_rotate
  2524                           
  2525                           ;interrupts.c: 160: if(RotateCounter == 0)
  2526  001118  5017               	movf	_RotateCounter,w,c
  2527  00111A  1018               	iorwf	_RotateCounter+1,w,c
  2528  00111C  A4D8               	btfss	status,2,c
  2529  00111E  D004               	goto	i2l95
  2530                           
  2531                           ;interrupts.c: 161: ForwardCounter = 50;
  2532  001120  0E00               	movlw	0
  2533  001122  6E0E               	movwf	_ForwardCounter+1,c
  2534  001124  0E32               	movlw	50
  2535  001126  6E0D               	movwf	_ForwardCounter,c
  2536  001128                     i2l95:
  2537                           
  2538                           ;interrupts.c: 162: TurnRight = 0;
  2539  001128  0E00               	movlw	0
  2540  00112A  6E1E               	movwf	_TurnRight+1,c
  2541  00112C  0E00               	movlw	0
  2542  00112E  6E1D               	movwf	_TurnRight,c
  2543                           
  2544                           ;interrupts.c: 163: TurnLeft = 0;
  2545  001130  0E00               	movlw	0
  2546  001132  6E1A               	movwf	_TurnLeft+1,c
  2547  001134  0E00               	movlw	0
  2548  001136  6E19               	movwf	_TurnLeft,c
  2549                           
  2550                           ;interrupts.c: 165: }
  2551  001138  D13D               	goto	i2l90
  2552  00113A                     i2l1673:
  2553                           
  2554                           ;interrupts.c: 166: else if (TurnLeft == 1 && sensorValue[0] < 100) {
  2555  00113A  0419               	decf	_TurnLeft,w,c
  2556  00113C  101A               	iorwf	_TurnLeft+1,w,c
  2557  00113E  A4D8               	btfss	status,2,c
  2558  001140  D015               	goto	i2l1679
  2559  001142  BE02               	btfsc	_sensorValue+1,7,c
  2560  001144  D006               	goto	i2l1677
  2561  001146  5002               	movf	_sensorValue+1,w,c
  2562  001148  E111               	bnz	i2l1679
  2563  00114A  0E64               	movlw	100
  2564  00114C  5C01               	subwf	_sensorValue,w,c
  2565  00114E  B0D8               	btfsc	status,0,c
  2566  001150  D00D               	goto	i2l1679
  2567  001152                     i2l1677:
  2568                           
  2569                           ;interrupts.c: 167: RotateCounter = 170;
  2570  001152  0E00               	movlw	0
  2571  001154  6E18               	movwf	_RotateCounter+1,c
  2572  001156  0EAA               	movlw	170
  2573  001158  6E17               	movwf	_RotateCounter,c
  2574                           
  2575                           ;interrupts.c: 168: rotatingSide = LEFT;
  2576  00115A  0E00               	movlw	0
  2577  00115C  6E36               	movwf	_rotatingSide,c
  2578                           
  2579                           ;interrupts.c: 169: justTurned = 1;
  2580  00115E  0E01               	movlw	1
  2581  001160  6E35               	movwf	_justTurned,c
  2582                           
  2583                           ;interrupts.c: 170: TurnLeft = 0;
  2584  001162  0E00               	movlw	0
  2585  001164  6E1A               	movwf	_TurnLeft+1,c
  2586  001166  0E00               	movlw	0
  2587  001168  6E19               	movwf	_TurnLeft,c
  2588  00116A  D06C               	goto	L6
  2589  00116C                     i2l1679:
  2590                           
  2591                           ;interrupts.c: 174: else if (TurnLeftAgain == 1 && sensorValue[0] < 100 && (TurnRight ==
      +                           0 || TurnRight != 0) ) {
  2592  00116C  041B               	decf	_TurnLeftAgain,w,c
  2593  00116E  101C               	iorwf	_TurnLeftAgain+1,w,c
  2594  001170  A4D8               	btfss	status,2,c
  2595  001172  D01E               	goto	i2l1689
  2596  001174  BE02               	btfsc	_sensorValue+1,7,c
  2597  001176  D006               	goto	i2l1683
  2598  001178  5002               	movf	_sensorValue+1,w,c
  2599  00117A  E11A               	bnz	i2l1689
  2600  00117C  0E64               	movlw	100
  2601  00117E  5C01               	subwf	_sensorValue,w,c
  2602  001180  B0D8               	btfsc	status,0,c
  2603  001182  D016               	goto	i2l1689
  2604  001184                     i2l1683:
  2605  001184  501D               	movf	_TurnRight,w,c
  2606  001186  101E               	iorwf	_TurnRight+1,w,c
  2607  001188  B4D8               	btfsc	status,2,c
  2608  00118A  D004               	goto	i2l1687
  2609  00118C  501D               	movf	_TurnRight,w,c
  2610  00118E  101E               	iorwf	_TurnRight+1,w,c
  2611  001190  B4D8               	btfsc	status,2,c
  2612  001192  D00E               	goto	i2l1689
  2613  001194                     i2l1687:
  2614                           
  2615                           ;interrupts.c: 175: RotateCounter = 170;
  2616  001194  0E00               	movlw	0
  2617  001196  6E18               	movwf	_RotateCounter+1,c
  2618  001198  0EAA               	movlw	170
  2619  00119A  6E17               	movwf	_RotateCounter,c
  2620                           
  2621                           ;interrupts.c: 176: rotatingSide = LEFT;
  2622  00119C  0E00               	movlw	0
  2623  00119E  6E36               	movwf	_rotatingSide,c
  2624                           
  2625                           ;interrupts.c: 177: justTurned = 1;
  2626  0011A0  0E01               	movlw	1
  2627  0011A2  6E35               	movwf	_justTurned,c
  2628                           
  2629                           ;interrupts.c: 178: TurnLeft = 0;
  2630  0011A4  0E00               	movlw	0
  2631  0011A6  6E1A               	movwf	_TurnLeft+1,c
  2632  0011A8  0E00               	movlw	0
  2633  0011AA  6E19               	movwf	_TurnLeft,c
  2634                           
  2635                           ;interrupts.c: 179: deadEnd = 0;
  2636  0011AC  0E00               	movlw	0
  2637  0011AE  D0C2               	goto	L7
  2638  0011B0                     i2l1689:
  2639                           
  2640                           ;interrupts.c: 182: else if (TurnRight == 1 && sensorValue[0] < 100 && TurnLeftAgain != 
      +                          1){
  2641  0011B0  041D               	decf	_TurnRight,w,c
  2642  0011B2  101E               	iorwf	_TurnRight+1,w,c
  2643  0011B4  A4D8               	btfss	status,2,c
  2644  0011B6  D01F               	goto	i2l1703
  2645  0011B8  BE02               	btfsc	_sensorValue+1,7,c
  2646  0011BA  D006               	goto	i2l1693
  2647  0011BC  5002               	movf	_sensorValue+1,w,c
  2648  0011BE  E11B               	bnz	i2l1703
  2649  0011C0  0E64               	movlw	100
  2650  0011C2  5C01               	subwf	_sensorValue,w,c
  2651  0011C4  B0D8               	btfsc	status,0,c
  2652  0011C6  D017               	goto	i2l1703
  2653  0011C8                     i2l1693:
  2654  0011C8  041B               	decf	_TurnLeftAgain,w,c
  2655  0011CA  101C               	iorwf	_TurnLeftAgain+1,w,c
  2656  0011CC  B4D8               	btfsc	status,2,c
  2657  0011CE  D013               	goto	i2l1703
  2658                           
  2659                           ;interrupts.c: 183: TurnLeftAgain = 1;
  2660  0011D0  0E00               	movlw	0
  2661  0011D2  6E1C               	movwf	_TurnLeftAgain+1,c
  2662  0011D4  0E01               	movlw	1
  2663  0011D6  6E1B               	movwf	_TurnLeftAgain,c
  2664                           
  2665                           ;interrupts.c: 184: if(justTurned == 0) {
  2666  0011D8  5035               	movf	_justTurned,w,c
  2667  0011DA  A4D8               	btfss	status,2,c
  2668  0011DC  D004               	goto	i2l1699
  2669                           
  2670                           ;interrupts.c: 185: ForwardCounter = 50 + 40;
  2671  0011DE  0E00               	movlw	0
  2672  0011E0  6E0E               	movwf	_ForwardCounter+1,c
  2673  0011E2  0E5A               	movlw	90
  2674  0011E4  D003               	goto	L8
  2675  0011E6                     i2l1699:
  2676                           
  2677                           ;interrupts.c: 187: ForwardCounter = 50;
  2678  0011E6  0E00               	movlw	0
  2679  0011E8  6E0E               	movwf	_ForwardCounter+1,c
  2680  0011EA  0E32               	movlw	50
  2681  0011EC                     L8:
  2682  0011EC  6E0D               	movwf	_ForwardCounter,c
  2683  0011EE  D000               	goto	i2l1701
  2684  0011F0                     i2l1701:
  2685                           
  2686                           ;interrupts.c: 188: }
  2687                           ;interrupts.c: 189: forward();
  2688  0011F0  EC30  F00E         	call	_forward	;wreg free
  2689                           
  2690                           ;interrupts.c: 190: }
  2691  0011F4  D0DF               	goto	i2l90
  2692  0011F6                     i2l1703:
  2693                           
  2694                           ;interrupts.c: 192: else if (TurnRight == 1
  2695                           ;interrupts.c: 193: && (sensorValue[3] > 250 && sensorValue[2] > 250) && sensorValue[0] 
      +                          > 100) {
  2696  0011F6  041D               	decf	_TurnRight,w,c
  2697  0011F8  101E               	iorwf	_TurnRight+1,w,c
  2698  0011FA  B4D8               	btfsc	status,2,c
  2699  0011FC  BE08               	btfsc	_sensorValue+7,7,c
  2700  0011FE  D025               	goto	i2l1713
  2701  001200  5008               	movf	_sensorValue+7,w,c
  2702  001202  E104               	bnz	i2u139_40
  2703  001204  0EFB               	movlw	251
  2704  001206  5C07               	subwf	_sensorValue+6,w,c
  2705  001208  A0D8               	btfss	status,0,c
  2706  00120A  D01F               	goto	i2l1713
  2707  00120C                     i2u139_40:
  2708  00120C  BE06               	btfsc	_sensorValue+5,7,c
  2709  00120E  D01D               	goto	i2l1713
  2710  001210  5006               	movf	_sensorValue+5,w,c
  2711  001212  E104               	bnz	i2u140_40
  2712  001214  0EFB               	movlw	251
  2713  001216  5C05               	subwf	_sensorValue+4,w,c
  2714  001218  A0D8               	btfss	status,0,c
  2715  00121A  D017               	goto	i2l1713
  2716  00121C                     i2u140_40:
  2717  00121C  BE02               	btfsc	_sensorValue+1,7,c
  2718  00121E  D015               	goto	i2l1713
  2719  001220  5002               	movf	_sensorValue+1,w,c
  2720  001222  E104               	bnz	i2u141_40
  2721  001224  0E65               	movlw	101
  2722  001226  5C01               	subwf	_sensorValue,w,c
  2723  001228  A0D8               	btfss	status,0,c
  2724  00122A  D00F               	goto	i2l1713
  2725  00122C                     i2u141_40:
  2726                           
  2727                           ;interrupts.c: 194: RotateCounter = 170;
  2728  00122C  0E00               	movlw	0
  2729  00122E  6E18               	movwf	_RotateCounter+1,c
  2730  001230  0EAA               	movlw	170
  2731  001232  6E17               	movwf	_RotateCounter,c
  2732                           
  2733                           ;interrupts.c: 195: rotatingSide = RIGHT;
  2734  001234  0E01               	movlw	1
  2735  001236  6E36               	movwf	_rotatingSide,c
  2736                           
  2737                           ;interrupts.c: 196: justTurned = 1;
  2738  001238  0E01               	movlw	1
  2739  00123A  6E35               	movwf	_justTurned,c
  2740                           
  2741                           ;interrupts.c: 197: TurnRight = 0;
  2742  00123C  0E00               	movlw	0
  2743  00123E  6E1E               	movwf	_TurnRight+1,c
  2744  001240  0E00               	movlw	0
  2745  001242  6E1D               	movwf	_TurnRight,c
  2746  001244                     L6:
  2747                           
  2748                           ;interrupts.c: 198: deadEnd = 0;
  2749  001244  0E00               	movlw	0
  2750  001246  6E34               	movwf	_deadEnd,c
  2751                           
  2752                           ;interrupts.c: 199: }
  2753  001248  D0B5               	goto	i2l90
  2754  00124A                     i2l1713:
  2755                           
  2756                           ;interrupts.c: 221: else if (sensorValue[0] < 100 && TurnRight != 1) {
  2757  00124A  BE02               	btfsc	_sensorValue+1,7,c
  2758  00124C  D006               	goto	i2l1715
  2759  00124E  5002               	movf	_sensorValue+1,w,c
  2760  001250  E11B               	bnz	i2l1725
  2761  001252  0E64               	movlw	100
  2762  001254  5C01               	subwf	_sensorValue,w,c
  2763  001256  B0D8               	btfsc	status,0,c
  2764  001258  D017               	goto	i2l1725
  2765  00125A                     i2l1715:
  2766  00125A  041D               	decf	_TurnRight,w,c
  2767  00125C  101E               	iorwf	_TurnRight+1,w,c
  2768  00125E  B4D8               	btfsc	status,2,c
  2769  001260  D013               	goto	i2l1725
  2770                           
  2771                           ;interrupts.c: 222: TurnLeft = 1;
  2772  001262  0E00               	movlw	0
  2773  001264  6E1A               	movwf	_TurnLeft+1,c
  2774  001266  0E01               	movlw	1
  2775  001268  6E19               	movwf	_TurnLeft,c
  2776                           
  2777                           ;interrupts.c: 223: if(justTurned == 0) {
  2778  00126A  5035               	movf	_justTurned,w,c
  2779  00126C  A4D8               	btfss	status,2,c
  2780  00126E  D004               	goto	i2l1721
  2781                           
  2782                           ;interrupts.c: 224: ForwardCounter = 320;
  2783  001270  0E01               	movlw	1
  2784  001272  6E0E               	movwf	_ForwardCounter+1,c
  2785  001274  0E40               	movlw	64
  2786  001276  D003               	goto	L9
  2787  001278                     i2l1721:
  2788                           
  2789                           ;interrupts.c: 226: ForwardCounter = 50;
  2790  001278  0E00               	movlw	0
  2791  00127A  6E0E               	movwf	_ForwardCounter+1,c
  2792  00127C  0E32               	movlw	50
  2793  00127E                     L9:
  2794  00127E  6E0D               	movwf	_ForwardCounter,c
  2795  001280  D000               	goto	i2l1723
  2796  001282                     i2l1723:
  2797                           
  2798                           ;interrupts.c: 227: }
  2799                           ;interrupts.c: 228: forward();
  2800  001282  EC30  F00E         	call	_forward	;wreg free
  2801                           
  2802                           ;interrupts.c: 229: }
  2803  001286  D096               	goto	i2l90
  2804  001288                     i2l1725:
  2805                           
  2806                           ;interrupts.c: 231: else if (sensorValue[1] < 100 && sensorValue[0] > 100 && TurnRight =
      +                          = 0) {
  2807  001288  BE04               	btfsc	_sensorValue+3,7,c
  2808  00128A  D006               	goto	i2l1727
  2809  00128C  5004               	movf	_sensorValue+3,w,c
  2810  00128E  E123               	bnz	i2l1739
  2811  001290  0E64               	movlw	100
  2812  001292  5C03               	subwf	_sensorValue+2,w,c
  2813  001294  B0D8               	btfsc	status,0,c
  2814  001296  D01F               	goto	i2l1739
  2815  001298                     i2l1727:
  2816  001298  BE02               	btfsc	_sensorValue+1,7,c
  2817  00129A  D01D               	goto	i2l1739
  2818  00129C  5002               	movf	_sensorValue+1,w,c
  2819  00129E  E104               	bnz	i2u146_40
  2820  0012A0  0E65               	movlw	101
  2821  0012A2  5C01               	subwf	_sensorValue,w,c
  2822  0012A4  A0D8               	btfss	status,0,c
  2823  0012A6  D017               	goto	i2l1739
  2824  0012A8                     i2u146_40:
  2825  0012A8  501D               	movf	_TurnRight,w,c
  2826  0012AA  101E               	iorwf	_TurnRight+1,w,c
  2827  0012AC  A4D8               	btfss	status,2,c
  2828  0012AE  D013               	goto	i2l1739
  2829                           
  2830                           ;interrupts.c: 232: TurnRight = 1;
  2831  0012B0  0E00               	movlw	0
  2832  0012B2  6E1E               	movwf	_TurnRight+1,c
  2833  0012B4  0E01               	movlw	1
  2834  0012B6  6E1D               	movwf	_TurnRight,c
  2835                           
  2836                           ;interrupts.c: 233: if(justTurned == 0) {
  2837  0012B8  5035               	movf	_justTurned,w,c
  2838  0012BA  A4D8               	btfss	status,2,c
  2839  0012BC  D004               	goto	i2l1735
  2840                           
  2841                           ;interrupts.c: 234: ForwardCounter = 320;
  2842  0012BE  0E01               	movlw	1
  2843  0012C0  6E0E               	movwf	_ForwardCounter+1,c
  2844  0012C2  0E40               	movlw	64
  2845  0012C4  D003               	goto	L10
  2846  0012C6                     i2l1735:
  2847                           
  2848                           ;interrupts.c: 236: ForwardCounter = 50;
  2849  0012C6  0E00               	movlw	0
  2850  0012C8  6E0E               	movwf	_ForwardCounter+1,c
  2851  0012CA  0E32               	movlw	50
  2852  0012CC                     L10:
  2853  0012CC  6E0D               	movwf	_ForwardCounter,c
  2854  0012CE  D000               	goto	i2l1737
  2855  0012D0                     i2l1737:
  2856                           
  2857                           ;interrupts.c: 237: }
  2858                           ;interrupts.c: 238: forward();
  2859  0012D0  EC30  F00E         	call	_forward	;wreg free
  2860                           
  2861                           ;interrupts.c: 239: }
  2862  0012D4  D06F               	goto	i2l90
  2863  0012D6                     i2l1739:
  2864                           
  2865                           ;interrupts.c: 241: else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2866                           ;interrupts.c: 242: && (sensorValue[3] > 450 && sensorValue[2] > 450) && RotateCounter <
      +                          = 0)
  2867  0012D6  BE02               	btfsc	_sensorValue+1,7,c
  2868  0012D8  D02F               	goto	i2l1751
  2869  0012DA  5002               	movf	_sensorValue+1,w,c
  2870  0012DC  E104               	bnz	i2u149_40
  2871  0012DE  0E65               	movlw	101
  2872  0012E0  5C01               	subwf	_sensorValue,w,c
  2873  0012E2  A0D8               	btfss	status,0,c
  2874  0012E4  D029               	goto	i2l1751
  2875  0012E6                     i2u149_40:
  2876  0012E6  BE04               	btfsc	_sensorValue+3,7,c
  2877  0012E8  D027               	goto	i2l1751
  2878  0012EA  5004               	movf	_sensorValue+3,w,c
  2879  0012EC  E104               	bnz	i2u150_40
  2880  0012EE  0E65               	movlw	101
  2881  0012F0  5C03               	subwf	_sensorValue+2,w,c
  2882  0012F2  A0D8               	btfss	status,0,c
  2883  0012F4  D021               	goto	i2l1751
  2884  0012F6                     i2u150_40:
  2885  0012F6  BE08               	btfsc	_sensorValue+7,7,c
  2886  0012F8  D01F               	goto	i2l1751
  2887  0012FA  0EC3               	movlw	195
  2888  0012FC  5C07               	subwf	_sensorValue+6,w,c
  2889  0012FE  0E01               	movlw	1
  2890  001300  5808               	subwfb	_sensorValue+7,w,c
  2891  001302  B0D8               	btfsc	status,0,c
  2892  001304  BE06               	btfsc	_sensorValue+5,7,c
  2893  001306  D018               	goto	i2l1751
  2894  001308  0EC3               	movlw	195
  2895  00130A  5C05               	subwf	_sensorValue+4,w,c
  2896  00130C  0E01               	movlw	1
  2897  00130E  5806               	subwfb	_sensorValue+5,w,c
  2898  001310  A0D8               	btfss	status,0,c
  2899  001312  D012               	goto	i2l1751
  2900  001314  BE18               	btfsc	_RotateCounter+1,7,c
  2901  001316  D005               	goto	i2l1749
  2902  001318  5018               	movf	_RotateCounter+1,w,c
  2903  00131A  E10E               	bnz	i2l1751
  2904  00131C  0417               	decf	_RotateCounter,w,c
  2905  00131E  B0D8               	btfsc	status,0,c
  2906  001320  D00B               	goto	i2l1751
  2907  001322                     i2l1749:
  2908                           
  2909                           ;interrupts.c: 243: {
  2910                           ;interrupts.c: 244: RotateCounter = 170*2;
  2911  001322  0E01               	movlw	1
  2912  001324  6E18               	movwf	_RotateCounter+1,c
  2913  001326  0E54               	movlw	84
  2914  001328  6E17               	movwf	_RotateCounter,c
  2915                           
  2916                           ;interrupts.c: 245: rotatingSide = LEFT;
  2917  00132A  0E00               	movlw	0
  2918  00132C  6E36               	movwf	_rotatingSide,c
  2919                           
  2920                           ;interrupts.c: 246: justTurned = 1;
  2921  00132E  0E01               	movlw	1
  2922  001330  6E35               	movwf	_justTurned,c
  2923                           
  2924                           ;interrupts.c: 247: deadEnd = 1;
  2925  001332  0E01               	movlw	1
  2926  001334                     L7:
  2927  001334  6E34               	movwf	_deadEnd,c
  2928  001336  D039               	goto	i2l1771
  2929  001338                     i2l1751:
  2930                           
  2931                           ;interrupts.c: 251: else if ((sensorValue[0] > 400 || sensorValue[1] > 400)
  2932                           ;interrupts.c: 252: && (sensorValue[3] < 200 && sensorValue[2] < 200))
  2933  001338  BE02               	btfsc	_sensorValue+1,7,c
  2934  00133A  D006               	goto	i2l1753
  2935  00133C  0E91               	movlw	145
  2936  00133E  5C01               	subwf	_sensorValue,w,c
  2937  001340  0E01               	movlw	1
  2938  001342  5802               	subwfb	_sensorValue+1,w,c
  2939  001344  B0D8               	btfsc	status,0,c
  2940  001346  D008               	goto	i2l1755
  2941  001348                     i2l1753:
  2942  001348  BE04               	btfsc	_sensorValue+3,7,c
  2943  00134A  D01B               	goto	i2l1763
  2944  00134C  0E91               	movlw	145
  2945  00134E  5C03               	subwf	_sensorValue+2,w,c
  2946  001350  0E01               	movlw	1
  2947  001352  5804               	subwfb	_sensorValue+3,w,c
  2948  001354  A0D8               	btfss	status,0,c
  2949  001356  D015               	goto	i2l1763
  2950  001358                     i2l1755:
  2951  001358  BE08               	btfsc	_sensorValue+7,7,c
  2952  00135A  D006               	goto	i2l1757
  2953  00135C  5008               	movf	_sensorValue+7,w,c
  2954  00135E  E111               	bnz	i2l1763
  2955  001360  0EC8               	movlw	200
  2956  001362  5C07               	subwf	_sensorValue+6,w,c
  2957  001364  B0D8               	btfsc	status,0,c
  2958  001366  D00D               	goto	i2l1763
  2959  001368                     i2l1757:
  2960  001368  BE06               	btfsc	_sensorValue+5,7,c
  2961  00136A  D006               	goto	i2l1759
  2962  00136C  5006               	movf	_sensorValue+5,w,c
  2963  00136E  E109               	bnz	i2l1763
  2964  001370  0EC8               	movlw	200
  2965  001372  5C05               	subwf	_sensorValue+4,w,c
  2966  001374  B0D8               	btfsc	status,0,c
  2967  001376  D005               	goto	i2l1763
  2968  001378                     i2l1759:
  2969                           
  2970                           ;interrupts.c: 253: {
  2971                           ;interrupts.c: 255: KController();
  2972  001378  EC30  F00D         	call	_KController	;wreg free
  2973                           
  2974                           ;interrupts.c: 256: justTurned = 0;
  2975  00137C  0E00               	movlw	0
  2976  00137E  6E35               	movwf	_justTurned,c
  2977                           
  2978                           ;interrupts.c: 258: }
  2979  001380  D019               	goto	i2l90
  2980  001382                     i2l1763:
  2981                           
  2982                           ;interrupts.c: 259: else {
  2983                           ;interrupts.c: 260: motorCounterUpdate(RIGHT,0);
  2984  001382  0E00               	movlw	0
  2985  001384  6E48               	movwf	motorCounterUpdate@reverse,c
  2986  001386  0E01               	movlw	1
  2987  001388  EC5F  F00C         	call	_motorCounterUpdate
  2988                           
  2989                           ;interrupts.c: 261: motorCounterUpdate(LEFT,0);
  2990  00138C  0E00               	movlw	0
  2991  00138E  6E48               	movwf	motorCounterUpdate@reverse,c
  2992  001390  0E00               	movlw	0
  2993  001392  EC5F  F00C         	call	_motorCounterUpdate
  2994                           
  2995                           ;interrupts.c: 262: justTurned = 0;
  2996  001396  0E00               	movlw	0
  2997  001398  6E35               	movwf	_justTurned,c
  2998                           
  2999                           ;interrupts.c: 263: TurnLeft = 0;
  3000  00139A  0E00               	movlw	0
  3001  00139C  6E1A               	movwf	_TurnLeft+1,c
  3002  00139E  0E00               	movlw	0
  3003  0013A0  6E19               	movwf	_TurnLeft,c
  3004                           
  3005                           ;interrupts.c: 264: TurnRight = 0;
  3006  0013A2  0E00               	movlw	0
  3007  0013A4  6E1E               	movwf	_TurnRight+1,c
  3008  0013A6  0E00               	movlw	0
  3009  0013A8  6E1D               	movwf	_TurnRight,c
  3010  0013AA                     i2l1771:
  3011                           
  3012                           ;interrupts.c: 265: TurnLeftAgain = 0;
  3013  0013AA  0E00               	movlw	0
  3014  0013AC  6E1C               	movwf	_TurnLeftAgain+1,c
  3015  0013AE  0E00               	movlw	0
  3016  0013B0  6E1B               	movwf	_TurnLeftAgain,c
  3017  0013B2  D000               	goto	i2l90
  3018  0013B4                     i2l90:
  3019                           
  3020                           ;interrupts.c: 266: }
  3021                           ;interrupts.c: 267: moveMouse(merge(LMotorCounter,RMotorCounter));
  3022  0013B4  C032  F048         	movff	_RMotorCounter,merge@right
  3023  0013B8  5031               	movf	_LMotorCounter,w,c
  3024  0013BA  EC62  F00E         	call	_merge
  3025  0013BE  EC6F  F00E         	call	_moveMouse
  3026                           
  3027                           ;interrupts.c: 268: MotorDelayCounter = 0;
  3028  0013C2  0E00               	movlw	0
  3029  0013C4  6E12               	movwf	_MotorDelayCounter+1,c
  3030  0013C6  0E00               	movlw	0
  3031  0013C8  6E11               	movwf	_MotorDelayCounter,c
  3032  0013CA  D000               	goto	i2l1775
  3033  0013CC                     i2l1775:
  3034                           
  3035                           ;interrupts.c: 269: }
  3036                           ;interrupts.c: 271: MotorDelayCounter++;
  3037  0013CC  4A11               	infsnz	_MotorDelayCounter,f,c
  3038  0013CE  2A12               	incf	_MotorDelayCounter+1,f,c
  3039                           
  3040                           ;interrupts.c: 272: INTCONbits.TMR0IF = 0;
  3041  0013D0  94F2               	bcf	intcon,2,c	;volatile
  3042  0013D2  D000               	goto	i2l123
  3043  0013D4                     i2l123:
  3044  0013D4  C058  FFF5         	movff	??_high_isr+13,tablat
  3045  0013D8  C057  FFF8         	movff	??_high_isr+12,tblptru
  3046  0013DC  C056  FFF7         	movff	??_high_isr+11,tblptrh
  3047  0013E0  C055  FFF6         	movff	??_high_isr+10,tblptrl
  3048  0013E4  C054  FFF4         	movff	??_high_isr+9,prodh
  3049  0013E8  C053  FFF3         	movff	??_high_isr+8,prodl
  3050  0013EC  C052  FFDA         	movff	??_high_isr+7,fsr2h
  3051  0013F0  C051  FFD9         	movff	??_high_isr+6,fsr2l
  3052  0013F4  C050  FFE2         	movff	??_high_isr+5,fsr1h
  3053  0013F8  C04F  FFE1         	movff	??_high_isr+4,fsr1l
  3054  0013FC  C04E  FFEA         	movff	??_high_isr+3,fsr0h
  3055  001400  C04D  FFE9         	movff	??_high_isr+2,fsr0l
  3056  001404  C04C  FFFB         	movff	??_high_isr+1,pclatu
  3057  001408  C04B  FFFA         	movff	??_high_isr,pclath
  3058  00140C  0011               	retfie		f
  3059  00140E                     __end_of_high_isr:
  3060                           	opt stack 0
  3061                           pclatu	equ	0xFFB
  3062                           pclath	equ	0xFFA
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           intcon2	equ	0xFF1
  3071                           postinc0	equ	0xFEE
  3072                           fsr0h	equ	0xFEA
  3073                           fsr0l	equ	0xFE9
  3074                           wreg	equ	0xFE8
  3075                           fsr1h	equ	0xFE2
  3076                           fsr1l	equ	0xFE1
  3077                           bsr	equ	0xFE0
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _rotate *****************
  3085 ;; Defined at:
  3086 ;;		line 408 in file "interrupts.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  side            1    wreg     enum E4145
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  side            1   19[COMRAM] enum E4145
  3091 ;; Return value:  Size  Location     Type
  3092 ;;		None               void
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;Total ram usage:        1 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    1
  3107 ;; This function calls:
  3108 ;;		_motorCounterUpdate
  3109 ;; This function is called by:
  3110 ;;		_high_isr
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text14
  3115  001AF4                     __ptext14:
  3116                           	opt stack 0
  3117  001AF4                     _rotate:
  3118                           	opt stack 24
  3119                           
  3120                           ;incstack = 0
  3121                           ;rotate@side stored from wreg
  3122  001AF4  6E4A               	movwf	rotate@side,c
  3123                           
  3124                           ;interrupts.c: 410: if (side == LEFT){
  3125  001AF6  504A               	movf	rotate@side,w,c
  3126  001AF8  A4D8               	btfss	status,2,c
  3127  001AFA  D00B               	goto	i2l1561
  3128                           
  3129                           ;interrupts.c: 411: motorCounterUpdate(RIGHT,0);
  3130  001AFC  0E00               	movlw	0
  3131  001AFE  6E48               	movwf	motorCounterUpdate@reverse,c
  3132  001B00  0E01               	movlw	1
  3133  001B02  EC5F  F00C         	call	_motorCounterUpdate
  3134                           
  3135                           ;interrupts.c: 412: motorCounterUpdate(LEFT,1);
  3136  001B06  0E01               	movlw	1
  3137  001B08  6E48               	movwf	motorCounterUpdate@reverse,c
  3138  001B0A  0E00               	movlw	0
  3139  001B0C  EC5F  F00C         	call	_motorCounterUpdate
  3140                           
  3141                           ;interrupts.c: 413: } else {
  3142  001B10  D00B               	goto	i2l1563
  3143  001B12                     i2l1561:
  3144                           
  3145                           ;interrupts.c: 414: motorCounterUpdate(LEFT,0);
  3146  001B12  0E00               	movlw	0
  3147  001B14  6E48               	movwf	motorCounterUpdate@reverse,c
  3148  001B16  0E00               	movlw	0
  3149  001B18  EC5F  F00C         	call	_motorCounterUpdate
  3150                           
  3151                           ;interrupts.c: 415: motorCounterUpdate(RIGHT,1);
  3152  001B1C  0E01               	movlw	1
  3153  001B1E  6E48               	movwf	motorCounterUpdate@reverse,c
  3154  001B20  0E01               	movlw	1
  3155  001B22  EC5F  F00C         	call	_motorCounterUpdate
  3156  001B26  D000               	goto	i2l1563
  3157  001B28                     i2l1563:
  3158                           
  3159                           ;interrupts.c: 416: }
  3160                           ;interrupts.c: 417: RotateCounter--;
  3161  001B28  0617               	decf	_RotateCounter,f,c
  3162  001B2A  A0D8               	btfss	status,0,c
  3163  001B2C  0618               	decf	_RotateCounter+1,f,c
  3164  001B2E  0012               	return		;funcret
  3165  001B30                     __end_of_rotate:
  3166                           	opt stack 0
  3167                           pclatu	equ	0xFFB
  3168                           pclath	equ	0xFFA
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           intcon2	equ	0xFF1
  3177                           postinc0	equ	0xFEE
  3178                           fsr0h	equ	0xFEA
  3179                           fsr0l	equ	0xFE9
  3180                           wreg	equ	0xFE8
  3181                           fsr1h	equ	0xFE2
  3182                           fsr1l	equ	0xFE1
  3183                           bsr	equ	0xFE0
  3184                           postinc2	equ	0xFDE
  3185                           postdec2	equ	0xFDD
  3186                           fsr2h	equ	0xFDA
  3187                           fsr2l	equ	0xFD9
  3188                           status	equ	0xFD8
  3189                           
  3190 ;; *************** function _moveMouse *****************
  3191 ;; Defined at:
  3192 ;;		line 369 in file "interrupts.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  action          1    wreg     unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  action          1   17[COMRAM] unsigned char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;		None               void
  3199 ;; Registers used:
  3200 ;;		wreg
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;Total ram usage:        1 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_high_isr
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text15
  3220  001CDE                     __ptext15:
  3221                           	opt stack 0
  3222  001CDE                     _moveMouse:
  3223                           	opt stack 25
  3224                           
  3225                           ;incstack = 0
  3226                           ;moveMouse@action stored from wreg
  3227  001CDE  6E48               	movwf	moveMouse@action,c
  3228                           
  3229                           ;interrupts.c: 371: LATC = action;
  3230  001CE0  C048  FF8B         	movff	moveMouse@action,3979	;volatile
  3231  001CE4  0012               	return		;funcret
  3232  001CE6                     __end_of_moveMouse:
  3233                           	opt stack 0
  3234                           pclatu	equ	0xFFB
  3235                           pclath	equ	0xFFA
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           intcon2	equ	0xFF1
  3244                           postinc0	equ	0xFEE
  3245                           fsr0h	equ	0xFEA
  3246                           fsr0l	equ	0xFE9
  3247                           wreg	equ	0xFE8
  3248                           fsr1h	equ	0xFE2
  3249                           fsr1l	equ	0xFE1
  3250                           bsr	equ	0xFE0
  3251                           postinc2	equ	0xFDE
  3252                           postdec2	equ	0xFDD
  3253                           fsr2h	equ	0xFDA
  3254                           fsr2l	equ	0xFD9
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function _merge *****************
  3258 ;; Defined at:
  3259 ;;		line 362 in file "interrupts.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  left            1    wreg     unsigned char 
  3262 ;;  right           1   17[COMRAM] unsigned char 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  left            1   18[COMRAM] unsigned char 
  3265 ;;  merged          1   19[COMRAM] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      unsigned char 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3275 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;Total ram usage:        3 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_high_isr
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text16
  3289  001CC4                     __ptext16:
  3290                           	opt stack 0
  3291  001CC4                     _merge:
  3292                           	opt stack 25
  3293                           
  3294                           ;incstack = 0
  3295                           ;merge@left stored from wreg
  3296  001CC4  6E49               	movwf	merge@left,c
  3297                           
  3298                           ;interrupts.c: 364: unsigned char merged;
  3299                           ;interrupts.c: 365: merged = left + (right << 4);
  3300  001CC6  3848               	swapf	merge@right,w,c
  3301  001CC8  0BF0               	andlw	240
  3302  001CCA  2449               	addwf	merge@left,w,c
  3303  001CCC  6E4A               	movwf	merge@merged,c
  3304                           
  3305                           ;interrupts.c: 366: return merged;
  3306  001CCE  504A               	movf	merge@merged,w,c
  3307  001CD0  D000               	goto	i2l167
  3308  001CD2                     i2l167:
  3309  001CD2  0012               	return		;funcret
  3310  001CD4                     __end_of_merge:
  3311                           	opt stack 0
  3312                           pclatu	equ	0xFFB
  3313                           pclath	equ	0xFFA
  3314                           tblptru	equ	0xFF8
  3315                           tblptrh	equ	0xFF7
  3316                           tblptrl	equ	0xFF6
  3317                           tablat	equ	0xFF5
  3318                           prodh	equ	0xFF4
  3319                           prodl	equ	0xFF3
  3320                           intcon	equ	0xFF2
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           fsr0h	equ	0xFEA
  3324                           fsr0l	equ	0xFE9
  3325                           wreg	equ	0xFE8
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           bsr	equ	0xFE0
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _forward *****************
  3336 ;; Defined at:
  3337 ;;		line 453 in file "interrupts.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:        0 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    1
  3358 ;; This function calls:
  3359 ;;		_motorCounterUpdate
  3360 ;; This function is called by:
  3361 ;;		_high_isr
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text17
  3366  001C60                     __ptext17:
  3367                           	opt stack 0
  3368  001C60                     _forward:
  3369                           	opt stack 24
  3370                           
  3371                           ;interrupts.c: 455: motorCounterUpdate(RIGHT,0);
  3372                           
  3373                           ;incstack = 0
  3374  001C60  0E00               	movlw	0
  3375  001C62  6E48               	movwf	motorCounterUpdate@reverse,c
  3376  001C64  0E01               	movlw	1
  3377  001C66  EC5F  F00C         	call	_motorCounterUpdate
  3378                           
  3379                           ;interrupts.c: 456: motorCounterUpdate(LEFT,0);
  3380  001C6A  0E00               	movlw	0
  3381  001C6C  6E48               	movwf	motorCounterUpdate@reverse,c
  3382  001C6E  0E00               	movlw	0
  3383  001C70  EC5F  F00C         	call	_motorCounterUpdate
  3384                           
  3385                           ;interrupts.c: 457: ForwardCounter--;
  3386  001C74  060D               	decf	_ForwardCounter,f,c
  3387  001C76  A0D8               	btfss	status,0,c
  3388  001C78  060E               	decf	_ForwardCounter+1,f,c
  3389                           
  3390                           ;interrupts.c: 458: if(ForwardCounter == 0)
  3391  001C7A  500D               	movf	_ForwardCounter,w,c
  3392  001C7C  100E               	iorwf	_ForwardCounter+1,w,c
  3393  001C7E  A4D8               	btfss	status,2,c
  3394  001C80  D003               	goto	i2l201
  3395                           
  3396                           ;interrupts.c: 459: justTurned = 0;
  3397  001C82  0E00               	movlw	0
  3398  001C84  6E35               	movwf	_justTurned,c
  3399  001C86  D000               	goto	i2l201
  3400  001C88                     i2l201:
  3401  001C88  0012               	return		;funcret
  3402  001C8A                     __end_of_forward:
  3403                           	opt stack 0
  3404                           pclatu	equ	0xFFB
  3405                           pclath	equ	0xFFA
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon2	equ	0xFF1
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           bsr	equ	0xFE0
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _Reversing *****************
  3428 ;; Defined at:
  3429 ;;		line 432 in file "interrupts.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;		None               void
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        0 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    1
  3450 ;; This function calls:
  3451 ;;		_motorCounterUpdate
  3452 ;; This function is called by:
  3453 ;;		_high_isr
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text18
  3458  001CA8                     __ptext18:
  3459                           	opt stack 0
  3460  001CA8                     _Reversing:
  3461                           	opt stack 24
  3462                           
  3463                           ;interrupts.c: 434: motorCounterUpdate(RIGHT,1);
  3464                           
  3465                           ;incstack = 0
  3466  001CA8  0E01               	movlw	1
  3467  001CAA  6E48               	movwf	motorCounterUpdate@reverse,c
  3468  001CAC  0E01               	movlw	1
  3469  001CAE  EC5F  F00C         	call	_motorCounterUpdate
  3470                           
  3471                           ;interrupts.c: 435: motorCounterUpdate(LEFT,1);
  3472  001CB2  0E01               	movlw	1
  3473  001CB4  6E48               	movwf	motorCounterUpdate@reverse,c
  3474  001CB6  0E00               	movlw	0
  3475  001CB8  EC5F  F00C         	call	_motorCounterUpdate
  3476                           
  3477                           ;interrupts.c: 436: ReverseCounter--;
  3478  001CBC  0615               	decf	_ReverseCounter,f,c
  3479  001CBE  A0D8               	btfss	status,0,c
  3480  001CC0  0616               	decf	_ReverseCounter+1,f,c
  3481  001CC2  0012               	return		;funcret
  3482  001CC4                     __end_of_Reversing:
  3483                           	opt stack 0
  3484                           pclatu	equ	0xFFB
  3485                           pclath	equ	0xFFA
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           intcon2	equ	0xFF1
  3494                           postinc0	equ	0xFEE
  3495                           fsr0h	equ	0xFEA
  3496                           fsr0l	equ	0xFE9
  3497                           wreg	equ	0xFE8
  3498                           fsr1h	equ	0xFE2
  3499                           fsr1l	equ	0xFE1
  3500                           bsr	equ	0xFE0
  3501                           postinc2	equ	0xFDE
  3502                           postdec2	equ	0xFDD
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _motorCounterUpdate *****************
  3508 ;; Defined at:
  3509 ;;		line 317 in file "interrupts.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  side            1    wreg     enum E4145
  3512 ;;  reverse         1   17[COMRAM] unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  side            1   18[COMRAM] enum E4145
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        2 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; This function calls:
  3531 ;;		Nothing
  3532 ;; This function is called by:
  3533 ;;		_high_isr
  3534 ;;		_rotate
  3535 ;;		_Reversing
  3536 ;;		_forward
  3537 ;;		_smoothTurn
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text19
  3542  0018BE                     __ptext19:
  3543                           	opt stack 0
  3544  0018BE                     _motorCounterUpdate:
  3545                           	opt stack 24
  3546                           
  3547                           ;incstack = 0
  3548                           ;motorCounterUpdate@side stored from wreg
  3549  0018BE  6E49               	movwf	motorCounterUpdate@side,c
  3550                           
  3551                           ;interrupts.c: 319: if(side == LEFT && reverse == 1)
  3552  0018C0  5049               	movf	motorCounterUpdate@side,w,c
  3553  0018C2  A4D8               	btfss	status,2,c
  3554  0018C4  D01B               	goto	i2l1453
  3555  0018C6  0448               	decf	motorCounterUpdate@reverse,w,c
  3556  0018C8  B4D8               	btfsc	status,2,c
  3557  0018CA  D00B               	goto	i2l1451
  3558  0018CC  D017               	goto	i2l1453
  3559                           
  3560                           ;interrupts.c: 320: {
  3561                           ;interrupts.c: 321: switch(LMotorCounter)
  3562  0018CE  D009               	goto	i2l1451
  3563  0018D0                     i2l1441:
  3564  0018D0  0E02               	movlw	2
  3565  0018D2  D004               	goto	L13
  3566  0018D4                     i2l1443:
  3567  0018D4  0E04               	movlw	4
  3568  0018D6  D002               	goto	L13
  3569                           
  3570                           ;interrupts.c: 325: case 0b00000100: LMotorCounter = 0b00001000; break;
  3571  0018D8  D03E               	goto	i2l1485
  3572                           
  3573                           ;interrupts.c: 326: case 0b00001000: LMotorCounter = 0b00000001; break;
  3574  0018DA  D039               	goto	i2l1479
  3575  0018DC                     L13:
  3576  0018DC  6E31               	movwf	_LMotorCounter,c
  3577  0018DE  D068               	goto	i2l164
  3578                           
  3579                           ;interrupts.c: 327: default: LMotorCounter = 0b00000001;
  3580  0018E0  D036               	goto	i2l1479
  3581  0018E2                     i2l1451:
  3582  0018E2  5031               	movf	_LMotorCounter,w,c
  3583                           
  3584                           ; Switch size 1, requested type "space"
  3585                           ; Number of cases is 4, Range of values is 1 to 8
  3586                           ; switch strategies available:
  3587                           ; Name         Instructions Cycles
  3588                           ; simple_byte           13     7 (average)
  3589                           ;	Chosen strategy is simple_byte
  3590  0018E4  0A01               	xorlw	1	; case 1
  3591  0018E6  B4D8               	btfsc	status,2,c
  3592  0018E8  D7F3               	goto	i2l1441
  3593  0018EA  0A03               	xorlw	3	; case 2
  3594  0018EC  B4D8               	btfsc	status,2,c
  3595  0018EE  D7F2               	goto	i2l1443
  3596  0018F0  0A06               	xorlw	6	; case 4
  3597  0018F2  B4D8               	btfsc	status,2,c
  3598  0018F4  D030               	goto	i2l1485
  3599  0018F6  0A0C               	xorlw	12	; case 8
  3600  0018F8  D02A               	goto	i2l1479
  3601                           
  3602                           ;interrupts.c: 329: } else if(side == RIGHT && reverse == 1)
  3603  0018FA  D05A               	goto	i2l164
  3604  0018FC                     i2l1453:
  3605  0018FC  0449               	decf	motorCounterUpdate@side,w,c
  3606  0018FE  A4D8               	btfss	status,2,c
  3607  001900  D01D               	goto	i2l1471
  3608  001902  0448               	decf	motorCounterUpdate@reverse,w,c
  3609  001904  B4D8               	btfsc	status,2,c
  3610  001906  D00B               	goto	i2l1469
  3611  001908  D019               	goto	i2l1471
  3612                           
  3613                           ;interrupts.c: 330: {
  3614                           ;interrupts.c: 331: switch(RMotorCounter)
  3615  00190A  D009               	goto	i2l1469
  3616  00190C                     i2l1459:
  3617  00190C  0E08               	movlw	8
  3618  00190E  D040               	goto	L21
  3619  001910                     i2l1461:
  3620  001910  0E01               	movlw	1
  3621  001912  D03E               	goto	L21
  3622  001914                     i2l1463:
  3623  001914  0E02               	movlw	2
  3624  001916  D03C               	goto	L21
  3625  001918                     i2l1465:
  3626  001918  0E04               	movlw	4
  3627  00191A  D03A               	goto	L21
  3628                           
  3629                           ;interrupts.c: 337: default: RMotorCounter = 0b00001000;
  3630  00191C  D7F7               	goto	i2l1459
  3631  00191E                     i2l1469:
  3632  00191E  5032               	movf	_RMotorCounter,w,c
  3633                           
  3634                           ; Switch size 1, requested type "space"
  3635                           ; Number of cases is 4, Range of values is 1 to 8
  3636                           ; switch strategies available:
  3637                           ; Name         Instructions Cycles
  3638                           ; simple_byte           13     7 (average)
  3639                           ;	Chosen strategy is simple_byte
  3640  001920  0A01               	xorlw	1	; case 1
  3641  001922  B4D8               	btfsc	status,2,c
  3642  001924  D7F3               	goto	i2l1459
  3643  001926  0A03               	xorlw	3	; case 2
  3644  001928  B4D8               	btfsc	status,2,c
  3645  00192A  D7F2               	goto	i2l1461
  3646  00192C  0A06               	xorlw	6	; case 4
  3647  00192E  B4D8               	btfsc	status,2,c
  3648  001930  D7F1               	goto	i2l1463
  3649  001932  0A0C               	xorlw	12	; case 8
  3650  001934  B4D8               	btfsc	status,2,c
  3651  001936  D7F0               	goto	i2l1465
  3652  001938  D7E9               	goto	i2l1459
  3653                           
  3654                           ;interrupts.c: 339: } else if(side == LEFT && reverse == 0)
  3655  00193A  D03A               	goto	i2l164
  3656  00193C                     i2l1471:
  3657  00193C  5049               	movf	motorCounterUpdate@side,w,c
  3658  00193E  A4D8               	btfss	status,2,c
  3659  001940  D01B               	goto	i2l1489
  3660  001942  5048               	movf	motorCounterUpdate@reverse,w,c
  3661  001944  B4D8               	btfsc	status,2,c
  3662  001946  D009               	goto	i2l1487
  3663  001948  D017               	goto	i2l1489
  3664                           
  3665                           ;interrupts.c: 340: {
  3666                           ;interrupts.c: 341: switch(LMotorCounter)
  3667  00194A  D007               	goto	i2l1487
  3668                           
  3669                           ;interrupts.c: 342: {
  3670                           ;interrupts.c: 343: case 0b00000001: LMotorCounter = 0b00001000; break;
  3671  00194C  D004               	goto	i2l1485
  3672  00194E                     i2l1479:
  3673  00194E  0E01               	movlw	1
  3674  001950  D7C5               	goto	L13
  3675                           
  3676                           ;interrupts.c: 345: case 0b00000100: LMotorCounter = 0b00000010; break;
  3677  001952  D7BE               	goto	i2l1441
  3678                           
  3679                           ;interrupts.c: 346: case 0b00001000: LMotorCounter = 0b00000100; break;
  3680  001954  D7BF               	goto	i2l1443
  3681  001956                     i2l1485:
  3682  001956  0E08               	movlw	8
  3683  001958  D7C1               	goto	L13
  3684  00195A                     i2l1487:
  3685  00195A  5031               	movf	_LMotorCounter,w,c
  3686                           
  3687                           ; Switch size 1, requested type "space"
  3688                           ; Number of cases is 4, Range of values is 1 to 8
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte           13     7 (average)
  3692                           ;	Chosen strategy is simple_byte
  3693  00195C  0A01               	xorlw	1	; case 1
  3694  00195E  B4D8               	btfsc	status,2,c
  3695  001960  D7FA               	goto	i2l1485
  3696  001962  0A03               	xorlw	3	; case 2
  3697  001964  B4D8               	btfsc	status,2,c
  3698  001966  D7F3               	goto	i2l1479
  3699  001968  0A06               	xorlw	6	; case 4
  3700  00196A  B4D8               	btfsc	status,2,c
  3701  00196C  D7B1               	goto	i2l1441
  3702  00196E  0A0C               	xorlw	12	; case 8
  3703  001970  B4D8               	btfsc	status,2,c
  3704  001972  D7B0               	goto	i2l1443
  3705  001974  D7F0               	goto	i2l1485
  3706                           
  3707                           ;interrupts.c: 349: } else if(side == RIGHT && reverse == 0)
  3708  001976  D01C               	goto	i2l164
  3709  001978                     i2l1489:
  3710  001978  0449               	decf	motorCounterUpdate@side,w,c
  3711  00197A  A4D8               	btfss	status,2,c
  3712  00197C  D019               	goto	i2l164
  3713  00197E  5048               	movf	motorCounterUpdate@reverse,w,c
  3714  001980  B4D8               	btfsc	status,2,c
  3715  001982  D009               	goto	i2l1505
  3716  001984  D015               	goto	i2l164
  3717                           
  3718                           ;interrupts.c: 350: {
  3719                           ;interrupts.c: 351: switch(RMotorCounter)
  3720  001986  D007               	goto	i2l1505
  3721                           
  3722                           ;interrupts.c: 352: {
  3723                           ;interrupts.c: 353: case 0b00000001: RMotorCounter = 0b00000010; break;
  3724  001988  D7C5               	goto	i2l1463
  3725                           
  3726                           ;interrupts.c: 354: case 0b00000010: RMotorCounter = 0b00000100; break;
  3727  00198A  D7C6               	goto	i2l1465
  3728                           
  3729                           ;interrupts.c: 355: case 0b00000100: RMotorCounter = 0b00001000; break;
  3730  00198C  D7BF               	goto	i2l1459
  3731                           
  3732                           ;interrupts.c: 356: case 0b00001000: RMotorCounter = 0b00000001; break;
  3733  00198E  D7C0               	goto	i2l1461
  3734  001990                     L21:
  3735  001990  6E32               	movwf	_RMotorCounter,c
  3736  001992  D00E               	goto	i2l164
  3737                           
  3738                           ;interrupts.c: 357: default: RMotorCounter = 0b00000001;
  3739  001994  D7BD               	goto	i2l1461
  3740  001996                     i2l1505:
  3741  001996  5032               	movf	_RMotorCounter,w,c
  3742                           
  3743                           ; Switch size 1, requested type "space"
  3744                           ; Number of cases is 4, Range of values is 1 to 8
  3745                           ; switch strategies available:
  3746                           ; Name         Instructions Cycles
  3747                           ; simple_byte           13     7 (average)
  3748                           ;	Chosen strategy is simple_byte
  3749  001998  0A01               	xorlw	1	; case 1
  3750  00199A  B4D8               	btfsc	status,2,c
  3751  00199C  D7BB               	goto	i2l1463
  3752  00199E  0A03               	xorlw	3	; case 2
  3753  0019A0  B4D8               	btfsc	status,2,c
  3754  0019A2  D7BA               	goto	i2l1465
  3755  0019A4  0A06               	xorlw	6	; case 4
  3756  0019A6  B4D8               	btfsc	status,2,c
  3757  0019A8  D7B1               	goto	i2l1459
  3758  0019AA  0A0C               	xorlw	12	; case 8
  3759  0019AC  D7B1               	goto	i2l1461
  3760  0019AE  D000               	goto	i2l164
  3761  0019B0                     i2l164:
  3762  0019B0  0012               	return		;funcret
  3763  0019B2                     __end_of_motorCounterUpdate:
  3764                           	opt stack 0
  3765                           pclatu	equ	0xFFB
  3766                           pclath	equ	0xFFA
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           intcon2	equ	0xFF1
  3775                           postinc0	equ	0xFEE
  3776                           fsr0h	equ	0xFEA
  3777                           fsr0l	equ	0xFE9
  3778                           wreg	equ	0xFE8
  3779                           fsr1h	equ	0xFE2
  3780                           fsr1l	equ	0xFE1
  3781                           bsr	equ	0xFE0
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           fsr2h	equ	0xFDA
  3785                           fsr2l	equ	0xFD9
  3786                           status	equ	0xFD8
  3787                           
  3788 ;; *************** function _KController *****************
  3789 ;; Defined at:
  3790 ;;		line 382 in file "interrupts.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;		None               void
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_high_isr
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text20
  3818  001A60                     __ptext20:
  3819                           	opt stack 0
  3820  001A60                     _KController:
  3821                           	opt stack 25
  3822                           
  3823                           ;interrupts.c: 393: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  3824                           
  3825                           ;incstack = 0
  3826  001A60  BE06               	btfsc	_sensorValue+5,7,c
  3827  001A62  D00E               	goto	i2l1097
  3828  001A64  5006               	movf	_sensorValue+5,w,c
  3829  001A66  E104               	bnz	i2u26_40
  3830  001A68  0E96               	movlw	150
  3831  001A6A  5C05               	subwf	_sensorValue+4,w,c
  3832  001A6C  A0D8               	btfss	status,0,c
  3833  001A6E  D008               	goto	i2l1097
  3834  001A70                     i2u26_40:
  3835  001A70  BE08               	btfsc	_sensorValue+7,7,c
  3836  001A72  D006               	goto	i2l1097
  3837  001A74  5008               	movf	_sensorValue+7,w,c
  3838  001A76  E11E               	bnz	i2l183
  3839  001A78  0E96               	movlw	150
  3840  001A7A  5C07               	subwf	_sensorValue+6,w,c
  3841  001A7C  B0D8               	btfsc	status,0,c
  3842  001A7E  D01A               	goto	i2l183
  3843  001A80                     i2l1097:
  3844                           
  3845                           ;interrupts.c: 394: {
  3846                           ;interrupts.c: 396: if(sensorValue[0] > 400)
  3847  001A80  BE02               	btfsc	_sensorValue+1,7,c
  3848  001A82  D00B               	goto	i2l1101
  3849  001A84  0E91               	movlw	145
  3850  001A86  5C01               	subwf	_sensorValue,w,c
  3851  001A88  0E01               	movlw	1
  3852  001A8A  5802               	subwfb	_sensorValue+1,w,c
  3853  001A8C  A0D8               	btfss	status,0,c
  3854  001A8E  D005               	goto	i2l1101
  3855                           
  3856                           ;interrupts.c: 397: {
  3857                           ;interrupts.c: 398: controlToRight = 30;
  3858  001A90  0E00               	movlw	0
  3859  001A92  6E26               	movwf	_controlToRight+1,c
  3860  001A94  0E1E               	movlw	30
  3861  001A96  6E25               	movwf	_controlToRight,c
  3862                           
  3863                           ;interrupts.c: 399: } else if(sensorValue[1] > 400)
  3864  001A98  D00D               	goto	i2l183
  3865  001A9A                     i2l1101:
  3866  001A9A  BE04               	btfsc	_sensorValue+3,7,c
  3867  001A9C  D00B               	goto	i2l183
  3868  001A9E  0E91               	movlw	145
  3869  001AA0  5C03               	subwf	_sensorValue+2,w,c
  3870  001AA2  0E01               	movlw	1
  3871  001AA4  5804               	subwfb	_sensorValue+3,w,c
  3872  001AA6  A0D8               	btfss	status,0,c
  3873  001AA8  D005               	goto	i2l183
  3874                           
  3875                           ;interrupts.c: 400: {
  3876                           ;interrupts.c: 401: controlToLeft = 30;
  3877  001AAA  0E00               	movlw	0
  3878  001AAC  6E24               	movwf	_controlToLeft+1,c
  3879  001AAE  0E1E               	movlw	30
  3880  001AB0  6E23               	movwf	_controlToLeft,c
  3881  001AB2  D000               	goto	i2l183
  3882  001AB4                     i2l183:
  3883  001AB4  0012               	return		;funcret
  3884  001AB6                     __end_of_KController:
  3885                           	opt stack 0
  3886                           pclatu	equ	0xFFB
  3887                           pclath	equ	0xFFA
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon2	equ	0xFF1
  3896                           postinc0	equ	0xFEE
  3897                           fsr0h	equ	0xFEA
  3898                           fsr0l	equ	0xFE9
  3899                           wreg	equ	0xFE8
  3900                           fsr1h	equ	0xFE2
  3901                           fsr1l	equ	0xFE1
  3902                           bsr	equ	0xFE0
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           pclatu	equ	0xFFB
  3909                           pclath	equ	0xFFA
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           postinc0	equ	0xFEE
  3919                           fsr0h	equ	0xFEA
  3920                           fsr0l	equ	0xFE9
  3921                           wreg	equ	0xFE8
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           bsr	equ	0xFE0
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931                           	psect	rparam
  3932  0000                     pclatu	equ	0xFFB
  3933                           pclath	equ	0xFFA
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           intcon2	equ	0xFF1
  3942                           postinc0	equ	0xFEE
  3943                           fsr0h	equ	0xFEA
  3944                           fsr0l	equ	0xFE9
  3945                           wreg	equ	0xFE8
  3946                           fsr1h	equ	0xFE2
  3947                           fsr1l	equ	0xFE1
  3948                           bsr	equ	0xFE0
  3949                           postinc2	equ	0xFDE
  3950                           postdec2	equ	0xFDD
  3951                           fsr2h	equ	0xFDA
  3952                           fsr2l	equ	0xFD9
  3953                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      93
    BANK0           128    113     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _setCorrection->___awdiv
    _sensorUpdate->___wmul
    _sensorComputation->___awdiv
    _sensorComputation->___wmul
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_merge
    _high_isr->_rotate
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              4 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             22 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                              7 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                             34 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                             34 COMRAM     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              2 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              2 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                             34 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    3829
                                             20 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     940
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     918
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     71      79       5       94.5%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      5D       1       73.2%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6       6        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 01:35:50 2015

                  ___awdiv@sign 0081                              bsr 000FE0             ___wmul@multiplicand 005B  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l320 1BC8                             l321 1BD0                             l314 1712  
                           l307 16AC                             l324 1BFC                             l325 1C04  
                           l328 1C5E                             l521 1A5E                             l293 1CA6  
                           l279 1AE2                             l288 1C92                    __CFG_CPB$OFF 000000  
                           _MAX 1BD2                             _MIN 1B9E                    __CFG_CPD$OFF 000000  
    __end_of_AlgorithmSelection 1CA8                    _rotatingSide 0036                             wreg 000FE8  
                          ?_MAX 0082                            ?_MIN 0082                            MAX@a 0082  
                          MAX@b 0084                            MIN@a 0082                            MIN@b 0084  
                  __CFG_WDT$OFF 000000                            l1059 1CA0                            l1841 19FA  
                          l1843 1A06                            l1835 19E0                            l1923 16BC  
                          l1861 1A54                            l1853 1A30                            l1845 1A0E  
                          l1829 19CC                            l1933 16FA                            l1943 17A8  
                          l1927 16D6                            l1857 1A3E                            l1929 16E0  
                          l1867 1ACC                            l1883 1456                            l1947 17B2  
                          l1893 15E0                            l1877 1432                            l1973 1C28  
                          l1887 14BE                            l1897 1638                            l1889 15CA  
                          l1899 1696                            _LATC 000F8B                            u1700 1454  
                          u1817 1AD2                            u1690 1430                            u1785 1720  
                          i2l90 13B4                            i2l95 1128                            _main 1C06  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            fsr2l 000FD9  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00A2                   __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 0087  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                 __end_of_InitApp 1B6A  
         __end_of_setCorrection 18BE                           ??_MAX 0086                           ??_MIN 0086  
    __size_of_sensorComputation 02A0                           ?_main 0037                 __end_of___awdiv 1A60  
                         _T0CON 000FD5                 ___awdiv@divisor 005B                           i2l201 1C88  
                         i2l123 13D4                           i2l164 19B0                           i2l183 1AB4  
                         i2l167 1CD2                 ___awdiv@counter 0080                           _TRISC 000F94  
           _ConfigureOscillator 1CD4                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                   _controlToLeft 0023  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                           _delay 1AB6                           _merge 1CC4  
               __end_of_forward 1C8A                 __end_of_low_isr 00A2                           tablat 000FF5  
                         status 000FD8                   _TurnLeftAgain 001B            ?_ConfigureOscillator 0037  
             _ControllerCounter 0009                 __initialization 1B6A                    __end_of_main 1C34  
                        ??_main 005D                   __activetblptr 000002                          ?_delay 0059  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0048                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0059                          i2l1101 1A9A                          i2l1097 1A80  
                        i2l1505 1996                          i2l1441 18D0                          i2l1443 18D4  
                        i2l1451 18E2                          i2l1461 1910                          i2l1453 18FC  
                        i2l1701 11F0                          i2l1463 1914                          i2l1471 193C  
                        i2l1703 11F6                          i2l1465 1918                          i2l1561 1B12  
                        i2l1721 1278                          i2l1713 124A                          i2l1633 1056  
                        i2l1459 190C                          i2l1563 1B28                          i2l1723 1282  
                        i2l1715 125A                          i2l1651 10BA                          i2l1635 1064  
                        i2l1485 1956                          i2l1469 191E                          i2l1725 1288  
                        i2l1661 10F2                          i2l1645 109A                          i2l1653 10C0  
                        i2l1637 1076                          i2l1479 194E                          i2l1487 195A  
                        i2l1751 1338                          i2l1735 12C6                          i2l1727 1298  
                        i2l1663 1102                          i2l1489 1978                          i2l1753 1348  
                        i2l1737 12D0                          i2l1673 113A                          i2l1657 10D4  
                        i2l1771 13AA                          i2l1763 1382                          i2l1755 1358  
                        i2l1739 12D6                          i2l1683 1184                          i2l1667 1112  
                        i2l1757 1368                          i2l1749 1322                          i2l1693 11C8  
                        i2l1677 1152                          i2l1759 1378                          i2l1687 1194  
                        i2l1679 116C                          i2l1775 13CC                          i2l1689 11B0  
                        i2l1699 11E6                          _INTCON 000FF2                          _OSCCON 000FD3  
                     ??_InitApp 005C           ??_ConfigureOscillator 0059                     merge@merged 004A  
                __CFG_XINST$OFF 000000              sensorComputation@i 0094              sensorComputation@j 0092  
                _controlToRight 0025                __end_of_high_isr 140E                          ___wmul 1C34  
                     ??___awdiv 005D                  __CFG_STVREN$ON 000000                          _errorD 0029  
                        _errorP 002B                          delay@x 0080                          clear_0 1B70  
                        clear_1 1B7C                ___awdiv@quotient 0082                          _rotate 1AF4  
            __size_of_Reversing 001C                    __pdataCOMRAM 005D                       ??_forward 004A  
                  __mediumconst 0000                       ??_low_isr 0037                  _ReverseCounter 0015  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                    __accesstop 0080         __end_of__initialization 1B94                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                    ?_KController 0037                  __pcstackCOMRAM 0037  
                 __end_of_delay 1AF4                      _TurnedLeft 001F                 moveMouse@action 0048  
                 __end_of_merge 1CD4      __end_of_motorCounterUpdate 19B2                  _ignoreControll 005D  
                _ForwardCounter 000D                         ??_delay 005B                         ??_merge 0049  
                    __pbssBANK0 00F1              _AlgorithmSelection 1C8A                    _LTurnCounter 000F  
             __end_of_Reversing 1CC4                      _delay_time 0027               _MotorDelayCounter 0011  
           ?_AlgorithmSelection 0037            setCorrection@sideAvg 0088                         ?___wmul 0059  
            __size_of_moveMouse 0008                         ?_rotate 0037                         _INTCON2 000FF1  
                       i2u26_40 1A70                         _OSCTUNE 000F9B            ??_AlgorithmSelection 0059  
                     ?_high_isr 0037                         _Deadend 000B                   _LMotorCounter 0031  
                       _InitApp 1B30                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 19B2                 __size_of___wmul 002C                         _deadEnd 0034  
                  __psmallconst 1000                         __pcinit 1B6A                         __ramtop 1000  
                       __ptext0 1C06                         __ptext1 17C8                         __ptext2 16AE  
                       __ptext3 140E                         __ptext4 1C34                         __ptext5 19B2  
                       __ptext6 1B9E                         __ptext7 1BD2                         __ptext8 1B30  
                       __ptext9 1AB6                 __size_of_rotate 003C                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1C60                         delay@ms 0059  
                       _low_isr 0018                   ?_sensorUpdate 0037                      ??_high_isr 004B  
                __pintcode_body 1006          __size_of_setCorrection 00F6            end_of_initialization 1B94  
              _sensorCorrection 00F1               __end_of_moveMouse 1CE6                   __Lmediumconst 0000  
                       int_func 1006                      _justTurned 0035            __size_of_KController 0056  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                     _TRISBbits 000F93                       _TRISEbits 000F96                  ??_sensorUpdate 0096  
   __end_of_ConfigureOscillator 1CDE                      _totalError 002F                    _RTurnCounter 0013  
sensorComputation@getCorrection 0089                   _setCorrection 17C8                  __end_of___wmul 1C60  
                 __pidataCOMRAM 1CE6                     _TurnedRight 0021                  __end_of_rotate 1B30  
           start_initialization 1B6A                     __end_of_MAX 1C06                     __end_of_MIN 1BD2  
            _motorCounterUpdate 18BE                __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0048  
                    merge@right 0048                       _Reversing 1CA8                  ?_setCorrection 0037  
                      ??___wmul 005D                __CFG_LPT1OSC$OFF 000000                        ??_rotate 004A  
                _sensorLocation 1001            ??_motorCounterUpdate 0049                     __pbssCOMRAM 0001  
                 __pcstackBANK0 0080                       _TurnRight 001D       sensorUpdate@getCorrection 00EC  
        sensorUpdate@sensorTemp 009C               __size_of_high_isr 1406                        ?_InitApp 0037  
             __CFG_CCP2MX$PORTC 000000                      ?_Reversing 0037                       _algorithm 0033  
                     __pintcode 0008           setCorrection@frontAvg 0086          motorCounterUpdate@side 0049  
                      ?___awdiv 0059            __end_of_sensorUpdate 17C8          __end_of_sensorLocation 1005  
                   __pintcodelo 0018                     __smallconst 1000                        ?_forward 0037  
                      ?_low_isr 0037                       _oldErrorP 002D                  __size_of_delay 003E  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0080  
                     _moveMouse 1CDE                        i2u120_40 1088                        i2u121_40 10A8  
                      i2u122_40 10CE                        i2u123_40 10E2                        i2u140_40 121C  
                      i2u116_40 1048                        i2u141_40 122C                        i2u150_40 12F6  
                      i2u146_40 12A8                 ??_setCorrection 0084                        i2u139_40 120C  
                      i2u149_40 12E6                __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2  
             ___wmul@multiplier 0059                   _RMotorCounter 0032                      rotate@side 004A  
                 ??_KController 0048                      ?_moveMouse 0037                __size_of_InitApp 003A  
                      __Hrparam 0000                       merge@left 0049            sensorComputation@max 008C  
                      __Lrparam 0000            sensorComputation@min 008E            sensorComputation@sum 0090  
                   ??_Reversing 004A              __CFG_BOREN$SBORDIS 000000                __size_of___awdiv 00AE  
                      _TurnLeft 0019                __size_of_forward 002A                __size_of_low_isr 008A  
                      __ptext10 1C8A                        __ptext11 1CD4                        __ptext20 1A60  
                      __ptext14 1AF4                        __ptext15 1CDE                        __ptext16 1CC4  
                      __ptext17 1C60                        __ptext18 1CA8                        __ptext19 18BE  
                      _high_isr 0008                   __size_of_main 002E                   _RotateCounter 0017  
         __size_of_sensorUpdate 011A    __size_of_ConfigureOscillator 000A             __end_of_KController 1AB6  
             _sensorComputation 140E                      _INTCONbits 000FF2              ?_sensorComputation 0087  
                 sensorUpdate@i 00ED                   sensorUpdate@j 00EF                    _sensorUpdate 16AE  
                      intlevel1 0000                        intlevel2 0000             ??_sensorComputation 008A  
                   ??_moveMouse 0048       __end_of_sensorComputation 16AE                     _sensorValue 0001  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0048                     _KController 1A60  
