

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 01 18:36:54 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001CEE                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _controllerSteps
    43  001CEE  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _LATC	set	3979
    58  0000                     _OSCTUNE	set	3995
    59  0000                     _TRISBbits	set	3987
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISEbits	set	3990
    62  0000                     _ADCON0	set	4034
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON1	set	4033
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADRESH	set	4036
    67  0000                     _ADRESL	set	4035
    68  0000                     _OSCCON	set	4051
    69  0000                     _T0CON	set	4053
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001C12                     __pcinit:
    79                           	opt stack 0
    80  001C12                     start_initialization:
    81                           	opt stack 0
    82  001C12                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (55 bytes)
    86  001C12  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  001C16  0E37               	movlw	55
    88  001C18                     clear_0:
    89  001C18  6AEE               	clrf	postinc0,c
    90  001C1A  06E8               	decf	wreg,f,c
    91  001C1C  E1FD               	bnz	clear_0
    92                           
    93                           ; Initialize objects allocated to COMRAM (1 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  001C1E  0EEE               	movlw	low __pidataCOMRAM
    96  001C20  6EF6               	movwf	tblptrl,c
    97  001C22  0E1C               	movlw	high __pidataCOMRAM
    98  001C24  6EF7               	movwf	tblptrh,c
    99  001C26  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  001C28  6EF8               	movwf	tblptru,c
   101  001C2A  0009               	tblrd		*+	;fetch initializer
   102  001C2C  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   103  001C30                     end_of_initialization:
   104                           	opt stack 0
   105  001C30                     __end_of__initialization:
   106                           	opt stack 0
   107  001C30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  001C32  6EF8               	movwf	tblptru,c
   109  001C34  0100               	movlb	0
   110  001C36  EF1D  F00E         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000001                     _sensorCorrection:
   122                           	opt stack 0
   123  000001                     	ds	8
   124  000009                     _sensorValue:
   125                           	opt stack 0
   126  000009                     	ds	8
   127  000011                     _ControllerCounter:
   128                           	opt stack 0
   129  000011                     	ds	2
   130  000013                     _Deadend:
   131                           	opt stack 0
   132  000013                     	ds	2
   133  000015                     _ForwardCounter:
   134                           	opt stack 0
   135  000015                     	ds	2
   136  000017                     _LTurnCounter:
   137                           	opt stack 0
   138  000017                     	ds	2
   139  000019                     _MotorDelayCounter:
   140                           	opt stack 0
   141  000019                     	ds	2
   142  00001B                     _RTurnCounter:
   143                           	opt stack 0
   144  00001B                     	ds	2
   145  00001D                     _ReverseCounter:
   146                           	opt stack 0
   147  00001D                     	ds	2
   148  00001F                     _RotateCounter:
   149                           	opt stack 0
   150  00001F                     	ds	2
   151  000021                     _TurnLeft:
   152                           	opt stack 0
   153  000021                     	ds	2
   154  000023                     _TurnRight:
   155                           	opt stack 0
   156  000023                     	ds	2
   157  000025                     _TurnedLeft:
   158                           	opt stack 0
   159  000025                     	ds	2
   160  000027                     _TurnedRight:
   161                           	opt stack 0
   162  000027                     	ds	2
   163  000029                     _delay_time:
   164                           	opt stack 0
   165  000029                     	ds	2
   166  00002B                     _errorD:
   167                           	opt stack 0
   168  00002B                     	ds	2
   169  00002D                     _errorP:
   170                           	opt stack 0
   171  00002D                     	ds	2
   172  00002F                     _oldErrorP:
   173                           	opt stack 0
   174  00002F                     	ds	2
   175  000031                     _totalError:
   176                           	opt stack 0
   177  000031                     	ds	2
   178  000033                     _LMotorCounter:
   179                           	opt stack 0
   180  000033                     	ds	1
   181  000034                     _RMotorCounter:
   182                           	opt stack 0
   183  000034                     	ds	1
   184  000035                     _algorithm:
   185                           	opt stack 0
   186  000035                     	ds	1
   187  000036                     _justTurned:
   188                           	opt stack 0
   189  000036                     	ds	1
   190  000037                     _rotatingSide:
   191                           	opt stack 0
   192  000037                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00005F                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00005F                     _controllerSteps:
   204                           	opt stack 0
   205  00005F                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000080                     __pcstackBANK0:
   215                           	opt stack 0
   216  000080                     ?___wmul:
   217                           	opt stack 0
   218  000080                     ?___awdiv:
   219                           	opt stack 0
   220  000080                     delay@ms:
   221                           	opt stack 0
   222  000080                     ___wmul@multiplier:
   223                           	opt stack 0
   224  000080                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_delay:
   230  000082                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000082                     ___awdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000082                     	ds	1
   237  000083                     delay@x:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000083                     	ds	1
   242  000084                     ___awdiv@counter:
   243                           	opt stack 0
   244  000084                     ___wmul@product:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000084                     	ds	1
   249  000085                     ___awdiv@sign:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  000085                     	ds	1
   254  000086                     ?_MIN:
   255                           	opt stack 0
   256  000086                     ?_MAX:
   257                           	opt stack 0
   258  000086                     MIN@a:
   259                           	opt stack 0
   260  000086                     MAX@a:
   261                           	opt stack 0
   262  000086                     ___awdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000086                     	ds	2
   267  000088                     ??_setCorrection:
   268  000088                     MIN@b:
   269                           	opt stack 0
   270  000088                     MAX@b:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  000088                     	ds	2
   275  00008A                     ??_MIN:
   276  00008A                     ??_MAX:
   277  00008A                     setCorrection@sideAvg:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00008A                     	ds	1
   282  00008B                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00008B                     	ds	1
   287  00008C                     setCorrection@frontAvg:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00008C                     	ds	1
   292  00008D                     sensorComputation@getCorrection:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00008D                     	ds	1
   297  00008E                     ??_sensorComputation:
   298                           
   299                           ; 0 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@max:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@min:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@sum:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     sensorComputation@j:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000096                     	ds	2
   321  000098                     sensorComputation@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x18
   325  000098                     	ds	2
   326  00009A                     ??_sensorUpdate:
   327                           
   328                           ; 0 bytes @ 0x1A
   329  00009A                     	ds	6
   330  0000A0                     sensorUpdate@sensorTemp:
   331                           	opt stack 0
   332                           
   333                           ; 80 bytes @ 0x20
   334  0000A0                     	ds	80
   335  0000F0                     sensorUpdate@getCorrection:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x70
   339  0000F0                     	ds	1
   340  0000F1                     sensorUpdate@i:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x71
   344  0000F1                     	ds	2
   345  0000F3                     sensorUpdate@j:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x73
   349  0000F3                     	ds	2
   350  0000F5                     tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           ; 0 bytes @ 0x75
   358                           
   359                           	psect	cstackCOMRAM
   360  000038                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000038                     ??_low_isr:
   363  000038                     
   364                           ; 0 bytes @ 0x0
   365  000038                     	ds	17
   366  000049                     ?_ABS:
   367                           	opt stack 0
   368  000049                     motorCounterUpdate@reverse:
   369                           	opt stack 0
   370  000049                     merge@right:
   371                           	opt stack 0
   372  000049                     moveMouse@action:
   373                           	opt stack 0
   374  000049                     ABS@x:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000049                     	ds	1
   379  00004A                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  00004A                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  00004A                     	ds	1
   386  00004B                     merge@merged:
   387                           	opt stack 0
   388  00004B                     rotate@side:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x13
   392  00004B                     	ds	1
   393  00004C                     ??_KController:
   394                           
   395                           ; 0 bytes @ 0x14
   396  00004C                     	ds	2
   397  00004E                     KController@correctTo:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x16
   401  00004E                     	ds	1
   402  00004F                     KController@diff:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x17
   406  00004F                     	ds	2
   407  000051                     ??_high_isr:
   408                           
   409                           ; 0 bytes @ 0x19
   410  000051                     	ds	14
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 41 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;		None               void
   430 ;; Registers used:
   431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;Total ram usage:        0 bytes
   442 ;; Hardware stack levels required when called:    7
   443 ;; This function calls:
   444 ;;		_ConfigureOscillator
   445 ;;		_InitApp
   446 ;;		_sensorUpdate
   447 ;;		_setCorrection
   448 ;; This function is called by:
   449 ;;		Startup code after reset
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text0
   454  001C3A                     __ptext0:
   455                           	opt stack 0
   456  001C3A                     _main:
   457                           	opt stack 24
   458                           
   459                           ;main.c: 44: ConfigureOscillator();
   460                           
   461                           ;incstack = 0
   462  001C3A  EC6E  F00E         	call	_ConfigureOscillator	;wreg free
   463                           
   464                           ;main.c: 47: InitApp();
   465  001C3E  EC7D  F00D         	call	_InitApp	;wreg free
   466                           
   467                           ;main.c: 48: sensorUpdate(1);
   468  001C42  0E01               	movlw	1
   469  001C44  ECE3  F00A         	call	_sensorUpdate
   470                           
   471                           ;main.c: 49: setCorrection();
   472  001C48  EC7A  F00C         	call	_setCorrection	;wreg free
   473                           
   474                           ;main.c: 50: INTCONbits.GIE = 1;
   475  001C4C  8EF2               	bsf	intcon,7,c	;volatile
   476  001C4E  D000               	goto	l2059
   477  001C50                     l2059:
   478                           
   479                           ;main.c: 52: {
   480                           ;main.c: 53: sensorUpdate(0);
   481  001C50  0E00               	movlw	0
   482  001C52  ECE3  F00A         	call	_sensorUpdate
   483  001C56  D7FC               	goto	l2059
   484  001C58  EF51  F000         	goto	start
   485  001C5C                     __end_of_main:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           intcon	equ	0xFF2
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495 ;; *************** function _setCorrection *****************
   496 ;; Defined at:
   497 ;;		line 125 in file "user.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  frontAvg        2   12[BANK0 ] int 
   502 ;;  sideAvg         2   10[BANK0 ] int 
   503 ;; Return value:  Size  Location     Type
   504 ;;		None               void
   505 ;; Registers used:
   506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;Total ram usage:        6 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    5
   519 ;; This function calls:
   520 ;;		___awdiv
   521 ;; This function is called by:
   522 ;;		_main
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text1
   527  0018F4                     __ptext1:
   528                           	opt stack 0
   529  0018F4                     _setCorrection:
   530                           	opt stack 25
   531                           
   532                           ;user.c: 127: int sideAvg,frontAvg;
   533                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   534                           
   535                           ;incstack = 0
   536  0018F4  5009               	movf	_sensorValue,w,c
   537  0018F6  240B               	addwf	_sensorValue+2,w,c
   538  0018F8  0100               	movlb	0	; () banked
   539  0018FA  6F80               	movwf	___awdiv@dividend& (0+255),b
   540  0018FC  500A               	movf	_sensorValue+1,w,c
   541  0018FE  200C               	addwfc	_sensorValue+3,w,c
   542  001900  0100               	movlb	0	; () banked
   543  001902  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   544  001904  0E00               	movlw	0
   545  001906  0100               	movlb	0	; () banked
   546  001908  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   547  00190A  0E02               	movlw	2
   548  00190C  6F82               	movwf	___awdiv@divisor& (0+255),b
   549  00190E  ECF3  F00C         	call	___awdiv	;wreg free
   550  001912  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   551  001916  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   552                           
   553                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   554  00191A  500F               	movf	_sensorValue+6,w,c
   555  00191C  240D               	addwf	_sensorValue+4,w,c
   556  00191E  0100               	movlb	0	; () banked
   557  001920  6F80               	movwf	___awdiv@dividend& (0+255),b
   558  001922  5010               	movf	_sensorValue+7,w,c
   559  001924  200E               	addwfc	_sensorValue+5,w,c
   560  001926  0100               	movlb	0	; () banked
   561  001928  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   562  00192A  0E00               	movlw	0
   563  00192C  0100               	movlb	0	; () banked
   564  00192E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   565  001930  0E02               	movlw	2
   566  001932  6F82               	movwf	___awdiv@divisor& (0+255),b
   567  001934  ECF3  F00C         	call	___awdiv	;wreg free
   568  001938  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   569  00193C  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   570                           
   571                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   572  001940  C009  F088         	movff	_sensorValue,??_setCorrection
   573  001944  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   574  001948  0100               	movlb	0	; () banked
   575  00194A  1F88               	comf	??_setCorrection& (0+255),f,b
   576  00194C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   577  00194E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   578  001950  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   579  001952  0100               	movlb	0	; () banked
   580  001954  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   581  001956  0100               	movlb	0	; () banked
   582  001958  2588               	addwf	??_setCorrection& (0+255),w,b
   583  00195A  6E01               	movwf	_sensorCorrection,c
   584  00195C  0100               	movlb	0	; () banked
   585  00195E  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   586  001960  0100               	movlb	0	; () banked
   587  001962  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   588  001964  6E02               	movwf	_sensorCorrection+1,c
   589                           
   590                           ; BSR set to: 0
   591                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   592  001966  EE20  F00B         	lfsr	2,_sensorValue+2
   593  00196A  CFDE F088          	movff	postinc2,??_setCorrection
   594  00196E  CFDD F089          	movff	postdec2,??_setCorrection+1
   595  001972  0100               	movlb	0	; () banked
   596  001974  1F88               	comf	??_setCorrection& (0+255),f,b
   597  001976  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   598  001978  4B88               	infsnz	??_setCorrection& (0+255),f,b
   599  00197A  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   600  00197C  0100               	movlb	0	; () banked
   601  00197E  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   602  001980  0100               	movlb	0	; () banked
   603  001982  2588               	addwf	??_setCorrection& (0+255),w,b
   604  001984  6E03               	movwf	_sensorCorrection+2,c
   605  001986  0100               	movlb	0	; () banked
   606  001988  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   607  00198A  0100               	movlb	0	; () banked
   608  00198C  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   609  00198E  6E04               	movwf	_sensorCorrection+3,c
   610                           
   611                           ; BSR set to: 0
   612                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   613  001990  EE20  F00D         	lfsr	2,_sensorValue+4
   614  001994  CFDE F088          	movff	postinc2,??_setCorrection
   615  001998  CFDD F089          	movff	postdec2,??_setCorrection+1
   616  00199C  0100               	movlb	0	; () banked
   617  00199E  1F88               	comf	??_setCorrection& (0+255),f,b
   618  0019A0  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   619  0019A2  4B88               	infsnz	??_setCorrection& (0+255),f,b
   620  0019A4  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   621  0019A6  0100               	movlb	0	; () banked
   622  0019A8  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   623  0019AA  0100               	movlb	0	; () banked
   624  0019AC  2588               	addwf	??_setCorrection& (0+255),w,b
   625  0019AE  6E05               	movwf	_sensorCorrection+4,c
   626  0019B0  0100               	movlb	0	; () banked
   627  0019B2  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   628  0019B4  0100               	movlb	0	; () banked
   629  0019B6  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   630  0019B8  6E06               	movwf	_sensorCorrection+5,c
   631                           
   632                           ; BSR set to: 0
   633                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   634  0019BA  EE20  F00F         	lfsr	2,_sensorValue+6
   635  0019BE  CFDE F088          	movff	postinc2,??_setCorrection
   636  0019C2  CFDD F089          	movff	postdec2,??_setCorrection+1
   637  0019C6  0100               	movlb	0	; () banked
   638  0019C8  1F88               	comf	??_setCorrection& (0+255),f,b
   639  0019CA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   640  0019CC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   641  0019CE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   642  0019D0  0100               	movlb	0	; () banked
   643  0019D2  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   644  0019D4  0100               	movlb	0	; () banked
   645  0019D6  2588               	addwf	??_setCorrection& (0+255),w,b
   646  0019D8  6E07               	movwf	_sensorCorrection+6,c
   647  0019DA  0100               	movlb	0	; () banked
   648  0019DC  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   649  0019DE  0100               	movlb	0	; () banked
   650  0019E0  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   651  0019E2  6E08               	movwf	_sensorCorrection+7,c
   652                           
   653                           ; BSR set to: 0
   654  0019E4  0012               	return		;funcret
   655  0019E6                     __end_of_setCorrection:
   656                           	opt stack 0
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           intcon	equ	0xFF2
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           postinc2	equ	0xFDE
   665                           postdec2	equ	0xFDD
   666                           
   667 ;; *************** function _sensorUpdate *****************
   668 ;; Defined at:
   669 ;;		line 161 in file "user.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  getCorrectio    1    wreg     unsigned char 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   674 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   675 ;;  j               2  115[BANK0 ] int 
   676 ;;  i               2  113[BANK0 ] int 
   677 ;; Return value:  Size  Location     Type
   678 ;;		None               void
   679 ;; Registers used:
   680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;Total ram usage:       91 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    6
   693 ;; This function calls:
   694 ;;		___wmul
   695 ;;		_sensorComputation
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text2
   702  0015C6                     __ptext2:
   703                           	opt stack 0
   704  0015C6                     _sensorUpdate:
   705                           	opt stack 24
   706                           
   707                           ; BSR set to: 0
   708                           ;incstack = 0
   709                           ;sensorUpdate@getCorrection stored from wreg
   710  0015C6  0100               	movlb	0	; () banked
   711  0015C8  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   712                           
   713                           ; BSR set to: 0
   714                           ;user.c: 163: int i,j;
   715                           ;user.c: 164: int sensorTemp[4][10];
   716                           ;user.c: 167: for(i = 0; i < 10; i++)
   717  0015CA  0E00               	movlw	0
   718  0015CC  0100               	movlb	0	; () banked
   719  0015CE  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   720  0015D0  0E00               	movlw	0
   721  0015D2  6FF1               	movwf	sensorUpdate@i& (0+255),b
   722  0015D4                     l2013:
   723                           
   724                           ; BSR set to: 0
   725  0015D4  0100               	movlb	0	; () banked
   726  0015D6  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   727  0015D8  D00A               	goto	l2017
   728  0015DA  0100               	movlb	0	; () banked
   729  0015DC  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   730  0015DE  E178               	bnz	l2037
   731  0015E0  0E0A               	movlw	10
   732  0015E2  0100               	movlb	0	; () banked
   733  0015E4  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   734  0015E6  B0D8               	btfsc	status,0,c
   735  0015E8  D073               	goto	l2037
   736  0015EA  D001               	goto	l2017
   737                           
   738                           ; BSR set to: 0
   739  0015EC  D071               	goto	l2037
   740  0015EE                     l2017:
   741                           
   742                           ; BSR set to: 0
   743                           ;user.c: 168: {
   744                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   745  0015EE  0E00               	movlw	0
   746  0015F0  0100               	movlb	0	; () banked
   747  0015F2  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   748  0015F4  0E00               	movlw	0
   749  0015F6  6FF3               	movwf	sensorUpdate@j& (0+255),b
   750  0015F8                     l2019:
   751                           
   752                           ; BSR set to: 0
   753  0015F8  0100               	movlb	0	; () banked
   754  0015FA  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   755  0015FC  D00A               	goto	l2023
   756  0015FE  0100               	movlb	0	; () banked
   757  001600  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   758  001602  E161               	bnz	l2033
   759  001604  0E04               	movlw	4
   760  001606  0100               	movlb	0	; () banked
   761  001608  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   762  00160A  B0D8               	btfsc	status,0,c
   763  00160C  D05C               	goto	l2033
   764  00160E  D001               	goto	l2023
   765                           
   766                           ; BSR set to: 0
   767  001610  D05A               	goto	l2033
   768  001612                     l2023:
   769                           
   770                           ; BSR set to: 0
   771                           ;user.c: 170: {
   772                           ;user.c: 171: ADCON0 = sensorLocation[j];
   773  001612  0E01               	movlw	low _sensorLocation
   774  001614  0100               	movlb	0	; () banked
   775  001616  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   776  001618  6EF6               	movwf	tblptrl,c
   777  00161A  0E10               	movlw	high _sensorLocation
   778  00161C  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   779  00161E  6EF7               	movwf	tblptrh,c
   780  001620                     	if	0	;There are less than 3 active tblptr bytes
   781  001620                     	endif
   782  001620  0008               	tblrd		*
   783  001622  CFF5 FFC2          	movff	tablat,4034	;volatile
   784                           
   785                           ; BSR set to: 0
   786                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   787  001626  82C2               	bsf	4034,1,c	;volatile
   788                           
   789                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   790  001628  D000               	goto	l314
   791  00162A                     l314:
   792                           
   793                           ; BSR set to: 0
   794  00162A  B2C2               	btfsc	4034,1,c	;volatile
   795  00162C  D7FE               	goto	l314
   796                           
   797                           ; BSR set to: 0
   798                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   799                           
   800                           ; BSR set to: 0
   801  00162E  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   802  001632  0E06               	movlw	6
   803  001634  0100               	movlb	0	; () banked
   804  001636  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   805  001638                     u1755:
   806  001638  0100               	movlb	0	; () banked
   807  00163A  90D8               	bcf	status,0,c
   808  00163C  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   809  00163E  0100               	movlb	0	; () banked
   810  001640  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   811  001642  D7FA               	goto	u1755
   812  001644  0100               	movlb	0	; () banked
   813  001646  519A               	movf	??_sensorUpdate& (0+255),w,b
   814  001648  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   815  00164C  0100               	movlb	0	; () banked
   816  00164E  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   817  001650  0100               	movlb	0	; () banked
   818  001652  90D8               	bcf	status,0,c
   819  001654  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   820  001656  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   821  001658  0100               	movlb	0	; () banked
   822  00165A  90D8               	bcf	status,0,c
   823  00165C  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   824  00165E  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   825  001660  0100               	movlb	0	; () banked
   826  001662  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   827  001664  0E00               	movlw	0
   828  001666  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   829  001668  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   830  00166C  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   831  001670  0E00               	movlw	0
   832  001672  0100               	movlb	0	; () banked
   833  001674  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   834  001676  0E14               	movlw	20
   835  001678  6F82               	movwf	___wmul@multiplicand& (0+255),b
   836  00167A  ECB9  F00D         	call	___wmul	;wreg free
   837  00167E  0EA0               	movlw	low sensorUpdate@sensorTemp
   838  001680  0100               	movlb	0	; () banked
   839  001682  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   840  001684  0E00               	movlw	high sensorUpdate@sensorTemp
   841  001686  0100               	movlb	0	; () banked
   842  001688  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   843  00168A  0100               	movlb	0	; () banked
   844  00168C  5180               	movf	?___wmul& (0+255),w,b
   845  00168E  0100               	movlb	0	; () banked
   846  001690  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   847  001692  0100               	movlb	0	; () banked
   848  001694  5181               	movf	(?___wmul+1)& (0+255),w,b
   849  001696  0100               	movlb	0	; () banked
   850  001698  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   851  00169A  90D8               	bcf	status,0,c
   852  00169C  0100               	movlb	0	; () banked
   853  00169E  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   854  0016A0  6ED9               	movwf	fsr2l,c
   855  0016A2  0100               	movlb	0	; () banked
   856  0016A4  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   857  0016A6  6EDA               	movwf	fsr2h,c
   858  0016A8  0100               	movlb	0	; () banked
   859  0016AA  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   860  0016AC  26D9               	addwf	fsr2l,f,c
   861  0016AE  0100               	movlb	0	; () banked
   862  0016B0  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   863  0016B2  22DA               	addwfc	fsr2h,f,c
   864  0016B4  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   865  0016B8  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   866                           
   867                           ; BSR set to: 0
   868  0016BC  0100               	movlb	0	; () banked
   869  0016BE  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   870  0016C0  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   871  0016C2  D79A               	goto	l2019
   872                           
   873                           ; BSR set to: 0
   874  0016C4  D000               	goto	l2033
   875  0016C6                     l2033:
   876                           
   877                           ; BSR set to: 0
   878  0016C6  0100               	movlb	0	; () banked
   879  0016C8  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   880  0016CA  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   881  0016CC  D783               	goto	l2013
   882                           
   883                           ; BSR set to: 0
   884  0016CE  D000               	goto	l2037
   885  0016D0                     l2037:
   886                           
   887                           ; BSR set to: 0
   888                           ;user.c: 176: }
   889                           ;user.c: 177: }
   890                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   891  0016D0  0EA0               	movlw	low sensorUpdate@sensorTemp
   892  0016D2  0100               	movlb	0	; () banked
   893  0016D4  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   894  0016D6  0E00               	movlw	high sensorUpdate@sensorTemp
   895  0016D8  0100               	movlb	0	; () banked
   896  0016DA  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   897  0016DC  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   898  0016E0  EC81  F009         	call	_sensorComputation	;wreg free
   899  0016E4  0012               	return		;funcret
   900  0016E6                     __end_of_sensorUpdate:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           intcon	equ	0xFF2
   907                           postinc0	equ	0xFEE
   908                           wreg	equ	0xFE8
   909                           postinc2	equ	0xFDE
   910                           postdec2	equ	0xFDD
   911                           fsr2h	equ	0xFDA
   912                           fsr2l	equ	0xFD9
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _sensorComputation *****************
   916 ;; Defined at:
   917 ;;		line 137 in file "user.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   920 ;;		 -> sensorUpdate@sensorTemp(80), 
   921 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  i               2   24[BANK0 ] int 
   924 ;;  j               2   22[BANK0 ] int 
   925 ;;  sum             2   20[BANK0 ] int 
   926 ;;  min             2   18[BANK0 ] int 
   927 ;;  max             2   16[BANK0 ] int 
   928 ;; Return value:  Size  Location     Type
   929 ;;		None               void
   930 ;; Registers used:
   931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   937 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;Total ram usage:       15 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    5
   944 ;; This function calls:
   945 ;;		_MAX
   946 ;;		_MIN
   947 ;;		___awdiv
   948 ;;		___wmul
   949 ;; This function is called by:
   950 ;;		_sensorUpdate
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text3
   955  001302                     __ptext3:
   956                           	opt stack 0
   957  001302                     _sensorComputation:
   958                           	opt stack 24
   959                           
   960                           ;user.c: 139: int max,min,i,j,sum;
   961                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   962                           
   963                           ;incstack = 0
   964  001302  0E00               	movlw	0
   965  001304  0100               	movlb	0	; () banked
   966  001306  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   967  001308  0E00               	movlw	0
   968  00130A  6F98               	movwf	sensorComputation@i& (0+255),b
   969                           
   970                           ; BSR set to: 0
   971  00130C  0100               	movlb	0	; () banked
   972  00130E  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   973  001310  D00A               	goto	l1965
   974  001312  0100               	movlb	0	; () banked
   975  001314  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   976  001316  E106               	bnz	u1660
   977  001318  0E04               	movlw	4
   978  00131A  0100               	movlb	0	; () banked
   979  00131C  5D98               	subwf	sensorComputation@i& (0+255),w,b
   980  00131E  B0D8               	btfsc	status,0,c
   981  001320  D151               	goto	l307
   982  001322  D001               	goto	l1965
   983  001324                     u1660:
   984                           
   985                           ; BSR set to: 0
   986  001324  D14F               	goto	l307
   987  001326                     l1965:
   988                           
   989                           ; BSR set to: 0
   990                           ;user.c: 141: {
   991                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
   992  001326  0E00               	movlw	0
   993  001328  0100               	movlb	0	; () banked
   994  00132A  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
   995  00132C  0E00               	movlw	0
   996  00132E  6F96               	movwf	sensorComputation@j& (0+255),b
   997                           
   998                           ; BSR set to: 0
   999  001330  0100               	movlb	0	; () banked
  1000  001332  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1001  001334  D00A               	goto	l1971
  1002  001336  0100               	movlb	0	; () banked
  1003  001338  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1004  00133A  E106               	bnz	u1670
  1005  00133C  0E0A               	movlw	10
  1006  00133E  0100               	movlb	0	; () banked
  1007  001340  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1008  001342  B0D8               	btfsc	status,0,c
  1009  001344  D0D3               	goto	l1981
  1010  001346  D001               	goto	l1971
  1011  001348                     u1670:
  1012                           
  1013                           ; BSR set to: 0
  1014  001348  D0D1               	goto	l1981
  1015  00134A                     l1971:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;user.c: 143: {
  1019                           ;user.c: 144: if(j == 0)
  1020  00134A  0100               	movlb	0	; () banked
  1021  00134C  5196               	movf	sensorComputation@j& (0+255),w,b
  1022  00134E  0100               	movlb	0	; () banked
  1023  001350  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1024  001352  A4D8               	btfss	status,2,c
  1025  001354  D031               	goto	l1975
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;user.c: 145: {
  1029                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1030  001356  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1031  00135A  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1032  00135E  0E00               	movlw	0
  1033  001360  0100               	movlb	0	; () banked
  1034  001362  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1035  001364  0E14               	movlw	20
  1036  001366  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1037  001368  ECB9  F00D         	call	___wmul	;wreg free
  1038  00136C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1039  001370  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1040  001374  0100               	movlb	0	; () banked
  1041  001376  5180               	movf	?___wmul& (0+255),w,b
  1042  001378  0100               	movlb	0	; () banked
  1043  00137A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1044  00137C  0100               	movlb	0	; () banked
  1045  00137E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1046  001380  0100               	movlb	0	; () banked
  1047  001382  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1048  001384  90D8               	bcf	status,0,c
  1049  001386  0100               	movlb	0	; () banked
  1050  001388  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1051  00138A  6ED9               	movwf	fsr2l,c
  1052  00138C  0100               	movlb	0	; () banked
  1053  00138E  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1054  001390  6EDA               	movwf	fsr2h,c
  1055  001392  0100               	movlb	0	; () banked
  1056  001394  518E               	movf	??_sensorComputation& (0+255),w,b
  1057  001396  26D9               	addwf	fsr2l,f,c
  1058  001398  0100               	movlb	0	; () banked
  1059  00139A  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1060  00139C  22DA               	addwfc	fsr2h,f,c
  1061  00139E  CFDE F090          	movff	postinc2,sensorComputation@max
  1062  0013A2  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1063  0013A6  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1064  0013AA  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1065  0013AE  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1066  0013B2  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1067                           
  1068                           ;user.c: 147: continue;
  1069  0013B6  D08F               	goto	l1977
  1070  0013B8                     l1975:
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;user.c: 148: }
  1074                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1075  0013B8  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1076  0013BC  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1077  0013C0  0E00               	movlw	0
  1078  0013C2  0100               	movlb	0	; () banked
  1079  0013C4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1080  0013C6  0E14               	movlw	20
  1081  0013C8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1082  0013CA  ECB9  F00D         	call	___wmul	;wreg free
  1083  0013CE  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1084  0013D2  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1085  0013D6  0100               	movlb	0	; () banked
  1086  0013D8  5180               	movf	?___wmul& (0+255),w,b
  1087  0013DA  0100               	movlb	0	; () banked
  1088  0013DC  278E               	addwf	??_sensorComputation& (0+255),f,b
  1089  0013DE  0100               	movlb	0	; () banked
  1090  0013E0  5181               	movf	(?___wmul+1)& (0+255),w,b
  1091  0013E2  0100               	movlb	0	; () banked
  1092  0013E4  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1093  0013E6  90D8               	bcf	status,0,c
  1094  0013E8  0100               	movlb	0	; () banked
  1095  0013EA  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1096  0013EC  6ED9               	movwf	fsr2l,c
  1097  0013EE  0100               	movlb	0	; () banked
  1098  0013F0  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1099  0013F2  6EDA               	movwf	fsr2h,c
  1100  0013F4  0100               	movlb	0	; () banked
  1101  0013F6  518E               	movf	??_sensorComputation& (0+255),w,b
  1102  0013F8  26D9               	addwf	fsr2l,f,c
  1103  0013FA  0100               	movlb	0	; () banked
  1104  0013FC  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1105  0013FE  22DA               	addwfc	fsr2h,f,c
  1106  001400  CFDE F086          	movff	postinc2,MIN@a
  1107  001404  CFDD F087          	movff	postdec2,MIN@a+1
  1108  001408  C092  F088         	movff	sensorComputation@min,MIN@b
  1109  00140C  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1110  001410  ECD5  F00D         	call	_MIN	;wreg free
  1111  001414  C086  F092         	movff	?_MIN,sensorComputation@min
  1112  001418  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1113                           
  1114                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1115  00141C  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1116  001420  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1117  001424  0E00               	movlw	0
  1118  001426  0100               	movlb	0	; () banked
  1119  001428  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1120  00142A  0E14               	movlw	20
  1121  00142C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1122  00142E  ECB9  F00D         	call	___wmul	;wreg free
  1123  001432  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1124  001436  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1125  00143A  0100               	movlb	0	; () banked
  1126  00143C  5180               	movf	?___wmul& (0+255),w,b
  1127  00143E  0100               	movlb	0	; () banked
  1128  001440  278E               	addwf	??_sensorComputation& (0+255),f,b
  1129  001442  0100               	movlb	0	; () banked
  1130  001444  5181               	movf	(?___wmul+1)& (0+255),w,b
  1131  001446  0100               	movlb	0	; () banked
  1132  001448  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1133  00144A  90D8               	bcf	status,0,c
  1134  00144C  0100               	movlb	0	; () banked
  1135  00144E  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1136  001450  6ED9               	movwf	fsr2l,c
  1137  001452  0100               	movlb	0	; () banked
  1138  001454  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1139  001456  6EDA               	movwf	fsr2h,c
  1140  001458  0100               	movlb	0	; () banked
  1141  00145A  518E               	movf	??_sensorComputation& (0+255),w,b
  1142  00145C  26D9               	addwf	fsr2l,f,c
  1143  00145E  0100               	movlb	0	; () banked
  1144  001460  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1145  001462  22DA               	addwfc	fsr2h,f,c
  1146  001464  CFDE F086          	movff	postinc2,MAX@a
  1147  001468  CFDD F087          	movff	postdec2,MAX@a+1
  1148  00146C  C090  F088         	movff	sensorComputation@max,MAX@b
  1149  001470  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1150  001474  ECEF  F00D         	call	_MAX	;wreg free
  1151  001478  C086  F090         	movff	?_MAX,sensorComputation@max
  1152  00147C  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1153                           
  1154                           ;user.c: 151: sum += sensorTemp[i][j];
  1155  001480  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1156  001484  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1157  001488  0E00               	movlw	0
  1158  00148A  0100               	movlb	0	; () banked
  1159  00148C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1160  00148E  0E14               	movlw	20
  1161  001490  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1162  001492  ECB9  F00D         	call	___wmul	;wreg free
  1163  001496  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1164  00149A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1165  00149E  0100               	movlb	0	; () banked
  1166  0014A0  5180               	movf	?___wmul& (0+255),w,b
  1167  0014A2  0100               	movlb	0	; () banked
  1168  0014A4  278E               	addwf	??_sensorComputation& (0+255),f,b
  1169  0014A6  0100               	movlb	0	; () banked
  1170  0014A8  5181               	movf	(?___wmul+1)& (0+255),w,b
  1171  0014AA  0100               	movlb	0	; () banked
  1172  0014AC  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1173  0014AE  90D8               	bcf	status,0,c
  1174  0014B0  0100               	movlb	0	; () banked
  1175  0014B2  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1176  0014B4  6ED9               	movwf	fsr2l,c
  1177  0014B6  0100               	movlb	0	; () banked
  1178  0014B8  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1179  0014BA  6EDA               	movwf	fsr2h,c
  1180  0014BC  0100               	movlb	0	; () banked
  1181  0014BE  518E               	movf	??_sensorComputation& (0+255),w,b
  1182  0014C0  26D9               	addwf	fsr2l,f,c
  1183  0014C2  0100               	movlb	0	; () banked
  1184  0014C4  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1185  0014C6  22DA               	addwfc	fsr2h,f,c
  1186  0014C8  50DE               	movf	postinc2,w,c
  1187  0014CA  0100               	movlb	0	; () banked
  1188  0014CC  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1189  0014CE  50DD               	movf	postdec2,w,c
  1190  0014D0  0100               	movlb	0	; () banked
  1191  0014D2  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1192  0014D4  D000               	goto	l1977
  1193  0014D6                     l1977:
  1194                           
  1195                           ; BSR set to: 0
  1196  0014D6  0100               	movlb	0	; () banked
  1197  0014D8  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1198  0014DA  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1199                           
  1200                           ; BSR set to: 0
  1201  0014DC  0100               	movlb	0	; () banked
  1202  0014DE  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1203  0014E0  D734               	goto	l1971
  1204  0014E2  0100               	movlb	0	; () banked
  1205  0014E4  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1206  0014E6  E102               	bnz	l1981
  1207  0014E8  D729               	goto	L2
  1208  0014EA  D000               	goto	l1981
  1209  0014EC                     l1981:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;user.c: 152: }
  1213                           ;user.c: 153: sum = sum - min - max;
  1214  0014EC  0100               	movlb	0	; () banked
  1215  0014EE  5190               	movf	sensorComputation@max& (0+255),w,b
  1216  0014F0  0100               	movlb	0	; () banked
  1217  0014F2  2592               	addwf	sensorComputation@min& (0+255),w,b
  1218  0014F4  0100               	movlb	0	; () banked
  1219  0014F6  6F8E               	movwf	??_sensorComputation& (0+255),b
  1220  0014F8  0100               	movlb	0	; () banked
  1221  0014FA  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1222  0014FC  0100               	movlb	0	; () banked
  1223  0014FE  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1224  001500  0100               	movlb	0	; () banked
  1225  001502  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1226  001504  0100               	movlb	0	; () banked
  1227  001506  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1228  001508  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1229  00150A  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1230  00150C  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1231  00150E  0100               	movlb	0	; () banked
  1232  001510  5194               	movf	sensorComputation@sum& (0+255),w,b
  1233  001512  0100               	movlb	0	; () banked
  1234  001514  258E               	addwf	??_sensorComputation& (0+255),w,b
  1235  001516  0100               	movlb	0	; () banked
  1236  001518  6F94               	movwf	sensorComputation@sum& (0+255),b
  1237  00151A  0100               	movlb	0	; () banked
  1238  00151C  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1239  00151E  0100               	movlb	0	; () banked
  1240  001520  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1241  001522  0100               	movlb	0	; () banked
  1242  001524  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1243                           
  1244                           ;user.c: 154: if(getCorrection == 1)
  1245  001526  0100               	movlb	0	; () banked
  1246  001528  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1247  00152A  A4D8               	btfss	status,2,c
  1248  00152C  D00C               	goto	l1985
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1252  00152E  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1253  001532  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1254  001536  0E00               	movlw	0
  1255  001538  0100               	movlb	0	; () banked
  1256  00153A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1257  00153C  0E08               	movlw	8
  1258  00153E  6F82               	movwf	___awdiv@divisor& (0+255),b
  1259  001540  ECF3  F00C         	call	___awdiv	;wreg free
  1260  001544  D022               	goto	L3
  1261  001546                     l1985:
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;user.c: 156: else
  1265                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1266  001546  90D8               	bcf	status,0,c
  1267  001548  0100               	movlb	0	; () banked
  1268  00154A  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1269  00154C  6ED9               	movwf	fsr2l,c
  1270  00154E  0100               	movlb	0	; () banked
  1271  001550  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1272  001552  6EDA               	movwf	fsr2h,c
  1273  001554  0E01               	movlw	low _sensorCorrection
  1274  001556  26D9               	addwf	fsr2l,f,c
  1275  001558  0E00               	movlw	high _sensorCorrection
  1276  00155A  22DA               	addwfc	fsr2h,f,c
  1277  00155C  CFDE F08E          	movff	postinc2,??_sensorComputation
  1278  001560  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1279  001564  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1280  001568  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1281  00156C  0E00               	movlw	0
  1282  00156E  0100               	movlb	0	; () banked
  1283  001570  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1284  001572  0E08               	movlw	8
  1285  001574  6F82               	movwf	___awdiv@divisor& (0+255),b
  1286  001576  ECF3  F00C         	call	___awdiv	;wreg free
  1287  00157A  0100               	movlb	0	; () banked
  1288  00157C  518E               	movf	??_sensorComputation& (0+255),w,b
  1289  00157E  0100               	movlb	0	; () banked
  1290  001580  2780               	addwf	?___awdiv& (0+255),f,b
  1291  001582  0100               	movlb	0	; () banked
  1292  001584  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1293  001586  0100               	movlb	0	; () banked
  1294  001588  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1295  00158A                     L3:
  1296  00158A  90D8               	bcf	status,0,c
  1297  00158C  0100               	movlb	0	; () banked
  1298  00158E  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1299  001590  6ED9               	movwf	fsr2l,c
  1300  001592  0100               	movlb	0	; () banked
  1301  001594  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1302  001596  6EDA               	movwf	fsr2h,c
  1303  001598  0E09               	movlw	low _sensorValue
  1304  00159A  26D9               	addwf	fsr2l,f,c
  1305  00159C  0E00               	movlw	high _sensorValue
  1306  00159E  22DA               	addwfc	fsr2h,f,c
  1307  0015A0  0100               	movlb	0	; () banked
  1308  0015A2  C080  FFDE         	movff	?___awdiv,postinc2
  1309  0015A6  0100               	movlb	0	; () banked
  1310  0015A8  C081  FFDD         	movff	?___awdiv+1,postdec2
  1311  0015AC  D000               	goto	l1987
  1312  0015AE                     l1987:
  1313                           
  1314                           ; BSR set to: 0
  1315  0015AE  0100               	movlb	0	; () banked
  1316  0015B0  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1317  0015B2  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320  0015B4  0100               	movlb	0	; () banked
  1321  0015B6  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1322  0015B8  D6B6               	goto	l1965
  1323  0015BA  0100               	movlb	0	; () banked
  1324  0015BC  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1325  0015BE  E102               	bnz	l307
  1326  0015C0  D6AB               	goto	L4
  1327  0015C2  D000               	goto	l307
  1328  0015C4                     l307:
  1329                           
  1330                           ; BSR set to: 0
  1331  0015C4  0012               	return		;funcret
  1332  0015C6                     __end_of_sensorComputation:
  1333                           	opt stack 0
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           intcon	equ	0xFF2
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postinc2	equ	0xFDE
  1342                           postdec2	equ	0xFDD
  1343                           fsr2h	equ	0xFDA
  1344                           fsr2l	equ	0xFD9
  1345                           status	equ	0xFD8
  1346                           
  1347 ;; *************** function ___wmul *****************
  1348 ;; Defined at:
  1349 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1352 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  product         2    4[BANK0 ] unsigned int 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  2    0[BANK0 ] unsigned int 
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0, prodl, prodh
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:        6 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    4
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		_sensorComputation
  1375 ;;		_sensorUpdate
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text4
  1380  001B72                     __ptext4:
  1381                           	opt stack 0
  1382  001B72                     ___wmul:
  1383                           	opt stack 24
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;incstack = 0
  1387  001B72  0100               	movlb	0	; () banked
  1388  001B74  5180               	movf	___wmul@multiplier& (0+255),w,b
  1389  001B76  0100               	movlb	0	; () banked
  1390  001B78  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1391  001B7A  CFF3 F084          	movff	prodl,___wmul@product
  1392  001B7E  CFF4 F085          	movff	prodh,___wmul@product+1
  1393  001B82  0100               	movlb	0	; () banked
  1394  001B84  5180               	movf	___wmul@multiplier& (0+255),w,b
  1395  001B86  0100               	movlb	0	; () banked
  1396  001B88  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1397  001B8A  50F3               	movf	prodl,w,c
  1398  001B8C  0100               	movlb	0	; () banked
  1399  001B8E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1400  001B90  0100               	movlb	0	; () banked
  1401  001B92  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1402  001B94  0100               	movlb	0	; () banked
  1403  001B96  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1404  001B98  50F3               	movf	prodl,w,c
  1405  001B9A  0100               	movlb	0	; () banked
  1406  001B9C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1407                           
  1408                           ; BSR set to: 0
  1409  001B9E  C084  F080         	movff	___wmul@product,?___wmul
  1410  001BA2  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1411  001BA6  D000               	goto	l328
  1412  001BA8                     l328:
  1413                           
  1414                           ; BSR set to: 0
  1415  001BA8  0012               	return		;funcret
  1416  001BAA                     __end_of___wmul:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodh	equ	0xFF4
  1423                           prodl	equ	0xFF3
  1424                           intcon	equ	0xFF2
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postinc2	equ	0xFDE
  1428                           postdec2	equ	0xFDD
  1429                           fsr2h	equ	0xFDA
  1430                           fsr2l	equ	0xFD9
  1431                           status	equ	0xFD8
  1432                           
  1433 ;; *************** function ___awdiv *****************
  1434 ;; Defined at:
  1435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  dividend        2    0[BANK0 ] int 
  1438 ;;  divisor         2    2[BANK0 ] int 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  quotient        2    6[BANK0 ] int 
  1441 ;;  sign            1    5[BANK0 ] unsigned char 
  1442 ;;  counter         1    4[BANK0 ] unsigned char 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  2    0[BANK0 ] int 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;Total ram usage:        8 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    4
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_setCorrection
  1463 ;;		_sensorComputation
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text5
  1468  0019E6                     __ptext5:
  1469                           	opt stack 0
  1470  0019E6                     ___awdiv:
  1471                           	opt stack 25
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;incstack = 0
  1475  0019E6  0E00               	movlw	0
  1476  0019E8  0100               	movlb	0	; () banked
  1477  0019EA  6F85               	movwf	___awdiv@sign& (0+255),b
  1478                           
  1479                           ; BSR set to: 0
  1480  0019EC  0100               	movlb	0	; () banked
  1481  0019EE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1482  0019F0  D009               	goto	l1907
  1483                           
  1484                           ; BSR set to: 0
  1485  0019F2  0100               	movlb	0	; () banked
  1486  0019F4  6D82               	negf	___awdiv@divisor& (0+255),b
  1487  0019F6  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1488  0019F8  B0D8               	btfsc	status,0,c
  1489  0019FA  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1490                           
  1491                           ; BSR set to: 0
  1492  0019FC  0E01               	movlw	1
  1493  0019FE  0100               	movlb	0	; () banked
  1494  001A00  6F85               	movwf	___awdiv@sign& (0+255),b
  1495  001A02  D000               	goto	l1907
  1496  001A04                     l1907:
  1497                           
  1498                           ; BSR set to: 0
  1499  001A04  0100               	movlb	0	; () banked
  1500  001A06  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1501  001A08  D009               	goto	l1913
  1502                           
  1503                           ; BSR set to: 0
  1504  001A0A  0100               	movlb	0	; () banked
  1505  001A0C  6D80               	negf	___awdiv@dividend& (0+255),b
  1506  001A0E  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1507  001A10  B0D8               	btfsc	status,0,c
  1508  001A12  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1509                           
  1510                           ; BSR set to: 0
  1511  001A14  0E01               	movlw	1
  1512  001A16  0100               	movlb	0	; () banked
  1513  001A18  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1514  001A1A  D000               	goto	l1913
  1515  001A1C                     l1913:
  1516                           
  1517                           ; BSR set to: 0
  1518  001A1C  0E00               	movlw	0
  1519  001A1E  0100               	movlb	0	; () banked
  1520  001A20  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1521  001A22  0E00               	movlw	0
  1522  001A24  6F86               	movwf	___awdiv@quotient& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525  001A26  0100               	movlb	0	; () banked
  1526  001A28  5182               	movf	___awdiv@divisor& (0+255),w,b
  1527  001A2A  0100               	movlb	0	; () banked
  1528  001A2C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1529  001A2E  B4D8               	btfsc	status,2,c
  1530  001A30  D031               	goto	l1935
  1531                           
  1532                           ; BSR set to: 0
  1533  001A32  0E01               	movlw	1
  1534  001A34  0100               	movlb	0	; () banked
  1535  001A36  6F84               	movwf	___awdiv@counter& (0+255),b
  1536  001A38  D007               	goto	l1921
  1537  001A3A                     l1919:
  1538                           
  1539                           ; BSR set to: 0
  1540  001A3A  0100               	movlb	0	; () banked
  1541  001A3C  90D8               	bcf	status,0,c
  1542  001A3E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1543  001A40  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1544  001A42  0100               	movlb	0	; () banked
  1545  001A44  2B84               	incf	___awdiv@counter& (0+255),f,b
  1546  001A46  D000               	goto	l1921
  1547  001A48                     l1921:
  1548                           
  1549                           ; BSR set to: 0
  1550  001A48  0100               	movlb	0	; () banked
  1551  001A4A  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1552  001A4C  D002               	goto	l1923
  1553  001A4E  D7F5               	goto	l1919
  1554                           
  1555                           ; BSR set to: 0
  1556  001A50  D000               	goto	l1923
  1557  001A52                     l1923:
  1558                           
  1559                           ; BSR set to: 0
  1560  001A52  0100               	movlb	0	; () banked
  1561  001A54  90D8               	bcf	status,0,c
  1562  001A56  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1563  001A58  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1564                           
  1565                           ; BSR set to: 0
  1566  001A5A  0100               	movlb	0	; () banked
  1567  001A5C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1568  001A5E  0100               	movlb	0	; () banked
  1569  001A60  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1570  001A62  0100               	movlb	0	; () banked
  1571  001A64  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1572  001A66  0100               	movlb	0	; () banked
  1573  001A68  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1574  001A6A  A0D8               	btfss	status,0,c
  1575  001A6C  D00B               	goto	l1931
  1576                           
  1577                           ; BSR set to: 0
  1578  001A6E  0100               	movlb	0	; () banked
  1579  001A70  5182               	movf	___awdiv@divisor& (0+255),w,b
  1580  001A72  0100               	movlb	0	; () banked
  1581  001A74  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1582  001A76  0100               	movlb	0	; () banked
  1583  001A78  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1584  001A7A  0100               	movlb	0	; () banked
  1585  001A7C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1586                           
  1587                           ; BSR set to: 0
  1588  001A7E  0100               	movlb	0	; () banked
  1589  001A80  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1590  001A82  D000               	goto	l1931
  1591  001A84                     l1931:
  1592                           
  1593                           ; BSR set to: 0
  1594  001A84  0100               	movlb	0	; () banked
  1595  001A86  90D8               	bcf	status,0,c
  1596  001A88  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1597  001A8A  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1598                           
  1599                           ; BSR set to: 0
  1600  001A8C  0100               	movlb	0	; () banked
  1601  001A8E  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1602  001A90  D7E0               	goto	l1923
  1603                           
  1604                           ; BSR set to: 0
  1605  001A92  D000               	goto	l1935
  1606  001A94                     l1935:
  1607                           
  1608                           ; BSR set to: 0
  1609  001A94  0100               	movlb	0	; () banked
  1610  001A96  5185               	movf	___awdiv@sign& (0+255),w,b
  1611  001A98  0100               	movlb	0	; () banked
  1612  001A9A  B4D8               	btfsc	status,2,c
  1613  001A9C  D006               	goto	l1939
  1614                           
  1615                           ; BSR set to: 0
  1616  001A9E  0100               	movlb	0	; () banked
  1617  001AA0  6D86               	negf	___awdiv@quotient& (0+255),b
  1618  001AA2  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1619  001AA4  B0D8               	btfsc	status,0,c
  1620  001AA6  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1621  001AA8  D000               	goto	l1939
  1622  001AAA                     l1939:
  1623                           
  1624                           ; BSR set to: 0
  1625  001AAA  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1626  001AAE  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1627  001AB2  D000               	goto	l521
  1628  001AB4                     l521:
  1629                           
  1630                           ; BSR set to: 0
  1631  001AB4  0012               	return		;funcret
  1632  001AB6                     __end_of___awdiv:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           prodh	equ	0xFF4
  1639                           prodl	equ	0xFF3
  1640                           intcon	equ	0xFF2
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           postinc2	equ	0xFDE
  1644                           postdec2	equ	0xFDD
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _MIN *****************
  1650 ;; Defined at:
  1651 ;;		line 184 in file "user.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  a               2    6[BANK0 ] int 
  1654 ;;  b               2    8[BANK0 ] int 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2    6[BANK0 ] int 
  1659 ;; Registers used:
  1660 ;;		wreg, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;Total ram usage:        5 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    4
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_sensorComputation
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text6
  1681  001BAA                     __ptext6:
  1682                           	opt stack 0
  1683  001BAA                     _MIN:
  1684                           	opt stack 24
  1685                           
  1686                           ;user.c: 186: if(a>b) return b;
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;incstack = 0
  1690  001BAA  0100               	movlb	0	; () banked
  1691  001BAC  5186               	movf	MIN@a& (0+255),w,b
  1692  001BAE  0100               	movlb	0	; () banked
  1693  001BB0  5D88               	subwf	MIN@b& (0+255),w,b
  1694  001BB2  0100               	movlb	0	; () banked
  1695  001BB4  5189               	movf	(MIN@b+1)& (0+255),w,b
  1696  001BB6  0A80               	xorlw	128
  1697  001BB8  0100               	movlb	0	; () banked
  1698  001BBA  6F8A               	movwf	??_MIN& (0+255),b
  1699  001BBC  0100               	movlb	0	; () banked
  1700  001BBE  5187               	movf	(MIN@a+1)& (0+255),w,b
  1701  001BC0  0A80               	xorlw	128
  1702  001BC2  0100               	movlb	0	; () banked
  1703  001BC4  598A               	subwfb	??_MIN& (0+255),w,b
  1704  001BC6  B0D8               	btfsc	status,0,c
  1705  001BC8  D005               	goto	l320
  1706                           
  1707                           ; BSR set to: 0
  1708  001BCA  C088  F086         	movff	MIN@b,?_MIN
  1709  001BCE  C089  F087         	movff	MIN@b+1,?_MIN+1
  1710  001BD2  D004               	goto	l321
  1711  001BD4                     l320:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;user.c: 187: return a;
  1715  001BD4  C086  F086         	movff	MIN@a,?_MIN
  1716  001BD8  C087  F087         	movff	MIN@a+1,?_MIN+1
  1717  001BDC                     l321:
  1718                           
  1719                           ; BSR set to: 0
  1720  001BDC  0012               	return		;funcret
  1721  001BDE                     __end_of_MIN:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           intcon	equ	0xFF2
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _MAX *****************
  1739 ;; Defined at:
  1740 ;;		line 190 in file "user.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  a               2    6[BANK0 ] int 
  1743 ;;  b               2    8[BANK0 ] int 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  2    6[BANK0 ] int 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1755 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;Total ram usage:        5 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    4
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_sensorComputation
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text7
  1770  001BDE                     __ptext7:
  1771                           	opt stack 0
  1772  001BDE                     _MAX:
  1773                           	opt stack 24
  1774                           
  1775                           ;user.c: 192: if(a>b) return a;
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;incstack = 0
  1779  001BDE  0100               	movlb	0	; () banked
  1780  001BE0  5186               	movf	MAX@a& (0+255),w,b
  1781  001BE2  0100               	movlb	0	; () banked
  1782  001BE4  5D88               	subwf	MAX@b& (0+255),w,b
  1783  001BE6  0100               	movlb	0	; () banked
  1784  001BE8  5189               	movf	(MAX@b+1)& (0+255),w,b
  1785  001BEA  0A80               	xorlw	128
  1786  001BEC  0100               	movlb	0	; () banked
  1787  001BEE  6F8A               	movwf	??_MAX& (0+255),b
  1788  001BF0  0100               	movlb	0	; () banked
  1789  001BF2  5187               	movf	(MAX@a+1)& (0+255),w,b
  1790  001BF4  0A80               	xorlw	128
  1791  001BF6  0100               	movlb	0	; () banked
  1792  001BF8  598A               	subwfb	??_MAX& (0+255),w,b
  1793  001BFA  B0D8               	btfsc	status,0,c
  1794  001BFC  D005               	goto	l324
  1795                           
  1796                           ; BSR set to: 0
  1797  001BFE  C086  F086         	movff	MAX@a,?_MAX
  1798  001C02  C087  F087         	movff	MAX@a+1,?_MAX+1
  1799  001C06  D004               	goto	l325
  1800  001C08                     l324:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;user.c: 193: return b;
  1804  001C08  C088  F086         	movff	MAX@b,?_MAX
  1805  001C0C  C089  F087         	movff	MAX@b+1,?_MAX+1
  1806  001C10                     l325:
  1807                           
  1808                           ; BSR set to: 0
  1809  001C10  0012               	return		;funcret
  1810  001C12                     __end_of_MAX:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           postinc2	equ	0xFDE
  1822                           postdec2	equ	0xFDD
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _InitApp *****************
  1828 ;; Defined at:
  1829 ;;		line 35 in file "user.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;		None               void
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    5
  1850 ;; This function calls:
  1851 ;;		_AlgorithmSelection
  1852 ;;		_delay
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text8
  1859  001AFA                     __ptext8:
  1860                           	opt stack 0
  1861  001AFA                     _InitApp:
  1862                           	opt stack 25
  1863                           
  1864                           ;user.c: 39: TRISC = 0;
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;incstack = 0
  1868  001AFA  0E00               	movlw	0
  1869  001AFC  6E94               	movwf	3988,c	;volatile
  1870                           
  1871                           ;user.c: 43: TRISEbits.TRISE1=1;
  1872  001AFE  8296               	bsf	3990,1,c	;volatile
  1873                           
  1874                           ;user.c: 45: TRISEbits.TRISE2=1;
  1875  001B00  8496               	bsf	3990,2,c	;volatile
  1876                           
  1877                           ;user.c: 47: TRISBbits.RB1=1;
  1878  001B02  8293               	bsf	3987,1,c	;volatile
  1879                           
  1880                           ;user.c: 49: TRISBbits.RB0=1;
  1881  001B04  8093               	bsf	3987,0,c	;volatile
  1882                           
  1883                           ;user.c: 52: TRISBbits.RB3=1;
  1884  001B06  8693               	bsf	3987,3,c	;volatile
  1885                           
  1886                           ;user.c: 54: TRISBbits.RB2=1;
  1887  001B08  8493               	bsf	3987,2,c	;volatile
  1888                           
  1889                           ;user.c: 58: ADCON1 =0b00000001;
  1890  001B0A  0E01               	movlw	1
  1891  001B0C  6EC1               	movwf	4033,c	;volatile
  1892                           
  1893                           ;user.c: 63: ADCON2=0b00001010;
  1894  001B0E  0E0A               	movlw	10
  1895  001B10  6EC0               	movwf	4032,c	;volatile
  1896                           
  1897                           ;user.c: 68: ADCON0=0b00101011;
  1898  001B12  0E2B               	movlw	43
  1899  001B14  6EC2               	movwf	4034,c	;volatile
  1900                           
  1901                           ;user.c: 77: T0CON = 0b11000100;
  1902  001B16  0EC4               	movlw	196
  1903  001B18  6ED5               	movwf	4053,c	;volatile
  1904                           
  1905                           ;user.c: 85: INTCON2 = 0b11110100;
  1906  001B1A  0EF4               	movlw	244
  1907  001B1C  6EF1               	movwf	intcon2,c	;volatile
  1908                           
  1909                           ;user.c: 95: INTCON = 0b00100000;
  1910  001B1E  0E20               	movlw	32
  1911  001B20  6EF2               	movwf	intcon,c	;volatile
  1912                           
  1913                           ;user.c: 105: AlgorithmSelection();
  1914  001B22  EC2E  F00E         	call	_AlgorithmSelection	;wreg free
  1915                           
  1916                           ;user.c: 108: delay(1000);
  1917  001B26  0E03               	movlw	3
  1918  001B28  0100               	movlb	0	; () banked
  1919  001B2A  6F81               	movwf	(delay@ms+1)& (0+255),b
  1920  001B2C  0EE8               	movlw	232
  1921  001B2E  6F80               	movwf	delay@ms& (0+255),b
  1922  001B30  EC5B  F00D         	call	_delay	;wreg free
  1923  001B34  0012               	return		;funcret
  1924  001B36                     __end_of_InitApp:
  1925                           	opt stack 0
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           prodh	equ	0xFF4
  1931                           prodl	equ	0xFF3
  1932                           intcon	equ	0xFF2
  1933                           intcon2	equ	0xFF1
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _delay *****************
  1943 ;; Defined at:
  1944 ;;		line 29 in file "user.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  ms              2    0[BANK0 ] unsigned int 
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;  x               2    3[BANK0 ] int 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:        5 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    4
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_InitApp
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text9
  1973  001AB6                     __ptext9:
  1974                           	opt stack 0
  1975  001AB6                     _delay:
  1976                           	opt stack 25
  1977                           
  1978                           ;user.c: 30: int x = 0;
  1979                           
  1980                           ;incstack = 0
  1981  001AB6  0E00               	movlw	0
  1982  001AB8  0100               	movlb	0	; () banked
  1983  001ABA  6F84               	movwf	(delay@x+1)& (0+255),b
  1984  001ABC  0E00               	movlw	0
  1985  001ABE  6F83               	movwf	delay@x& (0+255),b
  1986                           
  1987                           ;user.c: 31: for (x = 0; x < ms; x++)
  1988  001AC0  0E00               	movlw	0
  1989  001AC2  0100               	movlb	0	; () banked
  1990  001AC4  6F84               	movwf	(delay@x+1)& (0+255),b
  1991  001AC6  0E00               	movlw	0
  1992  001AC8  6F83               	movwf	delay@x& (0+255),b
  1993  001ACA  D00C               	goto	l279
  1994  001ACC                     l1945:
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1998  001ACC  0E0B               	movlw	11
  1999  001ACE  0100               	movlb	0	; () banked
  2000  001AD0  6F82               	movwf	??_delay& (0+255),b
  2001  001AD2  0E62               	movlw	98
  2002  001AD4                     u1787:
  2003  001AD4  2EE8               	decfsz	wreg,f,c
  2004  001AD6  D7FE               	goto	u1787
  2005  001AD8  2F82               	decfsz	??_delay& (0+255),f,b
  2006  001ADA  D7FC               	goto	u1787
  2007  001ADC  D000               	nop2	
  2008  001ADE  0100               	movlb	0	; () banked
  2009  001AE0  4B83               	infsnz	delay@x& (0+255),f,b
  2010  001AE2  2B84               	incf	(delay@x+1)& (0+255),f,b
  2011  001AE4                     l279:
  2012                           
  2013                           ; BSR set to: 0
  2014  001AE4  0100               	movlb	0	; () banked
  2015  001AE6  5180               	movf	delay@ms& (0+255),w,b
  2016  001AE8  0100               	movlb	0	; () banked
  2017  001AEA  5D83               	subwf	delay@x& (0+255),w,b
  2018  001AEC  0100               	movlb	0	; () banked
  2019  001AEE  5181               	movf	(delay@ms+1)& (0+255),w,b
  2020  001AF0  0100               	movlb	0	; () banked
  2021  001AF2  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2022  001AF4  A0D8               	btfss	status,0,c
  2023  001AF6  D7EA               	goto	l1945
  2024                           
  2025                           ; BSR set to: 0
  2026                           
  2027                           ; BSR set to: 0
  2028  001AF8  0012               	return		;funcret
  2029  001AFA                     __end_of_delay:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           prodh	equ	0xFF4
  2036                           prodl	equ	0xFF3
  2037                           intcon	equ	0xFF2
  2038                           intcon2	equ	0xFF1
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _AlgorithmSelection *****************
  2048 ;; Defined at:
  2049 ;;		line 112 in file "user.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;		None
  2054 ;; Return value:  Size  Location     Type
  2055 ;;		None               void
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:        0 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    4
  2070 ;; This function calls:
  2071 ;;		Nothing
  2072 ;; This function is called by:
  2073 ;;		_InitApp
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text10
  2078  001C5C                     __ptext10:
  2079                           	opt stack 0
  2080  001C5C                     _AlgorithmSelection:
  2081                           	opt stack 25
  2082                           
  2083                           ;user.c: 114: ADCON0 = 0b00100111;
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;incstack = 0
  2087  001C5C  0E27               	movlw	39
  2088  001C5E  6EC2               	movwf	4034,c	;volatile
  2089                           
  2090                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2091  001C60  82C2               	bsf	4034,1,c	;volatile
  2092                           
  2093                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2094  001C62  D000               	goto	l288
  2095  001C64                     l288:
  2096  001C64  B2C2               	btfsc	4034,1,c	;volatile
  2097  001C66  D7FE               	goto	l288
  2098                           
  2099                           ;user.c: 119: if(ADRESL > 0b10000000)
  2100  001C68  0E80               	movlw	128
  2101  001C6A  64C3               	cpfsgt	4035,c	;volatile
  2102  001C6C  D002               	goto	l1957
  2103                           
  2104                           ;user.c: 120: algorithm = LEFTWALL;
  2105  001C6E  0E00               	movlw	0
  2106  001C70  D001               	goto	L5
  2107  001C72                     l1957:
  2108                           
  2109                           ;user.c: 121: else
  2110                           ;user.c: 122: algorithm = RIGHTWALL;
  2111  001C72  0E01               	movlw	1
  2112  001C74                     L5:
  2113  001C74  6E35               	movwf	_algorithm,c
  2114  001C76  D000               	goto	l293
  2115  001C78                     l293:
  2116  001C78  0012               	return		;funcret
  2117  001C7A                     __end_of_AlgorithmSelection:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           intcon2	equ	0xFF1
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _ConfigureOscillator *****************
  2136 ;; Defined at:
  2137 ;;		line 24 in file "system.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;		None
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;Total ram usage:        0 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    4
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text11
  2166  001CDC                     __ptext11:
  2167                           	opt stack 0
  2168  001CDC                     _ConfigureOscillator:
  2169                           	opt stack 26
  2170                           
  2171                           ;system.c: 29: OSCCON = 0b01111100;
  2172                           
  2173                           ;incstack = 0
  2174  001CDC  0E7C               	movlw	124
  2175  001CDE  6ED3               	movwf	4051,c	;volatile
  2176                           
  2177                           ;system.c: 31: OSCTUNE = 0b01001111;
  2178  001CE0  0E4F               	movlw	79
  2179  001CE2  6E9B               	movwf	3995,c	;volatile
  2180  001CE4  0012               	return		;funcret
  2181  001CE6                     __end_of_ConfigureOscillator:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           intcon	equ	0xFF2
  2190                           intcon2	equ	0xFF1
  2191                           postinc0	equ	0xFEE
  2192                           wreg	equ	0xFE8
  2193                           postinc2	equ	0xFDE
  2194                           postdec2	equ	0xFDD
  2195                           fsr2h	equ	0xFDA
  2196                           fsr2l	equ	0xFD9
  2197                           status	equ	0xFD8
  2198                           
  2199 ;; *************** function _low_isr *****************
  2200 ;; Defined at:
  2201 ;;		line 232 in file "interrupts.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;		None               void
  2208 ;; Registers used:
  2209 ;;		None
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;Total ram usage:       17 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    3
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		Interrupt level 1
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	intcodelo
  2230  000018                     __pintcodelo:
  2231                           	opt stack 0
  2232  000018                     _low_isr:
  2233                           	opt stack 24
  2234                           
  2235                           ;incstack = 0
  2236  000018  CFD8 F038          	movff	status,??_low_isr
  2237  00001C  CFE8 F039          	movff	wreg,??_low_isr+1
  2238  000020  CFE0 F03A          	movff	bsr,??_low_isr+2
  2239  000024  CFFA F03B          	movff	pclath,??_low_isr+3
  2240  000028  CFFB F03C          	movff	pclatu,??_low_isr+4
  2241  00002C  CFE9 F03D          	movff	fsr0l,??_low_isr+5
  2242  000030  CFEA F03E          	movff	fsr0h,??_low_isr+6
  2243  000034  CFE1 F03F          	movff	fsr1l,??_low_isr+7
  2244  000038  CFE2 F040          	movff	fsr1h,??_low_isr+8
  2245  00003C  CFD9 F041          	movff	fsr2l,??_low_isr+9
  2246  000040  CFDA F042          	movff	fsr2h,??_low_isr+10
  2247  000044  CFF3 F043          	movff	prodl,??_low_isr+11
  2248  000048  CFF4 F044          	movff	prodh,??_low_isr+12
  2249  00004C  CFF6 F045          	movff	tblptrl,??_low_isr+13
  2250  000050  CFF7 F046          	movff	tblptrh,??_low_isr+14
  2251  000054  CFF8 F047          	movff	tblptru,??_low_isr+15
  2252  000058  CFF5 F048          	movff	tablat,??_low_isr+16
  2253  00005C  C048  FFF5         	movff	??_low_isr+16,tablat
  2254  000060  C047  FFF8         	movff	??_low_isr+15,tblptru
  2255  000064  C046  FFF7         	movff	??_low_isr+14,tblptrh
  2256  000068  C045  FFF6         	movff	??_low_isr+13,tblptrl
  2257  00006C  C044  FFF4         	movff	??_low_isr+12,prodh
  2258  000070  C043  FFF3         	movff	??_low_isr+11,prodl
  2259  000074  C042  FFDA         	movff	??_low_isr+10,fsr2h
  2260  000078  C041  FFD9         	movff	??_low_isr+9,fsr2l
  2261  00007C  C040  FFE2         	movff	??_low_isr+8,fsr1h
  2262  000080  C03F  FFE1         	movff	??_low_isr+7,fsr1l
  2263  000084  C03E  FFEA         	movff	??_low_isr+6,fsr0h
  2264  000088  C03D  FFE9         	movff	??_low_isr+5,fsr0l
  2265  00008C  C03C  FFFB         	movff	??_low_isr+4,pclatu
  2266  000090  C03B  FFFA         	movff	??_low_isr+3,pclath
  2267  000094  C03A  FFE0         	movff	??_low_isr+2,bsr
  2268  000098  C039  FFE8         	movff	??_low_isr+1,wreg
  2269  00009C  C038  FFD8         	movff	??_low_isr,status
  2270  0000A0  0010               	retfie	
  2271  0000A2                     __end_of_low_isr:
  2272                           	opt stack 0
  2273                           pclatu	equ	0xFFB
  2274                           pclath	equ	0xFFA
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           intcon	equ	0xFF2
  2282                           intcon2	equ	0xFF1
  2283                           postinc0	equ	0xFEE
  2284                           fsr0h	equ	0xFEA
  2285                           fsr0l	equ	0xFE9
  2286                           wreg	equ	0xFE8
  2287                           fsr1h	equ	0xFE2
  2288                           fsr1l	equ	0xFE1
  2289                           bsr	equ	0xFE0
  2290                           postinc2	equ	0xFDE
  2291                           postdec2	equ	0xFDD
  2292                           fsr2h	equ	0xFDA
  2293                           fsr2l	equ	0xFD9
  2294                           status	equ	0xFD8
  2295                           
  2296 ;; *************** function _high_isr *****************
  2297 ;; Defined at:
  2298 ;;		line 99 in file "interrupts.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;		None
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;		None               void
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;Total ram usage:       14 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    2
  2319 ;; This function calls:
  2320 ;;		_KController
  2321 ;;		_Reversing
  2322 ;;		_forward
  2323 ;;		_merge
  2324 ;;		_motorCounterUpdate
  2325 ;;		_moveMouse
  2326 ;;		_rotate
  2327 ;; This function is called by:
  2328 ;;		Interrupt level 2
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	intcode
  2333  000008                     __pintcode:
  2334                           	opt stack 0
  2335  000008                     _high_isr:
  2336                           	opt stack 24
  2337                           
  2338                           ;incstack = 0
  2339  000008  CFFA F051          	movff	pclath,??_high_isr
  2340  00000C  CFFB F052          	movff	pclatu,??_high_isr+1
  2341  000010  CFE9 F053          	movff	fsr0l,??_high_isr+2
  2342  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2343                           pclatu	equ	0xFFB
  2344                           pclath	equ	0xFFA
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           prodh	equ	0xFF4
  2350                           prodl	equ	0xFF3
  2351                           intcon	equ	0xFF2
  2352                           intcon2	equ	0xFF1
  2353                           postinc0	equ	0xFEE
  2354                           fsr0h	equ	0xFEA
  2355                           fsr0l	equ	0xFE9
  2356                           wreg	equ	0xFE8
  2357                           fsr1h	equ	0xFE2
  2358                           fsr1l	equ	0xFE1
  2359                           bsr	equ	0xFE0
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366                           	psect	intcode_body
  2367  001006                     __pintcode_body:
  2368                           	opt stack 24
  2369  001006                     int_func:
  2370                           	opt stack 24
  2371  001006  0006               	pop		; remove dummy address from shadow register refresh
  2372  001008  CFEA F054          	movff	fsr0h,??_high_isr+3
  2373  00100C  CFE1 F055          	movff	fsr1l,??_high_isr+4
  2374  001010  CFE2 F056          	movff	fsr1h,??_high_isr+5
  2375  001014  CFD9 F057          	movff	fsr2l,??_high_isr+6
  2376  001018  CFDA F058          	movff	fsr2h,??_high_isr+7
  2377  00101C  CFF3 F059          	movff	prodl,??_high_isr+8
  2378  001020  CFF4 F05A          	movff	prodh,??_high_isr+9
  2379  001024  CFF6 F05B          	movff	tblptrl,??_high_isr+10
  2380  001028  CFF7 F05C          	movff	tblptrh,??_high_isr+11
  2381  00102C  CFF8 F05D          	movff	tblptru,??_high_isr+12
  2382  001030  CFF5 F05E          	movff	tablat,??_high_isr+13
  2383                           
  2384                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2385  001034  A4F2               	btfss	intcon,2,c	;volatile
  2386  001036  D148               	goto	i2l107
  2387                           
  2388                           ;interrupts.c: 119: {
  2389                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2390  001038  BE1A               	btfsc	_MotorDelayCounter+1,7,c
  2391  00103A  D142               	goto	i2l1811
  2392  00103C  501A               	movf	_MotorDelayCounter+1,w,c
  2393  00103E  E104               	bnz	i2u118_40
  2394  001040  0E03               	movlw	3
  2395  001042  5C19               	subwf	_MotorDelayCounter,w,c
  2396  001044  A0D8               	btfss	status,0,c
  2397  001046  D13C               	goto	i2l1811
  2398  001048                     i2u118_40:
  2399                           
  2400                           ;interrupts.c: 121: {
  2401                           ;interrupts.c: 123: if(ControllerCounter > 0){
  2402  001048  BE12               	btfsc	_ControllerCounter+1,7,c
  2403  00104A  D022               	goto	i2l1719
  2404  00104C  5012               	movf	_ControllerCounter+1,w,c
  2405  00104E  E103               	bnz	i2u119_40
  2406  001050  0411               	decf	_ControllerCounter,w,c
  2407  001052  A0D8               	btfss	status,0,c
  2408  001054  D01D               	goto	i2l1719
  2409  001056                     i2u119_40:
  2410                           
  2411                           ;interrupts.c: 124: KController();
  2412  001056  EC73  F00B         	call	_KController	;wreg free
  2413                           
  2414                           ;interrupts.c: 125: if (sensorValue[3] > 200 && sensorValue[2] > 200){
  2415  00105A  BE10               	btfsc	_sensorValue+7,7,c
  2416  00105C  D125               	goto	i2l1809
  2417  00105E  5010               	movf	_sensorValue+7,w,c
  2418  001060  E104               	bnz	i2u120_40
  2419  001062  0EC9               	movlw	201
  2420  001064  5C0F               	subwf	_sensorValue+6,w,c
  2421  001066  A0D8               	btfss	status,0,c
  2422  001068  D11F               	goto	i2l1809
  2423  00106A                     i2u120_40:
  2424  00106A  BE0E               	btfsc	_sensorValue+5,7,c
  2425  00106C  D11D               	goto	i2l1809
  2426  00106E  500E               	movf	_sensorValue+5,w,c
  2427  001070  E104               	bnz	i2u121_40
  2428  001072  0EC9               	movlw	201
  2429  001074  5C0D               	subwf	_sensorValue+4,w,c
  2430  001076  A0D8               	btfss	status,0,c
  2431  001078  D117               	goto	i2l1809
  2432  00107A                     i2u121_40:
  2433                           
  2434                           ;interrupts.c: 126: ControllerCounter = 0;
  2435  00107A  0E00               	movlw	0
  2436  00107C  6E12               	movwf	_ControllerCounter+1,c
  2437  00107E  0E00               	movlw	0
  2438  001080  6E11               	movwf	_ControllerCounter,c
  2439                           
  2440                           ;interrupts.c: 127: RotateCounter = 167*2;
  2441  001082  0E01               	movlw	1
  2442  001084  6E20               	movwf	_RotateCounter+1,c
  2443  001086  0E4E               	movlw	78
  2444  001088  6E1F               	movwf	_RotateCounter,c
  2445                           
  2446                           ;interrupts.c: 128: rotatingSide = LEFT;
  2447  00108A  0E00               	movlw	0
  2448  00108C  6E37               	movwf	_rotatingSide,c
  2449                           
  2450                           ;interrupts.c: 130: }
  2451                           ;interrupts.c: 132: }
  2452  00108E  D10C               	goto	i2l1809
  2453  001090                     i2l1719:
  2454                           
  2455                           ;interrupts.c: 134: else if (ForwardCounter > 0) {
  2456  001090  BE16               	btfsc	_ForwardCounter+1,7,c
  2457  001092  D008               	goto	i2l1723
  2458  001094  5016               	movf	_ForwardCounter+1,w,c
  2459  001096  E103               	bnz	i2u122_40
  2460  001098  0415               	decf	_ForwardCounter,w,c
  2461  00109A  A0D8               	btfss	status,0,c
  2462  00109C  D003               	goto	i2l1723
  2463  00109E                     i2u122_40:
  2464                           
  2465                           ;interrupts.c: 135: forward();
  2466  00109E  EC3D  F00E         	call	_forward	;wreg free
  2467                           
  2468                           ;interrupts.c: 142: }
  2469  0010A2  D102               	goto	i2l1809
  2470  0010A4                     i2l1723:
  2471                           
  2472                           ;interrupts.c: 144: else if (ReverseCounter > 0) {
  2473  0010A4  BE1E               	btfsc	_ReverseCounter+1,7,c
  2474  0010A6  D008               	goto	i2l1727
  2475  0010A8  501E               	movf	_ReverseCounter+1,w,c
  2476  0010AA  E103               	bnz	i2u123_40
  2477  0010AC  041D               	decf	_ReverseCounter,w,c
  2478  0010AE  A0D8               	btfss	status,0,c
  2479  0010B0  D003               	goto	i2l1727
  2480  0010B2                     i2u123_40:
  2481                           
  2482                           ;interrupts.c: 145: Reversing();
  2483  0010B2  EC4B  F00E         	call	_Reversing	;wreg free
  2484                           
  2485                           ;interrupts.c: 146: }
  2486  0010B6  D0F8               	goto	i2l1809
  2487  0010B8                     i2l1727:
  2488                           
  2489                           ;interrupts.c: 148: else if(RotateCounter > 0) {
  2490  0010B8  BE20               	btfsc	_RotateCounter+1,7,c
  2491  0010BA  D025               	goto	i2l1743
  2492  0010BC  5020               	movf	_RotateCounter+1,w,c
  2493  0010BE  E103               	bnz	i2u124_40
  2494  0010C0  041F               	decf	_RotateCounter,w,c
  2495  0010C2  A0D8               	btfss	status,0,c
  2496  0010C4  D020               	goto	i2l1743
  2497  0010C6                     i2u124_40:
  2498                           
  2499                           ;interrupts.c: 150: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2500  0010C6  BE0E               	btfsc	_sensorValue+5,7,c
  2501  0010C8  D006               	goto	i2l1731
  2502  0010CA  0E21               	movlw	33
  2503  0010CC  5C0D               	subwf	_sensorValue+4,w,c
  2504  0010CE  0E03               	movlw	3
  2505  0010D0  580E               	subwfb	_sensorValue+5,w,c
  2506  0010D2  B0D8               	btfsc	status,0,c
  2507  0010D4  D008               	goto	i2l1733
  2508  0010D6                     i2l1731:
  2509  0010D6  BE10               	btfsc	_sensorValue+7,7,c
  2510  0010D8  D00D               	goto	i2l1737
  2511  0010DA  0E21               	movlw	33
  2512  0010DC  5C0F               	subwf	_sensorValue+6,w,c
  2513  0010DE  0E03               	movlw	3
  2514  0010E0  5810               	subwfb	_sensorValue+7,w,c
  2515  0010E2  A0D8               	btfss	status,0,c
  2516  0010E4  D007               	goto	i2l1737
  2517  0010E6                     i2l1733:
  2518                           
  2519                           ;interrupts.c: 151: ReverseCounter = 15;
  2520  0010E6  0E00               	movlw	0
  2521  0010E8  6E1E               	movwf	_ReverseCounter+1,c
  2522  0010EA  0E0F               	movlw	15
  2523  0010EC  6E1D               	movwf	_ReverseCounter,c
  2524                           
  2525                           ;interrupts.c: 152: Reversing();
  2526  0010EE  EC4B  F00E         	call	_Reversing	;wreg free
  2527                           
  2528                           ;interrupts.c: 153: } else {
  2529  0010F2  D0DA               	goto	i2l1809
  2530  0010F4                     i2l1737:
  2531                           
  2532                           ;interrupts.c: 154: rotate(rotatingSide);
  2533  0010F4  5037               	movf	_rotatingSide,w,c
  2534  0010F6  EC9B  F00D         	call	_rotate
  2535                           
  2536                           ;interrupts.c: 155: TurnRight = 0;
  2537  0010FA  0E00               	movlw	0
  2538  0010FC  6E24               	movwf	_TurnRight+1,c
  2539  0010FE  0E00               	movlw	0
  2540  001100  6E23               	movwf	_TurnRight,c
  2541  001102  D00D               	goto	L6
  2542                           
  2543                           ;interrupts.c: 157: }
  2544                           ;interrupts.c: 158: }
  2545                           
  2546                           ;interrupts.c: 156: TurnLeft = 0;
  2547  001104  D0D1               	goto	i2l1809
  2548  001106                     i2l1743:
  2549                           
  2550                           ;interrupts.c: 160: else if (TurnLeft == 1){
  2551  001106  0421               	decf	_TurnLeft,w,c
  2552  001108  1022               	iorwf	_TurnLeft+1,w,c
  2553  00110A  A4D8               	btfss	status,2,c
  2554  00110C  D00D               	goto	i2l1747
  2555                           
  2556                           ;interrupts.c: 161: RotateCounter = 167;
  2557  00110E  0E00               	movlw	0
  2558  001110  6E20               	movwf	_RotateCounter+1,c
  2559  001112  0EA7               	movlw	167
  2560  001114  6E1F               	movwf	_RotateCounter,c
  2561                           
  2562                           ;interrupts.c: 162: rotatingSide = LEFT;
  2563  001116  0E00               	movlw	0
  2564  001118  6E37               	movwf	_rotatingSide,c
  2565                           
  2566                           ;interrupts.c: 163: justTurned = 1;
  2567  00111A  0E01               	movlw	1
  2568  00111C  6E36               	movwf	_justTurned,c
  2569  00111E                     L6:
  2570                           
  2571                           ;interrupts.c: 164: TurnLeft = 0;
  2572  00111E  0E00               	movlw	0
  2573  001120  6E22               	movwf	_TurnLeft+1,c
  2574  001122  0E00               	movlw	0
  2575  001124  6E21               	movwf	_TurnLeft,c
  2576                           
  2577                           ;interrupts.c: 165: }
  2578  001126  D0C0               	goto	i2l1809
  2579  001128                     i2l1747:
  2580                           
  2581                           ;interrupts.c: 167: else if (TurnRight == 1 && sensorValue[3] > 475 && sensorValue[2] > 
      +                          475) {
  2582  001128  0423               	decf	_TurnRight,w,c
  2583  00112A  1024               	iorwf	_TurnRight+1,w,c
  2584  00112C  B4D8               	btfsc	status,2,c
  2585  00112E  BE10               	btfsc	_sensorValue+7,7,c
  2586  001130  D016               	goto	i2l1755
  2587  001132  0EDC               	movlw	220
  2588  001134  5C0F               	subwf	_sensorValue+6,w,c
  2589  001136  0E01               	movlw	1
  2590  001138  5810               	subwfb	_sensorValue+7,w,c
  2591  00113A  B0D8               	btfsc	status,0,c
  2592  00113C  BE0E               	btfsc	_sensorValue+5,7,c
  2593  00113E  D00F               	goto	i2l1755
  2594  001140  0EDC               	movlw	220
  2595  001142  5C0D               	subwf	_sensorValue+4,w,c
  2596  001144  0E01               	movlw	1
  2597  001146  580E               	subwfb	_sensorValue+5,w,c
  2598  001148  A0D8               	btfss	status,0,c
  2599  00114A  D009               	goto	i2l1755
  2600                           
  2601                           ;interrupts.c: 168: RotateCounter = 167;
  2602  00114C  0E00               	movlw	0
  2603  00114E  6E20               	movwf	_RotateCounter+1,c
  2604  001150  0EA7               	movlw	167
  2605  001152  6E1F               	movwf	_RotateCounter,c
  2606                           
  2607                           ;interrupts.c: 169: rotatingSide = RIGHT;
  2608  001154  0E01               	movlw	1
  2609  001156  6E37               	movwf	_rotatingSide,c
  2610                           
  2611                           ;interrupts.c: 170: justTurned = 1;
  2612  001158  0E01               	movlw	1
  2613  00115A  6E36               	movwf	_justTurned,c
  2614  00115C  D0A0               	goto	i2l1807
  2615  00115E                     i2l1755:
  2616                           
  2617                           ;interrupts.c: 174: else if (sensorValue[0] < 90 && algorithm == LEFTWALL) {
  2618  00115E  BE0A               	btfsc	_sensorValue+1,7,c
  2619  001160  D006               	goto	i2l1757
  2620  001162  500A               	movf	_sensorValue+1,w,c
  2621  001164  E11A               	bnz	i2l1767
  2622  001166  0E5A               	movlw	90
  2623  001168  5C09               	subwf	_sensorValue,w,c
  2624  00116A  B0D8               	btfsc	status,0,c
  2625  00116C  D016               	goto	i2l1767
  2626  00116E                     i2l1757:
  2627  00116E  5035               	movf	_algorithm,w,c
  2628  001170  A4D8               	btfss	status,2,c
  2629  001172  D013               	goto	i2l1767
  2630                           
  2631                           ;interrupts.c: 175: TurnLeft = 1;
  2632  001174  0E00               	movlw	0
  2633  001176  6E22               	movwf	_TurnLeft+1,c
  2634  001178  0E01               	movlw	1
  2635  00117A  6E21               	movwf	_TurnLeft,c
  2636                           
  2637                           ;interrupts.c: 176: if(justTurned == 0) {
  2638  00117C  5036               	movf	_justTurned,w,c
  2639  00117E  A4D8               	btfss	status,2,c
  2640  001180  D004               	goto	i2l1763
  2641                           
  2642                           ;interrupts.c: 177: ForwardCounter = 420;
  2643  001182  0E01               	movlw	1
  2644  001184  6E16               	movwf	_ForwardCounter+1,c
  2645  001186  0EA4               	movlw	164
  2646  001188  D003               	goto	L7
  2647  00118A                     i2l1763:
  2648                           
  2649                           ;interrupts.c: 179: ForwardCounter = 400;
  2650  00118A  0E01               	movlw	1
  2651  00118C  6E16               	movwf	_ForwardCounter+1,c
  2652  00118E  0E90               	movlw	144
  2653  001190                     L7:
  2654  001190  6E15               	movwf	_ForwardCounter,c
  2655  001192  D000               	goto	i2l1765
  2656  001194                     i2l1765:
  2657                           
  2658                           ;interrupts.c: 180: }
  2659                           ;interrupts.c: 181: forward();
  2660  001194  EC3D  F00E         	call	_forward	;wreg free
  2661                           
  2662                           ;interrupts.c: 182: }
  2663  001198  D087               	goto	i2l1809
  2664  00119A                     i2l1767:
  2665                           
  2666                           ;interrupts.c: 184: else if (sensorValue[1] < 91 && algorithm == LEFTWALL) {
  2667  00119A  BE0C               	btfsc	_sensorValue+3,7,c
  2668  00119C  D006               	goto	i2l1769
  2669  00119E  500C               	movf	_sensorValue+3,w,c
  2670  0011A0  E11A               	bnz	i2l1779
  2671  0011A2  0E5B               	movlw	91
  2672  0011A4  5C0B               	subwf	_sensorValue+2,w,c
  2673  0011A6  B0D8               	btfsc	status,0,c
  2674  0011A8  D016               	goto	i2l1779
  2675  0011AA                     i2l1769:
  2676  0011AA  5035               	movf	_algorithm,w,c
  2677  0011AC  A4D8               	btfss	status,2,c
  2678  0011AE  D013               	goto	i2l1779
  2679                           
  2680                           ;interrupts.c: 185: TurnRight = 1;
  2681  0011B0  0E00               	movlw	0
  2682  0011B2  6E24               	movwf	_TurnRight+1,c
  2683  0011B4  0E01               	movlw	1
  2684  0011B6  6E23               	movwf	_TurnRight,c
  2685                           
  2686                           ;interrupts.c: 186: if(justTurned == 0) {
  2687  0011B8  5036               	movf	_justTurned,w,c
  2688  0011BA  A4D8               	btfss	status,2,c
  2689  0011BC  D004               	goto	i2l1775
  2690                           
  2691                           ;interrupts.c: 187: ForwardCounter = 450;
  2692  0011BE  0E01               	movlw	1
  2693  0011C0  6E16               	movwf	_ForwardCounter+1,c
  2694  0011C2  0EC2               	movlw	194
  2695  0011C4  D003               	goto	L8
  2696  0011C6                     i2l1775:
  2697                           
  2698                           ;interrupts.c: 189: ForwardCounter = 410;
  2699  0011C6  0E01               	movlw	1
  2700  0011C8  6E16               	movwf	_ForwardCounter+1,c
  2701  0011CA  0E9A               	movlw	154
  2702  0011CC                     L8:
  2703  0011CC  6E15               	movwf	_ForwardCounter,c
  2704  0011CE  D000               	goto	i2l1777
  2705  0011D0                     i2l1777:
  2706                           
  2707                           ;interrupts.c: 190: }
  2708                           ;interrupts.c: 191: forward();
  2709  0011D0  EC3D  F00E         	call	_forward	;wreg free
  2710                           
  2711                           ;interrupts.c: 192: }
  2712  0011D4  D069               	goto	i2l1809
  2713  0011D6                     i2l1779:
  2714                           
  2715                           ;interrupts.c: 194: else if ((sensorValue[0] > 90 && sensorValue[1] > 91 )
  2716                           ;interrupts.c: 195: && (sensorValue[3] > 475 && sensorValue[2] > 475) && RotateCounter <
      +                          = 0)
  2717  0011D6  BE0A               	btfsc	_sensorValue+1,7,c
  2718  0011D8  D02D               	goto	i2l1791
  2719  0011DA  500A               	movf	_sensorValue+1,w,c
  2720  0011DC  E104               	bnz	i2u137_40
  2721  0011DE  0E5B               	movlw	91
  2722  0011E0  5C09               	subwf	_sensorValue,w,c
  2723  0011E2  A0D8               	btfss	status,0,c
  2724  0011E4  D027               	goto	i2l1791
  2725  0011E6                     i2u137_40:
  2726  0011E6  BE0C               	btfsc	_sensorValue+3,7,c
  2727  0011E8  D025               	goto	i2l1791
  2728  0011EA  500C               	movf	_sensorValue+3,w,c
  2729  0011EC  E104               	bnz	i2u138_40
  2730  0011EE  0E5C               	movlw	92
  2731  0011F0  5C0B               	subwf	_sensorValue+2,w,c
  2732  0011F2  A0D8               	btfss	status,0,c
  2733  0011F4  D01F               	goto	i2l1791
  2734  0011F6                     i2u138_40:
  2735  0011F6  BE10               	btfsc	_sensorValue+7,7,c
  2736  0011F8  D01D               	goto	i2l1791
  2737  0011FA  0EDC               	movlw	220
  2738  0011FC  5C0F               	subwf	_sensorValue+6,w,c
  2739  0011FE  0E01               	movlw	1
  2740  001200  5810               	subwfb	_sensorValue+7,w,c
  2741  001202  B0D8               	btfsc	status,0,c
  2742  001204  BE0E               	btfsc	_sensorValue+5,7,c
  2743  001206  D016               	goto	i2l1791
  2744  001208  0EDC               	movlw	220
  2745  00120A  5C0D               	subwf	_sensorValue+4,w,c
  2746  00120C  0E01               	movlw	1
  2747  00120E  580E               	subwfb	_sensorValue+5,w,c
  2748  001210  A0D8               	btfss	status,0,c
  2749  001212  D010               	goto	i2l1791
  2750  001214  BE20               	btfsc	_RotateCounter+1,7,c
  2751  001216  D005               	goto	i2l1789
  2752  001218  5020               	movf	_RotateCounter+1,w,c
  2753  00121A  E10C               	bnz	i2l1791
  2754  00121C  041F               	decf	_RotateCounter,w,c
  2755  00121E  B0D8               	btfsc	status,0,c
  2756  001220  D009               	goto	i2l1791
  2757  001222                     i2l1789:
  2758                           
  2759                           ;interrupts.c: 196: {
  2760                           ;interrupts.c: 197: RotateCounter = 167*2;
  2761  001222  0E01               	movlw	1
  2762  001224  6E20               	movwf	_RotateCounter+1,c
  2763  001226  0E4E               	movlw	78
  2764  001228  6E1F               	movwf	_RotateCounter,c
  2765                           
  2766                           ;interrupts.c: 198: rotatingSide = LEFT;
  2767  00122A  0E00               	movlw	0
  2768  00122C  6E37               	movwf	_rotatingSide,c
  2769                           
  2770                           ;interrupts.c: 199: justTurned = 1;
  2771  00122E  0E01               	movlw	1
  2772  001230  6E36               	movwf	_justTurned,c
  2773                           
  2774                           ;interrupts.c: 200: }
  2775  001232  D03A               	goto	i2l1809
  2776  001234                     i2l1791:
  2777                           
  2778                           ;interrupts.c: 202: else if ((sensorValue[0] > 90 && sensorValue[1] > 91)) {
  2779  001234  BE0A               	btfsc	_sensorValue+1,7,c
  2780  001236  D023               	goto	i2l1801
  2781  001238  500A               	movf	_sensorValue+1,w,c
  2782  00123A  E104               	bnz	i2u142_40
  2783  00123C  0E5B               	movlw	91
  2784  00123E  5C09               	subwf	_sensorValue,w,c
  2785  001240  A0D8               	btfss	status,0,c
  2786  001242  D01D               	goto	i2l1801
  2787  001244                     i2u142_40:
  2788  001244  BE0C               	btfsc	_sensorValue+3,7,c
  2789  001246  D01B               	goto	i2l1801
  2790  001248  500C               	movf	_sensorValue+3,w,c
  2791  00124A  E104               	bnz	i2u143_40
  2792  00124C  0E5C               	movlw	92
  2793  00124E  5C0B               	subwf	_sensorValue+2,w,c
  2794  001250  A0D8               	btfss	status,0,c
  2795  001252  D015               	goto	i2l1801
  2796  001254                     i2u143_40:
  2797                           
  2798                           ;interrupts.c: 203: if (sensorValue[3] < 200 || sensorValue[2] < 200){
  2799  001254  BE10               	btfsc	_sensorValue+7,7,c
  2800  001256  D00E               	goto	i2l1799
  2801  001258  5010               	movf	_sensorValue+7,w,c
  2802  00125A  E104               	bnz	i2u144_40
  2803  00125C  0EC8               	movlw	200
  2804  00125E  5C0F               	subwf	_sensorValue+6,w,c
  2805  001260  A0D8               	btfss	status,0,c
  2806  001262  D008               	goto	i2l1799
  2807  001264                     i2u144_40:
  2808  001264  BE0E               	btfsc	_sensorValue+5,7,c
  2809  001266  D006               	goto	i2l1799
  2810  001268  500E               	movf	_sensorValue+5,w,c
  2811  00126A  E11E               	bnz	i2l1809
  2812  00126C  0EC8               	movlw	200
  2813  00126E  5C0D               	subwf	_sensorValue+4,w,c
  2814  001270  B0D8               	btfsc	status,0,c
  2815  001272  D01A               	goto	i2l1809
  2816  001274                     i2l1799:
  2817                           
  2818                           ;interrupts.c: 204: ControllerCounter = 5;
  2819  001274  0E00               	movlw	0
  2820  001276  6E12               	movwf	_ControllerCounter+1,c
  2821  001278  0E05               	movlw	5
  2822  00127A  6E11               	movwf	_ControllerCounter,c
  2823                           
  2824                           ;interrupts.c: 205: }
  2825                           ;interrupts.c: 206: }
  2826  00127C  D015               	goto	i2l1809
  2827  00127E                     i2l1801:
  2828                           
  2829                           ;interrupts.c: 212: else {
  2830                           ;interrupts.c: 213: motorCounterUpdate(RIGHT,0);
  2831  00127E  0E00               	movlw	0
  2832  001280  6E49               	movwf	motorCounterUpdate@reverse,c
  2833  001282  0E01               	movlw	1
  2834  001284  EC00  F00C         	call	_motorCounterUpdate
  2835                           
  2836                           ;interrupts.c: 214: motorCounterUpdate(LEFT,0);
  2837  001288  0E00               	movlw	0
  2838  00128A  6E49               	movwf	motorCounterUpdate@reverse,c
  2839  00128C  0E00               	movlw	0
  2840  00128E  EC00  F00C         	call	_motorCounterUpdate
  2841                           
  2842                           ;interrupts.c: 215: justTurned = 0;
  2843  001292  0E00               	movlw	0
  2844  001294  6E36               	movwf	_justTurned,c
  2845                           
  2846                           ;interrupts.c: 216: TurnLeft = 0;
  2847  001296  0E00               	movlw	0
  2848  001298  6E22               	movwf	_TurnLeft+1,c
  2849  00129A  0E00               	movlw	0
  2850  00129C  6E21               	movwf	_TurnLeft,c
  2851  00129E                     i2l1807:
  2852                           
  2853                           ;interrupts.c: 217: TurnRight = 0;
  2854  00129E  0E00               	movlw	0
  2855  0012A0  6E24               	movwf	_TurnRight+1,c
  2856  0012A2  0E00               	movlw	0
  2857  0012A4  6E23               	movwf	_TurnRight,c
  2858  0012A6  D000               	goto	i2l1809
  2859  0012A8                     i2l1809:
  2860                           
  2861                           ;interrupts.c: 218: }
  2862                           ;interrupts.c: 219: moveMouse(merge(LMotorCounter,RMotorCounter));
  2863  0012A8  C034  F049         	movff	_RMotorCounter,merge@right
  2864  0012AC  5033               	movf	_LMotorCounter,w,c
  2865  0012AE  EC66  F00E         	call	_merge
  2866  0012B2  EC73  F00E         	call	_moveMouse
  2867                           
  2868                           ;interrupts.c: 220: MotorDelayCounter = 0;
  2869  0012B6  0E00               	movlw	0
  2870  0012B8  6E1A               	movwf	_MotorDelayCounter+1,c
  2871  0012BA  0E00               	movlw	0
  2872  0012BC  6E19               	movwf	_MotorDelayCounter,c
  2873  0012BE  D000               	goto	i2l1811
  2874  0012C0                     i2l1811:
  2875                           
  2876                           ;interrupts.c: 221: }
  2877                           ;interrupts.c: 223: MotorDelayCounter++;
  2878  0012C0  4A19               	infsnz	_MotorDelayCounter,f,c
  2879  0012C2  2A1A               	incf	_MotorDelayCounter+1,f,c
  2880                           
  2881                           ;interrupts.c: 224: INTCONbits.TMR0IF = 0;
  2882  0012C4  94F2               	bcf	intcon,2,c	;volatile
  2883  0012C6  D000               	goto	i2l107
  2884  0012C8                     i2l107:
  2885  0012C8  C05E  FFF5         	movff	??_high_isr+13,tablat
  2886  0012CC  C05D  FFF8         	movff	??_high_isr+12,tblptru
  2887  0012D0  C05C  FFF7         	movff	??_high_isr+11,tblptrh
  2888  0012D4  C05B  FFF6         	movff	??_high_isr+10,tblptrl
  2889  0012D8  C05A  FFF4         	movff	??_high_isr+9,prodh
  2890  0012DC  C059  FFF3         	movff	??_high_isr+8,prodl
  2891  0012E0  C058  FFDA         	movff	??_high_isr+7,fsr2h
  2892  0012E4  C057  FFD9         	movff	??_high_isr+6,fsr2l
  2893  0012E8  C056  FFE2         	movff	??_high_isr+5,fsr1h
  2894  0012EC  C055  FFE1         	movff	??_high_isr+4,fsr1l
  2895  0012F0  C054  FFEA         	movff	??_high_isr+3,fsr0h
  2896  0012F4  C053  FFE9         	movff	??_high_isr+2,fsr0l
  2897  0012F8  C052  FFFB         	movff	??_high_isr+1,pclatu
  2898  0012FC  C051  FFFA         	movff	??_high_isr,pclath
  2899  001300  0011               	retfie		f
  2900  001302                     __end_of_high_isr:
  2901                           	opt stack 0
  2902                           pclatu	equ	0xFFB
  2903                           pclath	equ	0xFFA
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon2	equ	0xFF1
  2912                           postinc0	equ	0xFEE
  2913                           fsr0h	equ	0xFEA
  2914                           fsr0l	equ	0xFE9
  2915                           wreg	equ	0xFE8
  2916                           fsr1h	equ	0xFE2
  2917                           fsr1l	equ	0xFE1
  2918                           bsr	equ	0xFE0
  2919                           postinc2	equ	0xFDE
  2920                           postdec2	equ	0xFDD
  2921                           fsr2h	equ	0xFDA
  2922                           fsr2l	equ	0xFD9
  2923                           status	equ	0xFD8
  2924                           
  2925 ;; *************** function _rotate *****************
  2926 ;; Defined at:
  2927 ;;		line 421 in file "interrupts.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  side            1    wreg     enum E4145
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  side            1   19[COMRAM] enum E4145
  2932 ;; Return value:  Size  Location     Type
  2933 ;;		None               void
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;Total ram usage:        1 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    1
  2948 ;; This function calls:
  2949 ;;		_motorCounterUpdate
  2950 ;; This function is called by:
  2951 ;;		_high_isr
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text14
  2956  001B36                     __ptext14:
  2957                           	opt stack 0
  2958  001B36                     _rotate:
  2959                           	opt stack 24
  2960                           
  2961                           ;incstack = 0
  2962                           ;rotate@side stored from wreg
  2963  001B36  6E4B               	movwf	rotate@side,c
  2964                           
  2965                           ;interrupts.c: 423: if (side == LEFT){
  2966  001B38  504B               	movf	rotate@side,w,c
  2967  001B3A  A4D8               	btfss	status,2,c
  2968  001B3C  D00B               	goto	i2l1645
  2969                           
  2970                           ;interrupts.c: 424: motorCounterUpdate(RIGHT,0);
  2971  001B3E  0E00               	movlw	0
  2972  001B40  6E49               	movwf	motorCounterUpdate@reverse,c
  2973  001B42  0E01               	movlw	1
  2974  001B44  EC00  F00C         	call	_motorCounterUpdate
  2975                           
  2976                           ;interrupts.c: 425: motorCounterUpdate(LEFT,1);
  2977  001B48  0E01               	movlw	1
  2978  001B4A  6E49               	movwf	motorCounterUpdate@reverse,c
  2979  001B4C  0E00               	movlw	0
  2980  001B4E  EC00  F00C         	call	_motorCounterUpdate
  2981                           
  2982                           ;interrupts.c: 426: } else {
  2983  001B52  D00B               	goto	i2l1647
  2984  001B54                     i2l1645:
  2985                           
  2986                           ;interrupts.c: 427: motorCounterUpdate(LEFT,0);
  2987  001B54  0E00               	movlw	0
  2988  001B56  6E49               	movwf	motorCounterUpdate@reverse,c
  2989  001B58  0E00               	movlw	0
  2990  001B5A  EC00  F00C         	call	_motorCounterUpdate
  2991                           
  2992                           ;interrupts.c: 428: motorCounterUpdate(RIGHT,1);
  2993  001B5E  0E01               	movlw	1
  2994  001B60  6E49               	movwf	motorCounterUpdate@reverse,c
  2995  001B62  0E01               	movlw	1
  2996  001B64  EC00  F00C         	call	_motorCounterUpdate
  2997  001B68  D000               	goto	i2l1647
  2998  001B6A                     i2l1647:
  2999                           
  3000                           ;interrupts.c: 429: }
  3001                           ;interrupts.c: 430: RotateCounter--;
  3002  001B6A  061F               	decf	_RotateCounter,f,c
  3003  001B6C  A0D8               	btfss	status,0,c
  3004  001B6E  0620               	decf	_RotateCounter+1,f,c
  3005  001B70  0012               	return		;funcret
  3006  001B72                     __end_of_rotate:
  3007                           	opt stack 0
  3008                           pclatu	equ	0xFFB
  3009                           pclath	equ	0xFFA
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           intcon2	equ	0xFF1
  3018                           postinc0	equ	0xFEE
  3019                           fsr0h	equ	0xFEA
  3020                           fsr0l	equ	0xFE9
  3021                           wreg	equ	0xFE8
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           bsr	equ	0xFE0
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function _forward *****************
  3032 ;; Defined at:
  3033 ;;		line 466 in file "interrupts.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;		None               void
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;Total ram usage:        0 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    1
  3054 ;; This function calls:
  3055 ;;		_motorCounterUpdate
  3056 ;; This function is called by:
  3057 ;;		_high_isr
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text15
  3062  001C7A                     __ptext15:
  3063                           	opt stack 0
  3064  001C7A                     _forward:
  3065                           	opt stack 24
  3066                           
  3067                           ;interrupts.c: 468: motorCounterUpdate(RIGHT,0);
  3068                           
  3069                           ;incstack = 0
  3070  001C7A  0E00               	movlw	0
  3071  001C7C  6E49               	movwf	motorCounterUpdate@reverse,c
  3072  001C7E  0E01               	movlw	1
  3073  001C80  EC00  F00C         	call	_motorCounterUpdate
  3074                           
  3075                           ;interrupts.c: 469: motorCounterUpdate(LEFT,0);
  3076  001C84  0E00               	movlw	0
  3077  001C86  6E49               	movwf	motorCounterUpdate@reverse,c
  3078  001C88  0E00               	movlw	0
  3079  001C8A  EC00  F00C         	call	_motorCounterUpdate
  3080                           
  3081                           ;interrupts.c: 470: ForwardCounter--;
  3082  001C8E  0615               	decf	_ForwardCounter,f,c
  3083  001C90  A0D8               	btfss	status,0,c
  3084  001C92  0616               	decf	_ForwardCounter+1,f,c
  3085  001C94  0012               	return		;funcret
  3086  001C96                     __end_of_forward:
  3087                           	opt stack 0
  3088                           pclatu	equ	0xFFB
  3089                           pclath	equ	0xFFA
  3090                           tblptru	equ	0xFF8
  3091                           tblptrh	equ	0xFF7
  3092                           tblptrl	equ	0xFF6
  3093                           tablat	equ	0xFF5
  3094                           prodh	equ	0xFF4
  3095                           prodl	equ	0xFF3
  3096                           intcon	equ	0xFF2
  3097                           intcon2	equ	0xFF1
  3098                           postinc0	equ	0xFEE
  3099                           fsr0h	equ	0xFEA
  3100                           fsr0l	equ	0xFE9
  3101                           wreg	equ	0xFE8
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           bsr	equ	0xFE0
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _Reversing *****************
  3112 ;; Defined at:
  3113 ;;		line 445 in file "interrupts.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    1
  3134 ;; This function calls:
  3135 ;;		_motorCounterUpdate
  3136 ;; This function is called by:
  3137 ;;		_high_isr
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text16
  3142  001C96                     __ptext16:
  3143                           	opt stack 0
  3144  001C96                     _Reversing:
  3145                           	opt stack 24
  3146                           
  3147                           ;interrupts.c: 447: motorCounterUpdate(RIGHT,1);
  3148                           
  3149                           ;incstack = 0
  3150  001C96  0E01               	movlw	1
  3151  001C98  6E49               	movwf	motorCounterUpdate@reverse,c
  3152  001C9A  0E01               	movlw	1
  3153  001C9C  EC00  F00C         	call	_motorCounterUpdate
  3154                           
  3155                           ;interrupts.c: 448: motorCounterUpdate(LEFT,1);
  3156  001CA0  0E01               	movlw	1
  3157  001CA2  6E49               	movwf	motorCounterUpdate@reverse,c
  3158  001CA4  0E00               	movlw	0
  3159  001CA6  EC00  F00C         	call	_motorCounterUpdate
  3160                           
  3161                           ;interrupts.c: 449: ReverseCounter--;
  3162  001CAA  061D               	decf	_ReverseCounter,f,c
  3163  001CAC  A0D8               	btfss	status,0,c
  3164  001CAE  061E               	decf	_ReverseCounter+1,f,c
  3165  001CB0  0012               	return		;funcret
  3166  001CB2                     __end_of_Reversing:
  3167                           	opt stack 0
  3168                           pclatu	equ	0xFFB
  3169                           pclath	equ	0xFFA
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           intcon	equ	0xFF2
  3177                           intcon2	equ	0xFF1
  3178                           postinc0	equ	0xFEE
  3179                           fsr0h	equ	0xFEA
  3180                           fsr0l	equ	0xFE9
  3181                           wreg	equ	0xFE8
  3182                           fsr1h	equ	0xFE2
  3183                           fsr1l	equ	0xFE1
  3184                           bsr	equ	0xFE0
  3185                           postinc2	equ	0xFDE
  3186                           postdec2	equ	0xFDD
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _KController *****************
  3192 ;; Defined at:
  3193 ;;		line 334 in file "interrupts.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  diff            2   23[COMRAM] int 
  3198 ;;  correctTo       1   22[COMRAM] enum E4145
  3199 ;; Return value:  Size  Location     Type
  3200 ;;		None               void
  3201 ;; Registers used:
  3202 ;;		wreg, status,2, status,0, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;Total ram usage:        5 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    1
  3215 ;; This function calls:
  3216 ;;		_ABS
  3217 ;;		_merge
  3218 ;;		_motorCounterUpdate
  3219 ;;		_moveMouse
  3220 ;; This function is called by:
  3221 ;;		_high_isr
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text17
  3226  0016E6                     __ptext17:
  3227                           	opt stack 0
  3228  0016E6                     _KController:
  3229                           	opt stack 24
  3230                           
  3231                           ;interrupts.c: 336: Side correctTo;
  3232                           ;interrupts.c: 337: int diff = 0;
  3233                           
  3234                           ;incstack = 0
  3235  0016E6  0E00               	movlw	0
  3236  0016E8  6E50               	movwf	KController@diff+1,c
  3237  0016EA  0E00               	movlw	0
  3238  0016EC  6E4F               	movwf	KController@diff,c
  3239                           
  3240                           ;interrupts.c: 338: if(controllerSteps > 0){
  3241  0016EE  505F               	movf	_controllerSteps,w,c
  3242  0016F0  B4D8               	btfsc	status,2,c
  3243  0016F2  D00F               	goto	i2l1599
  3244                           
  3245                           ;interrupts.c: 339: motorCounterUpdate(RIGHT,0);
  3246  0016F4  0E00               	movlw	0
  3247  0016F6  6E49               	movwf	motorCounterUpdate@reverse,c
  3248  0016F8  0E01               	movlw	1
  3249  0016FA  EC00  F00C         	call	_motorCounterUpdate
  3250                           
  3251                           ;interrupts.c: 340: motorCounterUpdate(LEFT,0);
  3252  0016FE  0E00               	movlw	0
  3253  001700  6E49               	movwf	motorCounterUpdate@reverse,c
  3254  001702  0E00               	movlw	0
  3255  001704  EC00  F00C         	call	_motorCounterUpdate
  3256                           
  3257                           ;interrupts.c: 341: controllerSteps--;
  3258  001708  065F               	decf	_controllerSteps,f,c
  3259                           
  3260                           ;interrupts.c: 342: ControllerCounter--;
  3261  00170A  0611               	decf	_ControllerCounter,f,c
  3262  00170C  A0D8               	btfss	status,0,c
  3263  00170E  0612               	decf	_ControllerCounter+1,f,c
  3264                           
  3265                           ;interrupts.c: 343: return;
  3266  001710  D076               	goto	i2l162
  3267  001712                     i2l1599:
  3268                           
  3269                           ;interrupts.c: 344: }
  3270                           ;interrupts.c: 345: if((sensorValue[0] > 90 && sensorValue[1] > 91))
  3271  001712  BE0A               	btfsc	_sensorValue+1,7,c
  3272  001714  D069               	goto	i2l1631
  3273  001716  500A               	movf	_sensorValue+1,w,c
  3274  001718  E104               	bnz	i2u104_40
  3275  00171A  0E5B               	movlw	91
  3276  00171C  5C09               	subwf	_sensorValue,w,c
  3277  00171E  A0D8               	btfss	status,0,c
  3278  001720  D063               	goto	i2l1631
  3279  001722                     i2u104_40:
  3280  001722  BE0C               	btfsc	_sensorValue+3,7,c
  3281  001724  D061               	goto	i2l1631
  3282  001726  500C               	movf	_sensorValue+3,w,c
  3283  001728  E104               	bnz	i2u105_40
  3284  00172A  0E5C               	movlw	92
  3285  00172C  5C0B               	subwf	_sensorValue+2,w,c
  3286  00172E  A0D8               	btfss	status,0,c
  3287  001730  D05B               	goto	i2l1631
  3288  001732                     i2u105_40:
  3289                           
  3290                           ;interrupts.c: 346: {
  3291                           ;interrupts.c: 347: diff = ABS(sensorValue[1] - sensorValue[0]);
  3292  001732  C009  F04C         	movff	_sensorValue,??_KController
  3293  001736  C00A  F04D         	movff	_sensorValue+1,??_KController+1
  3294  00173A  1E4C               	comf	??_KController,f,c
  3295  00173C  1E4D               	comf	??_KController+1,f,c
  3296  00173E  4A4C               	infsnz	??_KController,f,c
  3297  001740  2A4D               	incf	??_KController+1,f,c
  3298  001742  500B               	movf	_sensorValue+2,w,c
  3299  001744  244C               	addwf	??_KController,w,c
  3300  001746  6E49               	movwf	ABS@x,c
  3301  001748  500C               	movf	_sensorValue+3,w,c
  3302  00174A  204D               	addwfc	??_KController+1,w,c
  3303  00174C  6E4A               	movwf	ABS@x+1,c
  3304  00174E  EC59  F00E         	call	_ABS	;wreg free
  3305  001752  C049  F04F         	movff	?_ABS,KController@diff
  3306  001756  C04A  F050         	movff	?_ABS+1,KController@diff+1
  3307                           
  3308                           ;interrupts.c: 349: if(sensorValue[0] > sensorValue[1])
  3309  00175A  5009               	movf	_sensorValue,w,c
  3310  00175C  5C0B               	subwf	_sensorValue+2,w,c
  3311  00175E  500C               	movf	_sensorValue+3,w,c
  3312  001760  0A80               	xorlw	128
  3313  001762  6E4C               	movwf	??_KController& (0+255),c
  3314  001764  500A               	movf	_sensorValue+1,w,c
  3315  001766  0A80               	xorlw	128
  3316  001768  584C               	subwfb	??_KController& (0+255),w,c
  3317  00176A  B0D8               	btfsc	status,0,c
  3318  00176C  D00F               	goto	i2l1613
  3319                           
  3320                           ;interrupts.c: 350: {
  3321                           ;interrupts.c: 351: correctTo = LEFT;
  3322  00176E  0E00               	movlw	0
  3323  001770  6E4E               	movwf	KController@correctTo,c
  3324                           
  3325                           ;interrupts.c: 352: motorCounterUpdate(correctTo,0);
  3326  001772  0E00               	movlw	0
  3327  001774  6E49               	movwf	motorCounterUpdate@reverse,c
  3328  001776  504E               	movf	KController@correctTo,w,c
  3329  001778  EC00  F00C         	call	_motorCounterUpdate
  3330                           
  3331                           ;interrupts.c: 353: moveMouse(merge(LMotorCounter,RMotorCounter));
  3332  00177C  C034  F049         	movff	_RMotorCounter,merge@right
  3333  001780  5033               	movf	_LMotorCounter,w,c
  3334  001782  EC66  F00E         	call	_merge
  3335  001786  EC73  F00E         	call	_moveMouse
  3336                           
  3337                           ;interrupts.c: 354: }
  3338  00178A  D00F               	goto	i2l1619
  3339  00178C                     i2l1613:
  3340                           
  3341                           ;interrupts.c: 355: else
  3342                           ;interrupts.c: 356: {
  3343                           ;interrupts.c: 357: correctTo = RIGHT;
  3344  00178C  0E01               	movlw	1
  3345  00178E  6E4E               	movwf	KController@correctTo,c
  3346                           
  3347                           ;interrupts.c: 358: motorCounterUpdate(correctTo,0);
  3348  001790  0E00               	movlw	0
  3349  001792  6E49               	movwf	motorCounterUpdate@reverse,c
  3350  001794  504E               	movf	KController@correctTo,w,c
  3351  001796  EC00  F00C         	call	_motorCounterUpdate
  3352                           
  3353                           ;interrupts.c: 359: moveMouse(merge(LMotorCounter,RMotorCounter));
  3354  00179A  C034  F049         	movff	_RMotorCounter,merge@right
  3355  00179E  5033               	movf	_LMotorCounter,w,c
  3356  0017A0  EC66  F00E         	call	_merge
  3357  0017A4  EC73  F00E         	call	_moveMouse
  3358  0017A8  D000               	goto	i2l1619
  3359  0017AA                     i2l1619:
  3360                           
  3361                           ;interrupts.c: 360: }
  3362                           ;interrupts.c: 362: if(diff > 60)
  3363  0017AA  BE50               	btfsc	KController@diff+1,7,c
  3364  0017AC  D008               	goto	i2l1623
  3365  0017AE  5050               	movf	KController@diff+1,w,c
  3366  0017B0  E104               	bnz	i2u107_40
  3367  0017B2  0E3D               	movlw	61
  3368  0017B4  5C4F               	subwf	KController@diff,w,c
  3369  0017B6  A0D8               	btfss	status,0,c
  3370  0017B8  D002               	goto	i2l1623
  3371  0017BA                     i2u107_40:
  3372                           
  3373                           ;interrupts.c: 363: controllerSteps = 1;
  3374  0017BA  0E01               	movlw	1
  3375  0017BC  D013               	goto	L10
  3376  0017BE                     i2l1623:
  3377                           
  3378                           ;interrupts.c: 364: else if(diff <= 60 && diff > 20)
  3379  0017BE  BE50               	btfsc	KController@diff+1,7,c
  3380  0017C0  D006               	goto	i2l1625
  3381  0017C2  5050               	movf	KController@diff+1,w,c
  3382  0017C4  E10E               	bnz	i2l1629
  3383  0017C6  0E3D               	movlw	61
  3384  0017C8  5C4F               	subwf	KController@diff,w,c
  3385  0017CA  B0D8               	btfsc	status,0,c
  3386  0017CC  D00A               	goto	i2l1629
  3387  0017CE                     i2l1625:
  3388  0017CE  BE50               	btfsc	KController@diff+1,7,c
  3389  0017D0  D008               	goto	i2l1629
  3390  0017D2  5050               	movf	KController@diff+1,w,c
  3391  0017D4  E104               	bnz	i2u109_40
  3392  0017D6  0E15               	movlw	21
  3393  0017D8  5C4F               	subwf	KController@diff,w,c
  3394  0017DA  A0D8               	btfss	status,0,c
  3395  0017DC  D002               	goto	i2l1629
  3396  0017DE                     i2u109_40:
  3397                           
  3398                           ;interrupts.c: 365: controllerSteps = 5;
  3399  0017DE  0E05               	movlw	5
  3400  0017E0  D001               	goto	L10
  3401  0017E2                     i2l1629:
  3402                           
  3403                           ;interrupts.c: 366: else
  3404                           ;interrupts.c: 367: controllerSteps = 10;
  3405  0017E2  0E0A               	movlw	10
  3406  0017E4                     L10:
  3407  0017E4  6E5F               	movwf	_controllerSteps,c
  3408                           
  3409                           ;interrupts.c: 368: }
  3410  0017E6  D00B               	goto	i2l162
  3411  0017E8                     i2l1631:
  3412                           
  3413                           ;interrupts.c: 369: else {
  3414                           ;interrupts.c: 370: motorCounterUpdate(RIGHT,0);
  3415  0017E8  0E00               	movlw	0
  3416  0017EA  6E49               	movwf	motorCounterUpdate@reverse,c
  3417  0017EC  0E01               	movlw	1
  3418  0017EE  EC00  F00C         	call	_motorCounterUpdate
  3419                           
  3420                           ;interrupts.c: 371: motorCounterUpdate(LEFT,0);
  3421  0017F2  0E00               	movlw	0
  3422  0017F4  6E49               	movwf	motorCounterUpdate@reverse,c
  3423  0017F6  0E00               	movlw	0
  3424  0017F8  EC00  F00C         	call	_motorCounterUpdate
  3425  0017FC  D000               	goto	i2l162
  3426  0017FE                     i2l162:
  3427  0017FE  0012               	return		;funcret
  3428  001800                     __end_of_KController:
  3429                           	opt stack 0
  3430                           pclatu	equ	0xFFB
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           intcon2	equ	0xFF1
  3440                           postinc0	equ	0xFEE
  3441                           fsr0h	equ	0xFEA
  3442                           fsr0l	equ	0xFE9
  3443                           wreg	equ	0xFE8
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           bsr	equ	0xFE0
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _moveMouse *****************
  3454 ;; Defined at:
  3455 ;;		line 321 in file "interrupts.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  action          1    wreg     unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  action          1   17[COMRAM] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		wreg
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;Total ram usage:        1 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_high_isr
  3479 ;;		_KController
  3480 ;;		_FrontController
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text18
  3485  001CE6                     __ptext18:
  3486                           	opt stack 0
  3487  001CE6                     _moveMouse:
  3488                           	opt stack 25
  3489                           
  3490                           ;incstack = 0
  3491                           ;moveMouse@action stored from wreg
  3492  001CE6  6E49               	movwf	moveMouse@action,c
  3493                           
  3494                           ;interrupts.c: 323: LATC = action;
  3495  001CE8  C049  FF8B         	movff	moveMouse@action,3979	;volatile
  3496  001CEC  0012               	return		;funcret
  3497  001CEE                     __end_of_moveMouse:
  3498                           	opt stack 0
  3499                           pclatu	equ	0xFFB
  3500                           pclath	equ	0xFFA
  3501                           tblptru	equ	0xFF8
  3502                           tblptrh	equ	0xFF7
  3503                           tblptrl	equ	0xFF6
  3504                           tablat	equ	0xFF5
  3505                           prodh	equ	0xFF4
  3506                           prodl	equ	0xFF3
  3507                           intcon	equ	0xFF2
  3508                           intcon2	equ	0xFF1
  3509                           postinc0	equ	0xFEE
  3510                           fsr0h	equ	0xFEA
  3511                           fsr0l	equ	0xFE9
  3512                           wreg	equ	0xFE8
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           bsr	equ	0xFE0
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _motorCounterUpdate *****************
  3523 ;; Defined at:
  3524 ;;		line 269 in file "interrupts.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  side            1    wreg     enum E4145
  3527 ;;  reverse         1   17[COMRAM] unsigned char 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  side            1   18[COMRAM] enum E4145
  3530 ;; Return value:  Size  Location     Type
  3531 ;;		None               void
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;Total ram usage:        2 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_high_isr
  3549 ;;		_KController
  3550 ;;		_rotate
  3551 ;;		_Reversing
  3552 ;;		_forward
  3553 ;;		_FrontController
  3554 ;;		_smoothTurn
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text19
  3559  001800                     __ptext19:
  3560                           	opt stack 0
  3561  001800                     _motorCounterUpdate:
  3562                           	opt stack 24
  3563                           
  3564                           ;incstack = 0
  3565                           ;motorCounterUpdate@side stored from wreg
  3566  001800  6E4A               	movwf	motorCounterUpdate@side,c
  3567                           
  3568                           ;interrupts.c: 271: if(side == LEFT && reverse == 1)
  3569  001802  504A               	movf	motorCounterUpdate@side,w,c
  3570  001804  A4D8               	btfss	status,2,c
  3571  001806  D01B               	goto	i2l1483
  3572  001808  0449               	decf	motorCounterUpdate@reverse,w,c
  3573  00180A  B4D8               	btfsc	status,2,c
  3574  00180C  D00B               	goto	i2l1481
  3575  00180E  D017               	goto	i2l1483
  3576                           
  3577                           ;interrupts.c: 272: {
  3578                           ;interrupts.c: 273: switch(LMotorCounter)
  3579  001810  D009               	goto	i2l1481
  3580  001812                     i2l1471:
  3581  001812  0E02               	movlw	2
  3582  001814  D004               	goto	L13
  3583  001816                     i2l1473:
  3584  001816  0E04               	movlw	4
  3585  001818  D002               	goto	L13
  3586                           
  3587                           ;interrupts.c: 277: case 0b00000100: LMotorCounter = 0b00001000; break;
  3588  00181A  D03E               	goto	i2l1515
  3589                           
  3590                           ;interrupts.c: 278: case 0b00001000: LMotorCounter = 0b00000001; break;
  3591  00181C  D039               	goto	i2l1509
  3592  00181E                     L13:
  3593  00181E  6E33               	movwf	_LMotorCounter,c
  3594  001820  D068               	goto	i2l148
  3595                           
  3596                           ;interrupts.c: 279: default: LMotorCounter = 0b00000001;
  3597  001822  D036               	goto	i2l1509
  3598  001824                     i2l1481:
  3599  001824  5033               	movf	_LMotorCounter,w,c
  3600                           
  3601                           ; Switch size 1, requested type "space"
  3602                           ; Number of cases is 4, Range of values is 1 to 8
  3603                           ; switch strategies available:
  3604                           ; Name         Instructions Cycles
  3605                           ; simple_byte           13     7 (average)
  3606                           ;	Chosen strategy is simple_byte
  3607  001826  0A01               	xorlw	1	; case 1
  3608  001828  B4D8               	btfsc	status,2,c
  3609  00182A  D7F3               	goto	i2l1471
  3610  00182C  0A03               	xorlw	3	; case 2
  3611  00182E  B4D8               	btfsc	status,2,c
  3612  001830  D7F2               	goto	i2l1473
  3613  001832  0A06               	xorlw	6	; case 4
  3614  001834  B4D8               	btfsc	status,2,c
  3615  001836  D030               	goto	i2l1515
  3616  001838  0A0C               	xorlw	12	; case 8
  3617  00183A  D02A               	goto	i2l1509
  3618                           
  3619                           ;interrupts.c: 281: } else if(side == RIGHT && reverse == 1)
  3620  00183C  D05A               	goto	i2l148
  3621  00183E                     i2l1483:
  3622  00183E  044A               	decf	motorCounterUpdate@side,w,c
  3623  001840  A4D8               	btfss	status,2,c
  3624  001842  D01D               	goto	i2l1501
  3625  001844  0449               	decf	motorCounterUpdate@reverse,w,c
  3626  001846  B4D8               	btfsc	status,2,c
  3627  001848  D00B               	goto	i2l1499
  3628  00184A  D019               	goto	i2l1501
  3629                           
  3630                           ;interrupts.c: 282: {
  3631                           ;interrupts.c: 283: switch(RMotorCounter)
  3632  00184C  D009               	goto	i2l1499
  3633  00184E                     i2l1489:
  3634  00184E  0E08               	movlw	8
  3635  001850  D040               	goto	L21
  3636  001852                     i2l1491:
  3637  001852  0E01               	movlw	1
  3638  001854  D03E               	goto	L21
  3639  001856                     i2l1493:
  3640  001856  0E02               	movlw	2
  3641  001858  D03C               	goto	L21
  3642  00185A                     i2l1495:
  3643  00185A  0E04               	movlw	4
  3644  00185C  D03A               	goto	L21
  3645                           
  3646                           ;interrupts.c: 289: default: RMotorCounter = 0b00001000;
  3647  00185E  D7F7               	goto	i2l1489
  3648  001860                     i2l1499:
  3649  001860  5034               	movf	_RMotorCounter,w,c
  3650                           
  3651                           ; Switch size 1, requested type "space"
  3652                           ; Number of cases is 4, Range of values is 1 to 8
  3653                           ; switch strategies available:
  3654                           ; Name         Instructions Cycles
  3655                           ; simple_byte           13     7 (average)
  3656                           ;	Chosen strategy is simple_byte
  3657  001862  0A01               	xorlw	1	; case 1
  3658  001864  B4D8               	btfsc	status,2,c
  3659  001866  D7F3               	goto	i2l1489
  3660  001868  0A03               	xorlw	3	; case 2
  3661  00186A  B4D8               	btfsc	status,2,c
  3662  00186C  D7F2               	goto	i2l1491
  3663  00186E  0A06               	xorlw	6	; case 4
  3664  001870  B4D8               	btfsc	status,2,c
  3665  001872  D7F1               	goto	i2l1493
  3666  001874  0A0C               	xorlw	12	; case 8
  3667  001876  B4D8               	btfsc	status,2,c
  3668  001878  D7F0               	goto	i2l1495
  3669  00187A  D7E9               	goto	i2l1489
  3670                           
  3671                           ;interrupts.c: 291: } else if(side == LEFT && reverse == 0)
  3672  00187C  D03A               	goto	i2l148
  3673  00187E                     i2l1501:
  3674  00187E  504A               	movf	motorCounterUpdate@side,w,c
  3675  001880  A4D8               	btfss	status,2,c
  3676  001882  D01B               	goto	i2l1519
  3677  001884  5049               	movf	motorCounterUpdate@reverse,w,c
  3678  001886  B4D8               	btfsc	status,2,c
  3679  001888  D009               	goto	i2l1517
  3680  00188A  D017               	goto	i2l1519
  3681                           
  3682                           ;interrupts.c: 292: {
  3683                           ;interrupts.c: 293: switch(LMotorCounter)
  3684  00188C  D007               	goto	i2l1517
  3685                           
  3686                           ;interrupts.c: 294: {
  3687                           ;interrupts.c: 295: case 0b00000001: LMotorCounter = 0b00001000; break;
  3688  00188E  D004               	goto	i2l1515
  3689  001890                     i2l1509:
  3690  001890  0E01               	movlw	1
  3691  001892  D7C5               	goto	L13
  3692                           
  3693                           ;interrupts.c: 297: case 0b00000100: LMotorCounter = 0b00000010; break;
  3694  001894  D7BE               	goto	i2l1471
  3695                           
  3696                           ;interrupts.c: 298: case 0b00001000: LMotorCounter = 0b00000100; break;
  3697  001896  D7BF               	goto	i2l1473
  3698  001898                     i2l1515:
  3699  001898  0E08               	movlw	8
  3700  00189A  D7C1               	goto	L13
  3701  00189C                     i2l1517:
  3702  00189C  5033               	movf	_LMotorCounter,w,c
  3703                           
  3704                           ; Switch size 1, requested type "space"
  3705                           ; Number of cases is 4, Range of values is 1 to 8
  3706                           ; switch strategies available:
  3707                           ; Name         Instructions Cycles
  3708                           ; simple_byte           13     7 (average)
  3709                           ;	Chosen strategy is simple_byte
  3710  00189E  0A01               	xorlw	1	; case 1
  3711  0018A0  B4D8               	btfsc	status,2,c
  3712  0018A2  D7FA               	goto	i2l1515
  3713  0018A4  0A03               	xorlw	3	; case 2
  3714  0018A6  B4D8               	btfsc	status,2,c
  3715  0018A8  D7F3               	goto	i2l1509
  3716  0018AA  0A06               	xorlw	6	; case 4
  3717  0018AC  B4D8               	btfsc	status,2,c
  3718  0018AE  D7B1               	goto	i2l1471
  3719  0018B0  0A0C               	xorlw	12	; case 8
  3720  0018B2  B4D8               	btfsc	status,2,c
  3721  0018B4  D7B0               	goto	i2l1473
  3722  0018B6  D7F0               	goto	i2l1515
  3723                           
  3724                           ;interrupts.c: 301: } else if(side == RIGHT && reverse == 0)
  3725  0018B8  D01C               	goto	i2l148
  3726  0018BA                     i2l1519:
  3727  0018BA  044A               	decf	motorCounterUpdate@side,w,c
  3728  0018BC  A4D8               	btfss	status,2,c
  3729  0018BE  D019               	goto	i2l148
  3730  0018C0  5049               	movf	motorCounterUpdate@reverse,w,c
  3731  0018C2  B4D8               	btfsc	status,2,c
  3732  0018C4  D009               	goto	i2l1535
  3733  0018C6  D015               	goto	i2l148
  3734                           
  3735                           ;interrupts.c: 302: {
  3736                           ;interrupts.c: 303: switch(RMotorCounter)
  3737  0018C8  D007               	goto	i2l1535
  3738                           
  3739                           ;interrupts.c: 304: {
  3740                           ;interrupts.c: 305: case 0b00000001: RMotorCounter = 0b00000010; break;
  3741  0018CA  D7C5               	goto	i2l1493
  3742                           
  3743                           ;interrupts.c: 306: case 0b00000010: RMotorCounter = 0b00000100; break;
  3744  0018CC  D7C6               	goto	i2l1495
  3745                           
  3746                           ;interrupts.c: 307: case 0b00000100: RMotorCounter = 0b00001000; break;
  3747  0018CE  D7BF               	goto	i2l1489
  3748                           
  3749                           ;interrupts.c: 308: case 0b00001000: RMotorCounter = 0b00000001; break;
  3750  0018D0  D7C0               	goto	i2l1491
  3751  0018D2                     L21:
  3752  0018D2  6E34               	movwf	_RMotorCounter,c
  3753  0018D4  D00E               	goto	i2l148
  3754                           
  3755                           ;interrupts.c: 309: default: RMotorCounter = 0b00000001;
  3756  0018D6  D7BD               	goto	i2l1491
  3757  0018D8                     i2l1535:
  3758  0018D8  5034               	movf	_RMotorCounter,w,c
  3759                           
  3760                           ; Switch size 1, requested type "space"
  3761                           ; Number of cases is 4, Range of values is 1 to 8
  3762                           ; switch strategies available:
  3763                           ; Name         Instructions Cycles
  3764                           ; simple_byte           13     7 (average)
  3765                           ;	Chosen strategy is simple_byte
  3766  0018DA  0A01               	xorlw	1	; case 1
  3767  0018DC  B4D8               	btfsc	status,2,c
  3768  0018DE  D7BB               	goto	i2l1493
  3769  0018E0  0A03               	xorlw	3	; case 2
  3770  0018E2  B4D8               	btfsc	status,2,c
  3771  0018E4  D7BA               	goto	i2l1495
  3772  0018E6  0A06               	xorlw	6	; case 4
  3773  0018E8  B4D8               	btfsc	status,2,c
  3774  0018EA  D7B1               	goto	i2l1489
  3775  0018EC  0A0C               	xorlw	12	; case 8
  3776  0018EE  D7B1               	goto	i2l1491
  3777  0018F0  D000               	goto	i2l148
  3778  0018F2                     i2l148:
  3779  0018F2  0012               	return		;funcret
  3780  0018F4                     __end_of_motorCounterUpdate:
  3781                           	opt stack 0
  3782                           pclatu	equ	0xFFB
  3783                           pclath	equ	0xFFA
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           intcon2	equ	0xFF1
  3792                           postinc0	equ	0xFEE
  3793                           fsr0h	equ	0xFEA
  3794                           fsr0l	equ	0xFE9
  3795                           wreg	equ	0xFE8
  3796                           fsr1h	equ	0xFE2
  3797                           fsr1l	equ	0xFE1
  3798                           bsr	equ	0xFE0
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _merge *****************
  3806 ;; Defined at:
  3807 ;;		line 314 in file "interrupts.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  left            1    wreg     unsigned char 
  3810 ;;  right           1   17[COMRAM] unsigned char 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  left            1   18[COMRAM] unsigned char 
  3813 ;;  merged          1   19[COMRAM] unsigned char 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      unsigned char 
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3823 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;Total ram usage:        3 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_high_isr
  3833 ;;		_KController
  3834 ;;		_FrontController
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text20
  3839  001CCC                     __ptext20:
  3840                           	opt stack 0
  3841  001CCC                     _merge:
  3842                           	opt stack 25
  3843                           
  3844                           ;incstack = 0
  3845                           ;merge@left stored from wreg
  3846  001CCC  6E4A               	movwf	merge@left,c
  3847                           
  3848                           ;interrupts.c: 316: unsigned char merged;
  3849                           ;interrupts.c: 317: merged = left + (right << 4);
  3850  001CCE  3849               	swapf	merge@right,w,c
  3851  001CD0  0BF0               	andlw	240
  3852  001CD2  244A               	addwf	merge@left,w,c
  3853  001CD4  6E4B               	movwf	merge@merged,c
  3854                           
  3855                           ;interrupts.c: 318: return merged;
  3856  001CD6  504B               	movf	merge@merged,w,c
  3857  001CD8  D000               	goto	i2l151
  3858  001CDA                     i2l151:
  3859  001CDA  0012               	return		;funcret
  3860  001CDC                     __end_of_merge:
  3861                           	opt stack 0
  3862                           pclatu	equ	0xFFB
  3863                           pclath	equ	0xFFA
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           intcon	equ	0xFF2
  3871                           intcon2	equ	0xFF1
  3872                           postinc0	equ	0xFEE
  3873                           fsr0h	equ	0xFEA
  3874                           fsr0l	equ	0xFE9
  3875                           wreg	equ	0xFE8
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           bsr	equ	0xFE0
  3879                           postinc2	equ	0xFDE
  3880                           postdec2	equ	0xFDD
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _ABS *****************
  3886 ;; Defined at:
  3887 ;;		line 327 in file "interrupts.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  x               2   17[COMRAM] int 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2   17[COMRAM] int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:        2 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_KController
  3911 ;;		_FrontController
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text21
  3916  001CB2                     __ptext21:
  3917                           	opt stack 0
  3918  001CB2                     _ABS:
  3919                           	opt stack 24
  3920                           
  3921                           ;interrupts.c: 329: if(x<0) x = -x;
  3922                           
  3923                           ;incstack = 0
  3924  001CB2  AE4A               	btfss	ABS@x+1,7,c
  3925  001CB4  D005               	goto	i2l1547
  3926  001CB6  6C49               	negf	ABS@x,c
  3927  001CB8  1E4A               	comf	ABS@x+1,f,c
  3928  001CBA  B0D8               	btfsc	status,0,c
  3929  001CBC  2A4A               	incf	ABS@x+1,f,c
  3930  001CBE  D000               	goto	i2l1547
  3931  001CC0                     i2l1547:
  3932                           
  3933                           ;interrupts.c: 330: return x;
  3934  001CC0  C049  F049         	movff	ABS@x,?_ABS
  3935  001CC4  C04A  F04A         	movff	ABS@x+1,?_ABS+1
  3936  001CC8  D000               	goto	i2l158
  3937  001CCA                     i2l158:
  3938  001CCA  0012               	return		;funcret
  3939  001CCC                     __end_of_ABS:
  3940                           	opt stack 0
  3941                           pclatu	equ	0xFFB
  3942                           pclath	equ	0xFFA
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           intcon	equ	0xFF2
  3950                           intcon2	equ	0xFF1
  3951                           postinc0	equ	0xFEE
  3952                           fsr0h	equ	0xFEA
  3953                           fsr0l	equ	0xFE9
  3954                           wreg	equ	0xFE8
  3955                           fsr1h	equ	0xFE2
  3956                           fsr1l	equ	0xFE1
  3957                           bsr	equ	0xFE0
  3958                           postinc2	equ	0xFDE
  3959                           postdec2	equ	0xFDD
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           pclatu	equ	0xFFB
  3964                           pclath	equ	0xFFA
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           intcon2	equ	0xFF1
  3973                           postinc0	equ	0xFEE
  3974                           fsr0h	equ	0xFEA
  3975                           fsr0l	equ	0xFE9
  3976                           wreg	equ	0xFE8
  3977                           fsr1h	equ	0xFE2
  3978                           fsr1l	equ	0xFE1
  3979                           bsr	equ	0xFE0
  3980                           postinc2	equ	0xFDE
  3981                           postdec2	equ	0xFDD
  3982                           fsr2h	equ	0xFDA
  3983                           fsr2l	equ	0xFD9
  3984                           status	equ	0xFD8
  3985                           
  3986                           	psect	rparam
  3987  0000                     pclatu	equ	0xFFB
  3988                           pclath	equ	0xFFA
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           intcon	equ	0xFF2
  3996                           intcon2	equ	0xFF1
  3997                           postinc0	equ	0xFEE
  3998                           fsr0h	equ	0xFEA
  3999                           fsr0l	equ	0xFE9
  4000                           wreg	equ	0xFE8
  4001                           fsr1h	equ	0xFE2
  4002                           fsr1l	equ	0xFE1
  4003                           bsr	equ	0xFE0
  4004                           postinc2	equ	0xFDE
  4005                           postdec2	equ	0xFDD
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      95
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8243
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1470
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2082
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1448
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      5F       1       74.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4       6        0.0%
DATA                 0      0      D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 01 18:36:54 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l320 1BD4                             l321 1BDC                             l314 162A  
                           l307 15C4                             l324 1C08                             l325 1C10  
                           l328 1BA8                             l521 1AB4                             l293 1C78  
                           l279 1AE4                             l288 1C64                             _ABS 1CB2  
                  __CFG_CPB$OFF 000000                             _MAX 1BDE                             _MIN 1BAA  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1C7A                    _rotatingSide 0037  
                           wreg 000FE8                            ABS@x 0049                            ?_ABS 0049  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l2013 15D4                            l2023 1612  
                          l2033 16C6                            l2017 15EE                            l2019 15F8  
                          l2037 16D0                            l2059 1C50                            l1921 1A48  
                          l1913 1A1C                            l1931 1A84                            l1923 1A52  
                          l1907 1A04                            l1919 1A3A                            l1935 1A94  
                          l1945 1ACC                            l1939 1AAA                            l1971 134A  
                          l1957 1C72                            l1981 14EC                            l1965 1326  
                          l1975 13B8                            l1985 1546                            l1977 14D6  
                          l1987 15AE                            _LATC 000F8B                            u1660 1324  
                          u1670 1348                            u1755 1638                            u1787 1AD4  
                          _main 1C3A                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1B36           __end_of_setCorrection 19E6                           ??_ABS 004B  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0038                 __end_of___awdiv 1AB6                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l107 12C8                           i2l151 1CDA  
                         i2l162 17FE                           i2l148 18F2                           i2l158 1CCA  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1CDC  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1AB6  
                         _merge 1CCC                 __end_of_forward 1C96                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0038  
             _ControllerCounter 0011                 __initialization 1C12                    __end_of_main 1C5C  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0049                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1501 187E                          i2l1515 1898  
                        i2l1509 1890                          i2l1517 189C                          i2l1613 178C  
                        i2l1535 18D8                          i2l1519 18BA                          i2l1471 1812  
                        i2l1623 17BE                          i2l1631 17E8                          i2l1473 1816  
                        i2l1481 1824                          i2l1625 17CE                          i2l1801 127E  
                        i2l1547 1CC0                          i2l1491 1852                          i2l1483 183E  
                        i2l1619 17AA                          i2l1731 10D6                          i2l1723 10A4  
                        i2l1811 12C0                          i2l1493 1856                          i2l1629 17E2  
                        i2l1645 1B54                          i2l1733 10E6                          i2l1495 185A  
                        i2l1647 1B6A                          i2l1807 129E                          i2l1743 1106  
                        i2l1727 10B8                          i2l1719 1090                          i2l1489 184E  
                        i2l1737 10F4                          i2l1809 12A8                          i2l1499 1860  
                        i2l1763 118A                          i2l1755 115E                          i2l1747 1128  
                        i2l1765 1194                          i2l1757 116E                          i2l1599 1712  
                        i2l1791 1234                          i2l1775 11C6                          i2l1767 119A  
                        i2l1777 11D0                          i2l1769 11AA                          i2l1779 11D6  
                        i2l1789 1222                          i2l1799 1274                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 004B                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 1302                          ___wmul 1B72  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 002B  
                        _errorP 002D                          delay@x 0083                          clear_0 1C18  
              ___awdiv@quotient 0086                          _rotate 1B36              __size_of_Reversing 001C  
                  __pdataCOMRAM 005F                       ??_forward 004B                    __mediumconst 0000  
                     ??_low_isr 0038                  _ReverseCounter 001D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1C30                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0038                  __pcstackCOMRAM 0038                   __end_of_delay 1AFA  
                    _TurnedLeft 0025                 moveMouse@action 0049                   __end_of_merge 1CDC  
          KController@correctTo 004E      __end_of_motorCounterUpdate 18F4                  _ForwardCounter 0015  
                       ??_delay 0082                         ??_merge 004A              _AlgorithmSelection 1C5C  
                  _LTurnCounter 0017               __end_of_Reversing 1CB2                      _delay_time 0029  
             _MotorDelayCounter 0019             ?_AlgorithmSelection 0038            setCorrection@sideAvg 008A  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0038  
                       _INTCON2 000FF1                         _OSCTUNE 000F9B            ??_AlgorithmSelection 0080  
                     ?_high_isr 0038                         _Deadend 0013                   _LMotorCounter 0033  
                       _InitApp 1AFA                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 19E6                 __size_of___wmul 0038                    __psmallconst 1000  
                       __pcinit 1C12                         __ramtop 1000                         __ptext0 1C3A  
                       __ptext1 18F4                         __ptext2 15C6                         __ptext3 1302  
                       __ptext4 1B72                         __ptext5 19E6                         __ptext6 1BAA  
                       __ptext7 1BDE                         __ptext8 1AFA                         __ptext9 1AB6  
               __size_of_rotate 003C                    __size_of_ABS 001A                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1C7A                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0038                      ??_high_isr 0051  
                __pintcode_body 1006          __size_of_setCorrection 00F2            end_of_initialization 1C30  
              _sensorCorrection 0001               __end_of_moveMouse 1CEE                   __Lmediumconst 0000  
                       int_func 1006                 _controllerSteps 005F                      _justTurned 0036  
          __size_of_KController 011A                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _TRISBbits 000F93                       _TRISEbits 000F96  
                ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1CE6                      _totalError 0031  
                  _RTurnCounter 001B  sensorComputation@getCorrection 008D                   _setCorrection 18F4  
                __end_of___wmul 1BAA                   __pidataCOMRAM 1CEE                     _TurnedRight 0027  
                __end_of_rotate 1B72             start_initialization 1C12                     __end_of_ABS 1CCC  
                   __end_of_MAX 1C12                     __end_of_MIN 1BDE              _motorCounterUpdate 1800  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0049                      merge@right 0049  
                     _Reversing 1C96                  ?_setCorrection 0038                        ??___wmul 0084  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 004B                  _sensorLocation 1001  
          ??_motorCounterUpdate 004A                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 0023       sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0  
             __size_of_high_isr 12FA                        ?_InitApp 0038               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 0038                       _algorithm 0035                       __pintcode 0008  
         setCorrection@frontAvg 008C          motorCounterUpdate@side 004A                        ?___awdiv 0080  
          __end_of_sensorUpdate 16E6          __end_of_sensorLocation 1005                     __pintcodelo 0018  
                   __smallconst 1000                        ?_forward 0038                        ?_low_isr 0038  
                     _oldErrorP 002F                  __size_of_delay 0044     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 0084                       _moveMouse 1CE6  
                      i2u104_40 1722                        i2u120_40 106A                        i2u105_40 1732  
                      i2u121_40 107A                        i2u122_40 109E                        i2u107_40 17BA  
                      i2u123_40 10B2                        i2u124_40 10C6                        i2u109_40 17DE  
                      i2u142_40 1244                        i2u118_40 1048                        i2u143_40 1254  
                      i2u119_40 1056                        i2u144_40 1264                        i2u137_40 11E6  
                      i2u138_40 11F6                 ??_setCorrection 0088                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0034  
                    rotate@side 004B                   ??_KController 004C                      ?_moveMouse 0038  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 004A  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 004B              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0021                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1C5C                        __ptext11 1CDC  
                      __ptext20 1CCC                        __ptext21 1CB2                        __ptext14 1B36  
                      __ptext15 1C7A                        __ptext16 1C96                        __ptext17 16E6  
                      __ptext18 1CE6                        __ptext19 1800                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001F           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1800               _sensorComputation 1302  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 15C6                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0049  
               KController@diff 004F       __end_of_sensorComputation 15C6                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0049                     _KController 16E6  
