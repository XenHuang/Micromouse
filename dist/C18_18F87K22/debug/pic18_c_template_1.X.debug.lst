

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Apr 13 22:51:20 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	idataCOMRAM
    35  00192A                     __pidataCOMRAM:
    36                           	opt stack 0
    37                           
    38                           ;initializer for _controllerSteps
    39  00192A  0A                 	db	10
    40                           
    41                           	psect	smallconst
    42  001000                     __psmallconst:
    43                           	opt stack 0
    44  001000  00                 	db	0
    45  001001                     _sensorCorrection:
    46                           	opt stack 0
    47  001001  1E                 	db	30
    48  001002  1E                 	db	30
    49  001003  07                 	db	7
    50  001004  07                 	db	7
    51  001005                     __end_of_sensorCorrection:
    52                           	opt stack 0
    53  001005                     _sensorLocation:
    54                           	opt stack 0
    55  001005  1B                 	db	27
    56  001006  2B                 	db	43
    57  001007  1F                 	db	31
    58  001008  33                 	db	51
    59  001009                     __end_of_sensorLocation:
    60                           	opt stack 0
    61  0000                     _LATC	set	3979
    62  0000                     _OSCTUNE	set	3995
    63  0000                     _PORTBbits	set	3969
    64  0000                     _TRISBbits	set	3987
    65  0000                     _TRISC	set	3988
    66  0000                     _TRISEbits	set	3990
    67  0000                     _ADCON0	set	4034
    68  0000                     _ADCON0bits	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _ADRESH	set	4036
    72  0000                     _ADRESL	set	4035
    73  0000                     _OSCCON	set	4051
    74  0000                     _T0CON	set	4053
    75  0000                     _INTCON	set	4082
    76  0000                     _INTCON2	set	4081
    77  0000                     _INTCONbits	set	4082
    78                           
    79                           ; #config settings
    80  001009  00                 	db	0	; dummy byte at the end
    81  0000                     
    82                           	psect	cinit
    83  00183A                     __pcinit:
    84                           	opt stack 0
    85  00183A                     start_initialization:
    86                           	opt stack 0
    87  00183A                     __initialization:
    88                           	opt stack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (21 bytes)
    91  00183A  EE00  F03F         	lfsr	0,__pbssCOMRAM
    92  00183E  0E15               	movlw	21
    93  001840                     clear_0:
    94  001840  6AEE               	clrf	postinc0,c
    95  001842  06E8               	decf	wreg,f,c
    96  001844  E1FD               	bnz	clear_0
    97                           
    98                           ; Initialize objects allocated to COMRAM (1 bytes)
    99                           ; load TBLPTR registers with __pidataCOMRAM
   100  001846  0E2A               	movlw	low __pidataCOMRAM
   101  001848  6EF6               	movwf	tblptrl,c
   102  00184A  0E19               	movlw	high __pidataCOMRAM
   103  00184C  6EF7               	movwf	tblptrh,c
   104  00184E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   105  001850  6EF8               	movwf	tblptru,c
   106  001852  0009               	tblrd		*+	;fetch initializer
   107  001854  CFF5 F054          	movff	tablat,__pdataCOMRAM
   108  001858                     end_of_initialization:
   109                           	opt stack 0
   110  001858                     __end_of__initialization:
   111                           	opt stack 0
   112  001858  0E00               	movlw	low (__Lmediumconst shr (0+16))
   113  00185A  6EF8               	movwf	tblptru,c
   114  00185C  0100               	movlb	0
   115  00185E  EF7A  F00C         	goto	_main	;jump to C main() function
   116                           tblptru	equ	0xFF8
   117                           tblptrh	equ	0xFF7
   118                           tblptrl	equ	0xFF6
   119                           tablat	equ	0xFF5
   120                           postinc0	equ	0xFEE
   121                           wreg	equ	0xFE8
   122                           
   123                           	psect	bssCOMRAM
   124  00003F                     __pbssCOMRAM:
   125                           	opt stack 0
   126  00003F                     _sensorValue:
   127                           	opt stack 0
   128  00003F                     	ds	8
   129  000047                     _LMotorDelayCounter:
   130                           	opt stack 0
   131  000047                     	ds	2
   132  000049                     _MotorDelayCounter:
   133                           	opt stack 0
   134  000049                     	ds	2
   135  00004B                     _RMotorDelayCounter:
   136                           	opt stack 0
   137  00004B                     	ds	2
   138  00004D                     _RotateCounter:
   139                           	opt stack 0
   140  00004D                     	ds	2
   141  00004F                     _delay_time:
   142                           	opt stack 0
   143  00004F                     	ds	2
   144  000051                     _LMotorCounter:
   145                           	opt stack 0
   146  000051                     	ds	1
   147  000052                     _RMotorCounter:
   148                           	opt stack 0
   149  000052                     	ds	1
   150  000053                     _algorithm:
   151                           	opt stack 0
   152  000053                     	ds	1
   153                           tblptru	equ	0xFF8
   154                           tblptrh	equ	0xFF7
   155                           tblptrl	equ	0xFF6
   156                           tablat	equ	0xFF5
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           
   160                           	psect	dataCOMRAM
   161  000054                     __pdataCOMRAM:
   162                           	opt stack 0
   163  000054                     _controllerSteps:
   164                           	opt stack 0
   165  000054                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           
   173                           	psect	cstackBANK0
   174  000080                     __pcstackBANK0:
   175                           	opt stack 0
   176  000080                     sensorComputation@max:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x0
   180  000080                     	ds	2
   181  000082                     sensorComputation@min:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x2
   185  000082                     	ds	2
   186  000084                     sensorComputation@sum:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x4
   190  000084                     	ds	2
   191  000086                     sensorComputation@i:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x6
   195  000086                     	ds	2
   196  000088                     sensorComputation@j:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x8
   200  000088                     	ds	2
   201  00008A                     sensorUpdate@sensorTemp:
   202                           	opt stack 0
   203                           
   204                           ; 80 bytes @ 0xA
   205  00008A                     	ds	80
   206  0000DA                     sensorUpdate@i:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x5A
   210  0000DA                     	ds	2
   211  0000DC                     sensorUpdate@j:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x5C
   215  0000DC                     	ds	2
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	cstackCOMRAM
   224  000001                     __pcstackCOMRAM:
   225                           	opt stack 0
   226  000001                     ??_low_isr:
   227  000001                     
   228                           ; 0 bytes @ 0x0
   229  000001                     	ds	17
   230  000012                     ?_ABS:
   231                           	opt stack 0
   232  000012                     motorCounterUpdate@reverse:
   233                           	opt stack 0
   234  000012                     merge@right:
   235                           	opt stack 0
   236  000012                     moveMouse@action:
   237                           	opt stack 0
   238  000012                     ABS@x:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x11
   242  000012                     	ds	1
   243  000013                     motorCounterUpdate@side:
   244                           	opt stack 0
   245  000013                     merge@left:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x12
   249  000013                     	ds	1
   250  000014                     merge@merged:
   251                           	opt stack 0
   252                           
   253                           ; 1 bytes @ 0x13
   254  000014                     	ds	1
   255  000015                     ??_KController:
   256                           
   257                           ; 0 bytes @ 0x14
   258  000015                     	ds	2
   259  000017                     KController@diff:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x16
   263  000017                     	ds	2
   264  000019                     KController@steps:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x18
   268  000019                     	ds	2
   269  00001B                     KController@correctTo:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x1A
   273  00001B                     	ds	1
   274  00001C                     ??_high_isr:
   275                           
   276                           ; 0 bytes @ 0x1B
   277  00001C                     	ds	14
   278  00002A                     ?___wmul:
   279                           	opt stack 0
   280  00002A                     ?___awdiv:
   281                           	opt stack 0
   282  00002A                     delay@ms:
   283                           	opt stack 0
   284  00002A                     ___wmul@multiplier:
   285                           	opt stack 0
   286  00002A                     ___awdiv@dividend:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x29
   290  00002A                     	ds	2
   291  00002C                     ??_delay:
   292  00002C                     ___wmul@multiplicand:
   293                           	opt stack 0
   294  00002C                     ___awdiv@divisor:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x2B
   298  00002C                     	ds	1
   299  00002D                     delay@x:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x2C
   303  00002D                     	ds	1
   304  00002E                     ___awdiv@counter:
   305                           	opt stack 0
   306  00002E                     ___wmul@product:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2D
   310  00002E                     	ds	1
   311  00002F                     ___awdiv@sign:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x2E
   315  00002F                     	ds	1
   316  000030                     ?_MIN:
   317                           	opt stack 0
   318  000030                     ?_MAX:
   319                           	opt stack 0
   320  000030                     MIN@a:
   321                           	opt stack 0
   322  000030                     MAX@a:
   323                           	opt stack 0
   324  000030                     ___awdiv@quotient:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x2F
   328  000030                     	ds	2
   329  000032                     MIN@b:
   330                           	opt stack 0
   331  000032                     MAX@b:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x31
   335  000032                     	ds	2
   336  000034                     ??_MIN:
   337  000034                     ??_MAX:
   338                           
   339                           ; 0 bytes @ 0x33
   340  000034                     	ds	1
   341  000035                     sensorComputation@sensorTemp:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x34
   345  000035                     	ds	2
   346  000037                     ??_sensorComputation:
   347                           
   348                           ; 0 bytes @ 0x36
   349  000037                     	ds	2
   350  000039                     ??_sensorUpdate:
   351                           
   352                           ; 0 bytes @ 0x38
   353  000039                     	ds	6
   354  00003F                     tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           ; 0 bytes @ 0x3E
   362 ;;
   363 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   364 ;;
   365 ;; *************** function _main *****************
   366 ;; Defined at:
   367 ;;		line 41 in file "main.c"
   368 ;; Parameters:    Size  Location     Type
   369 ;;		None
   370 ;; Auto vars:     Size  Location     Type
   371 ;;		None
   372 ;; Return value:  Size  Location     Type
   373 ;;		None               void
   374 ;; Registers used:
   375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : 0/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   385 ;;Total ram usage:        0 bytes
   386 ;; Hardware stack levels required when called:    7
   387 ;; This function calls:
   388 ;;		_ConfigureOscillator
   389 ;;		_InitApp
   390 ;;		_sensorUpdate
   391 ;; This function is called by:
   392 ;;		Startup code after reset
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           	psect	text0
   397  0018F4                     __ptext0:
   398                           	opt stack 0
   399  0018F4                     _main:
   400                           	opt stack 24
   401                           
   402                           ;main.c: 44: ConfigureOscillator();
   403                           
   404                           ;incstack = 0
   405  0018F4  EC8C  F00C         	call	_ConfigureOscillator	;wreg free
   406                           
   407                           ;main.c: 47: InitApp();
   408  0018F8  ECC4  F00B         	call	_InitApp	;wreg free
   409  0018FC  D000               	goto	l1585
   410  0018FE                     l1585:
   411                           
   412                           ;main.c: 50: {
   413                           ;main.c: 51: sensorUpdate();
   414  0018FE  EC1B  F009         	call	_sensorUpdate	;wreg free
   415  001902  D7FD               	goto	l1585
   416  001904  EF51  F000         	goto	start
   417  001908                     __end_of_main:
   418                           	opt stack 0
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426 ;; *************** function _sensorUpdate *****************
   427 ;; Defined at:
   428 ;;		line 136 in file "user.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   433 ;;  j               2   92[BANK0 ] int 
   434 ;;  i               2   90[BANK0 ] int 
   435 ;; Return value:  Size  Location     Type
   436 ;;		None               void
   437 ;; Registers used:
   438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : 0/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;Total ram usage:       90 bytes
   449 ;; Hardware stack levels used:    1
   450 ;; Hardware stack levels required when called:    6
   451 ;; This function calls:
   452 ;;		___wmul
   453 ;;		_sensorComputation
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text1
   460  001236                     __ptext1:
   461                           	opt stack 0
   462  001236                     _sensorUpdate:
   463                           	opt stack 24
   464                           
   465                           ;user.c: 138: int i,j;
   466                           ;user.c: 139: int sensorTemp[4][10];
   467                           ;user.c: 142: for(i = 0; i < 10; i++)
   468                           
   469                           ;incstack = 0
   470  001236  0E00               	movlw	0
   471  001238  0100               	movlb	0	; () banked
   472  00123A  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   473  00123C  0E00               	movlw	0
   474  00123E  6FDA               	movwf	sensorUpdate@i& (0+255),b
   475                           
   476                           ; BSR set to: 0
   477  001240  0100               	movlb	0	; () banked
   478  001242  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   479  001244  D00A               	goto	l1551
   480  001246  0100               	movlb	0	; () banked
   481  001248  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   482  00124A  E106               	bnz	u1080
   483  00124C  0E0A               	movlw	10
   484  00124E  0100               	movlb	0	; () banked
   485  001250  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   486  001252  B0D8               	btfsc	status,0,c
   487  001254  D0CF               	goto	l1579
   488  001256  D001               	goto	l1551
   489  001258                     u1080:
   490                           
   491                           ; BSR set to: 0
   492  001258  D0CD               	goto	l1579
   493  00125A                     l1551:
   494                           
   495                           ; BSR set to: 0
   496                           ;user.c: 143: {
   497                           ;user.c: 144: for(j = 0 ; j < 4 ; j++)
   498  00125A  0E00               	movlw	0
   499  00125C  0100               	movlb	0	; () banked
   500  00125E  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   501  001260  0E00               	movlw	0
   502  001262  6FDC               	movwf	sensorUpdate@j& (0+255),b
   503                           
   504                           ; BSR set to: 0
   505  001264  0100               	movlb	0	; () banked
   506  001266  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   507  001268  D00A               	goto	l1557
   508  00126A  0100               	movlb	0	; () banked
   509  00126C  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   510  00126E  E106               	bnz	u1090
   511  001270  0E04               	movlw	4
   512  001272  0100               	movlb	0	; () banked
   513  001274  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   514  001276  B0D8               	btfsc	status,0,c
   515  001278  D0B2               	goto	l1575
   516  00127A  D001               	goto	l1557
   517  00127C                     u1090:
   518                           
   519                           ; BSR set to: 0
   520  00127C  D0B0               	goto	l1575
   521  00127E                     l1557:
   522                           
   523                           ; BSR set to: 0
   524                           ;user.c: 145: {
   525                           ;user.c: 146: ADCON0 = sensorLocation[j];
   526  00127E  0E05               	movlw	low _sensorLocation
   527  001280  0100               	movlb	0	; () banked
   528  001282  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   529  001284  6EF6               	movwf	tblptrl,c
   530  001286  0E10               	movlw	high _sensorLocation
   531  001288  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   532  00128A  6EF7               	movwf	tblptrh,c
   533  00128C                     	if	0	;There are less than 3 active tblptr bytes
   534  00128C                     	endif
   535  00128C  0008               	tblrd		*
   536  00128E  CFF5 FFC2          	movff	tablat,4034	;volatile
   537                           
   538                           ; BSR set to: 0
   539                           ;user.c: 148: ADCON0bits.GO_DONE = 1;
   540  001292  82C2               	bsf	4034,1,c	;volatile
   541                           
   542                           ;user.c: 149: while(ADCON0bits.GO_DONE != 0);
   543  001294  D000               	goto	l212
   544  001296                     l212:
   545  001296  B2C2               	btfsc	4034,1,c	;volatile
   546  001298  D7FE               	goto	l212
   547                           
   548                           ;user.c: 150: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   549  00129A  CFC3 F039          	movff	4035,??_sensorUpdate	;volatile
   550  00129E  0E06               	movlw	6
   551  0012A0  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   552  0012A2                     u1115:
   553  0012A2  90D8               	bcf	status,0,c
   554  0012A4  3239               	rrcf	??_sensorUpdate,f,c
   555  0012A6  2E3A               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   556  0012A8  D7FC               	goto	u1115
   557  0012AA  5039               	movf	??_sensorUpdate,w,c
   558  0012AC  CFC4 F03B          	movff	4036,??_sensorUpdate+2	;volatile
   559  0012B0  6A3C               	clrf	(??_sensorUpdate+3)& (0+255),c
   560  0012B2  90D8               	bcf	status,0,c
   561  0012B4  363B               	rlcf	??_sensorUpdate+2,f,c
   562  0012B6  363C               	rlcf	??_sensorUpdate+3,f,c
   563  0012B8  90D8               	bcf	status,0,c
   564  0012BA  363B               	rlcf	??_sensorUpdate+2,f,c
   565  0012BC  363C               	rlcf	??_sensorUpdate+3,f,c
   566  0012BE  263B               	addwf	??_sensorUpdate+2,f,c
   567  0012C0  0E00               	movlw	0
   568  0012C2  223C               	addwfc	??_sensorUpdate+3,f,c
   569  0012C4  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   570  0012C8  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   571  0012CC  0E00               	movlw	0
   572  0012CE  6E2D               	movwf	___wmul@multiplicand+1,c
   573  0012D0  0E14               	movlw	20
   574  0012D2  6E2C               	movwf	___wmul@multiplicand,c
   575  0012D4  EC31  F00C         	call	___wmul	;wreg free
   576  0012D8  0E8A               	movlw	low sensorUpdate@sensorTemp
   577  0012DA  6E3D               	movwf	(??_sensorUpdate+4)& (0+255),c
   578  0012DC  0E00               	movlw	high sensorUpdate@sensorTemp
   579  0012DE  6E3E               	movwf	(??_sensorUpdate+5)& (0+255),c
   580  0012E0  502A               	movf	?___wmul,w,c
   581  0012E2  263D               	addwf	??_sensorUpdate+4,f,c
   582  0012E4  502B               	movf	?___wmul+1,w,c
   583  0012E6  223E               	addwfc	??_sensorUpdate+5,f,c
   584  0012E8  90D8               	bcf	status,0,c
   585  0012EA  0100               	movlb	0	; () banked
   586  0012EC  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   587  0012EE  6ED9               	movwf	fsr2l,c
   588  0012F0  0100               	movlb	0	; () banked
   589  0012F2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   590  0012F4  6EDA               	movwf	fsr2h,c
   591  0012F6  503D               	movf	??_sensorUpdate+4,w,c
   592  0012F8  26D9               	addwf	fsr2l,f,c
   593  0012FA  503E               	movf	??_sensorUpdate+5,w,c
   594  0012FC  22DA               	addwfc	fsr2h,f,c
   595  0012FE  C03B  FFDE         	movff	??_sensorUpdate+2,postinc2
   596  001302  C03C  FFDD         	movff	??_sensorUpdate+3,postdec2
   597                           
   598                           ; BSR set to: 0
   599                           ;user.c: 153: if(j == 0 || j == 3)
   600  001306  0100               	movlb	0	; () banked
   601  001308  51DC               	movf	sensorUpdate@j& (0+255),w,b
   602  00130A  0100               	movlb	0	; () banked
   603  00130C  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   604  00130E  B4D8               	btfsc	status,2,c
   605  001310  D007               	goto	l1567
   606                           
   607                           ; BSR set to: 0
   608  001312  0E03               	movlw	3
   609  001314  0100               	movlb	0	; () banked
   610  001316  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   611  001318  0100               	movlb	0	; () banked
   612  00131A  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   613  00131C  A4D8               	btfss	status,2,c
   614  00131E  D02A               	goto	l1569
   615  001320                     l1567:
   616                           
   617                           ; BSR set to: 0
   618                           ;user.c: 154: sensorTemp[j][i] -= sensorCorrection[j];
   619  001320  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   620  001324  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   621  001328  0E00               	movlw	0
   622  00132A  6E2D               	movwf	___wmul@multiplicand+1,c
   623  00132C  0E14               	movlw	20
   624  00132E  6E2C               	movwf	___wmul@multiplicand,c
   625  001330  EC31  F00C         	call	___wmul	;wreg free
   626  001334  0E8A               	movlw	low sensorUpdate@sensorTemp
   627  001336  6E39               	movwf	??_sensorUpdate& (0+255),c
   628  001338  0E00               	movlw	high sensorUpdate@sensorTemp
   629  00133A  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   630  00133C  502A               	movf	?___wmul,w,c
   631  00133E  2639               	addwf	??_sensorUpdate,f,c
   632  001340  502B               	movf	?___wmul+1,w,c
   633  001342  223A               	addwfc	??_sensorUpdate+1,f,c
   634  001344  90D8               	bcf	status,0,c
   635  001346  0100               	movlb	0	; () banked
   636  001348  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   637  00134A  6ED9               	movwf	fsr2l,c
   638  00134C  0100               	movlb	0	; () banked
   639  00134E  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   640  001350  6EDA               	movwf	fsr2h,c
   641  001352  5039               	movf	??_sensorUpdate,w,c
   642  001354  26D9               	addwf	fsr2l,f,c
   643  001356  503A               	movf	??_sensorUpdate+1,w,c
   644  001358  22DA               	addwfc	fsr2h,f,c
   645  00135A  0E01               	movlw	low _sensorCorrection
   646  00135C  0100               	movlb	0	; () banked
   647  00135E  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   648  001360  6EF6               	movwf	tblptrl,c
   649  001362  0E10               	movlw	high _sensorCorrection
   650  001364  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   651  001366  6EF7               	movwf	tblptrh,c
   652  001368                     	if	0	;There are less than 3 active tblptr bytes
   653  001368                     	endif
   654  001368  0008               	tblrd		*
   655  00136A  50F5               	movf	tablat,w,c
   656  00136C  5EDE               	subwf	postinc2,f,c
   657  00136E  0E00               	movlw	0
   658  001370  5ADD               	subwfb	postdec2,f,c
   659  001372  D02A               	goto	l1571
   660  001374                     l1569:
   661                           
   662                           ; BSR set to: 0
   663                           ;user.c: 155: else
   664                           ;user.c: 156: sensorTemp[j][i] += sensorCorrection[j];
   665  001374  C0DC  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   666  001378  C0DD  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   667  00137C  0E00               	movlw	0
   668  00137E  6E2D               	movwf	___wmul@multiplicand+1,c
   669  001380  0E14               	movlw	20
   670  001382  6E2C               	movwf	___wmul@multiplicand,c
   671  001384  EC31  F00C         	call	___wmul	;wreg free
   672  001388  0E8A               	movlw	low sensorUpdate@sensorTemp
   673  00138A  6E39               	movwf	??_sensorUpdate& (0+255),c
   674  00138C  0E00               	movlw	high sensorUpdate@sensorTemp
   675  00138E  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   676  001390  502A               	movf	?___wmul,w,c
   677  001392  2639               	addwf	??_sensorUpdate,f,c
   678  001394  502B               	movf	?___wmul+1,w,c
   679  001396  223A               	addwfc	??_sensorUpdate+1,f,c
   680  001398  90D8               	bcf	status,0,c
   681  00139A  0100               	movlb	0	; () banked
   682  00139C  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   683  00139E  6ED9               	movwf	fsr2l,c
   684  0013A0  0100               	movlb	0	; () banked
   685  0013A2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   686  0013A4  6EDA               	movwf	fsr2h,c
   687  0013A6  5039               	movf	??_sensorUpdate,w,c
   688  0013A8  26D9               	addwf	fsr2l,f,c
   689  0013AA  503A               	movf	??_sensorUpdate+1,w,c
   690  0013AC  22DA               	addwfc	fsr2h,f,c
   691  0013AE  0E01               	movlw	low _sensorCorrection
   692  0013B0  0100               	movlb	0	; () banked
   693  0013B2  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   694  0013B4  6EF6               	movwf	tblptrl,c
   695  0013B6  0E10               	movlw	high _sensorCorrection
   696  0013B8  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   697  0013BA  6EF7               	movwf	tblptrh,c
   698  0013BC                     	if	0	;There are less than 3 active tblptr bytes
   699  0013BC                     	endif
   700  0013BC  0008               	tblrd		*
   701  0013BE  50F5               	movf	tablat,w,c
   702  0013C0  26DE               	addwf	postinc2,f,c
   703  0013C2  0E00               	movlw	0
   704  0013C4  22DD               	addwfc	postdec2,f,c
   705  0013C6  D000               	goto	l1571
   706  0013C8                     l1571:
   707                           
   708                           ; BSR set to: 0
   709  0013C8  0100               	movlb	0	; () banked
   710  0013CA  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   711  0013CC  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   712                           
   713                           ; BSR set to: 0
   714  0013CE  0100               	movlb	0	; () banked
   715  0013D0  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   716  0013D2  D755               	goto	l1557
   717  0013D4  0100               	movlb	0	; () banked
   718  0013D6  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   719  0013D8  E102               	bnz	l1575
   720  0013DA  D74A               	goto	L1
   721  0013DC  D000               	goto	l1575
   722  0013DE                     l1575:
   723                           
   724                           ; BSR set to: 0
   725  0013DE  0100               	movlb	0	; () banked
   726  0013E0  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   727  0013E2  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   728                           
   729                           ; BSR set to: 0
   730  0013E4  0100               	movlb	0	; () banked
   731  0013E6  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   732  0013E8  D738               	goto	l1551
   733  0013EA  0100               	movlb	0	; () banked
   734  0013EC  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   735  0013EE  E102               	bnz	l1579
   736  0013F0  D72D               	goto	L2
   737  0013F2  D000               	goto	l1579
   738  0013F4                     l1579:
   739                           
   740                           ; BSR set to: 0
   741                           ;user.c: 157: }
   742                           ;user.c: 158: }
   743                           ;user.c: 161: sensorComputation(sensorTemp);
   744  0013F4  0E8A               	movlw	low sensorUpdate@sensorTemp
   745  0013F6  6E35               	movwf	sensorComputation@sensorTemp,c
   746  0013F8  0E00               	movlw	high sensorUpdate@sensorTemp
   747  0013FA  6E36               	movwf	sensorComputation@sensorTemp+1,c
   748  0013FC  EC05  F008         	call	_sensorComputation	;wreg free
   749  001400  0012               	return		;funcret
   750  001402                     __end_of_sensorUpdate:
   751                           	opt stack 0
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postinc2	equ	0xFDE
   759                           postdec2	equ	0xFDD
   760                           fsr2h	equ	0xFDA
   761                           fsr2l	equ	0xFD9
   762                           status	equ	0xFD8
   763                           
   764 ;; *************** function _sensorComputation *****************
   765 ;; Defined at:
   766 ;;		line 115 in file "user.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  sensorTemp      2   52[COMRAM] PTR int [10]
   769 ;;		 -> sensorUpdate@sensorTemp(80), 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  j               2    8[BANK0 ] int 
   772 ;;  i               2    6[BANK0 ] int 
   773 ;;  sum             2    4[BANK0 ] int 
   774 ;;  min             2    2[BANK0 ] int 
   775 ;;  max             2    0[BANK0 ] int 
   776 ;; Return value:  Size  Location     Type
   777 ;;		None               void
   778 ;; Registers used:
   779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;Total ram usage:       14 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    5
   792 ;; This function calls:
   793 ;;		_MAX
   794 ;;		_MIN
   795 ;;		___awdiv
   796 ;;		___wmul
   797 ;; This function is called by:
   798 ;;		_sensorUpdate
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text2
   803  00100A                     __ptext2:
   804                           	opt stack 0
   805  00100A                     _sensorComputation:
   806                           	opt stack 24
   807                           
   808                           ;user.c: 117: int max,min,i,j,sum;
   809                           ;user.c: 118: for(i = 0; i < 4 ; i++)
   810                           
   811                           ;incstack = 0
   812  00100A  0E00               	movlw	0
   813  00100C  0100               	movlb	0	; () banked
   814  00100E  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   815  001010  0E00               	movlw	0
   816  001012  6F86               	movwf	sensorComputation@i& (0+255),b
   817                           
   818                           ; BSR set to: 0
   819  001014  0100               	movlb	0	; () banked
   820  001016  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   821  001018  D00A               	goto	l1521
   822  00101A  0100               	movlb	0	; () banked
   823  00101C  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   824  00101E  E106               	bnz	u1030
   825  001020  0E04               	movlw	4
   826  001022  0100               	movlb	0	; () banked
   827  001024  5D86               	subwf	sensorComputation@i& (0+255),w,b
   828  001026  B0D8               	btfsc	status,0,c
   829  001028  D105               	goto	l205
   830  00102A  D001               	goto	l1521
   831  00102C                     u1030:
   832                           
   833                           ; BSR set to: 0
   834  00102C  D103               	goto	l205
   835  00102E                     l1521:
   836                           
   837                           ; BSR set to: 0
   838                           ;user.c: 119: {
   839                           ;user.c: 120: for(j = 0 ; j < 10 ; j++)
   840  00102E  0E00               	movlw	0
   841  001030  0100               	movlb	0	; () banked
   842  001032  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   843  001034  0E00               	movlw	0
   844  001036  6F88               	movwf	sensorComputation@j& (0+255),b
   845                           
   846                           ; BSR set to: 0
   847  001038  0100               	movlb	0	; () banked
   848  00103A  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   849  00103C  D00A               	goto	l1527
   850  00103E  0100               	movlb	0	; () banked
   851  001040  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   852  001042  E106               	bnz	u1040
   853  001044  0E0A               	movlw	10
   854  001046  0100               	movlb	0	; () banked
   855  001048  5D88               	subwf	sensorComputation@j& (0+255),w,b
   856  00104A  B0D8               	btfsc	status,0,c
   857  00104C  D0B7               	goto	l1537
   858  00104E  D001               	goto	l1527
   859  001050                     u1040:
   860                           
   861                           ; BSR set to: 0
   862  001050  D0B5               	goto	l1537
   863  001052                     l1527:
   864                           
   865                           ; BSR set to: 0
   866                           ;user.c: 121: {
   867                           ;user.c: 122: if(j == 0)
   868  001052  0100               	movlb	0	; () banked
   869  001054  5188               	movf	sensorComputation@j& (0+255),w,b
   870  001056  0100               	movlb	0	; () banked
   871  001058  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   872  00105A  A4D8               	btfss	status,2,c
   873  00105C  D02A               	goto	l1531
   874                           
   875                           ; BSR set to: 0
   876                           ;user.c: 123: {
   877                           ;user.c: 124: sum = min = max = sensorTemp[i][j];
   878  00105E  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   879  001062  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   880  001066  0E00               	movlw	0
   881  001068  6E2D               	movwf	___wmul@multiplicand+1,c
   882  00106A  0E14               	movlw	20
   883  00106C  6E2C               	movwf	___wmul@multiplicand,c
   884  00106E  EC31  F00C         	call	___wmul	;wreg free
   885  001072  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   886  001076  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   887  00107A  502A               	movf	?___wmul,w,c
   888  00107C  2637               	addwf	??_sensorComputation,f,c
   889  00107E  502B               	movf	?___wmul+1,w,c
   890  001080  2238               	addwfc	??_sensorComputation+1,f,c
   891  001082  90D8               	bcf	status,0,c
   892  001084  0100               	movlb	0	; () banked
   893  001086  3588               	rlcf	sensorComputation@j& (0+255),w,b
   894  001088  6ED9               	movwf	fsr2l,c
   895  00108A  0100               	movlb	0	; () banked
   896  00108C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   897  00108E  6EDA               	movwf	fsr2h,c
   898  001090  5037               	movf	??_sensorComputation,w,c
   899  001092  26D9               	addwf	fsr2l,f,c
   900  001094  5038               	movf	??_sensorComputation+1,w,c
   901  001096  22DA               	addwfc	fsr2h,f,c
   902  001098  CFDE F080          	movff	postinc2,sensorComputation@max
   903  00109C  CFDD F081          	movff	postdec2,sensorComputation@max+1
   904  0010A0  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   905  0010A4  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   906  0010A8  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   907  0010AC  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   908                           
   909                           ;user.c: 125: continue;
   910  0010B0  D07A               	goto	l1533
   911  0010B2                     l1531:
   912                           
   913                           ; BSR set to: 0
   914                           ;user.c: 126: }
   915                           ;user.c: 127: min = MIN(sensorTemp[i][j],min);
   916  0010B2  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   917  0010B6  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   918  0010BA  0E00               	movlw	0
   919  0010BC  6E2D               	movwf	___wmul@multiplicand+1,c
   920  0010BE  0E14               	movlw	20
   921  0010C0  6E2C               	movwf	___wmul@multiplicand,c
   922  0010C2  EC31  F00C         	call	___wmul	;wreg free
   923  0010C6  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   924  0010CA  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   925  0010CE  502A               	movf	?___wmul,w,c
   926  0010D0  2637               	addwf	??_sensorComputation,f,c
   927  0010D2  502B               	movf	?___wmul+1,w,c
   928  0010D4  2238               	addwfc	??_sensorComputation+1,f,c
   929  0010D6  90D8               	bcf	status,0,c
   930  0010D8  0100               	movlb	0	; () banked
   931  0010DA  3588               	rlcf	sensorComputation@j& (0+255),w,b
   932  0010DC  6ED9               	movwf	fsr2l,c
   933  0010DE  0100               	movlb	0	; () banked
   934  0010E0  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   935  0010E2  6EDA               	movwf	fsr2h,c
   936  0010E4  5037               	movf	??_sensorComputation,w,c
   937  0010E6  26D9               	addwf	fsr2l,f,c
   938  0010E8  5038               	movf	??_sensorComputation+1,w,c
   939  0010EA  22DA               	addwfc	fsr2h,f,c
   940  0010EC  CFDE F030          	movff	postinc2,MIN@a
   941  0010F0  CFDD F031          	movff	postdec2,MIN@a+1
   942  0010F4  C082  F032         	movff	sensorComputation@min,MIN@b
   943  0010F8  C083  F033         	movff	sensorComputation@min+1,MIN@b+1
   944  0010FC  EC45  F00C         	call	_MIN	;wreg free
   945  001100  C030  F082         	movff	?_MIN,sensorComputation@min
   946  001104  C031  F083         	movff	?_MIN+1,sensorComputation@min+1
   947                           
   948                           ;user.c: 128: max = MAX(sensorTemp[i][j],max);
   949  001108  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   950  00110C  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   951  001110  0E00               	movlw	0
   952  001112  6E2D               	movwf	___wmul@multiplicand+1,c
   953  001114  0E14               	movlw	20
   954  001116  6E2C               	movwf	___wmul@multiplicand,c
   955  001118  EC31  F00C         	call	___wmul	;wreg free
   956  00111C  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   957  001120  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   958  001124  502A               	movf	?___wmul,w,c
   959  001126  2637               	addwf	??_sensorComputation,f,c
   960  001128  502B               	movf	?___wmul+1,w,c
   961  00112A  2238               	addwfc	??_sensorComputation+1,f,c
   962  00112C  90D8               	bcf	status,0,c
   963  00112E  0100               	movlb	0	; () banked
   964  001130  3588               	rlcf	sensorComputation@j& (0+255),w,b
   965  001132  6ED9               	movwf	fsr2l,c
   966  001134  0100               	movlb	0	; () banked
   967  001136  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   968  001138  6EDA               	movwf	fsr2h,c
   969  00113A  5037               	movf	??_sensorComputation,w,c
   970  00113C  26D9               	addwf	fsr2l,f,c
   971  00113E  5038               	movf	??_sensorComputation+1,w,c
   972  001140  22DA               	addwfc	fsr2h,f,c
   973  001142  CFDE F030          	movff	postinc2,MAX@a
   974  001146  CFDD F031          	movff	postdec2,MAX@a+1
   975  00114A  C080  F032         	movff	sensorComputation@max,MAX@b
   976  00114E  C081  F033         	movff	sensorComputation@max+1,MAX@b+1
   977  001152  EC59  F00C         	call	_MAX	;wreg free
   978  001156  C030  F080         	movff	?_MAX,sensorComputation@max
   979  00115A  C031  F081         	movff	?_MAX+1,sensorComputation@max+1
   980                           
   981                           ;user.c: 129: sum += sensorTemp[i][j];
   982  00115E  C086  F02A         	movff	sensorComputation@i,___wmul@multiplier
   983  001162  C087  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   984  001166  0E00               	movlw	0
   985  001168  6E2D               	movwf	___wmul@multiplicand+1,c
   986  00116A  0E14               	movlw	20
   987  00116C  6E2C               	movwf	___wmul@multiplicand,c
   988  00116E  EC31  F00C         	call	___wmul	;wreg free
   989  001172  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   990  001176  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   991  00117A  502A               	movf	?___wmul,w,c
   992  00117C  2637               	addwf	??_sensorComputation,f,c
   993  00117E  502B               	movf	?___wmul+1,w,c
   994  001180  2238               	addwfc	??_sensorComputation+1,f,c
   995  001182  90D8               	bcf	status,0,c
   996  001184  0100               	movlb	0	; () banked
   997  001186  3588               	rlcf	sensorComputation@j& (0+255),w,b
   998  001188  6ED9               	movwf	fsr2l,c
   999  00118A  0100               	movlb	0	; () banked
  1000  00118C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1001  00118E  6EDA               	movwf	fsr2h,c
  1002  001190  5037               	movf	??_sensorComputation,w,c
  1003  001192  26D9               	addwf	fsr2l,f,c
  1004  001194  5038               	movf	??_sensorComputation+1,w,c
  1005  001196  22DA               	addwfc	fsr2h,f,c
  1006  001198  50DE               	movf	postinc2,w,c
  1007  00119A  0100               	movlb	0	; () banked
  1008  00119C  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1009  00119E  50DD               	movf	postdec2,w,c
  1010  0011A0  0100               	movlb	0	; () banked
  1011  0011A2  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1012  0011A4  D000               	goto	l1533
  1013  0011A6                     l1533:
  1014                           
  1015                           ; BSR set to: 0
  1016  0011A6  0100               	movlb	0	; () banked
  1017  0011A8  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1018  0011AA  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1019                           
  1020                           ; BSR set to: 0
  1021  0011AC  0100               	movlb	0	; () banked
  1022  0011AE  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1023  0011B0  D750               	goto	l1527
  1024  0011B2  0100               	movlb	0	; () banked
  1025  0011B4  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1026  0011B6  E102               	bnz	l1537
  1027  0011B8  D745               	goto	L3
  1028  0011BA  D000               	goto	l1537
  1029  0011BC                     l1537:
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;user.c: 130: }
  1033                           ;user.c: 131: sum = sum - min - max;
  1034  0011BC  0100               	movlb	0	; () banked
  1035  0011BE  5180               	movf	sensorComputation@max& (0+255),w,b
  1036  0011C0  0100               	movlb	0	; () banked
  1037  0011C2  2582               	addwf	sensorComputation@min& (0+255),w,b
  1038  0011C4  6E37               	movwf	??_sensorComputation& (0+255),c
  1039  0011C6  0100               	movlb	0	; () banked
  1040  0011C8  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1041  0011CA  0100               	movlb	0	; () banked
  1042  0011CC  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1043  0011CE  6E38               	movwf	(??_sensorComputation+1)& (0+255),c
  1044  0011D0  1E37               	comf	??_sensorComputation,f,c
  1045  0011D2  1E38               	comf	??_sensorComputation+1,f,c
  1046  0011D4  4A37               	infsnz	??_sensorComputation,f,c
  1047  0011D6  2A38               	incf	??_sensorComputation+1,f,c
  1048  0011D8  0100               	movlb	0	; () banked
  1049  0011DA  5184               	movf	sensorComputation@sum& (0+255),w,b
  1050  0011DC  2437               	addwf	??_sensorComputation,w,c
  1051  0011DE  0100               	movlb	0	; () banked
  1052  0011E0  6F84               	movwf	sensorComputation@sum& (0+255),b
  1053  0011E2  0100               	movlb	0	; () banked
  1054  0011E4  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1055  0011E6  2038               	addwfc	??_sensorComputation+1,w,c
  1056  0011E8  0100               	movlb	0	; () banked
  1057  0011EA  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;user.c: 132: sensorValue[i] = sum/(10-2);
  1061  0011EC  C084  F02A         	movff	sensorComputation@sum,___awdiv@dividend
  1062  0011F0  C085  F02B         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1063  0011F4  0E00               	movlw	0
  1064  0011F6  6E2D               	movwf	___awdiv@divisor+1,c
  1065  0011F8  0E08               	movlw	8
  1066  0011FA  6E2C               	movwf	___awdiv@divisor,c
  1067  0011FC  EC79  F00B         	call	___awdiv	;wreg free
  1068  001200  90D8               	bcf	status,0,c
  1069  001202  0100               	movlb	0	; () banked
  1070  001204  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1071  001206  6ED9               	movwf	fsr2l,c
  1072  001208  0100               	movlb	0	; () banked
  1073  00120A  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1074  00120C  6EDA               	movwf	fsr2h,c
  1075  00120E  0E3F               	movlw	low _sensorValue
  1076  001210  26D9               	addwf	fsr2l,f,c
  1077  001212  0E00               	movlw	high _sensorValue
  1078  001214  22DA               	addwfc	fsr2h,f,c
  1079  001216  C02A  FFDE         	movff	?___awdiv,postinc2
  1080  00121A  C02B  FFDD         	movff	?___awdiv+1,postdec2
  1081                           
  1082                           ; BSR set to: 0
  1083  00121E  0100               	movlb	0	; () banked
  1084  001220  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1085  001222  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1086                           
  1087                           ; BSR set to: 0
  1088  001224  0100               	movlb	0	; () banked
  1089  001226  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1090  001228  D702               	goto	l1521
  1091  00122A  0100               	movlb	0	; () banked
  1092  00122C  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1093  00122E  E102               	bnz	l205
  1094  001230  D6F7               	goto	L4
  1095  001232  D000               	goto	l205
  1096  001234                     l205:
  1097                           
  1098                           ; BSR set to: 0
  1099  001234  0012               	return		;funcret
  1100  001236                     __end_of_sensorComputation:
  1101                           	opt stack 0
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postinc2	equ	0xFDE
  1109                           postdec2	equ	0xFDD
  1110                           fsr2h	equ	0xFDA
  1111                           fsr2l	equ	0xFD9
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function ___wmul *****************
  1115 ;; Defined at:
  1116 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  multiplier      2   41[COMRAM] unsigned int 
  1119 ;;  multiplicand    2   43[COMRAM] unsigned int 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  product         2   45[COMRAM] unsigned int 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  2   41[COMRAM] unsigned int 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, prodl, prodh
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1131 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;Total ram usage:        6 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    4
  1138 ;; This function calls:
  1139 ;;		Nothing
  1140 ;; This function is called by:
  1141 ;;		_sensorComputation
  1142 ;;		_sensorUpdate
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text3
  1147  001862                     __ptext3:
  1148                           	opt stack 0
  1149  001862                     ___wmul:
  1150                           	opt stack 24
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;incstack = 0
  1154  001862  502A               	movf	___wmul@multiplier,w,c
  1155  001864  022C               	mulwf	___wmul@multiplicand,c
  1156  001866  CFF3 F02E          	movff	prodl,___wmul@product
  1157  00186A  CFF4 F02F          	movff	prodh,___wmul@product+1
  1158  00186E  502A               	movf	___wmul@multiplier,w,c
  1159  001870  022D               	mulwf	___wmul@multiplicand+1,c
  1160  001872  50F3               	movf	prodl,w,c
  1161  001874  262F               	addwf	___wmul@product+1,f,c
  1162  001876  502B               	movf	___wmul@multiplier+1,w,c
  1163  001878  022C               	mulwf	___wmul@multiplicand,c
  1164  00187A  50F3               	movf	prodl,w,c
  1165  00187C  262F               	addwf	___wmul@product+1,f,c
  1166  00187E  C02E  F02A         	movff	___wmul@product,?___wmul
  1167  001882  C02F  F02B         	movff	___wmul@product+1,?___wmul+1
  1168  001886  D000               	goto	l230
  1169  001888                     l230:
  1170  001888  0012               	return		;funcret
  1171  00188A                     __end_of___wmul:
  1172                           	opt stack 0
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           prodh	equ	0xFF4
  1178                           prodl	equ	0xFF3
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           postinc2	equ	0xFDE
  1182                           postdec2	equ	0xFDD
  1183                           fsr2h	equ	0xFDA
  1184                           fsr2l	equ	0xFD9
  1185                           status	equ	0xFD8
  1186                           
  1187 ;; *************** function ___awdiv *****************
  1188 ;; Defined at:
  1189 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  dividend        2   41[COMRAM] int 
  1192 ;;  divisor         2   43[COMRAM] int 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;  quotient        2   47[COMRAM] int 
  1195 ;;  sign            1   46[COMRAM] unsigned char 
  1196 ;;  counter         1   45[COMRAM] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  2   41[COMRAM] int 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;Total ram usage:        8 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    4
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_sensorComputation
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text4
  1221  0016F2                     __ptext4:
  1222                           	opt stack 0
  1223  0016F2                     ___awdiv:
  1224                           	opt stack 24
  1225                           
  1226                           ;incstack = 0
  1227  0016F2  0E00               	movlw	0
  1228  0016F4  6E2F               	movwf	___awdiv@sign,c
  1229  0016F6  AE2D               	btfss	___awdiv@divisor+1,7,c
  1230  0016F8  D007               	goto	l1479
  1231  0016FA  6C2C               	negf	___awdiv@divisor,c
  1232  0016FC  1E2D               	comf	___awdiv@divisor+1,f,c
  1233  0016FE  B0D8               	btfsc	status,0,c
  1234  001700  2A2D               	incf	___awdiv@divisor+1,f,c
  1235  001702  0E01               	movlw	1
  1236  001704  6E2F               	movwf	___awdiv@sign,c
  1237  001706  D000               	goto	l1479
  1238  001708                     l1479:
  1239  001708  AE2B               	btfss	___awdiv@dividend+1,7,c
  1240  00170A  D007               	goto	l1485
  1241  00170C  6C2A               	negf	___awdiv@dividend,c
  1242  00170E  1E2B               	comf	___awdiv@dividend+1,f,c
  1243  001710  B0D8               	btfsc	status,0,c
  1244  001712  2A2B               	incf	___awdiv@dividend+1,f,c
  1245  001714  0E01               	movlw	1
  1246  001716  1A2F               	xorwf	___awdiv@sign,f,c
  1247  001718  D000               	goto	l1485
  1248  00171A                     l1485:
  1249  00171A  0E00               	movlw	0
  1250  00171C  6E31               	movwf	___awdiv@quotient+1,c
  1251  00171E  0E00               	movlw	0
  1252  001720  6E30               	movwf	___awdiv@quotient,c
  1253  001722  502C               	movf	___awdiv@divisor,w,c
  1254  001724  102D               	iorwf	___awdiv@divisor+1,w,c
  1255  001726  B4D8               	btfsc	status,2,c
  1256  001728  D021               	goto	l1507
  1257  00172A  0E01               	movlw	1
  1258  00172C  6E2E               	movwf	___awdiv@counter,c
  1259  00172E  D005               	goto	l1493
  1260  001730                     l1491:
  1261  001730  90D8               	bcf	status,0,c
  1262  001732  362C               	rlcf	___awdiv@divisor,f,c
  1263  001734  362D               	rlcf	___awdiv@divisor+1,f,c
  1264  001736  2A2E               	incf	___awdiv@counter,f,c
  1265  001738  D000               	goto	l1493
  1266  00173A                     l1493:
  1267  00173A  BE2D               	btfsc	___awdiv@divisor+1,7,c
  1268  00173C  D002               	goto	l1495
  1269  00173E  D7F8               	goto	l1491
  1270  001740  D000               	goto	l1495
  1271  001742                     l1495:
  1272  001742  90D8               	bcf	status,0,c
  1273  001744  3630               	rlcf	___awdiv@quotient,f,c
  1274  001746  3631               	rlcf	___awdiv@quotient+1,f,c
  1275  001748  502C               	movf	___awdiv@divisor,w,c
  1276  00174A  5C2A               	subwf	___awdiv@dividend,w,c
  1277  00174C  502D               	movf	___awdiv@divisor+1,w,c
  1278  00174E  582B               	subwfb	___awdiv@dividend+1,w,c
  1279  001750  A0D8               	btfss	status,0,c
  1280  001752  D006               	goto	l1503
  1281  001754  502C               	movf	___awdiv@divisor,w,c
  1282  001756  5E2A               	subwf	___awdiv@dividend,f,c
  1283  001758  502D               	movf	___awdiv@divisor+1,w,c
  1284  00175A  5A2B               	subwfb	___awdiv@dividend+1,f,c
  1285  00175C  8030               	bsf	___awdiv@quotient,0,c
  1286  00175E  D000               	goto	l1503
  1287  001760                     l1503:
  1288  001760  90D8               	bcf	status,0,c
  1289  001762  322D               	rrcf	___awdiv@divisor+1,f,c
  1290  001764  322C               	rrcf	___awdiv@divisor,f,c
  1291  001766  2E2E               	decfsz	___awdiv@counter,f,c
  1292  001768  D7EC               	goto	l1495
  1293  00176A  D000               	goto	l1507
  1294  00176C                     l1507:
  1295  00176C  502F               	movf	___awdiv@sign,w,c
  1296  00176E  B4D8               	btfsc	status,2,c
  1297  001770  D005               	goto	l1511
  1298  001772  6C30               	negf	___awdiv@quotient,c
  1299  001774  1E31               	comf	___awdiv@quotient+1,f,c
  1300  001776  B0D8               	btfsc	status,0,c
  1301  001778  2A31               	incf	___awdiv@quotient+1,f,c
  1302  00177A  D000               	goto	l1511
  1303  00177C                     l1511:
  1304  00177C  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  1305  001780  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  1306  001784  D000               	goto	l423
  1307  001786                     l423:
  1308  001786  0012               	return		;funcret
  1309  001788                     __end_of___awdiv:
  1310                           	opt stack 0
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           prodh	equ	0xFF4
  1316                           prodl	equ	0xFF3
  1317                           postinc0	equ	0xFEE
  1318                           wreg	equ	0xFE8
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _MIN *****************
  1326 ;; Defined at:
  1327 ;;		line 165 in file "user.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  a               2   47[COMRAM] int 
  1330 ;;  b               2   49[COMRAM] int 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  2   47[COMRAM] int 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1342 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;Total ram usage:        5 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    4
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_sensorComputation
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text5
  1357  00188A                     __ptext5:
  1358                           	opt stack 0
  1359  00188A                     _MIN:
  1360                           	opt stack 24
  1361                           
  1362                           ;user.c: 167: if(a>b) return b;
  1363                           
  1364                           ;incstack = 0
  1365  00188A  5030               	movf	MIN@a,w,c
  1366  00188C  5C32               	subwf	MIN@b,w,c
  1367  00188E  5033               	movf	MIN@b+1,w,c
  1368  001890  0A80               	xorlw	128
  1369  001892  6E34               	movwf	??_MIN& (0+255),c
  1370  001894  5031               	movf	MIN@a+1,w,c
  1371  001896  0A80               	xorlw	128
  1372  001898  5834               	subwfb	??_MIN& (0+255),w,c
  1373  00189A  B0D8               	btfsc	status,0,c
  1374  00189C  D005               	goto	l222
  1375  00189E  C032  F030         	movff	MIN@b,?_MIN
  1376  0018A2  C033  F031         	movff	MIN@b+1,?_MIN+1
  1377  0018A6  D004               	goto	l223
  1378  0018A8                     l222:
  1379                           
  1380                           ;user.c: 168: return a;
  1381  0018A8  C030  F030         	movff	MIN@a,?_MIN
  1382  0018AC  C031  F031         	movff	MIN@a+1,?_MIN+1
  1383  0018B0                     l223:
  1384  0018B0  0012               	return		;funcret
  1385  0018B2                     __end_of_MIN:
  1386                           	opt stack 0
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           prodh	equ	0xFF4
  1392                           prodl	equ	0xFF3
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postinc2	equ	0xFDE
  1396                           postdec2	equ	0xFDD
  1397                           fsr2h	equ	0xFDA
  1398                           fsr2l	equ	0xFD9
  1399                           status	equ	0xFD8
  1400                           
  1401 ;; *************** function _MAX *****************
  1402 ;; Defined at:
  1403 ;;		line 171 in file "user.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  a               2   47[COMRAM] int 
  1406 ;;  b               2   49[COMRAM] int 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  2   47[COMRAM] int 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;Total ram usage:        5 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    4
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_sensorComputation
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text6
  1433  0018B2                     __ptext6:
  1434                           	opt stack 0
  1435  0018B2                     _MAX:
  1436                           	opt stack 24
  1437                           
  1438                           ;user.c: 173: if(a>b) return a;
  1439                           
  1440                           ;incstack = 0
  1441  0018B2  5030               	movf	MAX@a,w,c
  1442  0018B4  5C32               	subwf	MAX@b,w,c
  1443  0018B6  5033               	movf	MAX@b+1,w,c
  1444  0018B8  0A80               	xorlw	128
  1445  0018BA  6E34               	movwf	??_MAX& (0+255),c
  1446  0018BC  5031               	movf	MAX@a+1,w,c
  1447  0018BE  0A80               	xorlw	128
  1448  0018C0  5834               	subwfb	??_MAX& (0+255),w,c
  1449  0018C2  B0D8               	btfsc	status,0,c
  1450  0018C4  D005               	goto	l226
  1451  0018C6  C030  F030         	movff	MAX@a,?_MAX
  1452  0018CA  C031  F031         	movff	MAX@a+1,?_MAX+1
  1453  0018CE  D004               	goto	l227
  1454  0018D0                     l226:
  1455                           
  1456                           ;user.c: 174: return b;
  1457  0018D0  C032  F030         	movff	MAX@b,?_MAX
  1458  0018D4  C033  F031         	movff	MAX@b+1,?_MAX+1
  1459  0018D8                     l227:
  1460  0018D8  0012               	return		;funcret
  1461  0018DA                     __end_of_MAX:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postinc2	equ	0xFDE
  1472                           postdec2	equ	0xFDD
  1473                           fsr2h	equ	0xFDA
  1474                           fsr2l	equ	0xFD9
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _InitApp *****************
  1478 ;; Defined at:
  1479 ;;		line 35 in file "user.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;		None               void
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    5
  1500 ;; This function calls:
  1501 ;;		_delay
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text7
  1508  001788                     __ptext7:
  1509                           	opt stack 0
  1510  001788                     _InitApp:
  1511                           	opt stack 25
  1512                           
  1513                           ;user.c: 39: TRISC = 0;
  1514                           
  1515                           ;incstack = 0
  1516  001788  0E00               	movlw	0
  1517  00178A  6E94               	movwf	3988,c	;volatile
  1518                           
  1519                           ;user.c: 43: TRISEbits.TRISE1=1;
  1520  00178C  8296               	bsf	3990,1,c	;volatile
  1521                           
  1522                           ;user.c: 45: TRISEbits.TRISE2=1;
  1523  00178E  8496               	bsf	3990,2,c	;volatile
  1524                           
  1525                           ;user.c: 47: TRISBbits.RB1=1;
  1526  001790  8293               	bsf	3987,1,c	;volatile
  1527                           
  1528                           ;user.c: 49: TRISBbits.RB0=1;
  1529  001792  8093               	bsf	3987,0,c	;volatile
  1530                           
  1531                           ;user.c: 52: TRISBbits.RB3=1;
  1532  001794  8693               	bsf	3987,3,c	;volatile
  1533                           
  1534                           ;user.c: 54: TRISBbits.RB2=1;
  1535  001796  8493               	bsf	3987,2,c	;volatile
  1536                           
  1537                           ;user.c: 57: if(PORTBbits.RB3 == 1)
  1538  001798  A681               	btfss	3969,3,c	;volatile
  1539  00179A  D002               	goto	l1371
  1540                           
  1541                           ;user.c: 58: algorithm = LEFTWALL;
  1542  00179C  0E00               	movlw	0
  1543  00179E  D001               	goto	L5
  1544  0017A0                     l1371:
  1545                           
  1546                           ;user.c: 59: else
  1547                           ;user.c: 60: algorithm = RIGHTWALL;
  1548  0017A0  0E01               	movlw	1
  1549  0017A2                     L5:
  1550  0017A2  6E53               	movwf	_algorithm,c
  1551                           
  1552                           ;user.c: 63: ADCON1 =0b00000001;
  1553  0017A4  0E01               	movlw	1
  1554  0017A6  6EC1               	movwf	4033,c	;volatile
  1555                           
  1556                           ;user.c: 68: ADCON2=0b00001010;
  1557  0017A8  0E0A               	movlw	10
  1558  0017AA  6EC0               	movwf	4032,c	;volatile
  1559                           
  1560                           ;user.c: 73: ADCON0=0b00101011;
  1561  0017AC  0E2B               	movlw	43
  1562  0017AE  6EC2               	movwf	4034,c	;volatile
  1563                           
  1564                           ;user.c: 82: T0CON = 0b11000100;
  1565  0017B0  0EC4               	movlw	196
  1566  0017B2  6ED5               	movwf	4053,c	;volatile
  1567                           
  1568                           ;user.c: 90: INTCON2 = 0b11110100;
  1569  0017B4  0EF4               	movlw	244
  1570  0017B6  6EF1               	movwf	intcon2,c	;volatile
  1571                           
  1572                           ;user.c: 100: INTCON = 0b00100000;
  1573  0017B8  0E20               	movlw	32
  1574  0017BA  6EF2               	movwf	intcon,c	;volatile
  1575                           
  1576                           ;user.c: 111: delay(1000);
  1577  0017BC  0E03               	movlw	3
  1578  0017BE  6E2B               	movwf	delay@ms+1,c
  1579  0017C0  0EE8               	movlw	232
  1580  0017C2  6E2A               	movwf	delay@ms,c
  1581  0017C4  EC03  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 112: INTCONbits.GIE = 1;
  1584  0017C8  8EF2               	bsf	intcon,7,c	;volatile
  1585  0017CA  0012               	return		;funcret
  1586  0017CC                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   41[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   44[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  001806                     __ptext8:
  1636                           	opt stack 0
  1637  001806                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  001806  0E00               	movlw	0
  1644  001808  6E2E               	movwf	delay@x+1,c
  1645  00180A  0E00               	movlw	0
  1646  00180C  6E2D               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  00180E  0E00               	movlw	0
  1650  001810  6E2E               	movwf	delay@x+1,c
  1651  001812  0E00               	movlw	0
  1652  001814  6E2D               	movwf	delay@x,c
  1653  001816  D00A               	goto	l188
  1654  001818                     l1285:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001818  0E0B               	movlw	11
  1658  00181A  6E2C               	movwf	??_delay& (0+255),c
  1659  00181C  0E62               	movlw	98
  1660  00181E                     u1167:
  1661  00181E  2EE8               	decfsz	wreg,f,c
  1662  001820  D7FE               	goto	u1167
  1663  001822  2E2C               	decfsz	??_delay& (0+255),f,c
  1664  001824  D7FC               	goto	u1167
  1665  001826  D000               	nop2	
  1666  001828  4A2D               	infsnz	delay@x,f,c
  1667  00182A  2A2E               	incf	delay@x+1,f,c
  1668  00182C                     l188:
  1669  00182C  502A               	movf	delay@ms,w,c
  1670  00182E  5C2D               	subwf	delay@x,w,c
  1671  001830  502B               	movf	delay@ms+1,w,c
  1672  001832  582E               	subwfb	delay@x+1,w,c
  1673  001834  A0D8               	btfss	status,0,c
  1674  001836  D7F0               	goto	l1285
  1675  001838  0012               	return		;funcret
  1676  00183A                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _ConfigureOscillator *****************
  1695 ;; Defined at:
  1696 ;;		line 24 in file "system.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001918                     __ptext9:
  1726                           	opt stack 0
  1727  001918                     _ConfigureOscillator:
  1728                           	opt stack 26
  1729                           
  1730                           ;system.c: 29: OSCCON = 0b01111100;
  1731                           
  1732                           ;incstack = 0
  1733  001918  0E7C               	movlw	124
  1734  00191A  6ED3               	movwf	4051,c	;volatile
  1735                           
  1736                           ;system.c: 31: OSCTUNE = 0b01001111;
  1737  00191C  0E4F               	movlw	79
  1738  00191E  6E9B               	movwf	3995,c	;volatile
  1739  001920  0012               	return		;funcret
  1740  001922                     __end_of_ConfigureOscillator:
  1741                           	opt stack 0
  1742                           tblptru	equ	0xFF8
  1743                           tblptrh	equ	0xFF7
  1744                           tblptrl	equ	0xFF6
  1745                           tablat	equ	0xFF5
  1746                           prodh	equ	0xFF4
  1747                           prodl	equ	0xFF3
  1748                           intcon	equ	0xFF2
  1749                           intcon2	equ	0xFF1
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           postinc2	equ	0xFDE
  1753                           postdec2	equ	0xFDD
  1754                           fsr2h	equ	0xFDA
  1755                           fsr2l	equ	0xFD9
  1756                           status	equ	0xFD8
  1757                           
  1758 ;; *************** function _low_isr *****************
  1759 ;; Defined at:
  1760 ;;		line 114 in file "interrupts.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;		None
  1765 ;; Return value:  Size  Location     Type
  1766 ;;		None               void
  1767 ;; Registers used:
  1768 ;;		None
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1776 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;Total ram usage:       17 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    3
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		Interrupt level 1
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	intcodelo
  1789  000018                     __pintcodelo:
  1790                           	opt stack 0
  1791  000018                     _low_isr:
  1792                           	opt stack 24
  1793                           
  1794                           ;incstack = 0
  1795  000018  CFD8 F001          	movff	status,??_low_isr
  1796  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1797  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1798  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1799  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1800  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1801  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1802  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1803  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1804  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1805  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1806  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1807  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1808  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1809  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1810  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1811  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1812  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1813  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1814  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1815  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1816  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1817  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1818  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1819  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1820  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1821  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1822  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1823  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1824  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1825  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1826  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1827  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1828  00009C  C001  FFD8         	movff	??_low_isr,status
  1829  0000A0  0010               	retfie	
  1830  0000A2                     __end_of_low_isr:
  1831                           	opt stack 0
  1832                           pclatu	equ	0xFFB
  1833                           pclath	equ	0xFFA
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           intcon	equ	0xFF2
  1841                           intcon2	equ	0xFF1
  1842                           postinc0	equ	0xFEE
  1843                           fsr0h	equ	0xFEA
  1844                           fsr0l	equ	0xFE9
  1845                           wreg	equ	0xFE8
  1846                           fsr1h	equ	0xFE2
  1847                           fsr1l	equ	0xFE1
  1848                           bsr	equ	0xFE0
  1849                           postinc2	equ	0xFDE
  1850                           postdec2	equ	0xFDD
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _high_isr *****************
  1856 ;; Defined at:
  1857 ;;		line 65 in file "interrupts.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;		None               void
  1864 ;; Registers used:
  1865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;Total ram usage:       14 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    2
  1878 ;; This function calls:
  1879 ;;		_KController
  1880 ;;		_merge
  1881 ;;		_moveMouse
  1882 ;;		_rotate
  1883 ;; This function is called by:
  1884 ;;		Interrupt level 2
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	intcode
  1889  000008                     __pintcode:
  1890                           	opt stack 0
  1891  000008                     _high_isr:
  1892                           	opt stack 24
  1893                           
  1894                           ;incstack = 0
  1895  000008  CFFA F01C          	movff	pclath,??_high_isr
  1896  00000C  CFFB F01D          	movff	pclatu,??_high_isr+1
  1897  000010  CFE9 F01E          	movff	fsr0l,??_high_isr+2
  1898  000014  ED01  F00A         	call	int_func,f	;refresh shadow registers
  1899                           pclatu	equ	0xFFB
  1900                           pclath	equ	0xFFA
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           prodh	equ	0xFF4
  1906                           prodl	equ	0xFF3
  1907                           intcon	equ	0xFF2
  1908                           intcon2	equ	0xFF1
  1909                           postinc0	equ	0xFEE
  1910                           fsr0h	equ	0xFEA
  1911                           fsr0l	equ	0xFE9
  1912                           wreg	equ	0xFE8
  1913                           fsr1h	equ	0xFE2
  1914                           fsr1l	equ	0xFE1
  1915                           bsr	equ	0xFE0
  1916                           postinc2	equ	0xFDE
  1917                           postdec2	equ	0xFDD
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922                           	psect	intcode_body
  1923  001402                     __pintcode_body:
  1924                           	opt stack 24
  1925  001402                     int_func:
  1926                           	opt stack 24
  1927  001402  0006               	pop		; remove dummy address from shadow register refresh
  1928  001404  CFEA F01F          	movff	fsr0h,??_high_isr+3
  1929  001408  CFE1 F020          	movff	fsr1l,??_high_isr+4
  1930  00140C  CFE2 F021          	movff	fsr1h,??_high_isr+5
  1931  001410  CFD9 F022          	movff	fsr2l,??_high_isr+6
  1932  001414  CFDA F023          	movff	fsr2h,??_high_isr+7
  1933  001418  CFF3 F024          	movff	prodl,??_high_isr+8
  1934  00141C  CFF4 F025          	movff	prodh,??_high_isr+9
  1935  001420  CFF6 F026          	movff	tblptrl,??_high_isr+10
  1936  001424  CFF7 F027          	movff	tblptrh,??_high_isr+11
  1937  001428  CFF8 F028          	movff	tblptru,??_high_isr+12
  1938  00142C  CFF5 F029          	movff	tablat,??_high_isr+13
  1939                           
  1940                           ;interrupts.c: 84: if(INTCONbits.TMR0IF == 1)
  1941  001430  A4F2               	btfss	intcon,2,c	;volatile
  1942  001432  D075               	goto	i2l50
  1943                           
  1944                           ;interrupts.c: 85: {
  1945                           ;interrupts.c: 86: if(MotorDelayCounter > 2)
  1946  001434  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  1947  001436  D06F               	goto	i2l1447
  1948  001438  504A               	movf	_MotorDelayCounter+1,w,c
  1949  00143A  E104               	bnz	i2u84_40
  1950  00143C  0E03               	movlw	3
  1951  00143E  5C49               	subwf	_MotorDelayCounter,w,c
  1952  001440  A0D8               	btfss	status,0,c
  1953  001442  D069               	goto	i2l1447
  1954  001444                     i2u84_40:
  1955                           
  1956                           ;interrupts.c: 87: {
  1957                           ;interrupts.c: 89: if(RotateCounter > 0)
  1958  001444  BE4E               	btfsc	_RotateCounter+1,7,c
  1959  001446  D008               	goto	i2l1421
  1960  001448  504E               	movf	_RotateCounter+1,w,c
  1961  00144A  E103               	bnz	i2u85_40
  1962  00144C  044D               	decf	_RotateCounter,w,c
  1963  00144E  A0D8               	btfss	status,0,c
  1964  001450  D003               	goto	i2l1421
  1965  001452                     i2u85_40:
  1966                           
  1967                           ;interrupts.c: 90: rotate();
  1968  001452  ECE6  F00B         	call	_rotate	;wreg free
  1969  001456  D053               	goto	i2l1445
  1970  001458                     i2l1421:
  1971                           
  1972                           ;interrupts.c: 91: else if ((sensorValue[2] < 500 && sensorValue[3] < 500)
  1973                           ;interrupts.c: 92: && (sensorValue[0] > 100 || sensorValue[1] > 100 ))
  1974  001458  BE44               	btfsc	_sensorValue+5,7,c
  1975  00145A  D006               	goto	i2l1423
  1976  00145C  0EF4               	movlw	244
  1977  00145E  5C43               	subwf	_sensorValue+4,w,c
  1978  001460  0E01               	movlw	1
  1979  001462  5844               	subwfb	_sensorValue+5,w,c
  1980  001464  B0D8               	btfsc	status,0,c
  1981  001466  D01D               	goto	i2l1431
  1982  001468                     i2l1423:
  1983  001468  BE46               	btfsc	_sensorValue+7,7,c
  1984  00146A  D006               	goto	i2l1425
  1985  00146C  0EF4               	movlw	244
  1986  00146E  5C45               	subwf	_sensorValue+6,w,c
  1987  001470  0E01               	movlw	1
  1988  001472  5846               	subwfb	_sensorValue+7,w,c
  1989  001474  B0D8               	btfsc	status,0,c
  1990  001476  D015               	goto	i2l1431
  1991  001478                     i2l1425:
  1992  001478  BE40               	btfsc	_sensorValue+1,7,c
  1993  00147A  D006               	goto	i2l1427
  1994  00147C  5040               	movf	_sensorValue+1,w,c
  1995  00147E  E10E               	bnz	i2l1429
  1996  001480  0E65               	movlw	101
  1997  001482  5C3F               	subwf	_sensorValue,w,c
  1998  001484  B0D8               	btfsc	status,0,c
  1999  001486  D00A               	goto	i2l1429
  2000  001488                     i2l1427:
  2001  001488  BE42               	btfsc	_sensorValue+3,7,c
  2002  00148A  D00B               	goto	i2l1431
  2003  00148C  5042               	movf	_sensorValue+3,w,c
  2004  00148E  E106               	bnz	i2l1429
  2005  001490  0E65               	movlw	101
  2006  001492  5C41               	subwf	_sensorValue+2,w,c
  2007  001494  B0D8               	btfsc	status,0,c
  2008  001496  D002               	goto	i2l1429
  2009  001498  D004               	goto	i2l1431
  2010  00149A  D000               	goto	i2l1429
  2011  00149C                     i2l1429:
  2012                           
  2013                           ;interrupts.c: 93: {
  2014                           ;interrupts.c: 94: KController();
  2015  00149C  EC26  F00B         	call	_KController	;wreg free
  2016                           
  2017                           ;interrupts.c: 95: } else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2018  0014A0  D02E               	goto	i2l1445
  2019  0014A2                     i2l1431:
  2020                           
  2021                           ;interrupts.c: 96: && (sensorValue[2] > 500 || sensorValue[3] > 500) && RotateCounter <=
      +                           0) {
  2022  0014A2  BE40               	btfsc	_sensorValue+1,7,c
  2023  0014A4  D02C               	goto	i2l1445
  2024  0014A6  5040               	movf	_sensorValue+1,w,c
  2025  0014A8  E104               	bnz	i2u90_40
  2026  0014AA  0E65               	movlw	101
  2027  0014AC  5C3F               	subwf	_sensorValue,w,c
  2028  0014AE  A0D8               	btfss	status,0,c
  2029  0014B0  D026               	goto	i2l1445
  2030  0014B2                     i2u90_40:
  2031  0014B2  BE42               	btfsc	_sensorValue+3,7,c
  2032  0014B4  D024               	goto	i2l1445
  2033  0014B6  5042               	movf	_sensorValue+3,w,c
  2034  0014B8  E104               	bnz	i2u91_40
  2035  0014BA  0E65               	movlw	101
  2036  0014BC  5C41               	subwf	_sensorValue+2,w,c
  2037  0014BE  A0D8               	btfss	status,0,c
  2038  0014C0  D01E               	goto	i2l1445
  2039  0014C2                     i2u91_40:
  2040  0014C2  BE44               	btfsc	_sensorValue+5,7,c
  2041  0014C4  D006               	goto	i2l1437
  2042  0014C6  0EF5               	movlw	245
  2043  0014C8  5C43               	subwf	_sensorValue+4,w,c
  2044  0014CA  0E01               	movlw	1
  2045  0014CC  5844               	subwfb	_sensorValue+5,w,c
  2046  0014CE  B0D8               	btfsc	status,0,c
  2047  0014D0  D008               	goto	i2l1439
  2048  0014D2                     i2l1437:
  2049  0014D2  BE46               	btfsc	_sensorValue+7,7,c
  2050  0014D4  D014               	goto	i2l1445
  2051  0014D6  0EF5               	movlw	245
  2052  0014D8  5C45               	subwf	_sensorValue+6,w,c
  2053  0014DA  0E01               	movlw	1
  2054  0014DC  5846               	subwfb	_sensorValue+7,w,c
  2055  0014DE  A0D8               	btfss	status,0,c
  2056  0014E0  D00E               	goto	i2l1445
  2057  0014E2                     i2l1439:
  2058  0014E2  BE4E               	btfsc	_RotateCounter+1,7,c
  2059  0014E4  D005               	goto	i2l1441
  2060  0014E6  504E               	movf	_RotateCounter+1,w,c
  2061  0014E8  E10A               	bnz	i2l1445
  2062  0014EA  044D               	decf	_RotateCounter,w,c
  2063  0014EC  B0D8               	btfsc	status,0,c
  2064  0014EE  D007               	goto	i2l1445
  2065  0014F0                     i2l1441:
  2066                           
  2067                           ;interrupts.c: 97: RotateCounter = 200*2;
  2068  0014F0  0E01               	movlw	1
  2069  0014F2  6E4E               	movwf	_RotateCounter+1,c
  2070  0014F4  0E90               	movlw	144
  2071  0014F6  6E4D               	movwf	_RotateCounter,c
  2072                           
  2073                           ;interrupts.c: 98: rotate();
  2074  0014F8  ECE6  F00B         	call	_rotate	;wreg free
  2075  0014FC  D000               	goto	i2l1445
  2076  0014FE                     i2l1445:
  2077                           
  2078                           ;interrupts.c: 99: }
  2079                           ;interrupts.c: 100: moveMouse(merge(LMotorCounter,RMotorCounter));
  2080  0014FE  C052  F012         	movff	_RMotorCounter,merge@right
  2081  001502  5051               	movf	_LMotorCounter,w,c
  2082  001504  EC84  F00C         	call	_merge
  2083  001508  EC91  F00C         	call	_moveMouse
  2084                           
  2085                           ;interrupts.c: 101: MotorDelayCounter = 0;
  2086  00150C  0E00               	movlw	0
  2087  00150E  6E4A               	movwf	_MotorDelayCounter+1,c
  2088  001510  0E00               	movlw	0
  2089  001512  6E49               	movwf	_MotorDelayCounter,c
  2090  001514  D000               	goto	i2l1447
  2091  001516                     i2l1447:
  2092                           
  2093                           ;interrupts.c: 102: }
  2094                           ;interrupts.c: 104: MotorDelayCounter++;
  2095  001516  4A49               	infsnz	_MotorDelayCounter,f,c
  2096  001518  2A4A               	incf	_MotorDelayCounter+1,f,c
  2097                           
  2098                           ;interrupts.c: 105: INTCONbits.TMR0IF = 0;
  2099  00151A  94F2               	bcf	intcon,2,c	;volatile
  2100  00151C  D000               	goto	i2l50
  2101  00151E                     i2l50:
  2102  00151E  C029  FFF5         	movff	??_high_isr+13,tablat
  2103  001522  C028  FFF8         	movff	??_high_isr+12,tblptru
  2104  001526  C027  FFF7         	movff	??_high_isr+11,tblptrh
  2105  00152A  C026  FFF6         	movff	??_high_isr+10,tblptrl
  2106  00152E  C025  FFF4         	movff	??_high_isr+9,prodh
  2107  001532  C024  FFF3         	movff	??_high_isr+8,prodl
  2108  001536  C023  FFDA         	movff	??_high_isr+7,fsr2h
  2109  00153A  C022  FFD9         	movff	??_high_isr+6,fsr2l
  2110  00153E  C021  FFE2         	movff	??_high_isr+5,fsr1h
  2111  001542  C020  FFE1         	movff	??_high_isr+4,fsr1l
  2112  001546  C01F  FFEA         	movff	??_high_isr+3,fsr0h
  2113  00154A  C01E  FFE9         	movff	??_high_isr+2,fsr0l
  2114  00154E  C01D  FFFB         	movff	??_high_isr+1,pclatu
  2115  001552  C01C  FFFA         	movff	??_high_isr,pclath
  2116  001556  0011               	retfie		f
  2117  001558                     __end_of_high_isr:
  2118                           	opt stack 0
  2119                           pclatu	equ	0xFFB
  2120                           pclath	equ	0xFFA
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon	equ	0xFF2
  2128                           intcon2	equ	0xFF1
  2129                           postinc0	equ	0xFEE
  2130                           fsr0h	equ	0xFEA
  2131                           fsr0l	equ	0xFE9
  2132                           wreg	equ	0xFE8
  2133                           fsr1h	equ	0xFE2
  2134                           fsr1l	equ	0xFE1
  2135                           bsr	equ	0xFE0
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _rotate *****************
  2143 ;; Defined at:
  2144 ;;		line 245 in file "interrupts.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;		None               void
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;Total ram usage:        0 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    1
  2165 ;; This function calls:
  2166 ;;		_motorCounterUpdate
  2167 ;; This function is called by:
  2168 ;;		_high_isr
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text12
  2173  0017CC                     __ptext12:
  2174                           	opt stack 0
  2175  0017CC                     _rotate:
  2176                           	opt stack 24
  2177                           
  2178                           ;interrupts.c: 247: if (algorithm == LEFTWALL){
  2179                           
  2180                           ;incstack = 0
  2181  0017CC  5053               	movf	_algorithm,w,c
  2182  0017CE  A4D8               	btfss	status,2,c
  2183  0017D0  D00B               	goto	i2l1323
  2184                           
  2185                           ;interrupts.c: 248: motorCounterUpdate(RIGHT,0);
  2186  0017D2  0E00               	movlw	0
  2187  0017D4  6E12               	movwf	motorCounterUpdate@reverse,c
  2188  0017D6  0E01               	movlw	1
  2189  0017D8  ECAC  F00A         	call	_motorCounterUpdate
  2190                           
  2191                           ;interrupts.c: 249: motorCounterUpdate(LEFT,1);
  2192  0017DC  0E01               	movlw	1
  2193  0017DE  6E12               	movwf	motorCounterUpdate@reverse,c
  2194  0017E0  0E00               	movlw	0
  2195  0017E2  ECAC  F00A         	call	_motorCounterUpdate
  2196                           
  2197                           ;interrupts.c: 250: } else {
  2198  0017E6  D00B               	goto	i2l1325
  2199  0017E8                     i2l1323:
  2200                           
  2201                           ;interrupts.c: 251: motorCounterUpdate(LEFT,0);
  2202  0017E8  0E00               	movlw	0
  2203  0017EA  6E12               	movwf	motorCounterUpdate@reverse,c
  2204  0017EC  0E00               	movlw	0
  2205  0017EE  ECAC  F00A         	call	_motorCounterUpdate
  2206                           
  2207                           ;interrupts.c: 252: motorCounterUpdate(RIGHT,1);
  2208  0017F2  0E01               	movlw	1
  2209  0017F4  6E12               	movwf	motorCounterUpdate@reverse,c
  2210  0017F6  0E01               	movlw	1
  2211  0017F8  ECAC  F00A         	call	_motorCounterUpdate
  2212  0017FC  D000               	goto	i2l1325
  2213  0017FE                     i2l1325:
  2214                           
  2215                           ;interrupts.c: 253: }
  2216                           ;interrupts.c: 254: RotateCounter--;
  2217  0017FE  064D               	decf	_RotateCounter,f,c
  2218  001800  A0D8               	btfss	status,0,c
  2219  001802  064E               	decf	_RotateCounter+1,f,c
  2220  001804  0012               	return		;funcret
  2221  001806                     __end_of_rotate:
  2222                           	opt stack 0
  2223                           pclatu	equ	0xFFB
  2224                           pclath	equ	0xFFA
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           intcon	equ	0xFF2
  2232                           intcon2	equ	0xFF1
  2233                           postinc0	equ	0xFEE
  2234                           fsr0h	equ	0xFEA
  2235                           fsr0l	equ	0xFE9
  2236                           wreg	equ	0xFE8
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           bsr	equ	0xFE0
  2240                           postinc2	equ	0xFDE
  2241                           postdec2	equ	0xFDD
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _KController *****************
  2247 ;; Defined at:
  2248 ;;		line 216 in file "interrupts.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  steps           2   24[COMRAM] int 
  2253 ;;  diff            2   22[COMRAM] int 
  2254 ;;  correctTo       1   26[COMRAM] enum E4081
  2255 ;; Return value:  Size  Location     Type
  2256 ;;		None               void
  2257 ;; Registers used:
  2258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;Total ram usage:        7 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    1
  2271 ;; This function calls:
  2272 ;;		_ABS
  2273 ;;		_merge
  2274 ;;		_motorCounterUpdate
  2275 ;;		_moveMouse
  2276 ;; This function is called by:
  2277 ;;		_high_isr
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text13
  2282  00164C                     __ptext13:
  2283                           	opt stack 0
  2284  00164C                     _KController:
  2285                           	opt stack 24
  2286                           
  2287                           ;interrupts.c: 218: Side correctTo;
  2288                           ;interrupts.c: 219: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2289                           
  2290                           ;incstack = 0
  2291  00164C  EE20  F041         	lfsr	2,_sensorValue+2
  2292  001650  CFDE F015          	movff	postinc2,??_KController
  2293  001654  CFDD F016          	movff	postdec2,??_KController+1
  2294  001658  1E15               	comf	??_KController,f,c
  2295  00165A  1E16               	comf	??_KController+1,f,c
  2296  00165C  4A15               	infsnz	??_KController,f,c
  2297  00165E  2A16               	incf	??_KController+1,f,c
  2298  001660  503F               	movf	_sensorValue,w,c
  2299  001662  2415               	addwf	??_KController,w,c
  2300  001664  6E12               	movwf	ABS@x,c
  2301  001666  5040               	movf	_sensorValue+1,w,c
  2302  001668  2016               	addwfc	??_KController+1,w,c
  2303  00166A  6E13               	movwf	ABS@x+1,c
  2304  00166C  EC6D  F00C         	call	_ABS	;wreg free
  2305  001670  C012  F017         	movff	?_ABS,KController@diff
  2306  001674  C013  F018         	movff	?_ABS+1,KController@diff+1
  2307                           
  2308                           ;interrupts.c: 221: int steps = 0;
  2309  001678  0E00               	movlw	0
  2310  00167A  6E1A               	movwf	KController@steps+1,c
  2311  00167C  0E00               	movlw	0
  2312  00167E  6E19               	movwf	KController@steps,c
  2313                           
  2314                           ;interrupts.c: 222: if(controllerSteps > 0)
  2315  001680  5054               	movf	_controllerSteps,w,c
  2316  001682  B4D8               	btfsc	status,2,c
  2317  001684  D00C               	goto	i2l1339
  2318                           
  2319                           ;interrupts.c: 223: {
  2320                           ;interrupts.c: 224: motorCounterUpdate(RIGHT,0);
  2321  001686  0E00               	movlw	0
  2322  001688  6E12               	movwf	motorCounterUpdate@reverse,c
  2323  00168A  0E01               	movlw	1
  2324  00168C  ECAC  F00A         	call	_motorCounterUpdate
  2325                           
  2326                           ;interrupts.c: 225: motorCounterUpdate(LEFT,0);
  2327  001690  0E00               	movlw	0
  2328  001692  6E12               	movwf	motorCounterUpdate@reverse,c
  2329  001694  0E00               	movlw	0
  2330  001696  ECAC  F00A         	call	_motorCounterUpdate
  2331                           
  2332                           ;interrupts.c: 226: controllerSteps--;
  2333  00169A  0654               	decf	_controllerSteps,f,c
  2334                           
  2335                           ;interrupts.c: 227: return;
  2336  00169C  D029               	goto	i2l105
  2337  00169E                     i2l1339:
  2338                           
  2339                           ;interrupts.c: 228: }
  2340                           ;interrupts.c: 230: if(sensorValue[0] > sensorValue[1])
  2341  00169E  503F               	movf	_sensorValue,w,c
  2342  0016A0  5C41               	subwf	_sensorValue+2,w,c
  2343  0016A2  5042               	movf	_sensorValue+3,w,c
  2344  0016A4  0A80               	xorlw	128
  2345  0016A6  6E15               	movwf	??_KController& (0+255),c
  2346  0016A8  5040               	movf	_sensorValue+1,w,c
  2347  0016AA  0A80               	xorlw	128
  2348  0016AC  5815               	subwfb	??_KController& (0+255),w,c
  2349  0016AE  B0D8               	btfsc	status,0,c
  2350  0016B0  D00F               	goto	i2l1347
  2351                           
  2352                           ;interrupts.c: 231: {
  2353                           ;interrupts.c: 232: correctTo = LEFT;
  2354  0016B2  0E00               	movlw	0
  2355  0016B4  6E1B               	movwf	KController@correctTo,c
  2356                           
  2357                           ;interrupts.c: 233: motorCounterUpdate(correctTo,0);
  2358  0016B6  0E00               	movlw	0
  2359  0016B8  6E12               	movwf	motorCounterUpdate@reverse,c
  2360  0016BA  501B               	movf	KController@correctTo,w,c
  2361  0016BC  ECAC  F00A         	call	_motorCounterUpdate
  2362                           
  2363                           ;interrupts.c: 234: moveMouse(merge(LMotorCounter,RMotorCounter));
  2364  0016C0  C052  F012         	movff	_RMotorCounter,merge@right
  2365  0016C4  5051               	movf	_LMotorCounter,w,c
  2366  0016C6  EC84  F00C         	call	_merge
  2367  0016CA  EC91  F00C         	call	_moveMouse
  2368                           
  2369                           ;interrupts.c: 235: }
  2370  0016CE  D00E               	goto	i2l107
  2371  0016D0                     i2l1347:
  2372                           
  2373                           ;interrupts.c: 236: else
  2374                           ;interrupts.c: 237: {
  2375                           ;interrupts.c: 238: correctTo = RIGHT;
  2376  0016D0  0E01               	movlw	1
  2377  0016D2  6E1B               	movwf	KController@correctTo,c
  2378                           
  2379                           ;interrupts.c: 239: motorCounterUpdate(correctTo,0);
  2380  0016D4  0E00               	movlw	0
  2381  0016D6  6E12               	movwf	motorCounterUpdate@reverse,c
  2382  0016D8  501B               	movf	KController@correctTo,w,c
  2383  0016DA  ECAC  F00A         	call	_motorCounterUpdate
  2384                           
  2385                           ;interrupts.c: 240: moveMouse(merge(LMotorCounter,RMotorCounter));
  2386  0016DE  C052  F012         	movff	_RMotorCounter,merge@right
  2387  0016E2  5051               	movf	_LMotorCounter,w,c
  2388  0016E4  EC84  F00C         	call	_merge
  2389  0016E8  EC91  F00C         	call	_moveMouse
  2390  0016EC                     i2l107:
  2391                           
  2392                           ;interrupts.c: 241: }
  2393                           ;interrupts.c: 242: controllerSteps = 10;
  2394  0016EC  0E0A               	movlw	10
  2395  0016EE  6E54               	movwf	_controllerSteps,c
  2396  0016F0                     i2l105:
  2397  0016F0  0012               	return		;funcret
  2398  0016F2                     __end_of_KController:
  2399                           	opt stack 0
  2400                           pclatu	equ	0xFFB
  2401                           pclath	equ	0xFFA
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           postinc0	equ	0xFEE
  2411                           fsr0h	equ	0xFEA
  2412                           fsr0l	equ	0xFE9
  2413                           wreg	equ	0xFE8
  2414                           fsr1h	equ	0xFE2
  2415                           fsr1l	equ	0xFE1
  2416                           bsr	equ	0xFE0
  2417                           postinc2	equ	0xFDE
  2418                           postdec2	equ	0xFDD
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _moveMouse *****************
  2424 ;; Defined at:
  2425 ;;		line 203 in file "interrupts.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  action          1    wreg     unsigned char 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  action          1   17[COMRAM] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;		None               void
  2432 ;; Registers used:
  2433 ;;		wreg
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;Total ram usage:        1 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_high_isr
  2449 ;;		_KController
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text14
  2454  001922                     __ptext14:
  2455                           	opt stack 0
  2456  001922                     _moveMouse:
  2457                           	opt stack 25
  2458                           
  2459                           ;incstack = 0
  2460                           ;moveMouse@action stored from wreg
  2461  001922  6E12               	movwf	moveMouse@action,c
  2462                           
  2463                           ;interrupts.c: 205: LATC = action;
  2464  001924  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2465  001928  0012               	return		;funcret
  2466  00192A                     __end_of_moveMouse:
  2467                           	opt stack 0
  2468                           pclatu	equ	0xFFB
  2469                           pclath	equ	0xFFA
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           prodh	equ	0xFF4
  2475                           prodl	equ	0xFF3
  2476                           intcon	equ	0xFF2
  2477                           intcon2	equ	0xFF1
  2478                           postinc0	equ	0xFEE
  2479                           fsr0h	equ	0xFEA
  2480                           fsr0l	equ	0xFE9
  2481                           wreg	equ	0xFE8
  2482                           fsr1h	equ	0xFE2
  2483                           fsr1l	equ	0xFE1
  2484                           bsr	equ	0xFE0
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _motorCounterUpdate *****************
  2492 ;; Defined at:
  2493 ;;		line 151 in file "interrupts.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  side            1    wreg     enum E4081
  2496 ;;  reverse         1   17[COMRAM] unsigned char 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  side            1   18[COMRAM] enum E4081
  2499 ;; Return value:  Size  Location     Type
  2500 ;;		None               void
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2508 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;Total ram usage:        2 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_KController
  2518 ;;		_rotate
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text15
  2523  001558                     __ptext15:
  2524                           	opt stack 0
  2525  001558                     _motorCounterUpdate:
  2526                           	opt stack 24
  2527                           
  2528                           ;incstack = 0
  2529                           ;motorCounterUpdate@side stored from wreg
  2530  001558  6E13               	movwf	motorCounterUpdate@side,c
  2531                           
  2532                           ;interrupts.c: 153: if(side == LEFT && reverse == 1)
  2533  00155A  5013               	movf	motorCounterUpdate@side,w,c
  2534  00155C  A4D8               	btfss	status,2,c
  2535  00155E  D01B               	goto	i2l1221
  2536  001560  0412               	decf	motorCounterUpdate@reverse,w,c
  2537  001562  B4D8               	btfsc	status,2,c
  2538  001564  D00B               	goto	i2l1219
  2539  001566  D017               	goto	i2l1221
  2540                           
  2541                           ;interrupts.c: 154: {
  2542                           ;interrupts.c: 155: switch(LMotorCounter)
  2543  001568  D009               	goto	i2l1219
  2544  00156A                     i2l1209:
  2545  00156A  0E02               	movlw	2
  2546  00156C  D004               	goto	L8
  2547  00156E                     i2l1211:
  2548  00156E  0E04               	movlw	4
  2549  001570  D002               	goto	L8
  2550                           
  2551                           ;interrupts.c: 159: case 0b00000100: LMotorCounter = 0b00001000; break;
  2552  001572  D03E               	goto	i2l1253
  2553                           
  2554                           ;interrupts.c: 160: case 0b00001000: LMotorCounter = 0b00000001; break;
  2555  001574  D039               	goto	i2l1247
  2556  001576                     L8:
  2557  001576  6E51               	movwf	_LMotorCounter,c
  2558  001578  D068               	goto	i2l91
  2559                           
  2560                           ;interrupts.c: 161: default: LMotorCounter = 0b00000001;
  2561  00157A  D036               	goto	i2l1247
  2562  00157C                     i2l1219:
  2563  00157C  5051               	movf	_LMotorCounter,w,c
  2564                           
  2565                           ; Switch size 1, requested type "space"
  2566                           ; Number of cases is 4, Range of values is 1 to 8
  2567                           ; switch strategies available:
  2568                           ; Name         Instructions Cycles
  2569                           ; simple_byte           13     7 (average)
  2570                           ;	Chosen strategy is simple_byte
  2571  00157E  0A01               	xorlw	1	; case 1
  2572  001580  B4D8               	btfsc	status,2,c
  2573  001582  D7F3               	goto	i2l1209
  2574  001584  0A03               	xorlw	3	; case 2
  2575  001586  B4D8               	btfsc	status,2,c
  2576  001588  D7F2               	goto	i2l1211
  2577  00158A  0A06               	xorlw	6	; case 4
  2578  00158C  B4D8               	btfsc	status,2,c
  2579  00158E  D030               	goto	i2l1253
  2580  001590  0A0C               	xorlw	12	; case 8
  2581  001592  D02A               	goto	i2l1247
  2582                           
  2583                           ;interrupts.c: 163: } else if(side == RIGHT && reverse == 1)
  2584  001594  D05A               	goto	i2l91
  2585  001596                     i2l1221:
  2586  001596  0413               	decf	motorCounterUpdate@side,w,c
  2587  001598  A4D8               	btfss	status,2,c
  2588  00159A  D01D               	goto	i2l1239
  2589  00159C  0412               	decf	motorCounterUpdate@reverse,w,c
  2590  00159E  B4D8               	btfsc	status,2,c
  2591  0015A0  D00B               	goto	i2l1237
  2592  0015A2  D019               	goto	i2l1239
  2593                           
  2594                           ;interrupts.c: 164: {
  2595                           ;interrupts.c: 165: switch(RMotorCounter)
  2596  0015A4  D009               	goto	i2l1237
  2597  0015A6                     i2l1227:
  2598  0015A6  0E08               	movlw	8
  2599  0015A8  D040               	goto	L16
  2600  0015AA                     i2l1229:
  2601  0015AA  0E01               	movlw	1
  2602  0015AC  D03E               	goto	L16
  2603  0015AE                     i2l1231:
  2604  0015AE  0E02               	movlw	2
  2605  0015B0  D03C               	goto	L16
  2606  0015B2                     i2l1233:
  2607  0015B2  0E04               	movlw	4
  2608  0015B4  D03A               	goto	L16
  2609                           
  2610                           ;interrupts.c: 171: default: RMotorCounter = 0b00001000;
  2611  0015B6  D7F7               	goto	i2l1227
  2612  0015B8                     i2l1237:
  2613  0015B8  5052               	movf	_RMotorCounter,w,c
  2614                           
  2615                           ; Switch size 1, requested type "space"
  2616                           ; Number of cases is 4, Range of values is 1 to 8
  2617                           ; switch strategies available:
  2618                           ; Name         Instructions Cycles
  2619                           ; simple_byte           13     7 (average)
  2620                           ;	Chosen strategy is simple_byte
  2621  0015BA  0A01               	xorlw	1	; case 1
  2622  0015BC  B4D8               	btfsc	status,2,c
  2623  0015BE  D7F3               	goto	i2l1227
  2624  0015C0  0A03               	xorlw	3	; case 2
  2625  0015C2  B4D8               	btfsc	status,2,c
  2626  0015C4  D7F2               	goto	i2l1229
  2627  0015C6  0A06               	xorlw	6	; case 4
  2628  0015C8  B4D8               	btfsc	status,2,c
  2629  0015CA  D7F1               	goto	i2l1231
  2630  0015CC  0A0C               	xorlw	12	; case 8
  2631  0015CE  B4D8               	btfsc	status,2,c
  2632  0015D0  D7F0               	goto	i2l1233
  2633  0015D2  D7E9               	goto	i2l1227
  2634                           
  2635                           ;interrupts.c: 173: } else if(side == LEFT && reverse == 0)
  2636  0015D4  D03A               	goto	i2l91
  2637  0015D6                     i2l1239:
  2638  0015D6  5013               	movf	motorCounterUpdate@side,w,c
  2639  0015D8  A4D8               	btfss	status,2,c
  2640  0015DA  D01B               	goto	i2l1257
  2641  0015DC  5012               	movf	motorCounterUpdate@reverse,w,c
  2642  0015DE  B4D8               	btfsc	status,2,c
  2643  0015E0  D009               	goto	i2l1255
  2644  0015E2  D017               	goto	i2l1257
  2645                           
  2646                           ;interrupts.c: 174: {
  2647                           ;interrupts.c: 175: switch(LMotorCounter)
  2648  0015E4  D007               	goto	i2l1255
  2649                           
  2650                           ;interrupts.c: 176: {
  2651                           ;interrupts.c: 177: case 0b00000001: LMotorCounter = 0b00001000; break;
  2652  0015E6  D004               	goto	i2l1253
  2653  0015E8                     i2l1247:
  2654  0015E8  0E01               	movlw	1
  2655  0015EA  D7C5               	goto	L8
  2656                           
  2657                           ;interrupts.c: 179: case 0b00000100: LMotorCounter = 0b00000010; break;
  2658  0015EC  D7BE               	goto	i2l1209
  2659                           
  2660                           ;interrupts.c: 180: case 0b00001000: LMotorCounter = 0b00000100; break;
  2661  0015EE  D7BF               	goto	i2l1211
  2662  0015F0                     i2l1253:
  2663  0015F0  0E08               	movlw	8
  2664  0015F2  D7C1               	goto	L8
  2665  0015F4                     i2l1255:
  2666  0015F4  5051               	movf	_LMotorCounter,w,c
  2667                           
  2668                           ; Switch size 1, requested type "space"
  2669                           ; Number of cases is 4, Range of values is 1 to 8
  2670                           ; switch strategies available:
  2671                           ; Name         Instructions Cycles
  2672                           ; simple_byte           13     7 (average)
  2673                           ;	Chosen strategy is simple_byte
  2674  0015F6  0A01               	xorlw	1	; case 1
  2675  0015F8  B4D8               	btfsc	status,2,c
  2676  0015FA  D7FA               	goto	i2l1253
  2677  0015FC  0A03               	xorlw	3	; case 2
  2678  0015FE  B4D8               	btfsc	status,2,c
  2679  001600  D7F3               	goto	i2l1247
  2680  001602  0A06               	xorlw	6	; case 4
  2681  001604  B4D8               	btfsc	status,2,c
  2682  001606  D7B1               	goto	i2l1209
  2683  001608  0A0C               	xorlw	12	; case 8
  2684  00160A  B4D8               	btfsc	status,2,c
  2685  00160C  D7B0               	goto	i2l1211
  2686  00160E  D7F0               	goto	i2l1253
  2687                           
  2688                           ;interrupts.c: 183: } else if(side == RIGHT && reverse == 0)
  2689  001610  D01C               	goto	i2l91
  2690  001612                     i2l1257:
  2691  001612  0413               	decf	motorCounterUpdate@side,w,c
  2692  001614  A4D8               	btfss	status,2,c
  2693  001616  D019               	goto	i2l91
  2694  001618  5012               	movf	motorCounterUpdate@reverse,w,c
  2695  00161A  B4D8               	btfsc	status,2,c
  2696  00161C  D009               	goto	i2l1273
  2697  00161E  D015               	goto	i2l91
  2698                           
  2699                           ;interrupts.c: 184: {
  2700                           ;interrupts.c: 185: switch(RMotorCounter)
  2701  001620  D007               	goto	i2l1273
  2702                           
  2703                           ;interrupts.c: 186: {
  2704                           ;interrupts.c: 187: case 0b00000001: RMotorCounter = 0b00000010; break;
  2705  001622  D7C5               	goto	i2l1231
  2706                           
  2707                           ;interrupts.c: 188: case 0b00000010: RMotorCounter = 0b00000100; break;
  2708  001624  D7C6               	goto	i2l1233
  2709                           
  2710                           ;interrupts.c: 189: case 0b00000100: RMotorCounter = 0b00001000; break;
  2711  001626  D7BF               	goto	i2l1227
  2712                           
  2713                           ;interrupts.c: 190: case 0b00001000: RMotorCounter = 0b00000001; break;
  2714  001628  D7C0               	goto	i2l1229
  2715  00162A                     L16:
  2716  00162A  6E52               	movwf	_RMotorCounter,c
  2717  00162C  D00E               	goto	i2l91
  2718                           
  2719                           ;interrupts.c: 191: default: RMotorCounter = 0b00000001;
  2720  00162E  D7BD               	goto	i2l1229
  2721  001630                     i2l1273:
  2722  001630  5052               	movf	_RMotorCounter,w,c
  2723                           
  2724                           ; Switch size 1, requested type "space"
  2725                           ; Number of cases is 4, Range of values is 1 to 8
  2726                           ; switch strategies available:
  2727                           ; Name         Instructions Cycles
  2728                           ; simple_byte           13     7 (average)
  2729                           ;	Chosen strategy is simple_byte
  2730  001632  0A01               	xorlw	1	; case 1
  2731  001634  B4D8               	btfsc	status,2,c
  2732  001636  D7BB               	goto	i2l1231
  2733  001638  0A03               	xorlw	3	; case 2
  2734  00163A  B4D8               	btfsc	status,2,c
  2735  00163C  D7BA               	goto	i2l1233
  2736  00163E  0A06               	xorlw	6	; case 4
  2737  001640  B4D8               	btfsc	status,2,c
  2738  001642  D7B1               	goto	i2l1227
  2739  001644  0A0C               	xorlw	12	; case 8
  2740  001646  D7B1               	goto	i2l1229
  2741  001648  D000               	goto	i2l91
  2742  00164A                     i2l91:
  2743  00164A  0012               	return		;funcret
  2744  00164C                     __end_of_motorCounterUpdate:
  2745                           	opt stack 0
  2746                           pclatu	equ	0xFFB
  2747                           pclath	equ	0xFFA
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           intcon	equ	0xFF2
  2755                           intcon2	equ	0xFF1
  2756                           postinc0	equ	0xFEE
  2757                           fsr0h	equ	0xFEA
  2758                           fsr0l	equ	0xFE9
  2759                           wreg	equ	0xFE8
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           bsr	equ	0xFE0
  2763                           postinc2	equ	0xFDE
  2764                           postdec2	equ	0xFDD
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _merge *****************
  2770 ;; Defined at:
  2771 ;;		line 196 in file "interrupts.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  left            1    wreg     unsigned char 
  2774 ;;  right           1   17[COMRAM] unsigned char 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  left            1   18[COMRAM] unsigned char 
  2777 ;;  merged          1   19[COMRAM] unsigned char 
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      unsigned char 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;Total ram usage:        3 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_high_isr
  2797 ;;		_KController
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text16
  2802  001908                     __ptext16:
  2803                           	opt stack 0
  2804  001908                     _merge:
  2805                           	opt stack 25
  2806                           
  2807                           ;incstack = 0
  2808                           ;merge@left stored from wreg
  2809  001908  6E13               	movwf	merge@left,c
  2810                           
  2811                           ;interrupts.c: 198: unsigned char merged;
  2812                           ;interrupts.c: 199: merged = left + (right << 4);
  2813  00190A  3812               	swapf	merge@right,w,c
  2814  00190C  0BF0               	andlw	240
  2815  00190E  2413               	addwf	merge@left,w,c
  2816  001910  6E14               	movwf	merge@merged,c
  2817                           
  2818                           ;interrupts.c: 200: return merged;
  2819  001912  5014               	movf	merge@merged,w,c
  2820  001914  D000               	goto	i2l94
  2821  001916                     i2l94:
  2822  001916  0012               	return		;funcret
  2823  001918                     __end_of_merge:
  2824                           	opt stack 0
  2825                           pclatu	equ	0xFFB
  2826                           pclath	equ	0xFFA
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           intcon2	equ	0xFF1
  2835                           postinc0	equ	0xFEE
  2836                           fsr0h	equ	0xFEA
  2837                           fsr0l	equ	0xFE9
  2838                           wreg	equ	0xFE8
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           bsr	equ	0xFE0
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function _ABS *****************
  2849 ;; Defined at:
  2850 ;;		line 209 in file "interrupts.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  x               2   17[COMRAM] int 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  2   17[COMRAM] int 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;Total ram usage:        2 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_KController
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text17
  2878  0018DA                     __ptext17:
  2879                           	opt stack 0
  2880  0018DA                     _ABS:
  2881                           	opt stack 24
  2882                           
  2883                           ;interrupts.c: 211: if(x<0) x = -x;
  2884                           
  2885                           ;incstack = 0
  2886  0018DA  AE13               	btfss	ABS@x+1,7,c
  2887  0018DC  D005               	goto	i2l1279
  2888  0018DE  6C12               	negf	ABS@x,c
  2889  0018E0  1E13               	comf	ABS@x+1,f,c
  2890  0018E2  B0D8               	btfsc	status,0,c
  2891  0018E4  2A13               	incf	ABS@x+1,f,c
  2892  0018E6  D000               	goto	i2l1279
  2893  0018E8                     i2l1279:
  2894                           
  2895                           ;interrupts.c: 212: return x;
  2896  0018E8  C012  F012         	movff	ABS@x,?_ABS
  2897  0018EC  C013  F013         	movff	ABS@x+1,?_ABS+1
  2898  0018F0  D000               	goto	i2l101
  2899  0018F2                     i2l101:
  2900  0018F2  0012               	return		;funcret
  2901  0018F4                     __end_of_ABS:
  2902                           	opt stack 0
  2903                           pclatu	equ	0xFFB
  2904                           pclath	equ	0xFFA
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           intcon	equ	0xFF2
  2912                           intcon2	equ	0xFF1
  2913                           postinc0	equ	0xFEE
  2914                           fsr0h	equ	0xFEA
  2915                           fsr0l	equ	0xFE9
  2916                           wreg	equ	0xFE8
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           bsr	equ	0xFE0
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           pclatu	equ	0xFFB
  2926                           pclath	equ	0xFFA
  2927                           tblptru	equ	0xFF8
  2928                           tblptrh	equ	0xFF7
  2929                           tblptrl	equ	0xFF6
  2930                           tablat	equ	0xFF5
  2931                           prodh	equ	0xFF4
  2932                           prodl	equ	0xFF3
  2933                           intcon	equ	0xFF2
  2934                           intcon2	equ	0xFF1
  2935                           postinc0	equ	0xFEE
  2936                           fsr0h	equ	0xFEA
  2937                           fsr0l	equ	0xFE9
  2938                           wreg	equ	0xFE8
  2939                           fsr1h	equ	0xFE2
  2940                           fsr1l	equ	0xFE1
  2941                           bsr	equ	0xFE0
  2942                           postinc2	equ	0xFDE
  2943                           postdec2	equ	0xFDD
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948                           	psect	rparam
  2949  0000                     pclatu	equ	0xFFB
  2950                           pclath	equ	0xFFA
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           intcon	equ	0xFF2
  2958                           intcon2	equ	0xFF1
  2959                           postinc0	equ	0xFEE
  2960                           fsr0h	equ	0xFEA
  2961                           fsr0l	equ	0xFE9
  2962                           wreg	equ	0xFE8
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           bsr	equ	0xFE0
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      84
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             56 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             52 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             41 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             41 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             41 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    1850
                                             27 COMRAM    14    14      0
                        _KController
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               0     0      0     600
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          7     7      0    1009
                                             20 COMRAM     7     7      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     600
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      54       1       66.1%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B2       6        0.0%
DATA                 0      0      B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Apr 13 22:51:20 2015

                ___awdiv@sign 002F                            bsr 000FE0           ___wmul@multiplicand 002C  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l212 1296                           l205 1234                           l222 18A8  
                         l230 1888                           l223 18B0                           l226 18D0  
                         l227 18D8                           l423 1786                           l188 182C  
                         _ABS 18DA                  __CFG_CPB$OFF 000000                           _MAX 18B2  
                         _MIN 188A                  __CFG_CPD$OFF 000000                           wreg 000FE8  
                        ABS@x 0012                          ?_ABS 0012                          ?_MAX 0030  
                        ?_MIN 0030                          MAX@a 0030                          MAX@b 0032  
                        MIN@a 0030                          MIN@b 0032                  __CFG_WDT$OFF 000000  
                        l1511 177C                          l1503 1760                          l1521 102E  
                        l1371 17A0                          l1507 176C                          l1531 10B2  
                        l1285 1818                          l1533 11A6                          l1527 1052  
                        l1551 125A                          l1537 11BC                          l1491 1730  
                        l1571 13C8                          l1493 173A                          l1485 171A  
                        l1557 127E                          l1495 1742                          l1479 1708  
                        l1567 1320                          l1575 13DE                          l1569 1374  
                        l1585 18FE                          l1579 13F4                          u1030 102C  
                        u1040 1050                          u1115 12A2                          u1080 1258  
                        u1090 127C                          u1167 181E                          _LATC 000F8B  
                        i2l50 151E                          i2l91 164A                          i2l94 1916  
                        _main 18F4                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
 sensorComputation@sensorTemp 0035                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
             __end_of_InitApp 17CC                         ??_ABS 0014                         ??_MAX 0034  
                       ??_MIN 0034    __size_of_sensorComputation 022C                         ?_main 0001  
             __end_of___awdiv 1788                         _T0CON 000FD5               ___awdiv@divisor 002C  
                       i2l101 18F2                         i2l105 16F0                         i2l107 16EC  
             ___awdiv@counter 002E                         _TRISC 000F94           _ConfigureOscillator 1918  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1806  
                       _merge 1908               __end_of_low_isr 00A2                         tablat 000FF5  
                       status 000FD8          ?_ConfigureOscillator 0001               __initialization 183A  
                __end_of_main 1908                        ??_main 003F                 __activetblptr 000002  
                      ?_delay 002A                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        ?_merge 0012                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 002A                        i2l1211 156E  
                      i2l1221 1596                        i2l1231 15AE                        i2l1233 15B2  
                      i2l1209 156A                        i2l1227 15A6                        i2l1219 157C  
                      i2l1323 17E8                        i2l1253 15F0                        i2l1229 15AA  
                      i2l1237 15B8                        i2l1325 17FE                        i2l1421 1458  
                      i2l1247 15E8                        i2l1255 15F4                        i2l1239 15D6  
                      i2l1423 1468                        i2l1431 14A2                        i2l1273 1630  
                      i2l1257 1612                        i2l1441 14F0                        i2l1425 1478  
                      i2l1347 16D0                        i2l1339 169E                        i2l1427 1488  
                      i2l1437 14D2                        i2l1429 149C                        i2l1445 14FE  
                      i2l1279 18E8                        i2l1439 14E2                        i2l1447 1516  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 002F  
       ??_ConfigureOscillator 002A                   merge@merged 0014                __CFG_XINST$OFF 000000  
          sensorComputation@i 0086            sensorComputation@j 0088              __end_of_high_isr 1558  
                      ___wmul 1862                     ??___awdiv 002E                __CFG_STVREN$ON 000000  
                      delay@x 002D                        clear_0 1840              ___awdiv@quotient 0030  
                      _rotate 17CC                  __pdataCOMRAM 0054                  __mediumconst 0000  
                   ??_low_isr 0001                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 1858  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 183A               moveMouse@action 0012  
               __end_of_merge 1918          KController@correctTo 001B    __end_of_motorCounterUpdate 164C  
                     ??_delay 002C                       ??_merge 0013                    _delay_time 004F  
           _MotorDelayCounter 0049                       ?___wmul 002A            __size_of_moveMouse 0008  
                     ?_rotate 0001                       _INTCON2 000FF1                       _OSCTUNE 000F9B  
                     i2u90_40 14B2                       i2u91_40 14C2                       i2u84_40 1444  
                     i2u85_40 1452                     ?_high_isr 0001                 _LMotorCounter 0051  
                     _InitApp 1788                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 16F2               __size_of___wmul 0028                  __psmallconst 1000  
                     __pcinit 183A                       __ramtop 1000                       __ptext0 18F4  
                     __ptext1 1236                       __ptext2 100A                       __ptext3 1862  
                     __ptext4 16F2                       __ptext5 188A                       __ptext6 18B2  
                     __ptext7 1788                       __ptext8 1806                       __ptext9 1918  
             __size_of_rotate 003A                  __size_of_ABS 001A                  __size_of_MAX 0028  
                __size_of_MIN 0028                       delay@ms 002A                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001C                __pintcode_body 1402  
        end_of_initialization 1858              _sensorCorrection 1001             __end_of_moveMouse 192A  
               __Lmediumconst 0000                       int_func 1402               _controllerSteps 0054  
        __size_of_KController 00A6                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _PORTBbits 000F81                     _TRISBbits 000F93  
                   _TRISEbits 000F96                ??_sensorUpdate 0039   __end_of_ConfigureOscillator 1922  
              __end_of___wmul 188A                 __pidataCOMRAM 192A                __end_of_rotate 1806  
         start_initialization 183A                   __end_of_ABS 18F4                   __end_of_MAX 18DA  
                 __end_of_MIN 18B2            _motorCounterUpdate 1558              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                      ??___wmul 002E  
            __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014                _sensorLocation 1005  
        ??_motorCounterUpdate 0013                   __pbssCOMRAM 003F                 __pcstackBANK0 0080  
      sensorUpdate@sensorTemp 008A             __size_of_high_isr 1550                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                     _algorithm 0053                     __pintcode 0008  
      motorCounterUpdate@side 0013                      ?___awdiv 002A          __end_of_sensorUpdate 1402  
      __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005                   __pintcodelo 0018  
                 __smallconst 1000                      ?_low_isr 0001                __size_of_delay 0034  
              __size_of_merge 0010                ___wmul@product 002E                     _moveMouse 1922  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 002A  
               _RMotorCounter 0052                 ??_KController 0015                    ?_moveMouse 0001  
            __size_of_InitApp 0044                      __Hrparam 0000                     merge@left 0013  
        sensorComputation@max 0080                      __Lrparam 0000          sensorComputation@min 0082  
        sensorComputation@sum 0084            __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096  
            __size_of_low_isr 008A                      __ptext12 17CC                      __ptext13 164C  
                    __ptext14 1922                      __ptext15 1558                      __ptext16 1908  
                    __ptext17 18DA                      _high_isr 0008            _LMotorDelayCounter 0047  
          _RMotorDelayCounter 004B                 __size_of_main 0014                 _RotateCounter 004D  
       __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A           __end_of_KController 16F2  
           _sensorComputation 100A                    _INTCONbits 000FF2              KController@steps 0019  
          ?_sensorComputation 0035                 sensorUpdate@i 00DA                 sensorUpdate@j 00DC  
                _sensorUpdate 1236                      intlevel1 0000                      intlevel2 0000  
         ??_sensorComputation 0037                   ??_moveMouse 0012               KController@diff 0017  
   __end_of_sensorComputation 1236                   _sensorValue 003F   __size_of_motorCounterUpdate 00F4  
   motorCounterUpdate@reverse 0012                   _KController 164C  
