

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 01 15:58:15 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001DF0                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _controllerSteps
    43  001DF0  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorCorrection:
    50                           	opt stack 0
    51  001001  00                 	db	0
    52  001002  00                 	db	0
    53  001003  03                 	db	3
    54  001004  03                 	db	3
    55  001005                     __end_of_sensorCorrection:
    56                           	opt stack 0
    57  001005                     _sensorLocation:
    58                           	opt stack 0
    59  001005  1B                 	db	27
    60  001006  2B                 	db	43
    61  001007  1F                 	db	31
    62  001008  33                 	db	51
    63  001009                     __end_of_sensorLocation:
    64                           	opt stack 0
    65  0000                     _LATC	set	3979
    66  0000                     _OSCTUNE	set	3995
    67  0000                     _TRISBbits	set	3987
    68  0000                     _TRISC	set	3988
    69  0000                     _TRISEbits	set	3990
    70  0000                     _ADCON0	set	4034
    71  0000                     _ADCON0bits	set	4034
    72  0000                     _ADCON1	set	4033
    73  0000                     _ADCON2	set	4032
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADRESL	set	4035
    76  0000                     _OSCCON	set	4051
    77  0000                     _T0CON	set	4053
    78  0000                     _INTCON	set	4082
    79  0000                     _INTCON2	set	4081
    80  0000                     _INTCONbits	set	4082
    81                           
    82                           ; #config settings
    83  001009  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           	psect	cinit
    86  001D22                     __pcinit:
    87                           	opt stack 0
    88  001D22                     start_initialization:
    89                           	opt stack 0
    90  001D22                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (47 bytes)
    94  001D22  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  001D26  0E2F               	movlw	47
    96  001D28                     clear_0:
    97  001D28  6AEE               	clrf	postinc0,c
    98  001D2A  06E8               	decf	wreg,f,c
    99  001D2C  E1FD               	bnz	clear_0
   100                           
   101                           ; Initialize objects allocated to COMRAM (1 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  001D2E  0EF0               	movlw	low __pidataCOMRAM
   104  001D30  6EF6               	movwf	tblptrl,c
   105  001D32  0E1D               	movlw	high __pidataCOMRAM
   106  001D34  6EF7               	movwf	tblptrh,c
   107  001D36  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  001D38  6EF8               	movwf	tblptru,c
   109  001D3A  0009               	tblrd		*+	;fetch initializer
   110  001D3C  CFF5 F059          	movff	tablat,__pdataCOMRAM
   111  001D40                     end_of_initialization:
   112                           	opt stack 0
   113  001D40                     __end_of__initialization:
   114                           	opt stack 0
   115  001D40  0E00               	movlw	low (__Lmediumconst shr (0+16))
   116  001D42  6EF8               	movwf	tblptru,c
   117  001D44  0100               	movlb	0
   118  001D46  EFDD  F00E         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssCOMRAM
   127  000001                     __pbssCOMRAM:
   128                           	opt stack 0
   129  000001                     _sensorValue:
   130                           	opt stack 0
   131  000001                     	ds	8
   132  000009                     _ControllerCounter:
   133                           	opt stack 0
   134  000009                     	ds	2
   135  00000B                     _Deadend:
   136                           	opt stack 0
   137  00000B                     	ds	2
   138  00000D                     _ForwardCounter:
   139                           	opt stack 0
   140  00000D                     	ds	2
   141  00000F                     _LTurnCounter:
   142                           	opt stack 0
   143  00000F                     	ds	2
   144  000011                     _MotorDelayCounter:
   145                           	opt stack 0
   146  000011                     	ds	2
   147  000013                     _RTurnCounter:
   148                           	opt stack 0
   149  000013                     	ds	2
   150  000015                     _ReverseCounter:
   151                           	opt stack 0
   152  000015                     	ds	2
   153  000017                     _RotateCounter:
   154                           	opt stack 0
   155  000017                     	ds	2
   156  000019                     _TurnLeft:
   157                           	opt stack 0
   158  000019                     	ds	2
   159  00001B                     _TurnRight:
   160                           	opt stack 0
   161  00001B                     	ds	2
   162  00001D                     _TurnedLeft:
   163                           	opt stack 0
   164  00001D                     	ds	2
   165  00001F                     _TurnedRight:
   166                           	opt stack 0
   167  00001F                     	ds	2
   168  000021                     _delay_time:
   169                           	opt stack 0
   170  000021                     	ds	2
   171  000023                     _errorD:
   172                           	opt stack 0
   173  000023                     	ds	2
   174  000025                     _errorP:
   175                           	opt stack 0
   176  000025                     	ds	2
   177  000027                     _oldErrorP:
   178                           	opt stack 0
   179  000027                     	ds	2
   180  000029                     _totalError:
   181                           	opt stack 0
   182  000029                     	ds	2
   183  00002B                     _LMotorCounter:
   184                           	opt stack 0
   185  00002B                     	ds	1
   186  00002C                     _RMotorCounter:
   187                           	opt stack 0
   188  00002C                     	ds	1
   189  00002D                     _algorithm:
   190                           	opt stack 0
   191  00002D                     	ds	1
   192  00002E                     _justTurned:
   193                           	opt stack 0
   194  00002E                     	ds	1
   195  00002F                     _rotatingSide:
   196                           	opt stack 0
   197  00002F                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	dataCOMRAM
   206  000059                     __pdataCOMRAM:
   207                           	opt stack 0
   208  000059                     _controllerSteps:
   209                           	opt stack 0
   210  000059                     	ds	1
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           tblptrl	equ	0xFF6
   214                           tablat	equ	0xFF5
   215                           postinc0	equ	0xFEE
   216                           wreg	equ	0xFE8
   217                           
   218                           	psect	cstackBANK0
   219  000080                     __pcstackBANK0:
   220                           	opt stack 0
   221  000080                     ?___wmul:
   222                           	opt stack 0
   223  000080                     ?___awdiv:
   224                           	opt stack 0
   225  000080                     delay@ms:
   226                           	opt stack 0
   227  000080                     ___wmul@multiplier:
   228                           	opt stack 0
   229  000080                     ___awdiv@dividend:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x0
   233  000080                     	ds	2
   234  000082                     ??_delay:
   235  000082                     ___wmul@multiplicand:
   236                           	opt stack 0
   237  000082                     ___awdiv@divisor:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x2
   241  000082                     	ds	1
   242  000083                     delay@x:
   243                           	opt stack 0
   244                           
   245                           ; 2 bytes @ 0x3
   246  000083                     	ds	1
   247  000084                     ___awdiv@counter:
   248                           	opt stack 0
   249  000084                     ___wmul@product:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x4
   253  000084                     	ds	1
   254  000085                     ___awdiv@sign:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x5
   258  000085                     	ds	1
   259  000086                     ?_MIN:
   260                           	opt stack 0
   261  000086                     ?_MAX:
   262                           	opt stack 0
   263  000086                     MIN@a:
   264                           	opt stack 0
   265  000086                     MAX@a:
   266                           	opt stack 0
   267  000086                     ___awdiv@quotient:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x6
   271  000086                     	ds	2
   272  000088                     MIN@b:
   273                           	opt stack 0
   274  000088                     MAX@b:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x8
   278  000088                     	ds	2
   279  00008A                     ??_MIN:
   280  00008A                     ??_MAX:
   281                           
   282                           ; 0 bytes @ 0xA
   283  00008A                     	ds	1
   284  00008B                     sensorComputation@sensorTemp:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0xB
   288  00008B                     	ds	2
   289  00008D                     ??_sensorComputation:
   290                           
   291                           ; 0 bytes @ 0xD
   292  00008D                     	ds	2
   293  00008F                     sensorComputation@max:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0xF
   297  00008F                     	ds	2
   298  000091                     sensorComputation@min:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x11
   302  000091                     	ds	2
   303  000093                     sensorComputation@sum:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x13
   307  000093                     	ds	2
   308  000095                     sensorComputation@i:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x15
   312  000095                     	ds	2
   313  000097                     sensorComputation@j:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x17
   317  000097                     	ds	2
   318  000099                     ??_sensorUpdate:
   319                           
   320                           ; 0 bytes @ 0x19
   321  000099                     	ds	6
   322  00009F                     sensorUpdate@sensorTemp:
   323                           	opt stack 0
   324                           
   325                           ; 80 bytes @ 0x1F
   326  00009F                     	ds	80
   327  0000EF                     sensorUpdate@i:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x6F
   331  0000EF                     	ds	2
   332  0000F1                     sensorUpdate@j:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x71
   336  0000F1                     	ds	2
   337  0000F3                     tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           
   344                           ; 0 bytes @ 0x73
   345                           
   346                           	psect	cstackCOMRAM
   347  000030                     __pcstackCOMRAM:
   348                           	opt stack 0
   349  000030                     ??_low_isr:
   350  000030                     
   351                           ; 0 bytes @ 0x0
   352  000030                     	ds	17
   353  000041                     ?_ABS:
   354                           	opt stack 0
   355  000041                     motorCounterUpdate@reverse:
   356                           	opt stack 0
   357  000041                     merge@right:
   358                           	opt stack 0
   359  000041                     moveMouse@action:
   360                           	opt stack 0
   361  000041                     ABS@x:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x11
   365  000041                     	ds	1
   366  000042                     motorCounterUpdate@side:
   367                           	opt stack 0
   368  000042                     merge@left:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x12
   372  000042                     	ds	1
   373  000043                     merge@merged:
   374                           	opt stack 0
   375  000043                     rotate@side:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x13
   379  000043                     	ds	1
   380  000044                     ??_FrontController:
   381  000044                     ??_KController:
   382                           
   383                           ; 0 bytes @ 0x14
   384  000044                     	ds	2
   385  000046                     KController@correctTo:
   386                           	opt stack 0
   387  000046                     FrontController@correctTo:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x16
   391  000046                     	ds	1
   392  000047                     KController@diff:
   393                           	opt stack 0
   394  000047                     FrontController@diff2:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x17
   398  000047                     	ds	2
   399  000049                     ??_high_isr:
   400                           
   401                           ; 0 bytes @ 0x19
   402  000049                     	ds	16
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   412 ;;
   413 ;; *************** function _main *****************
   414 ;; Defined at:
   415 ;;		line 41 in file "main.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;		None               void
   422 ;; Registers used:
   423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;Total ram usage:        0 bytes
   434 ;; Hardware stack levels required when called:    7
   435 ;; This function calls:
   436 ;;		_ConfigureOscillator
   437 ;;		_InitApp
   438 ;;		_sensorUpdate
   439 ;; This function is called by:
   440 ;;		Startup code after reset
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text0
   445  001DBA                     __ptext0:
   446                           	opt stack 0
   447  001DBA                     _main:
   448                           	opt stack 24
   449                           
   450                           ;main.c: 44: ConfigureOscillator();
   451                           
   452                           ;incstack = 0
   453  001DBA  ECEF  F00E         	call	_ConfigureOscillator	;wreg free
   454                           
   455                           ;main.c: 47: InitApp();
   456  001DBE  EC04  F00E         	call	_InitApp	;wreg free
   457  001DC2  D000               	goto	l2047
   458  001DC4                     l2047:
   459                           
   460                           ;main.c: 50: {
   461                           ;main.c: 51: sensorUpdate();
   462  001DC4  ECE0  F00A         	call	_sensorUpdate	;wreg free
   463  001DC8  D7FD               	goto	l2047
   464  001DCA  EF51  F000         	goto	start
   465  001DCE                     __end_of_main:
   466                           	opt stack 0
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           
   474 ;; *************** function _sensorUpdate *****************
   475 ;; Defined at:
   476 ;;		line 146 in file "user.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;  sensorTemp     80   31[BANK0 ] int [10][4]
   481 ;;  j               2  113[BANK0 ] int 
   482 ;;  i               2  111[BANK0 ] int 
   483 ;; Return value:  Size  Location     Type
   484 ;;		None               void
   485 ;; Registers used:
   486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   493 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   496 ;;Total ram usage:       90 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    6
   499 ;; This function calls:
   500 ;;		___wmul
   501 ;;		_sensorComputation
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text1
   508  0015C0                     __ptext1:
   509                           	opt stack 0
   510  0015C0                     _sensorUpdate:
   511                           	opt stack 24
   512                           
   513                           ;user.c: 148: int i,j;
   514                           ;user.c: 149: int sensorTemp[4][10];
   515                           ;user.c: 152: for(i = 0; i < 10; i++)
   516                           
   517                           ;incstack = 0
   518  0015C0  0E00               	movlw	0
   519  0015C2  0100               	movlb	0	; () banked
   520  0015C4  6FF0               	movwf	(sensorUpdate@i+1)& (0+255),b
   521  0015C6  0E00               	movlw	0
   522  0015C8  6FEF               	movwf	sensorUpdate@i& (0+255),b
   523                           
   524                           ; BSR set to: 0
   525  0015CA  0100               	movlb	0	; () banked
   526  0015CC  BFF0               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   527  0015CE  D00A               	goto	l2013
   528  0015D0  0100               	movlb	0	; () banked
   529  0015D2  51F0               	movf	(sensorUpdate@i+1)& (0+255),w,b
   530  0015D4  E106               	bnz	u1770
   531  0015D6  0E0A               	movlw	10
   532  0015D8  0100               	movlb	0	; () banked
   533  0015DA  5DEF               	subwf	sensorUpdate@i& (0+255),w,b
   534  0015DC  B0D8               	btfsc	status,0,c
   535  0015DE  D0F2               	goto	l2041
   536  0015E0  D001               	goto	l2013
   537  0015E2                     u1770:
   538                           
   539                           ; BSR set to: 0
   540  0015E2  D0F0               	goto	l2041
   541  0015E4                     l2013:
   542                           
   543                           ; BSR set to: 0
   544                           ;user.c: 153: {
   545                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   546  0015E4  0E00               	movlw	0
   547  0015E6  0100               	movlb	0	; () banked
   548  0015E8  6FF2               	movwf	(sensorUpdate@j+1)& (0+255),b
   549  0015EA  0E00               	movlw	0
   550  0015EC  6FF1               	movwf	sensorUpdate@j& (0+255),b
   551                           
   552                           ; BSR set to: 0
   553  0015EE  0100               	movlb	0	; () banked
   554  0015F0  BFF2               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   555  0015F2  D00A               	goto	l2019
   556  0015F4  0100               	movlb	0	; () banked
   557  0015F6  51F2               	movf	(sensorUpdate@j+1)& (0+255),w,b
   558  0015F8  E106               	bnz	u1780
   559  0015FA  0E04               	movlw	4
   560  0015FC  0100               	movlb	0	; () banked
   561  0015FE  5DF1               	subwf	sensorUpdate@j& (0+255),w,b
   562  001600  B0D8               	btfsc	status,0,c
   563  001602  D0D5               	goto	l2037
   564  001604  D001               	goto	l2019
   565  001606                     u1780:
   566                           
   567                           ; BSR set to: 0
   568  001606  D0D3               	goto	l2037
   569  001608                     l2019:
   570                           
   571                           ; BSR set to: 0
   572                           ;user.c: 155: {
   573                           ;user.c: 156: ADCON0 = sensorLocation[j];
   574  001608  0E05               	movlw	low _sensorLocation
   575  00160A  0100               	movlb	0	; () banked
   576  00160C  25F1               	addwf	sensorUpdate@j& (0+255),w,b
   577  00160E  6EF6               	movwf	tblptrl,c
   578  001610  0E10               	movlw	high _sensorLocation
   579  001612  21F2               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   580  001614  6EF7               	movwf	tblptrh,c
   581  001616                     	if	0	;There are less than 3 active tblptr bytes
   582  001616                     	endif
   583  001616  0008               	tblrd		*
   584  001618  CFF5 FFC2          	movff	tablat,4034	;volatile
   585                           
   586                           ; BSR set to: 0
   587                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   588  00161C  82C2               	bsf	4034,1,c	;volatile
   589                           
   590                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   591  00161E  D000               	goto	l318
   592  001620                     l318:
   593  001620  B2C2               	btfsc	4034,1,c	;volatile
   594  001622  D7FE               	goto	l318
   595                           
   596                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   597  001624  CFC3 F099          	movff	4035,??_sensorUpdate	;volatile
   598  001628  0E06               	movlw	6
   599  00162A  0100               	movlb	0	; () banked
   600  00162C  6F9A               	movwf	(??_sensorUpdate+1)& (0+255),b
   601  00162E                     u1805:
   602  00162E  0100               	movlb	0	; () banked
   603  001630  90D8               	bcf	status,0,c
   604  001632  3399               	rrcf	??_sensorUpdate& (0+255),f,b
   605  001634  0100               	movlb	0	; () banked
   606  001636  2F9A               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   607  001638  D7FA               	goto	u1805
   608  00163A  0100               	movlb	0	; () banked
   609  00163C  5199               	movf	??_sensorUpdate& (0+255),w,b
   610  00163E  CFC4 F09B          	movff	4036,??_sensorUpdate+2	;volatile
   611  001642  0100               	movlb	0	; () banked
   612  001644  6B9C               	clrf	(??_sensorUpdate+3)& (0+255),b
   613  001646  0100               	movlb	0	; () banked
   614  001648  90D8               	bcf	status,0,c
   615  00164A  379B               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   616  00164C  379C               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   617  00164E  0100               	movlb	0	; () banked
   618  001650  90D8               	bcf	status,0,c
   619  001652  379B               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   620  001654  379C               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   621  001656  0100               	movlb	0	; () banked
   622  001658  279B               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   623  00165A  0E00               	movlw	0
   624  00165C  239C               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   625  00165E  C0F1  F080         	movff	sensorUpdate@j,___wmul@multiplier
   626  001662  C0F2  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   627  001666  0E00               	movlw	0
   628  001668  0100               	movlb	0	; () banked
   629  00166A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   630  00166C  0E14               	movlw	20
   631  00166E  6F82               	movwf	___wmul@multiplicand& (0+255),b
   632  001670  EC41  F00E         	call	___wmul	;wreg free
   633  001674  0E9F               	movlw	low sensorUpdate@sensorTemp
   634  001676  0100               	movlb	0	; () banked
   635  001678  6F9D               	movwf	(??_sensorUpdate+4)& (0+255),b
   636  00167A  0E00               	movlw	high sensorUpdate@sensorTemp
   637  00167C  0100               	movlb	0	; () banked
   638  00167E  6F9E               	movwf	(??_sensorUpdate+5)& (0+255),b
   639  001680  0100               	movlb	0	; () banked
   640  001682  5180               	movf	?___wmul& (0+255),w,b
   641  001684  0100               	movlb	0	; () banked
   642  001686  279D               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   643  001688  0100               	movlb	0	; () banked
   644  00168A  5181               	movf	(?___wmul+1)& (0+255),w,b
   645  00168C  0100               	movlb	0	; () banked
   646  00168E  239E               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   647  001690  90D8               	bcf	status,0,c
   648  001692  0100               	movlb	0	; () banked
   649  001694  35EF               	rlcf	sensorUpdate@i& (0+255),w,b
   650  001696  6ED9               	movwf	fsr2l,c
   651  001698  0100               	movlb	0	; () banked
   652  00169A  35F0               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   653  00169C  6EDA               	movwf	fsr2h,c
   654  00169E  0100               	movlb	0	; () banked
   655  0016A0  519D               	movf	(??_sensorUpdate+4)& (0+255),w,b
   656  0016A2  26D9               	addwf	fsr2l,f,c
   657  0016A4  0100               	movlb	0	; () banked
   658  0016A6  519E               	movf	(??_sensorUpdate+5)& (0+255),w,b
   659  0016A8  22DA               	addwfc	fsr2h,f,c
   660  0016AA  C09B  FFDE         	movff	??_sensorUpdate+2,postinc2
   661  0016AE  C09C  FFDD         	movff	??_sensorUpdate+3,postdec2
   662                           
   663                           ; BSR set to: 0
   664                           ;user.c: 163: if(j == 1 || j == 4)
   665  0016B2  0100               	movlb	0	; () banked
   666  0016B4  05F1               	decf	sensorUpdate@j& (0+255),w,b
   667  0016B6  0100               	movlb	0	; () banked
   668  0016B8  11F2               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   669  0016BA  B4D8               	btfsc	status,2,c
   670  0016BC  D007               	goto	l2029
   671                           
   672                           ; BSR set to: 0
   673  0016BE  0E04               	movlw	4
   674  0016C0  0100               	movlb	0	; () banked
   675  0016C2  19F1               	xorwf	sensorUpdate@j& (0+255),w,b
   676  0016C4  0100               	movlb	0	; () banked
   677  0016C6  11F2               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   678  0016C8  A4D8               	btfss	status,2,c
   679  0016CA  D033               	goto	l2031
   680  0016CC                     l2029:
   681                           
   682                           ; BSR set to: 0
   683                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   684  0016CC  C0F1  F080         	movff	sensorUpdate@j,___wmul@multiplier
   685  0016D0  C0F2  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   686  0016D4  0E00               	movlw	0
   687  0016D6  0100               	movlb	0	; () banked
   688  0016D8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   689  0016DA  0E14               	movlw	20
   690  0016DC  6F82               	movwf	___wmul@multiplicand& (0+255),b
   691  0016DE  EC41  F00E         	call	___wmul	;wreg free
   692  0016E2  0E9F               	movlw	low sensorUpdate@sensorTemp
   693  0016E4  0100               	movlb	0	; () banked
   694  0016E6  6F99               	movwf	??_sensorUpdate& (0+255),b
   695  0016E8  0E00               	movlw	high sensorUpdate@sensorTemp
   696  0016EA  0100               	movlb	0	; () banked
   697  0016EC  6F9A               	movwf	(??_sensorUpdate+1)& (0+255),b
   698  0016EE  0100               	movlb	0	; () banked
   699  0016F0  5180               	movf	?___wmul& (0+255),w,b
   700  0016F2  0100               	movlb	0	; () banked
   701  0016F4  2799               	addwf	??_sensorUpdate& (0+255),f,b
   702  0016F6  0100               	movlb	0	; () banked
   703  0016F8  5181               	movf	(?___wmul+1)& (0+255),w,b
   704  0016FA  0100               	movlb	0	; () banked
   705  0016FC  239A               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   706  0016FE  90D8               	bcf	status,0,c
   707  001700  0100               	movlb	0	; () banked
   708  001702  35EF               	rlcf	sensorUpdate@i& (0+255),w,b
   709  001704  6ED9               	movwf	fsr2l,c
   710  001706  0100               	movlb	0	; () banked
   711  001708  35F0               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   712  00170A  6EDA               	movwf	fsr2h,c
   713  00170C  0100               	movlb	0	; () banked
   714  00170E  5199               	movf	??_sensorUpdate& (0+255),w,b
   715  001710  26D9               	addwf	fsr2l,f,c
   716  001712  0100               	movlb	0	; () banked
   717  001714  519A               	movf	(??_sensorUpdate+1)& (0+255),w,b
   718  001716  22DA               	addwfc	fsr2h,f,c
   719  001718  0E01               	movlw	low _sensorCorrection
   720  00171A  0100               	movlb	0	; () banked
   721  00171C  25F1               	addwf	sensorUpdate@j& (0+255),w,b
   722  00171E  6EF6               	movwf	tblptrl,c
   723  001720  0E10               	movlw	high _sensorCorrection
   724  001722  21F2               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   725  001724  6EF7               	movwf	tblptrh,c
   726  001726                     	if	0	;There are less than 3 active tblptr bytes
   727  001726                     	endif
   728  001726  0008               	tblrd		*
   729  001728  50F5               	movf	tablat,w,c
   730  00172A  5EDE               	subwf	postinc2,f,c
   731  00172C  0E00               	movlw	0
   732  00172E  5ADD               	subwfb	postdec2,f,c
   733  001730  D033               	goto	l2033
   734  001732                     l2031:
   735                           
   736                           ; BSR set to: 0
   737                           ;user.c: 165: else
   738                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   739  001732  C0F1  F080         	movff	sensorUpdate@j,___wmul@multiplier
   740  001736  C0F2  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   741  00173A  0E00               	movlw	0
   742  00173C  0100               	movlb	0	; () banked
   743  00173E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   744  001740  0E14               	movlw	20
   745  001742  6F82               	movwf	___wmul@multiplicand& (0+255),b
   746  001744  EC41  F00E         	call	___wmul	;wreg free
   747  001748  0E9F               	movlw	low sensorUpdate@sensorTemp
   748  00174A  0100               	movlb	0	; () banked
   749  00174C  6F99               	movwf	??_sensorUpdate& (0+255),b
   750  00174E  0E00               	movlw	high sensorUpdate@sensorTemp
   751  001750  0100               	movlb	0	; () banked
   752  001752  6F9A               	movwf	(??_sensorUpdate+1)& (0+255),b
   753  001754  0100               	movlb	0	; () banked
   754  001756  5180               	movf	?___wmul& (0+255),w,b
   755  001758  0100               	movlb	0	; () banked
   756  00175A  2799               	addwf	??_sensorUpdate& (0+255),f,b
   757  00175C  0100               	movlb	0	; () banked
   758  00175E  5181               	movf	(?___wmul+1)& (0+255),w,b
   759  001760  0100               	movlb	0	; () banked
   760  001762  239A               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   761  001764  90D8               	bcf	status,0,c
   762  001766  0100               	movlb	0	; () banked
   763  001768  35EF               	rlcf	sensorUpdate@i& (0+255),w,b
   764  00176A  6ED9               	movwf	fsr2l,c
   765  00176C  0100               	movlb	0	; () banked
   766  00176E  35F0               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   767  001770  6EDA               	movwf	fsr2h,c
   768  001772  0100               	movlb	0	; () banked
   769  001774  5199               	movf	??_sensorUpdate& (0+255),w,b
   770  001776  26D9               	addwf	fsr2l,f,c
   771  001778  0100               	movlb	0	; () banked
   772  00177A  519A               	movf	(??_sensorUpdate+1)& (0+255),w,b
   773  00177C  22DA               	addwfc	fsr2h,f,c
   774  00177E  0E01               	movlw	low _sensorCorrection
   775  001780  0100               	movlb	0	; () banked
   776  001782  25F1               	addwf	sensorUpdate@j& (0+255),w,b
   777  001784  6EF6               	movwf	tblptrl,c
   778  001786  0E10               	movlw	high _sensorCorrection
   779  001788  21F2               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   780  00178A  6EF7               	movwf	tblptrh,c
   781  00178C                     	if	0	;There are less than 3 active tblptr bytes
   782  00178C                     	endif
   783  00178C  0008               	tblrd		*
   784  00178E  50F5               	movf	tablat,w,c
   785  001790  26DE               	addwf	postinc2,f,c
   786  001792  0E00               	movlw	0
   787  001794  22DD               	addwfc	postdec2,f,c
   788  001796  D000               	goto	l2033
   789  001798                     l2033:
   790                           
   791                           ; BSR set to: 0
   792  001798  0100               	movlb	0	; () banked
   793  00179A  4BF1               	infsnz	sensorUpdate@j& (0+255),f,b
   794  00179C  2BF2               	incf	(sensorUpdate@j+1)& (0+255),f,b
   795                           
   796                           ; BSR set to: 0
   797  00179E  0100               	movlb	0	; () banked
   798  0017A0  BFF2               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   799  0017A2  D732               	goto	l2019
   800  0017A4  0100               	movlb	0	; () banked
   801  0017A6  51F2               	movf	(sensorUpdate@j+1)& (0+255),w,b
   802  0017A8  E102               	bnz	l2037
   803  0017AA  D727               	goto	L1
   804  0017AC  D000               	goto	l2037
   805  0017AE                     l2037:
   806                           
   807                           ; BSR set to: 0
   808  0017AE  0100               	movlb	0	; () banked
   809  0017B0  4BEF               	infsnz	sensorUpdate@i& (0+255),f,b
   810  0017B2  2BF0               	incf	(sensorUpdate@i+1)& (0+255),f,b
   811                           
   812                           ; BSR set to: 0
   813  0017B4  0100               	movlb	0	; () banked
   814  0017B6  BFF0               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   815  0017B8  D715               	goto	l2013
   816  0017BA  0100               	movlb	0	; () banked
   817  0017BC  51F0               	movf	(sensorUpdate@i+1)& (0+255),w,b
   818  0017BE  E102               	bnz	l2041
   819  0017C0  D70A               	goto	L2
   820  0017C2  D000               	goto	l2041
   821  0017C4                     l2041:
   822                           
   823                           ; BSR set to: 0
   824                           ;user.c: 167: }
   825                           ;user.c: 168: }
   826                           ;user.c: 171: sensorComputation(sensorTemp);
   827  0017C4  0E9F               	movlw	low sensorUpdate@sensorTemp
   828  0017C6  0100               	movlb	0	; () banked
   829  0017C8  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   830  0017CA  0E00               	movlw	high sensorUpdate@sensorTemp
   831  0017CC  0100               	movlb	0	; () banked
   832  0017CE  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   833  0017D0  ECA6  F009         	call	_sensorComputation	;wreg free
   834  0017D4  0012               	return		;funcret
   835  0017D6                     __end_of_sensorUpdate:
   836                           	opt stack 0
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           postinc2	equ	0xFDE
   844                           postdec2	equ	0xFDD
   845                           fsr2h	equ	0xFDA
   846                           fsr2l	equ	0xFD9
   847                           status	equ	0xFD8
   848                           
   849 ;; *************** function _sensorComputation *****************
   850 ;; Defined at:
   851 ;;		line 125 in file "user.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   854 ;;		 -> sensorUpdate@sensorTemp(80), 
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  j               2   23[BANK0 ] int 
   857 ;;  i               2   21[BANK0 ] int 
   858 ;;  sum             2   19[BANK0 ] int 
   859 ;;  min             2   17[BANK0 ] int 
   860 ;;  max             2   15[BANK0 ] int 
   861 ;; Return value:  Size  Location     Type
   862 ;;		None               void
   863 ;; Registers used:
   864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;Total ram usage:       14 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    5
   877 ;; This function calls:
   878 ;;		_MAX
   879 ;;		_MIN
   880 ;;		___awdiv
   881 ;;		___wmul
   882 ;; This function is called by:
   883 ;;		_sensorUpdate
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text2
   888  00134C                     __ptext2:
   889                           	opt stack 0
   890  00134C                     _sensorComputation:
   891                           	opt stack 24
   892                           
   893                           ;user.c: 127: int max,min,i,j,sum;
   894                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   895                           
   896                           ;incstack = 0
   897  00134C  0E00               	movlw	0
   898  00134E  0100               	movlb	0	; () banked
   899  001350  6F96               	movwf	(sensorComputation@i+1)& (0+255),b
   900  001352  0E00               	movlw	0
   901  001354  6F95               	movwf	sensorComputation@i& (0+255),b
   902                           
   903                           ; BSR set to: 0
   904  001356  0100               	movlb	0	; () banked
   905  001358  BF96               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   906  00135A  D00A               	goto	l1961
   907  00135C  0100               	movlb	0	; () banked
   908  00135E  5196               	movf	(sensorComputation@i+1)& (0+255),w,b
   909  001360  E106               	bnz	u1720
   910  001362  0E04               	movlw	4
   911  001364  0100               	movlb	0	; () banked
   912  001366  5D95               	subwf	sensorComputation@i& (0+255),w,b
   913  001368  B0D8               	btfsc	status,0,c
   914  00136A  D129               	goto	l311
   915  00136C  D001               	goto	l1961
   916  00136E                     u1720:
   917                           
   918                           ; BSR set to: 0
   919  00136E  D127               	goto	l311
   920  001370                     l1961:
   921                           
   922                           ; BSR set to: 0
   923                           ;user.c: 129: {
   924                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   925  001370  0E00               	movlw	0
   926  001372  0100               	movlb	0	; () banked
   927  001374  6F98               	movwf	(sensorComputation@j+1)& (0+255),b
   928  001376  0E00               	movlw	0
   929  001378  6F97               	movwf	sensorComputation@j& (0+255),b
   930                           
   931                           ; BSR set to: 0
   932  00137A  0100               	movlb	0	; () banked
   933  00137C  BF98               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   934  00137E  D00A               	goto	l1967
   935  001380  0100               	movlb	0	; () banked
   936  001382  5198               	movf	(sensorComputation@j+1)& (0+255),w,b
   937  001384  E106               	bnz	u1730
   938  001386  0E0A               	movlw	10
   939  001388  0100               	movlb	0	; () banked
   940  00138A  5D97               	subwf	sensorComputation@j& (0+255),w,b
   941  00138C  B0D8               	btfsc	status,0,c
   942  00138E  D0D3               	goto	l1977
   943  001390  D001               	goto	l1967
   944  001392                     u1730:
   945                           
   946                           ; BSR set to: 0
   947  001392  D0D1               	goto	l1977
   948  001394                     l1967:
   949                           
   950                           ; BSR set to: 0
   951                           ;user.c: 131: {
   952                           ;user.c: 132: if(j == 0)
   953  001394  0100               	movlb	0	; () banked
   954  001396  5197               	movf	sensorComputation@j& (0+255),w,b
   955  001398  0100               	movlb	0	; () banked
   956  00139A  1198               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   957  00139C  A4D8               	btfss	status,2,c
   958  00139E  D031               	goto	l1971
   959                           
   960                           ; BSR set to: 0
   961                           ;user.c: 133: {
   962                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   963  0013A0  C095  F080         	movff	sensorComputation@i,___wmul@multiplier
   964  0013A4  C096  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
   965  0013A8  0E00               	movlw	0
   966  0013AA  0100               	movlb	0	; () banked
   967  0013AC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   968  0013AE  0E14               	movlw	20
   969  0013B0  6F82               	movwf	___wmul@multiplicand& (0+255),b
   970  0013B2  EC41  F00E         	call	___wmul	;wreg free
   971  0013B6  C08B  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
   972  0013BA  C08C  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   973  0013BE  0100               	movlb	0	; () banked
   974  0013C0  5180               	movf	?___wmul& (0+255),w,b
   975  0013C2  0100               	movlb	0	; () banked
   976  0013C4  278D               	addwf	??_sensorComputation& (0+255),f,b
   977  0013C6  0100               	movlb	0	; () banked
   978  0013C8  5181               	movf	(?___wmul+1)& (0+255),w,b
   979  0013CA  0100               	movlb	0	; () banked
   980  0013CC  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
   981  0013CE  90D8               	bcf	status,0,c
   982  0013D0  0100               	movlb	0	; () banked
   983  0013D2  3597               	rlcf	sensorComputation@j& (0+255),w,b
   984  0013D4  6ED9               	movwf	fsr2l,c
   985  0013D6  0100               	movlb	0	; () banked
   986  0013D8  3598               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   987  0013DA  6EDA               	movwf	fsr2h,c
   988  0013DC  0100               	movlb	0	; () banked
   989  0013DE  518D               	movf	??_sensorComputation& (0+255),w,b
   990  0013E0  26D9               	addwf	fsr2l,f,c
   991  0013E2  0100               	movlb	0	; () banked
   992  0013E4  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
   993  0013E6  22DA               	addwfc	fsr2h,f,c
   994  0013E8  CFDE F08F          	movff	postinc2,sensorComputation@max
   995  0013EC  CFDD F090          	movff	postdec2,sensorComputation@max+1
   996  0013F0  C08F  F091         	movff	sensorComputation@max,sensorComputation@min
   997  0013F4  C090  F092         	movff	sensorComputation@max+1,sensorComputation@min+1
   998  0013F8  C091  F093         	movff	sensorComputation@min,sensorComputation@sum
   999  0013FC  C092  F094         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1000                           
  1001                           ;user.c: 135: continue;
  1002  001400  D08F               	goto	l1973
  1003  001402                     l1971:
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;user.c: 136: }
  1007                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
  1008  001402  C095  F080         	movff	sensorComputation@i,___wmul@multiplier
  1009  001406  C096  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1010  00140A  0E00               	movlw	0
  1011  00140C  0100               	movlb	0	; () banked
  1012  00140E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1013  001410  0E14               	movlw	20
  1014  001412  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1015  001414  EC41  F00E         	call	___wmul	;wreg free
  1016  001418  C08B  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1017  00141C  C08C  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1018  001420  0100               	movlb	0	; () banked
  1019  001422  5180               	movf	?___wmul& (0+255),w,b
  1020  001424  0100               	movlb	0	; () banked
  1021  001426  278D               	addwf	??_sensorComputation& (0+255),f,b
  1022  001428  0100               	movlb	0	; () banked
  1023  00142A  5181               	movf	(?___wmul+1)& (0+255),w,b
  1024  00142C  0100               	movlb	0	; () banked
  1025  00142E  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1026  001430  90D8               	bcf	status,0,c
  1027  001432  0100               	movlb	0	; () banked
  1028  001434  3597               	rlcf	sensorComputation@j& (0+255),w,b
  1029  001436  6ED9               	movwf	fsr2l,c
  1030  001438  0100               	movlb	0	; () banked
  1031  00143A  3598               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1032  00143C  6EDA               	movwf	fsr2h,c
  1033  00143E  0100               	movlb	0	; () banked
  1034  001440  518D               	movf	??_sensorComputation& (0+255),w,b
  1035  001442  26D9               	addwf	fsr2l,f,c
  1036  001444  0100               	movlb	0	; () banked
  1037  001446  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1038  001448  22DA               	addwfc	fsr2h,f,c
  1039  00144A  CFDE F086          	movff	postinc2,MIN@a
  1040  00144E  CFDD F087          	movff	postdec2,MIN@a+1
  1041  001452  C091  F088         	movff	sensorComputation@min,MIN@b
  1042  001456  C092  F089         	movff	sensorComputation@min+1,MIN@b+1
  1043  00145A  EC5D  F00E         	call	_MIN	;wreg free
  1044  00145E  C086  F091         	movff	?_MIN,sensorComputation@min
  1045  001462  C087  F092         	movff	?_MIN+1,sensorComputation@min+1
  1046                           
  1047                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
  1048  001466  C095  F080         	movff	sensorComputation@i,___wmul@multiplier
  1049  00146A  C096  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1050  00146E  0E00               	movlw	0
  1051  001470  0100               	movlb	0	; () banked
  1052  001472  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1053  001474  0E14               	movlw	20
  1054  001476  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1055  001478  EC41  F00E         	call	___wmul	;wreg free
  1056  00147C  C08B  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1057  001480  C08C  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1058  001484  0100               	movlb	0	; () banked
  1059  001486  5180               	movf	?___wmul& (0+255),w,b
  1060  001488  0100               	movlb	0	; () banked
  1061  00148A  278D               	addwf	??_sensorComputation& (0+255),f,b
  1062  00148C  0100               	movlb	0	; () banked
  1063  00148E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1064  001490  0100               	movlb	0	; () banked
  1065  001492  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1066  001494  90D8               	bcf	status,0,c
  1067  001496  0100               	movlb	0	; () banked
  1068  001498  3597               	rlcf	sensorComputation@j& (0+255),w,b
  1069  00149A  6ED9               	movwf	fsr2l,c
  1070  00149C  0100               	movlb	0	; () banked
  1071  00149E  3598               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1072  0014A0  6EDA               	movwf	fsr2h,c
  1073  0014A2  0100               	movlb	0	; () banked
  1074  0014A4  518D               	movf	??_sensorComputation& (0+255),w,b
  1075  0014A6  26D9               	addwf	fsr2l,f,c
  1076  0014A8  0100               	movlb	0	; () banked
  1077  0014AA  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1078  0014AC  22DA               	addwfc	fsr2h,f,c
  1079  0014AE  CFDE F086          	movff	postinc2,MAX@a
  1080  0014B2  CFDD F087          	movff	postdec2,MAX@a+1
  1081  0014B6  C08F  F088         	movff	sensorComputation@max,MAX@b
  1082  0014BA  C090  F089         	movff	sensorComputation@max+1,MAX@b+1
  1083  0014BE  EC77  F00E         	call	_MAX	;wreg free
  1084  0014C2  C086  F08F         	movff	?_MAX,sensorComputation@max
  1085  0014C6  C087  F090         	movff	?_MAX+1,sensorComputation@max+1
  1086                           
  1087                           ;user.c: 139: sum += sensorTemp[i][j];
  1088  0014CA  C095  F080         	movff	sensorComputation@i,___wmul@multiplier
  1089  0014CE  C096  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1090  0014D2  0E00               	movlw	0
  1091  0014D4  0100               	movlb	0	; () banked
  1092  0014D6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1093  0014D8  0E14               	movlw	20
  1094  0014DA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1095  0014DC  EC41  F00E         	call	___wmul	;wreg free
  1096  0014E0  C08B  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1097  0014E4  C08C  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1098  0014E8  0100               	movlb	0	; () banked
  1099  0014EA  5180               	movf	?___wmul& (0+255),w,b
  1100  0014EC  0100               	movlb	0	; () banked
  1101  0014EE  278D               	addwf	??_sensorComputation& (0+255),f,b
  1102  0014F0  0100               	movlb	0	; () banked
  1103  0014F2  5181               	movf	(?___wmul+1)& (0+255),w,b
  1104  0014F4  0100               	movlb	0	; () banked
  1105  0014F6  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1106  0014F8  90D8               	bcf	status,0,c
  1107  0014FA  0100               	movlb	0	; () banked
  1108  0014FC  3597               	rlcf	sensorComputation@j& (0+255),w,b
  1109  0014FE  6ED9               	movwf	fsr2l,c
  1110  001500  0100               	movlb	0	; () banked
  1111  001502  3598               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1112  001504  6EDA               	movwf	fsr2h,c
  1113  001506  0100               	movlb	0	; () banked
  1114  001508  518D               	movf	??_sensorComputation& (0+255),w,b
  1115  00150A  26D9               	addwf	fsr2l,f,c
  1116  00150C  0100               	movlb	0	; () banked
  1117  00150E  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1118  001510  22DA               	addwfc	fsr2h,f,c
  1119  001512  50DE               	movf	postinc2,w,c
  1120  001514  0100               	movlb	0	; () banked
  1121  001516  2793               	addwf	sensorComputation@sum& (0+255),f,b
  1122  001518  50DD               	movf	postdec2,w,c
  1123  00151A  0100               	movlb	0	; () banked
  1124  00151C  2394               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1125  00151E  D000               	goto	l1973
  1126  001520                     l1973:
  1127                           
  1128                           ; BSR set to: 0
  1129  001520  0100               	movlb	0	; () banked
  1130  001522  4B97               	infsnz	sensorComputation@j& (0+255),f,b
  1131  001524  2B98               	incf	(sensorComputation@j+1)& (0+255),f,b
  1132                           
  1133                           ; BSR set to: 0
  1134  001526  0100               	movlb	0	; () banked
  1135  001528  BF98               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1136  00152A  D734               	goto	l1967
  1137  00152C  0100               	movlb	0	; () banked
  1138  00152E  5198               	movf	(sensorComputation@j+1)& (0+255),w,b
  1139  001530  E102               	bnz	l1977
  1140  001532  D729               	goto	L3
  1141  001534  D000               	goto	l1977
  1142  001536                     l1977:
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;user.c: 140: }
  1146                           ;user.c: 141: sum = sum - min - max;
  1147  001536  0100               	movlb	0	; () banked
  1148  001538  518F               	movf	sensorComputation@max& (0+255),w,b
  1149  00153A  0100               	movlb	0	; () banked
  1150  00153C  2591               	addwf	sensorComputation@min& (0+255),w,b
  1151  00153E  0100               	movlb	0	; () banked
  1152  001540  6F8D               	movwf	??_sensorComputation& (0+255),b
  1153  001542  0100               	movlb	0	; () banked
  1154  001544  5190               	movf	(sensorComputation@max+1)& (0+255),w,b
  1155  001546  0100               	movlb	0	; () banked
  1156  001548  2192               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1157  00154A  0100               	movlb	0	; () banked
  1158  00154C  6F8E               	movwf	(??_sensorComputation+1)& (0+255),b
  1159  00154E  0100               	movlb	0	; () banked
  1160  001550  1F8D               	comf	??_sensorComputation& (0+255),f,b
  1161  001552  1F8E               	comf	(??_sensorComputation+1)& (0+255),f,b
  1162  001554  4B8D               	infsnz	??_sensorComputation& (0+255),f,b
  1163  001556  2B8E               	incf	(??_sensorComputation+1)& (0+255),f,b
  1164  001558  0100               	movlb	0	; () banked
  1165  00155A  5193               	movf	sensorComputation@sum& (0+255),w,b
  1166  00155C  0100               	movlb	0	; () banked
  1167  00155E  258D               	addwf	??_sensorComputation& (0+255),w,b
  1168  001560  0100               	movlb	0	; () banked
  1169  001562  6F93               	movwf	sensorComputation@sum& (0+255),b
  1170  001564  0100               	movlb	0	; () banked
  1171  001566  5194               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1172  001568  0100               	movlb	0	; () banked
  1173  00156A  218E               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1174  00156C  0100               	movlb	0	; () banked
  1175  00156E  6F94               	movwf	(sensorComputation@sum+1)& (0+255),b
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1179  001570  C093  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1180  001574  C094  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1181  001578  0E00               	movlw	0
  1182  00157A  0100               	movlb	0	; () banked
  1183  00157C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1184  00157E  0E08               	movlw	8
  1185  001580  6F82               	movwf	___awdiv@divisor& (0+255),b
  1186  001582  EC7A  F00D         	call	___awdiv	;wreg free
  1187  001586  90D8               	bcf	status,0,c
  1188  001588  0100               	movlb	0	; () banked
  1189  00158A  3595               	rlcf	sensorComputation@i& (0+255),w,b
  1190  00158C  6ED9               	movwf	fsr2l,c
  1191  00158E  0100               	movlb	0	; () banked
  1192  001590  3596               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1193  001592  6EDA               	movwf	fsr2h,c
  1194  001594  0E01               	movlw	low _sensorValue
  1195  001596  26D9               	addwf	fsr2l,f,c
  1196  001598  0E00               	movlw	high _sensorValue
  1197  00159A  22DA               	addwfc	fsr2h,f,c
  1198  00159C  0100               	movlb	0	; () banked
  1199  00159E  C080  FFDE         	movff	?___awdiv,postinc2
  1200  0015A2  0100               	movlb	0	; () banked
  1201  0015A4  C081  FFDD         	movff	?___awdiv+1,postdec2
  1202                           
  1203                           ; BSR set to: 0
  1204  0015A8  0100               	movlb	0	; () banked
  1205  0015AA  4B95               	infsnz	sensorComputation@i& (0+255),f,b
  1206  0015AC  2B96               	incf	(sensorComputation@i+1)& (0+255),f,b
  1207                           
  1208                           ; BSR set to: 0
  1209  0015AE  0100               	movlb	0	; () banked
  1210  0015B0  BF96               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1211  0015B2  D6DE               	goto	l1961
  1212  0015B4  0100               	movlb	0	; () banked
  1213  0015B6  5196               	movf	(sensorComputation@i+1)& (0+255),w,b
  1214  0015B8  E102               	bnz	l311
  1215  0015BA  D6D3               	goto	L4
  1216  0015BC  D000               	goto	l311
  1217  0015BE                     l311:
  1218                           
  1219                           ; BSR set to: 0
  1220  0015BE  0012               	return		;funcret
  1221  0015C0                     __end_of_sensorComputation:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           postinc2	equ	0xFDE
  1230                           postdec2	equ	0xFDD
  1231                           fsr2h	equ	0xFDA
  1232                           fsr2l	equ	0xFD9
  1233                           status	equ	0xFD8
  1234                           
  1235 ;; *************** function ___wmul *****************
  1236 ;; Defined at:
  1237 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1240 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  product         2    4[BANK0 ] unsigned int 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  2    0[BANK0 ] unsigned int 
  1245 ;; Registers used:
  1246 ;;		wreg, status,2, status,0, prodl, prodh
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;Total ram usage:        6 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    4
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_sensorComputation
  1263 ;;		_sensorUpdate
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text3
  1268  001C82                     __ptext3:
  1269                           	opt stack 0
  1270  001C82                     ___wmul:
  1271                           	opt stack 24
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;incstack = 0
  1275  001C82  0100               	movlb	0	; () banked
  1276  001C84  5180               	movf	___wmul@multiplier& (0+255),w,b
  1277  001C86  0100               	movlb	0	; () banked
  1278  001C88  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1279  001C8A  CFF3 F084          	movff	prodl,___wmul@product
  1280  001C8E  CFF4 F085          	movff	prodh,___wmul@product+1
  1281  001C92  0100               	movlb	0	; () banked
  1282  001C94  5180               	movf	___wmul@multiplier& (0+255),w,b
  1283  001C96  0100               	movlb	0	; () banked
  1284  001C98  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1285  001C9A  50F3               	movf	prodl,w,c
  1286  001C9C  0100               	movlb	0	; () banked
  1287  001C9E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1288  001CA0  0100               	movlb	0	; () banked
  1289  001CA2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1290  001CA4  0100               	movlb	0	; () banked
  1291  001CA6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1292  001CA8  50F3               	movf	prodl,w,c
  1293  001CAA  0100               	movlb	0	; () banked
  1294  001CAC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1295                           
  1296                           ; BSR set to: 0
  1297  001CAE  C084  F080         	movff	___wmul@product,?___wmul
  1298  001CB2  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1299  001CB6  D000               	goto	l336
  1300  001CB8                     l336:
  1301                           
  1302                           ; BSR set to: 0
  1303  001CB8  0012               	return		;funcret
  1304  001CBA                     __end_of___wmul:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           prodh	equ	0xFF4
  1311                           prodl	equ	0xFF3
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postinc2	equ	0xFDE
  1315                           postdec2	equ	0xFDD
  1316                           fsr2h	equ	0xFDA
  1317                           fsr2l	equ	0xFD9
  1318                           status	equ	0xFD8
  1319                           
  1320 ;; *************** function ___awdiv *****************
  1321 ;; Defined at:
  1322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  dividend        2    0[BANK0 ] int 
  1325 ;;  divisor         2    2[BANK0 ] int 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  quotient        2    6[BANK0 ] int 
  1328 ;;  sign            1    5[BANK0 ] unsigned char 
  1329 ;;  counter         1    4[BANK0 ] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    0[BANK0 ] int 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;Total ram usage:        8 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    4
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_sensorComputation
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text4
  1354  001AF4                     __ptext4:
  1355                           	opt stack 0
  1356  001AF4                     ___awdiv:
  1357                           	opt stack 24
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;incstack = 0
  1361  001AF4  0E00               	movlw	0
  1362  001AF6  0100               	movlb	0	; () banked
  1363  001AF8  6F85               	movwf	___awdiv@sign& (0+255),b
  1364                           
  1365                           ; BSR set to: 0
  1366  001AFA  0100               	movlb	0	; () banked
  1367  001AFC  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1368  001AFE  D009               	goto	l1903
  1369                           
  1370                           ; BSR set to: 0
  1371  001B00  0100               	movlb	0	; () banked
  1372  001B02  6D82               	negf	___awdiv@divisor& (0+255),b
  1373  001B04  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1374  001B06  B0D8               	btfsc	status,0,c
  1375  001B08  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1376                           
  1377                           ; BSR set to: 0
  1378  001B0A  0E01               	movlw	1
  1379  001B0C  0100               	movlb	0	; () banked
  1380  001B0E  6F85               	movwf	___awdiv@sign& (0+255),b
  1381  001B10  D000               	goto	l1903
  1382  001B12                     l1903:
  1383                           
  1384                           ; BSR set to: 0
  1385  001B12  0100               	movlb	0	; () banked
  1386  001B14  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1387  001B16  D009               	goto	l1909
  1388                           
  1389                           ; BSR set to: 0
  1390  001B18  0100               	movlb	0	; () banked
  1391  001B1A  6D80               	negf	___awdiv@dividend& (0+255),b
  1392  001B1C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1393  001B1E  B0D8               	btfsc	status,0,c
  1394  001B20  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1395                           
  1396                           ; BSR set to: 0
  1397  001B22  0E01               	movlw	1
  1398  001B24  0100               	movlb	0	; () banked
  1399  001B26  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1400  001B28  D000               	goto	l1909
  1401  001B2A                     l1909:
  1402                           
  1403                           ; BSR set to: 0
  1404  001B2A  0E00               	movlw	0
  1405  001B2C  0100               	movlb	0	; () banked
  1406  001B2E  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1407  001B30  0E00               	movlw	0
  1408  001B32  6F86               	movwf	___awdiv@quotient& (0+255),b
  1409                           
  1410                           ; BSR set to: 0
  1411  001B34  0100               	movlb	0	; () banked
  1412  001B36  5182               	movf	___awdiv@divisor& (0+255),w,b
  1413  001B38  0100               	movlb	0	; () banked
  1414  001B3A  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1415  001B3C  B4D8               	btfsc	status,2,c
  1416  001B3E  D031               	goto	l1931
  1417                           
  1418                           ; BSR set to: 0
  1419  001B40  0E01               	movlw	1
  1420  001B42  0100               	movlb	0	; () banked
  1421  001B44  6F84               	movwf	___awdiv@counter& (0+255),b
  1422  001B46  D007               	goto	l1917
  1423  001B48                     l1915:
  1424                           
  1425                           ; BSR set to: 0
  1426  001B48  0100               	movlb	0	; () banked
  1427  001B4A  90D8               	bcf	status,0,c
  1428  001B4C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1429  001B4E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1430  001B50  0100               	movlb	0	; () banked
  1431  001B52  2B84               	incf	___awdiv@counter& (0+255),f,b
  1432  001B54  D000               	goto	l1917
  1433  001B56                     l1917:
  1434                           
  1435                           ; BSR set to: 0
  1436  001B56  0100               	movlb	0	; () banked
  1437  001B58  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1438  001B5A  D002               	goto	l1919
  1439  001B5C  D7F5               	goto	l1915
  1440                           
  1441                           ; BSR set to: 0
  1442  001B5E  D000               	goto	l1919
  1443  001B60                     l1919:
  1444                           
  1445                           ; BSR set to: 0
  1446  001B60  0100               	movlb	0	; () banked
  1447  001B62  90D8               	bcf	status,0,c
  1448  001B64  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1449  001B66  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1450                           
  1451                           ; BSR set to: 0
  1452  001B68  0100               	movlb	0	; () banked
  1453  001B6A  5182               	movf	___awdiv@divisor& (0+255),w,b
  1454  001B6C  0100               	movlb	0	; () banked
  1455  001B6E  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1456  001B70  0100               	movlb	0	; () banked
  1457  001B72  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1458  001B74  0100               	movlb	0	; () banked
  1459  001B76  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1460  001B78  A0D8               	btfss	status,0,c
  1461  001B7A  D00B               	goto	l1927
  1462                           
  1463                           ; BSR set to: 0
  1464  001B7C  0100               	movlb	0	; () banked
  1465  001B7E  5182               	movf	___awdiv@divisor& (0+255),w,b
  1466  001B80  0100               	movlb	0	; () banked
  1467  001B82  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1468  001B84  0100               	movlb	0	; () banked
  1469  001B86  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1470  001B88  0100               	movlb	0	; () banked
  1471  001B8A  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1472                           
  1473                           ; BSR set to: 0
  1474  001B8C  0100               	movlb	0	; () banked
  1475  001B8E  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1476  001B90  D000               	goto	l1927
  1477  001B92                     l1927:
  1478                           
  1479                           ; BSR set to: 0
  1480  001B92  0100               	movlb	0	; () banked
  1481  001B94  90D8               	bcf	status,0,c
  1482  001B96  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1483  001B98  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1484                           
  1485                           ; BSR set to: 0
  1486  001B9A  0100               	movlb	0	; () banked
  1487  001B9C  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1488  001B9E  D7E0               	goto	l1919
  1489                           
  1490                           ; BSR set to: 0
  1491  001BA0  D000               	goto	l1931
  1492  001BA2                     l1931:
  1493                           
  1494                           ; BSR set to: 0
  1495  001BA2  0100               	movlb	0	; () banked
  1496  001BA4  5185               	movf	___awdiv@sign& (0+255),w,b
  1497  001BA6  0100               	movlb	0	; () banked
  1498  001BA8  B4D8               	btfsc	status,2,c
  1499  001BAA  D006               	goto	l1935
  1500                           
  1501                           ; BSR set to: 0
  1502  001BAC  0100               	movlb	0	; () banked
  1503  001BAE  6D86               	negf	___awdiv@quotient& (0+255),b
  1504  001BB0  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1505  001BB2  B0D8               	btfsc	status,0,c
  1506  001BB4  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1507  001BB6  D000               	goto	l1935
  1508  001BB8                     l1935:
  1509                           
  1510                           ; BSR set to: 0
  1511  001BB8  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1512  001BBC  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1513  001BC0  D000               	goto	l529
  1514  001BC2                     l529:
  1515                           
  1516                           ; BSR set to: 0
  1517  001BC2  0012               	return		;funcret
  1518  001BC4                     __end_of___awdiv:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           postinc2	equ	0xFDE
  1529                           postdec2	equ	0xFDD
  1530                           fsr2h	equ	0xFDA
  1531                           fsr2l	equ	0xFD9
  1532                           status	equ	0xFD8
  1533                           
  1534 ;; *************** function _MIN *****************
  1535 ;; Defined at:
  1536 ;;		line 175 in file "user.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  a               2    6[BANK0 ] int 
  1539 ;;  b               2    8[BANK0 ] int 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  2    6[BANK0 ] int 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1551 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;Total ram usage:        5 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    4
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_sensorComputation
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text5
  1566  001CBA                     __ptext5:
  1567                           	opt stack 0
  1568  001CBA                     _MIN:
  1569                           	opt stack 24
  1570                           
  1571                           ;user.c: 177: if(a>b) return b;
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;incstack = 0
  1575  001CBA  0100               	movlb	0	; () banked
  1576  001CBC  5186               	movf	MIN@a& (0+255),w,b
  1577  001CBE  0100               	movlb	0	; () banked
  1578  001CC0  5D88               	subwf	MIN@b& (0+255),w,b
  1579  001CC2  0100               	movlb	0	; () banked
  1580  001CC4  5189               	movf	(MIN@b+1)& (0+255),w,b
  1581  001CC6  0A80               	xorlw	128
  1582  001CC8  0100               	movlb	0	; () banked
  1583  001CCA  6F8A               	movwf	??_MIN& (0+255),b
  1584  001CCC  0100               	movlb	0	; () banked
  1585  001CCE  5187               	movf	(MIN@a+1)& (0+255),w,b
  1586  001CD0  0A80               	xorlw	128
  1587  001CD2  0100               	movlb	0	; () banked
  1588  001CD4  598A               	subwfb	??_MIN& (0+255),w,b
  1589  001CD6  B0D8               	btfsc	status,0,c
  1590  001CD8  D005               	goto	l328
  1591                           
  1592                           ; BSR set to: 0
  1593  001CDA  C088  F086         	movff	MIN@b,?_MIN
  1594  001CDE  C089  F087         	movff	MIN@b+1,?_MIN+1
  1595  001CE2  D004               	goto	l329
  1596  001CE4                     l328:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;user.c: 178: return a;
  1600  001CE4  C086  F086         	movff	MIN@a,?_MIN
  1601  001CE8  C087  F087         	movff	MIN@a+1,?_MIN+1
  1602  001CEC                     l329:
  1603                           
  1604                           ; BSR set to: 0
  1605  001CEC  0012               	return		;funcret
  1606  001CEE                     __end_of_MIN:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           prodh	equ	0xFF4
  1613                           prodl	equ	0xFF3
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postinc2	equ	0xFDE
  1617                           postdec2	equ	0xFDD
  1618                           fsr2h	equ	0xFDA
  1619                           fsr2l	equ	0xFD9
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _MAX *****************
  1623 ;; Defined at:
  1624 ;;		line 181 in file "user.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  a               2    6[BANK0 ] int 
  1627 ;;  b               2    8[BANK0 ] int 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2    6[BANK0 ] int 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1639 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;Total ram usage:        5 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    4
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_sensorComputation
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text6
  1654  001CEE                     __ptext6:
  1655                           	opt stack 0
  1656  001CEE                     _MAX:
  1657                           	opt stack 24
  1658                           
  1659                           ;user.c: 183: if(a>b) return a;
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;incstack = 0
  1663  001CEE  0100               	movlb	0	; () banked
  1664  001CF0  5186               	movf	MAX@a& (0+255),w,b
  1665  001CF2  0100               	movlb	0	; () banked
  1666  001CF4  5D88               	subwf	MAX@b& (0+255),w,b
  1667  001CF6  0100               	movlb	0	; () banked
  1668  001CF8  5189               	movf	(MAX@b+1)& (0+255),w,b
  1669  001CFA  0A80               	xorlw	128
  1670  001CFC  0100               	movlb	0	; () banked
  1671  001CFE  6F8A               	movwf	??_MAX& (0+255),b
  1672  001D00  0100               	movlb	0	; () banked
  1673  001D02  5187               	movf	(MAX@a+1)& (0+255),w,b
  1674  001D04  0A80               	xorlw	128
  1675  001D06  0100               	movlb	0	; () banked
  1676  001D08  598A               	subwfb	??_MAX& (0+255),w,b
  1677  001D0A  B0D8               	btfsc	status,0,c
  1678  001D0C  D005               	goto	l332
  1679                           
  1680                           ; BSR set to: 0
  1681  001D0E  C086  F086         	movff	MAX@a,?_MAX
  1682  001D12  C087  F087         	movff	MAX@a+1,?_MAX+1
  1683  001D16  D004               	goto	l333
  1684  001D18                     l332:
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;user.c: 184: return b;
  1688  001D18  C088  F086         	movff	MAX@b,?_MAX
  1689  001D1C  C089  F087         	movff	MAX@b+1,?_MAX+1
  1690  001D20                     l333:
  1691                           
  1692                           ; BSR set to: 0
  1693  001D20  0012               	return		;funcret
  1694  001D22                     __end_of_MAX:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           postinc2	equ	0xFDE
  1705                           postdec2	equ	0xFDD
  1706                           fsr2h	equ	0xFDA
  1707                           fsr2l	equ	0xFD9
  1708                           status	equ	0xFD8
  1709                           
  1710 ;; *************** function _InitApp *****************
  1711 ;; Defined at:
  1712 ;;		line 35 in file "user.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;		None               void
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    5
  1733 ;; This function calls:
  1734 ;;		_AlgorithmSelection
  1735 ;;		_delay
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text7
  1742  001C08                     __ptext7:
  1743                           	opt stack 0
  1744  001C08                     _InitApp:
  1745                           	opt stack 25
  1746                           
  1747                           ;user.c: 39: TRISC = 0;
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;incstack = 0
  1751  001C08  0E00               	movlw	0
  1752  001C0A  6E94               	movwf	3988,c	;volatile
  1753                           
  1754                           ;user.c: 43: TRISEbits.TRISE1=1;
  1755  001C0C  8296               	bsf	3990,1,c	;volatile
  1756                           
  1757                           ;user.c: 45: TRISEbits.TRISE2=1;
  1758  001C0E  8496               	bsf	3990,2,c	;volatile
  1759                           
  1760                           ;user.c: 47: TRISBbits.RB1=1;
  1761  001C10  8293               	bsf	3987,1,c	;volatile
  1762                           
  1763                           ;user.c: 49: TRISBbits.RB0=1;
  1764  001C12  8093               	bsf	3987,0,c	;volatile
  1765                           
  1766                           ;user.c: 52: TRISBbits.RB3=1;
  1767  001C14  8693               	bsf	3987,3,c	;volatile
  1768                           
  1769                           ;user.c: 54: TRISBbits.RB2=1;
  1770  001C16  8493               	bsf	3987,2,c	;volatile
  1771                           
  1772                           ;user.c: 58: ADCON1 =0b00000001;
  1773  001C18  0E01               	movlw	1
  1774  001C1A  6EC1               	movwf	4033,c	;volatile
  1775                           
  1776                           ;user.c: 63: ADCON2=0b00001010;
  1777  001C1C  0E0A               	movlw	10
  1778  001C1E  6EC0               	movwf	4032,c	;volatile
  1779                           
  1780                           ;user.c: 68: ADCON0=0b00101011;
  1781  001C20  0E2B               	movlw	43
  1782  001C22  6EC2               	movwf	4034,c	;volatile
  1783                           
  1784                           ;user.c: 77: T0CON = 0b11000100;
  1785  001C24  0EC4               	movlw	196
  1786  001C26  6ED5               	movwf	4053,c	;volatile
  1787                           
  1788                           ;user.c: 85: INTCON2 = 0b11110100;
  1789  001C28  0EF4               	movlw	244
  1790  001C2A  6EF1               	movwf	intcon2,c	;volatile
  1791                           
  1792                           ;user.c: 95: INTCON = 0b00100000;
  1793  001C2C  0E20               	movlw	32
  1794  001C2E  6EF2               	movwf	intcon,c	;volatile
  1795                           
  1796                           ;user.c: 105: AlgorithmSelection();
  1797  001C30  ECA5  F00E         	call	_AlgorithmSelection	;wreg free
  1798                           
  1799                           ;user.c: 108: delay(1000);
  1800  001C34  0E03               	movlw	3
  1801  001C36  0100               	movlb	0	; () banked
  1802  001C38  6F81               	movwf	(delay@ms+1)& (0+255),b
  1803  001C3A  0EE8               	movlw	232
  1804  001C3C  6F80               	movwf	delay@ms& (0+255),b
  1805  001C3E  ECE2  F00D         	call	_delay	;wreg free
  1806                           
  1807                           ;user.c: 109: INTCONbits.GIE = 1;
  1808  001C42  8EF2               	bsf	intcon,7,c	;volatile
  1809  001C44  0012               	return		;funcret
  1810  001C46                     __end_of_InitApp:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           prodh	equ	0xFF4
  1817                           prodl	equ	0xFF3
  1818                           intcon	equ	0xFF2
  1819                           intcon2	equ	0xFF1
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postinc2	equ	0xFDE
  1823                           postdec2	equ	0xFDD
  1824                           fsr2h	equ	0xFDA
  1825                           fsr2l	equ	0xFD9
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _delay *****************
  1829 ;; Defined at:
  1830 ;;		line 29 in file "user.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  ms              2    0[BANK0 ] unsigned int 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  x               2    3[BANK0 ] int 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;		None               void
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        5 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    4
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_InitApp
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text8
  1859  001BC4                     __ptext8:
  1860                           	opt stack 0
  1861  001BC4                     _delay:
  1862                           	opt stack 25
  1863                           
  1864                           ;user.c: 30: int x = 0;
  1865                           
  1866                           ;incstack = 0
  1867  001BC4  0E00               	movlw	0
  1868  001BC6  0100               	movlb	0	; () banked
  1869  001BC8  6F84               	movwf	(delay@x+1)& (0+255),b
  1870  001BCA  0E00               	movlw	0
  1871  001BCC  6F83               	movwf	delay@x& (0+255),b
  1872                           
  1873                           ;user.c: 31: for (x = 0; x < ms; x++)
  1874  001BCE  0E00               	movlw	0
  1875  001BD0  0100               	movlb	0	; () banked
  1876  001BD2  6F84               	movwf	(delay@x+1)& (0+255),b
  1877  001BD4  0E00               	movlw	0
  1878  001BD6  6F83               	movwf	delay@x& (0+255),b
  1879  001BD8  D00C               	goto	l288
  1880  001BDA                     l1941:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1884  001BDA  0E0B               	movlw	11
  1885  001BDC  0100               	movlb	0	; () banked
  1886  001BDE  6F82               	movwf	??_delay& (0+255),b
  1887  001BE0  0E62               	movlw	98
  1888  001BE2                     u1857:
  1889  001BE2  2EE8               	decfsz	wreg,f,c
  1890  001BE4  D7FE               	goto	u1857
  1891  001BE6  2F82               	decfsz	??_delay& (0+255),f,b
  1892  001BE8  D7FC               	goto	u1857
  1893  001BEA  D000               	nop2	
  1894  001BEC  0100               	movlb	0	; () banked
  1895  001BEE  4B83               	infsnz	delay@x& (0+255),f,b
  1896  001BF0  2B84               	incf	(delay@x+1)& (0+255),f,b
  1897  001BF2                     l288:
  1898                           
  1899                           ; BSR set to: 0
  1900  001BF2  0100               	movlb	0	; () banked
  1901  001BF4  5180               	movf	delay@ms& (0+255),w,b
  1902  001BF6  0100               	movlb	0	; () banked
  1903  001BF8  5D83               	subwf	delay@x& (0+255),w,b
  1904  001BFA  0100               	movlb	0	; () banked
  1905  001BFC  5181               	movf	(delay@ms+1)& (0+255),w,b
  1906  001BFE  0100               	movlb	0	; () banked
  1907  001C00  5984               	subwfb	(delay@x+1)& (0+255),w,b
  1908  001C02  A0D8               	btfss	status,0,c
  1909  001C04  D7EA               	goto	l1941
  1910                           
  1911                           ; BSR set to: 0
  1912                           
  1913                           ; BSR set to: 0
  1914  001C06  0012               	return		;funcret
  1915  001C08                     __end_of_delay:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           intcon	equ	0xFF2
  1924                           intcon2	equ	0xFF1
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postinc2	equ	0xFDE
  1928                           postdec2	equ	0xFDD
  1929                           fsr2h	equ	0xFDA
  1930                           fsr2l	equ	0xFD9
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _AlgorithmSelection *****************
  1934 ;; Defined at:
  1935 ;;		line 112 in file "user.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    4
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_InitApp
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text9
  1964  001D4A                     __ptext9:
  1965                           	opt stack 0
  1966  001D4A                     _AlgorithmSelection:
  1967                           	opt stack 25
  1968                           
  1969                           ;user.c: 114: ADCON0 = 0b00100111;
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;incstack = 0
  1973  001D4A  0E27               	movlw	39
  1974  001D4C  6EC2               	movwf	4034,c	;volatile
  1975                           
  1976                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1977  001D4E  82C2               	bsf	4034,1,c	;volatile
  1978                           
  1979                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1980  001D50  D000               	goto	l297
  1981  001D52                     l297:
  1982  001D52  B2C2               	btfsc	4034,1,c	;volatile
  1983  001D54  D7FE               	goto	l297
  1984                           
  1985                           ;user.c: 119: if(ADRESL > 0b10000000)
  1986  001D56  0E80               	movlw	128
  1987  001D58  64C3               	cpfsgt	4035,c	;volatile
  1988  001D5A  D002               	goto	l1953
  1989                           
  1990                           ;user.c: 120: algorithm = LEFTWALL;
  1991  001D5C  0E00               	movlw	0
  1992  001D5E  D001               	goto	L5
  1993  001D60                     l1953:
  1994                           
  1995                           ;user.c: 121: else
  1996                           ;user.c: 122: algorithm = RIGHTWALL;
  1997  001D60  0E01               	movlw	1
  1998  001D62                     L5:
  1999  001D62  6E2D               	movwf	_algorithm,c
  2000  001D64  D000               	goto	l302
  2001  001D66                     l302:
  2002  001D66  0012               	return		;funcret
  2003  001D68                     __end_of_AlgorithmSelection:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           prodh	equ	0xFF4
  2010                           prodl	equ	0xFF3
  2011                           intcon	equ	0xFF2
  2012                           intcon2	equ	0xFF1
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postinc2	equ	0xFDE
  2016                           postdec2	equ	0xFDD
  2017                           fsr2h	equ	0xFDA
  2018                           fsr2l	equ	0xFD9
  2019                           status	equ	0xFD8
  2020                           
  2021 ;; *************** function _ConfigureOscillator *****************
  2022 ;; Defined at:
  2023 ;;		line 24 in file "system.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;		None               void
  2030 ;; Registers used:
  2031 ;;		wreg, status,2
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;Total ram usage:        0 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    4
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text10
  2052  001DDE                     __ptext10:
  2053                           	opt stack 0
  2054  001DDE                     _ConfigureOscillator:
  2055                           	opt stack 26
  2056                           
  2057                           ;system.c: 29: OSCCON = 0b01111100;
  2058                           
  2059                           ;incstack = 0
  2060  001DDE  0E7C               	movlw	124
  2061  001DE0  6ED3               	movwf	4051,c	;volatile
  2062                           
  2063                           ;system.c: 31: OSCTUNE = 0b01001111;
  2064  001DE2  0E4F               	movlw	79
  2065  001DE4  6E9B               	movwf	3995,c	;volatile
  2066  001DE6  0012               	return		;funcret
  2067  001DE8                     __end_of_ConfigureOscillator:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           prodh	equ	0xFF4
  2074                           prodl	equ	0xFF3
  2075                           intcon	equ	0xFF2
  2076                           intcon2	equ	0xFF1
  2077                           postinc0	equ	0xFEE
  2078                           wreg	equ	0xFE8
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function _low_isr *****************
  2086 ;; Defined at:
  2087 ;;		line 223 in file "interrupts.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;		None               void
  2094 ;; Registers used:
  2095 ;;		None
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;Total ram usage:       17 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    3
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		Interrupt level 1
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	intcodelo
  2116  000018                     __pintcodelo:
  2117                           	opt stack 0
  2118  000018                     _low_isr:
  2119                           	opt stack 24
  2120                           
  2121                           ;incstack = 0
  2122  000018  CFD8 F030          	movff	status,??_low_isr
  2123  00001C  CFE8 F031          	movff	wreg,??_low_isr+1
  2124  000020  CFE0 F032          	movff	bsr,??_low_isr+2
  2125  000024  CFFA F033          	movff	pclath,??_low_isr+3
  2126  000028  CFFB F034          	movff	pclatu,??_low_isr+4
  2127  00002C  CFE9 F035          	movff	fsr0l,??_low_isr+5
  2128  000030  CFEA F036          	movff	fsr0h,??_low_isr+6
  2129  000034  CFE1 F037          	movff	fsr1l,??_low_isr+7
  2130  000038  CFE2 F038          	movff	fsr1h,??_low_isr+8
  2131  00003C  CFD9 F039          	movff	fsr2l,??_low_isr+9
  2132  000040  CFDA F03A          	movff	fsr2h,??_low_isr+10
  2133  000044  CFF3 F03B          	movff	prodl,??_low_isr+11
  2134  000048  CFF4 F03C          	movff	prodh,??_low_isr+12
  2135  00004C  CFF6 F03D          	movff	tblptrl,??_low_isr+13
  2136  000050  CFF7 F03E          	movff	tblptrh,??_low_isr+14
  2137  000054  CFF8 F03F          	movff	tblptru,??_low_isr+15
  2138  000058  CFF5 F040          	movff	tablat,??_low_isr+16
  2139  00005C  C040  FFF5         	movff	??_low_isr+16,tablat
  2140  000060  C03F  FFF8         	movff	??_low_isr+15,tblptru
  2141  000064  C03E  FFF7         	movff	??_low_isr+14,tblptrh
  2142  000068  C03D  FFF6         	movff	??_low_isr+13,tblptrl
  2143  00006C  C03C  FFF4         	movff	??_low_isr+12,prodh
  2144  000070  C03B  FFF3         	movff	??_low_isr+11,prodl
  2145  000074  C03A  FFDA         	movff	??_low_isr+10,fsr2h
  2146  000078  C039  FFD9         	movff	??_low_isr+9,fsr2l
  2147  00007C  C038  FFE2         	movff	??_low_isr+8,fsr1h
  2148  000080  C037  FFE1         	movff	??_low_isr+7,fsr1l
  2149  000084  C036  FFEA         	movff	??_low_isr+6,fsr0h
  2150  000088  C035  FFE9         	movff	??_low_isr+5,fsr0l
  2151  00008C  C034  FFFB         	movff	??_low_isr+4,pclatu
  2152  000090  C033  FFFA         	movff	??_low_isr+3,pclath
  2153  000094  C032  FFE0         	movff	??_low_isr+2,bsr
  2154  000098  C031  FFE8         	movff	??_low_isr+1,wreg
  2155  00009C  C030  FFD8         	movff	??_low_isr,status
  2156  0000A0  0010               	retfie	
  2157  0000A2                     __end_of_low_isr:
  2158                           	opt stack 0
  2159                           pclatu	equ	0xFFB
  2160                           pclath	equ	0xFFA
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           intcon	equ	0xFF2
  2168                           intcon2	equ	0xFF1
  2169                           postinc0	equ	0xFEE
  2170                           fsr0h	equ	0xFEA
  2171                           fsr0l	equ	0xFE9
  2172                           wreg	equ	0xFE8
  2173                           fsr1h	equ	0xFE2
  2174                           fsr1l	equ	0xFE1
  2175                           bsr	equ	0xFE0
  2176                           postinc2	equ	0xFDE
  2177                           postdec2	equ	0xFDD
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _high_isr *****************
  2183 ;; Defined at:
  2184 ;;		line 99 in file "interrupts.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;		None               void
  2191 ;; Registers used:
  2192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;Total ram usage:       16 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    2
  2205 ;; This function calls:
  2206 ;;		_ABS
  2207 ;;		_FrontController
  2208 ;;		_KController
  2209 ;;		_Reversing
  2210 ;;		_forward
  2211 ;;		_merge
  2212 ;;		_motorCounterUpdate
  2213 ;;		_moveMouse
  2214 ;;		_rotate
  2215 ;; This function is called by:
  2216 ;;		Interrupt level 2
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	intcode
  2221  000008                     __pintcode:
  2222                           	opt stack 0
  2223  000008                     _high_isr:
  2224                           	opt stack 24
  2225                           
  2226                           ;incstack = 0
  2227  000008  CFFA F04B          	movff	pclath,??_high_isr+2
  2228  00000C  CFFB F04C          	movff	pclatu,??_high_isr+3
  2229  000010  CFE9 F04D          	movff	fsr0l,??_high_isr+4
  2230  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  2231                           pclatu	equ	0xFFB
  2232                           pclath	equ	0xFFA
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           intcon	equ	0xFF2
  2240                           intcon2	equ	0xFF1
  2241                           postinc0	equ	0xFEE
  2242                           fsr0h	equ	0xFEA
  2243                           fsr0l	equ	0xFE9
  2244                           wreg	equ	0xFE8
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           bsr	equ	0xFE0
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254                           	psect	intcode_body
  2255  00100A                     __pintcode_body:
  2256                           	opt stack 24
  2257  00100A                     int_func:
  2258                           	opt stack 24
  2259  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2260  00100C  CFEA F04E          	movff	fsr0h,??_high_isr+5
  2261  001010  CFE1 F04F          	movff	fsr1l,??_high_isr+6
  2262  001014  CFE2 F050          	movff	fsr1h,??_high_isr+7
  2263  001018  CFD9 F051          	movff	fsr2l,??_high_isr+8
  2264  00101C  CFDA F052          	movff	fsr2h,??_high_isr+9
  2265  001020  CFF3 F053          	movff	prodl,??_high_isr+10
  2266  001024  CFF4 F054          	movff	prodh,??_high_isr+11
  2267  001028  CFF6 F055          	movff	tblptrl,??_high_isr+12
  2268  00102C  CFF7 F056          	movff	tblptrh,??_high_isr+13
  2269  001030  CFF8 F057          	movff	tblptru,??_high_isr+14
  2270  001034  CFF5 F058          	movff	tablat,??_high_isr+15
  2271                           
  2272                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2273  001038  A4F2               	btfss	intcon,2,c	;volatile
  2274  00103A  D16B               	goto	i2l118
  2275                           
  2276                           ;interrupts.c: 119: {
  2277                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2278  00103C  BE12               	btfsc	_MotorDelayCounter+1,7,c
  2279  00103E  D165               	goto	i2l1859
  2280  001040  5012               	movf	_MotorDelayCounter+1,w,c
  2281  001042  E104               	bnz	i2u129_40
  2282  001044  0E03               	movlw	3
  2283  001046  5C11               	subwf	_MotorDelayCounter,w,c
  2284  001048  A0D8               	btfss	status,0,c
  2285  00104A  D15F               	goto	i2l1859
  2286  00104C                     i2u129_40:
  2287                           
  2288                           ;interrupts.c: 121: {
  2289                           ;interrupts.c: 123: if(controllerSteps > 0){
  2290  00104C  5059               	movf	_controllerSteps,w,c
  2291  00104E  B4D8               	btfsc	status,2,c
  2292  001050  D00C               	goto	i2l1757
  2293                           
  2294                           ;interrupts.c: 124: motorCounterUpdate(RIGHT,0);
  2295  001052  0E00               	movlw	0
  2296  001054  6E41               	movwf	motorCounterUpdate@reverse,c
  2297  001056  0E01               	movlw	1
  2298  001058  EC00  F00D         	call	_motorCounterUpdate
  2299                           
  2300                           ;interrupts.c: 125: motorCounterUpdate(LEFT,0);
  2301  00105C  0E00               	movlw	0
  2302  00105E  6E41               	movwf	motorCounterUpdate@reverse,c
  2303  001060  0E00               	movlw	0
  2304  001062  EC00  F00D         	call	_motorCounterUpdate
  2305                           
  2306                           ;interrupts.c: 126: controllerSteps--;
  2307  001066  0659               	decf	_controllerSteps,f,c
  2308  001068  D000               	goto	i2l1757
  2309  00106A                     i2l1757:
  2310                           
  2311                           ;interrupts.c: 127: }
  2312                           ;interrupts.c: 129: if (ForwardCounter > 0) {
  2313  00106A  BE0E               	btfsc	_ForwardCounter+1,7,c
  2314  00106C  D03D               	goto	i2l1771
  2315  00106E  500E               	movf	_ForwardCounter+1,w,c
  2316  001070  E103               	bnz	i2u131_40
  2317  001072  040D               	decf	_ForwardCounter,w,c
  2318  001074  A0D8               	btfss	status,0,c
  2319  001076  D038               	goto	i2l1771
  2320  001078                     i2u131_40:
  2321                           
  2322                           ;interrupts.c: 130: forward();
  2323  001078  ECB4  F00E         	call	_forward	;wreg free
  2324                           
  2325                           ;interrupts.c: 131: while (ForwardCounter == 1 && (sensorValue[2] > 360 && sensorValue[3
      +                          ] > 360)) {
  2326  00107C  D021               	goto	i2l1765
  2327  00107E                     i2l1761:
  2328                           
  2329                           ;interrupts.c: 132: FrontController();
  2330  00107E  ECEB  F00B         	call	_FrontController	;wreg free
  2331                           
  2332                           ;interrupts.c: 133: if (ABS(sensorValue[2] - sensorValue[3]) <= 4 ){
  2333  001082  EE20  F007         	lfsr	2,_sensorValue+6
  2334  001086  CFDE F049          	movff	postinc2,??_high_isr
  2335  00108A  CFDD F04A          	movff	postdec2,??_high_isr+1
  2336  00108E  1E49               	comf	??_high_isr,f,c
  2337  001090  1E4A               	comf	??_high_isr+1,f,c
  2338  001092  4A49               	infsnz	??_high_isr,f,c
  2339  001094  2A4A               	incf	??_high_isr+1,f,c
  2340  001096  5005               	movf	_sensorValue+4,w,c
  2341  001098  2449               	addwf	??_high_isr,w,c
  2342  00109A  6E41               	movwf	ABS@x,c
  2343  00109C  5006               	movf	_sensorValue+5,w,c
  2344  00109E  204A               	addwfc	??_high_isr+1,w,c
  2345  0010A0  6E42               	movwf	ABS@x+1,c
  2346  0010A2  ECD0  F00E         	call	_ABS	;wreg free
  2347  0010A6  BE42               	btfsc	?_ABS+1,7,c
  2348  0010A8  D006               	goto	i2l1763
  2349  0010AA  5042               	movf	?_ABS+1,w,c
  2350  0010AC  E109               	bnz	i2l1765
  2351  0010AE  0E05               	movlw	5
  2352  0010B0  5C41               	subwf	?_ABS,w,c
  2353  0010B2  B0D8               	btfsc	status,0,c
  2354  0010B4  D005               	goto	i2l1765
  2355  0010B6                     i2l1763:
  2356                           
  2357                           ;interrupts.c: 134: ForwardCounter = 0;
  2358  0010B6  0E00               	movlw	0
  2359  0010B8  6E0E               	movwf	_ForwardCounter+1,c
  2360  0010BA  0E00               	movlw	0
  2361  0010BC  6E0D               	movwf	_ForwardCounter,c
  2362  0010BE  D000               	goto	i2l1765
  2363  0010C0                     i2l1765:
  2364  0010C0  040D               	decf	_ForwardCounter,w,c
  2365  0010C2  100E               	iorwf	_ForwardCounter+1,w,c
  2366  0010C4  B4D8               	btfsc	status,2,c
  2367  0010C6  BE06               	btfsc	_sensorValue+5,7,c
  2368  0010C8  D114               	goto	i2l1857
  2369  0010CA  0E69               	movlw	105
  2370  0010CC  5C05               	subwf	_sensorValue+4,w,c
  2371  0010CE  0E01               	movlw	1
  2372  0010D0  5806               	subwfb	_sensorValue+5,w,c
  2373  0010D2  B0D8               	btfsc	status,0,c
  2374  0010D4  BE08               	btfsc	_sensorValue+7,7,c
  2375  0010D6  D10D               	goto	i2l1857
  2376  0010D8  0E69               	movlw	105
  2377  0010DA  5C07               	subwf	_sensorValue+6,w,c
  2378  0010DC  0E01               	movlw	1
  2379  0010DE  5808               	subwfb	_sensorValue+7,w,c
  2380  0010E0  A0D8               	btfss	status,0,c
  2381  0010E2  D107               	goto	i2l1857
  2382  0010E4  D7CC               	goto	i2l1761
  2383                           
  2384                           ;interrupts.c: 135: }
  2385                           ;interrupts.c: 136: }
  2386                           ;interrupts.c: 137: }
  2387  0010E6  D105               	goto	i2l1857
  2388  0010E8                     i2l1771:
  2389                           
  2390                           ;interrupts.c: 139: else if (ReverseCounter > 0) {
  2391  0010E8  BE16               	btfsc	_ReverseCounter+1,7,c
  2392  0010EA  D008               	goto	i2l1775
  2393  0010EC  5016               	movf	_ReverseCounter+1,w,c
  2394  0010EE  E103               	bnz	i2u136_40
  2395  0010F0  0415               	decf	_ReverseCounter,w,c
  2396  0010F2  A0D8               	btfss	status,0,c
  2397  0010F4  D003               	goto	i2l1775
  2398  0010F6                     i2u136_40:
  2399                           
  2400                           ;interrupts.c: 140: Reversing();
  2401  0010F6  ECC2  F00E         	call	_Reversing	;wreg free
  2402                           
  2403                           ;interrupts.c: 141: }
  2404  0010FA  D0FB               	goto	i2l1857
  2405  0010FC                     i2l1775:
  2406                           
  2407                           ;interrupts.c: 143: else if(RotateCounter > 0) {
  2408  0010FC  BE18               	btfsc	_RotateCounter+1,7,c
  2409  0010FE  D020               	goto	i2l1787
  2410  001100  5018               	movf	_RotateCounter+1,w,c
  2411  001102  E103               	bnz	i2u137_40
  2412  001104  0417               	decf	_RotateCounter,w,c
  2413  001106  A0D8               	btfss	status,0,c
  2414  001108  D01B               	goto	i2l1787
  2415  00110A                     i2u137_40:
  2416                           
  2417                           ;interrupts.c: 145: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2418  00110A  BE06               	btfsc	_sensorValue+5,7,c
  2419  00110C  D006               	goto	i2l1779
  2420  00110E  0E21               	movlw	33
  2421  001110  5C05               	subwf	_sensorValue+4,w,c
  2422  001112  0E03               	movlw	3
  2423  001114  5806               	subwfb	_sensorValue+5,w,c
  2424  001116  B0D8               	btfsc	status,0,c
  2425  001118  D008               	goto	i2l1781
  2426  00111A                     i2l1779:
  2427  00111A  BE08               	btfsc	_sensorValue+7,7,c
  2428  00111C  D00D               	goto	i2l1785
  2429  00111E  0E21               	movlw	33
  2430  001120  5C07               	subwf	_sensorValue+6,w,c
  2431  001122  0E03               	movlw	3
  2432  001124  5808               	subwfb	_sensorValue+7,w,c
  2433  001126  A0D8               	btfss	status,0,c
  2434  001128  D007               	goto	i2l1785
  2435  00112A                     i2l1781:
  2436                           
  2437                           ;interrupts.c: 146: ReverseCounter = 15;
  2438  00112A  0E00               	movlw	0
  2439  00112C  6E16               	movwf	_ReverseCounter+1,c
  2440  00112E  0E0F               	movlw	15
  2441  001130  6E15               	movwf	_ReverseCounter,c
  2442                           
  2443                           ;interrupts.c: 147: Reversing();
  2444  001132  ECC2  F00E         	call	_Reversing	;wreg free
  2445                           
  2446                           ;interrupts.c: 148: } else {
  2447  001136  D0DD               	goto	i2l1857
  2448  001138                     i2l1785:
  2449                           
  2450                           ;interrupts.c: 149: rotate(rotatingSide);
  2451  001138  502F               	movf	_rotatingSide,w,c
  2452  00113A  EC23  F00E         	call	_rotate
  2453                           
  2454                           ;interrupts.c: 150: }
  2455                           ;interrupts.c: 151: }
  2456  00113E  D0D9               	goto	i2l1857
  2457  001140                     i2l1787:
  2458                           
  2459                           ;interrupts.c: 153: else if (TurnLeft == 1){
  2460  001140  0419               	decf	_TurnLeft,w,c
  2461  001142  101A               	iorwf	_TurnLeft+1,w,c
  2462  001144  A4D8               	btfss	status,2,c
  2463  001146  D00D               	goto	i2l1791
  2464                           
  2465                           ;interrupts.c: 154: RotateCounter = 167;
  2466  001148  0E00               	movlw	0
  2467  00114A  6E18               	movwf	_RotateCounter+1,c
  2468  00114C  0EA7               	movlw	167
  2469  00114E  6E17               	movwf	_RotateCounter,c
  2470                           
  2471                           ;interrupts.c: 155: rotatingSide = LEFT;
  2472  001150  0E00               	movlw	0
  2473  001152  6E2F               	movwf	_rotatingSide,c
  2474                           
  2475                           ;interrupts.c: 156: justTurned = 1;
  2476  001154  0E01               	movlw	1
  2477  001156  6E2E               	movwf	_justTurned,c
  2478                           
  2479                           ;interrupts.c: 157: TurnLeft = 0;
  2480  001158  0E00               	movlw	0
  2481  00115A  6E1A               	movwf	_TurnLeft+1,c
  2482  00115C  0E00               	movlw	0
  2483  00115E  6E19               	movwf	_TurnLeft,c
  2484                           
  2485                           ;interrupts.c: 158: }
  2486  001160  D0C8               	goto	i2l1857
  2487  001162                     i2l1791:
  2488                           
  2489                           ;interrupts.c: 160: else if (TurnRight == 1 && sensorValue[3] > 360) {
  2490  001162  041B               	decf	_TurnRight,w,c
  2491  001164  101C               	iorwf	_TurnRight+1,w,c
  2492  001166  B4D8               	btfsc	status,2,c
  2493  001168  BE08               	btfsc	_sensorValue+7,7,c
  2494  00116A  D013               	goto	i2l1797
  2495  00116C  0E69               	movlw	105
  2496  00116E  5C07               	subwf	_sensorValue+6,w,c
  2497  001170  0E01               	movlw	1
  2498  001172  5808               	subwfb	_sensorValue+7,w,c
  2499  001174  A0D8               	btfss	status,0,c
  2500  001176  D00D               	goto	i2l1797
  2501                           
  2502                           ;interrupts.c: 161: RotateCounter = 167;
  2503  001178  0E00               	movlw	0
  2504  00117A  6E18               	movwf	_RotateCounter+1,c
  2505  00117C  0EA7               	movlw	167
  2506  00117E  6E17               	movwf	_RotateCounter,c
  2507                           
  2508                           ;interrupts.c: 162: rotatingSide = RIGHT;
  2509  001180  0E01               	movlw	1
  2510  001182  6E2F               	movwf	_rotatingSide,c
  2511                           
  2512                           ;interrupts.c: 163: justTurned = 1;
  2513  001184  0E01               	movlw	1
  2514  001186  6E2E               	movwf	_justTurned,c
  2515                           
  2516                           ;interrupts.c: 164: TurnRight = 0;
  2517  001188  0E00               	movlw	0
  2518  00118A  6E1C               	movwf	_TurnRight+1,c
  2519  00118C  0E00               	movlw	0
  2520  00118E  6E1B               	movwf	_TurnRight,c
  2521                           
  2522                           ;interrupts.c: 165: }
  2523  001190  D0B0               	goto	i2l1857
  2524  001192                     i2l1797:
  2525                           
  2526                           ;interrupts.c: 167: else if (sensorValue[0] < 90 && algorithm == LEFTWALL) {
  2527  001192  BE02               	btfsc	_sensorValue+1,7,c
  2528  001194  D006               	goto	i2l1799
  2529  001196  5002               	movf	_sensorValue+1,w,c
  2530  001198  E11A               	bnz	i2l1809
  2531  00119A  0E5A               	movlw	90
  2532  00119C  5C01               	subwf	_sensorValue,w,c
  2533  00119E  B0D8               	btfsc	status,0,c
  2534  0011A0  D016               	goto	i2l1809
  2535  0011A2                     i2l1799:
  2536  0011A2  502D               	movf	_algorithm,w,c
  2537  0011A4  A4D8               	btfss	status,2,c
  2538  0011A6  D013               	goto	i2l1809
  2539                           
  2540                           ;interrupts.c: 168: TurnLeft = 1;
  2541  0011A8  0E00               	movlw	0
  2542  0011AA  6E1A               	movwf	_TurnLeft+1,c
  2543  0011AC  0E01               	movlw	1
  2544  0011AE  6E19               	movwf	_TurnLeft,c
  2545                           
  2546                           ;interrupts.c: 169: if(justTurned == 0) {
  2547  0011B0  502E               	movf	_justTurned,w,c
  2548  0011B2  A4D8               	btfss	status,2,c
  2549  0011B4  D004               	goto	i2l1805
  2550                           
  2551                           ;interrupts.c: 170: ForwardCounter = 420;
  2552  0011B6  0E01               	movlw	1
  2553  0011B8  6E0E               	movwf	_ForwardCounter+1,c
  2554  0011BA  0EA4               	movlw	164
  2555  0011BC  D003               	goto	L6
  2556  0011BE                     i2l1805:
  2557                           
  2558                           ;interrupts.c: 172: ForwardCounter = 400;
  2559  0011BE  0E01               	movlw	1
  2560  0011C0  6E0E               	movwf	_ForwardCounter+1,c
  2561  0011C2  0E90               	movlw	144
  2562  0011C4                     L6:
  2563  0011C4  6E0D               	movwf	_ForwardCounter,c
  2564  0011C6  D000               	goto	i2l1807
  2565  0011C8                     i2l1807:
  2566                           
  2567                           ;interrupts.c: 173: }
  2568                           ;interrupts.c: 174: forward();
  2569  0011C8  ECB4  F00E         	call	_forward	;wreg free
  2570                           
  2571                           ;interrupts.c: 175: }
  2572  0011CC  D092               	goto	i2l1857
  2573  0011CE                     i2l1809:
  2574                           
  2575                           ;interrupts.c: 177: else if (sensorValue[1] < 91 && sensorValue[0] > 90 && algorithm == 
      +                          LEFTWALL) {
  2576  0011CE  BE04               	btfsc	_sensorValue+3,7,c
  2577  0011D0  D006               	goto	i2l1811
  2578  0011D2  5004               	movf	_sensorValue+3,w,c
  2579  0011D4  E122               	bnz	i2l1823
  2580  0011D6  0E5B               	movlw	91
  2581  0011D8  5C03               	subwf	_sensorValue+2,w,c
  2582  0011DA  B0D8               	btfsc	status,0,c
  2583  0011DC  D01E               	goto	i2l1823
  2584  0011DE                     i2l1811:
  2585  0011DE  BE02               	btfsc	_sensorValue+1,7,c
  2586  0011E0  D01C               	goto	i2l1823
  2587  0011E2  5002               	movf	_sensorValue+1,w,c
  2588  0011E4  E104               	bnz	i2u147_40
  2589  0011E6  0E5B               	movlw	91
  2590  0011E8  5C01               	subwf	_sensorValue,w,c
  2591  0011EA  A0D8               	btfss	status,0,c
  2592  0011EC  D016               	goto	i2l1823
  2593  0011EE                     i2u147_40:
  2594  0011EE  502D               	movf	_algorithm,w,c
  2595  0011F0  A4D8               	btfss	status,2,c
  2596  0011F2  D013               	goto	i2l1823
  2597                           
  2598                           ;interrupts.c: 178: TurnRight = 1;
  2599  0011F4  0E00               	movlw	0
  2600  0011F6  6E1C               	movwf	_TurnRight+1,c
  2601  0011F8  0E01               	movlw	1
  2602  0011FA  6E1B               	movwf	_TurnRight,c
  2603                           
  2604                           ;interrupts.c: 179: if(justTurned == 0) {
  2605  0011FC  502E               	movf	_justTurned,w,c
  2606  0011FE  A4D8               	btfss	status,2,c
  2607  001200  D004               	goto	i2l1819
  2608                           
  2609                           ;interrupts.c: 180: ForwardCounter = 450;
  2610  001202  0E01               	movlw	1
  2611  001204  6E0E               	movwf	_ForwardCounter+1,c
  2612  001206  0EC2               	movlw	194
  2613  001208  D003               	goto	L7
  2614  00120A                     i2l1819:
  2615                           
  2616                           ;interrupts.c: 182: ForwardCounter = 410;
  2617  00120A  0E01               	movlw	1
  2618  00120C  6E0E               	movwf	_ForwardCounter+1,c
  2619  00120E  0E9A               	movlw	154
  2620  001210                     L7:
  2621  001210  6E0D               	movwf	_ForwardCounter,c
  2622  001212  D000               	goto	i2l1821
  2623  001214                     i2l1821:
  2624                           
  2625                           ;interrupts.c: 183: }
  2626                           ;interrupts.c: 184: forward();
  2627  001214  ECB4  F00E         	call	_forward	;wreg free
  2628                           
  2629                           ;interrupts.c: 185: }
  2630  001218  D06C               	goto	i2l1857
  2631  00121A                     i2l1823:
  2632                           
  2633                           ;interrupts.c: 187: else if ((sensorValue[0] > 360 && sensorValue[1] > 360 )
  2634                           ;interrupts.c: 188: && (sensorValue[3] > 360 && sensorValue[2] > 360) && RotateCounter <
      +                          = 0)
  2635  00121A  BE02               	btfsc	_sensorValue+1,7,c
  2636  00121C  D02B               	goto	i2l1839
  2637  00121E  0E69               	movlw	105
  2638  001220  5C01               	subwf	_sensorValue,w,c
  2639  001222  0E01               	movlw	1
  2640  001224  5802               	subwfb	_sensorValue+1,w,c
  2641  001226  B0D8               	btfsc	status,0,c
  2642  001228  BE04               	btfsc	_sensorValue+3,7,c
  2643  00122A  D024               	goto	i2l1839
  2644  00122C  0E69               	movlw	105
  2645  00122E  5C03               	subwf	_sensorValue+2,w,c
  2646  001230  0E01               	movlw	1
  2647  001232  5804               	subwfb	_sensorValue+3,w,c
  2648  001234  B0D8               	btfsc	status,0,c
  2649  001236  BE08               	btfsc	_sensorValue+7,7,c
  2650  001238  D01D               	goto	i2l1839
  2651  00123A  0E69               	movlw	105
  2652  00123C  5C07               	subwf	_sensorValue+6,w,c
  2653  00123E  0E01               	movlw	1
  2654  001240  5808               	subwfb	_sensorValue+7,w,c
  2655  001242  B0D8               	btfsc	status,0,c
  2656  001244  BE06               	btfsc	_sensorValue+5,7,c
  2657  001246  D016               	goto	i2l1839
  2658  001248  0E69               	movlw	105
  2659  00124A  5C05               	subwf	_sensorValue+4,w,c
  2660  00124C  0E01               	movlw	1
  2661  00124E  5806               	subwfb	_sensorValue+5,w,c
  2662  001250  A0D8               	btfss	status,0,c
  2663  001252  D010               	goto	i2l1839
  2664  001254  BE18               	btfsc	_RotateCounter+1,7,c
  2665  001256  D005               	goto	i2l1833
  2666  001258  5018               	movf	_RotateCounter+1,w,c
  2667  00125A  E10C               	bnz	i2l1839
  2668  00125C  0417               	decf	_RotateCounter,w,c
  2669  00125E  B0D8               	btfsc	status,0,c
  2670  001260  D009               	goto	i2l1839
  2671  001262                     i2l1833:
  2672                           
  2673                           ;interrupts.c: 189: {
  2674                           ;interrupts.c: 190: RotateCounter = 167*2;
  2675  001262  0E01               	movlw	1
  2676  001264  6E18               	movwf	_RotateCounter+1,c
  2677  001266  0E4E               	movlw	78
  2678  001268  6E17               	movwf	_RotateCounter,c
  2679                           
  2680                           ;interrupts.c: 191: rotate(rotatingSide);
  2681  00126A  502F               	movf	_rotatingSide,w,c
  2682  00126C  EC23  F00E         	call	_rotate
  2683                           
  2684                           ;interrupts.c: 192: justTurned = 1;
  2685  001270  0E01               	movlw	1
  2686  001272  D03D               	goto	L8
  2687  001274                     i2l1839:
  2688                           
  2689                           ;interrupts.c: 195: else if ((sensorValue[0] > 90 && sensorValue[1] > 91)) {
  2690  001274  BE02               	btfsc	_sensorValue+1,7,c
  2691  001276  D030               	goto	i2l1853
  2692  001278  5002               	movf	_sensorValue+1,w,c
  2693  00127A  E104               	bnz	i2u155_40
  2694  00127C  0E5B               	movlw	91
  2695  00127E  5C01               	subwf	_sensorValue,w,c
  2696  001280  A0D8               	btfss	status,0,c
  2697  001282  D02A               	goto	i2l1853
  2698  001284                     i2u155_40:
  2699  001284  BE04               	btfsc	_sensorValue+3,7,c
  2700  001286  D028               	goto	i2l1853
  2701  001288  5004               	movf	_sensorValue+3,w,c
  2702  00128A  E104               	bnz	i2u156_40
  2703  00128C  0E5C               	movlw	92
  2704  00128E  5C03               	subwf	_sensorValue+2,w,c
  2705  001290  A0D8               	btfss	status,0,c
  2706  001292  D022               	goto	i2l1853
  2707  001294                     i2u156_40:
  2708                           
  2709                           ;interrupts.c: 196: if (sensorValue[3] < 80 || sensorValue[2] < 120){
  2710  001294  BE08               	btfsc	_sensorValue+7,7,c
  2711  001296  D00E               	goto	i2l1847
  2712  001298  5008               	movf	_sensorValue+7,w,c
  2713  00129A  E104               	bnz	i2u157_40
  2714  00129C  0E50               	movlw	80
  2715  00129E  5C07               	subwf	_sensorValue+6,w,c
  2716  0012A0  A0D8               	btfss	status,0,c
  2717  0012A2  D008               	goto	i2l1847
  2718  0012A4                     i2u157_40:
  2719  0012A4  BE06               	btfsc	_sensorValue+5,7,c
  2720  0012A6  D006               	goto	i2l1847
  2721  0012A8  5006               	movf	_sensorValue+5,w,c
  2722  0012AA  E10B               	bnz	i2l1851
  2723  0012AC  0E78               	movlw	120
  2724  0012AE  5C05               	subwf	_sensorValue+4,w,c
  2725  0012B0  B0D8               	btfsc	status,0,c
  2726  0012B2  D007               	goto	i2l1851
  2727  0012B4                     i2l1847:
  2728                           
  2729                           ;interrupts.c: 197: ControllerCounter = 400;
  2730  0012B4  0E01               	movlw	1
  2731  0012B6  6E0A               	movwf	_ControllerCounter+1,c
  2732  0012B8  0E90               	movlw	144
  2733  0012BA  6E09               	movwf	_ControllerCounter,c
  2734                           
  2735                           ;interrupts.c: 198: KController();
  2736  0012BC  EC76  F00C         	call	_KController	;wreg free
  2737                           
  2738                           ;interrupts.c: 199: }
  2739  0012C0  D018               	goto	i2l1857
  2740  0012C2                     i2l1851:
  2741                           
  2742                           ;interrupts.c: 200: else {
  2743                           ;interrupts.c: 201: motorCounterUpdate(RIGHT,0);
  2744  0012C2  0E00               	movlw	0
  2745  0012C4  6E41               	movwf	motorCounterUpdate@reverse,c
  2746  0012C6  0E01               	movlw	1
  2747  0012C8  EC00  F00D         	call	_motorCounterUpdate
  2748                           
  2749                           ;interrupts.c: 202: motorCounterUpdate(LEFT,0);
  2750  0012CC  0E00               	movlw	0
  2751  0012CE  6E41               	movwf	motorCounterUpdate@reverse,c
  2752  0012D0  0E00               	movlw	0
  2753  0012D2  EC00  F00D         	call	_motorCounterUpdate
  2754                           
  2755                           ;interrupts.c: 203: }
  2756                           ;interrupts.c: 204: }
  2757  0012D6  D00D               	goto	i2l1857
  2758  0012D8                     i2l1853:
  2759                           
  2760                           ;interrupts.c: 205: else {
  2761                           ;interrupts.c: 206: motorCounterUpdate(RIGHT,0);
  2762  0012D8  0E00               	movlw	0
  2763  0012DA  6E41               	movwf	motorCounterUpdate@reverse,c
  2764  0012DC  0E01               	movlw	1
  2765  0012DE  EC00  F00D         	call	_motorCounterUpdate
  2766                           
  2767                           ;interrupts.c: 207: motorCounterUpdate(LEFT,0);
  2768  0012E2  0E00               	movlw	0
  2769  0012E4  6E41               	movwf	motorCounterUpdate@reverse,c
  2770  0012E6  0E00               	movlw	0
  2771  0012E8  EC00  F00D         	call	_motorCounterUpdate
  2772                           
  2773                           ;interrupts.c: 208: justTurned = 0;
  2774  0012EC  0E00               	movlw	0
  2775  0012EE                     L8:
  2776  0012EE  6E2E               	movwf	_justTurned,c
  2777  0012F0  D000               	goto	i2l1857
  2778  0012F2                     i2l1857:
  2779                           
  2780                           ;interrupts.c: 209: }
  2781                           ;interrupts.c: 210: moveMouse(merge(LMotorCounter,RMotorCounter));
  2782  0012F2  C02C  F041         	movff	_RMotorCounter,merge@right
  2783  0012F6  502B               	movf	_LMotorCounter,w,c
  2784  0012F8  ECE7  F00E         	call	_merge
  2785  0012FC  ECF4  F00E         	call	_moveMouse
  2786                           
  2787                           ;interrupts.c: 211: MotorDelayCounter = 0;
  2788  001300  0E00               	movlw	0
  2789  001302  6E12               	movwf	_MotorDelayCounter+1,c
  2790  001304  0E00               	movlw	0
  2791  001306  6E11               	movwf	_MotorDelayCounter,c
  2792  001308  D000               	goto	i2l1859
  2793  00130A                     i2l1859:
  2794                           
  2795                           ;interrupts.c: 212: }
  2796                           ;interrupts.c: 214: MotorDelayCounter++;
  2797  00130A  4A11               	infsnz	_MotorDelayCounter,f,c
  2798  00130C  2A12               	incf	_MotorDelayCounter+1,f,c
  2799                           
  2800                           ;interrupts.c: 215: INTCONbits.TMR0IF = 0;
  2801  00130E  94F2               	bcf	intcon,2,c	;volatile
  2802  001310  D000               	goto	i2l118
  2803  001312                     i2l118:
  2804  001312  C058  FFF5         	movff	??_high_isr+15,tablat
  2805  001316  C057  FFF8         	movff	??_high_isr+14,tblptru
  2806  00131A  C056  FFF7         	movff	??_high_isr+13,tblptrh
  2807  00131E  C055  FFF6         	movff	??_high_isr+12,tblptrl
  2808  001322  C054  FFF4         	movff	??_high_isr+11,prodh
  2809  001326  C053  FFF3         	movff	??_high_isr+10,prodl
  2810  00132A  C052  FFDA         	movff	??_high_isr+9,fsr2h
  2811  00132E  C051  FFD9         	movff	??_high_isr+8,fsr2l
  2812  001332  C050  FFE2         	movff	??_high_isr+7,fsr1h
  2813  001336  C04F  FFE1         	movff	??_high_isr+6,fsr1l
  2814  00133A  C04E  FFEA         	movff	??_high_isr+5,fsr0h
  2815  00133E  C04D  FFE9         	movff	??_high_isr+4,fsr0l
  2816  001342  C04C  FFFB         	movff	??_high_isr+3,pclatu
  2817  001346  C04B  FFFA         	movff	??_high_isr+2,pclath
  2818  00134A  0011               	retfie		f
  2819  00134C                     __end_of_high_isr:
  2820                           	opt stack 0
  2821                           pclatu	equ	0xFFB
  2822                           pclath	equ	0xFFA
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           intcon2	equ	0xFF1
  2831                           postinc0	equ	0xFEE
  2832                           fsr0h	equ	0xFEA
  2833                           fsr0l	equ	0xFE9
  2834                           wreg	equ	0xFE8
  2835                           fsr1h	equ	0xFE2
  2836                           fsr1l	equ	0xFE1
  2837                           bsr	equ	0xFE0
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _rotate *****************
  2845 ;; Defined at:
  2846 ;;		line 410 in file "interrupts.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  side            1    wreg     enum E4142
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  side            1   19[COMRAM] enum E4142
  2851 ;; Return value:  Size  Location     Type
  2852 ;;		None               void
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;Total ram usage:        1 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    1
  2867 ;; This function calls:
  2868 ;;		_motorCounterUpdate
  2869 ;; This function is called by:
  2870 ;;		_high_isr
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text13
  2875  001C46                     __ptext13:
  2876                           	opt stack 0
  2877  001C46                     _rotate:
  2878                           	opt stack 24
  2879                           
  2880                           ;incstack = 0
  2881                           ;rotate@side stored from wreg
  2882  001C46  6E43               	movwf	rotate@side,c
  2883                           
  2884                           ;interrupts.c: 412: if (side == LEFT){
  2885  001C48  5043               	movf	rotate@side,w,c
  2886  001C4A  A4D8               	btfss	status,2,c
  2887  001C4C  D00B               	goto	i2l1647
  2888                           
  2889                           ;interrupts.c: 413: motorCounterUpdate(RIGHT,0);
  2890  001C4E  0E00               	movlw	0
  2891  001C50  6E41               	movwf	motorCounterUpdate@reverse,c
  2892  001C52  0E01               	movlw	1
  2893  001C54  EC00  F00D         	call	_motorCounterUpdate
  2894                           
  2895                           ;interrupts.c: 414: motorCounterUpdate(LEFT,1);
  2896  001C58  0E01               	movlw	1
  2897  001C5A  6E41               	movwf	motorCounterUpdate@reverse,c
  2898  001C5C  0E00               	movlw	0
  2899  001C5E  EC00  F00D         	call	_motorCounterUpdate
  2900                           
  2901                           ;interrupts.c: 415: } else {
  2902  001C62  D00B               	goto	i2l1649
  2903  001C64                     i2l1647:
  2904                           
  2905                           ;interrupts.c: 416: motorCounterUpdate(LEFT,0);
  2906  001C64  0E00               	movlw	0
  2907  001C66  6E41               	movwf	motorCounterUpdate@reverse,c
  2908  001C68  0E00               	movlw	0
  2909  001C6A  EC00  F00D         	call	_motorCounterUpdate
  2910                           
  2911                           ;interrupts.c: 417: motorCounterUpdate(RIGHT,1);
  2912  001C6E  0E01               	movlw	1
  2913  001C70  6E41               	movwf	motorCounterUpdate@reverse,c
  2914  001C72  0E01               	movlw	1
  2915  001C74  EC00  F00D         	call	_motorCounterUpdate
  2916  001C78  D000               	goto	i2l1649
  2917  001C7A                     i2l1649:
  2918                           
  2919                           ;interrupts.c: 418: }
  2920                           ;interrupts.c: 419: RotateCounter--;
  2921  001C7A  0617               	decf	_RotateCounter,f,c
  2922  001C7C  A0D8               	btfss	status,0,c
  2923  001C7E  0618               	decf	_RotateCounter+1,f,c
  2924  001C80  0012               	return		;funcret
  2925  001C82                     __end_of_rotate:
  2926                           	opt stack 0
  2927                           pclatu	equ	0xFFB
  2928                           pclath	equ	0xFFA
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           intcon2	equ	0xFF1
  2937                           postinc0	equ	0xFEE
  2938                           fsr0h	equ	0xFEA
  2939                           fsr0l	equ	0xFE9
  2940                           wreg	equ	0xFE8
  2941                           fsr1h	equ	0xFE2
  2942                           fsr1l	equ	0xFE1
  2943                           bsr	equ	0xFE0
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _forward *****************
  2951 ;; Defined at:
  2952 ;;		line 455 in file "interrupts.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;		None
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;		None
  2957 ;; Return value:  Size  Location     Type
  2958 ;;		None               void
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;Total ram usage:        0 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    1
  2973 ;; This function calls:
  2974 ;;		_motorCounterUpdate
  2975 ;; This function is called by:
  2976 ;;		_high_isr
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text14
  2981  001D68                     __ptext14:
  2982                           	opt stack 0
  2983  001D68                     _forward:
  2984                           	opt stack 24
  2985                           
  2986                           ;interrupts.c: 457: motorCounterUpdate(RIGHT,0);
  2987                           
  2988                           ;incstack = 0
  2989  001D68  0E00               	movlw	0
  2990  001D6A  6E41               	movwf	motorCounterUpdate@reverse,c
  2991  001D6C  0E01               	movlw	1
  2992  001D6E  EC00  F00D         	call	_motorCounterUpdate
  2993                           
  2994                           ;interrupts.c: 458: motorCounterUpdate(LEFT,0);
  2995  001D72  0E00               	movlw	0
  2996  001D74  6E41               	movwf	motorCounterUpdate@reverse,c
  2997  001D76  0E00               	movlw	0
  2998  001D78  EC00  F00D         	call	_motorCounterUpdate
  2999                           
  3000                           ;interrupts.c: 459: ForwardCounter--;
  3001  001D7C  060D               	decf	_ForwardCounter,f,c
  3002  001D7E  A0D8               	btfss	status,0,c
  3003  001D80  060E               	decf	_ForwardCounter+1,f,c
  3004  001D82  0012               	return		;funcret
  3005  001D84                     __end_of_forward:
  3006                           	opt stack 0
  3007                           pclatu	equ	0xFFB
  3008                           pclath	equ	0xFFA
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           postinc0	equ	0xFEE
  3018                           fsr0h	equ	0xFEA
  3019                           fsr0l	equ	0xFE9
  3020                           wreg	equ	0xFE8
  3021                           fsr1h	equ	0xFE2
  3022                           fsr1l	equ	0xFE1
  3023                           bsr	equ	0xFE0
  3024                           postinc2	equ	0xFDE
  3025                           postdec2	equ	0xFDD
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _Reversing *****************
  3031 ;; Defined at:
  3032 ;;		line 434 in file "interrupts.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;Total ram usage:        0 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    1
  3053 ;; This function calls:
  3054 ;;		_motorCounterUpdate
  3055 ;; This function is called by:
  3056 ;;		_high_isr
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text15
  3061  001D84                     __ptext15:
  3062                           	opt stack 0
  3063  001D84                     _Reversing:
  3064                           	opt stack 24
  3065                           
  3066                           ;interrupts.c: 436: motorCounterUpdate(RIGHT,1);
  3067                           
  3068                           ;incstack = 0
  3069  001D84  0E01               	movlw	1
  3070  001D86  6E41               	movwf	motorCounterUpdate@reverse,c
  3071  001D88  0E01               	movlw	1
  3072  001D8A  EC00  F00D         	call	_motorCounterUpdate
  3073                           
  3074                           ;interrupts.c: 437: motorCounterUpdate(LEFT,1);
  3075  001D8E  0E01               	movlw	1
  3076  001D90  6E41               	movwf	motorCounterUpdate@reverse,c
  3077  001D92  0E00               	movlw	0
  3078  001D94  EC00  F00D         	call	_motorCounterUpdate
  3079                           
  3080                           ;interrupts.c: 438: ReverseCounter--;
  3081  001D98  0615               	decf	_ReverseCounter,f,c
  3082  001D9A  A0D8               	btfss	status,0,c
  3083  001D9C  0616               	decf	_ReverseCounter+1,f,c
  3084  001D9E  0012               	return		;funcret
  3085  001DA0                     __end_of_Reversing:
  3086                           	opt stack 0
  3087                           pclatu	equ	0xFFB
  3088                           pclath	equ	0xFFA
  3089                           tblptru	equ	0xFF8
  3090                           tblptrh	equ	0xFF7
  3091                           tblptrl	equ	0xFF6
  3092                           tablat	equ	0xFF5
  3093                           prodh	equ	0xFF4
  3094                           prodl	equ	0xFF3
  3095                           intcon	equ	0xFF2
  3096                           intcon2	equ	0xFF1
  3097                           postinc0	equ	0xFEE
  3098                           fsr0h	equ	0xFEA
  3099                           fsr0l	equ	0xFE9
  3100                           wreg	equ	0xFE8
  3101                           fsr1h	equ	0xFE2
  3102                           fsr1l	equ	0xFE1
  3103                           bsr	equ	0xFE0
  3104                           postinc2	equ	0xFDE
  3105                           postdec2	equ	0xFDD
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _KController *****************
  3111 ;; Defined at:
  3112 ;;		line 325 in file "interrupts.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  diff            2   23[COMRAM] int 
  3117 ;;  correctTo       1   22[COMRAM] enum E4142
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        5 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    1
  3134 ;; This function calls:
  3135 ;;		_ABS
  3136 ;;		_merge
  3137 ;;		_motorCounterUpdate
  3138 ;;		_moveMouse
  3139 ;; This function is called by:
  3140 ;;		_high_isr
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text16
  3145  0018EC                     __ptext16:
  3146                           	opt stack 0
  3147  0018EC                     _KController:
  3148                           	opt stack 24
  3149                           
  3150                           ;interrupts.c: 327: Side correctTo;
  3151                           ;interrupts.c: 328: int diff = 0;
  3152                           
  3153                           ;incstack = 0
  3154  0018EC  0E00               	movlw	0
  3155  0018EE  6E48               	movwf	KController@diff+1,c
  3156  0018F0  0E00               	movlw	0
  3157  0018F2  6E47               	movwf	KController@diff,c
  3158                           
  3159                           ;interrupts.c: 329: if(controllerSteps > 0){
  3160  0018F4  5059               	movf	_controllerSteps,w,c
  3161  0018F6  B4D8               	btfsc	status,2,c
  3162  0018F8  D00C               	goto	i2l1657
  3163                           
  3164                           ;interrupts.c: 330: motorCounterUpdate(RIGHT,0);
  3165  0018FA  0E00               	movlw	0
  3166  0018FC  6E41               	movwf	motorCounterUpdate@reverse,c
  3167  0018FE  0E01               	movlw	1
  3168  001900  EC00  F00D         	call	_motorCounterUpdate
  3169                           
  3170                           ;interrupts.c: 331: motorCounterUpdate(LEFT,0);
  3171  001904  0E00               	movlw	0
  3172  001906  6E41               	movwf	motorCounterUpdate@reverse,c
  3173  001908  0E00               	movlw	0
  3174  00190A  EC00  F00D         	call	_motorCounterUpdate
  3175                           
  3176                           ;interrupts.c: 332: controllerSteps--;
  3177  00190E  0659               	decf	_controllerSteps,f,c
  3178  001910  D000               	goto	i2l1657
  3179  001912                     i2l1657:
  3180                           
  3181                           ;interrupts.c: 333: }
  3182                           ;interrupts.c: 334: if((sensorValue[0] > 90 && sensorValue[1] > 91))
  3183  001912  BE02               	btfsc	_sensorValue+1,7,c
  3184  001914  D069               	goto	i2l1689
  3185  001916  5002               	movf	_sensorValue+1,w,c
  3186  001918  E104               	bnz	i2u114_40
  3187  00191A  0E5B               	movlw	91
  3188  00191C  5C01               	subwf	_sensorValue,w,c
  3189  00191E  A0D8               	btfss	status,0,c
  3190  001920  D063               	goto	i2l1689
  3191  001922                     i2u114_40:
  3192  001922  BE04               	btfsc	_sensorValue+3,7,c
  3193  001924  D061               	goto	i2l1689
  3194  001926  5004               	movf	_sensorValue+3,w,c
  3195  001928  E104               	bnz	i2u115_40
  3196  00192A  0E5C               	movlw	92
  3197  00192C  5C03               	subwf	_sensorValue+2,w,c
  3198  00192E  A0D8               	btfss	status,0,c
  3199  001930  D05B               	goto	i2l1689
  3200  001932                     i2u115_40:
  3201                           
  3202                           ;interrupts.c: 335: {
  3203                           ;interrupts.c: 336: diff = ABS(sensorValue[1] - sensorValue[0]);
  3204  001932  C001  F044         	movff	_sensorValue,??_KController
  3205  001936  C002  F045         	movff	_sensorValue+1,??_KController+1
  3206  00193A  1E44               	comf	??_KController,f,c
  3207  00193C  1E45               	comf	??_KController+1,f,c
  3208  00193E  4A44               	infsnz	??_KController,f,c
  3209  001940  2A45               	incf	??_KController+1,f,c
  3210  001942  5003               	movf	_sensorValue+2,w,c
  3211  001944  2444               	addwf	??_KController,w,c
  3212  001946  6E41               	movwf	ABS@x,c
  3213  001948  5004               	movf	_sensorValue+3,w,c
  3214  00194A  2045               	addwfc	??_KController+1,w,c
  3215  00194C  6E42               	movwf	ABS@x+1,c
  3216  00194E  ECD0  F00E         	call	_ABS	;wreg free
  3217  001952  C041  F047         	movff	?_ABS,KController@diff
  3218  001956  C042  F048         	movff	?_ABS+1,KController@diff+1
  3219                           
  3220                           ;interrupts.c: 338: if(sensorValue[0] > sensorValue[1])
  3221  00195A  5001               	movf	_sensorValue,w,c
  3222  00195C  5C03               	subwf	_sensorValue+2,w,c
  3223  00195E  5004               	movf	_sensorValue+3,w,c
  3224  001960  0A80               	xorlw	128
  3225  001962  6E44               	movwf	??_KController& (0+255),c
  3226  001964  5002               	movf	_sensorValue+1,w,c
  3227  001966  0A80               	xorlw	128
  3228  001968  5844               	subwfb	??_KController& (0+255),w,c
  3229  00196A  B0D8               	btfsc	status,0,c
  3230  00196C  D00F               	goto	i2l1671
  3231                           
  3232                           ;interrupts.c: 339: {
  3233                           ;interrupts.c: 340: correctTo = LEFT;
  3234  00196E  0E00               	movlw	0
  3235  001970  6E46               	movwf	KController@correctTo,c
  3236                           
  3237                           ;interrupts.c: 341: motorCounterUpdate(correctTo,0);
  3238  001972  0E00               	movlw	0
  3239  001974  6E41               	movwf	motorCounterUpdate@reverse,c
  3240  001976  5046               	movf	KController@correctTo,w,c
  3241  001978  EC00  F00D         	call	_motorCounterUpdate
  3242                           
  3243                           ;interrupts.c: 342: moveMouse(merge(LMotorCounter,RMotorCounter));
  3244  00197C  C02C  F041         	movff	_RMotorCounter,merge@right
  3245  001980  502B               	movf	_LMotorCounter,w,c
  3246  001982  ECE7  F00E         	call	_merge
  3247  001986  ECF4  F00E         	call	_moveMouse
  3248                           
  3249                           ;interrupts.c: 343: }
  3250  00198A  D00F               	goto	i2l1677
  3251  00198C                     i2l1671:
  3252                           
  3253                           ;interrupts.c: 344: else
  3254                           ;interrupts.c: 345: {
  3255                           ;interrupts.c: 346: correctTo = RIGHT;
  3256  00198C  0E01               	movlw	1
  3257  00198E  6E46               	movwf	KController@correctTo,c
  3258                           
  3259                           ;interrupts.c: 347: motorCounterUpdate(correctTo,0);
  3260  001990  0E00               	movlw	0
  3261  001992  6E41               	movwf	motorCounterUpdate@reverse,c
  3262  001994  5046               	movf	KController@correctTo,w,c
  3263  001996  EC00  F00D         	call	_motorCounterUpdate
  3264                           
  3265                           ;interrupts.c: 348: moveMouse(merge(LMotorCounter,RMotorCounter));
  3266  00199A  C02C  F041         	movff	_RMotorCounter,merge@right
  3267  00199E  502B               	movf	_LMotorCounter,w,c
  3268  0019A0  ECE7  F00E         	call	_merge
  3269  0019A4  ECF4  F00E         	call	_moveMouse
  3270  0019A8  D000               	goto	i2l1677
  3271  0019AA                     i2l1677:
  3272                           
  3273                           ;interrupts.c: 349: }
  3274                           ;interrupts.c: 351: if(diff > 60)
  3275  0019AA  BE48               	btfsc	KController@diff+1,7,c
  3276  0019AC  D008               	goto	i2l1681
  3277  0019AE  5048               	movf	KController@diff+1,w,c
  3278  0019B0  E104               	bnz	i2u117_40
  3279  0019B2  0E3D               	movlw	61
  3280  0019B4  5C47               	subwf	KController@diff,w,c
  3281  0019B6  A0D8               	btfss	status,0,c
  3282  0019B8  D002               	goto	i2l1681
  3283  0019BA                     i2u117_40:
  3284                           
  3285                           ;interrupts.c: 352: controllerSteps = 1;
  3286  0019BA  0E01               	movlw	1
  3287  0019BC  D013               	goto	L10
  3288  0019BE                     i2l1681:
  3289                           
  3290                           ;interrupts.c: 353: else if(diff <= 60 && diff > 20)
  3291  0019BE  BE48               	btfsc	KController@diff+1,7,c
  3292  0019C0  D006               	goto	i2l1683
  3293  0019C2  5048               	movf	KController@diff+1,w,c
  3294  0019C4  E10E               	bnz	i2l1687
  3295  0019C6  0E3D               	movlw	61
  3296  0019C8  5C47               	subwf	KController@diff,w,c
  3297  0019CA  B0D8               	btfsc	status,0,c
  3298  0019CC  D00A               	goto	i2l1687
  3299  0019CE                     i2l1683:
  3300  0019CE  BE48               	btfsc	KController@diff+1,7,c
  3301  0019D0  D008               	goto	i2l1687
  3302  0019D2  5048               	movf	KController@diff+1,w,c
  3303  0019D4  E104               	bnz	i2u119_40
  3304  0019D6  0E15               	movlw	21
  3305  0019D8  5C47               	subwf	KController@diff,w,c
  3306  0019DA  A0D8               	btfss	status,0,c
  3307  0019DC  D002               	goto	i2l1687
  3308  0019DE                     i2u119_40:
  3309                           
  3310                           ;interrupts.c: 354: controllerSteps = 5;
  3311  0019DE  0E05               	movlw	5
  3312  0019E0  D001               	goto	L10
  3313  0019E2                     i2l1687:
  3314                           
  3315                           ;interrupts.c: 355: else
  3316                           ;interrupts.c: 356: controllerSteps = 10;
  3317  0019E2  0E0A               	movlw	10
  3318  0019E4                     L10:
  3319  0019E4  6E59               	movwf	_controllerSteps,c
  3320                           
  3321                           ;interrupts.c: 357: }
  3322  0019E6  D00B               	goto	i2l181
  3323  0019E8                     i2l1689:
  3324                           
  3325                           ;interrupts.c: 358: else {
  3326                           ;interrupts.c: 359: motorCounterUpdate(RIGHT,0);
  3327  0019E8  0E00               	movlw	0
  3328  0019EA  6E41               	movwf	motorCounterUpdate@reverse,c
  3329  0019EC  0E01               	movlw	1
  3330  0019EE  EC00  F00D         	call	_motorCounterUpdate
  3331                           
  3332                           ;interrupts.c: 360: motorCounterUpdate(LEFT,0);
  3333  0019F2  0E00               	movlw	0
  3334  0019F4  6E41               	movwf	motorCounterUpdate@reverse,c
  3335  0019F6  0E00               	movlw	0
  3336  0019F8  EC00  F00D         	call	_motorCounterUpdate
  3337  0019FC  D000               	goto	i2l181
  3338  0019FE                     i2l181:
  3339  0019FE  0012               	return		;funcret
  3340  001A00                     __end_of_KController:
  3341                           	opt stack 0
  3342                           pclatu	equ	0xFFB
  3343                           pclath	equ	0xFFA
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           prodh	equ	0xFF4
  3349                           prodl	equ	0xFF3
  3350                           intcon	equ	0xFF2
  3351                           intcon2	equ	0xFF1
  3352                           postinc0	equ	0xFEE
  3353                           fsr0h	equ	0xFEA
  3354                           fsr0l	equ	0xFE9
  3355                           wreg	equ	0xFE8
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           bsr	equ	0xFE0
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _FrontController *****************
  3366 ;; Defined at:
  3367 ;;		line 364 in file "interrupts.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  diff2           2   23[COMRAM] int 
  3372 ;;  correctTo       1   22[COMRAM] enum E4142
  3373 ;; Return value:  Size  Location     Type
  3374 ;;		None               void
  3375 ;; Registers used:
  3376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;Total ram usage:        5 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    1
  3389 ;; This function calls:
  3390 ;;		_ABS
  3391 ;;		_merge
  3392 ;;		_motorCounterUpdate
  3393 ;;		_moveMouse
  3394 ;; This function is called by:
  3395 ;;		_high_isr
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text17
  3400  0017D6                     __ptext17:
  3401                           	opt stack 0
  3402  0017D6                     _FrontController:
  3403                           	opt stack 24
  3404                           
  3405                           ;interrupts.c: 365: int diff2 = ABS(sensorValue[3] - sensorValue[2]);
  3406                           
  3407                           ;incstack = 0
  3408  0017D6  EE20  F005         	lfsr	2,_sensorValue+4
  3409  0017DA  CFDE F044          	movff	postinc2,??_FrontController
  3410  0017DE  CFDD F045          	movff	postdec2,??_FrontController+1
  3411  0017E2  1E44               	comf	??_FrontController,f,c
  3412  0017E4  1E45               	comf	??_FrontController+1,f,c
  3413  0017E6  4A44               	infsnz	??_FrontController,f,c
  3414  0017E8  2A45               	incf	??_FrontController+1,f,c
  3415  0017EA  5007               	movf	_sensorValue+6,w,c
  3416  0017EC  2444               	addwf	??_FrontController,w,c
  3417  0017EE  6E41               	movwf	ABS@x,c
  3418  0017F0  5008               	movf	_sensorValue+7,w,c
  3419  0017F2  2045               	addwfc	??_FrontController+1,w,c
  3420  0017F4  6E42               	movwf	ABS@x+1,c
  3421  0017F6  ECD0  F00E         	call	_ABS	;wreg free
  3422  0017FA  C041  F047         	movff	?_ABS,FrontController@diff2
  3423  0017FE  C042  F048         	movff	?_ABS+1,FrontController@diff2+1
  3424                           
  3425                           ;interrupts.c: 366: Side correctTo;
  3426                           ;interrupts.c: 368: if(controllerSteps > 0)
  3427  001802  5059               	movf	_controllerSteps,w,c
  3428  001804  B4D8               	btfsc	status,2,c
  3429  001806  D02A               	goto	i2l1613
  3430                           
  3431                           ;interrupts.c: 369: {
  3432                           ;interrupts.c: 370: if (sensorValue[3] > 450){
  3433  001808  BE08               	btfsc	_sensorValue+7,7,c
  3434  00180A  D00C               	goto	i2l1601
  3435  00180C  0EC3               	movlw	195
  3436  00180E  5C07               	subwf	_sensorValue+6,w,c
  3437  001810  0E01               	movlw	1
  3438  001812  5808               	subwfb	_sensorValue+7,w,c
  3439  001814  A0D8               	btfss	status,0,c
  3440  001816  D006               	goto	i2l1601
  3441                           
  3442                           ;interrupts.c: 371: motorCounterUpdate(RIGHT,1);
  3443  001818  0E01               	movlw	1
  3444  00181A  6E41               	movwf	motorCounterUpdate@reverse,c
  3445  00181C  0E01               	movlw	1
  3446  00181E  EC00  F00D         	call	_motorCounterUpdate
  3447                           
  3448                           ;interrupts.c: 372: } else {
  3449  001822  D006               	goto	i2l1603
  3450  001824                     i2l1601:
  3451                           
  3452                           ;interrupts.c: 373: motorCounterUpdate(RIGHT,0);
  3453  001824  0E00               	movlw	0
  3454  001826  6E41               	movwf	motorCounterUpdate@reverse,c
  3455  001828  0E01               	movlw	1
  3456  00182A  EC00  F00D         	call	_motorCounterUpdate
  3457  00182E  D000               	goto	i2l1603
  3458  001830                     i2l1603:
  3459                           
  3460                           ;interrupts.c: 374: }
  3461                           ;interrupts.c: 375: if (sensorValue[2] > 450) {
  3462  001830  BE06               	btfsc	_sensorValue+5,7,c
  3463  001832  D00C               	goto	i2l1607
  3464  001834  0EC3               	movlw	195
  3465  001836  5C05               	subwf	_sensorValue+4,w,c
  3466  001838  0E01               	movlw	1
  3467  00183A  5806               	subwfb	_sensorValue+5,w,c
  3468  00183C  A0D8               	btfss	status,0,c
  3469  00183E  D006               	goto	i2l1607
  3470                           
  3471                           ;interrupts.c: 376: motorCounterUpdate(LEFT,1);
  3472  001840  0E01               	movlw	1
  3473  001842  6E41               	movwf	motorCounterUpdate@reverse,c
  3474  001844  0E00               	movlw	0
  3475  001846  EC00  F00D         	call	_motorCounterUpdate
  3476                           
  3477                           ;interrupts.c: 377: } else {
  3478  00184A  D006               	goto	i2l1609
  3479  00184C                     i2l1607:
  3480                           
  3481                           ;interrupts.c: 378: motorCounterUpdate(LEFT,0);
  3482  00184C  0E00               	movlw	0
  3483  00184E  6E41               	movwf	motorCounterUpdate@reverse,c
  3484  001850  0E00               	movlw	0
  3485  001852  EC00  F00D         	call	_motorCounterUpdate
  3486  001856  D000               	goto	i2l1609
  3487  001858                     i2l1609:
  3488                           
  3489                           ;interrupts.c: 379: }
  3490                           ;interrupts.c: 380: controllerSteps--;
  3491  001858  0659               	decf	_controllerSteps,f,c
  3492                           
  3493                           ;interrupts.c: 381: return;
  3494  00185A  D047               	goto	i2l189
  3495  00185C                     i2l1613:
  3496                           
  3497                           ;interrupts.c: 382: }
  3498                           ;interrupts.c: 384: if(sensorValue[2] > sensorValue[3])
  3499  00185C  5005               	movf	_sensorValue+4,w,c
  3500  00185E  5C07               	subwf	_sensorValue+6,w,c
  3501  001860  5008               	movf	_sensorValue+7,w,c
  3502  001862  0A80               	xorlw	128
  3503  001864  6E44               	movwf	??_FrontController& (0+255),c
  3504  001866  5006               	movf	_sensorValue+5,w,c
  3505  001868  0A80               	xorlw	128
  3506  00186A  5844               	subwfb	??_FrontController& (0+255),w,c
  3507  00186C  B0D8               	btfsc	status,0,c
  3508  00186E  D00F               	goto	i2l1621
  3509                           
  3510                           ;interrupts.c: 385: {
  3511                           ;interrupts.c: 387: correctTo = LEFT;
  3512  001870  0E00               	movlw	0
  3513  001872  6E46               	movwf	FrontController@correctTo,c
  3514                           
  3515                           ;interrupts.c: 388: motorCounterUpdate(correctTo,0);
  3516  001874  0E00               	movlw	0
  3517  001876  6E41               	movwf	motorCounterUpdate@reverse,c
  3518  001878  5046               	movf	FrontController@correctTo,w,c
  3519  00187A  EC00  F00D         	call	_motorCounterUpdate
  3520                           
  3521                           ;interrupts.c: 389: moveMouse(merge(LMotorCounter,RMotorCounter));
  3522  00187E  C02C  F041         	movff	_RMotorCounter,merge@right
  3523  001882  502B               	movf	_LMotorCounter,w,c
  3524  001884  ECE7  F00E         	call	_merge
  3525  001888  ECF4  F00E         	call	_moveMouse
  3526                           
  3527                           ;interrupts.c: 390: }
  3528  00188C  D00F               	goto	i2l1627
  3529  00188E                     i2l1621:
  3530                           
  3531                           ;interrupts.c: 391: else
  3532                           ;interrupts.c: 392: {
  3533                           ;interrupts.c: 394: correctTo = RIGHT;
  3534  00188E  0E01               	movlw	1
  3535  001890  6E46               	movwf	FrontController@correctTo,c
  3536                           
  3537                           ;interrupts.c: 395: motorCounterUpdate(correctTo,0);
  3538  001892  0E00               	movlw	0
  3539  001894  6E41               	movwf	motorCounterUpdate@reverse,c
  3540  001896  5046               	movf	FrontController@correctTo,w,c
  3541  001898  EC00  F00D         	call	_motorCounterUpdate
  3542                           
  3543                           ;interrupts.c: 396: moveMouse(merge(LMotorCounter,RMotorCounter));
  3544  00189C  C02C  F041         	movff	_RMotorCounter,merge@right
  3545  0018A0  502B               	movf	_LMotorCounter,w,c
  3546  0018A2  ECE7  F00E         	call	_merge
  3547  0018A6  ECF4  F00E         	call	_moveMouse
  3548  0018AA  D000               	goto	i2l1627
  3549  0018AC                     i2l1627:
  3550                           
  3551                           ;interrupts.c: 397: }
  3552                           ;interrupts.c: 399: if(diff2 > 60)
  3553  0018AC  BE48               	btfsc	FrontController@diff2+1,7,c
  3554  0018AE  D008               	goto	i2l1631
  3555  0018B0  5048               	movf	FrontController@diff2+1,w,c
  3556  0018B2  E104               	bnz	i2u109_40
  3557  0018B4  0E3D               	movlw	61
  3558  0018B6  5C47               	subwf	FrontController@diff2,w,c
  3559  0018B8  A0D8               	btfss	status,0,c
  3560  0018BA  D002               	goto	i2l1631
  3561  0018BC                     i2u109_40:
  3562                           
  3563                           ;interrupts.c: 400: controllerSteps = 1;
  3564  0018BC  0E01               	movlw	1
  3565  0018BE  D013               	goto	L12
  3566  0018C0                     i2l1631:
  3567                           
  3568                           ;interrupts.c: 401: else if(diff2 <= 60 && diff2 > 20)
  3569  0018C0  BE48               	btfsc	FrontController@diff2+1,7,c
  3570  0018C2  D006               	goto	i2l1633
  3571  0018C4  5048               	movf	FrontController@diff2+1,w,c
  3572  0018C6  E10E               	bnz	i2l1637
  3573  0018C8  0E3D               	movlw	61
  3574  0018CA  5C47               	subwf	FrontController@diff2,w,c
  3575  0018CC  B0D8               	btfsc	status,0,c
  3576  0018CE  D00A               	goto	i2l1637
  3577  0018D0                     i2l1633:
  3578  0018D0  BE48               	btfsc	FrontController@diff2+1,7,c
  3579  0018D2  D008               	goto	i2l1637
  3580  0018D4  5048               	movf	FrontController@diff2+1,w,c
  3581  0018D6  E104               	bnz	i2u111_40
  3582  0018D8  0E15               	movlw	21
  3583  0018DA  5C47               	subwf	FrontController@diff2,w,c
  3584  0018DC  A0D8               	btfss	status,0,c
  3585  0018DE  D002               	goto	i2l1637
  3586  0018E0                     i2u111_40:
  3587                           
  3588                           ;interrupts.c: 402: controllerSteps = 5;
  3589  0018E0  0E05               	movlw	5
  3590  0018E2  D001               	goto	L12
  3591  0018E4                     i2l1637:
  3592                           
  3593                           ;interrupts.c: 403: else
  3594                           ;interrupts.c: 404: controllerSteps = 10;
  3595  0018E4  0E0A               	movlw	10
  3596  0018E6                     L12:
  3597  0018E6  6E59               	movwf	_controllerSteps,c
  3598  0018E8  D000               	goto	i2l189
  3599  0018EA                     i2l189:
  3600  0018EA  0012               	return		;funcret
  3601  0018EC                     __end_of_FrontController:
  3602                           	opt stack 0
  3603                           pclatu	equ	0xFFB
  3604                           pclath	equ	0xFFA
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           intcon2	equ	0xFF1
  3613                           postinc0	equ	0xFEE
  3614                           fsr0h	equ	0xFEA
  3615                           fsr0l	equ	0xFE9
  3616                           wreg	equ	0xFE8
  3617                           fsr1h	equ	0xFE2
  3618                           fsr1l	equ	0xFE1
  3619                           bsr	equ	0xFE0
  3620                           postinc2	equ	0xFDE
  3621                           postdec2	equ	0xFDD
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _moveMouse *****************
  3627 ;; Defined at:
  3628 ;;		line 312 in file "interrupts.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  action          1    wreg     unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  action          1   17[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;		None               void
  3635 ;; Registers used:
  3636 ;;		wreg
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;Total ram usage:        1 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_high_isr
  3652 ;;		_KController
  3653 ;;		_FrontController
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text18
  3658  001DE8                     __ptext18:
  3659                           	opt stack 0
  3660  001DE8                     _moveMouse:
  3661                           	opt stack 25
  3662                           
  3663                           ;incstack = 0
  3664                           ;moveMouse@action stored from wreg
  3665  001DE8  6E41               	movwf	moveMouse@action,c
  3666                           
  3667                           ;interrupts.c: 314: LATC = action;
  3668  001DEA  C041  FF8B         	movff	moveMouse@action,3979	;volatile
  3669  001DEE  0012               	return		;funcret
  3670  001DF0                     __end_of_moveMouse:
  3671                           	opt stack 0
  3672                           pclatu	equ	0xFFB
  3673                           pclath	equ	0xFFA
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon2	equ	0xFF1
  3682                           postinc0	equ	0xFEE
  3683                           fsr0h	equ	0xFEA
  3684                           fsr0l	equ	0xFE9
  3685                           wreg	equ	0xFE8
  3686                           fsr1h	equ	0xFE2
  3687                           fsr1l	equ	0xFE1
  3688                           bsr	equ	0xFE0
  3689                           postinc2	equ	0xFDE
  3690                           postdec2	equ	0xFDD
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _motorCounterUpdate *****************
  3696 ;; Defined at:
  3697 ;;		line 260 in file "interrupts.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  side            1    wreg     enum E4142
  3700 ;;  reverse         1   17[COMRAM] unsigned char 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  side            1   18[COMRAM] enum E4142
  3703 ;; Return value:  Size  Location     Type
  3704 ;;		None               void
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3712 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;Total ram usage:        2 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		_high_isr
  3722 ;;		_KController
  3723 ;;		_FrontController
  3724 ;;		_rotate
  3725 ;;		_Reversing
  3726 ;;		_forward
  3727 ;;		_smoothTurn
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text19
  3732  001A00                     __ptext19:
  3733                           	opt stack 0
  3734  001A00                     _motorCounterUpdate:
  3735                           	opt stack 24
  3736                           
  3737                           ;incstack = 0
  3738                           ;motorCounterUpdate@side stored from wreg
  3739  001A00  6E42               	movwf	motorCounterUpdate@side,c
  3740                           
  3741                           ;interrupts.c: 262: if(side == LEFT && reverse == 1)
  3742  001A02  5042               	movf	motorCounterUpdate@side,w,c
  3743  001A04  A4D8               	btfss	status,2,c
  3744  001A06  D01B               	goto	i2l1485
  3745  001A08  0441               	decf	motorCounterUpdate@reverse,w,c
  3746  001A0A  B4D8               	btfsc	status,2,c
  3747  001A0C  D00B               	goto	i2l1483
  3748  001A0E  D017               	goto	i2l1485
  3749                           
  3750                           ;interrupts.c: 263: {
  3751                           ;interrupts.c: 264: switch(LMotorCounter)
  3752  001A10  D009               	goto	i2l1483
  3753  001A12                     i2l1473:
  3754  001A12  0E02               	movlw	2
  3755  001A14  D004               	goto	L15
  3756  001A16                     i2l1475:
  3757  001A16  0E04               	movlw	4
  3758  001A18  D002               	goto	L15
  3759                           
  3760                           ;interrupts.c: 268: case 0b00000100: LMotorCounter = 0b00001000; break;
  3761  001A1A  D03E               	goto	i2l1517
  3762                           
  3763                           ;interrupts.c: 269: case 0b00001000: LMotorCounter = 0b00000001; break;
  3764  001A1C  D039               	goto	i2l1511
  3765  001A1E                     L15:
  3766  001A1E  6E2B               	movwf	_LMotorCounter,c
  3767  001A20  D068               	goto	i2l159
  3768                           
  3769                           ;interrupts.c: 270: default: LMotorCounter = 0b00000001;
  3770  001A22  D036               	goto	i2l1511
  3771  001A24                     i2l1483:
  3772  001A24  502B               	movf	_LMotorCounter,w,c
  3773                           
  3774                           ; Switch size 1, requested type "space"
  3775                           ; Number of cases is 4, Range of values is 1 to 8
  3776                           ; switch strategies available:
  3777                           ; Name         Instructions Cycles
  3778                           ; simple_byte           13     7 (average)
  3779                           ;	Chosen strategy is simple_byte
  3780  001A26  0A01               	xorlw	1	; case 1
  3781  001A28  B4D8               	btfsc	status,2,c
  3782  001A2A  D7F3               	goto	i2l1473
  3783  001A2C  0A03               	xorlw	3	; case 2
  3784  001A2E  B4D8               	btfsc	status,2,c
  3785  001A30  D7F2               	goto	i2l1475
  3786  001A32  0A06               	xorlw	6	; case 4
  3787  001A34  B4D8               	btfsc	status,2,c
  3788  001A36  D030               	goto	i2l1517
  3789  001A38  0A0C               	xorlw	12	; case 8
  3790  001A3A  D02A               	goto	i2l1511
  3791                           
  3792                           ;interrupts.c: 272: } else if(side == RIGHT && reverse == 1)
  3793  001A3C  D05A               	goto	i2l159
  3794  001A3E                     i2l1485:
  3795  001A3E  0442               	decf	motorCounterUpdate@side,w,c
  3796  001A40  A4D8               	btfss	status,2,c
  3797  001A42  D01D               	goto	i2l1503
  3798  001A44  0441               	decf	motorCounterUpdate@reverse,w,c
  3799  001A46  B4D8               	btfsc	status,2,c
  3800  001A48  D00B               	goto	i2l1501
  3801  001A4A  D019               	goto	i2l1503
  3802                           
  3803                           ;interrupts.c: 273: {
  3804                           ;interrupts.c: 274: switch(RMotorCounter)
  3805  001A4C  D009               	goto	i2l1501
  3806  001A4E                     i2l1491:
  3807  001A4E  0E08               	movlw	8
  3808  001A50  D040               	goto	L23
  3809  001A52                     i2l1493:
  3810  001A52  0E01               	movlw	1
  3811  001A54  D03E               	goto	L23
  3812  001A56                     i2l1495:
  3813  001A56  0E02               	movlw	2
  3814  001A58  D03C               	goto	L23
  3815  001A5A                     i2l1497:
  3816  001A5A  0E04               	movlw	4
  3817  001A5C  D03A               	goto	L23
  3818                           
  3819                           ;interrupts.c: 280: default: RMotorCounter = 0b00001000;
  3820  001A5E  D7F7               	goto	i2l1491
  3821  001A60                     i2l1501:
  3822  001A60  502C               	movf	_RMotorCounter,w,c
  3823                           
  3824                           ; Switch size 1, requested type "space"
  3825                           ; Number of cases is 4, Range of values is 1 to 8
  3826                           ; switch strategies available:
  3827                           ; Name         Instructions Cycles
  3828                           ; simple_byte           13     7 (average)
  3829                           ;	Chosen strategy is simple_byte
  3830  001A62  0A01               	xorlw	1	; case 1
  3831  001A64  B4D8               	btfsc	status,2,c
  3832  001A66  D7F3               	goto	i2l1491
  3833  001A68  0A03               	xorlw	3	; case 2
  3834  001A6A  B4D8               	btfsc	status,2,c
  3835  001A6C  D7F2               	goto	i2l1493
  3836  001A6E  0A06               	xorlw	6	; case 4
  3837  001A70  B4D8               	btfsc	status,2,c
  3838  001A72  D7F1               	goto	i2l1495
  3839  001A74  0A0C               	xorlw	12	; case 8
  3840  001A76  B4D8               	btfsc	status,2,c
  3841  001A78  D7F0               	goto	i2l1497
  3842  001A7A  D7E9               	goto	i2l1491
  3843                           
  3844                           ;interrupts.c: 282: } else if(side == LEFT && reverse == 0)
  3845  001A7C  D03A               	goto	i2l159
  3846  001A7E                     i2l1503:
  3847  001A7E  5042               	movf	motorCounterUpdate@side,w,c
  3848  001A80  A4D8               	btfss	status,2,c
  3849  001A82  D01B               	goto	i2l1521
  3850  001A84  5041               	movf	motorCounterUpdate@reverse,w,c
  3851  001A86  B4D8               	btfsc	status,2,c
  3852  001A88  D009               	goto	i2l1519
  3853  001A8A  D017               	goto	i2l1521
  3854                           
  3855                           ;interrupts.c: 283: {
  3856                           ;interrupts.c: 284: switch(LMotorCounter)
  3857  001A8C  D007               	goto	i2l1519
  3858                           
  3859                           ;interrupts.c: 285: {
  3860                           ;interrupts.c: 286: case 0b00000001: LMotorCounter = 0b00001000; break;
  3861  001A8E  D004               	goto	i2l1517
  3862  001A90                     i2l1511:
  3863  001A90  0E01               	movlw	1
  3864  001A92  D7C5               	goto	L15
  3865                           
  3866                           ;interrupts.c: 288: case 0b00000100: LMotorCounter = 0b00000010; break;
  3867  001A94  D7BE               	goto	i2l1473
  3868                           
  3869                           ;interrupts.c: 289: case 0b00001000: LMotorCounter = 0b00000100; break;
  3870  001A96  D7BF               	goto	i2l1475
  3871  001A98                     i2l1517:
  3872  001A98  0E08               	movlw	8
  3873  001A9A  D7C1               	goto	L15
  3874  001A9C                     i2l1519:
  3875  001A9C  502B               	movf	_LMotorCounter,w,c
  3876                           
  3877                           ; Switch size 1, requested type "space"
  3878                           ; Number of cases is 4, Range of values is 1 to 8
  3879                           ; switch strategies available:
  3880                           ; Name         Instructions Cycles
  3881                           ; simple_byte           13     7 (average)
  3882                           ;	Chosen strategy is simple_byte
  3883  001A9E  0A01               	xorlw	1	; case 1
  3884  001AA0  B4D8               	btfsc	status,2,c
  3885  001AA2  D7FA               	goto	i2l1517
  3886  001AA4  0A03               	xorlw	3	; case 2
  3887  001AA6  B4D8               	btfsc	status,2,c
  3888  001AA8  D7F3               	goto	i2l1511
  3889  001AAA  0A06               	xorlw	6	; case 4
  3890  001AAC  B4D8               	btfsc	status,2,c
  3891  001AAE  D7B1               	goto	i2l1473
  3892  001AB0  0A0C               	xorlw	12	; case 8
  3893  001AB2  B4D8               	btfsc	status,2,c
  3894  001AB4  D7B0               	goto	i2l1475
  3895  001AB6  D7F0               	goto	i2l1517
  3896                           
  3897                           ;interrupts.c: 292: } else if(side == RIGHT && reverse == 0)
  3898  001AB8  D01C               	goto	i2l159
  3899  001ABA                     i2l1521:
  3900  001ABA  0442               	decf	motorCounterUpdate@side,w,c
  3901  001ABC  A4D8               	btfss	status,2,c
  3902  001ABE  D019               	goto	i2l159
  3903  001AC0  5041               	movf	motorCounterUpdate@reverse,w,c
  3904  001AC2  B4D8               	btfsc	status,2,c
  3905  001AC4  D009               	goto	i2l1537
  3906  001AC6  D015               	goto	i2l159
  3907                           
  3908                           ;interrupts.c: 293: {
  3909                           ;interrupts.c: 294: switch(RMotorCounter)
  3910  001AC8  D007               	goto	i2l1537
  3911                           
  3912                           ;interrupts.c: 295: {
  3913                           ;interrupts.c: 296: case 0b00000001: RMotorCounter = 0b00000010; break;
  3914  001ACA  D7C5               	goto	i2l1495
  3915                           
  3916                           ;interrupts.c: 297: case 0b00000010: RMotorCounter = 0b00000100; break;
  3917  001ACC  D7C6               	goto	i2l1497
  3918                           
  3919                           ;interrupts.c: 298: case 0b00000100: RMotorCounter = 0b00001000; break;
  3920  001ACE  D7BF               	goto	i2l1491
  3921                           
  3922                           ;interrupts.c: 299: case 0b00001000: RMotorCounter = 0b00000001; break;
  3923  001AD0  D7C0               	goto	i2l1493
  3924  001AD2                     L23:
  3925  001AD2  6E2C               	movwf	_RMotorCounter,c
  3926  001AD4  D00E               	goto	i2l159
  3927                           
  3928                           ;interrupts.c: 300: default: RMotorCounter = 0b00000001;
  3929  001AD6  D7BD               	goto	i2l1493
  3930  001AD8                     i2l1537:
  3931  001AD8  502C               	movf	_RMotorCounter,w,c
  3932                           
  3933                           ; Switch size 1, requested type "space"
  3934                           ; Number of cases is 4, Range of values is 1 to 8
  3935                           ; switch strategies available:
  3936                           ; Name         Instructions Cycles
  3937                           ; simple_byte           13     7 (average)
  3938                           ;	Chosen strategy is simple_byte
  3939  001ADA  0A01               	xorlw	1	; case 1
  3940  001ADC  B4D8               	btfsc	status,2,c
  3941  001ADE  D7BB               	goto	i2l1495
  3942  001AE0  0A03               	xorlw	3	; case 2
  3943  001AE2  B4D8               	btfsc	status,2,c
  3944  001AE4  D7BA               	goto	i2l1497
  3945  001AE6  0A06               	xorlw	6	; case 4
  3946  001AE8  B4D8               	btfsc	status,2,c
  3947  001AEA  D7B1               	goto	i2l1491
  3948  001AEC  0A0C               	xorlw	12	; case 8
  3949  001AEE  D7B1               	goto	i2l1493
  3950  001AF0  D000               	goto	i2l159
  3951  001AF2                     i2l159:
  3952  001AF2  0012               	return		;funcret
  3953  001AF4                     __end_of_motorCounterUpdate:
  3954                           	opt stack 0
  3955                           pclatu	equ	0xFFB
  3956                           pclath	equ	0xFFA
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           postinc0	equ	0xFEE
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           fsr1h	equ	0xFE2
  3970                           fsr1l	equ	0xFE1
  3971                           bsr	equ	0xFE0
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _merge *****************
  3979 ;; Defined at:
  3980 ;;		line 305 in file "interrupts.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  left            1    wreg     unsigned char 
  3983 ;;  right           1   17[COMRAM] unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  left            1   18[COMRAM] unsigned char 
  3986 ;;  merged          1   19[COMRAM] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      unsigned char 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3996 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;Total ram usage:        3 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_high_isr
  4006 ;;		_KController
  4007 ;;		_FrontController
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text20
  4012  001DCE                     __ptext20:
  4013                           	opt stack 0
  4014  001DCE                     _merge:
  4015                           	opt stack 25
  4016                           
  4017                           ;incstack = 0
  4018                           ;merge@left stored from wreg
  4019  001DCE  6E42               	movwf	merge@left,c
  4020                           
  4021                           ;interrupts.c: 307: unsigned char merged;
  4022                           ;interrupts.c: 308: merged = left + (right << 4);
  4023  001DD0  3841               	swapf	merge@right,w,c
  4024  001DD2  0BF0               	andlw	240
  4025  001DD4  2442               	addwf	merge@left,w,c
  4026  001DD6  6E43               	movwf	merge@merged,c
  4027                           
  4028                           ;interrupts.c: 309: return merged;
  4029  001DD8  5043               	movf	merge@merged,w,c
  4030  001DDA  D000               	goto	i2l162
  4031  001DDC                     i2l162:
  4032  001DDC  0012               	return		;funcret
  4033  001DDE                     __end_of_merge:
  4034                           	opt stack 0
  4035                           pclatu	equ	0xFFB
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           intcon2	equ	0xFF1
  4045                           postinc0	equ	0xFEE
  4046                           fsr0h	equ	0xFEA
  4047                           fsr0l	equ	0xFE9
  4048                           wreg	equ	0xFE8
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           bsr	equ	0xFE0
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _ABS *****************
  4059 ;; Defined at:
  4060 ;;		line 318 in file "interrupts.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  x               2   17[COMRAM] int 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  2   17[COMRAM] int 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:        2 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_high_isr
  4084 ;;		_KController
  4085 ;;		_FrontController
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text21
  4090  001DA0                     __ptext21:
  4091                           	opt stack 0
  4092  001DA0                     _ABS:
  4093                           	opt stack 24
  4094                           
  4095                           ;interrupts.c: 320: if(x<0) x = -x;
  4096                           
  4097                           ;incstack = 0
  4098  001DA0  AE42               	btfss	ABS@x+1,7,c
  4099  001DA2  D005               	goto	i2l1543
  4100  001DA4  6C41               	negf	ABS@x,c
  4101  001DA6  1E42               	comf	ABS@x+1,f,c
  4102  001DA8  B0D8               	btfsc	status,0,c
  4103  001DAA  2A42               	incf	ABS@x+1,f,c
  4104  001DAC  D000               	goto	i2l1543
  4105  001DAE                     i2l1543:
  4106                           
  4107                           ;interrupts.c: 321: return x;
  4108  001DAE  C041  F041         	movff	ABS@x,?_ABS
  4109  001DB2  C042  F042         	movff	ABS@x+1,?_ABS+1
  4110  001DB6  D000               	goto	i2l169
  4111  001DB8                     i2l169:
  4112  001DB8  0012               	return		;funcret
  4113  001DBA                     __end_of_ABS:
  4114                           	opt stack 0
  4115                           pclatu	equ	0xFFB
  4116                           pclath	equ	0xFFA
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           intcon2	equ	0xFF1
  4125                           postinc0	equ	0xFEE
  4126                           fsr0h	equ	0xFEA
  4127                           fsr0l	equ	0xFE9
  4128                           wreg	equ	0xFE8
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           bsr	equ	0xFE0
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           pclatu	equ	0xFFB
  4138                           pclath	equ	0xFFA
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           postinc0	equ	0xFEE
  4148                           fsr0h	equ	0xFEA
  4149                           fsr0l	equ	0xFE9
  4150                           wreg	equ	0xFE8
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           bsr	equ	0xFE0
  4154                           postinc2	equ	0xFDE
  4155                           postdec2	equ	0xFDD
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160                           	psect	rparam
  4161  0000                     pclatu	equ	0xFFB
  4162                           pclath	equ	0xFFA
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           prodh	equ	0xFF4
  4168                           prodl	equ	0xFF3
  4169                           intcon	equ	0xFF2
  4170                           intcon2	equ	0xFF1
  4171                           postinc0	equ	0xFEE
  4172                           fsr0h	equ	0xFEA
  4173                           fsr0l	equ	0xFE9
  4174                           wreg	equ	0xFE8
  4175                           fsr1h	equ	0xFE2
  4176                           fsr1l	equ	0xFE1
  4177                           bsr	equ	0xFE0
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      89
    BANK0           128    115     115
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_FrontController
    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge
    _FrontController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4976
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             25 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             11 BANK0     14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            16    16      0   11928
                                             25 COMRAM    16    16      0
                                _ABS
                    _FrontController
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1682
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1660
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1660
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2347
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _FrontController                                      5     5      0    2346
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1660
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     226
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _ABS
   _FrontController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     73      73       5       89.8%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      59       1       70.1%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CC       6        0.0%
DATA                 0      0      CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 01 15:58:15 2015

                ___awdiv@sign 0085                            bsr 000FE0           ___wmul@multiplicand 0082  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l302 1D66                           l311 15BE                           l332 1D18  
                         l333 1D20                           l318 1620                           l328 1CE4  
                         l336 1CB8                           l329 1CEC                           l288 1BF2  
                         l297 1D52                           l529 1BC2                           _ABS 1DA0  
                __CFG_CPB$OFF 000000                           _MAX 1CEE                           _MIN 1CBA  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1D68                  _rotatingSide 002F  
                         wreg 000FE8                          ABS@x 0041                          ?_ABS 0041  
                        ?_MAX 0086                          ?_MIN 0086                          MAX@a 0086  
                        MAX@b 0088                          MIN@a 0086                          MIN@b 0088  
                __CFG_WDT$OFF 000000                          l2013 15E4                          l2031 1732  
                        l2033 1798                          l2041 17C4                          l2019 1608  
                        l2029 16CC                          l2037 17AE                          l2047 1DC4  
                        l1903 1B12                          l1915 1B48                          l1931 1BA2  
                        l1941 1BDA                          l1917 1B56                          l1909 1B2A  
                        l1935 1BB8                          l1927 1B92                          l1919 1B60  
                        l1953 1D60                          l1961 1370                          l1971 1402  
                        l1973 1520                          l1967 1394                          l1977 1536  
                        _LATC 000F8B                          u1720 136E                          u1730 1392  
                        u1805 162E                          u1770 15E2                          u1780 1606  
                        u1857 1BE2                          _main 1DBA                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
        FrontController@diff2 0047                 __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 008B  
               __CFG_MCLRE$ON 000000                  ___param_bank 000010               __end_of_InitApp 1C46  
                       ??_ABS 0043                         ??_MAX 008A                         ??_MIN 008A  
  __size_of_sensorComputation 0274                         ?_main 0030               __end_of___awdiv 1BC4  
                       _T0CON 000FD5               ___awdiv@divisor 0082                         i2l118 1312  
                       i2l162 1DDC                         i2l181 19FE                         i2l159 1AF2  
                       i2l169 1DB8                         i2l189 18EA               ___awdiv@counter 0084  
                       _TRISC 000F94           _ConfigureOscillator 1DDE                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _delay 1BC4                         _merge 1DCE  
             __end_of_forward 1D84               __end_of_low_isr 00A2                         tablat 000FF5  
                       status 000FD8          ?_ConfigureOscillator 0030             _ControllerCounter 0009  
             __initialization 1D22                  __end_of_main 1DCE                        ??_main 00F3  
               __activetblptr 000002                        ?_delay 0080                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0041  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0080  
    __size_of_FrontController 0116                        i2l1501 1A60                        i2l1511 1A90  
                      i2l1503 1A7E                        i2l1521 1ABA                        i2l1601 1824  
                      i2l1603 1830                        i2l1517 1A98                        i2l1621 188E  
                      i2l1613 185C                        i2l1543 1DAE                        i2l1519 1A9C  
                      i2l1631 18C0                        i2l1607 184C                        i2l1537 1AD8  
                      i2l1473 1A12                        i2l1633 18D0                        i2l1609 1858  
                      i2l1491 1A4E                        i2l1475 1A16                        i2l1483 1A24  
                      i2l1627 18AC                        i2l1811 11DE                        i2l1493 1A52  
                      i2l1485 1A3E                        i2l1637 18E4                        i2l1821 1214  
                      i2l1805 11BE                        i2l1495 1A56                        i2l1671 198C  
                      i2l1647 1C64                        i2l1823 121A                        i2l1807 11C8  
                      i2l1497 1A5A                        i2l1681 19BE                        i2l1657 1912  
                      i2l1649 1C7A                        i2l1833 1262                        i2l1809 11CE  
                      i2l1761 107E                        i2l1683 19CE                        i2l1851 12C2  
                      i2l1819 120A                        i2l1763 10B6                        i2l1771 10E8  
                      i2l1677 19AA                        i2l1853 12D8                        i2l1781 112A  
                      i2l1765 10C0                        i2l1757 106A                        i2l1687 19E2  
                      i2l1847 12B4                        i2l1839 1274                        i2l1791 1162  
                      i2l1775 10FC                        i2l1689 19E8                        i2l1785 1138  
                      i2l1857 12F2                        i2l1779 111A                        i2l1787 1140  
                      i2l1859 130A                        i2l1797 1192                        i2l1799 11A2  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 0085  
       ??_ConfigureOscillator 0080                   merge@merged 0043                __CFG_XINST$OFF 000000  
          sensorComputation@i 0095            sensorComputation@j 0097              __end_of_high_isr 134C  
                      ___wmul 1C82                     ??___awdiv 0084                __CFG_STVREN$ON 000000  
                      _errorD 0023                        _errorP 0025                        delay@x 0083  
                      clear_0 1D28              ___awdiv@quotient 0086                        _rotate 1C46  
          __size_of_Reversing 001C                  __pdataCOMRAM 0059                     ??_forward 0043  
                __mediumconst 0000                     ??_low_isr 0030                _ReverseCounter 0015  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0080       __end_of__initialization 1D40               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                  ?_KController 0030                __pcstackCOMRAM 0030  
               __end_of_delay 1C08                    _TurnedLeft 001D               moveMouse@action 0041  
               __end_of_merge 1DDE          KController@correctTo 0046    __end_of_motorCounterUpdate 1AF4  
              _ForwardCounter 000D                       ??_delay 0082                       ??_merge 0042  
          _AlgorithmSelection 1D4A                  _LTurnCounter 000F             __end_of_Reversing 1DA0  
           ??_FrontController 0044                    _delay_time 0021             _MotorDelayCounter 0011  
         ?_AlgorithmSelection 0030                       ?___wmul 0080            __size_of_moveMouse 0008  
                     ?_rotate 0030                       _INTCON2 000FF1                       _OSCTUNE 000F9B  
        ??_AlgorithmSelection 0080                     ?_high_isr 0030                       _Deadend 000B  
               _LMotorCounter 002B                       _InitApp 1C08                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 1AF4               __size_of___wmul 0038  
                __psmallconst 1000                       __pcinit 1D22                       __ramtop 1000  
                     __ptext0 1DBA                       __ptext1 15C0                       __ptext2 134C  
                     __ptext3 1C82                       __ptext4 1AF4                       __ptext5 1CBA  
                     __ptext6 1CEE                       __ptext7 1C08                       __ptext8 1BC4  
                     __ptext9 1D4A               __size_of_rotate 003C                  __size_of_ABS 001A  
                __size_of_MAX 0034                  __size_of_MIN 0034                       _forward 1D68  
                     delay@ms 0080                       _low_isr 0018                 ?_sensorUpdate 0030  
                  ??_high_isr 0049                __pintcode_body 100A          end_of_initialization 1D40  
            _sensorCorrection 1001             __end_of_moveMouse 1DF0                 __Lmediumconst 0000  
                     int_func 100A               _controllerSteps 0059                    _justTurned 002E  
        __size_of_KController 0114                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0099   __end_of_ConfigureOscillator 1DE8                    _totalError 0029  
                _RTurnCounter 0013                __end_of___wmul 1CBA                 __pidataCOMRAM 1DF0  
                 _TurnedRight 001F                __end_of_rotate 1C82           start_initialization 1D22  
                 __end_of_ABS 1DBA                   __end_of_MAX 1D22                   __end_of_MIN 1CEE  
             _FrontController 17D6            _motorCounterUpdate 1A00              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0041                    merge@right 0041                     _Reversing 1D84  
                    ??___wmul 0084              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0043  
              _sensorLocation 1005          ??_motorCounterUpdate 0042                   __pbssCOMRAM 0001  
               __pcstackBANK0 0080                     _TurnRight 001B        sensorUpdate@sensorTemp 009F  
           __size_of_high_isr 1344                      ?_InitApp 0030             __CFG_CCP2MX$PORTC 000000  
                  ?_Reversing 0030                     _algorithm 002D                     __pintcode 0008  
      motorCounterUpdate@side 0042                      ?___awdiv 0080          __end_of_sensorUpdate 17D6  
      __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005                   __pintcodelo 0018  
     __end_of_FrontController 18EC                   __smallconst 1000                      ?_forward 0030  
                    ?_low_isr 0030                     _oldErrorP 0027                __size_of_delay 0044  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 0084  
                   _moveMouse 1DE8                      i2u111_40 18E0                      i2u114_40 1922  
                    i2u115_40 1932                      i2u131_40 1078                      i2u109_40 18BC  
                    i2u117_40 19BA                      i2u119_40 19DE                      i2u136_40 10F6  
                    i2u137_40 110A                      i2u129_40 104C                      i2u155_40 1284  
                    i2u147_40 11EE                      i2u156_40 1294                      i2u157_40 12A4  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 0080  
               _RMotorCounter 002C                    rotate@side 0043                 ??_KController 0044  
                  ?_moveMouse 0030              __size_of_InitApp 003E                      __Hrparam 0000  
                   merge@left 0042          sensorComputation@max 008F                      __Lrparam 0000  
        sensorComputation@min 0091          sensorComputation@sum 0093                   ??_Reversing 0043  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 00D0                      _TurnLeft 0019  
            ?_FrontController 0030              __size_of_forward 001C              __size_of_low_isr 008A  
                    __ptext10 1DDE                      __ptext20 1DCE                      __ptext21 1DA0  
                    __ptext13 1C46                      __ptext14 1D68                      __ptext15 1D84  
                    __ptext16 18EC                      __ptext17 17D6                      __ptext18 1DE8  
                    __ptext19 1A00                      _high_isr 0008                 __size_of_main 0014  
               _RotateCounter 0017         __size_of_sensorUpdate 0216  __size_of_ConfigureOscillator 000A  
         __end_of_KController 1A00             _sensorComputation 134C                    _INTCONbits 000FF2  
          ?_sensorComputation 008B                 sensorUpdate@i 00EF                 sensorUpdate@j 00F1  
                _sensorUpdate 15C0                      intlevel1 0000                      intlevel2 0000  
         ??_sensorComputation 008D                   ??_moveMouse 0041               KController@diff 0047  
   __end_of_sensorComputation 15C0                   _sensorValue 0001   __size_of_motorCounterUpdate 00F4  
   motorCounterUpdate@reverse 0041                   _KController 18EC      FrontController@correctTo 0046  
