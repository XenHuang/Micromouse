

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 17 21:05:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001AEC                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _controllerSteps
    42  001AEC  08                 	db	8
    43                           
    44                           	psect	smallconst
    45  001000                     __psmallconst:
    46                           	opt stack 0
    47  001000  00                 	db	0
    48  001001                     _sensorCorrection:
    49                           	opt stack 0
    50  001001  36                 	db	54
    51  001002  36                 	db	54
    52  001003  1D                 	db	29
    53  001004  1D                 	db	29
    54  001005                     __end_of_sensorCorrection:
    55                           	opt stack 0
    56  001005                     _sensorLocation:
    57                           	opt stack 0
    58  001005  1B                 	db	27
    59  001006  2B                 	db	43
    60  001007  1F                 	db	31
    61  001008  33                 	db	51
    62  001009                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _LATC	set	3979
    65  0000                     _OSCTUNE	set	3995
    66  0000                     _TRISBbits	set	3987
    67  0000                     _TRISC	set	3988
    68  0000                     _TRISEbits	set	3990
    69  0000                     _ADCON0	set	4034
    70  0000                     _ADCON0bits	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON2	set	4032
    73  0000                     _ADRESH	set	4036
    74  0000                     _ADRESL	set	4035
    75  0000                     _OSCCON	set	4051
    76  0000                     _T0CON	set	4053
    77  0000                     _INTCON	set	4082
    78  0000                     _INTCON2	set	4081
    79  0000                     _INTCONbits	set	4082
    80                           
    81                           ; #config settings
    82  001009  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  0019A6                     __pcinit:
    86                           	opt stack 0
    87  0019A6                     start_initialization:
    88                           	opt stack 0
    89  0019A6                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (27 bytes)
    93  0019A6  EE00  F03D         	lfsr	0,__pbssCOMRAM
    94  0019AA  0E1B               	movlw	27
    95  0019AC                     clear_0:
    96  0019AC  6AEE               	clrf	postinc0,c
    97  0019AE  06E8               	decf	wreg,f,c
    98  0019B0  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (1 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  0019B2  0EEC               	movlw	low __pidataCOMRAM
   103  0019B4  6EF6               	movwf	tblptrl,c
   104  0019B6  0E1A               	movlw	high __pidataCOMRAM
   105  0019B8  6EF7               	movwf	tblptrh,c
   106  0019BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  0019BC  6EF8               	movwf	tblptru,c
   108  0019BE  0009               	tblrd		*+	;fetch initializer
   109  0019C0  CFF5 F058          	movff	tablat,__pdataCOMRAM
   110  0019C4                     end_of_initialization:
   111                           	opt stack 0
   112  0019C4                     __end_of__initialization:
   113                           	opt stack 0
   114  0019C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  0019C6  6EF8               	movwf	tblptru,c
   116  0019C8  0100               	movlb	0
   117  0019CA  EF5B  F00D         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _sensorValue:
   129                           	opt stack 0
   130  00003D                     	ds	8
   131  000045                     _ForwardCounter:
   132                           	opt stack 0
   133  000045                     	ds	2
   134  000047                     _LTurnCounter:
   135                           	opt stack 0
   136  000047                     	ds	2
   137  000049                     _MotorDelayCounter:
   138                           	opt stack 0
   139  000049                     	ds	2
   140  00004B                     _RTurnCounter:
   141                           	opt stack 0
   142  00004B                     	ds	2
   143  00004D                     _ReverseCounter:
   144                           	opt stack 0
   145  00004D                     	ds	2
   146  00004F                     _RotateCounter:
   147                           	opt stack 0
   148  00004F                     	ds	2
   149  000051                     _delay_time:
   150                           	opt stack 0
   151  000051                     	ds	2
   152  000053                     _LMotorCounter:
   153                           	opt stack 0
   154  000053                     	ds	1
   155  000054                     _RMotorCounter:
   156                           	opt stack 0
   157  000054                     	ds	1
   158  000055                     _algorithm:
   159                           	opt stack 0
   160  000055                     	ds	1
   161  000056                     _justTurned:
   162                           	opt stack 0
   163  000056                     	ds	1
   164  000057                     _rotatingSide:
   165                           	opt stack 0
   166  000057                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	dataCOMRAM
   175  000058                     __pdataCOMRAM:
   176                           	opt stack 0
   177  000058                     _controllerSteps:
   178                           	opt stack 0
   179  000058                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	cstackBANK0
   188  000080                     __pcstackBANK0:
   189                           	opt stack 0
   190  000080                     sensorComputation@max:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000080                     	ds	2
   195  000082                     sensorComputation@min:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000082                     	ds	2
   200  000084                     sensorComputation@sum:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000084                     	ds	2
   205  000086                     sensorComputation@i:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000086                     	ds	2
   210  000088                     sensorComputation@j:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214  000088                     	ds	2
   215  00008A                     sensorUpdate@sensorTemp:
   216                           	opt stack 0
   217                           
   218                           ; 80 bytes @ 0xA
   219  00008A                     	ds	80
   220  0000DA                     sensorUpdate@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x5A
   224  0000DA                     	ds	2
   225  0000DC                     sensorUpdate@j:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x5C
   229  0000DC                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_low_isr:
   241  000001                     
   242                           ; 0 bytes @ 0x0
   243  000001                     	ds	17
   244  000012                     ?_ABS:
   245                           	opt stack 0
   246  000012                     motorCounterUpdate@reverse:
   247                           	opt stack 0
   248  000012                     merge@right:
   249                           	opt stack 0
   250  000012                     moveMouse@action:
   251                           	opt stack 0
   252  000012                     ABS@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x11
   256  000012                     	ds	1
   257  000013                     motorCounterUpdate@side:
   258                           	opt stack 0
   259  000013                     merge@left:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	1
   264  000014                     merge@merged:
   265                           	opt stack 0
   266  000014                     rotate@side:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	1
   271  000015                     ??_KController:
   272                           
   273                           ; 0 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     KController@correctTo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000017                     	ds	1
   280  000018                     KController@diff:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     ??_high_isr:
   286                           
   287                           ; 0 bytes @ 0x19
   288  00001A                     	ds	14
   289  000028                     ?___wmul:
   290                           	opt stack 0
   291  000028                     ?___awdiv:
   292                           	opt stack 0
   293  000028                     delay@ms:
   294                           	opt stack 0
   295  000028                     ___wmul@multiplier:
   296                           	opt stack 0
   297  000028                     ___awdiv@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_delay:
   303  00002A                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  00002A                     ___awdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x29
   309  00002A                     	ds	1
   310  00002B                     delay@x:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     ___awdiv@counter:
   316                           	opt stack 0
   317  00002C                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2B
   321  00002C                     	ds	1
   322  00002D                     ___awdiv@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     ?_MIN:
   328                           	opt stack 0
   329  00002E                     ?_MAX:
   330                           	opt stack 0
   331  00002E                     MIN@a:
   332                           	opt stack 0
   333  00002E                     MAX@a:
   334                           	opt stack 0
   335  00002E                     ___awdiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2D
   339  00002E                     	ds	2
   340  000030                     MIN@b:
   341                           	opt stack 0
   342  000030                     MAX@b:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     ??_MIN:
   348  000032                     ??_MAX:
   349                           
   350                           ; 0 bytes @ 0x31
   351  000032                     	ds	1
   352  000033                     sensorComputation@sensorTemp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x32
   356  000033                     	ds	2
   357  000035                     ??_sensorComputation:
   358                           
   359                           ; 0 bytes @ 0x34
   360  000035                     	ds	2
   361  000037                     ??_sensorUpdate:
   362                           
   363                           ; 0 bytes @ 0x36
   364  000037                     	ds	6
   365  00003D                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           ; 0 bytes @ 0x3C
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 41 in file "main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    7
   398 ;; This function calls:
   399 ;;		_ConfigureOscillator
   400 ;;		_InitApp
   401 ;;		_sensorUpdate
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  001AB6                     __ptext0:
   409                           	opt stack 0
   410  001AB6                     _main:
   411                           	opt stack 24
   412                           
   413                           ;main.c: 44: ConfigureOscillator();
   414                           
   415                           ;incstack = 0
   416  001AB6  EC6D  F00D         	call	_ConfigureOscillator	;wreg free
   417                           
   418                           ;main.c: 47: InitApp();
   419  001ABA  EC7D  F00C         	call	_InitApp	;wreg free
   420  001ABE  D000               	goto	l1834
   421  001AC0                     l1834:
   422                           
   423                           ;main.c: 50: {
   424                           ;main.c: 51: sensorUpdate();
   425  001AC0  EC65  F00A         	call	_sensorUpdate	;wreg free
   426  001AC4  D7FD               	goto	l1834
   427  001AC6  EF51  F000         	goto	start
   428  001ACA                     __end_of_main:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _sensorUpdate *****************
   438 ;; Defined at:
   439 ;;		line 146 in file "user.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   444 ;;  j               2   92[BANK0 ] int 
   445 ;;  i               2   90[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:       90 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		___wmul
   464 ;;		_sensorComputation
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  0014CA                     __ptext1:
   472                           	opt stack 0
   473  0014CA                     _sensorUpdate:
   474                           	opt stack 24
   475                           
   476                           ;user.c: 148: int i,j;
   477                           ;user.c: 149: int sensorTemp[4][10];
   478                           ;user.c: 152: for(i = 0; i < 10; i++)
   479                           
   480                           ;incstack = 0
   481  0014CA  0E00               	movlw	0
   482  0014CC  0100               	movlb	0	; () banked
   483  0014CE  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   484  0014D0  0E00               	movlw	0
   485  0014D2  6FDA               	movwf	sensorUpdate@i& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488  0014D4  0100               	movlb	0	; () banked
   489  0014D6  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   490  0014D8  D00A               	goto	l1800
   491  0014DA  0100               	movlb	0	; () banked
   492  0014DC  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   493  0014DE  E106               	bnz	u1480
   494  0014E0  0E0A               	movlw	10
   495  0014E2  0100               	movlb	0	; () banked
   496  0014E4  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   497  0014E6  B0D8               	btfsc	status,0,c
   498  0014E8  D0CF               	goto	l1828
   499  0014EA  D001               	goto	l1800
   500  0014EC                     u1480:
   501                           
   502                           ; BSR set to: 0
   503  0014EC  D0CD               	goto	l1828
   504  0014EE                     l1800:
   505                           
   506                           ; BSR set to: 0
   507                           ;user.c: 153: {
   508                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   509  0014EE  0E00               	movlw	0
   510  0014F0  0100               	movlb	0	; () banked
   511  0014F2  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   512  0014F4  0E00               	movlw	0
   513  0014F6  6FDC               	movwf	sensorUpdate@j& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516  0014F8  0100               	movlb	0	; () banked
   517  0014FA  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   518  0014FC  D00A               	goto	l1806
   519  0014FE  0100               	movlb	0	; () banked
   520  001500  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   521  001502  E106               	bnz	u1490
   522  001504  0E04               	movlw	4
   523  001506  0100               	movlb	0	; () banked
   524  001508  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   525  00150A  B0D8               	btfsc	status,0,c
   526  00150C  D0B2               	goto	l1824
   527  00150E  D001               	goto	l1806
   528  001510                     u1490:
   529                           
   530                           ; BSR set to: 0
   531  001510  D0B0               	goto	l1824
   532  001512                     l1806:
   533                           
   534                           ; BSR set to: 0
   535                           ;user.c: 155: {
   536                           ;user.c: 156: ADCON0 = sensorLocation[j];
   537  001512  0E05               	movlw	low _sensorLocation
   538  001514  0100               	movlb	0	; () banked
   539  001516  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   540  001518  6EF6               	movwf	tblptrl,c
   541  00151A  0E10               	movlw	high _sensorLocation
   542  00151C  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   543  00151E  6EF7               	movwf	tblptrh,c
   544  001520                     	if	0	;There are less than 3 active tblptr bytes
   545  001520                     	endif
   546  001520  0008               	tblrd		*
   547  001522  CFF5 FFC2          	movff	tablat,4034	;volatile
   548                           
   549                           ; BSR set to: 0
   550                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   551  001526  82C2               	bsf	4034,1,c	;volatile
   552                           
   553                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   554  001528  D000               	goto	l267
   555  00152A                     l267:
   556  00152A  B2C2               	btfsc	4034,1,c	;volatile
   557  00152C  D7FE               	goto	l267
   558                           
   559                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   560  00152E  CFC3 F037          	movff	4035,??_sensorUpdate	;volatile
   561  001532  0E06               	movlw	6
   562  001534  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   563  001536                     u1515:
   564  001536  90D8               	bcf	status,0,c
   565  001538  3237               	rrcf	??_sensorUpdate,f,c
   566  00153A  2E38               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   567  00153C  D7FC               	goto	u1515
   568  00153E  5037               	movf	??_sensorUpdate,w,c
   569  001540  CFC4 F039          	movff	4036,??_sensorUpdate+2	;volatile
   570  001544  6A3A               	clrf	(??_sensorUpdate+3)& (0+255),c
   571  001546  90D8               	bcf	status,0,c
   572  001548  3639               	rlcf	??_sensorUpdate+2,f,c
   573  00154A  363A               	rlcf	??_sensorUpdate+3,f,c
   574  00154C  90D8               	bcf	status,0,c
   575  00154E  3639               	rlcf	??_sensorUpdate+2,f,c
   576  001550  363A               	rlcf	??_sensorUpdate+3,f,c
   577  001552  2639               	addwf	??_sensorUpdate+2,f,c
   578  001554  0E00               	movlw	0
   579  001556  223A               	addwfc	??_sensorUpdate+3,f,c
   580  001558  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   581  00155C  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   582  001560  0E00               	movlw	0
   583  001562  6E2B               	movwf	___wmul@multiplicand+1,c
   584  001564  0E14               	movlw	20
   585  001566  6E2A               	movwf	___wmul@multiplicand,c
   586  001568  ECE7  F00C         	call	___wmul	;wreg free
   587  00156C  0E8A               	movlw	low sensorUpdate@sensorTemp
   588  00156E  6E3B               	movwf	(??_sensorUpdate+4)& (0+255),c
   589  001570  0E00               	movlw	high sensorUpdate@sensorTemp
   590  001572  6E3C               	movwf	(??_sensorUpdate+5)& (0+255),c
   591  001574  5028               	movf	?___wmul,w,c
   592  001576  263B               	addwf	??_sensorUpdate+4,f,c
   593  001578  5029               	movf	?___wmul+1,w,c
   594  00157A  223C               	addwfc	??_sensorUpdate+5,f,c
   595  00157C  90D8               	bcf	status,0,c
   596  00157E  0100               	movlb	0	; () banked
   597  001580  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   598  001582  6ED9               	movwf	fsr2l,c
   599  001584  0100               	movlb	0	; () banked
   600  001586  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  001588  6EDA               	movwf	fsr2h,c
   602  00158A  503B               	movf	??_sensorUpdate+4,w,c
   603  00158C  26D9               	addwf	fsr2l,f,c
   604  00158E  503C               	movf	??_sensorUpdate+5,w,c
   605  001590  22DA               	addwfc	fsr2h,f,c
   606  001592  C039  FFDE         	movff	??_sensorUpdate+2,postinc2
   607  001596  C03A  FFDD         	movff	??_sensorUpdate+3,postdec2
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 163: if(j == 0 || j == 3)
   611  00159A  0100               	movlb	0	; () banked
   612  00159C  51DC               	movf	sensorUpdate@j& (0+255),w,b
   613  00159E  0100               	movlb	0	; () banked
   614  0015A0  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   615  0015A2  B4D8               	btfsc	status,2,c
   616  0015A4  D007               	goto	l1816
   617                           
   618                           ; BSR set to: 0
   619  0015A6  0E03               	movlw	3
   620  0015A8  0100               	movlb	0	; () banked
   621  0015AA  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   622  0015AC  0100               	movlb	0	; () banked
   623  0015AE  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   624  0015B0  A4D8               	btfss	status,2,c
   625  0015B2  D02A               	goto	l1818
   626  0015B4                     l1816:
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   630  0015B4  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   631  0015B8  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   632  0015BC  0E00               	movlw	0
   633  0015BE  6E2B               	movwf	___wmul@multiplicand+1,c
   634  0015C0  0E14               	movlw	20
   635  0015C2  6E2A               	movwf	___wmul@multiplicand,c
   636  0015C4  ECE7  F00C         	call	___wmul	;wreg free
   637  0015C8  0E8A               	movlw	low sensorUpdate@sensorTemp
   638  0015CA  6E37               	movwf	??_sensorUpdate& (0+255),c
   639  0015CC  0E00               	movlw	high sensorUpdate@sensorTemp
   640  0015CE  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   641  0015D0  5028               	movf	?___wmul,w,c
   642  0015D2  2637               	addwf	??_sensorUpdate,f,c
   643  0015D4  5029               	movf	?___wmul+1,w,c
   644  0015D6  2238               	addwfc	??_sensorUpdate+1,f,c
   645  0015D8  90D8               	bcf	status,0,c
   646  0015DA  0100               	movlb	0	; () banked
   647  0015DC  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   648  0015DE  6ED9               	movwf	fsr2l,c
   649  0015E0  0100               	movlb	0	; () banked
   650  0015E2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   651  0015E4  6EDA               	movwf	fsr2h,c
   652  0015E6  5037               	movf	??_sensorUpdate,w,c
   653  0015E8  26D9               	addwf	fsr2l,f,c
   654  0015EA  5038               	movf	??_sensorUpdate+1,w,c
   655  0015EC  22DA               	addwfc	fsr2h,f,c
   656  0015EE  0E01               	movlw	low _sensorCorrection
   657  0015F0  0100               	movlb	0	; () banked
   658  0015F2  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   659  0015F4  6EF6               	movwf	tblptrl,c
   660  0015F6  0E10               	movlw	high _sensorCorrection
   661  0015F8  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   662  0015FA  6EF7               	movwf	tblptrh,c
   663  0015FC                     	if	0	;There are less than 3 active tblptr bytes
   664  0015FC                     	endif
   665  0015FC  0008               	tblrd		*
   666  0015FE  50F5               	movf	tablat,w,c
   667  001600  5EDE               	subwf	postinc2,f,c
   668  001602  0E00               	movlw	0
   669  001604  5ADD               	subwfb	postdec2,f,c
   670  001606  D02A               	goto	l1820
   671  001608                     l1818:
   672                           
   673                           ; BSR set to: 0
   674                           ;user.c: 165: else
   675                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   676  001608  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   677  00160C  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   678  001610  0E00               	movlw	0
   679  001612  6E2B               	movwf	___wmul@multiplicand+1,c
   680  001614  0E14               	movlw	20
   681  001616  6E2A               	movwf	___wmul@multiplicand,c
   682  001618  ECE7  F00C         	call	___wmul	;wreg free
   683  00161C  0E8A               	movlw	low sensorUpdate@sensorTemp
   684  00161E  6E37               	movwf	??_sensorUpdate& (0+255),c
   685  001620  0E00               	movlw	high sensorUpdate@sensorTemp
   686  001622  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   687  001624  5028               	movf	?___wmul,w,c
   688  001626  2637               	addwf	??_sensorUpdate,f,c
   689  001628  5029               	movf	?___wmul+1,w,c
   690  00162A  2238               	addwfc	??_sensorUpdate+1,f,c
   691  00162C  90D8               	bcf	status,0,c
   692  00162E  0100               	movlb	0	; () banked
   693  001630  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   694  001632  6ED9               	movwf	fsr2l,c
   695  001634  0100               	movlb	0	; () banked
   696  001636  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   697  001638  6EDA               	movwf	fsr2h,c
   698  00163A  5037               	movf	??_sensorUpdate,w,c
   699  00163C  26D9               	addwf	fsr2l,f,c
   700  00163E  5038               	movf	??_sensorUpdate+1,w,c
   701  001640  22DA               	addwfc	fsr2h,f,c
   702  001642  0E01               	movlw	low _sensorCorrection
   703  001644  0100               	movlb	0	; () banked
   704  001646  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   705  001648  6EF6               	movwf	tblptrl,c
   706  00164A  0E10               	movlw	high _sensorCorrection
   707  00164C  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   708  00164E  6EF7               	movwf	tblptrh,c
   709  001650                     	if	0	;There are less than 3 active tblptr bytes
   710  001650                     	endif
   711  001650  0008               	tblrd		*
   712  001652  50F5               	movf	tablat,w,c
   713  001654  26DE               	addwf	postinc2,f,c
   714  001656  0E00               	movlw	0
   715  001658  22DD               	addwfc	postdec2,f,c
   716  00165A  D000               	goto	l1820
   717  00165C                     l1820:
   718                           
   719                           ; BSR set to: 0
   720  00165C  0100               	movlb	0	; () banked
   721  00165E  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   722  001660  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   723                           
   724                           ; BSR set to: 0
   725  001662  0100               	movlb	0	; () banked
   726  001664  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   727  001666  D755               	goto	l1806
   728  001668  0100               	movlb	0	; () banked
   729  00166A  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   730  00166C  E102               	bnz	l1824
   731  00166E  D74A               	goto	L1
   732  001670  D000               	goto	l1824
   733  001672                     l1824:
   734                           
   735                           ; BSR set to: 0
   736  001672  0100               	movlb	0	; () banked
   737  001674  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   738  001676  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741  001678  0100               	movlb	0	; () banked
   742  00167A  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  00167C  D738               	goto	l1800
   744  00167E  0100               	movlb	0	; () banked
   745  001680  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  001682  E102               	bnz	l1828
   747  001684  D72D               	goto	L2
   748  001686  D000               	goto	l1828
   749  001688                     l1828:
   750                           
   751                           ; BSR set to: 0
   752                           ;user.c: 167: }
   753                           ;user.c: 168: }
   754                           ;user.c: 171: sensorComputation(sensorTemp);
   755  001688  0E8A               	movlw	low sensorUpdate@sensorTemp
   756  00168A  6E33               	movwf	sensorComputation@sensorTemp,c
   757  00168C  0E00               	movlw	high sensorUpdate@sensorTemp
   758  00168E  6E34               	movwf	sensorComputation@sensorTemp+1,c
   759  001690  EC4F  F009         	call	_sensorComputation	;wreg free
   760  001694  0012               	return		;funcret
   761  001696                     __end_of_sensorUpdate:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postinc2	equ	0xFDE
   770                           postdec2	equ	0xFDD
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sensorComputation *****************
   776 ;; Defined at:
   777 ;;		line 125 in file "user.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   780 ;;		 -> sensorUpdate@sensorTemp(80), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  j               2    8[BANK0 ] int 
   783 ;;  i               2    6[BANK0 ] int 
   784 ;;  sum             2    4[BANK0 ] int 
   785 ;;  min             2    2[BANK0 ] int 
   786 ;;  max             2    0[BANK0 ] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       14 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    5
   803 ;; This function calls:
   804 ;;		_MAX
   805 ;;		_MIN
   806 ;;		___awdiv
   807 ;;		___wmul
   808 ;; This function is called by:
   809 ;;		_sensorUpdate
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  00129E                     __ptext2:
   815                           	opt stack 0
   816  00129E                     _sensorComputation:
   817                           	opt stack 24
   818                           
   819                           ;user.c: 127: int max,min,i,j,sum;
   820                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   821                           
   822                           ;incstack = 0
   823  00129E  0E00               	movlw	0
   824  0012A0  0100               	movlb	0	; () banked
   825  0012A2  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   826  0012A4  0E00               	movlw	0
   827  0012A6  6F86               	movwf	sensorComputation@i& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830  0012A8  0100               	movlb	0	; () banked
   831  0012AA  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   832  0012AC  D00A               	goto	l1770
   833  0012AE  0100               	movlb	0	; () banked
   834  0012B0  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   835  0012B2  E106               	bnz	u1430
   836  0012B4  0E04               	movlw	4
   837  0012B6  0100               	movlb	0	; () banked
   838  0012B8  5D86               	subwf	sensorComputation@i& (0+255),w,b
   839  0012BA  B0D8               	btfsc	status,0,c
   840  0012BC  D105               	goto	l260
   841  0012BE  D001               	goto	l1770
   842  0012C0                     u1430:
   843                           
   844                           ; BSR set to: 0
   845  0012C0  D103               	goto	l260
   846  0012C2                     l1770:
   847                           
   848                           ; BSR set to: 0
   849                           ;user.c: 129: {
   850                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   851  0012C2  0E00               	movlw	0
   852  0012C4  0100               	movlb	0	; () banked
   853  0012C6  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   854  0012C8  0E00               	movlw	0
   855  0012CA  6F88               	movwf	sensorComputation@j& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858  0012CC  0100               	movlb	0	; () banked
   859  0012CE  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   860  0012D0  D00A               	goto	l1776
   861  0012D2  0100               	movlb	0	; () banked
   862  0012D4  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   863  0012D6  E106               	bnz	u1440
   864  0012D8  0E0A               	movlw	10
   865  0012DA  0100               	movlb	0	; () banked
   866  0012DC  5D88               	subwf	sensorComputation@j& (0+255),w,b
   867  0012DE  B0D8               	btfsc	status,0,c
   868  0012E0  D0B7               	goto	l1786
   869  0012E2  D001               	goto	l1776
   870  0012E4                     u1440:
   871                           
   872                           ; BSR set to: 0
   873  0012E4  D0B5               	goto	l1786
   874  0012E6                     l1776:
   875                           
   876                           ; BSR set to: 0
   877                           ;user.c: 131: {
   878                           ;user.c: 132: if(j == 0)
   879  0012E6  0100               	movlb	0	; () banked
   880  0012E8  5188               	movf	sensorComputation@j& (0+255),w,b
   881  0012EA  0100               	movlb	0	; () banked
   882  0012EC  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   883  0012EE  A4D8               	btfss	status,2,c
   884  0012F0  D02A               	goto	l1780
   885                           
   886                           ; BSR set to: 0
   887                           ;user.c: 133: {
   888                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   889  0012F2  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   890  0012F6  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   891  0012FA  0E00               	movlw	0
   892  0012FC  6E2B               	movwf	___wmul@multiplicand+1,c
   893  0012FE  0E14               	movlw	20
   894  001300  6E2A               	movwf	___wmul@multiplicand,c
   895  001302  ECE7  F00C         	call	___wmul	;wreg free
   896  001306  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   897  00130A  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   898  00130E  5028               	movf	?___wmul,w,c
   899  001310  2635               	addwf	??_sensorComputation,f,c
   900  001312  5029               	movf	?___wmul+1,w,c
   901  001314  2236               	addwfc	??_sensorComputation+1,f,c
   902  001316  90D8               	bcf	status,0,c
   903  001318  0100               	movlb	0	; () banked
   904  00131A  3588               	rlcf	sensorComputation@j& (0+255),w,b
   905  00131C  6ED9               	movwf	fsr2l,c
   906  00131E  0100               	movlb	0	; () banked
   907  001320  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   908  001322  6EDA               	movwf	fsr2h,c
   909  001324  5035               	movf	??_sensorComputation,w,c
   910  001326  26D9               	addwf	fsr2l,f,c
   911  001328  5036               	movf	??_sensorComputation+1,w,c
   912  00132A  22DA               	addwfc	fsr2h,f,c
   913  00132C  CFDE F080          	movff	postinc2,sensorComputation@max
   914  001330  CFDD F081          	movff	postdec2,sensorComputation@max+1
   915  001334  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   916  001338  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   917  00133C  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   918  001340  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   919                           
   920                           ;user.c: 135: continue;
   921  001344  D07A               	goto	l1782
   922  001346                     l1780:
   923                           
   924                           ; BSR set to: 0
   925                           ;user.c: 136: }
   926                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   927  001346  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   928  00134A  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   929  00134E  0E00               	movlw	0
   930  001350  6E2B               	movwf	___wmul@multiplicand+1,c
   931  001352  0E14               	movlw	20
   932  001354  6E2A               	movwf	___wmul@multiplicand,c
   933  001356  ECE7  F00C         	call	___wmul	;wreg free
   934  00135A  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   935  00135E  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   936  001362  5028               	movf	?___wmul,w,c
   937  001364  2635               	addwf	??_sensorComputation,f,c
   938  001366  5029               	movf	?___wmul+1,w,c
   939  001368  2236               	addwfc	??_sensorComputation+1,f,c
   940  00136A  90D8               	bcf	status,0,c
   941  00136C  0100               	movlb	0	; () banked
   942  00136E  3588               	rlcf	sensorComputation@j& (0+255),w,b
   943  001370  6ED9               	movwf	fsr2l,c
   944  001372  0100               	movlb	0	; () banked
   945  001374  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   946  001376  6EDA               	movwf	fsr2h,c
   947  001378  5035               	movf	??_sensorComputation,w,c
   948  00137A  26D9               	addwf	fsr2l,f,c
   949  00137C  5036               	movf	??_sensorComputation+1,w,c
   950  00137E  22DA               	addwfc	fsr2h,f,c
   951  001380  CFDE F02E          	movff	postinc2,MIN@a
   952  001384  CFDD F02F          	movff	postdec2,MIN@a+1
   953  001388  C082  F030         	movff	sensorComputation@min,MIN@b
   954  00138C  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   955  001390  ECFB  F00C         	call	_MIN	;wreg free
   956  001394  C02E  F082         	movff	?_MIN,sensorComputation@min
   957  001398  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   958                           
   959                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   960  00139C  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   961  0013A0  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   962  0013A4  0E00               	movlw	0
   963  0013A6  6E2B               	movwf	___wmul@multiplicand+1,c
   964  0013A8  0E14               	movlw	20
   965  0013AA  6E2A               	movwf	___wmul@multiplicand,c
   966  0013AC  ECE7  F00C         	call	___wmul	;wreg free
   967  0013B0  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   968  0013B4  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   969  0013B8  5028               	movf	?___wmul,w,c
   970  0013BA  2635               	addwf	??_sensorComputation,f,c
   971  0013BC  5029               	movf	?___wmul+1,w,c
   972  0013BE  2236               	addwfc	??_sensorComputation+1,f,c
   973  0013C0  90D8               	bcf	status,0,c
   974  0013C2  0100               	movlb	0	; () banked
   975  0013C4  3588               	rlcf	sensorComputation@j& (0+255),w,b
   976  0013C6  6ED9               	movwf	fsr2l,c
   977  0013C8  0100               	movlb	0	; () banked
   978  0013CA  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   979  0013CC  6EDA               	movwf	fsr2h,c
   980  0013CE  5035               	movf	??_sensorComputation,w,c
   981  0013D0  26D9               	addwf	fsr2l,f,c
   982  0013D2  5036               	movf	??_sensorComputation+1,w,c
   983  0013D4  22DA               	addwfc	fsr2h,f,c
   984  0013D6  CFDE F02E          	movff	postinc2,MAX@a
   985  0013DA  CFDD F02F          	movff	postdec2,MAX@a+1
   986  0013DE  C080  F030         	movff	sensorComputation@max,MAX@b
   987  0013E2  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
   988  0013E6  EC0F  F00D         	call	_MAX	;wreg free
   989  0013EA  C02E  F080         	movff	?_MAX,sensorComputation@max
   990  0013EE  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
   991                           
   992                           ;user.c: 139: sum += sensorTemp[i][j];
   993  0013F2  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   994  0013F6  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   995  0013FA  0E00               	movlw	0
   996  0013FC  6E2B               	movwf	___wmul@multiplicand+1,c
   997  0013FE  0E14               	movlw	20
   998  001400  6E2A               	movwf	___wmul@multiplicand,c
   999  001402  ECE7  F00C         	call	___wmul	;wreg free
  1000  001406  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1001  00140A  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1002  00140E  5028               	movf	?___wmul,w,c
  1003  001410  2635               	addwf	??_sensorComputation,f,c
  1004  001412  5029               	movf	?___wmul+1,w,c
  1005  001414  2236               	addwfc	??_sensorComputation+1,f,c
  1006  001416  90D8               	bcf	status,0,c
  1007  001418  0100               	movlb	0	; () banked
  1008  00141A  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1009  00141C  6ED9               	movwf	fsr2l,c
  1010  00141E  0100               	movlb	0	; () banked
  1011  001420  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1012  001422  6EDA               	movwf	fsr2h,c
  1013  001424  5035               	movf	??_sensorComputation,w,c
  1014  001426  26D9               	addwf	fsr2l,f,c
  1015  001428  5036               	movf	??_sensorComputation+1,w,c
  1016  00142A  22DA               	addwfc	fsr2h,f,c
  1017  00142C  50DE               	movf	postinc2,w,c
  1018  00142E  0100               	movlb	0	; () banked
  1019  001430  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1020  001432  50DD               	movf	postdec2,w,c
  1021  001434  0100               	movlb	0	; () banked
  1022  001436  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1023  001438  D000               	goto	l1782
  1024  00143A                     l1782:
  1025                           
  1026                           ; BSR set to: 0
  1027  00143A  0100               	movlb	0	; () banked
  1028  00143C  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1029  00143E  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1030                           
  1031                           ; BSR set to: 0
  1032  001440  0100               	movlb	0	; () banked
  1033  001442  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1034  001444  D750               	goto	l1776
  1035  001446  0100               	movlb	0	; () banked
  1036  001448  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1037  00144A  E102               	bnz	l1786
  1038  00144C  D745               	goto	L3
  1039  00144E  D000               	goto	l1786
  1040  001450                     l1786:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;user.c: 140: }
  1044                           ;user.c: 141: sum = sum - min - max;
  1045  001450  0100               	movlb	0	; () banked
  1046  001452  5180               	movf	sensorComputation@max& (0+255),w,b
  1047  001454  0100               	movlb	0	; () banked
  1048  001456  2582               	addwf	sensorComputation@min& (0+255),w,b
  1049  001458  6E35               	movwf	??_sensorComputation& (0+255),c
  1050  00145A  0100               	movlb	0	; () banked
  1051  00145C  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1052  00145E  0100               	movlb	0	; () banked
  1053  001460  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1054  001462  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1055  001464  1E35               	comf	??_sensorComputation,f,c
  1056  001466  1E36               	comf	??_sensorComputation+1,f,c
  1057  001468  4A35               	infsnz	??_sensorComputation,f,c
  1058  00146A  2A36               	incf	??_sensorComputation+1,f,c
  1059  00146C  0100               	movlb	0	; () banked
  1060  00146E  5184               	movf	sensorComputation@sum& (0+255),w,b
  1061  001470  2435               	addwf	??_sensorComputation,w,c
  1062  001472  0100               	movlb	0	; () banked
  1063  001474  6F84               	movwf	sensorComputation@sum& (0+255),b
  1064  001476  0100               	movlb	0	; () banked
  1065  001478  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1066  00147A  2036               	addwfc	??_sensorComputation+1,w,c
  1067  00147C  0100               	movlb	0	; () banked
  1068  00147E  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1072  001480  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1073  001484  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1074  001488  0E00               	movlw	0
  1075  00148A  6E2B               	movwf	___awdiv@divisor+1,c
  1076  00148C  0E08               	movlw	8
  1077  00148E  6E2A               	movwf	___awdiv@divisor,c
  1078  001490  EC32  F00C         	call	___awdiv	;wreg free
  1079  001494  90D8               	bcf	status,0,c
  1080  001496  0100               	movlb	0	; () banked
  1081  001498  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1082  00149A  6ED9               	movwf	fsr2l,c
  1083  00149C  0100               	movlb	0	; () banked
  1084  00149E  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1085  0014A0  6EDA               	movwf	fsr2h,c
  1086  0014A2  0E3D               	movlw	low _sensorValue
  1087  0014A4  26D9               	addwf	fsr2l,f,c
  1088  0014A6  0E00               	movlw	high _sensorValue
  1089  0014A8  22DA               	addwfc	fsr2h,f,c
  1090  0014AA  C028  FFDE         	movff	?___awdiv,postinc2
  1091  0014AE  C029  FFDD         	movff	?___awdiv+1,postdec2
  1092                           
  1093                           ; BSR set to: 0
  1094  0014B2  0100               	movlb	0	; () banked
  1095  0014B4  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1096  0014B6  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  0014B8  0100               	movlb	0	; () banked
  1100  0014BA  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1101  0014BC  D702               	goto	l1770
  1102  0014BE  0100               	movlb	0	; () banked
  1103  0014C0  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1104  0014C2  E102               	bnz	l260
  1105  0014C4  D6F7               	goto	L4
  1106  0014C6  D000               	goto	l260
  1107  0014C8                     l260:
  1108                           
  1109                           ; BSR set to: 0
  1110  0014C8  0012               	return		;funcret
  1111  0014CA                     __end_of_sensorComputation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function ___wmul *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  multiplier      2   39[COMRAM] unsigned int 
  1130 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  product         2   43[COMRAM] unsigned int 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   39[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, prodl, prodh
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    4
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_sensorComputation
  1153 ;;		_sensorUpdate
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  0019CE                     __ptext3:
  1159                           	opt stack 0
  1160  0019CE                     ___wmul:
  1161                           	opt stack 24
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  0019CE  5028               	movf	___wmul@multiplier,w,c
  1166  0019D0  022A               	mulwf	___wmul@multiplicand,c
  1167  0019D2  CFF3 F02C          	movff	prodl,___wmul@product
  1168  0019D6  CFF4 F02D          	movff	prodh,___wmul@product+1
  1169  0019DA  5028               	movf	___wmul@multiplier,w,c
  1170  0019DC  022B               	mulwf	___wmul@multiplicand+1,c
  1171  0019DE  50F3               	movf	prodl,w,c
  1172  0019E0  262D               	addwf	___wmul@product+1,f,c
  1173  0019E2  5029               	movf	___wmul@multiplier+1,w,c
  1174  0019E4  022A               	mulwf	___wmul@multiplicand,c
  1175  0019E6  50F3               	movf	prodl,w,c
  1176  0019E8  262D               	addwf	___wmul@product+1,f,c
  1177  0019EA  C02C  F028         	movff	___wmul@product,?___wmul
  1178  0019EE  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1179  0019F2  D000               	goto	l285
  1180  0019F4                     l285:
  1181  0019F4  0012               	return		;funcret
  1182  0019F6                     __end_of___wmul:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function ___awdiv *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        2   39[COMRAM] int 
  1203 ;;  divisor         2   41[COMRAM] int 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  quotient        2   45[COMRAM] int 
  1206 ;;  sign            1   44[COMRAM] unsigned char 
  1207 ;;  counter         1   43[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        8 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sensorComputation
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  001864                     __ptext4:
  1233                           	opt stack 0
  1234  001864                     ___awdiv:
  1235                           	opt stack 24
  1236                           
  1237                           ;incstack = 0
  1238  001864  0E00               	movlw	0
  1239  001866  6E2D               	movwf	___awdiv@sign,c
  1240  001868  AE2B               	btfss	___awdiv@divisor+1,7,c
  1241  00186A  D007               	goto	l1728
  1242  00186C  6C2A               	negf	___awdiv@divisor,c
  1243  00186E  1E2B               	comf	___awdiv@divisor+1,f,c
  1244  001870  B0D8               	btfsc	status,0,c
  1245  001872  2A2B               	incf	___awdiv@divisor+1,f,c
  1246  001874  0E01               	movlw	1
  1247  001876  6E2D               	movwf	___awdiv@sign,c
  1248  001878  D000               	goto	l1728
  1249  00187A                     l1728:
  1250  00187A  AE29               	btfss	___awdiv@dividend+1,7,c
  1251  00187C  D007               	goto	l1734
  1252  00187E  6C28               	negf	___awdiv@dividend,c
  1253  001880  1E29               	comf	___awdiv@dividend+1,f,c
  1254  001882  B0D8               	btfsc	status,0,c
  1255  001884  2A29               	incf	___awdiv@dividend+1,f,c
  1256  001886  0E01               	movlw	1
  1257  001888  1A2D               	xorwf	___awdiv@sign,f,c
  1258  00188A  D000               	goto	l1734
  1259  00188C                     l1734:
  1260  00188C  0E00               	movlw	0
  1261  00188E  6E2F               	movwf	___awdiv@quotient+1,c
  1262  001890  0E00               	movlw	0
  1263  001892  6E2E               	movwf	___awdiv@quotient,c
  1264  001894  502A               	movf	___awdiv@divisor,w,c
  1265  001896  102B               	iorwf	___awdiv@divisor+1,w,c
  1266  001898  B4D8               	btfsc	status,2,c
  1267  00189A  D021               	goto	l1756
  1268  00189C  0E01               	movlw	1
  1269  00189E  6E2C               	movwf	___awdiv@counter,c
  1270  0018A0  D005               	goto	l1742
  1271  0018A2                     l1740:
  1272  0018A2  90D8               	bcf	status,0,c
  1273  0018A4  362A               	rlcf	___awdiv@divisor,f,c
  1274  0018A6  362B               	rlcf	___awdiv@divisor+1,f,c
  1275  0018A8  2A2C               	incf	___awdiv@counter,f,c
  1276  0018AA  D000               	goto	l1742
  1277  0018AC                     l1742:
  1278  0018AC  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1279  0018AE  D002               	goto	l1744
  1280  0018B0  D7F8               	goto	l1740
  1281  0018B2  D000               	goto	l1744
  1282  0018B4                     l1744:
  1283  0018B4  90D8               	bcf	status,0,c
  1284  0018B6  362E               	rlcf	___awdiv@quotient,f,c
  1285  0018B8  362F               	rlcf	___awdiv@quotient+1,f,c
  1286  0018BA  502A               	movf	___awdiv@divisor,w,c
  1287  0018BC  5C28               	subwf	___awdiv@dividend,w,c
  1288  0018BE  502B               	movf	___awdiv@divisor+1,w,c
  1289  0018C0  5829               	subwfb	___awdiv@dividend+1,w,c
  1290  0018C2  A0D8               	btfss	status,0,c
  1291  0018C4  D006               	goto	l1752
  1292  0018C6  502A               	movf	___awdiv@divisor,w,c
  1293  0018C8  5E28               	subwf	___awdiv@dividend,f,c
  1294  0018CA  502B               	movf	___awdiv@divisor+1,w,c
  1295  0018CC  5A29               	subwfb	___awdiv@dividend+1,f,c
  1296  0018CE  802E               	bsf	___awdiv@quotient,0,c
  1297  0018D0  D000               	goto	l1752
  1298  0018D2                     l1752:
  1299  0018D2  90D8               	bcf	status,0,c
  1300  0018D4  322B               	rrcf	___awdiv@divisor+1,f,c
  1301  0018D6  322A               	rrcf	___awdiv@divisor,f,c
  1302  0018D8  2E2C               	decfsz	___awdiv@counter,f,c
  1303  0018DA  D7EC               	goto	l1744
  1304  0018DC  D000               	goto	l1756
  1305  0018DE                     l1756:
  1306  0018DE  502D               	movf	___awdiv@sign,w,c
  1307  0018E0  B4D8               	btfsc	status,2,c
  1308  0018E2  D005               	goto	l1760
  1309  0018E4  6C2E               	negf	___awdiv@quotient,c
  1310  0018E6  1E2F               	comf	___awdiv@quotient+1,f,c
  1311  0018E8  B0D8               	btfsc	status,0,c
  1312  0018EA  2A2F               	incf	___awdiv@quotient+1,f,c
  1313  0018EC  D000               	goto	l1760
  1314  0018EE                     l1760:
  1315  0018EE  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1316  0018F2  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1317  0018F6  D000               	goto	l478
  1318  0018F8                     l478:
  1319  0018F8  0012               	return		;funcret
  1320  0018FA                     __end_of___awdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _MIN *****************
  1337 ;; Defined at:
  1338 ;;		line 175 in file "user.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               2   45[COMRAM] int 
  1341 ;;  b               2   47[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   45[COMRAM] int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        5 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sensorComputation
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  0019F6                     __ptext5:
  1369                           	opt stack 0
  1370  0019F6                     _MIN:
  1371                           	opt stack 24
  1372                           
  1373                           ;user.c: 177: if(a>b) return b;
  1374                           
  1375                           ;incstack = 0
  1376  0019F6  502E               	movf	MIN@a,w,c
  1377  0019F8  5C30               	subwf	MIN@b,w,c
  1378  0019FA  5031               	movf	MIN@b+1,w,c
  1379  0019FC  0A80               	xorlw	128
  1380  0019FE  6E32               	movwf	??_MIN& (0+255),c
  1381  001A00  502F               	movf	MIN@a+1,w,c
  1382  001A02  0A80               	xorlw	128
  1383  001A04  5832               	subwfb	??_MIN& (0+255),w,c
  1384  001A06  B0D8               	btfsc	status,0,c
  1385  001A08  D005               	goto	l277
  1386  001A0A  C030  F02E         	movff	MIN@b,?_MIN
  1387  001A0E  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1388  001A12  D004               	goto	l278
  1389  001A14                     l277:
  1390                           
  1391                           ;user.c: 178: return a;
  1392  001A14  C02E  F02E         	movff	MIN@a,?_MIN
  1393  001A18  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1394  001A1C                     l278:
  1395  001A1C  0012               	return		;funcret
  1396  001A1E                     __end_of_MIN:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postinc2	equ	0xFDE
  1407                           postdec2	equ	0xFDD
  1408                           fsr2h	equ	0xFDA
  1409                           fsr2l	equ	0xFD9
  1410                           status	equ	0xFD8
  1411                           
  1412 ;; *************** function _MAX *****************
  1413 ;; Defined at:
  1414 ;;		line 181 in file "user.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2   45[COMRAM] int 
  1417 ;;  b               2   47[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   45[COMRAM] int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;Total ram usage:        5 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    4
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_sensorComputation
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  001A1E                     __ptext6:
  1445                           	opt stack 0
  1446  001A1E                     _MAX:
  1447                           	opt stack 24
  1448                           
  1449                           ;user.c: 183: if(a>b) return a;
  1450                           
  1451                           ;incstack = 0
  1452  001A1E  502E               	movf	MAX@a,w,c
  1453  001A20  5C30               	subwf	MAX@b,w,c
  1454  001A22  5031               	movf	MAX@b+1,w,c
  1455  001A24  0A80               	xorlw	128
  1456  001A26  6E32               	movwf	??_MAX& (0+255),c
  1457  001A28  502F               	movf	MAX@a+1,w,c
  1458  001A2A  0A80               	xorlw	128
  1459  001A2C  5832               	subwfb	??_MAX& (0+255),w,c
  1460  001A2E  B0D8               	btfsc	status,0,c
  1461  001A30  D005               	goto	l281
  1462  001A32  C02E  F02E         	movff	MAX@a,?_MAX
  1463  001A36  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1464  001A3A  D004               	goto	l282
  1465  001A3C                     l281:
  1466                           
  1467                           ;user.c: 184: return b;
  1468  001A3C  C030  F02E         	movff	MAX@b,?_MAX
  1469  001A40  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1470  001A44                     l282:
  1471  001A44  0012               	return		;funcret
  1472  001A46                     __end_of_MAX:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _InitApp *****************
  1489 ;; Defined at:
  1490 ;;		line 35 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    5
  1511 ;; This function calls:
  1512 ;;		_AlgorithmSelection
  1513 ;;		_delay
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  0018FA                     __ptext7:
  1521                           	opt stack 0
  1522  0018FA                     _InitApp:
  1523                           	opt stack 25
  1524                           
  1525                           ;user.c: 39: TRISC = 0;
  1526                           
  1527                           ;incstack = 0
  1528  0018FA  0E00               	movlw	0
  1529  0018FC  6E94               	movwf	3988,c	;volatile
  1530                           
  1531                           ;user.c: 43: TRISEbits.TRISE1=1;
  1532  0018FE  8296               	bsf	3990,1,c	;volatile
  1533                           
  1534                           ;user.c: 45: TRISEbits.TRISE2=1;
  1535  001900  8496               	bsf	3990,2,c	;volatile
  1536                           
  1537                           ;user.c: 47: TRISBbits.RB1=1;
  1538  001902  8293               	bsf	3987,1,c	;volatile
  1539                           
  1540                           ;user.c: 49: TRISBbits.RB0=1;
  1541  001904  8093               	bsf	3987,0,c	;volatile
  1542                           
  1543                           ;user.c: 52: TRISBbits.RB3=1;
  1544  001906  8693               	bsf	3987,3,c	;volatile
  1545                           
  1546                           ;user.c: 54: TRISBbits.RB2=1;
  1547  001908  8493               	bsf	3987,2,c	;volatile
  1548                           
  1549                           ;user.c: 58: ADCON1 =0b00000001;
  1550  00190A  0E01               	movlw	1
  1551  00190C  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;user.c: 63: ADCON2=0b00001010;
  1554  00190E  0E0A               	movlw	10
  1555  001910  6EC0               	movwf	4032,c	;volatile
  1556                           
  1557                           ;user.c: 68: ADCON0=0b00101011;
  1558  001912  0E2B               	movlw	43
  1559  001914  6EC2               	movwf	4034,c	;volatile
  1560                           
  1561                           ;user.c: 77: T0CON = 0b11000100;
  1562  001916  0EC4               	movlw	196
  1563  001918  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;user.c: 85: INTCON2 = 0b11110100;
  1566  00191A  0EF4               	movlw	244
  1567  00191C  6EF1               	movwf	intcon2,c	;volatile
  1568                           
  1569                           ;user.c: 95: INTCON = 0b00100000;
  1570  00191E  0E20               	movlw	32
  1571  001920  6EF2               	movwf	intcon,c	;volatile
  1572                           
  1573                           ;user.c: 105: AlgorithmSelection();
  1574  001922  EC23  F00D         	call	_AlgorithmSelection	;wreg free
  1575                           
  1576                           ;user.c: 108: delay(1000);
  1577  001926  0E03               	movlw	3
  1578  001928  6E29               	movwf	delay@ms+1,c
  1579  00192A  0EE8               	movlw	232
  1580  00192C  6E28               	movwf	delay@ms,c
  1581  00192E  ECB9  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 109: INTCONbits.GIE = 1;
  1584  001932  8EF2               	bsf	intcon,7,c	;volatile
  1585  001934  0012               	return		;funcret
  1586  001936                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   39[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   42[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  001972                     __ptext8:
  1636                           	opt stack 0
  1637  001972                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  001972  0E00               	movlw	0
  1644  001974  6E2C               	movwf	delay@x+1,c
  1645  001976  0E00               	movlw	0
  1646  001978  6E2B               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  00197A  0E00               	movlw	0
  1650  00197C  6E2C               	movwf	delay@x+1,c
  1651  00197E  0E00               	movlw	0
  1652  001980  6E2B               	movwf	delay@x,c
  1653  001982  D00A               	goto	l237
  1654  001984                     l1442:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001984  0E0B               	movlw	11
  1658  001986  6E2A               	movwf	??_delay& (0+255),c
  1659  001988  0E62               	movlw	98
  1660  00198A                     u1567:
  1661  00198A  2EE8               	decfsz	wreg,f,c
  1662  00198C  D7FE               	goto	u1567
  1663  00198E  2E2A               	decfsz	??_delay& (0+255),f,c
  1664  001990  D7FC               	goto	u1567
  1665  001992  D000               	nop2	
  1666  001994  4A2B               	infsnz	delay@x,f,c
  1667  001996  2A2C               	incf	delay@x+1,f,c
  1668  001998                     l237:
  1669  001998  5028               	movf	delay@ms,w,c
  1670  00199A  5C2B               	subwf	delay@x,w,c
  1671  00199C  5029               	movf	delay@ms+1,w,c
  1672  00199E  582C               	subwfb	delay@x+1,w,c
  1673  0019A0  A0D8               	btfss	status,0,c
  1674  0019A2  D7F0               	goto	l1442
  1675  0019A4  0012               	return		;funcret
  1676  0019A6                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _AlgorithmSelection *****************
  1695 ;; Defined at:
  1696 ;;		line 112 in file "user.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_InitApp
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001A46                     __ptext9:
  1726                           	opt stack 0
  1727  001A46                     _AlgorithmSelection:
  1728                           	opt stack 25
  1729                           
  1730                           ;user.c: 114: ADCON0 = 0b00100111;
  1731                           
  1732                           ;incstack = 0
  1733  001A46  0E27               	movlw	39
  1734  001A48  6EC2               	movwf	4034,c	;volatile
  1735                           
  1736                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1737  001A4A  82C2               	bsf	4034,1,c	;volatile
  1738                           
  1739                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1740  001A4C  D000               	goto	l246
  1741  001A4E                     l246:
  1742  001A4E  B2C2               	btfsc	4034,1,c	;volatile
  1743  001A50  D7FE               	goto	l246
  1744                           
  1745                           ;user.c: 119: if(ADRESL > 0b10000000)
  1746  001A52  0E80               	movlw	128
  1747  001A54  64C3               	cpfsgt	4035,c	;volatile
  1748  001A56  D002               	goto	l1032
  1749                           
  1750                           ;user.c: 120: algorithm = LEFTWALL;
  1751  001A58  0E00               	movlw	0
  1752  001A5A  D001               	goto	L5
  1753  001A5C                     l1032:
  1754                           
  1755                           ;user.c: 121: else
  1756                           ;user.c: 122: algorithm = RIGHTWALL;
  1757  001A5C  0E01               	movlw	1
  1758  001A5E                     L5:
  1759  001A5E  6E55               	movwf	_algorithm,c
  1760  001A60  D000               	goto	l251
  1761  001A62                     l251:
  1762  001A62  0012               	return		;funcret
  1763  001A64                     __end_of_AlgorithmSelection:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _ConfigureOscillator *****************
  1782 ;; Defined at:
  1783 ;;		line 24 in file "system.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text10
  1812  001ADA                     __ptext10:
  1813                           	opt stack 0
  1814  001ADA                     _ConfigureOscillator:
  1815                           	opt stack 26
  1816                           
  1817                           ;system.c: 29: OSCCON = 0b01111100;
  1818                           
  1819                           ;incstack = 0
  1820  001ADA  0E7C               	movlw	124
  1821  001ADC  6ED3               	movwf	4051,c	;volatile
  1822                           
  1823                           ;system.c: 31: OSCTUNE = 0b01001111;
  1824  001ADE  0E4F               	movlw	79
  1825  001AE0  6E9B               	movwf	3995,c	;volatile
  1826  001AE2  0012               	return		;funcret
  1827  001AE4                     __end_of_ConfigureOscillator:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _low_isr *****************
  1846 ;; Defined at:
  1847 ;;		line 209 in file "interrupts.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:       17 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		Interrupt level 1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	intcodelo
  1876  000018                     __pintcodelo:
  1877                           	opt stack 0
  1878  000018                     _low_isr:
  1879                           	opt stack 24
  1880                           
  1881                           ;incstack = 0
  1882  000018  CFD8 F001          	movff	status,??_low_isr
  1883  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1884  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1885  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1886  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1887  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1888  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1889  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1890  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1891  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1892  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1893  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1894  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1895  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1896  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1897  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1898  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1899  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1900  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1901  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1902  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1903  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1904  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1905  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1906  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1907  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1908  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1909  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1910  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1911  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1912  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1913  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1914  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1915  00009C  C001  FFD8         	movff	??_low_isr,status
  1916  0000A0  0010               	retfie	
  1917  0000A2                     __end_of_low_isr:
  1918                           	opt stack 0
  1919                           pclatu	equ	0xFFB
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon2	equ	0xFF1
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           bsr	equ	0xFE0
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _high_isr *****************
  1943 ;; Defined at:
  1944 ;;		line 82 in file "interrupts.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		_KController
  1967 ;;		_Reversing
  1968 ;;		_forward
  1969 ;;		_merge
  1970 ;;		_motorCounterUpdate
  1971 ;;		_moveMouse
  1972 ;;		_rotate
  1973 ;; This function is called by:
  1974 ;;		Interrupt level 2
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	intcode
  1979  000008                     __pintcode:
  1980                           	opt stack 0
  1981  000008                     _high_isr:
  1982                           	opt stack 24
  1983                           
  1984                           ;incstack = 0
  1985  000008  CFFA F01A          	movff	pclath,??_high_isr
  1986  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1987  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1988  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  1989                           pclatu	equ	0xFFB
  1990                           pclath	equ	0xFFA
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           prodh	equ	0xFF4
  1996                           prodl	equ	0xFF3
  1997                           intcon	equ	0xFF2
  1998                           intcon2	equ	0xFF1
  1999                           postinc0	equ	0xFEE
  2000                           fsr0h	equ	0xFEA
  2001                           fsr0l	equ	0xFE9
  2002                           wreg	equ	0xFE8
  2003                           fsr1h	equ	0xFE2
  2004                           fsr1l	equ	0xFE1
  2005                           bsr	equ	0xFE0
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           fsr2h	equ	0xFDA
  2009                           fsr2l	equ	0xFD9
  2010                           status	equ	0xFD8
  2011                           
  2012                           	psect	intcode_body
  2013  00100A                     __pintcode_body:
  2014                           	opt stack 24
  2015  00100A                     int_func:
  2016                           	opt stack 24
  2017  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2018  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2019  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2020  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2021  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2022  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2023  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2024  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2025  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2026  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2027  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2028  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2029                           
  2030                           ;interrupts.c: 101: if(INTCONbits.TMR0IF == 1)
  2031  001038  A4F2               	btfss	intcon,2,c	;volatile
  2032  00103A  D114               	goto	i2l83
  2033                           
  2034                           ;interrupts.c: 102: {
  2035                           ;interrupts.c: 103: if(MotorDelayCounter > 2)
  2036  00103C  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2037  00103E  D10E               	goto	i2l1684
  2038  001040  504A               	movf	_MotorDelayCounter+1,w,c
  2039  001042  E104               	bnz	i2u107_40
  2040  001044  0E03               	movlw	3
  2041  001046  5C49               	subwf	_MotorDelayCounter,w,c
  2042  001048  A0D8               	btfss	status,0,c
  2043  00104A  D108               	goto	i2l1684
  2044  00104C                     i2u107_40:
  2045                           
  2046                           ;interrupts.c: 104: {
  2047                           ;interrupts.c: 106: if (ForwardCounter > 0)
  2048  00104C  BE46               	btfsc	_ForwardCounter+1,7,c
  2049  00104E  D008               	goto	i2l1592
  2050  001050  5046               	movf	_ForwardCounter+1,w,c
  2051  001052  E103               	bnz	i2u108_40
  2052  001054  0445               	decf	_ForwardCounter,w,c
  2053  001056  A0D8               	btfss	status,0,c
  2054  001058  D003               	goto	i2l1592
  2055  00105A                     i2u108_40:
  2056                           
  2057                           ;interrupts.c: 107: forward();
  2058  00105A  EC32  F00D         	call	_forward	;wreg free
  2059  00105E  D0F2               	goto	i2l56
  2060  001060                     i2l1592:
  2061                           
  2062                           ;interrupts.c: 108: else if (ReverseCounter > 0)
  2063  001060  BE4E               	btfsc	_ReverseCounter+1,7,c
  2064  001062  D008               	goto	i2l1596
  2065  001064  504E               	movf	_ReverseCounter+1,w,c
  2066  001066  E103               	bnz	i2u109_40
  2067  001068  044D               	decf	_ReverseCounter,w,c
  2068  00106A  A0D8               	btfss	status,0,c
  2069  00106C  D003               	goto	i2l1596
  2070  00106E                     i2u109_40:
  2071                           
  2072                           ;interrupts.c: 109: Reversing();
  2073  00106E  EC40  F00D         	call	_Reversing	;wreg free
  2074  001072  D0E8               	goto	i2l56
  2075  001074                     i2l1596:
  2076                           
  2077                           ;interrupts.c: 110: else if(RotateCounter > 0)
  2078  001074  BE50               	btfsc	_RotateCounter+1,7,c
  2079  001076  D020               	goto	i2l1608
  2080  001078  5050               	movf	_RotateCounter+1,w,c
  2081  00107A  E103               	bnz	i2u110_40
  2082  00107C  044F               	decf	_RotateCounter,w,c
  2083  00107E  A0D8               	btfss	status,0,c
  2084  001080  D01B               	goto	i2l1608
  2085  001082                     i2u110_40:
  2086                           
  2087                           ;interrupts.c: 111: {
  2088                           ;interrupts.c: 112: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2089  001082  BE42               	btfsc	_sensorValue+5,7,c
  2090  001084  D006               	goto	i2l1600
  2091  001086  0E21               	movlw	33
  2092  001088  5C41               	subwf	_sensorValue+4,w,c
  2093  00108A  0E03               	movlw	3
  2094  00108C  5842               	subwfb	_sensorValue+5,w,c
  2095  00108E  B0D8               	btfsc	status,0,c
  2096  001090  D008               	goto	i2l1602
  2097  001092                     i2l1600:
  2098  001092  BE44               	btfsc	_sensorValue+7,7,c
  2099  001094  D00D               	goto	i2l1606
  2100  001096  0E21               	movlw	33
  2101  001098  5C43               	subwf	_sensorValue+6,w,c
  2102  00109A  0E03               	movlw	3
  2103  00109C  5844               	subwfb	_sensorValue+7,w,c
  2104  00109E  A0D8               	btfss	status,0,c
  2105  0010A0  D007               	goto	i2l1606
  2106  0010A2                     i2l1602:
  2107                           
  2108                           ;interrupts.c: 114: ReverseCounter = 15;
  2109  0010A2  0E00               	movlw	0
  2110  0010A4  6E4E               	movwf	_ReverseCounter+1,c
  2111  0010A6  0E0F               	movlw	15
  2112  0010A8  6E4D               	movwf	_ReverseCounter,c
  2113                           
  2114                           ;interrupts.c: 115: Reversing();
  2115  0010AA  EC40  F00D         	call	_Reversing	;wreg free
  2116                           
  2117                           ;interrupts.c: 116: } else {
  2118  0010AE  D0CA               	goto	i2l56
  2119  0010B0                     i2l1606:
  2120                           
  2121                           ;interrupts.c: 117: rotate(rotatingSide);
  2122  0010B0  5057               	movf	_rotatingSide,w,c
  2123  0010B2  EC9B  F00C         	call	_rotate
  2124                           
  2125                           ;interrupts.c: 118: }
  2126                           ;interrupts.c: 119: }
  2127  0010B6  D0C6               	goto	i2l56
  2128  0010B8                     i2l1608:
  2129                           
  2130                           ;interrupts.c: 120: else if (LTurnCounter > 0 || RTurnCounter > 0) {
  2131  0010B8  BE48               	btfsc	_LTurnCounter+1,7,c
  2132  0010BA  D005               	goto	i2l1610
  2133  0010BC  5048               	movf	_LTurnCounter+1,w,c
  2134  0010BE  E102               	bnz	i2u113_41
  2135  0010C0  0447               	decf	_LTurnCounter,w,c
  2136  0010C2  B0D8               	btfsc	status,0,c
  2137  0010C4                     i2u113_41:
  2138  0010C4  D0BF               	goto	i2l56
  2139  0010C6                     i2l1610:
  2140  0010C6  BE4C               	btfsc	_RTurnCounter+1,7,c
  2141  0010C8  D007               	goto	i2l1612
  2142  0010CA  504C               	movf	_RTurnCounter+1,w,c
  2143  0010CC  E104               	bnz	i2u114_40
  2144  0010CE  044B               	decf	_RTurnCounter,w,c
  2145  0010D0  B0D8               	btfsc	status,0,c
  2146  0010D2  D0B8               	goto	i2l56
  2147  0010D4  D001               	goto	i2l1612
  2148  0010D6                     i2u114_40:
  2149                           
  2150                           ;interrupts.c: 122: }
  2151  0010D6  D0B6               	goto	i2l56
  2152  0010D8                     i2l1612:
  2153                           
  2154                           ;interrupts.c: 123: else if (sensorValue[0] < 70 && algorithm == LEFTWALL)
  2155  0010D8  BE3E               	btfsc	_sensorValue+1,7,c
  2156  0010DA  D006               	goto	i2l1614
  2157  0010DC  503E               	movf	_sensorValue+1,w,c
  2158  0010DE  E11E               	bnz	i2l1630
  2159  0010E0  0E46               	movlw	70
  2160  0010E2  5C3D               	subwf	_sensorValue,w,c
  2161  0010E4  B0D8               	btfsc	status,0,c
  2162  0010E6  D01A               	goto	i2l1630
  2163  0010E8                     i2l1614:
  2164  0010E8  5055               	movf	_algorithm,w,c
  2165  0010EA  A4D8               	btfss	status,2,c
  2166  0010EC  D017               	goto	i2l1630
  2167                           
  2168                           ;interrupts.c: 126: {
  2169                           ;interrupts.c: 127: if(justTurned == 0)
  2170  0010EE  5056               	movf	_justTurned,w,c
  2171  0010F0  A4D8               	btfss	status,2,c
  2172  0010F2  D004               	goto	i2l1620
  2173                           
  2174                           ;interrupts.c: 128: ForwardCounter = 420;
  2175  0010F4  0E01               	movlw	1
  2176  0010F6  6E46               	movwf	_ForwardCounter+1,c
  2177  0010F8  0EA4               	movlw	164
  2178  0010FA  D003               	goto	L6
  2179  0010FC                     i2l1620:
  2180                           
  2181                           ;interrupts.c: 129: else
  2182                           ;interrupts.c: 130: ForwardCounter = 380;
  2183  0010FC  0E01               	movlw	1
  2184  0010FE  6E46               	movwf	_ForwardCounter+1,c
  2185  001100  0E7C               	movlw	124
  2186  001102                     L6:
  2187  001102  6E45               	movwf	_ForwardCounter,c
  2188  001104  D000               	goto	i2l1622
  2189  001106                     i2l1622:
  2190                           
  2191                           ;interrupts.c: 132: forward();
  2192  001106  EC32  F00D         	call	_forward	;wreg free
  2193                           
  2194                           ;interrupts.c: 133: RotateCounter = 167;
  2195  00110A  0E00               	movlw	0
  2196  00110C  6E50               	movwf	_RotateCounter+1,c
  2197  00110E  0EA7               	movlw	167
  2198  001110  6E4F               	movwf	_RotateCounter,c
  2199                           
  2200                           ;interrupts.c: 134: rotatingSide = LEFT;
  2201  001112  0E00               	movlw	0
  2202  001114  D039               	goto	L7
  2203  001116                     i2l1628:
  2204                           
  2205                           ;interrupts.c: 135: justTurned = 1;
  2206  001116  0E01               	movlw	1
  2207  001118  6E56               	movwf	_justTurned,c
  2208                           
  2209                           ;interrupts.c: 138: }
  2210  00111A  D094               	goto	i2l56
  2211  00111C                     i2l1630:
  2212                           
  2213                           ;interrupts.c: 139: else if (sensorValue[1] < 70 && (sensorValue[2] > 100 && sensorValue
      +                          [3] > 100)
  2214                           ;interrupts.c: 140: && sensorValue[0] > 70 && algorithm == LEFTWALL)
  2215  00111C  BE40               	btfsc	_sensorValue+3,7,c
  2216  00111E  D006               	goto	i2l1632
  2217  001120  5040               	movf	_sensorValue+3,w,c
  2218  001122  E134               	bnz	i2l1654
  2219  001124  0E46               	movlw	70
  2220  001126  5C3F               	subwf	_sensorValue+2,w,c
  2221  001128  B0D8               	btfsc	status,0,c
  2222  00112A  D030               	goto	i2l1654
  2223  00112C                     i2l1632:
  2224  00112C  BE42               	btfsc	_sensorValue+5,7,c
  2225  00112E  D02E               	goto	i2l1654
  2226  001130  5042               	movf	_sensorValue+5,w,c
  2227  001132  E104               	bnz	i2u119_40
  2228  001134  0E65               	movlw	101
  2229  001136  5C41               	subwf	_sensorValue+4,w,c
  2230  001138  A0D8               	btfss	status,0,c
  2231  00113A  D028               	goto	i2l1654
  2232  00113C                     i2u119_40:
  2233  00113C  BE44               	btfsc	_sensorValue+7,7,c
  2234  00113E  D026               	goto	i2l1654
  2235  001140  5044               	movf	_sensorValue+7,w,c
  2236  001142  E104               	bnz	i2u120_40
  2237  001144  0E65               	movlw	101
  2238  001146  5C43               	subwf	_sensorValue+6,w,c
  2239  001148  A0D8               	btfss	status,0,c
  2240  00114A  D020               	goto	i2l1654
  2241  00114C                     i2u120_40:
  2242  00114C  BE3E               	btfsc	_sensorValue+1,7,c
  2243  00114E  D01E               	goto	i2l1654
  2244  001150  503E               	movf	_sensorValue+1,w,c
  2245  001152  E104               	bnz	i2u121_40
  2246  001154  0E47               	movlw	71
  2247  001156  5C3D               	subwf	_sensorValue,w,c
  2248  001158  A0D8               	btfss	status,0,c
  2249  00115A  D018               	goto	i2l1654
  2250  00115C                     i2u121_40:
  2251  00115C  5055               	movf	_algorithm,w,c
  2252  00115E  A4D8               	btfss	status,2,c
  2253  001160  D015               	goto	i2l1654
  2254                           
  2255                           ;interrupts.c: 141: {
  2256                           ;interrupts.c: 142: if(justTurned == 0)
  2257  001162  5056               	movf	_justTurned,w,c
  2258  001164  A4D8               	btfss	status,2,c
  2259  001166  D004               	goto	i2l1644
  2260                           
  2261                           ;interrupts.c: 143: ForwardCounter = 420;
  2262  001168  0E01               	movlw	1
  2263  00116A  6E46               	movwf	_ForwardCounter+1,c
  2264  00116C  0EA4               	movlw	164
  2265  00116E  D003               	goto	L8
  2266  001170                     i2l1644:
  2267                           
  2268                           ;interrupts.c: 144: else
  2269                           ;interrupts.c: 145: ForwardCounter = 380;
  2270  001170  0E01               	movlw	1
  2271  001172  6E46               	movwf	_ForwardCounter+1,c
  2272  001174  0E7C               	movlw	124
  2273  001176                     L8:
  2274  001176  6E45               	movwf	_ForwardCounter,c
  2275  001178  D000               	goto	i2l1646
  2276  00117A                     i2l1646:
  2277                           
  2278                           ;interrupts.c: 146: forward();
  2279  00117A  EC32  F00D         	call	_forward	;wreg free
  2280                           
  2281                           ;interrupts.c: 147: RotateCounter = 167;
  2282  00117E  0E00               	movlw	0
  2283  001180  6E50               	movwf	_RotateCounter+1,c
  2284  001182  0EA7               	movlw	167
  2285  001184  6E4F               	movwf	_RotateCounter,c
  2286                           
  2287                           ;interrupts.c: 148: rotatingSide = RIGHT;
  2288  001186  0E01               	movlw	1
  2289  001188                     L7:
  2290  001188  6E57               	movwf	_rotatingSide,c
  2291  00118A  D7C5               	goto	i2l1628
  2292  00118C                     i2l1654:
  2293                           
  2294                           ;interrupts.c: 153: else if ((sensorValue[0] > 70 && sensorValue[1] > 100 )
  2295                           ;interrupts.c: 154: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2296  00118C  BE3E               	btfsc	_sensorValue+1,7,c
  2297  00118E  D021               	goto	i2l1666
  2298  001190  503E               	movf	_sensorValue+1,w,c
  2299  001192  E104               	bnz	i2u124_40
  2300  001194  0E47               	movlw	71
  2301  001196  5C3D               	subwf	_sensorValue,w,c
  2302  001198  A0D8               	btfss	status,0,c
  2303  00119A  D01B               	goto	i2l1666
  2304  00119C                     i2u124_40:
  2305  00119C  BE40               	btfsc	_sensorValue+3,7,c
  2306  00119E  D019               	goto	i2l1666
  2307  0011A0  5040               	movf	_sensorValue+3,w,c
  2308  0011A2  E104               	bnz	i2u125_40
  2309  0011A4  0E65               	movlw	101
  2310  0011A6  5C3F               	subwf	_sensorValue+2,w,c
  2311  0011A8  A0D8               	btfss	status,0,c
  2312  0011AA  D013               	goto	i2l1666
  2313  0011AC                     i2u125_40:
  2314  0011AC  BE42               	btfsc	_sensorValue+5,7,c
  2315  0011AE  D00D               	goto	i2l1662
  2316  0011B0  0EA4               	movlw	164
  2317  0011B2  5C41               	subwf	_sensorValue+4,w,c
  2318  0011B4  0E01               	movlw	1
  2319  0011B6  5842               	subwfb	_sensorValue+5,w,c
  2320  0011B8  B0D8               	btfsc	status,0,c
  2321  0011BA  BE44               	btfsc	_sensorValue+7,7,c
  2322  0011BC  D006               	goto	i2l1662
  2323  0011BE  0EA4               	movlw	164
  2324  0011C0  5C43               	subwf	_sensorValue+6,w,c
  2325  0011C2  0E01               	movlw	1
  2326  0011C4  5844               	subwfb	_sensorValue+7,w,c
  2327  0011C6  B0D8               	btfsc	status,0,c
  2328  0011C8  D004               	goto	i2l1666
  2329  0011CA                     i2l1662:
  2330                           
  2331                           ;interrupts.c: 155: {
  2332                           ;interrupts.c: 156: KController();
  2333  0011CA  ECC5  F00B         	call	_KController	;wreg free
  2334                           
  2335                           ;interrupts.c: 157: justTurned = 0;
  2336  0011CE  0E00               	movlw	0
  2337  0011D0  D7A3               	goto	L9
  2338  0011D2                     i2l1666:
  2339                           
  2340                           ;interrupts.c: 159: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2341  0011D2  BE3E               	btfsc	_sensorValue+1,7,c
  2342  0011D4  D02C               	goto	i2l1680
  2343  0011D6  503E               	movf	_sensorValue+1,w,c
  2344  0011D8  E104               	bnz	i2u128_40
  2345  0011DA  0E47               	movlw	71
  2346  0011DC  5C3D               	subwf	_sensorValue,w,c
  2347  0011DE  A0D8               	btfss	status,0,c
  2348  0011E0  D026               	goto	i2l1680
  2349  0011E2                     i2u128_40:
  2350  0011E2  BE40               	btfsc	_sensorValue+3,7,c
  2351  0011E4  D024               	goto	i2l1680
  2352  0011E6  5040               	movf	_sensorValue+3,w,c
  2353  0011E8  E104               	bnz	i2u129_40
  2354  0011EA  0E47               	movlw	71
  2355  0011EC  5C3F               	subwf	_sensorValue+2,w,c
  2356  0011EE  A0D8               	btfss	status,0,c
  2357  0011F0  D01E               	goto	i2l1680
  2358  0011F2                     i2u129_40:
  2359  0011F2  BE42               	btfsc	_sensorValue+5,7,c
  2360  0011F4  D01C               	goto	i2l1680
  2361  0011F6  0EA5               	movlw	165
  2362  0011F8  5C41               	subwf	_sensorValue+4,w,c
  2363  0011FA  0E01               	movlw	1
  2364  0011FC  5842               	subwfb	_sensorValue+5,w,c
  2365  0011FE  B0D8               	btfsc	status,0,c
  2366  001200  BE44               	btfsc	_sensorValue+7,7,c
  2367  001202  D015               	goto	i2l1680
  2368  001204  0EA5               	movlw	165
  2369  001206  5C43               	subwf	_sensorValue+6,w,c
  2370  001208  0E01               	movlw	1
  2371  00120A  5844               	subwfb	_sensorValue+7,w,c
  2372  00120C  A0D8               	btfss	status,0,c
  2373  00120E  D00F               	goto	i2l1680
  2374  001210  BE50               	btfsc	_RotateCounter+1,7,c
  2375  001212  D005               	goto	i2l1676
  2376  001214  5050               	movf	_RotateCounter+1,w,c
  2377  001216  E10B               	bnz	i2l1680
  2378  001218  044F               	decf	_RotateCounter,w,c
  2379  00121A  B0D8               	btfsc	status,0,c
  2380  00121C  D008               	goto	i2l1680
  2381  00121E                     i2l1676:
  2382                           
  2383                           ;interrupts.c: 160: {
  2384                           ;interrupts.c: 161: RotateCounter = 167*2;
  2385  00121E  0E01               	movlw	1
  2386  001220  6E50               	movwf	_RotateCounter+1,c
  2387  001222  0E4E               	movlw	78
  2388  001224  6E4F               	movwf	_RotateCounter,c
  2389                           
  2390                           ;interrupts.c: 162: rotate(rotatingSide);
  2391  001226  5057               	movf	_rotatingSide,w,c
  2392  001228  EC9B  F00C         	call	_rotate
  2393                           
  2394                           ;interrupts.c: 163: }
  2395  00122C  D00B               	goto	i2l56
  2396  00122E                     i2l1680:
  2397                           
  2398                           ;interrupts.c: 190: else {
  2399                           ;interrupts.c: 191: motorCounterUpdate(RIGHT,0);
  2400  00122E  0E00               	movlw	0
  2401  001230  6E12               	movwf	motorCounterUpdate@reverse,c
  2402  001232  0E01               	movlw	1
  2403  001234  EC4B  F00B         	call	_motorCounterUpdate
  2404                           
  2405                           ;interrupts.c: 192: motorCounterUpdate(LEFT,0);
  2406  001238  0E00               	movlw	0
  2407  00123A  6E12               	movwf	motorCounterUpdate@reverse,c
  2408  00123C  0E00               	movlw	0
  2409  00123E  EC4B  F00B         	call	_motorCounterUpdate
  2410  001242  D000               	goto	i2l56
  2411  001244                     i2l56:
  2412                           
  2413                           ;interrupts.c: 193: }
  2414                           ;interrupts.c: 194: moveMouse(merge(LMotorCounter,RMotorCounter));
  2415  001244  C054  F012         	movff	_RMotorCounter,merge@right
  2416  001248  5053               	movf	_LMotorCounter,w,c
  2417  00124A  EC65  F00D         	call	_merge
  2418  00124E  EC72  F00D         	call	_moveMouse
  2419                           
  2420                           ;interrupts.c: 195: MotorDelayCounter = 0;
  2421  001252  0E00               	movlw	0
  2422  001254  6E4A               	movwf	_MotorDelayCounter+1,c
  2423  001256  0E00               	movlw	0
  2424  001258  6E49               	movwf	_MotorDelayCounter,c
  2425  00125A  D000               	goto	i2l1684
  2426  00125C                     i2l1684:
  2427                           
  2428                           ;interrupts.c: 197: }
  2429                           ;interrupts.c: 199: MotorDelayCounter++;
  2430  00125C  4A49               	infsnz	_MotorDelayCounter,f,c
  2431  00125E  2A4A               	incf	_MotorDelayCounter+1,f,c
  2432                           
  2433                           ;interrupts.c: 200: INTCONbits.TMR0IF = 0;
  2434  001260  94F2               	bcf	intcon,2,c	;volatile
  2435  001262  D000               	goto	i2l83
  2436  001264                     i2l83:
  2437  001264  C027  FFF5         	movff	??_high_isr+13,tablat
  2438  001268  C026  FFF8         	movff	??_high_isr+12,tblptru
  2439  00126C  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2440  001270  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2441  001274  C023  FFF4         	movff	??_high_isr+9,prodh
  2442  001278  C022  FFF3         	movff	??_high_isr+8,prodl
  2443  00127C  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2444  001280  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2445  001284  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2446  001288  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2447  00128C  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2448  001290  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2449  001294  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2450  001298  C01A  FFFA         	movff	??_high_isr,pclath
  2451  00129C  0011               	retfie		f
  2452  00129E                     __end_of_high_isr:
  2453                           	opt stack 0
  2454                           pclatu	equ	0xFFB
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           intcon2	equ	0xFF1
  2464                           postinc0	equ	0xFEE
  2465                           fsr0h	equ	0xFEA
  2466                           fsr0l	equ	0xFE9
  2467                           wreg	equ	0xFE8
  2468                           fsr1h	equ	0xFE2
  2469                           fsr1l	equ	0xFE1
  2470                           bsr	equ	0xFE0
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _rotate *****************
  2478 ;; Defined at:
  2479 ;;		line 346 in file "interrupts.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  side            1    wreg     enum E4082
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  side            1   19[COMRAM] enum E4082
  2484 ;; Return value:  Size  Location     Type
  2485 ;;		None               void
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;Total ram usage:        1 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		_motorCounterUpdate
  2502 ;; This function is called by:
  2503 ;;		_high_isr
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text13
  2508  001936                     __ptext13:
  2509                           	opt stack 0
  2510  001936                     _rotate:
  2511                           	opt stack 24
  2512                           
  2513                           ;incstack = 0
  2514                           ;rotate@side stored from wreg
  2515  001936  6E14               	movwf	rotate@side,c
  2516                           
  2517                           ;interrupts.c: 348: if (side == LEFT){
  2518  001938  5014               	movf	rotate@side,w,c
  2519  00193A  A4D8               	btfss	status,2,c
  2520  00193C  D00B               	goto	i2l1488
  2521                           
  2522                           ;interrupts.c: 349: motorCounterUpdate(RIGHT,0);
  2523  00193E  0E00               	movlw	0
  2524  001940  6E12               	movwf	motorCounterUpdate@reverse,c
  2525  001942  0E01               	movlw	1
  2526  001944  EC4B  F00B         	call	_motorCounterUpdate
  2527                           
  2528                           ;interrupts.c: 350: motorCounterUpdate(LEFT,1);
  2529  001948  0E01               	movlw	1
  2530  00194A  6E12               	movwf	motorCounterUpdate@reverse,c
  2531  00194C  0E00               	movlw	0
  2532  00194E  EC4B  F00B         	call	_motorCounterUpdate
  2533                           
  2534                           ;interrupts.c: 351: } else {
  2535  001952  D00B               	goto	i2l1490
  2536  001954                     i2l1488:
  2537                           
  2538                           ;interrupts.c: 352: motorCounterUpdate(LEFT,0);
  2539  001954  0E00               	movlw	0
  2540  001956  6E12               	movwf	motorCounterUpdate@reverse,c
  2541  001958  0E00               	movlw	0
  2542  00195A  EC4B  F00B         	call	_motorCounterUpdate
  2543                           
  2544                           ;interrupts.c: 353: motorCounterUpdate(RIGHT,1);
  2545  00195E  0E01               	movlw	1
  2546  001960  6E12               	movwf	motorCounterUpdate@reverse,c
  2547  001962  0E01               	movlw	1
  2548  001964  EC4B  F00B         	call	_motorCounterUpdate
  2549  001968  D000               	goto	i2l1490
  2550  00196A                     i2l1490:
  2551                           
  2552                           ;interrupts.c: 354: }
  2553                           ;interrupts.c: 355: RotateCounter--;
  2554  00196A  064F               	decf	_RotateCounter,f,c
  2555  00196C  A0D8               	btfss	status,0,c
  2556  00196E  0650               	decf	_RotateCounter+1,f,c
  2557  001970  0012               	return		;funcret
  2558  001972                     __end_of_rotate:
  2559                           	opt stack 0
  2560                           pclatu	equ	0xFFB
  2561                           pclath	equ	0xFFA
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           intcon2	equ	0xFF1
  2570                           postinc0	equ	0xFEE
  2571                           fsr0h	equ	0xFEA
  2572                           fsr0l	equ	0xFE9
  2573                           wreg	equ	0xFE8
  2574                           fsr1h	equ	0xFE2
  2575                           fsr1l	equ	0xFE1
  2576                           bsr	equ	0xFE0
  2577                           postinc2	equ	0xFDE
  2578                           postdec2	equ	0xFDD
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _forward *****************
  2584 ;; Defined at:
  2585 ;;		line 377 in file "interrupts.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;		None               void
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    1
  2606 ;; This function calls:
  2607 ;;		_motorCounterUpdate
  2608 ;; This function is called by:
  2609 ;;		_high_isr
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text14
  2614  001A64                     __ptext14:
  2615                           	opt stack 0
  2616  001A64                     _forward:
  2617                           	opt stack 24
  2618                           
  2619                           ;interrupts.c: 379: motorCounterUpdate(RIGHT,0);
  2620                           
  2621                           ;incstack = 0
  2622  001A64  0E00               	movlw	0
  2623  001A66  6E12               	movwf	motorCounterUpdate@reverse,c
  2624  001A68  0E01               	movlw	1
  2625  001A6A  EC4B  F00B         	call	_motorCounterUpdate
  2626                           
  2627                           ;interrupts.c: 380: motorCounterUpdate(LEFT,0);
  2628  001A6E  0E00               	movlw	0
  2629  001A70  6E12               	movwf	motorCounterUpdate@reverse,c
  2630  001A72  0E00               	movlw	0
  2631  001A74  EC4B  F00B         	call	_motorCounterUpdate
  2632                           
  2633                           ;interrupts.c: 381: ForwardCounter--;
  2634  001A78  0645               	decf	_ForwardCounter,f,c
  2635  001A7A  A0D8               	btfss	status,0,c
  2636  001A7C  0646               	decf	_ForwardCounter+1,f,c
  2637  001A7E  0012               	return		;funcret
  2638  001A80                     __end_of_forward:
  2639                           	opt stack 0
  2640                           pclatu	equ	0xFFB
  2641                           pclath	equ	0xFFA
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           intcon2	equ	0xFF1
  2650                           postinc0	equ	0xFEE
  2651                           fsr0h	equ	0xFEA
  2652                           fsr0l	equ	0xFE9
  2653                           wreg	equ	0xFE8
  2654                           fsr1h	equ	0xFE2
  2655                           fsr1l	equ	0xFE1
  2656                           bsr	equ	0xFE0
  2657                           postinc2	equ	0xFDE
  2658                           postdec2	equ	0xFDD
  2659                           fsr2h	equ	0xFDA
  2660                           fsr2l	equ	0xFD9
  2661                           status	equ	0xFD8
  2662                           
  2663 ;; *************** function _Reversing *****************
  2664 ;; Defined at:
  2665 ;;		line 370 in file "interrupts.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;		None               void
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        0 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    1
  2686 ;; This function calls:
  2687 ;;		_motorCounterUpdate
  2688 ;; This function is called by:
  2689 ;;		_high_isr
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text15
  2694  001A80                     __ptext15:
  2695                           	opt stack 0
  2696  001A80                     _Reversing:
  2697                           	opt stack 24
  2698                           
  2699                           ;interrupts.c: 372: motorCounterUpdate(RIGHT,1);
  2700                           
  2701                           ;incstack = 0
  2702  001A80  0E01               	movlw	1
  2703  001A82  6E12               	movwf	motorCounterUpdate@reverse,c
  2704  001A84  0E01               	movlw	1
  2705  001A86  EC4B  F00B         	call	_motorCounterUpdate
  2706                           
  2707                           ;interrupts.c: 373: motorCounterUpdate(LEFT,1);
  2708  001A8A  0E01               	movlw	1
  2709  001A8C  6E12               	movwf	motorCounterUpdate@reverse,c
  2710  001A8E  0E00               	movlw	0
  2711  001A90  EC4B  F00B         	call	_motorCounterUpdate
  2712                           
  2713                           ;interrupts.c: 374: ReverseCounter--;
  2714  001A94  064D               	decf	_ReverseCounter,f,c
  2715  001A96  A0D8               	btfss	status,0,c
  2716  001A98  064E               	decf	_ReverseCounter+1,f,c
  2717  001A9A  0012               	return		;funcret
  2718  001A9C                     __end_of_Reversing:
  2719                           	opt stack 0
  2720                           pclatu	equ	0xFFB
  2721                           pclath	equ	0xFFA
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           intcon	equ	0xFF2
  2729                           intcon2	equ	0xFF1
  2730                           postinc0	equ	0xFEE
  2731                           fsr0h	equ	0xFEA
  2732                           fsr0l	equ	0xFE9
  2733                           wreg	equ	0xFE8
  2734                           fsr1h	equ	0xFE2
  2735                           fsr1l	equ	0xFE1
  2736                           bsr	equ	0xFE0
  2737                           postinc2	equ	0xFDE
  2738                           postdec2	equ	0xFDD
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _KController *****************
  2744 ;; Defined at:
  2745 ;;		line 311 in file "interrupts.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  diff            2   23[COMRAM] int 
  2750 ;;  correctTo       1   22[COMRAM] enum E4082
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;Total ram usage:        5 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    1
  2767 ;; This function calls:
  2768 ;;		_ABS
  2769 ;;		_merge
  2770 ;;		_motorCounterUpdate
  2771 ;;		_moveMouse
  2772 ;; This function is called by:
  2773 ;;		_high_isr
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text16
  2778  00178A                     __ptext16:
  2779                           	opt stack 0
  2780  00178A                     _KController:
  2781                           	opt stack 24
  2782                           
  2783                           ;interrupts.c: 313: Side correctTo;
  2784                           ;interrupts.c: 314: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2785                           
  2786                           ;incstack = 0
  2787  00178A  EE20  F03F         	lfsr	2,_sensorValue+2
  2788  00178E  CFDE F015          	movff	postinc2,??_KController
  2789  001792  CFDD F016          	movff	postdec2,??_KController+1
  2790  001796  1E15               	comf	??_KController,f,c
  2791  001798  1E16               	comf	??_KController+1,f,c
  2792  00179A  4A15               	infsnz	??_KController,f,c
  2793  00179C  2A16               	incf	??_KController+1,f,c
  2794  00179E  503D               	movf	_sensorValue,w,c
  2795  0017A0  2415               	addwf	??_KController,w,c
  2796  0017A2  6E12               	movwf	ABS@x,c
  2797  0017A4  503E               	movf	_sensorValue+1,w,c
  2798  0017A6  2016               	addwfc	??_KController+1,w,c
  2799  0017A8  6E13               	movwf	ABS@x+1,c
  2800  0017AA  EC4E  F00D         	call	_ABS	;wreg free
  2801  0017AE  C012  F018         	movff	?_ABS,KController@diff
  2802  0017B2  C013  F019         	movff	?_ABS+1,KController@diff+1
  2803                           
  2804                           ;interrupts.c: 317: if(controllerSteps > 0)
  2805  0017B6  5058               	movf	_controllerSteps,w,c
  2806  0017B8  B4D8               	btfsc	status,2,c
  2807  0017BA  D00C               	goto	i2l1502
  2808                           
  2809                           ;interrupts.c: 318: {
  2810                           ;interrupts.c: 319: motorCounterUpdate(RIGHT,0);
  2811  0017BC  0E00               	movlw	0
  2812  0017BE  6E12               	movwf	motorCounterUpdate@reverse,c
  2813  0017C0  0E01               	movlw	1
  2814  0017C2  EC4B  F00B         	call	_motorCounterUpdate
  2815                           
  2816                           ;interrupts.c: 320: motorCounterUpdate(LEFT,0);
  2817  0017C6  0E00               	movlw	0
  2818  0017C8  6E12               	movwf	motorCounterUpdate@reverse,c
  2819  0017CA  0E00               	movlw	0
  2820  0017CC  EC4B  F00B         	call	_motorCounterUpdate
  2821                           
  2822                           ;interrupts.c: 321: controllerSteps--;
  2823  0017D0  0658               	decf	_controllerSteps,f,c
  2824                           
  2825                           ;interrupts.c: 322: return;
  2826  0017D2  D047               	goto	i2l138
  2827  0017D4                     i2l1502:
  2828                           
  2829                           ;interrupts.c: 323: }
  2830                           ;interrupts.c: 325: if(sensorValue[0] > sensorValue[1])
  2831  0017D4  503D               	movf	_sensorValue,w,c
  2832  0017D6  5C3F               	subwf	_sensorValue+2,w,c
  2833  0017D8  5040               	movf	_sensorValue+3,w,c
  2834  0017DA  0A80               	xorlw	128
  2835  0017DC  6E15               	movwf	??_KController& (0+255),c
  2836  0017DE  503E               	movf	_sensorValue+1,w,c
  2837  0017E0  0A80               	xorlw	128
  2838  0017E2  5815               	subwfb	??_KController& (0+255),w,c
  2839  0017E4  B0D8               	btfsc	status,0,c
  2840  0017E6  D00F               	goto	i2l1510
  2841                           
  2842                           ;interrupts.c: 326: {
  2843                           ;interrupts.c: 327: correctTo = LEFT;
  2844  0017E8  0E00               	movlw	0
  2845  0017EA  6E17               	movwf	KController@correctTo,c
  2846                           
  2847                           ;interrupts.c: 328: motorCounterUpdate(correctTo,0);
  2848  0017EC  0E00               	movlw	0
  2849  0017EE  6E12               	movwf	motorCounterUpdate@reverse,c
  2850  0017F0  5017               	movf	KController@correctTo,w,c
  2851  0017F2  EC4B  F00B         	call	_motorCounterUpdate
  2852                           
  2853                           ;interrupts.c: 329: moveMouse(merge(LMotorCounter,RMotorCounter));
  2854  0017F6  C054  F012         	movff	_RMotorCounter,merge@right
  2855  0017FA  5053               	movf	_LMotorCounter,w,c
  2856  0017FC  EC65  F00D         	call	_merge
  2857  001800  EC72  F00D         	call	_moveMouse
  2858                           
  2859                           ;interrupts.c: 330: }
  2860  001804  D00F               	goto	i2l1516
  2861  001806                     i2l1510:
  2862                           
  2863                           ;interrupts.c: 331: else
  2864                           ;interrupts.c: 332: {
  2865                           ;interrupts.c: 333: correctTo = RIGHT;
  2866  001806  0E01               	movlw	1
  2867  001808  6E17               	movwf	KController@correctTo,c
  2868                           
  2869                           ;interrupts.c: 334: motorCounterUpdate(correctTo,0);
  2870  00180A  0E00               	movlw	0
  2871  00180C  6E12               	movwf	motorCounterUpdate@reverse,c
  2872  00180E  5017               	movf	KController@correctTo,w,c
  2873  001810  EC4B  F00B         	call	_motorCounterUpdate
  2874                           
  2875                           ;interrupts.c: 335: moveMouse(merge(LMotorCounter,RMotorCounter));
  2876  001814  C054  F012         	movff	_RMotorCounter,merge@right
  2877  001818  5053               	movf	_LMotorCounter,w,c
  2878  00181A  EC65  F00D         	call	_merge
  2879  00181E  EC72  F00D         	call	_moveMouse
  2880  001822  D000               	goto	i2l1516
  2881  001824                     i2l1516:
  2882                           
  2883                           ;interrupts.c: 336: }
  2884                           ;interrupts.c: 338: if(diff > 150)
  2885  001824  BE19               	btfsc	KController@diff+1,7,c
  2886  001826  D008               	goto	i2l1520
  2887  001828  5019               	movf	KController@diff+1,w,c
  2888  00182A  E104               	bnz	i2u95_40
  2889  00182C  0E97               	movlw	151
  2890  00182E  5C18               	subwf	KController@diff,w,c
  2891  001830  A0D8               	btfss	status,0,c
  2892  001832  D002               	goto	i2l1520
  2893  001834                     i2u95_40:
  2894                           
  2895                           ;interrupts.c: 339: controllerSteps = 1;
  2896  001834  0E01               	movlw	1
  2897  001836  D013               	goto	L11
  2898  001838                     i2l1520:
  2899                           
  2900                           ;interrupts.c: 340: else if(diff <= 150 && diff > 20)
  2901  001838  BE19               	btfsc	KController@diff+1,7,c
  2902  00183A  D006               	goto	i2l1522
  2903  00183C  5019               	movf	KController@diff+1,w,c
  2904  00183E  E10E               	bnz	i2l1526
  2905  001840  0E97               	movlw	151
  2906  001842  5C18               	subwf	KController@diff,w,c
  2907  001844  B0D8               	btfsc	status,0,c
  2908  001846  D00A               	goto	i2l1526
  2909  001848                     i2l1522:
  2910  001848  BE19               	btfsc	KController@diff+1,7,c
  2911  00184A  D008               	goto	i2l1526
  2912  00184C  5019               	movf	KController@diff+1,w,c
  2913  00184E  E104               	bnz	i2u97_40
  2914  001850  0E15               	movlw	21
  2915  001852  5C18               	subwf	KController@diff,w,c
  2916  001854  A0D8               	btfss	status,0,c
  2917  001856  D002               	goto	i2l1526
  2918  001858                     i2u97_40:
  2919                           
  2920                           ;interrupts.c: 341: controllerSteps = 4;
  2921  001858  0E04               	movlw	4
  2922  00185A  D001               	goto	L11
  2923  00185C                     i2l1526:
  2924                           
  2925                           ;interrupts.c: 342: else
  2926                           ;interrupts.c: 343: controllerSteps = 8;
  2927  00185C  0E08               	movlw	8
  2928  00185E                     L11:
  2929  00185E  6E58               	movwf	_controllerSteps,c
  2930  001860  D000               	goto	i2l138
  2931  001862                     i2l138:
  2932  001862  0012               	return		;funcret
  2933  001864                     __end_of_KController:
  2934                           	opt stack 0
  2935                           pclatu	equ	0xFFB
  2936                           pclath	equ	0xFFA
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           prodh	equ	0xFF4
  2942                           prodl	equ	0xFF3
  2943                           intcon	equ	0xFF2
  2944                           intcon2	equ	0xFF1
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           wreg	equ	0xFE8
  2949                           fsr1h	equ	0xFE2
  2950                           fsr1l	equ	0xFE1
  2951                           bsr	equ	0xFE0
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _moveMouse *****************
  2959 ;; Defined at:
  2960 ;;		line 298 in file "interrupts.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  action          1    wreg     unsigned char 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  action          1   17[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        1 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		_high_isr
  2984 ;;		_KController
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text17
  2989  001AE4                     __ptext17:
  2990                           	opt stack 0
  2991  001AE4                     _moveMouse:
  2992                           	opt stack 25
  2993                           
  2994                           ;incstack = 0
  2995                           ;moveMouse@action stored from wreg
  2996  001AE4  6E12               	movwf	moveMouse@action,c
  2997                           
  2998                           ;interrupts.c: 300: LATC = action;
  2999  001AE6  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  3000  001AEA  0012               	return		;funcret
  3001  001AEC                     __end_of_moveMouse:
  3002                           	opt stack 0
  3003                           pclatu	equ	0xFFB
  3004                           pclath	equ	0xFFA
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           intcon	equ	0xFF2
  3012                           intcon2	equ	0xFF1
  3013                           postinc0	equ	0xFEE
  3014                           fsr0h	equ	0xFEA
  3015                           fsr0l	equ	0xFE9
  3016                           wreg	equ	0xFE8
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           bsr	equ	0xFE0
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _motorCounterUpdate *****************
  3027 ;; Defined at:
  3028 ;;		line 246 in file "interrupts.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  side            1    wreg     enum E4082
  3031 ;;  reverse         1   17[COMRAM] unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  side            1   18[COMRAM] enum E4082
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        2 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_high_isr
  3053 ;;		_KController
  3054 ;;		_rotate
  3055 ;;		_Reversing
  3056 ;;		_forward
  3057 ;;		_smoothTurn
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text18
  3062  001696                     __ptext18:
  3063                           	opt stack 0
  3064  001696                     _motorCounterUpdate:
  3065                           	opt stack 24
  3066                           
  3067                           ;incstack = 0
  3068                           ;motorCounterUpdate@side stored from wreg
  3069  001696  6E13               	movwf	motorCounterUpdate@side,c
  3070                           
  3071                           ;interrupts.c: 248: if(side == LEFT && reverse == 1)
  3072  001698  5013               	movf	motorCounterUpdate@side,w,c
  3073  00169A  A4D8               	btfss	status,2,c
  3074  00169C  D01B               	goto	i2l1372
  3075  00169E  0412               	decf	motorCounterUpdate@reverse,w,c
  3076  0016A0  B4D8               	btfsc	status,2,c
  3077  0016A2  D00B               	goto	i2l1370
  3078  0016A4  D017               	goto	i2l1372
  3079                           
  3080                           ;interrupts.c: 249: {
  3081                           ;interrupts.c: 250: switch(LMotorCounter)
  3082  0016A6  D009               	goto	i2l1370
  3083  0016A8                     i2l1360:
  3084  0016A8  0E02               	movlw	2
  3085  0016AA  D004               	goto	L14
  3086  0016AC                     i2l1362:
  3087  0016AC  0E04               	movlw	4
  3088  0016AE  D002               	goto	L14
  3089                           
  3090                           ;interrupts.c: 254: case 0b00000100: LMotorCounter = 0b00001000; break;
  3091  0016B0  D03E               	goto	i2l1404
  3092                           
  3093                           ;interrupts.c: 255: case 0b00001000: LMotorCounter = 0b00000001; break;
  3094  0016B2  D039               	goto	i2l1398
  3095  0016B4                     L14:
  3096  0016B4  6E53               	movwf	_LMotorCounter,c
  3097  0016B6  D068               	goto	i2l124
  3098                           
  3099                           ;interrupts.c: 256: default: LMotorCounter = 0b00000001;
  3100  0016B8  D036               	goto	i2l1398
  3101  0016BA                     i2l1370:
  3102  0016BA  5053               	movf	_LMotorCounter,w,c
  3103                           
  3104                           ; Switch size 1, requested type "space"
  3105                           ; Number of cases is 4, Range of values is 1 to 8
  3106                           ; switch strategies available:
  3107                           ; Name         Instructions Cycles
  3108                           ; simple_byte           13     7 (average)
  3109                           ;	Chosen strategy is simple_byte
  3110  0016BC  0A01               	xorlw	1	; case 1
  3111  0016BE  B4D8               	btfsc	status,2,c
  3112  0016C0  D7F3               	goto	i2l1360
  3113  0016C2  0A03               	xorlw	3	; case 2
  3114  0016C4  B4D8               	btfsc	status,2,c
  3115  0016C6  D7F2               	goto	i2l1362
  3116  0016C8  0A06               	xorlw	6	; case 4
  3117  0016CA  B4D8               	btfsc	status,2,c
  3118  0016CC  D030               	goto	i2l1404
  3119  0016CE  0A0C               	xorlw	12	; case 8
  3120  0016D0  D02A               	goto	i2l1398
  3121                           
  3122                           ;interrupts.c: 258: } else if(side == RIGHT && reverse == 1)
  3123  0016D2  D05A               	goto	i2l124
  3124  0016D4                     i2l1372:
  3125  0016D4  0413               	decf	motorCounterUpdate@side,w,c
  3126  0016D6  A4D8               	btfss	status,2,c
  3127  0016D8  D01D               	goto	i2l1390
  3128  0016DA  0412               	decf	motorCounterUpdate@reverse,w,c
  3129  0016DC  B4D8               	btfsc	status,2,c
  3130  0016DE  D00B               	goto	i2l1388
  3131  0016E0  D019               	goto	i2l1390
  3132                           
  3133                           ;interrupts.c: 259: {
  3134                           ;interrupts.c: 260: switch(RMotorCounter)
  3135  0016E2  D009               	goto	i2l1388
  3136  0016E4                     i2l1378:
  3137  0016E4  0E08               	movlw	8
  3138  0016E6  D040               	goto	L22
  3139  0016E8                     i2l1380:
  3140  0016E8  0E01               	movlw	1
  3141  0016EA  D03E               	goto	L22
  3142  0016EC                     i2l1382:
  3143  0016EC  0E02               	movlw	2
  3144  0016EE  D03C               	goto	L22
  3145  0016F0                     i2l1384:
  3146  0016F0  0E04               	movlw	4
  3147  0016F2  D03A               	goto	L22
  3148                           
  3149                           ;interrupts.c: 266: default: RMotorCounter = 0b00001000;
  3150  0016F4  D7F7               	goto	i2l1378
  3151  0016F6                     i2l1388:
  3152  0016F6  5054               	movf	_RMotorCounter,w,c
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 4, Range of values is 1 to 8
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte           13     7 (average)
  3159                           ;	Chosen strategy is simple_byte
  3160  0016F8  0A01               	xorlw	1	; case 1
  3161  0016FA  B4D8               	btfsc	status,2,c
  3162  0016FC  D7F3               	goto	i2l1378
  3163  0016FE  0A03               	xorlw	3	; case 2
  3164  001700  B4D8               	btfsc	status,2,c
  3165  001702  D7F2               	goto	i2l1380
  3166  001704  0A06               	xorlw	6	; case 4
  3167  001706  B4D8               	btfsc	status,2,c
  3168  001708  D7F1               	goto	i2l1382
  3169  00170A  0A0C               	xorlw	12	; case 8
  3170  00170C  B4D8               	btfsc	status,2,c
  3171  00170E  D7F0               	goto	i2l1384
  3172  001710  D7E9               	goto	i2l1378
  3173                           
  3174                           ;interrupts.c: 268: } else if(side == LEFT && reverse == 0)
  3175  001712  D03A               	goto	i2l124
  3176  001714                     i2l1390:
  3177  001714  5013               	movf	motorCounterUpdate@side,w,c
  3178  001716  A4D8               	btfss	status,2,c
  3179  001718  D01B               	goto	i2l1408
  3180  00171A  5012               	movf	motorCounterUpdate@reverse,w,c
  3181  00171C  B4D8               	btfsc	status,2,c
  3182  00171E  D009               	goto	i2l1406
  3183  001720  D017               	goto	i2l1408
  3184                           
  3185                           ;interrupts.c: 269: {
  3186                           ;interrupts.c: 270: switch(LMotorCounter)
  3187  001722  D007               	goto	i2l1406
  3188                           
  3189                           ;interrupts.c: 271: {
  3190                           ;interrupts.c: 272: case 0b00000001: LMotorCounter = 0b00001000; break;
  3191  001724  D004               	goto	i2l1404
  3192  001726                     i2l1398:
  3193  001726  0E01               	movlw	1
  3194  001728  D7C5               	goto	L14
  3195                           
  3196                           ;interrupts.c: 274: case 0b00000100: LMotorCounter = 0b00000010; break;
  3197  00172A  D7BE               	goto	i2l1360
  3198                           
  3199                           ;interrupts.c: 275: case 0b00001000: LMotorCounter = 0b00000100; break;
  3200  00172C  D7BF               	goto	i2l1362
  3201  00172E                     i2l1404:
  3202  00172E  0E08               	movlw	8
  3203  001730  D7C1               	goto	L14
  3204  001732                     i2l1406:
  3205  001732  5053               	movf	_LMotorCounter,w,c
  3206                           
  3207                           ; Switch size 1, requested type "space"
  3208                           ; Number of cases is 4, Range of values is 1 to 8
  3209                           ; switch strategies available:
  3210                           ; Name         Instructions Cycles
  3211                           ; simple_byte           13     7 (average)
  3212                           ;	Chosen strategy is simple_byte
  3213  001734  0A01               	xorlw	1	; case 1
  3214  001736  B4D8               	btfsc	status,2,c
  3215  001738  D7FA               	goto	i2l1404
  3216  00173A  0A03               	xorlw	3	; case 2
  3217  00173C  B4D8               	btfsc	status,2,c
  3218  00173E  D7F3               	goto	i2l1398
  3219  001740  0A06               	xorlw	6	; case 4
  3220  001742  B4D8               	btfsc	status,2,c
  3221  001744  D7B1               	goto	i2l1360
  3222  001746  0A0C               	xorlw	12	; case 8
  3223  001748  B4D8               	btfsc	status,2,c
  3224  00174A  D7B0               	goto	i2l1362
  3225  00174C  D7F0               	goto	i2l1404
  3226                           
  3227                           ;interrupts.c: 278: } else if(side == RIGHT && reverse == 0)
  3228  00174E  D01C               	goto	i2l124
  3229  001750                     i2l1408:
  3230  001750  0413               	decf	motorCounterUpdate@side,w,c
  3231  001752  A4D8               	btfss	status,2,c
  3232  001754  D019               	goto	i2l124
  3233  001756  5012               	movf	motorCounterUpdate@reverse,w,c
  3234  001758  B4D8               	btfsc	status,2,c
  3235  00175A  D009               	goto	i2l1424
  3236  00175C  D015               	goto	i2l124
  3237                           
  3238                           ;interrupts.c: 279: {
  3239                           ;interrupts.c: 280: switch(RMotorCounter)
  3240  00175E  D007               	goto	i2l1424
  3241                           
  3242                           ;interrupts.c: 281: {
  3243                           ;interrupts.c: 282: case 0b00000001: RMotorCounter = 0b00000010; break;
  3244  001760  D7C5               	goto	i2l1382
  3245                           
  3246                           ;interrupts.c: 283: case 0b00000010: RMotorCounter = 0b00000100; break;
  3247  001762  D7C6               	goto	i2l1384
  3248                           
  3249                           ;interrupts.c: 284: case 0b00000100: RMotorCounter = 0b00001000; break;
  3250  001764  D7BF               	goto	i2l1378
  3251                           
  3252                           ;interrupts.c: 285: case 0b00001000: RMotorCounter = 0b00000001; break;
  3253  001766  D7C0               	goto	i2l1380
  3254  001768                     L22:
  3255  001768  6E54               	movwf	_RMotorCounter,c
  3256  00176A  D00E               	goto	i2l124
  3257                           
  3258                           ;interrupts.c: 286: default: RMotorCounter = 0b00000001;
  3259  00176C  D7BD               	goto	i2l1380
  3260  00176E                     i2l1424:
  3261  00176E  5054               	movf	_RMotorCounter,w,c
  3262                           
  3263                           ; Switch size 1, requested type "space"
  3264                           ; Number of cases is 4, Range of values is 1 to 8
  3265                           ; switch strategies available:
  3266                           ; Name         Instructions Cycles
  3267                           ; simple_byte           13     7 (average)
  3268                           ;	Chosen strategy is simple_byte
  3269  001770  0A01               	xorlw	1	; case 1
  3270  001772  B4D8               	btfsc	status,2,c
  3271  001774  D7BB               	goto	i2l1382
  3272  001776  0A03               	xorlw	3	; case 2
  3273  001778  B4D8               	btfsc	status,2,c
  3274  00177A  D7BA               	goto	i2l1384
  3275  00177C  0A06               	xorlw	6	; case 4
  3276  00177E  B4D8               	btfsc	status,2,c
  3277  001780  D7B1               	goto	i2l1378
  3278  001782  0A0C               	xorlw	12	; case 8
  3279  001784  D7B1               	goto	i2l1380
  3280  001786  D000               	goto	i2l124
  3281  001788                     i2l124:
  3282  001788  0012               	return		;funcret
  3283  00178A                     __end_of_motorCounterUpdate:
  3284                           	opt stack 0
  3285                           pclatu	equ	0xFFB
  3286                           pclath	equ	0xFFA
  3287                           tblptru	equ	0xFF8
  3288                           tblptrh	equ	0xFF7
  3289                           tblptrl	equ	0xFF6
  3290                           tablat	equ	0xFF5
  3291                           prodh	equ	0xFF4
  3292                           prodl	equ	0xFF3
  3293                           intcon	equ	0xFF2
  3294                           intcon2	equ	0xFF1
  3295                           postinc0	equ	0xFEE
  3296                           fsr0h	equ	0xFEA
  3297                           fsr0l	equ	0xFE9
  3298                           wreg	equ	0xFE8
  3299                           fsr1h	equ	0xFE2
  3300                           fsr1l	equ	0xFE1
  3301                           bsr	equ	0xFE0
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _merge *****************
  3309 ;; Defined at:
  3310 ;;		line 291 in file "interrupts.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  left            1    wreg     unsigned char 
  3313 ;;  right           1   17[COMRAM] unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  left            1   18[COMRAM] unsigned char 
  3316 ;;  merged          1   19[COMRAM] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      unsigned char 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3326 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;Total ram usage:        3 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_high_isr
  3336 ;;		_KController
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text19
  3341  001ACA                     __ptext19:
  3342                           	opt stack 0
  3343  001ACA                     _merge:
  3344                           	opt stack 25
  3345                           
  3346                           ;incstack = 0
  3347                           ;merge@left stored from wreg
  3348  001ACA  6E13               	movwf	merge@left,c
  3349                           
  3350                           ;interrupts.c: 293: unsigned char merged;
  3351                           ;interrupts.c: 294: merged = left + (right << 4);
  3352  001ACC  3812               	swapf	merge@right,w,c
  3353  001ACE  0BF0               	andlw	240
  3354  001AD0  2413               	addwf	merge@left,w,c
  3355  001AD2  6E14               	movwf	merge@merged,c
  3356                           
  3357                           ;interrupts.c: 295: return merged;
  3358  001AD4  5014               	movf	merge@merged,w,c
  3359  001AD6  D000               	goto	i2l127
  3360  001AD8                     i2l127:
  3361  001AD8  0012               	return		;funcret
  3362  001ADA                     __end_of_merge:
  3363                           	opt stack 0
  3364                           pclatu	equ	0xFFB
  3365                           pclath	equ	0xFFA
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           prodh	equ	0xFF4
  3371                           prodl	equ	0xFF3
  3372                           intcon	equ	0xFF2
  3373                           intcon2	equ	0xFF1
  3374                           postinc0	equ	0xFEE
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           fsr1h	equ	0xFE2
  3379                           fsr1l	equ	0xFE1
  3380                           bsr	equ	0xFE0
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _ABS *****************
  3388 ;; Defined at:
  3389 ;;		line 304 in file "interrupts.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  x               2   17[COMRAM] int 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  2   17[COMRAM] int 
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3403 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        2 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_KController
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text20
  3417  001A9C                     __ptext20:
  3418                           	opt stack 0
  3419  001A9C                     _ABS:
  3420                           	opt stack 24
  3421                           
  3422                           ;interrupts.c: 306: if(x<0) x = -x;
  3423                           
  3424                           ;incstack = 0
  3425  001A9C  AE13               	btfss	ABS@x+1,7,c
  3426  001A9E  D005               	goto	i2l1436
  3427  001AA0  6C12               	negf	ABS@x,c
  3428  001AA2  1E13               	comf	ABS@x+1,f,c
  3429  001AA4  B0D8               	btfsc	status,0,c
  3430  001AA6  2A13               	incf	ABS@x+1,f,c
  3431  001AA8  D000               	goto	i2l1436
  3432  001AAA                     i2l1436:
  3433                           
  3434                           ;interrupts.c: 307: return x;
  3435  001AAA  C012  F012         	movff	ABS@x,?_ABS
  3436  001AAE  C013  F013         	movff	ABS@x+1,?_ABS+1
  3437  001AB2  D000               	goto	i2l134
  3438  001AB4                     i2l134:
  3439  001AB4  0012               	return		;funcret
  3440  001AB6                     __end_of_ABS:
  3441                           	opt stack 0
  3442                           pclatu	equ	0xFFB
  3443                           pclath	equ	0xFFA
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           intcon2	equ	0xFF1
  3452                           postinc0	equ	0xFEE
  3453                           fsr0h	equ	0xFEA
  3454                           fsr0l	equ	0xFE9
  3455                           wreg	equ	0xFE8
  3456                           fsr1h	equ	0xFE2
  3457                           fsr1l	equ	0xFE1
  3458                           bsr	equ	0xFE0
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           fsr2h	equ	0xFDA
  3462                           fsr2l	equ	0xFD9
  3463                           status	equ	0xFD8
  3464                           pclatu	equ	0xFFB
  3465                           pclath	equ	0xFFA
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           prodh	equ	0xFF4
  3471                           prodl	equ	0xFF3
  3472                           intcon	equ	0xFF2
  3473                           intcon2	equ	0xFF1
  3474                           postinc0	equ	0xFEE
  3475                           fsr0h	equ	0xFEA
  3476                           fsr0l	equ	0xFE9
  3477                           wreg	equ	0xFE8
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           bsr	equ	0xFE0
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487                           	psect	rparam
  3488  0000                     pclatu	equ	0xFFB
  3489                           pclath	equ	0xFFA
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           fsr0h	equ	0xFEA
  3500                           fsr0l	equ	0xFE9
  3501                           wreg	equ	0xFE8
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           bsr	equ	0xFE0
  3505                           postinc2	equ	0xFDE
  3506                           postdec2	equ	0xFDD
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60      88
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             54 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5857
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1498
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      58       1       69.3%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6       6        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 17 21:05:33 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l251 1A62                           l260 14C8                           l237 1998  
                         l246 1A4E                           l281 1A3C                           l282 1A44  
                         l267 152A                           l277 1A14                           l285 19F4  
                         l278 1A1C                           _ABS 1A9C                           l478 18F8  
                __CFG_CPB$OFF 000000                           _MAX 1A1E                           _MIN 19F6  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A64                  _rotatingSide 0057  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1032 1A5C                          l1442 1984  
                        l1800 14EE                          l1740 18A2                          l1820 165C  
                        l1742 18AC                          l1734 188C                          l1806 1512  
                        l1760 18EE                          l1752 18D2                          l1744 18B4  
                        l1728 187A                          l1816 15B4                          l1824 1672  
                        l1770 12C2                          l1818 1608                          l1834 1AC0  
                        l1756 18DE                          l1780 1346                          l1828 1688  
                        l1782 143A                          l1776 12E6                          l1786 1450  
                        u1430 12C0                          _LATC 000F8B                          u1440 12E4  
                        u1515 1536                          u1480 14EC                          u1490 1510  
                        u1567 198A                          i2l56 1244                          i2l83 1264  
                        _main 1AB6                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
 sensorComputation@sensorTemp 0033                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
             __end_of_InitApp 1936                         ??_ABS 0014                         ??_MAX 0032  
                       ??_MIN 0032    __size_of_sensorComputation 022C                         ?_main 0001  
             __end_of___awdiv 18FA                         _T0CON 000FD5               ___awdiv@divisor 002A  
                       i2l124 1788                         i2l134 1AB4                         i2l127 1AD8  
                       i2l138 1862               ___awdiv@counter 002C                         _TRISC 000F94  
         _ConfigureOscillator 1ADA                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _delay 1972                         _merge 1ACA               __end_of_forward 1A80  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 19A6                  __end_of_main 1ACA  
                      ??_main 003D                 __activetblptr 000002                        ?_delay 0028  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0028                        i2l1404 172E                        i2l1406 1732  
                      i2l1510 1806                        i2l1502 17D4                        i2l1424 176E  
                      i2l1408 1750                        i2l1360 16A8                        i2l1520 1838  
                      i2l1600 1092                        i2l1362 16AC                        i2l1370 16BA  
                      i2l1522 1848                        i2l1610 10C6                        i2l1602 10A2  
                      i2l1436 1AAA                        i2l1380 16E8                        i2l1372 16D4  
                      i2l1516 1824                        i2l1620 10FC                        i2l1612 10D8  
                      i2l1382 16EC                        i2l1390 1714                        i2l1526 185C  
                      i2l1622 1106                        i2l1614 10E8                        i2l1630 111C  
                      i2l1606 10B0                        i2l1384 16F0                        i2l1632 112C  
                      i2l1608 10B8                        i2l1378 16E4                        i2l1490 196A  
                      i2l1388 16F6                        i2l1644 1170                        i2l1628 1116  
                      i2l1398 1726                        i2l1662 11CA                        i2l1646 117A  
                      i2l1654 118C                        i2l1488 1954                        i2l1680 122E  
                      i2l1592 1060                        i2l1666 11D2                        i2l1676 121E  
                      i2l1596 1074                        i2l1684 125C                        _INTCON 000FF2  
                      _OSCCON 000FD3                     ??_InitApp 002D         ??_ConfigureOscillator 0028  
                 merge@merged 0014                __CFG_XINST$OFF 000000            sensorComputation@i 0086  
          sensorComputation@j 0088              __end_of_high_isr 129E                        ___wmul 19CE  
                   ??___awdiv 002C                __CFG_STVREN$ON 000000                        delay@x 002B  
                      clear_0 19AC              ___awdiv@quotient 002E                        _rotate 1936  
          __size_of_Reversing 001C                  __pdataCOMRAM 0058                     ??_forward 0014  
                __mediumconst 0000                     ??_low_isr 0001                _ReverseCounter 004D  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0080       __end_of__initialization 19C4               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                  ?_KController 0001                __pcstackCOMRAM 0001  
               __end_of_delay 19A6               moveMouse@action 0012                 __end_of_merge 1ADA  
        KController@correctTo 0017    __end_of_motorCounterUpdate 178A                _ForwardCounter 0045  
                     ??_delay 002A                       ??_merge 0013            _AlgorithmSelection 1A46  
                _LTurnCounter 0047             __end_of_Reversing 1A9C                    _delay_time 0051  
           _MotorDelayCounter 0049           ?_AlgorithmSelection 0001                       ?___wmul 0028  
          __size_of_moveMouse 0008                       ?_rotate 0001                       _INTCON2 000FF1  
                     _OSCTUNE 000F9B                       i2u95_40 1834                       i2u97_40 1858  
        ??_AlgorithmSelection 0028                     ?_high_isr 0001                 _LMotorCounter 0053  
                     _InitApp 18FA                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 1864               __size_of___wmul 0028                  __psmallconst 1000  
                     __pcinit 19A6                       __ramtop 1000                       __ptext0 1AB6  
                     __ptext1 14CA                       __ptext2 129E                       __ptext3 19CE  
                     __ptext4 1864                       __ptext5 19F6                       __ptext6 1A1E  
                     __ptext7 18FA                       __ptext8 1972                       __ptext9 1A46  
             __size_of_rotate 003C                  __size_of_ABS 001A                  __size_of_MAX 0028  
                __size_of_MIN 0028                       _forward 1A64                       delay@ms 0028  
                     _low_isr 0018                 ?_sensorUpdate 0001                    ??_high_isr 001A  
              __pintcode_body 100A          end_of_initialization 19C4              _sensorCorrection 1001  
           __end_of_moveMouse 1AEC                 __Lmediumconst 0000                       int_func 100A  
             _controllerSteps 0058                    _justTurned 0056          __size_of_KController 00DA  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _TRISBbits 000F93                     _TRISEbits 000F96                ??_sensorUpdate 0037  
 __end_of_ConfigureOscillator 1AE4                  _RTurnCounter 004B                __end_of___wmul 19F6  
               __pidataCOMRAM 1AEC                __end_of_rotate 1972           start_initialization 19A6  
                 __end_of_ABS 1AB6                   __end_of_MAX 1A46                   __end_of_MIN 1A1E  
          _motorCounterUpdate 1696              __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012  
                  merge@right 0012                     _Reversing 1A80                      ??___wmul 002C  
            __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014                _sensorLocation 1005  
        ??_motorCounterUpdate 0013                   __pbssCOMRAM 003D                 __pcstackBANK0 0080  
      sensorUpdate@sensorTemp 008A             __size_of_high_isr 1296                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001                     _algorithm 0055  
                   __pintcode 0008        motorCounterUpdate@side 0013                      ?___awdiv 0028  
        __end_of_sensorUpdate 1696        __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005  
                 __pintcodelo 0018                   __smallconst 1000                      ?_forward 0001  
                    ?_low_isr 0001                __size_of_delay 0034   __size_of_AlgorithmSelection 001E  
              __size_of_merge 0010                ___wmul@product 002C                     _moveMouse 1AE4  
                    i2u110_40 1082                      i2u120_40 114C                      i2u121_40 115C  
                    i2u113_41 10C4                      i2u114_40 10D6                      i2u107_40 104C  
                    i2u124_40 119C                      i2u108_40 105A                      i2u125_40 11AC  
                    i2u109_40 106E                      i2u119_40 113C                      i2u128_40 11E2  
                    i2u129_40 11F2              __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0028                 _RMotorCounter 0054                    rotate@side 0014  
               ??_KController 0015                    ?_moveMouse 0001              __size_of_InitApp 003C  
                    __Hrparam 0000                     merge@left 0013          sensorComputation@max 0080  
                    __Lrparam 0000          sensorComputation@min 0082          sensorComputation@sum 0084  
                 ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096  
            __size_of_forward 001C              __size_of_low_isr 008A                      __ptext10 1ADA  
                    __ptext20 1A9C                      __ptext13 1936                      __ptext14 1A64  
                    __ptext15 1A80                      __ptext16 178A                      __ptext17 1AE4  
                    __ptext18 1696                      __ptext19 1ACA                      _high_isr 0008  
               __size_of_main 0014                 _RotateCounter 004F         __size_of_sensorUpdate 01CC  
__size_of_ConfigureOscillator 000A           __end_of_KController 1864             _sensorComputation 129E  
                  _INTCONbits 000FF2            ?_sensorComputation 0033                 sensorUpdate@i 00DA  
               sensorUpdate@j 00DC                  _sensorUpdate 14CA                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 0035                   ??_moveMouse 0012  
             KController@diff 0018     __end_of_sensorComputation 14CA                   _sensorValue 003D  
 __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012                   _KController 178A  
