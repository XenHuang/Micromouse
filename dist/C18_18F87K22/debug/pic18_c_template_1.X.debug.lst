

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 29 18:24:13 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001DDE                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _TurnLeft
    42  001DDE  00C8               	dw	200
    43                           
    44                           ;initializer for _TurnRight
    45  001DE0  00C8               	dw	200
    46                           
    47                           ;initializer for _controllerSteps
    48  001DE2  0A                 	db	10
    49                           
    50                           	psect	smallconst
    51  001000                     __psmallconst:
    52                           	opt stack 0
    53  001000  00                 	db	0
    54  001001                     _sensorCorrection:
    55                           	opt stack 0
    56  001001  00                 	db	0
    57  001002  00                 	db	0
    58  001003  15                 	db	21
    59  001004  15                 	db	21
    60  001005                     __end_of_sensorCorrection:
    61                           	opt stack 0
    62  001005                     _sensorLocation:
    63                           	opt stack 0
    64  001005  1B                 	db	27
    65  001006  2B                 	db	43
    66  001007  1F                 	db	31
    67  001008  33                 	db	51
    68  001009                     __end_of_sensorLocation:
    69                           	opt stack 0
    70  0000                     _LATC	set	3979
    71  0000                     _OSCTUNE	set	3995
    72  0000                     _TRISBbits	set	3987
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISEbits	set	3990
    75  0000                     _ADCON0	set	4034
    76  0000                     _ADCON0bits	set	4034
    77  0000                     _ADCON1	set	4033
    78  0000                     _ADCON2	set	4032
    79  0000                     _ADRESH	set	4036
    80  0000                     _ADRESL	set	4035
    81  0000                     _OSCCON	set	4051
    82  0000                     _T0CON	set	4053
    83  0000                     _INTCON	set	4082
    84  0000                     _INTCON2	set	4081
    85  0000                     _INTCONbits	set	4082
    86                           
    87                           ; #config settings
    88  001009  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           	psect	cinit
    91  001C6E                     __pcinit:
    92                           	opt stack 0
    93  001C6E                     start_initialization:
    94                           	opt stack 0
    95  001C6E                     __initialization:
    96                           	opt stack 0
    97                           
    98                           ; Clear objects allocated to COMRAM (41 bytes)
    99  001C6E  EE00  F02B         	lfsr	0,__pbssCOMRAM
   100  001C72  0E29               	movlw	41
   101  001C74                     clear_0:
   102  001C74  6AEE               	clrf	postinc0,c
   103  001C76  06E8               	decf	wreg,f,c
   104  001C78  E1FD               	bnz	clear_0
   105                           
   106                           ; Initialize objects allocated to COMRAM (5 bytes)
   107                           ; load TBLPTR registers with __pidataCOMRAM
   108  001C7A  0EDE               	movlw	low __pidataCOMRAM
   109  001C7C  6EF6               	movwf	tblptrl,c
   110  001C7E  0E1D               	movlw	high __pidataCOMRAM
   111  001C80  6EF7               	movwf	tblptrh,c
   112  001C82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   113  001C84  6EF8               	movwf	tblptru,c
   114  001C86  EE00  F054         	lfsr	0,__pdataCOMRAM
   115  001C8A  EE10 F005          	lfsr	1,5
   116  001C8E                     copy_data0:
   117  001C8E  0009               	tblrd		*+
   118  001C90  CFF5 FFEE          	movff	tablat,postinc0
   119  001C94  50E5               	movf	postdec1,w,c
   120  001C96  50E1               	movf	fsr1l,w,c
   121  001C98  E1FA               	bnz	copy_data0
   122  001C9A                     end_of_initialization:
   123                           	opt stack 0
   124  001C9A                     __end_of__initialization:
   125                           	opt stack 0
   126  001C9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   127  001C9C  6EF8               	movwf	tblptru,c
   128  001C9E  0100               	movlb	0
   129  001CA0  EFD4  F00E         	goto	_main	;jump to C main() function
   130                           tblptru	equ	0xFF8
   131                           tblptrh	equ	0xFF7
   132                           tblptrl	equ	0xFF6
   133                           tablat	equ	0xFF5
   134                           postinc0	equ	0xFEE
   135                           wreg	equ	0xFE8
   136                           postdec1	equ	0xFE5
   137                           fsr1l	equ	0xFE1
   138                           
   139                           	psect	bssCOMRAM
   140  00002B                     __pbssCOMRAM:
   141                           	opt stack 0
   142  00002B                     _sensorValue:
   143                           	opt stack 0
   144  00002B                     	ds	8
   145  000033                     _Deadend:
   146                           	opt stack 0
   147  000033                     	ds	2
   148  000035                     _ForwardCounter:
   149                           	opt stack 0
   150  000035                     	ds	2
   151  000037                     _LTurnCounter:
   152                           	opt stack 0
   153  000037                     	ds	2
   154  000039                     _MotorDelayCounter:
   155                           	opt stack 0
   156  000039                     	ds	2
   157  00003B                     _RTurnCounter:
   158                           	opt stack 0
   159  00003B                     	ds	2
   160  00003D                     _ReverseCounter:
   161                           	opt stack 0
   162  00003D                     	ds	2
   163  00003F                     _RotateCounter:
   164                           	opt stack 0
   165  00003F                     	ds	2
   166  000041                     _TurnedLeft:
   167                           	opt stack 0
   168  000041                     	ds	2
   169  000043                     _TurnedRight:
   170                           	opt stack 0
   171  000043                     	ds	2
   172  000045                     _delay_time:
   173                           	opt stack 0
   174  000045                     	ds	2
   175  000047                     _errorD:
   176                           	opt stack 0
   177  000047                     	ds	2
   178  000049                     _errorP:
   179                           	opt stack 0
   180  000049                     	ds	2
   181  00004B                     _oldErrorP:
   182                           	opt stack 0
   183  00004B                     	ds	2
   184  00004D                     _totalError:
   185                           	opt stack 0
   186  00004D                     	ds	2
   187  00004F                     _LMotorCounter:
   188                           	opt stack 0
   189  00004F                     	ds	1
   190  000050                     _RMotorCounter:
   191                           	opt stack 0
   192  000050                     	ds	1
   193  000051                     _algorithm:
   194                           	opt stack 0
   195  000051                     	ds	1
   196  000052                     _justTurned:
   197                           	opt stack 0
   198  000052                     	ds	1
   199  000053                     _rotatingSide:
   200                           	opt stack 0
   201  000053                     	ds	1
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec1	equ	0xFE5
   209                           fsr1l	equ	0xFE1
   210                           
   211                           	psect	dataCOMRAM
   212  000054                     __pdataCOMRAM:
   213                           	opt stack 0
   214  000054                     _TurnLeft:
   215                           	opt stack 0
   216  000054                     	ds	2
   217  000056                     _TurnRight:
   218                           	opt stack 0
   219  000056                     	ds	2
   220  000058                     _controllerSteps:
   221                           	opt stack 0
   222  000058                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	cstackBANK0
   233  000080                     __pcstackBANK0:
   234                           	opt stack 0
   235  000080                     ?___wmul:
   236                           	opt stack 0
   237  000080                     ?___awdiv:
   238                           	opt stack 0
   239  000080                     delay@x:
   240                           	opt stack 0
   241  000080                     ___wmul@multiplier:
   242                           	opt stack 0
   243  000080                     ___awdiv@dividend:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x0
   247  000080                     	ds	2
   248  000082                     ___wmul@multiplicand:
   249                           	opt stack 0
   250  000082                     ___awdiv@divisor:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x2
   254  000082                     	ds	2
   255  000084                     ?_MIN:
   256                           	opt stack 0
   257  000084                     ?_MAX:
   258                           	opt stack 0
   259  000084                     ___awdiv@counter:
   260                           	opt stack 0
   261  000084                     MIN@a:
   262                           	opt stack 0
   263  000084                     MAX@a:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267  000084                     	ds	1
   268  000085                     ___awdiv@sign:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x5
   272  000085                     	ds	1
   273  000086                     MIN@b:
   274                           	opt stack 0
   275  000086                     MAX@b:
   276                           	opt stack 0
   277  000086                     ___awdiv@quotient:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x6
   281  000086                     	ds	2
   282  000088                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x8
   286  000088                     	ds	2
   287  00008A                     ??_sensorComputation:
   288                           
   289                           ; 0 bytes @ 0xA
   290  00008A                     	ds	2
   291  00008C                     sensorComputation@max:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0xC
   295  00008C                     	ds	2
   296  00008E                     sensorComputation@min:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@sum:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@i:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@j:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     ??_sensorUpdate:
   317                           
   318                           ; 0 bytes @ 0x16
   319  000096                     	ds	6
   320  00009C                     sensorUpdate@sensorTemp:
   321                           	opt stack 0
   322                           
   323                           ; 80 bytes @ 0x1C
   324  00009C                     	ds	80
   325  0000EC                     sensorUpdate@i:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x6C
   329  0000EC                     	ds	2
   330  0000EE                     sensorUpdate@j:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x6E
   334  0000EE                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	cstackCOMRAM
   345  000001                     __pcstackCOMRAM:
   346                           	opt stack 0
   347  000001                     ??_low_isr:
   348  000001                     
   349                           ; 0 bytes @ 0x0
   350  000001                     	ds	17
   351  000012                     ?_ABS:
   352                           	opt stack 0
   353  000012                     motorCounterUpdate@reverse:
   354                           	opt stack 0
   355  000012                     merge@right:
   356                           	opt stack 0
   357  000012                     moveMouse@action:
   358                           	opt stack 0
   359  000012                     ABS@x:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x11
   363  000012                     	ds	1
   364  000013                     motorCounterUpdate@side:
   365                           	opt stack 0
   366  000013                     merge@left:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x12
   370  000013                     	ds	1
   371  000014                     merge@merged:
   372                           	opt stack 0
   373  000014                     rotate@side:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x13
   377  000014                     	ds	1
   378  000015                     ??_KController:
   379                           
   380                           ; 0 bytes @ 0x14
   381  000015                     	ds	2
   382  000017                     KController@correctTo:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x16
   386  000017                     	ds	1
   387  000018                     KController@diff:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x17
   391  000018                     	ds	2
   392  00001A                     ??_high_isr:
   393                           
   394                           ; 0 bytes @ 0x19
   395  00001A                     	ds	14
   396  000028                     delay@ms:
   397                           	opt stack 0
   398  000028                     ___wmul@product:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x27
   402  000028                     	ds	2
   403  00002A                     ??_MIN:
   404  00002A                     ??_MAX:
   405  00002A                     ??_delay:
   406                           
   407                           ; 0 bytes @ 0x29
   408  00002A                     	ds	1
   409  00002B                     tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1l	equ	0xFE1
   417                           
   418                           ; 0 bytes @ 0x2A
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 41 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;		None               void
   431 ;; Registers used:
   432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels required when called:    7
   444 ;; This function calls:
   445 ;;		_ConfigureOscillator
   446 ;;		_InitApp
   447 ;;		_sensorUpdate
   448 ;; This function is called by:
   449 ;;		Startup code after reset
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text0
   454  001DA8                     __ptext0:
   455                           	opt stack 0
   456  001DA8                     _main:
   457                           	opt stack 24
   458                           
   459                           ;main.c: 44: ConfigureOscillator();
   460                           
   461                           ;incstack = 0
   462  001DA8  ECE6  F00E         	call	_ConfigureOscillator	;wreg free
   463                           
   464                           ;main.c: 47: InitApp();
   465  001DAC  ECFB  F00D         	call	_InitApp	;wreg free
   466  001DB0  D000               	goto	l2035
   467  001DB2                     l2035:
   468                           
   469                           ;main.c: 50: {
   470                           ;main.c: 51: sensorUpdate();
   471  001DB2  ECEF  F00B         	call	_sensorUpdate	;wreg free
   472  001DB6  D7FD               	goto	l2035
   473  001DB8  EF51  F000         	goto	start
   474  001DBC                     __end_of_main:
   475                           	opt stack 0
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485 ;; *************** function _sensorUpdate *****************
   486 ;; Defined at:
   487 ;;		line 146 in file "user.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  sensorTemp     80   28[BANK0 ] int [10][4]
   492 ;;  j               2  110[BANK0 ] int 
   493 ;;  i               2  108[BANK0 ] int 
   494 ;; Return value:  Size  Location     Type
   495 ;;		None               void
   496 ;; Registers used:
   497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;Total ram usage:       90 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; Hardware stack levels required when called:    6
   510 ;; This function calls:
   511 ;;		___wmul
   512 ;;		_sensorComputation
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text1
   519  0017DE                     __ptext1:
   520                           	opt stack 0
   521  0017DE                     _sensorUpdate:
   522                           	opt stack 24
   523                           
   524                           ;user.c: 148: int i,j;
   525                           ;user.c: 149: int sensorTemp[4][10];
   526                           ;user.c: 152: for(i = 0; i < 10; i++)
   527                           
   528                           ;incstack = 0
   529  0017DE  0E00               	movlw	0
   530  0017E0  0100               	movlb	0	; () banked
   531  0017E2  6FED               	movwf	(sensorUpdate@i+1)& (0+255),b
   532  0017E4  0E00               	movlw	0
   533  0017E6  6FEC               	movwf	sensorUpdate@i& (0+255),b
   534                           
   535                           ; BSR set to: 0
   536  0017E8  0100               	movlb	0	; () banked
   537  0017EA  BFED               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   538  0017EC  D00A               	goto	l2001
   539  0017EE  0100               	movlb	0	; () banked
   540  0017F0  51ED               	movf	(sensorUpdate@i+1)& (0+255),w,b
   541  0017F2  E106               	bnz	u1690
   542  0017F4  0E0A               	movlw	10
   543  0017F6  0100               	movlb	0	; () banked
   544  0017F8  5DEC               	subwf	sensorUpdate@i& (0+255),w,b
   545  0017FA  B0D8               	btfsc	status,0,c
   546  0017FC  D0F2               	goto	l2029
   547  0017FE  D001               	goto	l2001
   548  001800                     u1690:
   549                           
   550                           ; BSR set to: 0
   551  001800  D0F0               	goto	l2029
   552  001802                     l2001:
   553                           
   554                           ; BSR set to: 0
   555                           ;user.c: 153: {
   556                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   557  001802  0E00               	movlw	0
   558  001804  0100               	movlb	0	; () banked
   559  001806  6FEF               	movwf	(sensorUpdate@j+1)& (0+255),b
   560  001808  0E00               	movlw	0
   561  00180A  6FEE               	movwf	sensorUpdate@j& (0+255),b
   562                           
   563                           ; BSR set to: 0
   564  00180C  0100               	movlb	0	; () banked
   565  00180E  BFEF               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   566  001810  D00A               	goto	l2007
   567  001812  0100               	movlb	0	; () banked
   568  001814  51EF               	movf	(sensorUpdate@j+1)& (0+255),w,b
   569  001816  E106               	bnz	u1700
   570  001818  0E04               	movlw	4
   571  00181A  0100               	movlb	0	; () banked
   572  00181C  5DEE               	subwf	sensorUpdate@j& (0+255),w,b
   573  00181E  B0D8               	btfsc	status,0,c
   574  001820  D0D5               	goto	l2025
   575  001822  D001               	goto	l2007
   576  001824                     u1700:
   577                           
   578                           ; BSR set to: 0
   579  001824  D0D3               	goto	l2025
   580  001826                     l2007:
   581                           
   582                           ; BSR set to: 0
   583                           ;user.c: 155: {
   584                           ;user.c: 156: ADCON0 = sensorLocation[j];
   585  001826  0E05               	movlw	low _sensorLocation
   586  001828  0100               	movlb	0	; () banked
   587  00182A  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   588  00182C  6EF6               	movwf	tblptrl,c
   589  00182E  0E10               	movlw	high _sensorLocation
   590  001830  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   591  001832  6EF7               	movwf	tblptrh,c
   592  001834                     	if	0	;There are less than 3 active tblptr bytes
   593  001834                     	endif
   594  001834  0008               	tblrd		*
   595  001836  CFF5 FFC2          	movff	tablat,4034	;volatile
   596                           
   597                           ; BSR set to: 0
   598                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   599  00183A  82C2               	bsf	4034,1,c	;volatile
   600                           
   601                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   602  00183C  D000               	goto	l302
   603  00183E                     l302:
   604  00183E  B2C2               	btfsc	4034,1,c	;volatile
   605  001840  D7FE               	goto	l302
   606                           
   607                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   608  001842  CFC3 F096          	movff	4035,??_sensorUpdate	;volatile
   609  001846  0E06               	movlw	6
   610  001848  0100               	movlb	0	; () banked
   611  00184A  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   612  00184C                     u1725:
   613  00184C  0100               	movlb	0	; () banked
   614  00184E  90D8               	bcf	status,0,c
   615  001850  3396               	rrcf	??_sensorUpdate& (0+255),f,b
   616  001852  0100               	movlb	0	; () banked
   617  001854  2F97               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   618  001856  D7FA               	goto	u1725
   619  001858  0100               	movlb	0	; () banked
   620  00185A  5196               	movf	??_sensorUpdate& (0+255),w,b
   621  00185C  CFC4 F098          	movff	4036,??_sensorUpdate+2	;volatile
   622  001860  0100               	movlb	0	; () banked
   623  001862  6B99               	clrf	(??_sensorUpdate+3)& (0+255),b
   624  001864  0100               	movlb	0	; () banked
   625  001866  90D8               	bcf	status,0,c
   626  001868  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   627  00186A  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   628  00186C  0100               	movlb	0	; () banked
   629  00186E  90D8               	bcf	status,0,c
   630  001870  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   631  001872  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   632  001874  0100               	movlb	0	; () banked
   633  001876  2798               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   634  001878  0E00               	movlw	0
   635  00187A  2399               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   636  00187C  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   637  001880  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   638  001884  0E00               	movlw	0
   639  001886  0100               	movlb	0	; () banked
   640  001888  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   641  00188A  0E14               	movlw	20
   642  00188C  6F82               	movwf	___wmul@multiplicand& (0+255),b
   643  00188E  EC52  F00E         	call	___wmul	;wreg free
   644  001892  0E9C               	movlw	low sensorUpdate@sensorTemp
   645  001894  0100               	movlb	0	; () banked
   646  001896  6F9A               	movwf	(??_sensorUpdate+4)& (0+255),b
   647  001898  0E00               	movlw	high sensorUpdate@sensorTemp
   648  00189A  0100               	movlb	0	; () banked
   649  00189C  6F9B               	movwf	(??_sensorUpdate+5)& (0+255),b
   650  00189E  0100               	movlb	0	; () banked
   651  0018A0  5180               	movf	?___wmul& (0+255),w,b
   652  0018A2  0100               	movlb	0	; () banked
   653  0018A4  279A               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   654  0018A6  0100               	movlb	0	; () banked
   655  0018A8  5181               	movf	(?___wmul+1)& (0+255),w,b
   656  0018AA  0100               	movlb	0	; () banked
   657  0018AC  239B               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   658  0018AE  90D8               	bcf	status,0,c
   659  0018B0  0100               	movlb	0	; () banked
   660  0018B2  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   661  0018B4  6ED9               	movwf	fsr2l,c
   662  0018B6  0100               	movlb	0	; () banked
   663  0018B8  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   664  0018BA  6EDA               	movwf	fsr2h,c
   665  0018BC  0100               	movlb	0	; () banked
   666  0018BE  519A               	movf	(??_sensorUpdate+4)& (0+255),w,b
   667  0018C0  26D9               	addwf	fsr2l,f,c
   668  0018C2  0100               	movlb	0	; () banked
   669  0018C4  519B               	movf	(??_sensorUpdate+5)& (0+255),w,b
   670  0018C6  22DA               	addwfc	fsr2h,f,c
   671  0018C8  C098  FFDE         	movff	??_sensorUpdate+2,postinc2
   672  0018CC  C099  FFDD         	movff	??_sensorUpdate+3,postdec2
   673                           
   674                           ; BSR set to: 0
   675                           ;user.c: 163: if(j == 0 || j == 3)
   676  0018D0  0100               	movlb	0	; () banked
   677  0018D2  51EE               	movf	sensorUpdate@j& (0+255),w,b
   678  0018D4  0100               	movlb	0	; () banked
   679  0018D6  11EF               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   680  0018D8  B4D8               	btfsc	status,2,c
   681  0018DA  D007               	goto	l2017
   682                           
   683                           ; BSR set to: 0
   684  0018DC  0E03               	movlw	3
   685  0018DE  0100               	movlb	0	; () banked
   686  0018E0  19EE               	xorwf	sensorUpdate@j& (0+255),w,b
   687  0018E2  0100               	movlb	0	; () banked
   688  0018E4  11EF               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   689  0018E6  A4D8               	btfss	status,2,c
   690  0018E8  D033               	goto	l2019
   691  0018EA                     l2017:
   692                           
   693                           ; BSR set to: 0
   694                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   695  0018EA  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   696  0018EE  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   697  0018F2  0E00               	movlw	0
   698  0018F4  0100               	movlb	0	; () banked
   699  0018F6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   700  0018F8  0E14               	movlw	20
   701  0018FA  6F82               	movwf	___wmul@multiplicand& (0+255),b
   702  0018FC  EC52  F00E         	call	___wmul	;wreg free
   703  001900  0E9C               	movlw	low sensorUpdate@sensorTemp
   704  001902  0100               	movlb	0	; () banked
   705  001904  6F96               	movwf	??_sensorUpdate& (0+255),b
   706  001906  0E00               	movlw	high sensorUpdate@sensorTemp
   707  001908  0100               	movlb	0	; () banked
   708  00190A  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   709  00190C  0100               	movlb	0	; () banked
   710  00190E  5180               	movf	?___wmul& (0+255),w,b
   711  001910  0100               	movlb	0	; () banked
   712  001912  2796               	addwf	??_sensorUpdate& (0+255),f,b
   713  001914  0100               	movlb	0	; () banked
   714  001916  5181               	movf	(?___wmul+1)& (0+255),w,b
   715  001918  0100               	movlb	0	; () banked
   716  00191A  2397               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   717  00191C  90D8               	bcf	status,0,c
   718  00191E  0100               	movlb	0	; () banked
   719  001920  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   720  001922  6ED9               	movwf	fsr2l,c
   721  001924  0100               	movlb	0	; () banked
   722  001926  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   723  001928  6EDA               	movwf	fsr2h,c
   724  00192A  0100               	movlb	0	; () banked
   725  00192C  5196               	movf	??_sensorUpdate& (0+255),w,b
   726  00192E  26D9               	addwf	fsr2l,f,c
   727  001930  0100               	movlb	0	; () banked
   728  001932  5197               	movf	(??_sensorUpdate+1)& (0+255),w,b
   729  001934  22DA               	addwfc	fsr2h,f,c
   730  001936  0E01               	movlw	low _sensorCorrection
   731  001938  0100               	movlb	0	; () banked
   732  00193A  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   733  00193C  6EF6               	movwf	tblptrl,c
   734  00193E  0E10               	movlw	high _sensorCorrection
   735  001940  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   736  001942  6EF7               	movwf	tblptrh,c
   737  001944                     	if	0	;There are less than 3 active tblptr bytes
   738  001944                     	endif
   739  001944  0008               	tblrd		*
   740  001946  50F5               	movf	tablat,w,c
   741  001948  5EDE               	subwf	postinc2,f,c
   742  00194A  0E00               	movlw	0
   743  00194C  5ADD               	subwfb	postdec2,f,c
   744  00194E  D033               	goto	l2021
   745  001950                     l2019:
   746                           
   747                           ; BSR set to: 0
   748                           ;user.c: 165: else
   749                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   750  001950  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   751  001954  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   752  001958  0E00               	movlw	0
   753  00195A  0100               	movlb	0	; () banked
   754  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   755  00195E  0E14               	movlw	20
   756  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
   757  001962  EC52  F00E         	call	___wmul	;wreg free
   758  001966  0E9C               	movlw	low sensorUpdate@sensorTemp
   759  001968  0100               	movlb	0	; () banked
   760  00196A  6F96               	movwf	??_sensorUpdate& (0+255),b
   761  00196C  0E00               	movlw	high sensorUpdate@sensorTemp
   762  00196E  0100               	movlb	0	; () banked
   763  001970  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   764  001972  0100               	movlb	0	; () banked
   765  001974  5180               	movf	?___wmul& (0+255),w,b
   766  001976  0100               	movlb	0	; () banked
   767  001978  2796               	addwf	??_sensorUpdate& (0+255),f,b
   768  00197A  0100               	movlb	0	; () banked
   769  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
   770  00197E  0100               	movlb	0	; () banked
   771  001980  2397               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   772  001982  90D8               	bcf	status,0,c
   773  001984  0100               	movlb	0	; () banked
   774  001986  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   775  001988  6ED9               	movwf	fsr2l,c
   776  00198A  0100               	movlb	0	; () banked
   777  00198C  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   778  00198E  6EDA               	movwf	fsr2h,c
   779  001990  0100               	movlb	0	; () banked
   780  001992  5196               	movf	??_sensorUpdate& (0+255),w,b
   781  001994  26D9               	addwf	fsr2l,f,c
   782  001996  0100               	movlb	0	; () banked
   783  001998  5197               	movf	(??_sensorUpdate+1)& (0+255),w,b
   784  00199A  22DA               	addwfc	fsr2h,f,c
   785  00199C  0E01               	movlw	low _sensorCorrection
   786  00199E  0100               	movlb	0	; () banked
   787  0019A0  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   788  0019A2  6EF6               	movwf	tblptrl,c
   789  0019A4  0E10               	movlw	high _sensorCorrection
   790  0019A6  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   791  0019A8  6EF7               	movwf	tblptrh,c
   792  0019AA                     	if	0	;There are less than 3 active tblptr bytes
   793  0019AA                     	endif
   794  0019AA  0008               	tblrd		*
   795  0019AC  50F5               	movf	tablat,w,c
   796  0019AE  26DE               	addwf	postinc2,f,c
   797  0019B0  0E00               	movlw	0
   798  0019B2  22DD               	addwfc	postdec2,f,c
   799  0019B4  D000               	goto	l2021
   800  0019B6                     l2021:
   801                           
   802                           ; BSR set to: 0
   803  0019B6  0100               	movlb	0	; () banked
   804  0019B8  4BEE               	infsnz	sensorUpdate@j& (0+255),f,b
   805  0019BA  2BEF               	incf	(sensorUpdate@j+1)& (0+255),f,b
   806                           
   807                           ; BSR set to: 0
   808  0019BC  0100               	movlb	0	; () banked
   809  0019BE  BFEF               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   810  0019C0  D732               	goto	l2007
   811  0019C2  0100               	movlb	0	; () banked
   812  0019C4  51EF               	movf	(sensorUpdate@j+1)& (0+255),w,b
   813  0019C6  E102               	bnz	l2025
   814  0019C8  D727               	goto	L1
   815  0019CA  D000               	goto	l2025
   816  0019CC                     l2025:
   817                           
   818                           ; BSR set to: 0
   819  0019CC  0100               	movlb	0	; () banked
   820  0019CE  4BEC               	infsnz	sensorUpdate@i& (0+255),f,b
   821  0019D0  2BED               	incf	(sensorUpdate@i+1)& (0+255),f,b
   822                           
   823                           ; BSR set to: 0
   824  0019D2  0100               	movlb	0	; () banked
   825  0019D4  BFED               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   826  0019D6  D715               	goto	l2001
   827  0019D8  0100               	movlb	0	; () banked
   828  0019DA  51ED               	movf	(sensorUpdate@i+1)& (0+255),w,b
   829  0019DC  E102               	bnz	l2029
   830  0019DE  D70A               	goto	L2
   831  0019E0  D000               	goto	l2029
   832  0019E2                     l2029:
   833                           
   834                           ; BSR set to: 0
   835                           ;user.c: 167: }
   836                           ;user.c: 168: }
   837                           ;user.c: 171: sensorComputation(sensorTemp);
   838  0019E2  0E9C               	movlw	low sensorUpdate@sensorTemp
   839  0019E4  0100               	movlb	0	; () banked
   840  0019E6  6F88               	movwf	sensorComputation@sensorTemp& (0+255),b
   841  0019E8  0E00               	movlw	high sensorUpdate@sensorTemp
   842  0019EA  0100               	movlb	0	; () banked
   843  0019EC  6F89               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   844  0019EE  ECA2  F009         	call	_sensorComputation	;wreg free
   845  0019F2  0012               	return		;funcret
   846  0019F4                     __end_of_sensorUpdate:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           postdec1	equ	0xFE5
   855                           fsr1l	equ	0xFE1
   856                           postinc2	equ	0xFDE
   857                           postdec2	equ	0xFDD
   858                           fsr2h	equ	0xFDA
   859                           fsr2l	equ	0xFD9
   860                           status	equ	0xFD8
   861                           
   862 ;; *************** function _sensorComputation *****************
   863 ;; Defined at:
   864 ;;		line 125 in file "user.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;  sensorTemp      2    8[BANK0 ] PTR int [10]
   867 ;;		 -> sensorUpdate@sensorTemp(80), 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  j               2   20[BANK0 ] int 
   870 ;;  i               2   18[BANK0 ] int 
   871 ;;  sum             2   16[BANK0 ] int 
   872 ;;  min             2   14[BANK0 ] int 
   873 ;;  max             2   12[BANK0 ] int 
   874 ;; Return value:  Size  Location     Type
   875 ;;		None               void
   876 ;; Registers used:
   877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;Total ram usage:       14 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    5
   890 ;; This function calls:
   891 ;;		_MAX
   892 ;;		_MIN
   893 ;;		___awdiv
   894 ;;		___wmul
   895 ;; This function is called by:
   896 ;;		_sensorUpdate
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text2
   901  001344                     __ptext2:
   902                           	opt stack 0
   903  001344                     _sensorComputation:
   904                           	opt stack 24
   905                           
   906                           ;user.c: 127: int max,min,i,j,sum;
   907                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   908                           
   909                           ;incstack = 0
   910  001344  0E00               	movlw	0
   911  001346  0100               	movlb	0	; () banked
   912  001348  6F93               	movwf	(sensorComputation@i+1)& (0+255),b
   913  00134A  0E00               	movlw	0
   914  00134C  6F92               	movwf	sensorComputation@i& (0+255),b
   915                           
   916                           ; BSR set to: 0
   917  00134E  0100               	movlb	0	; () banked
   918  001350  BF93               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   919  001352  D00A               	goto	l1951
   920  001354  0100               	movlb	0	; () banked
   921  001356  5193               	movf	(sensorComputation@i+1)& (0+255),w,b
   922  001358  E106               	bnz	u1640
   923  00135A  0E04               	movlw	4
   924  00135C  0100               	movlb	0	; () banked
   925  00135E  5D92               	subwf	sensorComputation@i& (0+255),w,b
   926  001360  B0D8               	btfsc	status,0,c
   927  001362  D129               	goto	l295
   928  001364  D001               	goto	l1951
   929  001366                     u1640:
   930                           
   931                           ; BSR set to: 0
   932  001366  D127               	goto	l295
   933  001368                     l1951:
   934                           
   935                           ; BSR set to: 0
   936                           ;user.c: 129: {
   937                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   938  001368  0E00               	movlw	0
   939  00136A  0100               	movlb	0	; () banked
   940  00136C  6F95               	movwf	(sensorComputation@j+1)& (0+255),b
   941  00136E  0E00               	movlw	0
   942  001370  6F94               	movwf	sensorComputation@j& (0+255),b
   943                           
   944                           ; BSR set to: 0
   945  001372  0100               	movlb	0	; () banked
   946  001374  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   947  001376  D00A               	goto	l1957
   948  001378  0100               	movlb	0	; () banked
   949  00137A  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
   950  00137C  E106               	bnz	u1650
   951  00137E  0E0A               	movlw	10
   952  001380  0100               	movlb	0	; () banked
   953  001382  5D94               	subwf	sensorComputation@j& (0+255),w,b
   954  001384  B0D8               	btfsc	status,0,c
   955  001386  D0D3               	goto	l1967
   956  001388  D001               	goto	l1957
   957  00138A                     u1650:
   958                           
   959                           ; BSR set to: 0
   960  00138A  D0D1               	goto	l1967
   961  00138C                     l1957:
   962                           
   963                           ; BSR set to: 0
   964                           ;user.c: 131: {
   965                           ;user.c: 132: if(j == 0)
   966  00138C  0100               	movlb	0	; () banked
   967  00138E  5194               	movf	sensorComputation@j& (0+255),w,b
   968  001390  0100               	movlb	0	; () banked
   969  001392  1195               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   970  001394  A4D8               	btfss	status,2,c
   971  001396  D031               	goto	l1961
   972                           
   973                           ; BSR set to: 0
   974                           ;user.c: 133: {
   975                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   976  001398  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
   977  00139C  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
   978  0013A0  0E00               	movlw	0
   979  0013A2  0100               	movlb	0	; () banked
   980  0013A4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   981  0013A6  0E14               	movlw	20
   982  0013A8  6F82               	movwf	___wmul@multiplicand& (0+255),b
   983  0013AA  EC52  F00E         	call	___wmul	;wreg free
   984  0013AE  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
   985  0013B2  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   986  0013B6  0100               	movlb	0	; () banked
   987  0013B8  5180               	movf	?___wmul& (0+255),w,b
   988  0013BA  0100               	movlb	0	; () banked
   989  0013BC  278A               	addwf	??_sensorComputation& (0+255),f,b
   990  0013BE  0100               	movlb	0	; () banked
   991  0013C0  5181               	movf	(?___wmul+1)& (0+255),w,b
   992  0013C2  0100               	movlb	0	; () banked
   993  0013C4  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
   994  0013C6  90D8               	bcf	status,0,c
   995  0013C8  0100               	movlb	0	; () banked
   996  0013CA  3594               	rlcf	sensorComputation@j& (0+255),w,b
   997  0013CC  6ED9               	movwf	fsr2l,c
   998  0013CE  0100               	movlb	0	; () banked
   999  0013D0  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1000  0013D2  6EDA               	movwf	fsr2h,c
  1001  0013D4  0100               	movlb	0	; () banked
  1002  0013D6  518A               	movf	??_sensorComputation& (0+255),w,b
  1003  0013D8  26D9               	addwf	fsr2l,f,c
  1004  0013DA  0100               	movlb	0	; () banked
  1005  0013DC  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1006  0013DE  22DA               	addwfc	fsr2h,f,c
  1007  0013E0  CFDE F08C          	movff	postinc2,sensorComputation@max
  1008  0013E4  CFDD F08D          	movff	postdec2,sensorComputation@max+1
  1009  0013E8  C08C  F08E         	movff	sensorComputation@max,sensorComputation@min
  1010  0013EC  C08D  F08F         	movff	sensorComputation@max+1,sensorComputation@min+1
  1011  0013F0  C08E  F090         	movff	sensorComputation@min,sensorComputation@sum
  1012  0013F4  C08F  F091         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1013                           
  1014                           ;user.c: 135: continue;
  1015  0013F8  D08F               	goto	l1963
  1016  0013FA                     l1961:
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;user.c: 136: }
  1020                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
  1021  0013FA  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1022  0013FE  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1023  001402  0E00               	movlw	0
  1024  001404  0100               	movlb	0	; () banked
  1025  001406  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1026  001408  0E14               	movlw	20
  1027  00140A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1028  00140C  EC52  F00E         	call	___wmul	;wreg free
  1029  001410  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1030  001414  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1031  001418  0100               	movlb	0	; () banked
  1032  00141A  5180               	movf	?___wmul& (0+255),w,b
  1033  00141C  0100               	movlb	0	; () banked
  1034  00141E  278A               	addwf	??_sensorComputation& (0+255),f,b
  1035  001420  0100               	movlb	0	; () banked
  1036  001422  5181               	movf	(?___wmul+1)& (0+255),w,b
  1037  001424  0100               	movlb	0	; () banked
  1038  001426  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1039  001428  90D8               	bcf	status,0,c
  1040  00142A  0100               	movlb	0	; () banked
  1041  00142C  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1042  00142E  6ED9               	movwf	fsr2l,c
  1043  001430  0100               	movlb	0	; () banked
  1044  001432  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1045  001434  6EDA               	movwf	fsr2h,c
  1046  001436  0100               	movlb	0	; () banked
  1047  001438  518A               	movf	??_sensorComputation& (0+255),w,b
  1048  00143A  26D9               	addwf	fsr2l,f,c
  1049  00143C  0100               	movlb	0	; () banked
  1050  00143E  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1051  001440  22DA               	addwfc	fsr2h,f,c
  1052  001442  CFDE F084          	movff	postinc2,MIN@a
  1053  001446  CFDD F085          	movff	postdec2,MIN@a+1
  1054  00144A  C08E  F086         	movff	sensorComputation@min,MIN@b
  1055  00144E  C08F  F087         	movff	sensorComputation@min+1,MIN@b+1
  1056  001452  EC6C  F00E         	call	_MIN	;wreg free
  1057  001456  C084  F08E         	movff	?_MIN,sensorComputation@min
  1058  00145A  C085  F08F         	movff	?_MIN+1,sensorComputation@min+1
  1059                           
  1060                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
  1061  00145E  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1062  001462  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1063  001466  0E00               	movlw	0
  1064  001468  0100               	movlb	0	; () banked
  1065  00146A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1066  00146C  0E14               	movlw	20
  1067  00146E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1068  001470  EC52  F00E         	call	___wmul	;wreg free
  1069  001474  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1070  001478  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1071  00147C  0100               	movlb	0	; () banked
  1072  00147E  5180               	movf	?___wmul& (0+255),w,b
  1073  001480  0100               	movlb	0	; () banked
  1074  001482  278A               	addwf	??_sensorComputation& (0+255),f,b
  1075  001484  0100               	movlb	0	; () banked
  1076  001486  5181               	movf	(?___wmul+1)& (0+255),w,b
  1077  001488  0100               	movlb	0	; () banked
  1078  00148A  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1079  00148C  90D8               	bcf	status,0,c
  1080  00148E  0100               	movlb	0	; () banked
  1081  001490  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1082  001492  6ED9               	movwf	fsr2l,c
  1083  001494  0100               	movlb	0	; () banked
  1084  001496  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1085  001498  6EDA               	movwf	fsr2h,c
  1086  00149A  0100               	movlb	0	; () banked
  1087  00149C  518A               	movf	??_sensorComputation& (0+255),w,b
  1088  00149E  26D9               	addwf	fsr2l,f,c
  1089  0014A0  0100               	movlb	0	; () banked
  1090  0014A2  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1091  0014A4  22DA               	addwfc	fsr2h,f,c
  1092  0014A6  CFDE F084          	movff	postinc2,MAX@a
  1093  0014AA  CFDD F085          	movff	postdec2,MAX@a+1
  1094  0014AE  C08C  F086         	movff	sensorComputation@max,MAX@b
  1095  0014B2  C08D  F087         	movff	sensorComputation@max+1,MAX@b+1
  1096  0014B6  EC84  F00E         	call	_MAX	;wreg free
  1097  0014BA  C084  F08C         	movff	?_MAX,sensorComputation@max
  1098  0014BE  C085  F08D         	movff	?_MAX+1,sensorComputation@max+1
  1099                           
  1100                           ;user.c: 139: sum += sensorTemp[i][j];
  1101  0014C2  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1102  0014C6  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1103  0014CA  0E00               	movlw	0
  1104  0014CC  0100               	movlb	0	; () banked
  1105  0014CE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1106  0014D0  0E14               	movlw	20
  1107  0014D2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1108  0014D4  EC52  F00E         	call	___wmul	;wreg free
  1109  0014D8  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1110  0014DC  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1111  0014E0  0100               	movlb	0	; () banked
  1112  0014E2  5180               	movf	?___wmul& (0+255),w,b
  1113  0014E4  0100               	movlb	0	; () banked
  1114  0014E6  278A               	addwf	??_sensorComputation& (0+255),f,b
  1115  0014E8  0100               	movlb	0	; () banked
  1116  0014EA  5181               	movf	(?___wmul+1)& (0+255),w,b
  1117  0014EC  0100               	movlb	0	; () banked
  1118  0014EE  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1119  0014F0  90D8               	bcf	status,0,c
  1120  0014F2  0100               	movlb	0	; () banked
  1121  0014F4  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1122  0014F6  6ED9               	movwf	fsr2l,c
  1123  0014F8  0100               	movlb	0	; () banked
  1124  0014FA  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1125  0014FC  6EDA               	movwf	fsr2h,c
  1126  0014FE  0100               	movlb	0	; () banked
  1127  001500  518A               	movf	??_sensorComputation& (0+255),w,b
  1128  001502  26D9               	addwf	fsr2l,f,c
  1129  001504  0100               	movlb	0	; () banked
  1130  001506  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1131  001508  22DA               	addwfc	fsr2h,f,c
  1132  00150A  50DE               	movf	postinc2,w,c
  1133  00150C  0100               	movlb	0	; () banked
  1134  00150E  2790               	addwf	sensorComputation@sum& (0+255),f,b
  1135  001510  50DD               	movf	postdec2,w,c
  1136  001512  0100               	movlb	0	; () banked
  1137  001514  2391               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1138  001516  D000               	goto	l1963
  1139  001518                     l1963:
  1140                           
  1141                           ; BSR set to: 0
  1142  001518  0100               	movlb	0	; () banked
  1143  00151A  4B94               	infsnz	sensorComputation@j& (0+255),f,b
  1144  00151C  2B95               	incf	(sensorComputation@j+1)& (0+255),f,b
  1145                           
  1146                           ; BSR set to: 0
  1147  00151E  0100               	movlb	0	; () banked
  1148  001520  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1149  001522  D734               	goto	l1957
  1150  001524  0100               	movlb	0	; () banked
  1151  001526  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
  1152  001528  E102               	bnz	l1967
  1153  00152A  D729               	goto	L3
  1154  00152C  D000               	goto	l1967
  1155  00152E                     l1967:
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;user.c: 140: }
  1159                           ;user.c: 141: sum = sum - min - max;
  1160  00152E  0100               	movlb	0	; () banked
  1161  001530  518C               	movf	sensorComputation@max& (0+255),w,b
  1162  001532  0100               	movlb	0	; () banked
  1163  001534  258E               	addwf	sensorComputation@min& (0+255),w,b
  1164  001536  0100               	movlb	0	; () banked
  1165  001538  6F8A               	movwf	??_sensorComputation& (0+255),b
  1166  00153A  0100               	movlb	0	; () banked
  1167  00153C  518D               	movf	(sensorComputation@max+1)& (0+255),w,b
  1168  00153E  0100               	movlb	0	; () banked
  1169  001540  218F               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1170  001542  0100               	movlb	0	; () banked
  1171  001544  6F8B               	movwf	(??_sensorComputation+1)& (0+255),b
  1172  001546  0100               	movlb	0	; () banked
  1173  001548  1F8A               	comf	??_sensorComputation& (0+255),f,b
  1174  00154A  1F8B               	comf	(??_sensorComputation+1)& (0+255),f,b
  1175  00154C  4B8A               	infsnz	??_sensorComputation& (0+255),f,b
  1176  00154E  2B8B               	incf	(??_sensorComputation+1)& (0+255),f,b
  1177  001550  0100               	movlb	0	; () banked
  1178  001552  5190               	movf	sensorComputation@sum& (0+255),w,b
  1179  001554  0100               	movlb	0	; () banked
  1180  001556  258A               	addwf	??_sensorComputation& (0+255),w,b
  1181  001558  0100               	movlb	0	; () banked
  1182  00155A  6F90               	movwf	sensorComputation@sum& (0+255),b
  1183  00155C  0100               	movlb	0	; () banked
  1184  00155E  5191               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1185  001560  0100               	movlb	0	; () banked
  1186  001562  218B               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1187  001564  0100               	movlb	0	; () banked
  1188  001566  6F91               	movwf	(sensorComputation@sum+1)& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1192  001568  C090  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1193  00156C  C091  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1194  001570  0E00               	movlw	0
  1195  001572  0100               	movlb	0	; () banked
  1196  001574  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1197  001576  0E08               	movlw	8
  1198  001578  6F82               	movwf	___awdiv@divisor& (0+255),b
  1199  00157A  EC74  F00D         	call	___awdiv	;wreg free
  1200  00157E  90D8               	bcf	status,0,c
  1201  001580  0100               	movlb	0	; () banked
  1202  001582  3592               	rlcf	sensorComputation@i& (0+255),w,b
  1203  001584  6ED9               	movwf	fsr2l,c
  1204  001586  0100               	movlb	0	; () banked
  1205  001588  3593               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1206  00158A  6EDA               	movwf	fsr2h,c
  1207  00158C  0E2B               	movlw	low _sensorValue
  1208  00158E  26D9               	addwf	fsr2l,f,c
  1209  001590  0E00               	movlw	high _sensorValue
  1210  001592  22DA               	addwfc	fsr2h,f,c
  1211  001594  0100               	movlb	0	; () banked
  1212  001596  C080  FFDE         	movff	?___awdiv,postinc2
  1213  00159A  0100               	movlb	0	; () banked
  1214  00159C  C081  FFDD         	movff	?___awdiv+1,postdec2
  1215                           
  1216                           ; BSR set to: 0
  1217  0015A0  0100               	movlb	0	; () banked
  1218  0015A2  4B92               	infsnz	sensorComputation@i& (0+255),f,b
  1219  0015A4  2B93               	incf	(sensorComputation@i+1)& (0+255),f,b
  1220                           
  1221                           ; BSR set to: 0
  1222  0015A6  0100               	movlb	0	; () banked
  1223  0015A8  BF93               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1224  0015AA  D6DE               	goto	l1951
  1225  0015AC  0100               	movlb	0	; () banked
  1226  0015AE  5193               	movf	(sensorComputation@i+1)& (0+255),w,b
  1227  0015B0  E102               	bnz	l295
  1228  0015B2  D6D3               	goto	L4
  1229  0015B4  D000               	goto	l295
  1230  0015B6                     l295:
  1231                           
  1232                           ; BSR set to: 0
  1233  0015B6  0012               	return		;funcret
  1234  0015B8                     __end_of_sensorComputation:
  1235                           	opt stack 0
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1l	equ	0xFE1
  1244                           postinc2	equ	0xFDE
  1245                           postdec2	equ	0xFDD
  1246                           fsr2h	equ	0xFDA
  1247                           fsr2l	equ	0xFD9
  1248                           status	equ	0xFD8
  1249                           
  1250 ;; *************** function ___wmul *****************
  1251 ;; Defined at:
  1252 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1255 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  product         2   39[COMRAM] unsigned int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2    0[BANK0 ] unsigned int 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, prodl, prodh
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:        6 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    4
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_sensorComputation
  1278 ;;		_sensorUpdate
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text3
  1283  001CA4                     __ptext3:
  1284                           	opt stack 0
  1285  001CA4                     ___wmul:
  1286                           	opt stack 24
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;incstack = 0
  1290  001CA4  0100               	movlb	0	; () banked
  1291  001CA6  5180               	movf	___wmul@multiplier& (0+255),w,b
  1292  001CA8  0100               	movlb	0	; () banked
  1293  001CAA  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1294  001CAC  CFF3 F028          	movff	prodl,___wmul@product
  1295  001CB0  CFF4 F029          	movff	prodh,___wmul@product+1
  1296  001CB4  0100               	movlb	0	; () banked
  1297  001CB6  5180               	movf	___wmul@multiplier& (0+255),w,b
  1298  001CB8  0100               	movlb	0	; () banked
  1299  001CBA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1300  001CBC  50F3               	movf	prodl,w,c
  1301  001CBE  2629               	addwf	___wmul@product+1,f,c
  1302  001CC0  0100               	movlb	0	; () banked
  1303  001CC2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1304  001CC4  0100               	movlb	0	; () banked
  1305  001CC6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1306  001CC8  50F3               	movf	prodl,w,c
  1307  001CCA  2629               	addwf	___wmul@product+1,f,c
  1308                           
  1309                           ; BSR set to: 0
  1310  001CCC  C028  F080         	movff	___wmul@product,?___wmul
  1311  001CD0  C029  F081         	movff	___wmul@product+1,?___wmul+1
  1312  001CD4  D000               	goto	l320
  1313  001CD6                     l320:
  1314                           
  1315                           ; BSR set to: 0
  1316  001CD6  0012               	return		;funcret
  1317  001CD8                     __end_of___wmul:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           prodh	equ	0xFF4
  1324                           prodl	equ	0xFF3
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1l	equ	0xFE1
  1329                           postinc2	equ	0xFDE
  1330                           postdec2	equ	0xFDD
  1331                           fsr2h	equ	0xFDA
  1332                           fsr2l	equ	0xFD9
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function ___awdiv *****************
  1336 ;; Defined at:
  1337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  dividend        2    0[BANK0 ] int 
  1340 ;;  divisor         2    2[BANK0 ] int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  quotient        2    6[BANK0 ] int 
  1343 ;;  sign            1    5[BANK0 ] unsigned char 
  1344 ;;  counter         1    4[BANK0 ] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2    0[BANK0 ] int 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;Total ram usage:        8 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    4
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_sensorComputation
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text4
  1369  001AE8                     __ptext4:
  1370                           	opt stack 0
  1371  001AE8                     ___awdiv:
  1372                           	opt stack 24
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;incstack = 0
  1376  001AE8  0E00               	movlw	0
  1377  001AEA  0100               	movlb	0	; () banked
  1378  001AEC  6F85               	movwf	___awdiv@sign& (0+255),b
  1379                           
  1380                           ; BSR set to: 0
  1381  001AEE  0100               	movlb	0	; () banked
  1382  001AF0  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1383  001AF2  D009               	goto	l1903
  1384                           
  1385                           ; BSR set to: 0
  1386  001AF4  0100               	movlb	0	; () banked
  1387  001AF6  6D82               	negf	___awdiv@divisor& (0+255),b
  1388  001AF8  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1389  001AFA  B0D8               	btfsc	status,0,c
  1390  001AFC  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1391                           
  1392                           ; BSR set to: 0
  1393  001AFE  0E01               	movlw	1
  1394  001B00  0100               	movlb	0	; () banked
  1395  001B02  6F85               	movwf	___awdiv@sign& (0+255),b
  1396  001B04  D000               	goto	l1903
  1397  001B06                     l1903:
  1398                           
  1399                           ; BSR set to: 0
  1400  001B06  0100               	movlb	0	; () banked
  1401  001B08  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1402  001B0A  D009               	goto	l1909
  1403                           
  1404                           ; BSR set to: 0
  1405  001B0C  0100               	movlb	0	; () banked
  1406  001B0E  6D80               	negf	___awdiv@dividend& (0+255),b
  1407  001B10  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1408  001B12  B0D8               	btfsc	status,0,c
  1409  001B14  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1410                           
  1411                           ; BSR set to: 0
  1412  001B16  0E01               	movlw	1
  1413  001B18  0100               	movlb	0	; () banked
  1414  001B1A  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1415  001B1C  D000               	goto	l1909
  1416  001B1E                     l1909:
  1417                           
  1418                           ; BSR set to: 0
  1419  001B1E  0E00               	movlw	0
  1420  001B20  0100               	movlb	0	; () banked
  1421  001B22  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1422  001B24  0E00               	movlw	0
  1423  001B26  6F86               	movwf	___awdiv@quotient& (0+255),b
  1424                           
  1425                           ; BSR set to: 0
  1426  001B28  0100               	movlb	0	; () banked
  1427  001B2A  5182               	movf	___awdiv@divisor& (0+255),w,b
  1428  001B2C  0100               	movlb	0	; () banked
  1429  001B2E  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1430  001B30  B4D8               	btfsc	status,2,c
  1431  001B32  D031               	goto	l1931
  1432                           
  1433                           ; BSR set to: 0
  1434  001B34  0E01               	movlw	1
  1435  001B36  0100               	movlb	0	; () banked
  1436  001B38  6F84               	movwf	___awdiv@counter& (0+255),b
  1437  001B3A  D007               	goto	l1917
  1438  001B3C                     l1915:
  1439                           
  1440                           ; BSR set to: 0
  1441  001B3C  0100               	movlb	0	; () banked
  1442  001B3E  90D8               	bcf	status,0,c
  1443  001B40  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1444  001B42  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1445  001B44  0100               	movlb	0	; () banked
  1446  001B46  2B84               	incf	___awdiv@counter& (0+255),f,b
  1447  001B48  D000               	goto	l1917
  1448  001B4A                     l1917:
  1449                           
  1450                           ; BSR set to: 0
  1451  001B4A  0100               	movlb	0	; () banked
  1452  001B4C  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1453  001B4E  D002               	goto	l1919
  1454  001B50  D7F5               	goto	l1915
  1455                           
  1456                           ; BSR set to: 0
  1457  001B52  D000               	goto	l1919
  1458  001B54                     l1919:
  1459                           
  1460                           ; BSR set to: 0
  1461  001B54  0100               	movlb	0	; () banked
  1462  001B56  90D8               	bcf	status,0,c
  1463  001B58  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1464  001B5A  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1465                           
  1466                           ; BSR set to: 0
  1467  001B5C  0100               	movlb	0	; () banked
  1468  001B5E  5182               	movf	___awdiv@divisor& (0+255),w,b
  1469  001B60  0100               	movlb	0	; () banked
  1470  001B62  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1471  001B64  0100               	movlb	0	; () banked
  1472  001B66  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1473  001B68  0100               	movlb	0	; () banked
  1474  001B6A  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1475  001B6C  A0D8               	btfss	status,0,c
  1476  001B6E  D00B               	goto	l1927
  1477                           
  1478                           ; BSR set to: 0
  1479  001B70  0100               	movlb	0	; () banked
  1480  001B72  5182               	movf	___awdiv@divisor& (0+255),w,b
  1481  001B74  0100               	movlb	0	; () banked
  1482  001B76  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1483  001B78  0100               	movlb	0	; () banked
  1484  001B7A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1485  001B7C  0100               	movlb	0	; () banked
  1486  001B7E  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489  001B80  0100               	movlb	0	; () banked
  1490  001B82  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1491  001B84  D000               	goto	l1927
  1492  001B86                     l1927:
  1493                           
  1494                           ; BSR set to: 0
  1495  001B86  0100               	movlb	0	; () banked
  1496  001B88  90D8               	bcf	status,0,c
  1497  001B8A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1498  001B8C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1499                           
  1500                           ; BSR set to: 0
  1501  001B8E  0100               	movlb	0	; () banked
  1502  001B90  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1503  001B92  D7E0               	goto	l1919
  1504                           
  1505                           ; BSR set to: 0
  1506  001B94  D000               	goto	l1931
  1507  001B96                     l1931:
  1508                           
  1509                           ; BSR set to: 0
  1510  001B96  0100               	movlb	0	; () banked
  1511  001B98  5185               	movf	___awdiv@sign& (0+255),w,b
  1512  001B9A  0100               	movlb	0	; () banked
  1513  001B9C  B4D8               	btfsc	status,2,c
  1514  001B9E  D006               	goto	l1935
  1515                           
  1516                           ; BSR set to: 0
  1517  001BA0  0100               	movlb	0	; () banked
  1518  001BA2  6D86               	negf	___awdiv@quotient& (0+255),b
  1519  001BA4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1520  001BA6  B0D8               	btfsc	status,0,c
  1521  001BA8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1522  001BAA  D000               	goto	l1935
  1523  001BAC                     l1935:
  1524                           
  1525                           ; BSR set to: 0
  1526  001BAC  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1527  001BB0  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1528  001BB4  D000               	goto	l513
  1529  001BB6                     l513:
  1530                           
  1531                           ; BSR set to: 0
  1532  001BB6  0012               	return		;funcret
  1533  001BB8                     __end_of___awdiv:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           postinc0	equ	0xFEE
  1542                           wreg	equ	0xFE8
  1543                           postdec1	equ	0xFE5
  1544                           fsr1l	equ	0xFE1
  1545                           postinc2	equ	0xFDE
  1546                           postdec2	equ	0xFDD
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _MIN *****************
  1552 ;; Defined at:
  1553 ;;		line 175 in file "user.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  a               2    4[BANK0 ] int 
  1556 ;;  b               2    6[BANK0 ] int 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  2    4[BANK0 ] int 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1568 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;Total ram usage:        5 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    4
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_sensorComputation
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text5
  1583  001CD8                     __ptext5:
  1584                           	opt stack 0
  1585  001CD8                     _MIN:
  1586                           	opt stack 24
  1587                           
  1588                           ;user.c: 177: if(a>b) return b;
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;incstack = 0
  1592  001CD8  0100               	movlb	0	; () banked
  1593  001CDA  5184               	movf	MIN@a& (0+255),w,b
  1594  001CDC  0100               	movlb	0	; () banked
  1595  001CDE  5D86               	subwf	MIN@b& (0+255),w,b
  1596  001CE0  0100               	movlb	0	; () banked
  1597  001CE2  5187               	movf	(MIN@b+1)& (0+255),w,b
  1598  001CE4  0A80               	xorlw	128
  1599  001CE6  6E2A               	movwf	??_MIN& (0+255),c
  1600  001CE8  0100               	movlb	0	; () banked
  1601  001CEA  5185               	movf	(MIN@a+1)& (0+255),w,b
  1602  001CEC  0A80               	xorlw	128
  1603  001CEE  582A               	subwfb	??_MIN& (0+255),w,c
  1604  001CF0  B0D8               	btfsc	status,0,c
  1605  001CF2  D005               	goto	l312
  1606                           
  1607                           ; BSR set to: 0
  1608  001CF4  C086  F084         	movff	MIN@b,?_MIN
  1609  001CF8  C087  F085         	movff	MIN@b+1,?_MIN+1
  1610  001CFC  D004               	goto	l313
  1611  001CFE                     l312:
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;user.c: 178: return a;
  1615  001CFE  C084  F084         	movff	MIN@a,?_MIN
  1616  001D02  C085  F085         	movff	MIN@a+1,?_MIN+1
  1617  001D06                     l313:
  1618                           
  1619                           ; BSR set to: 0
  1620  001D06  0012               	return		;funcret
  1621  001D08                     __end_of_MIN:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           prodh	equ	0xFF4
  1628                           prodl	equ	0xFF3
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           postinc2	equ	0xFDE
  1634                           postdec2	equ	0xFDD
  1635                           fsr2h	equ	0xFDA
  1636                           fsr2l	equ	0xFD9
  1637                           status	equ	0xFD8
  1638                           
  1639 ;; *************** function _MAX *****************
  1640 ;; Defined at:
  1641 ;;		line 181 in file "user.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  a               2    4[BANK0 ] int 
  1644 ;;  b               2    6[BANK0 ] int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    4[BANK0 ] int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_sensorComputation
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text6
  1671  001D08                     __ptext6:
  1672                           	opt stack 0
  1673  001D08                     _MAX:
  1674                           	opt stack 24
  1675                           
  1676                           ;user.c: 183: if(a>b) return a;
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;incstack = 0
  1680  001D08  0100               	movlb	0	; () banked
  1681  001D0A  5184               	movf	MAX@a& (0+255),w,b
  1682  001D0C  0100               	movlb	0	; () banked
  1683  001D0E  5D86               	subwf	MAX@b& (0+255),w,b
  1684  001D10  0100               	movlb	0	; () banked
  1685  001D12  5187               	movf	(MAX@b+1)& (0+255),w,b
  1686  001D14  0A80               	xorlw	128
  1687  001D16  6E2A               	movwf	??_MAX& (0+255),c
  1688  001D18  0100               	movlb	0	; () banked
  1689  001D1A  5185               	movf	(MAX@a+1)& (0+255),w,b
  1690  001D1C  0A80               	xorlw	128
  1691  001D1E  582A               	subwfb	??_MAX& (0+255),w,c
  1692  001D20  B0D8               	btfsc	status,0,c
  1693  001D22  D005               	goto	l316
  1694                           
  1695                           ; BSR set to: 0
  1696  001D24  C084  F084         	movff	MAX@a,?_MAX
  1697  001D28  C085  F085         	movff	MAX@a+1,?_MAX+1
  1698  001D2C  D004               	goto	l317
  1699  001D2E                     l316:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;user.c: 184: return b;
  1703  001D2E  C086  F084         	movff	MAX@b,?_MAX
  1704  001D32  C087  F085         	movff	MAX@b+1,?_MAX+1
  1705  001D36                     l317:
  1706                           
  1707                           ; BSR set to: 0
  1708  001D36  0012               	return		;funcret
  1709  001D38                     __end_of_MAX:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           postinc2	equ	0xFDE
  1722                           postdec2	equ	0xFDD
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _InitApp *****************
  1728 ;; Defined at:
  1729 ;;		line 35 in file "user.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    5
  1750 ;; This function calls:
  1751 ;;		_AlgorithmSelection
  1752 ;;		_delay
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text7
  1759  001BF6                     __ptext7:
  1760                           	opt stack 0
  1761  001BF6                     _InitApp:
  1762                           	opt stack 25
  1763                           
  1764                           ;user.c: 39: TRISC = 0;
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;incstack = 0
  1768  001BF6  0E00               	movlw	0
  1769  001BF8  6E94               	movwf	3988,c	;volatile
  1770                           
  1771                           ;user.c: 43: TRISEbits.TRISE1=1;
  1772  001BFA  8296               	bsf	3990,1,c	;volatile
  1773                           
  1774                           ;user.c: 45: TRISEbits.TRISE2=1;
  1775  001BFC  8496               	bsf	3990,2,c	;volatile
  1776                           
  1777                           ;user.c: 47: TRISBbits.RB1=1;
  1778  001BFE  8293               	bsf	3987,1,c	;volatile
  1779                           
  1780                           ;user.c: 49: TRISBbits.RB0=1;
  1781  001C00  8093               	bsf	3987,0,c	;volatile
  1782                           
  1783                           ;user.c: 52: TRISBbits.RB3=1;
  1784  001C02  8693               	bsf	3987,3,c	;volatile
  1785                           
  1786                           ;user.c: 54: TRISBbits.RB2=1;
  1787  001C04  8493               	bsf	3987,2,c	;volatile
  1788                           
  1789                           ;user.c: 58: ADCON1 =0b00000001;
  1790  001C06  0E01               	movlw	1
  1791  001C08  6EC1               	movwf	4033,c	;volatile
  1792                           
  1793                           ;user.c: 63: ADCON2=0b00001010;
  1794  001C0A  0E0A               	movlw	10
  1795  001C0C  6EC0               	movwf	4032,c	;volatile
  1796                           
  1797                           ;user.c: 68: ADCON0=0b00101011;
  1798  001C0E  0E2B               	movlw	43
  1799  001C10  6EC2               	movwf	4034,c	;volatile
  1800                           
  1801                           ;user.c: 77: T0CON = 0b11000100;
  1802  001C12  0EC4               	movlw	196
  1803  001C14  6ED5               	movwf	4053,c	;volatile
  1804                           
  1805                           ;user.c: 85: INTCON2 = 0b11110100;
  1806  001C16  0EF4               	movlw	244
  1807  001C18  6EF1               	movwf	intcon2,c	;volatile
  1808                           
  1809                           ;user.c: 95: INTCON = 0b00100000;
  1810  001C1A  0E20               	movlw	32
  1811  001C1C  6EF2               	movwf	intcon,c	;volatile
  1812                           
  1813                           ;user.c: 105: AlgorithmSelection();
  1814  001C1E  EC9C  F00E         	call	_AlgorithmSelection	;wreg free
  1815                           
  1816                           ;user.c: 108: delay(1000);
  1817  001C22  0E03               	movlw	3
  1818  001C24  6E29               	movwf	delay@ms+1,c
  1819  001C26  0EE8               	movlw	232
  1820  001C28  6E28               	movwf	delay@ms,c
  1821  001C2A  ECDC  F00D         	call	_delay	;wreg free
  1822                           
  1823                           ;user.c: 109: INTCONbits.GIE = 1;
  1824  001C2E  8EF2               	bsf	intcon,7,c	;volatile
  1825  001C30  0012               	return		;funcret
  1826  001C32                     __end_of_InitApp:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           intcon2	equ	0xFF1
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1l	equ	0xFE1
  1840                           postinc2	equ	0xFDE
  1841                           postdec2	equ	0xFDD
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8
  1845                           
  1846 ;; *************** function _delay *****************
  1847 ;; Defined at:
  1848 ;;		line 29 in file "user.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  ms              2   39[COMRAM] unsigned int 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  x               2    0[BANK0 ] int 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;		None               void
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;Total ram usage:        5 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:    4
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_InitApp
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text8
  1877  001BB8                     __ptext8:
  1878                           	opt stack 0
  1879  001BB8                     _delay:
  1880                           	opt stack 25
  1881                           
  1882                           ;user.c: 30: int x = 0;
  1883                           
  1884                           ;incstack = 0
  1885  001BB8  0E00               	movlw	0
  1886  001BBA  0100               	movlb	0	; () banked
  1887  001BBC  6F81               	movwf	(delay@x+1)& (0+255),b
  1888  001BBE  0E00               	movlw	0
  1889  001BC0  6F80               	movwf	delay@x& (0+255),b
  1890                           
  1891                           ;user.c: 31: for (x = 0; x < ms; x++)
  1892  001BC2  0E00               	movlw	0
  1893  001BC4  0100               	movlb	0	; () banked
  1894  001BC6  6F81               	movwf	(delay@x+1)& (0+255),b
  1895  001BC8  0E00               	movlw	0
  1896  001BCA  6F80               	movwf	delay@x& (0+255),b
  1897  001BCC  D00B               	goto	l272
  1898  001BCE                     l1941:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1902  001BCE  0E0B               	movlw	11
  1903  001BD0  6E2A               	movwf	??_delay& (0+255),c
  1904  001BD2  0E62               	movlw	98
  1905  001BD4                     u1777:
  1906  001BD4  2EE8               	decfsz	wreg,f,c
  1907  001BD6  D7FE               	goto	u1777
  1908  001BD8  2E2A               	decfsz	??_delay& (0+255),f,c
  1909  001BDA  D7FC               	goto	u1777
  1910  001BDC  D000               	nop2	
  1911  001BDE  0100               	movlb	0	; () banked
  1912  001BE0  4B80               	infsnz	delay@x& (0+255),f,b
  1913  001BE2  2B81               	incf	(delay@x+1)& (0+255),f,b
  1914  001BE4                     l272:
  1915                           
  1916                           ; BSR set to: 0
  1917  001BE4  5028               	movf	delay@ms,w,c
  1918  001BE6  0100               	movlb	0	; () banked
  1919  001BE8  5D80               	subwf	delay@x& (0+255),w,b
  1920  001BEA  5029               	movf	delay@ms+1,w,c
  1921  001BEC  0100               	movlb	0	; () banked
  1922  001BEE  5981               	subwfb	(delay@x+1)& (0+255),w,b
  1923  001BF0  A0D8               	btfss	status,0,c
  1924  001BF2  D7ED               	goto	l1941
  1925                           
  1926                           ; BSR set to: 0
  1927                           
  1928                           ; BSR set to: 0
  1929  001BF4  0012               	return		;funcret
  1930  001BF6                     __end_of_delay:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           prodh	equ	0xFF4
  1937                           prodl	equ	0xFF3
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _AlgorithmSelection *****************
  1951 ;; Defined at:
  1952 ;;		line 112 in file "user.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;		None               void
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    4
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_InitApp
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text9
  1981  001D38                     __ptext9:
  1982                           	opt stack 0
  1983  001D38                     _AlgorithmSelection:
  1984                           	opt stack 25
  1985                           
  1986                           ;user.c: 114: ADCON0 = 0b00100111;
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;incstack = 0
  1990  001D38  0E27               	movlw	39
  1991  001D3A  6EC2               	movwf	4034,c	;volatile
  1992                           
  1993                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1994  001D3C  82C2               	bsf	4034,1,c	;volatile
  1995                           
  1996                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1997  001D3E  D000               	goto	l281
  1998  001D40                     l281:
  1999  001D40  B2C2               	btfsc	4034,1,c	;volatile
  2000  001D42  D7FE               	goto	l281
  2001                           
  2002                           ;user.c: 119: if(ADRESL > 0b10000000)
  2003  001D44  0E80               	movlw	128
  2004  001D46  64C3               	cpfsgt	4035,c	;volatile
  2005  001D48  D002               	goto	l1067
  2006                           
  2007                           ;user.c: 120: algorithm = LEFTWALL;
  2008  001D4A  0E00               	movlw	0
  2009  001D4C  D001               	goto	L5
  2010  001D4E                     l1067:
  2011                           
  2012                           ;user.c: 121: else
  2013                           ;user.c: 122: algorithm = RIGHTWALL;
  2014  001D4E  0E01               	movlw	1
  2015  001D50                     L5:
  2016  001D50  6E51               	movwf	_algorithm,c
  2017  001D52  D000               	goto	l286
  2018  001D54                     l286:
  2019  001D54  0012               	return		;funcret
  2020  001D56                     __end_of_AlgorithmSelection:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           intcon	equ	0xFF2
  2029                           intcon2	equ	0xFF1
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _ConfigureOscillator *****************
  2041 ;; Defined at:
  2042 ;;		line 24 in file "system.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;		None               void
  2049 ;; Registers used:
  2050 ;;		wreg, status,2
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    4
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text10
  2071  001DCC                     __ptext10:
  2072                           	opt stack 0
  2073  001DCC                     _ConfigureOscillator:
  2074                           	opt stack 26
  2075                           
  2076                           ;system.c: 29: OSCCON = 0b01111100;
  2077                           
  2078                           ;incstack = 0
  2079  001DCC  0E7C               	movlw	124
  2080  001DCE  6ED3               	movwf	4051,c	;volatile
  2081                           
  2082                           ;system.c: 31: OSCTUNE = 0b01001111;
  2083  001DD0  0E4F               	movlw	79
  2084  001DD2  6E9B               	movwf	3995,c	;volatile
  2085  001DD4  0012               	return		;funcret
  2086  001DD6                     __end_of_ConfigureOscillator:
  2087                           	opt stack 0
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           prodh	equ	0xFF4
  2093                           prodl	equ	0xFF3
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1l	equ	0xFE1
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _low_isr *****************
  2107 ;; Defined at:
  2108 ;;		line 296 in file "interrupts.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		None
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;Total ram usage:       17 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		Interrupt level 1
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	intcodelo
  2137  000018                     __pintcodelo:
  2138                           	opt stack 0
  2139  000018                     _low_isr:
  2140                           	opt stack 24
  2141                           
  2142                           ;incstack = 0
  2143  000018  CFD8 F001          	movff	status,??_low_isr
  2144  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  2145  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  2146  000024  CFFA F004          	movff	pclath,??_low_isr+3
  2147  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  2148  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  2149  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  2150  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  2151  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  2152  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  2153  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  2154  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  2155  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  2156  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  2157  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  2158  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  2159  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  2160  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  2161  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  2162  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  2163  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  2164  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  2165  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  2166  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  2167  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  2168  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  2169  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  2170  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  2171  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  2172  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  2173  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  2174  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  2175  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  2176  00009C  C001  FFD8         	movff	??_low_isr,status
  2177  0000A0  0010               	retfie	
  2178  0000A2                     __end_of_low_isr:
  2179                           	opt stack 0
  2180                           pclatu	equ	0xFFB
  2181                           pclath	equ	0xFFA
  2182                           tblptru	equ	0xFF8
  2183                           tblptrh	equ	0xFF7
  2184                           tblptrl	equ	0xFF6
  2185                           tablat	equ	0xFF5
  2186                           prodh	equ	0xFF4
  2187                           prodl	equ	0xFF3
  2188                           intcon	equ	0xFF2
  2189                           intcon2	equ	0xFF1
  2190                           postinc0	equ	0xFEE
  2191                           fsr0h	equ	0xFEA
  2192                           fsr0l	equ	0xFE9
  2193                           wreg	equ	0xFE8
  2194                           postdec1	equ	0xFE5
  2195                           fsr1h	equ	0xFE2
  2196                           fsr1l	equ	0xFE1
  2197                           bsr	equ	0xFE0
  2198                           postinc2	equ	0xFDE
  2199                           postdec2	equ	0xFDD
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _high_isr *****************
  2205 ;; Defined at:
  2206 ;;		line 98 in file "interrupts.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;		None               void
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:       14 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		_KController
  2229 ;;		_Reversing
  2230 ;;		_forward
  2231 ;;		_merge
  2232 ;;		_motorCounterUpdate
  2233 ;;		_moveMouse
  2234 ;;		_rotate
  2235 ;; This function is called by:
  2236 ;;		Interrupt level 2
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	intcode
  2241  000008                     __pintcode:
  2242                           	opt stack 0
  2243  000008                     _high_isr:
  2244                           	opt stack 24
  2245                           
  2246                           ;incstack = 0
  2247  000008  CFFA F01A          	movff	pclath,??_high_isr
  2248  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  2249  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  2250  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  2251                           pclatu	equ	0xFFB
  2252                           pclath	equ	0xFFA
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           intcon	equ	0xFF2
  2260                           intcon2	equ	0xFF1
  2261                           postinc0	equ	0xFEE
  2262                           fsr0h	equ	0xFEA
  2263                           fsr0l	equ	0xFE9
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1h	equ	0xFE2
  2267                           fsr1l	equ	0xFE1
  2268                           bsr	equ	0xFE0
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275                           	psect	intcode_body
  2276  00100A                     __pintcode_body:
  2277                           	opt stack 24
  2278  00100A                     int_func:
  2279                           	opt stack 24
  2280  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2281  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2282  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2283  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2284  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2285  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2286  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2287  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2288  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2289  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2290  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2291  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2292                           
  2293                           ;interrupts.c: 117: if(INTCONbits.TMR0IF == 1)
  2294  001038  A4F2               	btfss	intcon,2,c	;volatile
  2295  00103A  D167               	goto	i2l105
  2296                           
  2297                           ;interrupts.c: 118: {
  2298                           ;interrupts.c: 119: if(MotorDelayCounter > 2)
  2299  00103C  BE3A               	btfsc	_MotorDelayCounter+1,7,c
  2300  00103E  D161               	goto	i2l1859
  2301  001040  503A               	movf	_MotorDelayCounter+1,w,c
  2302  001042  E104               	bnz	i2u128_40
  2303  001044  0E03               	movlw	3
  2304  001046  5C39               	subwf	_MotorDelayCounter,w,c
  2305  001048  A0D8               	btfss	status,0,c
  2306  00104A  D15B               	goto	i2l1859
  2307  00104C                     i2u128_40:
  2308                           
  2309                           ;interrupts.c: 120: {
  2310                           ;interrupts.c: 122: if (ForwardCounter > 0) {
  2311  00104C  BE36               	btfsc	_ForwardCounter+1,7,c
  2312  00104E  D008               	goto	i2l1751
  2313  001050  5036               	movf	_ForwardCounter+1,w,c
  2314  001052  E103               	bnz	i2u129_40
  2315  001054  0435               	decf	_ForwardCounter,w,c
  2316  001056  A0D8               	btfss	status,0,c
  2317  001058  D003               	goto	i2l1751
  2318  00105A                     i2u129_40:
  2319                           
  2320                           ;interrupts.c: 123: forward();
  2321  00105A  ECAB  F00E         	call	_forward	;wreg free
  2322                           
  2323                           ;interrupts.c: 124: }
  2324  00105E  D145               	goto	i2l1857
  2325  001060                     i2l1751:
  2326                           
  2327                           ;interrupts.c: 125: else if (ReverseCounter > 0)
  2328  001060  BE3E               	btfsc	_ReverseCounter+1,7,c
  2329  001062  D008               	goto	i2l1755
  2330  001064  503E               	movf	_ReverseCounter+1,w,c
  2331  001066  E103               	bnz	i2u130_40
  2332  001068  043D               	decf	_ReverseCounter,w,c
  2333  00106A  A0D8               	btfss	status,0,c
  2334  00106C  D003               	goto	i2l1755
  2335  00106E                     i2u130_40:
  2336                           
  2337                           ;interrupts.c: 126: Reversing();
  2338  00106E  ECB9  F00E         	call	_Reversing	;wreg free
  2339  001072  D13B               	goto	i2l1857
  2340  001074                     i2l1755:
  2341                           
  2342                           ;interrupts.c: 127: else if(RotateCounter > 0)
  2343  001074  BE40               	btfsc	_RotateCounter+1,7,c
  2344  001076  D020               	goto	i2l1767
  2345  001078  5040               	movf	_RotateCounter+1,w,c
  2346  00107A  E103               	bnz	i2u131_40
  2347  00107C  043F               	decf	_RotateCounter,w,c
  2348  00107E  A0D8               	btfss	status,0,c
  2349  001080  D01B               	goto	i2l1767
  2350  001082                     i2u131_40:
  2351                           
  2352                           ;interrupts.c: 128: {
  2353                           ;interrupts.c: 130: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2354  001082  BE30               	btfsc	_sensorValue+5,7,c
  2355  001084  D006               	goto	i2l1759
  2356  001086  0E21               	movlw	33
  2357  001088  5C2F               	subwf	_sensorValue+4,w,c
  2358  00108A  0E03               	movlw	3
  2359  00108C  5830               	subwfb	_sensorValue+5,w,c
  2360  00108E  B0D8               	btfsc	status,0,c
  2361  001090  D008               	goto	i2l1761
  2362  001092                     i2l1759:
  2363  001092  BE32               	btfsc	_sensorValue+7,7,c
  2364  001094  D00D               	goto	i2l1765
  2365  001096  0E21               	movlw	33
  2366  001098  5C31               	subwf	_sensorValue+6,w,c
  2367  00109A  0E03               	movlw	3
  2368  00109C  5832               	subwfb	_sensorValue+7,w,c
  2369  00109E  A0D8               	btfss	status,0,c
  2370  0010A0  D007               	goto	i2l1765
  2371  0010A2                     i2l1761:
  2372                           
  2373                           ;interrupts.c: 131: ReverseCounter = 15;
  2374  0010A2  0E00               	movlw	0
  2375  0010A4  6E3E               	movwf	_ReverseCounter+1,c
  2376  0010A6  0E0F               	movlw	15
  2377  0010A8  6E3D               	movwf	_ReverseCounter,c
  2378                           
  2379                           ;interrupts.c: 132: Reversing();
  2380  0010AA  ECB9  F00E         	call	_Reversing	;wreg free
  2381                           
  2382                           ;interrupts.c: 133: } else {
  2383  0010AE  D11D               	goto	i2l1857
  2384  0010B0                     i2l1765:
  2385                           
  2386                           ;interrupts.c: 134: rotate(rotatingSide);
  2387  0010B0  5053               	movf	_rotatingSide,w,c
  2388  0010B2  EC19  F00E         	call	_rotate
  2389                           
  2390                           ;interrupts.c: 135: }
  2391                           ;interrupts.c: 136: }
  2392  0010B6  D119               	goto	i2l1857
  2393  0010B8                     i2l1767:
  2394                           
  2395                           ;interrupts.c: 146: else if (sensorValue[0] < 93 && algorithm == LEFTWALL)
  2396  0010B8  BE2C               	btfsc	_sensorValue+1,7,c
  2397  0010BA  D006               	goto	i2l1769
  2398  0010BC  502C               	movf	_sensorValue+1,w,c
  2399  0010BE  E11A               	bnz	i2l1781
  2400  0010C0  0E5D               	movlw	93
  2401  0010C2  5C2B               	subwf	_sensorValue,w,c
  2402  0010C4  B0D8               	btfsc	status,0,c
  2403  0010C6  D016               	goto	i2l1781
  2404  0010C8                     i2l1769:
  2405  0010C8  5051               	movf	_algorithm,w,c
  2406  0010CA  A4D8               	btfss	status,2,c
  2407  0010CC  D013               	goto	i2l1781
  2408                           
  2409                           ;interrupts.c: 147: {
  2410                           ;interrupts.c: 148: TurnLeft = sensorValue[0];
  2411  0010CE  C02B  F054         	movff	_sensorValue,_TurnLeft
  2412  0010D2  C02C  F055         	movff	_sensorValue+1,_TurnLeft+1
  2413                           
  2414                           ;interrupts.c: 153: if(justTurned == 0) {
  2415  0010D6  5052               	movf	_justTurned,w,c
  2416  0010D8  A4D8               	btfss	status,2,c
  2417  0010DA  D004               	goto	i2l1777
  2418                           
  2419                           ;interrupts.c: 154: ForwardCounter = 420;
  2420  0010DC  0E01               	movlw	1
  2421  0010DE  6E36               	movwf	_ForwardCounter+1,c
  2422  0010E0  0EA4               	movlw	164
  2423  0010E2  D003               	goto	L6
  2424  0010E4                     i2l1777:
  2425                           
  2426                           ;interrupts.c: 156: ForwardCounter = 400;
  2427  0010E4  0E01               	movlw	1
  2428  0010E6  6E36               	movwf	_ForwardCounter+1,c
  2429  0010E8  0E90               	movlw	144
  2430  0010EA                     L6:
  2431  0010EA  6E35               	movwf	_ForwardCounter,c
  2432  0010EC  D000               	goto	i2l1779
  2433  0010EE                     i2l1779:
  2434                           
  2435                           ;interrupts.c: 157: }
  2436                           ;interrupts.c: 158: forward();
  2437  0010EE  ECAB  F00E         	call	_forward	;wreg free
  2438                           
  2439                           ;interrupts.c: 159: }
  2440  0010F2  D0FB               	goto	i2l1857
  2441  0010F4                     i2l1781:
  2442                           
  2443                           ;interrupts.c: 161: else if (TurnLeft < 93) {
  2444  0010F4  BE55               	btfsc	_TurnLeft+1,7,c
  2445  0010F6  D006               	goto	i2l1783
  2446  0010F8  5055               	movf	_TurnLeft+1,w,c
  2447  0010FA  E119               	bnz	i2l1785
  2448  0010FC  0E5D               	movlw	93
  2449  0010FE  5C54               	subwf	_TurnLeft,w,c
  2450  001100  B0D8               	btfsc	status,0,c
  2451  001102  D015               	goto	i2l1785
  2452  001104                     i2l1783:
  2453                           
  2454                           ;interrupts.c: 162: RotateCounter = 167;
  2455  001104  0E00               	movlw	0
  2456  001106  6E40               	movwf	_RotateCounter+1,c
  2457  001108  0EA7               	movlw	167
  2458  00110A  6E3F               	movwf	_RotateCounter,c
  2459                           
  2460                           ;interrupts.c: 163: rotatingSide = LEFT;
  2461  00110C  0E00               	movlw	0
  2462  00110E  6E53               	movwf	_rotatingSide,c
  2463                           
  2464                           ;interrupts.c: 164: justTurned = 1;
  2465  001110  0E01               	movlw	1
  2466  001112  6E52               	movwf	_justTurned,c
  2467                           
  2468                           ;interrupts.c: 165: TurnRight= 200;
  2469  001114  0E00               	movlw	0
  2470  001116  6E57               	movwf	_TurnRight+1,c
  2471  001118  0EC8               	movlw	200
  2472  00111A  6E56               	movwf	_TurnRight,c
  2473                           
  2474                           ;interrupts.c: 166: TurnLeft = 300;
  2475  00111C  0E01               	movlw	1
  2476  00111E  6E55               	movwf	_TurnLeft+1,c
  2477  001120  0E2C               	movlw	44
  2478  001122  6E54               	movwf	_TurnLeft,c
  2479                           
  2480                           ;interrupts.c: 167: TurnedLeft = 1;
  2481  001124  0E00               	movlw	0
  2482  001126  6E42               	movwf	_TurnedLeft+1,c
  2483  001128  0E01               	movlw	1
  2484  00112A  6E41               	movwf	_TurnedLeft,c
  2485                           
  2486                           ;interrupts.c: 171: }
  2487  00112C  D0DE               	goto	i2l1857
  2488  00112E                     i2l1785:
  2489                           
  2490                           ;interrupts.c: 174: else if (sensorValue[1] < 84 && algorithm == LEFTWALL)
  2491  00112E  BE2E               	btfsc	_sensorValue+3,7,c
  2492  001130  D006               	goto	i2l1787
  2493  001132  502E               	movf	_sensorValue+3,w,c
  2494  001134  E11A               	bnz	i2l1799
  2495  001136  0E54               	movlw	84
  2496  001138  5C2D               	subwf	_sensorValue+2,w,c
  2497  00113A  B0D8               	btfsc	status,0,c
  2498  00113C  D016               	goto	i2l1799
  2499  00113E                     i2l1787:
  2500  00113E  5051               	movf	_algorithm,w,c
  2501  001140  A4D8               	btfss	status,2,c
  2502  001142  D013               	goto	i2l1799
  2503                           
  2504                           ;interrupts.c: 175: {
  2505                           ;interrupts.c: 176: TurnRight = sensorValue[1];
  2506  001144  C02D  F056         	movff	_sensorValue+2,_TurnRight
  2507  001148  C02E  F057         	movff	_sensorValue+3,_TurnRight+1
  2508                           
  2509                           ;interrupts.c: 187: if(justTurned == 0) {
  2510  00114C  5052               	movf	_justTurned,w,c
  2511  00114E  A4D8               	btfss	status,2,c
  2512  001150  D004               	goto	i2l1795
  2513                           
  2514                           ;interrupts.c: 188: ForwardCounter = 450;
  2515  001152  0E01               	movlw	1
  2516  001154  6E36               	movwf	_ForwardCounter+1,c
  2517  001156  0EC2               	movlw	194
  2518  001158  D003               	goto	L7
  2519  00115A                     i2l1795:
  2520                           
  2521                           ;interrupts.c: 190: ForwardCounter = 410;
  2522  00115A  0E01               	movlw	1
  2523  00115C  6E36               	movwf	_ForwardCounter+1,c
  2524  00115E  0E9A               	movlw	154
  2525  001160                     L7:
  2526  001160  6E35               	movwf	_ForwardCounter,c
  2527  001162  D000               	goto	i2l1797
  2528  001164                     i2l1797:
  2529                           
  2530                           ;interrupts.c: 191: }
  2531                           ;interrupts.c: 192: forward();
  2532  001164  ECAB  F00E         	call	_forward	;wreg free
  2533                           
  2534                           ;interrupts.c: 193: }
  2535  001168  D0C0               	goto	i2l1857
  2536  00116A                     i2l1799:
  2537                           
  2538                           ;interrupts.c: 197: else if (TurnRight < 84 && sensorValue[3] > 380) {
  2539  00116A  BE57               	btfsc	_TurnRight+1,7,c
  2540  00116C  D006               	goto	i2l1801
  2541  00116E  5057               	movf	_TurnRight+1,w,c
  2542  001170  E121               	bnz	i2l1805
  2543  001172  0E54               	movlw	84
  2544  001174  5C56               	subwf	_TurnRight,w,c
  2545  001176  B0D8               	btfsc	status,0,c
  2546  001178  D01D               	goto	i2l1805
  2547  00117A                     i2l1801:
  2548  00117A  BE32               	btfsc	_sensorValue+7,7,c
  2549  00117C  D01B               	goto	i2l1805
  2550  00117E  0E7D               	movlw	125
  2551  001180  5C31               	subwf	_sensorValue+6,w,c
  2552  001182  0E01               	movlw	1
  2553  001184  5832               	subwfb	_sensorValue+7,w,c
  2554  001186  A0D8               	btfss	status,0,c
  2555  001188  D015               	goto	i2l1805
  2556                           
  2557                           ;interrupts.c: 198: RotateCounter = 167;
  2558  00118A  0E00               	movlw	0
  2559  00118C  6E40               	movwf	_RotateCounter+1,c
  2560  00118E  0EA7               	movlw	167
  2561  001190  6E3F               	movwf	_RotateCounter,c
  2562                           
  2563                           ;interrupts.c: 199: rotatingSide = RIGHT;
  2564  001192  0E01               	movlw	1
  2565  001194  6E53               	movwf	_rotatingSide,c
  2566                           
  2567                           ;interrupts.c: 200: justTurned = 1;
  2568  001196  0E01               	movlw	1
  2569  001198  6E52               	movwf	_justTurned,c
  2570                           
  2571                           ;interrupts.c: 201: TurnedRight = 1;
  2572  00119A  0E00               	movlw	0
  2573  00119C  6E44               	movwf	_TurnedRight+1,c
  2574  00119E  0E01               	movlw	1
  2575  0011A0  6E43               	movwf	_TurnedRight,c
  2576                           
  2577                           ;interrupts.c: 202: TurnLeft = 300;
  2578  0011A2  0E01               	movlw	1
  2579  0011A4  6E55               	movwf	_TurnLeft+1,c
  2580  0011A6  0E2C               	movlw	44
  2581  0011A8  6E54               	movwf	_TurnLeft,c
  2582                           
  2583                           ;interrupts.c: 203: TurnRight = 300;
  2584  0011AA  0E01               	movlw	1
  2585  0011AC  6E57               	movwf	_TurnRight+1,c
  2586  0011AE  0E2C               	movlw	44
  2587  0011B0  6E56               	movwf	_TurnRight,c
  2588                           
  2589                           ;interrupts.c: 204: }
  2590  0011B2  D09B               	goto	i2l1857
  2591  0011B4                     i2l1805:
  2592                           
  2593                           ;interrupts.c: 205: else if (TurnRight < 84 && sensorValue[3] < 380) {
  2594  0011B4  BE57               	btfsc	_TurnRight+1,7,c
  2595  0011B6  D006               	goto	i2l1807
  2596  0011B8  5057               	movf	_TurnRight+1,w,c
  2597  0011BA  E10F               	bnz	i2l1811
  2598  0011BC  0E54               	movlw	84
  2599  0011BE  5C56               	subwf	_TurnRight,w,c
  2600  0011C0  B0D8               	btfsc	status,0,c
  2601  0011C2  D00B               	goto	i2l1811
  2602  0011C4                     i2l1807:
  2603  0011C4  BE32               	btfsc	_sensorValue+7,7,c
  2604  0011C6  D006               	goto	i2l1809
  2605  0011C8  0E7C               	movlw	124
  2606  0011CA  5C31               	subwf	_sensorValue+6,w,c
  2607  0011CC  0E01               	movlw	1
  2608  0011CE  5832               	subwfb	_sensorValue+7,w,c
  2609  0011D0  B0D8               	btfsc	status,0,c
  2610  0011D2  D003               	goto	i2l1811
  2611  0011D4                     i2l1809:
  2612                           
  2613                           ;interrupts.c: 206: KController();
  2614  0011D4  ECDC  F00A         	call	_KController	;wreg free
  2615                           
  2616                           ;interrupts.c: 207: }
  2617  0011D8  D088               	goto	i2l1857
  2618  0011DA                     i2l1811:
  2619                           
  2620                           ;interrupts.c: 223: else if ((sensorValue[0] > 93 && sensorValue[1] > 84 )
  2621                           ;interrupts.c: 224: && (sensorValue[3] > 380) && RotateCounter <= 0)
  2622  0011DA  BE2C               	btfsc	_sensorValue+1,7,c
  2623  0011DC  D03B               	goto	i2l1833
  2624  0011DE  502C               	movf	_sensorValue+1,w,c
  2625  0011E0  E104               	bnz	i2u145_40
  2626  0011E2  0E5E               	movlw	94
  2627  0011E4  5C2B               	subwf	_sensorValue,w,c
  2628  0011E6  A0D8               	btfss	status,0,c
  2629  0011E8  D035               	goto	i2l1833
  2630  0011EA                     i2u145_40:
  2631  0011EA  BE2E               	btfsc	_sensorValue+3,7,c
  2632  0011EC  D033               	goto	i2l1833
  2633  0011EE  502E               	movf	_sensorValue+3,w,c
  2634  0011F0  E104               	bnz	i2u146_40
  2635  0011F2  0E55               	movlw	85
  2636  0011F4  5C2D               	subwf	_sensorValue+2,w,c
  2637  0011F6  A0D8               	btfss	status,0,c
  2638  0011F8  D02D               	goto	i2l1833
  2639  0011FA                     i2u146_40:
  2640  0011FA  BE32               	btfsc	_sensorValue+7,7,c
  2641  0011FC  D02B               	goto	i2l1833
  2642  0011FE  0E7D               	movlw	125
  2643  001200  5C31               	subwf	_sensorValue+6,w,c
  2644  001202  0E01               	movlw	1
  2645  001204  5832               	subwfb	_sensorValue+7,w,c
  2646  001206  A0D8               	btfss	status,0,c
  2647  001208  D025               	goto	i2l1833
  2648  00120A  BE40               	btfsc	_RotateCounter+1,7,c
  2649  00120C  D005               	goto	i2l1819
  2650  00120E  5040               	movf	_RotateCounter+1,w,c
  2651  001210  E121               	bnz	i2l1833
  2652  001212  043F               	decf	_RotateCounter,w,c
  2653  001214  B0D8               	btfsc	status,0,c
  2654  001216  D01E               	goto	i2l1833
  2655  001218                     i2l1819:
  2656                           
  2657                           ;interrupts.c: 225: {
  2658                           ;interrupts.c: 226: Deadend = 1;
  2659  001218  0E00               	movlw	0
  2660  00121A  6E34               	movwf	_Deadend+1,c
  2661  00121C  0E01               	movlw	1
  2662  00121E  6E33               	movwf	_Deadend,c
  2663                           
  2664                           ;interrupts.c: 227: RotateCounter = 167*2;
  2665  001220  0E01               	movlw	1
  2666  001222  6E40               	movwf	_RotateCounter+1,c
  2667  001224  0E4E               	movlw	78
  2668  001226  6E3F               	movwf	_RotateCounter,c
  2669                           
  2670                           ;interrupts.c: 228: rotate(rotatingSide);
  2671  001228  5053               	movf	_rotatingSide,w,c
  2672  00122A  EC19  F00E         	call	_rotate
  2673                           
  2674                           ;interrupts.c: 229: justTurned = 1;
  2675  00122E  0E01               	movlw	1
  2676  001230  6E52               	movwf	_justTurned,c
  2677                           
  2678                           ;interrupts.c: 230: TurnRight= 200;
  2679  001232  0E00               	movlw	0
  2680  001234  6E57               	movwf	_TurnRight+1,c
  2681  001236  0EC8               	movlw	200
  2682  001238  6E56               	movwf	_TurnRight,c
  2683                           
  2684                           ;interrupts.c: 231: TurnLeft = 300;
  2685  00123A  0E01               	movlw	1
  2686  00123C  6E55               	movwf	_TurnLeft+1,c
  2687  00123E  0E2C               	movlw	44
  2688  001240  6E54               	movwf	_TurnLeft,c
  2689                           
  2690                           ;interrupts.c: 232: TurnedLeft = 0;
  2691  001242  0E00               	movlw	0
  2692  001244  6E42               	movwf	_TurnedLeft+1,c
  2693  001246  0E00               	movlw	0
  2694  001248  6E41               	movwf	_TurnedLeft,c
  2695                           
  2696                           ;interrupts.c: 233: TurnedRight = 0;
  2697  00124A  0E00               	movlw	0
  2698  00124C  6E44               	movwf	_TurnedRight+1,c
  2699  00124E  0E00               	movlw	0
  2700  001250  6E43               	movwf	_TurnedRight,c
  2701                           
  2702                           ;interrupts.c: 234: }
  2703  001252  D04B               	goto	i2l1857
  2704  001254                     i2l1833:
  2705                           
  2706                           ;interrupts.c: 235: else if ((sensorValue[0] > 93 && sensorValue[1] > 84))
  2707  001254  BE2C               	btfsc	_sensorValue+1,7,c
  2708  001256  D02C               	goto	i2l1845
  2709  001258  502C               	movf	_sensorValue+1,w,c
  2710  00125A  E104               	bnz	i2u149_40
  2711  00125C  0E5E               	movlw	94
  2712  00125E  5C2B               	subwf	_sensorValue,w,c
  2713  001260  A0D8               	btfss	status,0,c
  2714  001262  D026               	goto	i2l1845
  2715  001264                     i2u149_40:
  2716  001264  BE2E               	btfsc	_sensorValue+3,7,c
  2717  001266  D024               	goto	i2l1845
  2718  001268  502E               	movf	_sensorValue+3,w,c
  2719  00126A  E104               	bnz	i2u150_40
  2720  00126C  0E55               	movlw	85
  2721  00126E  5C2D               	subwf	_sensorValue+2,w,c
  2722  001270  A0D8               	btfss	status,0,c
  2723  001272  D01E               	goto	i2l1845
  2724  001274                     i2u150_40:
  2725                           
  2726                           ;interrupts.c: 236: {
  2727                           ;interrupts.c: 237: if (sensorValue[3] < 80 || sensorValue[2] < 120){
  2728  001274  BE32               	btfsc	_sensorValue+7,7,c
  2729  001276  D00E               	goto	i2l1841
  2730  001278  5032               	movf	_sensorValue+7,w,c
  2731  00127A  E104               	bnz	i2u151_40
  2732  00127C  0E50               	movlw	80
  2733  00127E  5C31               	subwf	_sensorValue+6,w,c
  2734  001280  A0D8               	btfss	status,0,c
  2735  001282  D008               	goto	i2l1841
  2736  001284                     i2u151_40:
  2737  001284  BE30               	btfsc	_sensorValue+5,7,c
  2738  001286  D006               	goto	i2l1841
  2739  001288  5030               	movf	_sensorValue+5,w,c
  2740  00128A  E107               	bnz	i2l1843
  2741  00128C  0E78               	movlw	120
  2742  00128E  5C2F               	subwf	_sensorValue+4,w,c
  2743  001290  B0D8               	btfsc	status,0,c
  2744  001292  D003               	goto	i2l1843
  2745  001294                     i2l1841:
  2746                           
  2747                           ;interrupts.c: 238: KController();
  2748  001294  ECDC  F00A         	call	_KController	;wreg free
  2749                           
  2750                           ;interrupts.c: 239: }
  2751  001298  D028               	goto	i2l1857
  2752  00129A                     i2l1843:
  2753                           
  2754                           ;interrupts.c: 240: else {
  2755                           ;interrupts.c: 241: motorCounterUpdate(RIGHT,0);
  2756  00129A  0E00               	movlw	0
  2757  00129C  6E12               	movwf	motorCounterUpdate@reverse,c
  2758  00129E  0E01               	movlw	1
  2759  0012A0  ECFA  F00C         	call	_motorCounterUpdate
  2760                           
  2761                           ;interrupts.c: 242: motorCounterUpdate(LEFT,0);
  2762  0012A4  0E00               	movlw	0
  2763  0012A6  6E12               	movwf	motorCounterUpdate@reverse,c
  2764  0012A8  0E00               	movlw	0
  2765  0012AA  ECFA  F00C         	call	_motorCounterUpdate
  2766                           
  2767                           ;interrupts.c: 243: }
  2768                           ;interrupts.c: 245: }
  2769  0012AE  D01D               	goto	i2l1857
  2770  0012B0                     i2l1845:
  2771                           
  2772                           ;interrupts.c: 272: else {
  2773                           ;interrupts.c: 273: motorCounterUpdate(RIGHT,0);
  2774  0012B0  0E00               	movlw	0
  2775  0012B2  6E12               	movwf	motorCounterUpdate@reverse,c
  2776  0012B4  0E01               	movlw	1
  2777  0012B6  ECFA  F00C         	call	_motorCounterUpdate
  2778                           
  2779                           ;interrupts.c: 274: motorCounterUpdate(LEFT,0);
  2780  0012BA  0E00               	movlw	0
  2781  0012BC  6E12               	movwf	motorCounterUpdate@reverse,c
  2782  0012BE  0E00               	movlw	0
  2783  0012C0  ECFA  F00C         	call	_motorCounterUpdate
  2784                           
  2785                           ;interrupts.c: 275: justTurned = 0;
  2786  0012C4  0E00               	movlw	0
  2787  0012C6  6E52               	movwf	_justTurned,c
  2788                           
  2789                           ;interrupts.c: 276: TurnedLeft = 0;
  2790  0012C8  0E00               	movlw	0
  2791  0012CA  6E42               	movwf	_TurnedLeft+1,c
  2792  0012CC  0E00               	movlw	0
  2793  0012CE  6E41               	movwf	_TurnedLeft,c
  2794                           
  2795                           ;interrupts.c: 277: TurnedRight = 0;
  2796  0012D0  0E00               	movlw	0
  2797  0012D2  6E44               	movwf	_TurnedRight+1,c
  2798  0012D4  0E00               	movlw	0
  2799  0012D6  6E43               	movwf	_TurnedRight,c
  2800                           
  2801                           ;interrupts.c: 278: TurnRight = 200;
  2802  0012D8  0E00               	movlw	0
  2803  0012DA  6E57               	movwf	_TurnRight+1,c
  2804  0012DC  0EC8               	movlw	200
  2805  0012DE  6E56               	movwf	_TurnRight,c
  2806                           
  2807                           ;interrupts.c: 279: TurnLeft = 300;
  2808  0012E0  0E01               	movlw	1
  2809  0012E2  6E55               	movwf	_TurnLeft+1,c
  2810  0012E4  0E2C               	movlw	44
  2811  0012E6  6E54               	movwf	_TurnLeft,c
  2812  0012E8  D000               	goto	i2l1857
  2813  0012EA                     i2l1857:
  2814                           
  2815                           ;interrupts.c: 280: }
  2816                           ;interrupts.c: 281: moveMouse(merge(LMotorCounter,RMotorCounter));
  2817  0012EA  C050  F012         	movff	_RMotorCounter,merge@right
  2818  0012EE  504F               	movf	_LMotorCounter,w,c
  2819  0012F0  ECDE  F00E         	call	_merge
  2820  0012F4  ECEB  F00E         	call	_moveMouse
  2821                           
  2822                           ;interrupts.c: 282: MotorDelayCounter = 0;
  2823  0012F8  0E00               	movlw	0
  2824  0012FA  6E3A               	movwf	_MotorDelayCounter+1,c
  2825  0012FC  0E00               	movlw	0
  2826  0012FE  6E39               	movwf	_MotorDelayCounter,c
  2827  001300  D000               	goto	i2l1859
  2828  001302                     i2l1859:
  2829                           
  2830                           ;interrupts.c: 284: }
  2831                           ;interrupts.c: 286: MotorDelayCounter++;
  2832  001302  4A39               	infsnz	_MotorDelayCounter,f,c
  2833  001304  2A3A               	incf	_MotorDelayCounter+1,f,c
  2834                           
  2835                           ;interrupts.c: 287: INTCONbits.TMR0IF = 0;
  2836  001306  94F2               	bcf	intcon,2,c	;volatile
  2837  001308  D000               	goto	i2l105
  2838  00130A                     i2l105:
  2839  00130A  C027  FFF5         	movff	??_high_isr+13,tablat
  2840  00130E  C026  FFF8         	movff	??_high_isr+12,tblptru
  2841  001312  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2842  001316  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2843  00131A  C023  FFF4         	movff	??_high_isr+9,prodh
  2844  00131E  C022  FFF3         	movff	??_high_isr+8,prodl
  2845  001322  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2846  001326  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2847  00132A  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2848  00132E  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2849  001332  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2850  001336  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2851  00133A  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2852  00133E  C01A  FFFA         	movff	??_high_isr,pclath
  2853  001342  0011               	retfie		f
  2854  001344                     __end_of_high_isr:
  2855                           	opt stack 0
  2856                           pclatu	equ	0xFFB
  2857                           pclath	equ	0xFFA
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           prodh	equ	0xFF4
  2863                           prodl	equ	0xFF3
  2864                           intcon	equ	0xFF2
  2865                           intcon2	equ	0xFF1
  2866                           postinc0	equ	0xFEE
  2867                           fsr0h	equ	0xFEA
  2868                           fsr0l	equ	0xFE9
  2869                           wreg	equ	0xFE8
  2870                           postdec1	equ	0xFE5
  2871                           fsr1h	equ	0xFE2
  2872                           fsr1l	equ	0xFE1
  2873                           bsr	equ	0xFE0
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           fsr2h	equ	0xFDA
  2877                           fsr2l	equ	0xFD9
  2878                           status	equ	0xFD8
  2879                           
  2880 ;; *************** function _rotate *****************
  2881 ;; Defined at:
  2882 ;;		line 519 in file "interrupts.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  side            1    wreg     enum E4142
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  side            1   19[COMRAM] enum E4142
  2887 ;; Return value:  Size  Location     Type
  2888 ;;		None               void
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:        1 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		_motorCounterUpdate
  2905 ;; This function is called by:
  2906 ;;		_high_isr
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text13
  2911  001C32                     __ptext13:
  2912                           	opt stack 0
  2913  001C32                     _rotate:
  2914                           	opt stack 24
  2915                           
  2916                           ;incstack = 0
  2917                           ;rotate@side stored from wreg
  2918  001C32  6E14               	movwf	rotate@side,c
  2919                           
  2920                           ;interrupts.c: 521: if (side == LEFT){
  2921  001C34  5014               	movf	rotate@side,w,c
  2922  001C36  A4D8               	btfss	status,2,c
  2923  001C38  D00B               	goto	i2l1593
  2924                           
  2925                           ;interrupts.c: 522: motorCounterUpdate(RIGHT,0);
  2926  001C3A  0E00               	movlw	0
  2927  001C3C  6E12               	movwf	motorCounterUpdate@reverse,c
  2928  001C3E  0E01               	movlw	1
  2929  001C40  ECFA  F00C         	call	_motorCounterUpdate
  2930                           
  2931                           ;interrupts.c: 523: motorCounterUpdate(LEFT,1);
  2932  001C44  0E01               	movlw	1
  2933  001C46  6E12               	movwf	motorCounterUpdate@reverse,c
  2934  001C48  0E00               	movlw	0
  2935  001C4A  ECFA  F00C         	call	_motorCounterUpdate
  2936                           
  2937                           ;interrupts.c: 524: } else {
  2938  001C4E  D00B               	goto	i2l1595
  2939  001C50                     i2l1593:
  2940                           
  2941                           ;interrupts.c: 525: motorCounterUpdate(LEFT,0);
  2942  001C50  0E00               	movlw	0
  2943  001C52  6E12               	movwf	motorCounterUpdate@reverse,c
  2944  001C54  0E00               	movlw	0
  2945  001C56  ECFA  F00C         	call	_motorCounterUpdate
  2946                           
  2947                           ;interrupts.c: 526: motorCounterUpdate(RIGHT,1);
  2948  001C5A  0E01               	movlw	1
  2949  001C5C  6E12               	movwf	motorCounterUpdate@reverse,c
  2950  001C5E  0E01               	movlw	1
  2951  001C60  ECFA  F00C         	call	_motorCounterUpdate
  2952  001C64  D000               	goto	i2l1595
  2953  001C66                     i2l1595:
  2954                           
  2955                           ;interrupts.c: 527: }
  2956                           ;interrupts.c: 528: RotateCounter--;
  2957  001C66  063F               	decf	_RotateCounter,f,c
  2958  001C68  A0D8               	btfss	status,0,c
  2959  001C6A  0640               	decf	_RotateCounter+1,f,c
  2960  001C6C  0012               	return		;funcret
  2961  001C6E                     __end_of_rotate:
  2962                           	opt stack 0
  2963                           pclatu	equ	0xFFB
  2964                           pclath	equ	0xFFA
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           intcon2	equ	0xFF1
  2973                           postinc0	equ	0xFEE
  2974                           fsr0h	equ	0xFEA
  2975                           fsr0l	equ	0xFE9
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           bsr	equ	0xFE0
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _forward *****************
  2988 ;; Defined at:
  2989 ;;		line 550 in file "interrupts.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    1
  3010 ;; This function calls:
  3011 ;;		_motorCounterUpdate
  3012 ;; This function is called by:
  3013 ;;		_high_isr
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text14
  3018  001D56                     __ptext14:
  3019                           	opt stack 0
  3020  001D56                     _forward:
  3021                           	opt stack 24
  3022                           
  3023                           ;interrupts.c: 552: motorCounterUpdate(RIGHT,0);
  3024                           
  3025                           ;incstack = 0
  3026  001D56  0E00               	movlw	0
  3027  001D58  6E12               	movwf	motorCounterUpdate@reverse,c
  3028  001D5A  0E01               	movlw	1
  3029  001D5C  ECFA  F00C         	call	_motorCounterUpdate
  3030                           
  3031                           ;interrupts.c: 553: motorCounterUpdate(LEFT,0);
  3032  001D60  0E00               	movlw	0
  3033  001D62  6E12               	movwf	motorCounterUpdate@reverse,c
  3034  001D64  0E00               	movlw	0
  3035  001D66  ECFA  F00C         	call	_motorCounterUpdate
  3036                           
  3037                           ;interrupts.c: 554: ForwardCounter--;
  3038  001D6A  0635               	decf	_ForwardCounter,f,c
  3039  001D6C  A0D8               	btfss	status,0,c
  3040  001D6E  0636               	decf	_ForwardCounter+1,f,c
  3041  001D70  0012               	return		;funcret
  3042  001D72                     __end_of_forward:
  3043                           	opt stack 0
  3044                           pclatu	equ	0xFFB
  3045                           pclath	equ	0xFFA
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           postinc0	equ	0xFEE
  3055                           fsr0h	equ	0xFEA
  3056                           fsr0l	equ	0xFE9
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           fsr1h	equ	0xFE2
  3060                           fsr1l	equ	0xFE1
  3061                           bsr	equ	0xFE0
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _Reversing *****************
  3069 ;; Defined at:
  3070 ;;		line 543 in file "interrupts.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;		None               void
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        0 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    1
  3091 ;; This function calls:
  3092 ;;		_motorCounterUpdate
  3093 ;; This function is called by:
  3094 ;;		_high_isr
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text15
  3099  001D72                     __ptext15:
  3100                           	opt stack 0
  3101  001D72                     _Reversing:
  3102                           	opt stack 24
  3103                           
  3104                           ;interrupts.c: 545: motorCounterUpdate(RIGHT,1);
  3105                           
  3106                           ;incstack = 0
  3107  001D72  0E01               	movlw	1
  3108  001D74  6E12               	movwf	motorCounterUpdate@reverse,c
  3109  001D76  0E01               	movlw	1
  3110  001D78  ECFA  F00C         	call	_motorCounterUpdate
  3111                           
  3112                           ;interrupts.c: 546: motorCounterUpdate(LEFT,1);
  3113  001D7C  0E01               	movlw	1
  3114  001D7E  6E12               	movwf	motorCounterUpdate@reverse,c
  3115  001D80  0E00               	movlw	0
  3116  001D82  ECFA  F00C         	call	_motorCounterUpdate
  3117                           
  3118                           ;interrupts.c: 547: ReverseCounter--;
  3119  001D86  063D               	decf	_ReverseCounter,f,c
  3120  001D88  A0D8               	btfss	status,0,c
  3121  001D8A  063E               	decf	_ReverseCounter+1,f,c
  3122  001D8C  0012               	return		;funcret
  3123  001D8E                     __end_of_Reversing:
  3124                           	opt stack 0
  3125                           pclatu	equ	0xFFB
  3126                           pclath	equ	0xFFA
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           intcon2	equ	0xFF1
  3135                           postinc0	equ	0xFEE
  3136                           fsr0h	equ	0xFEA
  3137                           fsr0l	equ	0xFE9
  3138                           wreg	equ	0xFE8
  3139                           postdec1	equ	0xFE5
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           bsr	equ	0xFE0
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _KController *****************
  3150 ;; Defined at:
  3151 ;;		line 398 in file "interrupts.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  diff            2   23[COMRAM] int 
  3156 ;;  correctTo       1   22[COMRAM] enum E4142
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;Total ram usage:        5 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    1
  3173 ;; This function calls:
  3174 ;;		_ABS
  3175 ;;		_merge
  3176 ;;		_motorCounterUpdate
  3177 ;;		_moveMouse
  3178 ;; This function is called by:
  3179 ;;		_high_isr
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text16
  3184  0015B8                     __ptext16:
  3185                           	opt stack 0
  3186  0015B8                     _KController:
  3187                           	opt stack 24
  3188                           
  3189                           ;interrupts.c: 400: Side correctTo;
  3190                           ;interrupts.c: 401: int diff = 0;
  3191                           
  3192                           ;incstack = 0
  3193  0015B8  0E00               	movlw	0
  3194  0015BA  6E19               	movwf	KController@diff+1,c
  3195  0015BC  0E00               	movlw	0
  3196  0015BE  6E18               	movwf	KController@diff,c
  3197                           
  3198                           ;interrupts.c: 402: if((sensorValue[0] > 93 && sensorValue[1] > 84))
  3199  0015C0  BE2C               	btfsc	_sensorValue+1,7,c
  3200  0015C2  D077               	goto	i2l1639
  3201  0015C4  502C               	movf	_sensorValue+1,w,c
  3202  0015C6  E104               	bnz	i2u103_40
  3203  0015C8  0E5E               	movlw	94
  3204  0015CA  5C2B               	subwf	_sensorValue,w,c
  3205  0015CC  A0D8               	btfss	status,0,c
  3206  0015CE  D071               	goto	i2l1639
  3207  0015D0                     i2u103_40:
  3208  0015D0  BE2E               	btfsc	_sensorValue+3,7,c
  3209  0015D2  D06F               	goto	i2l1639
  3210  0015D4  502E               	movf	_sensorValue+3,w,c
  3211  0015D6  E104               	bnz	i2u104_40
  3212  0015D8  0E55               	movlw	85
  3213  0015DA  5C2D               	subwf	_sensorValue+2,w,c
  3214  0015DC  A0D8               	btfss	status,0,c
  3215  0015DE  D069               	goto	i2l1639
  3216  0015E0                     i2u104_40:
  3217                           
  3218                           ;interrupts.c: 403: {
  3219                           ;interrupts.c: 404: diff = ABS(sensorValue[1] - sensorValue[0]);
  3220  0015E0  C02B  F015         	movff	_sensorValue,??_KController
  3221  0015E4  C02C  F016         	movff	_sensorValue+1,??_KController+1
  3222  0015E8  1E15               	comf	??_KController,f,c
  3223  0015EA  1E16               	comf	??_KController+1,f,c
  3224  0015EC  4A15               	infsnz	??_KController,f,c
  3225  0015EE  2A16               	incf	??_KController+1,f,c
  3226  0015F0  502D               	movf	_sensorValue+2,w,c
  3227  0015F2  2415               	addwf	??_KController,w,c
  3228  0015F4  6E12               	movwf	ABS@x,c
  3229  0015F6  502E               	movf	_sensorValue+3,w,c
  3230  0015F8  2016               	addwfc	??_KController+1,w,c
  3231  0015FA  6E13               	movwf	ABS@x+1,c
  3232  0015FC  ECC7  F00E         	call	_ABS	;wreg free
  3233  001600  C012  F018         	movff	?_ABS,KController@diff
  3234  001604  C013  F019         	movff	?_ABS+1,KController@diff+1
  3235                           
  3236                           ;interrupts.c: 406: if(controllerSteps > 0)
  3237  001608  5058               	movf	_controllerSteps,w,c
  3238  00160A  B4D8               	btfsc	status,2,c
  3239  00160C  D00C               	goto	i2l1613
  3240                           
  3241                           ;interrupts.c: 407: {
  3242                           ;interrupts.c: 408: motorCounterUpdate(RIGHT,0);
  3243  00160E  0E00               	movlw	0
  3244  001610  6E12               	movwf	motorCounterUpdate@reverse,c
  3245  001612  0E01               	movlw	1
  3246  001614  ECFA  F00C         	call	_motorCounterUpdate
  3247                           
  3248                           ;interrupts.c: 409: motorCounterUpdate(LEFT,0);
  3249  001618  0E00               	movlw	0
  3250  00161A  6E12               	movwf	motorCounterUpdate@reverse,c
  3251  00161C  0E00               	movlw	0
  3252  00161E  ECFA  F00C         	call	_motorCounterUpdate
  3253  001622  D08C               	goto	i2l1655
  3254                           
  3255                           ;interrupts.c: 411: return;
  3256                           
  3257                           ;interrupts.c: 410: controllerSteps--;
  3258  001624  D0DB               	goto	i2l161
  3259  001626                     i2l1613:
  3260                           
  3261                           ;interrupts.c: 412: }
  3262                           ;interrupts.c: 414: if(sensorValue[0] > sensorValue[1])
  3263  001626  502B               	movf	_sensorValue,w,c
  3264  001628  5C2D               	subwf	_sensorValue+2,w,c
  3265  00162A  502E               	movf	_sensorValue+3,w,c
  3266  00162C  0A80               	xorlw	128
  3267  00162E  6E15               	movwf	??_KController& (0+255),c
  3268  001630  502C               	movf	_sensorValue+1,w,c
  3269  001632  0A80               	xorlw	128
  3270  001634  5815               	subwfb	??_KController& (0+255),w,c
  3271  001636  B0D8               	btfsc	status,0,c
  3272  001638  D00F               	goto	i2l1621
  3273                           
  3274                           ;interrupts.c: 415: {
  3275                           ;interrupts.c: 417: correctTo = LEFT;
  3276  00163A  0E00               	movlw	0
  3277  00163C  6E17               	movwf	KController@correctTo,c
  3278                           
  3279                           ;interrupts.c: 418: motorCounterUpdate(correctTo,0);
  3280  00163E  0E00               	movlw	0
  3281  001640  6E12               	movwf	motorCounterUpdate@reverse,c
  3282  001642  5017               	movf	KController@correctTo,w,c
  3283  001644  ECFA  F00C         	call	_motorCounterUpdate
  3284                           
  3285                           ;interrupts.c: 419: moveMouse(merge(LMotorCounter,RMotorCounter));
  3286  001648  C050  F012         	movff	_RMotorCounter,merge@right
  3287  00164C  504F               	movf	_LMotorCounter,w,c
  3288  00164E  ECDE  F00E         	call	_merge
  3289  001652  ECEB  F00E         	call	_moveMouse
  3290                           
  3291                           ;interrupts.c: 420: }
  3292  001656  D00F               	goto	i2l1627
  3293  001658                     i2l1621:
  3294                           
  3295                           ;interrupts.c: 421: else
  3296                           ;interrupts.c: 422: {
  3297                           ;interrupts.c: 424: correctTo = RIGHT;
  3298  001658  0E01               	movlw	1
  3299  00165A  6E17               	movwf	KController@correctTo,c
  3300                           
  3301                           ;interrupts.c: 425: motorCounterUpdate(correctTo,0);
  3302  00165C  0E00               	movlw	0
  3303  00165E  6E12               	movwf	motorCounterUpdate@reverse,c
  3304  001660  5017               	movf	KController@correctTo,w,c
  3305  001662  ECFA  F00C         	call	_motorCounterUpdate
  3306                           
  3307                           ;interrupts.c: 426: moveMouse(merge(LMotorCounter,RMotorCounter));
  3308  001666  C050  F012         	movff	_RMotorCounter,merge@right
  3309  00166A  504F               	movf	_LMotorCounter,w,c
  3310  00166C  ECDE  F00E         	call	_merge
  3311  001670  ECEB  F00E         	call	_moveMouse
  3312  001674  D000               	goto	i2l1627
  3313  001676                     i2l1627:
  3314                           
  3315                           ;interrupts.c: 427: }
  3316                           ;interrupts.c: 429: if(diff > 80)
  3317  001676  BE19               	btfsc	KController@diff+1,7,c
  3318  001678  D008               	goto	i2l1631
  3319  00167A  5019               	movf	KController@diff+1,w,c
  3320  00167C  E104               	bnz	i2u107_40
  3321  00167E  0E51               	movlw	81
  3322  001680  5C18               	subwf	KController@diff,w,c
  3323  001682  A0D8               	btfss	status,0,c
  3324  001684  D002               	goto	i2l1631
  3325  001686                     i2u107_40:
  3326                           
  3327                           ;interrupts.c: 430: controllerSteps = 1;
  3328  001686  0E01               	movlw	1
  3329  001688  D09C               	goto	L12
  3330  00168A                     i2l1631:
  3331                           
  3332                           ;interrupts.c: 431: else if(diff <= 80 && diff > 30)
  3333  00168A  BE19               	btfsc	KController@diff+1,7,c
  3334  00168C  D006               	goto	i2l1633
  3335  00168E  5019               	movf	KController@diff+1,w,c
  3336  001690  E10E               	bnz	i2l1637
  3337  001692  0E51               	movlw	81
  3338  001694  5C18               	subwf	KController@diff,w,c
  3339  001696  B0D8               	btfsc	status,0,c
  3340  001698  D093               	goto	i2l1683
  3341  00169A                     i2l1633:
  3342  00169A  BE19               	btfsc	KController@diff+1,7,c
  3343  00169C  D091               	goto	i2l1683
  3344  00169E  5019               	movf	KController@diff+1,w,c
  3345  0016A0  E104               	bnz	i2u109_40
  3346  0016A2  0E1F               	movlw	31
  3347  0016A4  5C18               	subwf	KController@diff,w,c
  3348  0016A6  A0D8               	btfss	status,0,c
  3349  0016A8  D08B               	goto	i2l1683
  3350  0016AA                     i2u109_40:
  3351                           
  3352                           ;interrupts.c: 432: controllerSteps = 5;
  3353  0016AA  0E05               	movlw	5
  3354  0016AC  D08A               	goto	L12
  3355  0016AE                     i2l1637:
  3356  0016AE  D088               	goto	i2l1683
  3357                           
  3358                           ;interrupts.c: 436: }
  3359                           
  3360                           ;interrupts.c: 433: else
  3361                           ;interrupts.c: 434: controllerSteps = 10;
  3362  0016B0  D095               	goto	i2l161
  3363  0016B2                     i2l1639:
  3364                           
  3365                           ;interrupts.c: 437: else if((sensorValue[0] > 93))
  3366  0016B2  BE2C               	btfsc	_sensorValue+1,7,c
  3367  0016B4  D008               	goto	i2l1643
  3368  0016B6  502C               	movf	_sensorValue+1,w,c
  3369  0016B8  E105               	bnz	i2u110_40
  3370  0016BA  0E5E               	movlw	94
  3371  0016BC  5C2B               	subwf	_sensorValue,w,c
  3372  0016BE  B0D8               	btfsc	status,0,c
  3373  0016C0  D08D               	goto	i2l161
  3374  0016C2  D001               	goto	i2l1643
  3375  0016C4                     i2u110_40:
  3376                           
  3377                           ;interrupts.c: 438: {
  3378                           ;interrupts.c: 441: }
  3379  0016C4  D08B               	goto	i2l161
  3380  0016C6                     i2l1643:
  3381                           
  3382                           ;interrupts.c: 476: else if(((sensorValue[0] > 93 && sensorValue[1] > 84) && sensorValue
      +                          [3] > 80))
  3383  0016C6  BE2C               	btfsc	_sensorValue+1,7,c
  3384  0016C8  D07E               	goto	i2l1685
  3385  0016CA  502C               	movf	_sensorValue+1,w,c
  3386  0016CC  E104               	bnz	i2u111_40
  3387  0016CE  0E5E               	movlw	94
  3388  0016D0  5C2B               	subwf	_sensorValue,w,c
  3389  0016D2  A0D8               	btfss	status,0,c
  3390  0016D4  D078               	goto	i2l1685
  3391  0016D6                     i2u111_40:
  3392  0016D6  BE2E               	btfsc	_sensorValue+3,7,c
  3393  0016D8  D076               	goto	i2l1685
  3394  0016DA  502E               	movf	_sensorValue+3,w,c
  3395  0016DC  E104               	bnz	i2u112_40
  3396  0016DE  0E55               	movlw	85
  3397  0016E0  5C2D               	subwf	_sensorValue+2,w,c
  3398  0016E2  A0D8               	btfss	status,0,c
  3399  0016E4  D070               	goto	i2l1685
  3400  0016E6                     i2u112_40:
  3401  0016E6  BE32               	btfsc	_sensorValue+7,7,c
  3402  0016E8  D06E               	goto	i2l1685
  3403  0016EA  5032               	movf	_sensorValue+7,w,c
  3404  0016EC  E104               	bnz	i2u113_40
  3405  0016EE  0E51               	movlw	81
  3406  0016F0  5C31               	subwf	_sensorValue+6,w,c
  3407  0016F2  A0D8               	btfss	status,0,c
  3408  0016F4  D068               	goto	i2l1685
  3409  0016F6                     i2u113_40:
  3410                           
  3411                           ;interrupts.c: 477: {
  3412                           ;interrupts.c: 478: diff = ABS(sensorValue[3] - sensorValue[2]);
  3413  0016F6  EE20  F02F         	lfsr	2,_sensorValue+4
  3414  0016FA  CFDE F015          	movff	postinc2,??_KController
  3415  0016FE  CFDD F016          	movff	postdec2,??_KController+1
  3416  001702  1E15               	comf	??_KController,f,c
  3417  001704  1E16               	comf	??_KController+1,f,c
  3418  001706  4A15               	infsnz	??_KController,f,c
  3419  001708  2A16               	incf	??_KController+1,f,c
  3420  00170A  5031               	movf	_sensorValue+6,w,c
  3421  00170C  2415               	addwf	??_KController,w,c
  3422  00170E  6E12               	movwf	ABS@x,c
  3423  001710  5032               	movf	_sensorValue+7,w,c
  3424  001712  2016               	addwfc	??_KController+1,w,c
  3425  001714  6E13               	movwf	ABS@x+1,c
  3426  001716  ECC7  F00E         	call	_ABS	;wreg free
  3427  00171A  C012  F018         	movff	?_ABS,KController@diff
  3428  00171E  C013  F019         	movff	?_ABS+1,KController@diff+1
  3429                           
  3430                           ;interrupts.c: 480: if(controllerSteps > 0)
  3431  001722  5058               	movf	_controllerSteps,w,c
  3432  001724  B4D8               	btfsc	status,2,c
  3433  001726  D00C               	goto	i2l1659
  3434                           
  3435                           ;interrupts.c: 481: {
  3436                           ;interrupts.c: 482: motorCounterUpdate(RIGHT,0);
  3437  001728  0E00               	movlw	0
  3438  00172A  6E12               	movwf	motorCounterUpdate@reverse,c
  3439  00172C  0E01               	movlw	1
  3440  00172E  ECFA  F00C         	call	_motorCounterUpdate
  3441                           
  3442                           ;interrupts.c: 483: motorCounterUpdate(LEFT,0);
  3443  001732  0E00               	movlw	0
  3444  001734  6E12               	movwf	motorCounterUpdate@reverse,c
  3445  001736  0E00               	movlw	0
  3446  001738  ECFA  F00C         	call	_motorCounterUpdate
  3447  00173C                     i2l1655:
  3448                           
  3449                           ;interrupts.c: 484: controllerSteps--;
  3450  00173C  0658               	decf	_controllerSteps,f,c
  3451                           
  3452                           ;interrupts.c: 485: return;
  3453  00173E  D04E               	goto	i2l161
  3454  001740                     i2l1659:
  3455                           
  3456                           ;interrupts.c: 486: }
  3457                           ;interrupts.c: 488: if(sensorValue[2] > sensorValue[3])
  3458  001740  502F               	movf	_sensorValue+4,w,c
  3459  001742  5C31               	subwf	_sensorValue+6,w,c
  3460  001744  5032               	movf	_sensorValue+7,w,c
  3461  001746  0A80               	xorlw	128
  3462  001748  6E15               	movwf	??_KController& (0+255),c
  3463  00174A  5030               	movf	_sensorValue+5,w,c
  3464  00174C  0A80               	xorlw	128
  3465  00174E  5815               	subwfb	??_KController& (0+255),w,c
  3466  001750  B0D8               	btfsc	status,0,c
  3467  001752  D00F               	goto	i2l1667
  3468                           
  3469                           ;interrupts.c: 489: {
  3470                           ;interrupts.c: 491: correctTo = LEFT;
  3471  001754  0E00               	movlw	0
  3472  001756  6E17               	movwf	KController@correctTo,c
  3473                           
  3474                           ;interrupts.c: 492: motorCounterUpdate(correctTo,0);
  3475  001758  0E00               	movlw	0
  3476  00175A  6E12               	movwf	motorCounterUpdate@reverse,c
  3477  00175C  5017               	movf	KController@correctTo,w,c
  3478  00175E  ECFA  F00C         	call	_motorCounterUpdate
  3479                           
  3480                           ;interrupts.c: 493: moveMouse(merge(LMotorCounter,RMotorCounter));
  3481  001762  C050  F012         	movff	_RMotorCounter,merge@right
  3482  001766  504F               	movf	_LMotorCounter,w,c
  3483  001768  ECDE  F00E         	call	_merge
  3484  00176C  ECEB  F00E         	call	_moveMouse
  3485                           
  3486                           ;interrupts.c: 494: }
  3487  001770  D00F               	goto	i2l1673
  3488  001772                     i2l1667:
  3489                           
  3490                           ;interrupts.c: 495: else
  3491                           ;interrupts.c: 496: {
  3492                           ;interrupts.c: 498: correctTo = RIGHT;
  3493  001772  0E01               	movlw	1
  3494  001774  6E17               	movwf	KController@correctTo,c
  3495                           
  3496                           ;interrupts.c: 499: motorCounterUpdate(correctTo,0);
  3497  001776  0E00               	movlw	0
  3498  001778  6E12               	movwf	motorCounterUpdate@reverse,c
  3499  00177A  5017               	movf	KController@correctTo,w,c
  3500  00177C  ECFA  F00C         	call	_motorCounterUpdate
  3501                           
  3502                           ;interrupts.c: 500: moveMouse(merge(LMotorCounter,RMotorCounter));
  3503  001780  C050  F012         	movff	_RMotorCounter,merge@right
  3504  001784  504F               	movf	_LMotorCounter,w,c
  3505  001786  ECDE  F00E         	call	_merge
  3506  00178A  ECEB  F00E         	call	_moveMouse
  3507  00178E  D000               	goto	i2l1673
  3508  001790                     i2l1673:
  3509                           
  3510                           ;interrupts.c: 501: }
  3511                           ;interrupts.c: 503: if(diff > 80)
  3512  001790  BE19               	btfsc	KController@diff+1,7,c
  3513  001792  D006               	goto	i2l1677
  3514  001794  5019               	movf	KController@diff+1,w,c
  3515  001796  E103               	bnz	i2u116_40
  3516  001798  0E51               	movlw	81
  3517  00179A  5C18               	subwf	KController@diff,w,c
  3518  00179C  B0D8               	btfsc	status,0,c
  3519  00179E                     i2u116_40:
  3520  00179E  D773               	goto	i2u107_40
  3521  0017A0                     i2l1677:
  3522                           
  3523                           ;interrupts.c: 505: else if(diff <= 80 && diff > 30)
  3524  0017A0  BE19               	btfsc	KController@diff+1,7,c
  3525  0017A2  D006               	goto	i2l1679
  3526  0017A4  5019               	movf	KController@diff+1,w,c
  3527  0017A6  E10C               	bnz	i2l1683
  3528  0017A8  0E51               	movlw	81
  3529  0017AA  5C18               	subwf	KController@diff,w,c
  3530  0017AC  B0D8               	btfsc	status,0,c
  3531  0017AE  D008               	goto	i2l1683
  3532  0017B0                     i2l1679:
  3533  0017B0  BE19               	btfsc	KController@diff+1,7,c
  3534  0017B2  D006               	goto	i2l1683
  3535  0017B4  5019               	movf	KController@diff+1,w,c
  3536  0017B6  E103               	bnz	i2u118_40
  3537  0017B8  0E1F               	movlw	31
  3538  0017BA  5C18               	subwf	KController@diff,w,c
  3539  0017BC  B0D8               	btfsc	status,0,c
  3540  0017BE                     i2u118_40:
  3541  0017BE  D775               	goto	i2u109_40
  3542  0017C0                     i2l1683:
  3543                           
  3544                           ;interrupts.c: 507: else
  3545                           ;interrupts.c: 508: controllerSteps = 10;
  3546  0017C0  0E0A               	movlw	10
  3547  0017C2                     L12:
  3548  0017C2  6E58               	movwf	_controllerSteps,c
  3549                           
  3550                           ;interrupts.c: 511: }
  3551  0017C4  D00B               	goto	i2l161
  3552  0017C6                     i2l1685:
  3553                           
  3554                           ;interrupts.c: 512: else {
  3555                           ;interrupts.c: 513: motorCounterUpdate(RIGHT,0);
  3556  0017C6  0E00               	movlw	0
  3557  0017C8  6E12               	movwf	motorCounterUpdate@reverse,c
  3558  0017CA  0E01               	movlw	1
  3559  0017CC  ECFA  F00C         	call	_motorCounterUpdate
  3560                           
  3561                           ;interrupts.c: 514: motorCounterUpdate(LEFT,0);
  3562  0017D0  0E00               	movlw	0
  3563  0017D2  6E12               	movwf	motorCounterUpdate@reverse,c
  3564  0017D4  0E00               	movlw	0
  3565  0017D6  ECFA  F00C         	call	_motorCounterUpdate
  3566  0017DA  D000               	goto	i2l161
  3567  0017DC                     i2l161:
  3568  0017DC  0012               	return		;funcret
  3569  0017DE                     __end_of_KController:
  3570                           	opt stack 0
  3571                           pclatu	equ	0xFFB
  3572                           pclath	equ	0xFFA
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon	equ	0xFF2
  3580                           intcon2	equ	0xFF1
  3581                           postinc0	equ	0xFEE
  3582                           fsr0h	equ	0xFEA
  3583                           fsr0l	equ	0xFE9
  3584                           wreg	equ	0xFE8
  3585                           postdec1	equ	0xFE5
  3586                           fsr1h	equ	0xFE2
  3587                           fsr1l	equ	0xFE1
  3588                           bsr	equ	0xFE0
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _moveMouse *****************
  3596 ;; Defined at:
  3597 ;;		line 385 in file "interrupts.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  action          1    wreg     unsigned char 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  action          1   17[COMRAM] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;		None               void
  3604 ;; Registers used:
  3605 ;;		wreg
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:        1 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; This function calls:
  3618 ;;		Nothing
  3619 ;; This function is called by:
  3620 ;;		_high_isr
  3621 ;;		_KController
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text17
  3626  001DD6                     __ptext17:
  3627                           	opt stack 0
  3628  001DD6                     _moveMouse:
  3629                           	opt stack 25
  3630                           
  3631                           ;incstack = 0
  3632                           ;moveMouse@action stored from wreg
  3633  001DD6  6E12               	movwf	moveMouse@action,c
  3634                           
  3635                           ;interrupts.c: 387: LATC = action;
  3636  001DD8  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  3637  001DDC  0012               	return		;funcret
  3638  001DDE                     __end_of_moveMouse:
  3639                           	opt stack 0
  3640                           pclatu	equ	0xFFB
  3641                           pclath	equ	0xFFA
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           intcon2	equ	0xFF1
  3650                           postinc0	equ	0xFEE
  3651                           fsr0h	equ	0xFEA
  3652                           fsr0l	equ	0xFE9
  3653                           wreg	equ	0xFE8
  3654                           postdec1	equ	0xFE5
  3655                           fsr1h	equ	0xFE2
  3656                           fsr1l	equ	0xFE1
  3657                           bsr	equ	0xFE0
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8
  3663                           
  3664 ;; *************** function _motorCounterUpdate *****************
  3665 ;; Defined at:
  3666 ;;		line 333 in file "interrupts.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  side            1    wreg     enum E4142
  3669 ;;  reverse         1   17[COMRAM] unsigned char 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  side            1   18[COMRAM] enum E4142
  3672 ;; Return value:  Size  Location     Type
  3673 ;;		None               void
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3681 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;Total ram usage:        2 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_high_isr
  3691 ;;		_KController
  3692 ;;		_rotate
  3693 ;;		_Reversing
  3694 ;;		_forward
  3695 ;;		_smoothTurn
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text18
  3700  0019F4                     __ptext18:
  3701                           	opt stack 0
  3702  0019F4                     _motorCounterUpdate:
  3703                           	opt stack 24
  3704                           
  3705                           ;incstack = 0
  3706                           ;motorCounterUpdate@side stored from wreg
  3707  0019F4  6E13               	movwf	motorCounterUpdate@side,c
  3708                           
  3709                           ;interrupts.c: 335: if(side == LEFT && reverse == 1)
  3710  0019F6  5013               	movf	motorCounterUpdate@side,w,c
  3711  0019F8  A4D8               	btfss	status,2,c
  3712  0019FA  D01B               	goto	i2l1477
  3713  0019FC  0412               	decf	motorCounterUpdate@reverse,w,c
  3714  0019FE  B4D8               	btfsc	status,2,c
  3715  001A00  D00B               	goto	i2l1475
  3716  001A02  D017               	goto	i2l1477
  3717                           
  3718                           ;interrupts.c: 336: {
  3719                           ;interrupts.c: 337: switch(LMotorCounter)
  3720  001A04  D009               	goto	i2l1475
  3721  001A06                     i2l1465:
  3722  001A06  0E02               	movlw	2
  3723  001A08  D004               	goto	L15
  3724  001A0A                     i2l1467:
  3725  001A0A  0E04               	movlw	4
  3726  001A0C  D002               	goto	L15
  3727                           
  3728                           ;interrupts.c: 341: case 0b00000100: LMotorCounter = 0b00001000; break;
  3729  001A0E  D03E               	goto	i2l1509
  3730                           
  3731                           ;interrupts.c: 342: case 0b00001000: LMotorCounter = 0b00000001; break;
  3732  001A10  D039               	goto	i2l1503
  3733  001A12                     L15:
  3734  001A12  6E4F               	movwf	_LMotorCounter,c
  3735  001A14  D068               	goto	i2l146
  3736                           
  3737                           ;interrupts.c: 343: default: LMotorCounter = 0b00000001;
  3738  001A16  D036               	goto	i2l1503
  3739  001A18                     i2l1475:
  3740  001A18  504F               	movf	_LMotorCounter,w,c
  3741                           
  3742                           ; Switch size 1, requested type "space"
  3743                           ; Number of cases is 4, Range of values is 1 to 8
  3744                           ; switch strategies available:
  3745                           ; Name         Instructions Cycles
  3746                           ; simple_byte           13     7 (average)
  3747                           ;	Chosen strategy is simple_byte
  3748  001A1A  0A01               	xorlw	1	; case 1
  3749  001A1C  B4D8               	btfsc	status,2,c
  3750  001A1E  D7F3               	goto	i2l1465
  3751  001A20  0A03               	xorlw	3	; case 2
  3752  001A22  B4D8               	btfsc	status,2,c
  3753  001A24  D7F2               	goto	i2l1467
  3754  001A26  0A06               	xorlw	6	; case 4
  3755  001A28  B4D8               	btfsc	status,2,c
  3756  001A2A  D030               	goto	i2l1509
  3757  001A2C  0A0C               	xorlw	12	; case 8
  3758  001A2E  D02A               	goto	i2l1503
  3759                           
  3760                           ;interrupts.c: 345: } else if(side == RIGHT && reverse == 1)
  3761  001A30  D05A               	goto	i2l146
  3762  001A32                     i2l1477:
  3763  001A32  0413               	decf	motorCounterUpdate@side,w,c
  3764  001A34  A4D8               	btfss	status,2,c
  3765  001A36  D01D               	goto	i2l1495
  3766  001A38  0412               	decf	motorCounterUpdate@reverse,w,c
  3767  001A3A  B4D8               	btfsc	status,2,c
  3768  001A3C  D00B               	goto	i2l1493
  3769  001A3E  D019               	goto	i2l1495
  3770                           
  3771                           ;interrupts.c: 346: {
  3772                           ;interrupts.c: 347: switch(RMotorCounter)
  3773  001A40  D009               	goto	i2l1493
  3774  001A42                     i2l1483:
  3775  001A42  0E08               	movlw	8
  3776  001A44  D040               	goto	L23
  3777  001A46                     i2l1485:
  3778  001A46  0E01               	movlw	1
  3779  001A48  D03E               	goto	L23
  3780  001A4A                     i2l1487:
  3781  001A4A  0E02               	movlw	2
  3782  001A4C  D03C               	goto	L23
  3783  001A4E                     i2l1489:
  3784  001A4E  0E04               	movlw	4
  3785  001A50  D03A               	goto	L23
  3786                           
  3787                           ;interrupts.c: 353: default: RMotorCounter = 0b00001000;
  3788  001A52  D7F7               	goto	i2l1483
  3789  001A54                     i2l1493:
  3790  001A54  5050               	movf	_RMotorCounter,w,c
  3791                           
  3792                           ; Switch size 1, requested type "space"
  3793                           ; Number of cases is 4, Range of values is 1 to 8
  3794                           ; switch strategies available:
  3795                           ; Name         Instructions Cycles
  3796                           ; simple_byte           13     7 (average)
  3797                           ;	Chosen strategy is simple_byte
  3798  001A56  0A01               	xorlw	1	; case 1
  3799  001A58  B4D8               	btfsc	status,2,c
  3800  001A5A  D7F3               	goto	i2l1483
  3801  001A5C  0A03               	xorlw	3	; case 2
  3802  001A5E  B4D8               	btfsc	status,2,c
  3803  001A60  D7F2               	goto	i2l1485
  3804  001A62  0A06               	xorlw	6	; case 4
  3805  001A64  B4D8               	btfsc	status,2,c
  3806  001A66  D7F1               	goto	i2l1487
  3807  001A68  0A0C               	xorlw	12	; case 8
  3808  001A6A  B4D8               	btfsc	status,2,c
  3809  001A6C  D7F0               	goto	i2l1489
  3810  001A6E  D7E9               	goto	i2l1483
  3811                           
  3812                           ;interrupts.c: 355: } else if(side == LEFT && reverse == 0)
  3813  001A70  D03A               	goto	i2l146
  3814  001A72                     i2l1495:
  3815  001A72  5013               	movf	motorCounterUpdate@side,w,c
  3816  001A74  A4D8               	btfss	status,2,c
  3817  001A76  D01B               	goto	i2l1513
  3818  001A78  5012               	movf	motorCounterUpdate@reverse,w,c
  3819  001A7A  B4D8               	btfsc	status,2,c
  3820  001A7C  D009               	goto	i2l1511
  3821  001A7E  D017               	goto	i2l1513
  3822                           
  3823                           ;interrupts.c: 356: {
  3824                           ;interrupts.c: 357: switch(LMotorCounter)
  3825  001A80  D007               	goto	i2l1511
  3826                           
  3827                           ;interrupts.c: 358: {
  3828                           ;interrupts.c: 359: case 0b00000001: LMotorCounter = 0b00001000; break;
  3829  001A82  D004               	goto	i2l1509
  3830  001A84                     i2l1503:
  3831  001A84  0E01               	movlw	1
  3832  001A86  D7C5               	goto	L15
  3833                           
  3834                           ;interrupts.c: 361: case 0b00000100: LMotorCounter = 0b00000010; break;
  3835  001A88  D7BE               	goto	i2l1465
  3836                           
  3837                           ;interrupts.c: 362: case 0b00001000: LMotorCounter = 0b00000100; break;
  3838  001A8A  D7BF               	goto	i2l1467
  3839  001A8C                     i2l1509:
  3840  001A8C  0E08               	movlw	8
  3841  001A8E  D7C1               	goto	L15
  3842  001A90                     i2l1511:
  3843  001A90  504F               	movf	_LMotorCounter,w,c
  3844                           
  3845                           ; Switch size 1, requested type "space"
  3846                           ; Number of cases is 4, Range of values is 1 to 8
  3847                           ; switch strategies available:
  3848                           ; Name         Instructions Cycles
  3849                           ; simple_byte           13     7 (average)
  3850                           ;	Chosen strategy is simple_byte
  3851  001A92  0A01               	xorlw	1	; case 1
  3852  001A94  B4D8               	btfsc	status,2,c
  3853  001A96  D7FA               	goto	i2l1509
  3854  001A98  0A03               	xorlw	3	; case 2
  3855  001A9A  B4D8               	btfsc	status,2,c
  3856  001A9C  D7F3               	goto	i2l1503
  3857  001A9E  0A06               	xorlw	6	; case 4
  3858  001AA0  B4D8               	btfsc	status,2,c
  3859  001AA2  D7B1               	goto	i2l1465
  3860  001AA4  0A0C               	xorlw	12	; case 8
  3861  001AA6  B4D8               	btfsc	status,2,c
  3862  001AA8  D7B0               	goto	i2l1467
  3863  001AAA  D7F0               	goto	i2l1509
  3864                           
  3865                           ;interrupts.c: 365: } else if(side == RIGHT && reverse == 0)
  3866  001AAC  D01C               	goto	i2l146
  3867  001AAE                     i2l1513:
  3868  001AAE  0413               	decf	motorCounterUpdate@side,w,c
  3869  001AB0  A4D8               	btfss	status,2,c
  3870  001AB2  D019               	goto	i2l146
  3871  001AB4  5012               	movf	motorCounterUpdate@reverse,w,c
  3872  001AB6  B4D8               	btfsc	status,2,c
  3873  001AB8  D009               	goto	i2l1529
  3874  001ABA  D015               	goto	i2l146
  3875                           
  3876                           ;interrupts.c: 366: {
  3877                           ;interrupts.c: 367: switch(RMotorCounter)
  3878  001ABC  D007               	goto	i2l1529
  3879                           
  3880                           ;interrupts.c: 368: {
  3881                           ;interrupts.c: 369: case 0b00000001: RMotorCounter = 0b00000010; break;
  3882  001ABE  D7C5               	goto	i2l1487
  3883                           
  3884                           ;interrupts.c: 370: case 0b00000010: RMotorCounter = 0b00000100; break;
  3885  001AC0  D7C6               	goto	i2l1489
  3886                           
  3887                           ;interrupts.c: 371: case 0b00000100: RMotorCounter = 0b00001000; break;
  3888  001AC2  D7BF               	goto	i2l1483
  3889                           
  3890                           ;interrupts.c: 372: case 0b00001000: RMotorCounter = 0b00000001; break;
  3891  001AC4  D7C0               	goto	i2l1485
  3892  001AC6                     L23:
  3893  001AC6  6E50               	movwf	_RMotorCounter,c
  3894  001AC8  D00E               	goto	i2l146
  3895                           
  3896                           ;interrupts.c: 373: default: RMotorCounter = 0b00000001;
  3897  001ACA  D7BD               	goto	i2l1485
  3898  001ACC                     i2l1529:
  3899  001ACC  5050               	movf	_RMotorCounter,w,c
  3900                           
  3901                           ; Switch size 1, requested type "space"
  3902                           ; Number of cases is 4, Range of values is 1 to 8
  3903                           ; switch strategies available:
  3904                           ; Name         Instructions Cycles
  3905                           ; simple_byte           13     7 (average)
  3906                           ;	Chosen strategy is simple_byte
  3907  001ACE  0A01               	xorlw	1	; case 1
  3908  001AD0  B4D8               	btfsc	status,2,c
  3909  001AD2  D7BB               	goto	i2l1487
  3910  001AD4  0A03               	xorlw	3	; case 2
  3911  001AD6  B4D8               	btfsc	status,2,c
  3912  001AD8  D7BA               	goto	i2l1489
  3913  001ADA  0A06               	xorlw	6	; case 4
  3914  001ADC  B4D8               	btfsc	status,2,c
  3915  001ADE  D7B1               	goto	i2l1483
  3916  001AE0  0A0C               	xorlw	12	; case 8
  3917  001AE2  D7B1               	goto	i2l1485
  3918  001AE4  D000               	goto	i2l146
  3919  001AE6                     i2l146:
  3920  001AE6  0012               	return		;funcret
  3921  001AE8                     __end_of_motorCounterUpdate:
  3922                           	opt stack 0
  3923                           pclatu	equ	0xFFB
  3924                           pclath	equ	0xFFA
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           postinc0	equ	0xFEE
  3934                           fsr0h	equ	0xFEA
  3935                           fsr0l	equ	0xFE9
  3936                           wreg	equ	0xFE8
  3937                           postdec1	equ	0xFE5
  3938                           fsr1h	equ	0xFE2
  3939                           fsr1l	equ	0xFE1
  3940                           bsr	equ	0xFE0
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _merge *****************
  3948 ;; Defined at:
  3949 ;;		line 378 in file "interrupts.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  left            1    wreg     unsigned char 
  3952 ;;  right           1   17[COMRAM] unsigned char 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  left            1   18[COMRAM] unsigned char 
  3955 ;;  merged          1   19[COMRAM] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3965 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;Total ram usage:        3 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_high_isr
  3975 ;;		_KController
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text19
  3980  001DBC                     __ptext19:
  3981                           	opt stack 0
  3982  001DBC                     _merge:
  3983                           	opt stack 25
  3984                           
  3985                           ;incstack = 0
  3986                           ;merge@left stored from wreg
  3987  001DBC  6E13               	movwf	merge@left,c
  3988                           
  3989                           ;interrupts.c: 380: unsigned char merged;
  3990                           ;interrupts.c: 381: merged = left + (right << 4);
  3991  001DBE  3812               	swapf	merge@right,w,c
  3992  001DC0  0BF0               	andlw	240
  3993  001DC2  2413               	addwf	merge@left,w,c
  3994  001DC4  6E14               	movwf	merge@merged,c
  3995                           
  3996                           ;interrupts.c: 382: return merged;
  3997  001DC6  5014               	movf	merge@merged,w,c
  3998  001DC8  D000               	goto	i2l149
  3999  001DCA                     i2l149:
  4000  001DCA  0012               	return		;funcret
  4001  001DCC                     __end_of_merge:
  4002                           	opt stack 0
  4003                           pclatu	equ	0xFFB
  4004                           pclath	equ	0xFFA
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon2	equ	0xFF1
  4013                           postinc0	equ	0xFEE
  4014                           fsr0h	equ	0xFEA
  4015                           fsr0l	equ	0xFE9
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           bsr	equ	0xFE0
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _ABS *****************
  4028 ;; Defined at:
  4029 ;;		line 391 in file "interrupts.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  x               2   17[COMRAM] int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  2   17[COMRAM] int 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        2 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_KController
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text20
  4057  001D8E                     __ptext20:
  4058                           	opt stack 0
  4059  001D8E                     _ABS:
  4060                           	opt stack 24
  4061                           
  4062                           ;interrupts.c: 393: if(x<0) x = -x;
  4063                           
  4064                           ;incstack = 0
  4065  001D8E  AE13               	btfss	ABS@x+1,7,c
  4066  001D90  D005               	goto	i2l1541
  4067  001D92  6C12               	negf	ABS@x,c
  4068  001D94  1E13               	comf	ABS@x+1,f,c
  4069  001D96  B0D8               	btfsc	status,0,c
  4070  001D98  2A13               	incf	ABS@x+1,f,c
  4071  001D9A  D000               	goto	i2l1541
  4072  001D9C                     i2l1541:
  4073                           
  4074                           ;interrupts.c: 394: return x;
  4075  001D9C  C012  F012         	movff	ABS@x,?_ABS
  4076  001DA0  C013  F013         	movff	ABS@x+1,?_ABS+1
  4077  001DA4  D000               	goto	i2l156
  4078  001DA6                     i2l156:
  4079  001DA6  0012               	return		;funcret
  4080  001DA8                     __end_of_ABS:
  4081                           	opt stack 0
  4082                           pclatu	equ	0xFFB
  4083                           pclath	equ	0xFFA
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           prodh	equ	0xFF4
  4089                           prodl	equ	0xFF3
  4090                           intcon	equ	0xFF2
  4091                           intcon2	equ	0xFF1
  4092                           postinc0	equ	0xFEE
  4093                           fsr0h	equ	0xFEA
  4094                           fsr0l	equ	0xFE9
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1h	equ	0xFE2
  4098                           fsr1l	equ	0xFE1
  4099                           bsr	equ	0xFE0
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           pclatu	equ	0xFFB
  4106                           pclath	equ	0xFFA
  4107                           tblptru	equ	0xFF8
  4108                           tblptrh	equ	0xFF7
  4109                           tblptrl	equ	0xFF6
  4110                           tablat	equ	0xFF5
  4111                           prodh	equ	0xFF4
  4112                           prodl	equ	0xFF3
  4113                           intcon	equ	0xFF2
  4114                           intcon2	equ	0xFF1
  4115                           postinc0	equ	0xFEE
  4116                           fsr0h	equ	0xFEA
  4117                           fsr0l	equ	0xFE9
  4118                           wreg	equ	0xFE8
  4119                           postdec1	equ	0xFE5
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           bsr	equ	0xFE0
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129                           	psect	rparam
  4130  0000                     pclatu	equ	0xFFB
  4131                           pclath	equ	0xFFA
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           intcon2	equ	0xFF1
  4140                           postinc0	equ	0xFEE
  4141                           fsr0h	equ	0xFEA
  4142                           fsr0l	equ	0xFE9
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1h	equ	0xFE2
  4146                           fsr1l	equ	0xFE1
  4147                           bsr	equ	0xFE0
  4148                           postinc2	equ	0xFDE
  4149                           postdec2	equ	0xFDD
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        5
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     42      88
    BANK0           128    112     112
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _sensorComputation->___awdiv
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4976
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             22 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                              8 BANK0     14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             41 COMRAM     1     1      0
                                              4 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             41 COMRAM     1     1      0
                                              4 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                             39 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8356
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1470
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2195
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1448
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     70      70       5       87.5%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2A      58       1       69.3%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8       6        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 29 18:24:13 2015

                ___awdiv@sign 0085                            bsr 000FE0           ___wmul@multiplicand 0082  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l302 183E                           l312 1CFE                           l320 1CD6  
                         l313 1D06                           l316 1D2E                           l317 1D36  
                         l272 1BE4                           l281 1D40                           l513 1BB6  
                         l286 1D54                           l295 15B6                           _ABS 1D8E  
                __CFG_CPB$OFF 000000                           _MAX 1D08                           _MIN 1CD8  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1D56                  _rotatingSide 0053  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 0084                          ?_MIN 0084                          MAX@a 0084  
                        MAX@b 0086                          MIN@a 0084                          MIN@b 0086  
                __CFG_WDT$OFF 000000                          l2001 1802                          l2021 19B6  
                        l2007 1826                          l2017 18EA                          l2025 19CC  
                        l1067 1D4E                          l2019 1950                          l2035 1DB2  
                        l2029 19E2                          l1903 1B06                          l1915 1B3C  
                        l1931 1B96                          l1941 1BCE                          l1917 1B4A  
                        l1909 1B1E                          l1935 1BAC                          l1927 1B86  
                        l1919 1B54                          l1951 1368                          l1961 13FA  
                        l1963 1518                          l1957 138C                          l1967 152E  
                        _LATC 000F8B                          u1700 1824                          u1640 1366  
                        u1650 138A                          u1725 184C                          u1690 1800  
                        u1777 1BD4                          _main 1DA8                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0088                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 1C32                         ??_ABS 0014  
                       ??_MAX 002A                         ??_MIN 002A    __size_of_sensorComputation 0274  
                       ?_main 0001               __end_of___awdiv 1BB8                         _T0CON 000FD5  
             ___awdiv@divisor 0082                         i2l105 130A                         i2l161 17DC  
                       i2l146 1AE6                         i2l156 1DA6                         i2l149 1DCA  
             ___awdiv@counter 0084                         _TRISC 000F94           _ConfigureOscillator 1DCC  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1BB8  
                       _merge 1DBC               __end_of_forward 1D72               __end_of_low_isr 00A2  
                       tablat 000FF5                         status 000FD8          ?_ConfigureOscillator 0001  
             __initialization 1C6E                  __end_of_main 1DBC                        ??_main 002B  
               __activetblptr 000002                        ?_delay 0028                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0080  
                      i2l1503 1A84                        i2l1511 1A90                        i2l1513 1AAE  
                      i2l1541 1D9C                        i2l1509 1A8C                        i2l1621 1658  
                      i2l1613 1626                        i2l1631 168A                        i2l1529 1ACC  
                      i2l1465 1A06                        i2l1633 169A                        i2l1801 117A  
                      i2l1483 1A42                        i2l1467 1A0A                        i2l1475 1A18  
                      i2l1643 16C6                        i2l1627 1676                        i2l1811 11DA  
                      i2l1485 1A46                        i2l1493 1A54                        i2l1477 1A32  
                      i2l1637 16AE                        i2l1805 11B4                        i2l1487 1A4A  
                      i2l1495 1A72                        i2l1655 173C                        i2l1639 16B2  
                      i2l1807 11C4                        i2l1751 1060                        i2l1489 1A4E  
                      i2l1673 1790                        i2l1593 1C50                        i2l1841 1294  
                      i2l1833 1254                        i2l1809 11D4                        i2l1761 10A2  
                      i2l1683 17C0                        i2l1667 1772                        i2l1659 1740  
                      i2l1595 1C66                        i2l1843 129A                        i2l1819 1218  
                      i2l1755 1074                        i2l1677 17A0                        i2l1685 17C6  
                      i2l1845 12B0                        i2l1781 10F4                        i2l1765 10B0  
                      i2l1679 17B0                        i2l1783 1104                        i2l1759 1092  
                      i2l1767 10B8                        i2l1785 112E                        i2l1777 10E4  
                      i2l1769 10C8                        i2l1857 12EA                        i2l1795 115A  
                      i2l1787 113E                        i2l1779 10EE                        i2l1859 1302  
                      i2l1797 1164                        i2l1799 116A                        _INTCON 000FF2  
                      _OSCCON 000FD3                     ??_InitApp 002B         ??_ConfigureOscillator 0028  
                 merge@merged 0014                __CFG_XINST$OFF 000000            sensorComputation@i 0092  
          sensorComputation@j 0094              __end_of_high_isr 1344                        ___wmul 1CA4  
                   ??___awdiv 0028                __CFG_STVREN$ON 000000                        _errorD 0047  
                      _errorP 0049                        delay@x 0080                        clear_0 1C74  
            ___awdiv@quotient 0086                        _rotate 1C32            __size_of_Reversing 001C  
                __pdataCOMRAM 0054                     ??_forward 0014                  __mediumconst 0000  
                   ??_low_isr 0001                _ReverseCounter 003D                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 1C9A               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
                ?_KController 0001                __pcstackCOMRAM 0001                 __end_of_delay 1BF6  
                  _TurnedLeft 0041               moveMouse@action 0012                 __end_of_merge 1DCC  
        KController@correctTo 0017    __end_of_motorCounterUpdate 1AE8                _ForwardCounter 0035  
                     ??_delay 002A                       ??_merge 0013            _AlgorithmSelection 1D38  
                _LTurnCounter 0037             __end_of_Reversing 1D8E                    _delay_time 0045  
           _MotorDelayCounter 0039           ?_AlgorithmSelection 0001                       ?___wmul 0080  
          __size_of_moveMouse 0008                       ?_rotate 0001                       _INTCON2 000FF1  
                     _OSCTUNE 000F9B          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
                     _Deadend 0033                 _LMotorCounter 004F                       _InitApp 1BF6  
                     __Hparam 0000                       __Lparam 0000                       ___awdiv 1AE8  
             __size_of___wmul 0034                  __psmallconst 1000                       __pcinit 1C6E  
                     __ramtop 1000                       __ptext0 1DA8                       __ptext1 17DE  
                     __ptext2 1344                       __ptext3 1CA4                       __ptext4 1AE8  
                     __ptext5 1CD8                       __ptext6 1D08                       __ptext7 1BF6  
                     __ptext8 1BB8                       __ptext9 1D38               __size_of_rotate 003C  
                __size_of_ABS 001A                  __size_of_MAX 0030                  __size_of_MIN 0030  
                     _forward 1D56                       delay@ms 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001A                __pintcode_body 100A  
        end_of_initialization 1C9A              _sensorCorrection 1001             __end_of_moveMouse 1DDE  
               __Lmediumconst 0000                       int_func 100A               _controllerSteps 0058  
                  _justTurned 0052          __size_of_KController 0226                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _TRISBbits 000F93                     _TRISEbits 000F96                ??_sensorUpdate 0096  
 __end_of_ConfigureOscillator 1DD6                    _totalError 004D                  _RTurnCounter 003B  
              __end_of___wmul 1CD8                 __pidataCOMRAM 1DDE                   _TurnedRight 0043  
              __end_of_rotate 1C6E           start_initialization 1C6E                   __end_of_ABS 1DA8  
                 __end_of_MAX 1D38                   __end_of_MIN 1D08            _motorCounterUpdate 19F4  
            __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012                    merge@right 0012  
                   _Reversing 1D72                      ??___wmul 0028              __CFG_LPT1OSC$OFF 000000  
                    ??_rotate 0014                _sensorLocation 1005          ??_motorCounterUpdate 0013  
                 __pbssCOMRAM 002B                 __pcstackBANK0 0080                     _TurnRight 0056  
      sensorUpdate@sensorTemp 009C             __size_of_high_isr 133C                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001                     _algorithm 0051  
                   __pintcode 0008        motorCounterUpdate@side 0013                      ?___awdiv 0080  
        __end_of_sensorUpdate 19F4        __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005  
                 __pintcodelo 0018                   __smallconst 1000                      ?_forward 0001  
                    ?_low_isr 0001                     _oldErrorP 004B                __size_of_delay 003E  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 0028  
                   _moveMouse 1DD6                      i2u110_40 16C4                      i2u111_40 16D6  
                    i2u103_40 15D0                      i2u112_40 16E6                      i2u104_40 15E0  
                    i2u113_40 16F6                      i2u130_40 106E                      i2u107_40 1686  
                    i2u131_40 1082                      i2u116_40 179E                      i2u109_40 16AA  
                    i2u118_40 17BE                      i2u150_40 1274                      i2u151_40 1284  
                    i2u128_40 104C                      i2u145_40 11EA                      i2u129_40 105A  
                    i2u146_40 11FA                      i2u149_40 1264              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0080                     copy_data0 1C8E  
               _RMotorCounter 0050                    rotate@side 0014                 ??_KController 0015  
                  ?_moveMouse 0001              __size_of_InitApp 003C                      __Hrparam 0000  
                   merge@left 0013          sensorComputation@max 008C                      __Lrparam 0000  
        sensorComputation@min 008E          sensorComputation@sum 0090                   ??_Reversing 0014  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 00D0                      _TurnLeft 0054  
            __size_of_forward 001C              __size_of_low_isr 008A                      __ptext10 1DCC  
                    __ptext20 1D8E                      __ptext13 1C32                      __ptext14 1D56  
                    __ptext15 1D72                      __ptext16 15B8                      __ptext17 1DD6  
                    __ptext18 19F4                      __ptext19 1DBC                      _high_isr 0008  
               __size_of_main 0014                 _RotateCounter 003F         __size_of_sensorUpdate 0216  
__size_of_ConfigureOscillator 000A           __end_of_KController 17DE             _sensorComputation 1344  
                  _INTCONbits 000FF2            ?_sensorComputation 0088                 sensorUpdate@i 00EC  
               sensorUpdate@j 00EE                  _sensorUpdate 17DE                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 008A                   ??_moveMouse 0012  
             KController@diff 0018     __end_of_sensorComputation 15B8                   _sensorValue 002B  
 __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012                   _KController 15B8  
