

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 24 22:34:21 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001B26                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _TurnRight
    42  001B26  00C8               	dw	200
    43                           
    44                           ;initializer for _controllerSteps
    45  001B28  03                 	db	3
    46                           
    47                           	psect	smallconst
    48  001000                     __psmallconst:
    49                           	opt stack 0
    50  001000  00                 	db	0
    51  001001                     _sensorCorrection:
    52                           	opt stack 0
    53  001001  1A                 	db	26
    54  001002  1A                 	db	26
    55  001003  23                 	db	35
    56  001004  23                 	db	35
    57  001005                     __end_of_sensorCorrection:
    58                           	opt stack 0
    59  001005                     _sensorLocation:
    60                           	opt stack 0
    61  001005  1B                 	db	27
    62  001006  2B                 	db	43
    63  001007  1F                 	db	31
    64  001008  33                 	db	51
    65  001009                     __end_of_sensorLocation:
    66                           	opt stack 0
    67  0000                     _LATC	set	3979
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _TRISBbits	set	3987
    70  0000                     _TRISC	set	3988
    71  0000                     _TRISEbits	set	3990
    72  0000                     _ADCON0	set	4034
    73  0000                     _ADCON0bits	set	4034
    74  0000                     _ADCON1	set	4033
    75  0000                     _ADCON2	set	4032
    76  0000                     _ADRESH	set	4036
    77  0000                     _ADRESL	set	4035
    78  0000                     _OSCCON	set	4051
    79  0000                     _T0CON	set	4053
    80  0000                     _INTCON	set	4082
    81  0000                     _INTCON2	set	4081
    82  0000                     _INTCONbits	set	4082
    83                           
    84                           ; #config settings
    85  001009  00                 	db	0	; dummy byte at the end
    86  0000                     
    87                           	psect	cinit
    88  0019A0                     __pcinit:
    89                           	opt stack 0
    90  0019A0                     start_initialization:
    91                           	opt stack 0
    92  0019A0                     __initialization:
    93                           	opt stack 0
    94                           
    95                           ; Clear objects allocated to COMRAM (27 bytes)
    96  0019A0  EE00  F037         	lfsr	0,__pbssCOMRAM
    97  0019A4  0E1B               	movlw	27
    98  0019A6                     clear_0:
    99  0019A6  6AEE               	clrf	postinc0,c
   100  0019A8  06E8               	decf	wreg,f,c
   101  0019AA  E1FD               	bnz	clear_0
   102                           
   103                           ; Initialize objects allocated to COMRAM (3 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  0019AC  0E26               	movlw	low __pidataCOMRAM
   106  0019AE  6EF6               	movwf	tblptrl,c
   107  0019B0  0E1B               	movlw	high __pidataCOMRAM
   108  0019B2  6EF7               	movwf	tblptrh,c
   109  0019B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  0019B6  6EF8               	movwf	tblptru,c
   111  0019B8  0009               	tblrd		*+	;fetch initializer
   112  0019BA  CFF5 F052          	movff	tablat,__pdataCOMRAM
   113  0019BE  0009               	tblrd		*+	;fetch initializer
   114  0019C0  CFF5 F053          	movff	tablat,__pdataCOMRAM+1
   115  0019C4  0009               	tblrd		*+	;fetch initializer
   116  0019C6  CFF5 F054          	movff	tablat,__pdataCOMRAM+2
   117  0019CA                     end_of_initialization:
   118                           	opt stack 0
   119  0019CA                     __end_of__initialization:
   120                           	opt stack 0
   121  0019CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  0019CC  6EF8               	movwf	tblptru,c
   123  0019CE  0100               	movlb	0
   124  0019D0  EF78  F00D         	goto	_main	;jump to C main() function
   125                           tblptru	equ	0xFF8
   126                           tblptrh	equ	0xFF7
   127                           tblptrl	equ	0xFF6
   128                           tablat	equ	0xFF5
   129                           postinc0	equ	0xFEE
   130                           wreg	equ	0xFE8
   131                           
   132                           	psect	bssCOMRAM
   133  000037                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000037                     _sensorValue:
   136                           	opt stack 0
   137  000037                     	ds	8
   138  00003F                     _ForwardCounter:
   139                           	opt stack 0
   140  00003F                     	ds	2
   141  000041                     _LTurnCounter:
   142                           	opt stack 0
   143  000041                     	ds	2
   144  000043                     _MotorDelayCounter:
   145                           	opt stack 0
   146  000043                     	ds	2
   147  000045                     _RTurnCounter:
   148                           	opt stack 0
   149  000045                     	ds	2
   150  000047                     _ReverseCounter:
   151                           	opt stack 0
   152  000047                     	ds	2
   153  000049                     _RotateCounter:
   154                           	opt stack 0
   155  000049                     	ds	2
   156  00004B                     _delay_time:
   157                           	opt stack 0
   158  00004B                     	ds	2
   159  00004D                     _LMotorCounter:
   160                           	opt stack 0
   161  00004D                     	ds	1
   162  00004E                     _RMotorCounter:
   163                           	opt stack 0
   164  00004E                     	ds	1
   165  00004F                     _algorithm:
   166                           	opt stack 0
   167  00004F                     	ds	1
   168  000050                     _justTurned:
   169                           	opt stack 0
   170  000050                     	ds	1
   171  000051                     _rotatingSide:
   172                           	opt stack 0
   173  000051                     	ds	1
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181                           	psect	dataCOMRAM
   182  000052                     __pdataCOMRAM:
   183                           	opt stack 0
   184  000052                     _TurnRight:
   185                           	opt stack 0
   186  000052                     	ds	2
   187  000054                     _controllerSteps:
   188                           	opt stack 0
   189  000054                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	cstackBANK0
   198  000080                     __pcstackBANK0:
   199                           	opt stack 0
   200  000080                     sensorComputation@max:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x0
   204  000080                     	ds	2
   205  000082                     sensorComputation@min:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x2
   209  000082                     	ds	2
   210  000084                     sensorComputation@sum:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x4
   214  000084                     	ds	2
   215  000086                     sensorComputation@i:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x6
   219  000086                     	ds	2
   220  000088                     sensorComputation@j:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x8
   224  000088                     	ds	2
   225  00008A                     ??_sensorUpdate:
   226                           
   227                           ; 0 bytes @ 0xA
   228  00008A                     	ds	6
   229  000090                     sensorUpdate@sensorTemp:
   230                           	opt stack 0
   231                           
   232                           ; 80 bytes @ 0x10
   233  000090                     	ds	80
   234  0000E0                     sensorUpdate@i:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x60
   238  0000E0                     	ds	2
   239  0000E2                     sensorUpdate@j:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x62
   243  0000E2                     	ds	2
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	cstackCOMRAM
   252  000001                     __pcstackCOMRAM:
   253                           	opt stack 0
   254  000001                     ??_low_isr:
   255  000001                     
   256                           ; 0 bytes @ 0x0
   257  000001                     	ds	17
   258  000012                     ?_ABS:
   259                           	opt stack 0
   260  000012                     motorCounterUpdate@reverse:
   261                           	opt stack 0
   262  000012                     merge@right:
   263                           	opt stack 0
   264  000012                     moveMouse@action:
   265                           	opt stack 0
   266  000012                     ABS@x:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x11
   270  000012                     	ds	1
   271  000013                     motorCounterUpdate@side:
   272                           	opt stack 0
   273  000013                     merge@left:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x12
   277  000013                     	ds	1
   278  000014                     merge@merged:
   279                           	opt stack 0
   280  000014                     rotate@side:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x13
   284  000014                     	ds	1
   285  000015                     ??_KController:
   286                           
   287                           ; 0 bytes @ 0x14
   288  000015                     	ds	2
   289  000017                     KController@correctTo:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x16
   293  000017                     	ds	1
   294  000018                     KController@diff:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x17
   298  000018                     	ds	2
   299  00001A                     ??_high_isr:
   300                           
   301                           ; 0 bytes @ 0x19
   302  00001A                     	ds	14
   303  000028                     ?___wmul:
   304                           	opt stack 0
   305  000028                     ?___awdiv:
   306                           	opt stack 0
   307  000028                     delay@ms:
   308                           	opt stack 0
   309  000028                     ___wmul@multiplier:
   310                           	opt stack 0
   311  000028                     ___awdiv@dividend:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x27
   315  000028                     	ds	2
   316  00002A                     ??_delay:
   317  00002A                     ___wmul@multiplicand:
   318                           	opt stack 0
   319  00002A                     ___awdiv@divisor:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x29
   323  00002A                     	ds	1
   324  00002B                     delay@x:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x2A
   328  00002B                     	ds	1
   329  00002C                     ___awdiv@counter:
   330                           	opt stack 0
   331  00002C                     ___wmul@product:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x2B
   335  00002C                     	ds	1
   336  00002D                     ___awdiv@sign:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x2C
   340  00002D                     	ds	1
   341  00002E                     ?_MIN:
   342                           	opt stack 0
   343  00002E                     ?_MAX:
   344                           	opt stack 0
   345  00002E                     MIN@a:
   346                           	opt stack 0
   347  00002E                     MAX@a:
   348                           	opt stack 0
   349  00002E                     ___awdiv@quotient:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2D
   353  00002E                     	ds	2
   354  000030                     MIN@b:
   355                           	opt stack 0
   356  000030                     MAX@b:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2F
   360  000030                     	ds	2
   361  000032                     ??_MIN:
   362  000032                     ??_MAX:
   363                           
   364                           ; 0 bytes @ 0x31
   365  000032                     	ds	1
   366  000033                     sensorComputation@sensorTemp:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x32
   370  000033                     	ds	2
   371  000035                     ??_sensorComputation:
   372                           
   373                           ; 0 bytes @ 0x34
   374  000035                     	ds	2
   375  000037                     tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           
   382                           ; 0 bytes @ 0x36
   383 ;;
   384 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   385 ;;
   386 ;; *************** function _main *****************
   387 ;; Defined at:
   388 ;;		line 41 in file "main.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;		None
   391 ;; Auto vars:     Size  Location     Type
   392 ;;		None
   393 ;; Return value:  Size  Location     Type
   394 ;;		None               void
   395 ;; Registers used:
   396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;Total ram usage:        0 bytes
   407 ;; Hardware stack levels required when called:    7
   408 ;; This function calls:
   409 ;;		_ConfigureOscillator
   410 ;;		_InitApp
   411 ;;		_sensorUpdate
   412 ;; This function is called by:
   413 ;;		Startup code after reset
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text0
   418  001AF0                     __ptext0:
   419                           	opt stack 0
   420  001AF0                     _main:
   421                           	opt stack 24
   422                           
   423                           ;main.c: 44: ConfigureOscillator();
   424                           
   425                           ;incstack = 0
   426  001AF0  EC8A  F00D         	call	_ConfigureOscillator	;wreg free
   427                           
   428                           ;main.c: 47: InitApp();
   429  001AF4  EC94  F00C         	call	_InitApp	;wreg free
   430  001AF8  D000               	goto	l1832
   431  001AFA                     l1832:
   432                           
   433                           ;main.c: 50: {
   434                           ;main.c: 51: sensorUpdate();
   435  001AFA  EC62  F00A         	call	_sensorUpdate	;wreg free
   436  001AFE  D7FD               	goto	l1832
   437  001B00  EF51  F000         	goto	start
   438  001B04                     __end_of_main:
   439                           	opt stack 0
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447 ;; *************** function _sensorUpdate *****************
   448 ;; Defined at:
   449 ;;		line 146 in file "user.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  sensorTemp     80   16[BANK0 ] int [10][4]
   454 ;;  j               2   98[BANK0 ] int 
   455 ;;  i               2   96[BANK0 ] int 
   456 ;; Return value:  Size  Location     Type
   457 ;;		None               void
   458 ;; Registers used:
   459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   466 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   467 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   468 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   469 ;;Total ram usage:       90 bytes
   470 ;; Hardware stack levels used:    1
   471 ;; Hardware stack levels required when called:    6
   472 ;; This function calls:
   473 ;;		___wmul
   474 ;;		_sensorComputation
   475 ;; This function is called by:
   476 ;;		_main
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           	psect	text1
   481  0014C4                     __ptext1:
   482                           	opt stack 0
   483  0014C4                     _sensorUpdate:
   484                           	opt stack 24
   485                           
   486                           ;user.c: 148: int i,j;
   487                           ;user.c: 149: int sensorTemp[4][10];
   488                           ;user.c: 152: for(i = 0; i < 10; i++)
   489                           
   490                           ;incstack = 0
   491  0014C4  0E00               	movlw	0
   492  0014C6  0100               	movlb	0	; () banked
   493  0014C8  6FE1               	movwf	(sensorUpdate@i+1)& (0+255),b
   494  0014CA  0E00               	movlw	0
   495  0014CC  6FE0               	movwf	sensorUpdate@i& (0+255),b
   496                           
   497                           ; BSR set to: 0
   498  0014CE  0100               	movlb	0	; () banked
   499  0014D0  BFE1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   500  0014D2  D00A               	goto	l1798
   501  0014D4  0100               	movlb	0	; () banked
   502  0014D6  51E1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   503  0014D8  E106               	bnz	u1440
   504  0014DA  0E0A               	movlw	10
   505  0014DC  0100               	movlb	0	; () banked
   506  0014DE  5DE0               	subwf	sensorUpdate@i& (0+255),w,b
   507  0014E0  B0D8               	btfsc	status,0,c
   508  0014E2  D0E9               	goto	l1826
   509  0014E4  D001               	goto	l1798
   510  0014E6                     u1440:
   511                           
   512                           ; BSR set to: 0
   513  0014E6  D0E7               	goto	l1826
   514  0014E8                     l1798:
   515                           
   516                           ; BSR set to: 0
   517                           ;user.c: 153: {
   518                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   519  0014E8  0E00               	movlw	0
   520  0014EA  0100               	movlb	0	; () banked
   521  0014EC  6FE3               	movwf	(sensorUpdate@j+1)& (0+255),b
   522  0014EE  0E00               	movlw	0
   523  0014F0  6FE2               	movwf	sensorUpdate@j& (0+255),b
   524                           
   525                           ; BSR set to: 0
   526  0014F2  0100               	movlb	0	; () banked
   527  0014F4  BFE3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   528  0014F6  D00A               	goto	l1804
   529  0014F8  0100               	movlb	0	; () banked
   530  0014FA  51E3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   531  0014FC  E106               	bnz	u1450
   532  0014FE  0E04               	movlw	4
   533  001500  0100               	movlb	0	; () banked
   534  001502  5DE2               	subwf	sensorUpdate@j& (0+255),w,b
   535  001504  B0D8               	btfsc	status,0,c
   536  001506  D0CC               	goto	l1822
   537  001508  D001               	goto	l1804
   538  00150A                     u1450:
   539                           
   540                           ; BSR set to: 0
   541  00150A  D0CA               	goto	l1822
   542  00150C                     l1804:
   543                           
   544                           ; BSR set to: 0
   545                           ;user.c: 155: {
   546                           ;user.c: 156: ADCON0 = sensorLocation[j];
   547  00150C  0E05               	movlw	low _sensorLocation
   548  00150E  0100               	movlb	0	; () banked
   549  001510  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   550  001512  6EF6               	movwf	tblptrl,c
   551  001514  0E10               	movlw	high _sensorLocation
   552  001516  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   553  001518  6EF7               	movwf	tblptrh,c
   554  00151A                     	if	0	;There are less than 3 active tblptr bytes
   555  00151A                     	endif
   556  00151A  0008               	tblrd		*
   557  00151C  CFF5 FFC2          	movff	tablat,4034	;volatile
   558                           
   559                           ; BSR set to: 0
   560                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   561  001520  82C2               	bsf	4034,1,c	;volatile
   562                           
   563                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   564  001522  D000               	goto	l265
   565  001524                     l265:
   566  001524  B2C2               	btfsc	4034,1,c	;volatile
   567  001526  D7FE               	goto	l265
   568                           
   569                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   570  001528  CFC3 F08A          	movff	4035,??_sensorUpdate	;volatile
   571  00152C  0E06               	movlw	6
   572  00152E  0100               	movlb	0	; () banked
   573  001530  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   574  001532                     u1475:
   575  001532  0100               	movlb	0	; () banked
   576  001534  90D8               	bcf	status,0,c
   577  001536  338A               	rrcf	??_sensorUpdate& (0+255),f,b
   578  001538  0100               	movlb	0	; () banked
   579  00153A  2F8B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   580  00153C  D7FA               	goto	u1475
   581  00153E  0100               	movlb	0	; () banked
   582  001540  518A               	movf	??_sensorUpdate& (0+255),w,b
   583  001542  CFC4 F08C          	movff	4036,??_sensorUpdate+2	;volatile
   584  001546  0100               	movlb	0	; () banked
   585  001548  6B8D               	clrf	(??_sensorUpdate+3)& (0+255),b
   586  00154A  0100               	movlb	0	; () banked
   587  00154C  90D8               	bcf	status,0,c
   588  00154E  378C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   589  001550  378D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   590  001552  0100               	movlb	0	; () banked
   591  001554  90D8               	bcf	status,0,c
   592  001556  378C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   593  001558  378D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   594  00155A  0100               	movlb	0	; () banked
   595  00155C  278C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   596  00155E  0E00               	movlw	0
   597  001560  238D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   598  001562  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   599  001566  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   600  00156A  0E00               	movlw	0
   601  00156C  6E2B               	movwf	___wmul@multiplicand+1,c
   602  00156E  0E14               	movlw	20
   603  001570  6E2A               	movwf	___wmul@multiplicand,c
   604  001572  EC04  F00D         	call	___wmul	;wreg free
   605  001576  0E90               	movlw	low sensorUpdate@sensorTemp
   606  001578  0100               	movlb	0	; () banked
   607  00157A  6F8E               	movwf	(??_sensorUpdate+4)& (0+255),b
   608  00157C  0E00               	movlw	high sensorUpdate@sensorTemp
   609  00157E  0100               	movlb	0	; () banked
   610  001580  6F8F               	movwf	(??_sensorUpdate+5)& (0+255),b
   611  001582  5028               	movf	?___wmul,w,c
   612  001584  0100               	movlb	0	; () banked
   613  001586  278E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   614  001588  5029               	movf	?___wmul+1,w,c
   615  00158A  0100               	movlb	0	; () banked
   616  00158C  238F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   617  00158E  90D8               	bcf	status,0,c
   618  001590  0100               	movlb	0	; () banked
   619  001592  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   620  001594  6ED9               	movwf	fsr2l,c
   621  001596  0100               	movlb	0	; () banked
   622  001598  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   623  00159A  6EDA               	movwf	fsr2h,c
   624  00159C  0100               	movlb	0	; () banked
   625  00159E  518E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   626  0015A0  26D9               	addwf	fsr2l,f,c
   627  0015A2  0100               	movlb	0	; () banked
   628  0015A4  518F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   629  0015A6  22DA               	addwfc	fsr2h,f,c
   630  0015A8  C08C  FFDE         	movff	??_sensorUpdate+2,postinc2
   631  0015AC  C08D  FFDD         	movff	??_sensorUpdate+3,postdec2
   632                           
   633                           ; BSR set to: 0
   634                           ;user.c: 163: if(j == 0 || j == 3)
   635  0015B0  0100               	movlb	0	; () banked
   636  0015B2  51E2               	movf	sensorUpdate@j& (0+255),w,b
   637  0015B4  0100               	movlb	0	; () banked
   638  0015B6  11E3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   639  0015B8  B4D8               	btfsc	status,2,c
   640  0015BA  D007               	goto	l1814
   641                           
   642                           ; BSR set to: 0
   643  0015BC  0E03               	movlw	3
   644  0015BE  0100               	movlb	0	; () banked
   645  0015C0  19E2               	xorwf	sensorUpdate@j& (0+255),w,b
   646  0015C2  0100               	movlb	0	; () banked
   647  0015C4  11E3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   648  0015C6  A4D8               	btfss	status,2,c
   649  0015C8  D030               	goto	l1816
   650  0015CA                     l1814:
   651                           
   652                           ; BSR set to: 0
   653                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   654  0015CA  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   655  0015CE  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   656  0015D2  0E00               	movlw	0
   657  0015D4  6E2B               	movwf	___wmul@multiplicand+1,c
   658  0015D6  0E14               	movlw	20
   659  0015D8  6E2A               	movwf	___wmul@multiplicand,c
   660  0015DA  EC04  F00D         	call	___wmul	;wreg free
   661  0015DE  0E90               	movlw	low sensorUpdate@sensorTemp
   662  0015E0  0100               	movlb	0	; () banked
   663  0015E2  6F8A               	movwf	??_sensorUpdate& (0+255),b
   664  0015E4  0E00               	movlw	high sensorUpdate@sensorTemp
   665  0015E6  0100               	movlb	0	; () banked
   666  0015E8  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   667  0015EA  5028               	movf	?___wmul,w,c
   668  0015EC  0100               	movlb	0	; () banked
   669  0015EE  278A               	addwf	??_sensorUpdate& (0+255),f,b
   670  0015F0  5029               	movf	?___wmul+1,w,c
   671  0015F2  0100               	movlb	0	; () banked
   672  0015F4  238B               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   673  0015F6  90D8               	bcf	status,0,c
   674  0015F8  0100               	movlb	0	; () banked
   675  0015FA  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   676  0015FC  6ED9               	movwf	fsr2l,c
   677  0015FE  0100               	movlb	0	; () banked
   678  001600  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   679  001602  6EDA               	movwf	fsr2h,c
   680  001604  0100               	movlb	0	; () banked
   681  001606  518A               	movf	??_sensorUpdate& (0+255),w,b
   682  001608  26D9               	addwf	fsr2l,f,c
   683  00160A  0100               	movlb	0	; () banked
   684  00160C  518B               	movf	(??_sensorUpdate+1)& (0+255),w,b
   685  00160E  22DA               	addwfc	fsr2h,f,c
   686  001610  0E01               	movlw	low _sensorCorrection
   687  001612  0100               	movlb	0	; () banked
   688  001614  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   689  001616  6EF6               	movwf	tblptrl,c
   690  001618  0E10               	movlw	high _sensorCorrection
   691  00161A  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   692  00161C  6EF7               	movwf	tblptrh,c
   693  00161E                     	if	0	;There are less than 3 active tblptr bytes
   694  00161E                     	endif
   695  00161E  0008               	tblrd		*
   696  001620  50F5               	movf	tablat,w,c
   697  001622  5EDE               	subwf	postinc2,f,c
   698  001624  0E00               	movlw	0
   699  001626  5ADD               	subwfb	postdec2,f,c
   700  001628  D030               	goto	l1818
   701  00162A                     l1816:
   702                           
   703                           ; BSR set to: 0
   704                           ;user.c: 165: else
   705                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   706  00162A  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   707  00162E  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   708  001632  0E00               	movlw	0
   709  001634  6E2B               	movwf	___wmul@multiplicand+1,c
   710  001636  0E14               	movlw	20
   711  001638  6E2A               	movwf	___wmul@multiplicand,c
   712  00163A  EC04  F00D         	call	___wmul	;wreg free
   713  00163E  0E90               	movlw	low sensorUpdate@sensorTemp
   714  001640  0100               	movlb	0	; () banked
   715  001642  6F8A               	movwf	??_sensorUpdate& (0+255),b
   716  001644  0E00               	movlw	high sensorUpdate@sensorTemp
   717  001646  0100               	movlb	0	; () banked
   718  001648  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   719  00164A  5028               	movf	?___wmul,w,c
   720  00164C  0100               	movlb	0	; () banked
   721  00164E  278A               	addwf	??_sensorUpdate& (0+255),f,b
   722  001650  5029               	movf	?___wmul+1,w,c
   723  001652  0100               	movlb	0	; () banked
   724  001654  238B               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   725  001656  90D8               	bcf	status,0,c
   726  001658  0100               	movlb	0	; () banked
   727  00165A  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   728  00165C  6ED9               	movwf	fsr2l,c
   729  00165E  0100               	movlb	0	; () banked
   730  001660  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   731  001662  6EDA               	movwf	fsr2h,c
   732  001664  0100               	movlb	0	; () banked
   733  001666  518A               	movf	??_sensorUpdate& (0+255),w,b
   734  001668  26D9               	addwf	fsr2l,f,c
   735  00166A  0100               	movlb	0	; () banked
   736  00166C  518B               	movf	(??_sensorUpdate+1)& (0+255),w,b
   737  00166E  22DA               	addwfc	fsr2h,f,c
   738  001670  0E01               	movlw	low _sensorCorrection
   739  001672  0100               	movlb	0	; () banked
   740  001674  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   741  001676  6EF6               	movwf	tblptrl,c
   742  001678  0E10               	movlw	high _sensorCorrection
   743  00167A  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   744  00167C  6EF7               	movwf	tblptrh,c
   745  00167E                     	if	0	;There are less than 3 active tblptr bytes
   746  00167E                     	endif
   747  00167E  0008               	tblrd		*
   748  001680  50F5               	movf	tablat,w,c
   749  001682  26DE               	addwf	postinc2,f,c
   750  001684  0E00               	movlw	0
   751  001686  22DD               	addwfc	postdec2,f,c
   752  001688  D000               	goto	l1818
   753  00168A                     l1818:
   754                           
   755                           ; BSR set to: 0
   756  00168A  0100               	movlb	0	; () banked
   757  00168C  4BE2               	infsnz	sensorUpdate@j& (0+255),f,b
   758  00168E  2BE3               	incf	(sensorUpdate@j+1)& (0+255),f,b
   759                           
   760                           ; BSR set to: 0
   761  001690  0100               	movlb	0	; () banked
   762  001692  BFE3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   763  001694  D73B               	goto	l1804
   764  001696  0100               	movlb	0	; () banked
   765  001698  51E3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   766  00169A  E102               	bnz	l1822
   767  00169C  D730               	goto	L1
   768  00169E  D000               	goto	l1822
   769  0016A0                     l1822:
   770                           
   771                           ; BSR set to: 0
   772  0016A0  0100               	movlb	0	; () banked
   773  0016A2  4BE0               	infsnz	sensorUpdate@i& (0+255),f,b
   774  0016A4  2BE1               	incf	(sensorUpdate@i+1)& (0+255),f,b
   775                           
   776                           ; BSR set to: 0
   777  0016A6  0100               	movlb	0	; () banked
   778  0016A8  BFE1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   779  0016AA  D71E               	goto	l1798
   780  0016AC  0100               	movlb	0	; () banked
   781  0016AE  51E1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   782  0016B0  E102               	bnz	l1826
   783  0016B2  D713               	goto	L2
   784  0016B4  D000               	goto	l1826
   785  0016B6                     l1826:
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 167: }
   789                           ;user.c: 168: }
   790                           ;user.c: 171: sensorComputation(sensorTemp);
   791  0016B6  0E90               	movlw	low sensorUpdate@sensorTemp
   792  0016B8  6E33               	movwf	sensorComputation@sensorTemp,c
   793  0016BA  0E00               	movlw	high sensorUpdate@sensorTemp
   794  0016BC  6E34               	movwf	sensorComputation@sensorTemp+1,c
   795  0016BE  EC4C  F009         	call	_sensorComputation	;wreg free
   796  0016C2  0012               	return		;funcret
   797  0016C4                     __end_of_sensorUpdate:
   798                           	opt stack 0
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postinc2	equ	0xFDE
   806                           postdec2	equ	0xFDD
   807                           fsr2h	equ	0xFDA
   808                           fsr2l	equ	0xFD9
   809                           status	equ	0xFD8
   810                           
   811 ;; *************** function _sensorComputation *****************
   812 ;; Defined at:
   813 ;;		line 125 in file "user.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   816 ;;		 -> sensorUpdate@sensorTemp(80), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  j               2    8[BANK0 ] int 
   819 ;;  i               2    6[BANK0 ] int 
   820 ;;  sum             2    4[BANK0 ] int 
   821 ;;  min             2    2[BANK0 ] int 
   822 ;;  max             2    0[BANK0 ] int 
   823 ;; Return value:  Size  Location     Type
   824 ;;		None               void
   825 ;; Registers used:
   826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;Total ram usage:       14 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    5
   839 ;; This function calls:
   840 ;;		_MAX
   841 ;;		_MIN
   842 ;;		___awdiv
   843 ;;		___wmul
   844 ;; This function is called by:
   845 ;;		_sensorUpdate
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text2
   850  001298                     __ptext2:
   851                           	opt stack 0
   852  001298                     _sensorComputation:
   853                           	opt stack 24
   854                           
   855                           ;user.c: 127: int max,min,i,j,sum;
   856                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   857                           
   858                           ;incstack = 0
   859  001298  0E00               	movlw	0
   860  00129A  0100               	movlb	0	; () banked
   861  00129C  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   862  00129E  0E00               	movlw	0
   863  0012A0  6F86               	movwf	sensorComputation@i& (0+255),b
   864                           
   865                           ; BSR set to: 0
   866  0012A2  0100               	movlb	0	; () banked
   867  0012A4  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   868  0012A6  D00A               	goto	l1768
   869  0012A8  0100               	movlb	0	; () banked
   870  0012AA  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   871  0012AC  E106               	bnz	u1390
   872  0012AE  0E04               	movlw	4
   873  0012B0  0100               	movlb	0	; () banked
   874  0012B2  5D86               	subwf	sensorComputation@i& (0+255),w,b
   875  0012B4  B0D8               	btfsc	status,0,c
   876  0012B6  D105               	goto	l258
   877  0012B8  D001               	goto	l1768
   878  0012BA                     u1390:
   879                           
   880                           ; BSR set to: 0
   881  0012BA  D103               	goto	l258
   882  0012BC                     l1768:
   883                           
   884                           ; BSR set to: 0
   885                           ;user.c: 129: {
   886                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   887  0012BC  0E00               	movlw	0
   888  0012BE  0100               	movlb	0	; () banked
   889  0012C0  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   890  0012C2  0E00               	movlw	0
   891  0012C4  6F88               	movwf	sensorComputation@j& (0+255),b
   892                           
   893                           ; BSR set to: 0
   894  0012C6  0100               	movlb	0	; () banked
   895  0012C8  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   896  0012CA  D00A               	goto	l1774
   897  0012CC  0100               	movlb	0	; () banked
   898  0012CE  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   899  0012D0  E106               	bnz	u1400
   900  0012D2  0E0A               	movlw	10
   901  0012D4  0100               	movlb	0	; () banked
   902  0012D6  5D88               	subwf	sensorComputation@j& (0+255),w,b
   903  0012D8  B0D8               	btfsc	status,0,c
   904  0012DA  D0B7               	goto	l1784
   905  0012DC  D001               	goto	l1774
   906  0012DE                     u1400:
   907                           
   908                           ; BSR set to: 0
   909  0012DE  D0B5               	goto	l1784
   910  0012E0                     l1774:
   911                           
   912                           ; BSR set to: 0
   913                           ;user.c: 131: {
   914                           ;user.c: 132: if(j == 0)
   915  0012E0  0100               	movlb	0	; () banked
   916  0012E2  5188               	movf	sensorComputation@j& (0+255),w,b
   917  0012E4  0100               	movlb	0	; () banked
   918  0012E6  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   919  0012E8  A4D8               	btfss	status,2,c
   920  0012EA  D02A               	goto	l1778
   921                           
   922                           ; BSR set to: 0
   923                           ;user.c: 133: {
   924                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   925  0012EC  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   926  0012F0  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   927  0012F4  0E00               	movlw	0
   928  0012F6  6E2B               	movwf	___wmul@multiplicand+1,c
   929  0012F8  0E14               	movlw	20
   930  0012FA  6E2A               	movwf	___wmul@multiplicand,c
   931  0012FC  EC04  F00D         	call	___wmul	;wreg free
   932  001300  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   933  001304  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   934  001308  5028               	movf	?___wmul,w,c
   935  00130A  2635               	addwf	??_sensorComputation,f,c
   936  00130C  5029               	movf	?___wmul+1,w,c
   937  00130E  2236               	addwfc	??_sensorComputation+1,f,c
   938  001310  90D8               	bcf	status,0,c
   939  001312  0100               	movlb	0	; () banked
   940  001314  3588               	rlcf	sensorComputation@j& (0+255),w,b
   941  001316  6ED9               	movwf	fsr2l,c
   942  001318  0100               	movlb	0	; () banked
   943  00131A  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   944  00131C  6EDA               	movwf	fsr2h,c
   945  00131E  5035               	movf	??_sensorComputation,w,c
   946  001320  26D9               	addwf	fsr2l,f,c
   947  001322  5036               	movf	??_sensorComputation+1,w,c
   948  001324  22DA               	addwfc	fsr2h,f,c
   949  001326  CFDE F080          	movff	postinc2,sensorComputation@max
   950  00132A  CFDD F081          	movff	postdec2,sensorComputation@max+1
   951  00132E  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   952  001332  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   953  001336  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   954  00133A  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   955                           
   956                           ;user.c: 135: continue;
   957  00133E  D07A               	goto	l1780
   958  001340                     l1778:
   959                           
   960                           ; BSR set to: 0
   961                           ;user.c: 136: }
   962                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   963  001340  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   964  001344  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   965  001348  0E00               	movlw	0
   966  00134A  6E2B               	movwf	___wmul@multiplicand+1,c
   967  00134C  0E14               	movlw	20
   968  00134E  6E2A               	movwf	___wmul@multiplicand,c
   969  001350  EC04  F00D         	call	___wmul	;wreg free
   970  001354  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   971  001358  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   972  00135C  5028               	movf	?___wmul,w,c
   973  00135E  2635               	addwf	??_sensorComputation,f,c
   974  001360  5029               	movf	?___wmul+1,w,c
   975  001362  2236               	addwfc	??_sensorComputation+1,f,c
   976  001364  90D8               	bcf	status,0,c
   977  001366  0100               	movlb	0	; () banked
   978  001368  3588               	rlcf	sensorComputation@j& (0+255),w,b
   979  00136A  6ED9               	movwf	fsr2l,c
   980  00136C  0100               	movlb	0	; () banked
   981  00136E  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   982  001370  6EDA               	movwf	fsr2h,c
   983  001372  5035               	movf	??_sensorComputation,w,c
   984  001374  26D9               	addwf	fsr2l,f,c
   985  001376  5036               	movf	??_sensorComputation+1,w,c
   986  001378  22DA               	addwfc	fsr2h,f,c
   987  00137A  CFDE F02E          	movff	postinc2,MIN@a
   988  00137E  CFDD F02F          	movff	postdec2,MIN@a+1
   989  001382  C082  F030         	movff	sensorComputation@min,MIN@b
   990  001386  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   991  00138A  EC18  F00D         	call	_MIN	;wreg free
   992  00138E  C02E  F082         	movff	?_MIN,sensorComputation@min
   993  001392  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   994                           
   995                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   996  001396  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   997  00139A  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   998  00139E  0E00               	movlw	0
   999  0013A0  6E2B               	movwf	___wmul@multiplicand+1,c
  1000  0013A2  0E14               	movlw	20
  1001  0013A4  6E2A               	movwf	___wmul@multiplicand,c
  1002  0013A6  EC04  F00D         	call	___wmul	;wreg free
  1003  0013AA  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1004  0013AE  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1005  0013B2  5028               	movf	?___wmul,w,c
  1006  0013B4  2635               	addwf	??_sensorComputation,f,c
  1007  0013B6  5029               	movf	?___wmul+1,w,c
  1008  0013B8  2236               	addwfc	??_sensorComputation+1,f,c
  1009  0013BA  90D8               	bcf	status,0,c
  1010  0013BC  0100               	movlb	0	; () banked
  1011  0013BE  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1012  0013C0  6ED9               	movwf	fsr2l,c
  1013  0013C2  0100               	movlb	0	; () banked
  1014  0013C4  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1015  0013C6  6EDA               	movwf	fsr2h,c
  1016  0013C8  5035               	movf	??_sensorComputation,w,c
  1017  0013CA  26D9               	addwf	fsr2l,f,c
  1018  0013CC  5036               	movf	??_sensorComputation+1,w,c
  1019  0013CE  22DA               	addwfc	fsr2h,f,c
  1020  0013D0  CFDE F02E          	movff	postinc2,MAX@a
  1021  0013D4  CFDD F02F          	movff	postdec2,MAX@a+1
  1022  0013D8  C080  F030         	movff	sensorComputation@max,MAX@b
  1023  0013DC  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
  1024  0013E0  EC2C  F00D         	call	_MAX	;wreg free
  1025  0013E4  C02E  F080         	movff	?_MAX,sensorComputation@max
  1026  0013E8  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
  1027                           
  1028                           ;user.c: 139: sum += sensorTemp[i][j];
  1029  0013EC  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
  1030  0013F0  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1031  0013F4  0E00               	movlw	0
  1032  0013F6  6E2B               	movwf	___wmul@multiplicand+1,c
  1033  0013F8  0E14               	movlw	20
  1034  0013FA  6E2A               	movwf	___wmul@multiplicand,c
  1035  0013FC  EC04  F00D         	call	___wmul	;wreg free
  1036  001400  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1037  001404  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1038  001408  5028               	movf	?___wmul,w,c
  1039  00140A  2635               	addwf	??_sensorComputation,f,c
  1040  00140C  5029               	movf	?___wmul+1,w,c
  1041  00140E  2236               	addwfc	??_sensorComputation+1,f,c
  1042  001410  90D8               	bcf	status,0,c
  1043  001412  0100               	movlb	0	; () banked
  1044  001414  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1045  001416  6ED9               	movwf	fsr2l,c
  1046  001418  0100               	movlb	0	; () banked
  1047  00141A  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1048  00141C  6EDA               	movwf	fsr2h,c
  1049  00141E  5035               	movf	??_sensorComputation,w,c
  1050  001420  26D9               	addwf	fsr2l,f,c
  1051  001422  5036               	movf	??_sensorComputation+1,w,c
  1052  001424  22DA               	addwfc	fsr2h,f,c
  1053  001426  50DE               	movf	postinc2,w,c
  1054  001428  0100               	movlb	0	; () banked
  1055  00142A  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1056  00142C  50DD               	movf	postdec2,w,c
  1057  00142E  0100               	movlb	0	; () banked
  1058  001430  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1059  001432  D000               	goto	l1780
  1060  001434                     l1780:
  1061                           
  1062                           ; BSR set to: 0
  1063  001434  0100               	movlb	0	; () banked
  1064  001436  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1065  001438  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1066                           
  1067                           ; BSR set to: 0
  1068  00143A  0100               	movlb	0	; () banked
  1069  00143C  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1070  00143E  D750               	goto	l1774
  1071  001440  0100               	movlb	0	; () banked
  1072  001442  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1073  001444  E102               	bnz	l1784
  1074  001446  D745               	goto	L3
  1075  001448  D000               	goto	l1784
  1076  00144A                     l1784:
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;user.c: 140: }
  1080                           ;user.c: 141: sum = sum - min - max;
  1081  00144A  0100               	movlb	0	; () banked
  1082  00144C  5180               	movf	sensorComputation@max& (0+255),w,b
  1083  00144E  0100               	movlb	0	; () banked
  1084  001450  2582               	addwf	sensorComputation@min& (0+255),w,b
  1085  001452  6E35               	movwf	??_sensorComputation& (0+255),c
  1086  001454  0100               	movlb	0	; () banked
  1087  001456  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1088  001458  0100               	movlb	0	; () banked
  1089  00145A  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1090  00145C  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1091  00145E  1E35               	comf	??_sensorComputation,f,c
  1092  001460  1E36               	comf	??_sensorComputation+1,f,c
  1093  001462  4A35               	infsnz	??_sensorComputation,f,c
  1094  001464  2A36               	incf	??_sensorComputation+1,f,c
  1095  001466  0100               	movlb	0	; () banked
  1096  001468  5184               	movf	sensorComputation@sum& (0+255),w,b
  1097  00146A  2435               	addwf	??_sensorComputation,w,c
  1098  00146C  0100               	movlb	0	; () banked
  1099  00146E  6F84               	movwf	sensorComputation@sum& (0+255),b
  1100  001470  0100               	movlb	0	; () banked
  1101  001472  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1102  001474  2036               	addwfc	??_sensorComputation+1,w,c
  1103  001476  0100               	movlb	0	; () banked
  1104  001478  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1108  00147A  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1109  00147E  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1110  001482  0E00               	movlw	0
  1111  001484  6E2B               	movwf	___awdiv@divisor+1,c
  1112  001486  0E08               	movlw	8
  1113  001488  6E2A               	movwf	___awdiv@divisor,c
  1114  00148A  EC49  F00C         	call	___awdiv	;wreg free
  1115  00148E  90D8               	bcf	status,0,c
  1116  001490  0100               	movlb	0	; () banked
  1117  001492  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1118  001494  6ED9               	movwf	fsr2l,c
  1119  001496  0100               	movlb	0	; () banked
  1120  001498  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1121  00149A  6EDA               	movwf	fsr2h,c
  1122  00149C  0E37               	movlw	low _sensorValue
  1123  00149E  26D9               	addwf	fsr2l,f,c
  1124  0014A0  0E00               	movlw	high _sensorValue
  1125  0014A2  22DA               	addwfc	fsr2h,f,c
  1126  0014A4  C028  FFDE         	movff	?___awdiv,postinc2
  1127  0014A8  C029  FFDD         	movff	?___awdiv+1,postdec2
  1128                           
  1129                           ; BSR set to: 0
  1130  0014AC  0100               	movlb	0	; () banked
  1131  0014AE  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1132  0014B0  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1133                           
  1134                           ; BSR set to: 0
  1135  0014B2  0100               	movlb	0	; () banked
  1136  0014B4  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1137  0014B6  D702               	goto	l1768
  1138  0014B8  0100               	movlb	0	; () banked
  1139  0014BA  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1140  0014BC  E102               	bnz	l258
  1141  0014BE  D6F7               	goto	L4
  1142  0014C0  D000               	goto	l258
  1143  0014C2                     l258:
  1144                           
  1145                           ; BSR set to: 0
  1146  0014C2  0012               	return		;funcret
  1147  0014C4                     __end_of_sensorComputation:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postinc2	equ	0xFDE
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           status	equ	0xFD8
  1160                           
  1161 ;; *************** function ___wmul *****************
  1162 ;; Defined at:
  1163 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  multiplier      2   39[COMRAM] unsigned int 
  1166 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  product         2   43[COMRAM] unsigned int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  2   39[COMRAM] unsigned int 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0, prodl, prodh
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;Total ram usage:        6 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    4
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_sensorComputation
  1189 ;;		_sensorUpdate
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text3
  1194  001A08                     __ptext3:
  1195                           	opt stack 0
  1196  001A08                     ___wmul:
  1197                           	opt stack 24
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;incstack = 0
  1201  001A08  5028               	movf	___wmul@multiplier,w,c
  1202  001A0A  022A               	mulwf	___wmul@multiplicand,c
  1203  001A0C  CFF3 F02C          	movff	prodl,___wmul@product
  1204  001A10  CFF4 F02D          	movff	prodh,___wmul@product+1
  1205  001A14  5028               	movf	___wmul@multiplier,w,c
  1206  001A16  022B               	mulwf	___wmul@multiplicand+1,c
  1207  001A18  50F3               	movf	prodl,w,c
  1208  001A1A  262D               	addwf	___wmul@product+1,f,c
  1209  001A1C  5029               	movf	___wmul@multiplier+1,w,c
  1210  001A1E  022A               	mulwf	___wmul@multiplicand,c
  1211  001A20  50F3               	movf	prodl,w,c
  1212  001A22  262D               	addwf	___wmul@product+1,f,c
  1213  001A24  C02C  F028         	movff	___wmul@product,?___wmul
  1214  001A28  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1215  001A2C  D000               	goto	l283
  1216  001A2E                     l283:
  1217  001A2E  0012               	return		;funcret
  1218  001A30                     __end_of___wmul:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           prodh	equ	0xFF4
  1225                           prodl	equ	0xFF3
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postinc2	equ	0xFDE
  1229                           postdec2	equ	0xFDD
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function ___awdiv *****************
  1235 ;; Defined at:
  1236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;  dividend        2   39[COMRAM] int 
  1239 ;;  divisor         2   41[COMRAM] int 
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  quotient        2   45[COMRAM] int 
  1242 ;;  sign            1   44[COMRAM] unsigned char 
  1243 ;;  counter         1   43[COMRAM] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   39[COMRAM] int 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;Total ram usage:        8 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    4
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_sensorComputation
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text4
  1268  001892                     __ptext4:
  1269                           	opt stack 0
  1270  001892                     ___awdiv:
  1271                           	opt stack 24
  1272                           
  1273                           ;incstack = 0
  1274  001892  0E00               	movlw	0
  1275  001894  6E2D               	movwf	___awdiv@sign,c
  1276  001896  AE2B               	btfss	___awdiv@divisor+1,7,c
  1277  001898  D007               	goto	l1726
  1278  00189A  6C2A               	negf	___awdiv@divisor,c
  1279  00189C  1E2B               	comf	___awdiv@divisor+1,f,c
  1280  00189E  B0D8               	btfsc	status,0,c
  1281  0018A0  2A2B               	incf	___awdiv@divisor+1,f,c
  1282  0018A2  0E01               	movlw	1
  1283  0018A4  6E2D               	movwf	___awdiv@sign,c
  1284  0018A6  D000               	goto	l1726
  1285  0018A8                     l1726:
  1286  0018A8  AE29               	btfss	___awdiv@dividend+1,7,c
  1287  0018AA  D007               	goto	l1732
  1288  0018AC  6C28               	negf	___awdiv@dividend,c
  1289  0018AE  1E29               	comf	___awdiv@dividend+1,f,c
  1290  0018B0  B0D8               	btfsc	status,0,c
  1291  0018B2  2A29               	incf	___awdiv@dividend+1,f,c
  1292  0018B4  0E01               	movlw	1
  1293  0018B6  1A2D               	xorwf	___awdiv@sign,f,c
  1294  0018B8  D000               	goto	l1732
  1295  0018BA                     l1732:
  1296  0018BA  0E00               	movlw	0
  1297  0018BC  6E2F               	movwf	___awdiv@quotient+1,c
  1298  0018BE  0E00               	movlw	0
  1299  0018C0  6E2E               	movwf	___awdiv@quotient,c
  1300  0018C2  502A               	movf	___awdiv@divisor,w,c
  1301  0018C4  102B               	iorwf	___awdiv@divisor+1,w,c
  1302  0018C6  B4D8               	btfsc	status,2,c
  1303  0018C8  D021               	goto	l1754
  1304  0018CA  0E01               	movlw	1
  1305  0018CC  6E2C               	movwf	___awdiv@counter,c
  1306  0018CE  D005               	goto	l1740
  1307  0018D0                     l1738:
  1308  0018D0  90D8               	bcf	status,0,c
  1309  0018D2  362A               	rlcf	___awdiv@divisor,f,c
  1310  0018D4  362B               	rlcf	___awdiv@divisor+1,f,c
  1311  0018D6  2A2C               	incf	___awdiv@counter,f,c
  1312  0018D8  D000               	goto	l1740
  1313  0018DA                     l1740:
  1314  0018DA  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1315  0018DC  D002               	goto	l1742
  1316  0018DE  D7F8               	goto	l1738
  1317  0018E0  D000               	goto	l1742
  1318  0018E2                     l1742:
  1319  0018E2  90D8               	bcf	status,0,c
  1320  0018E4  362E               	rlcf	___awdiv@quotient,f,c
  1321  0018E6  362F               	rlcf	___awdiv@quotient+1,f,c
  1322  0018E8  502A               	movf	___awdiv@divisor,w,c
  1323  0018EA  5C28               	subwf	___awdiv@dividend,w,c
  1324  0018EC  502B               	movf	___awdiv@divisor+1,w,c
  1325  0018EE  5829               	subwfb	___awdiv@dividend+1,w,c
  1326  0018F0  A0D8               	btfss	status,0,c
  1327  0018F2  D006               	goto	l1750
  1328  0018F4  502A               	movf	___awdiv@divisor,w,c
  1329  0018F6  5E28               	subwf	___awdiv@dividend,f,c
  1330  0018F8  502B               	movf	___awdiv@divisor+1,w,c
  1331  0018FA  5A29               	subwfb	___awdiv@dividend+1,f,c
  1332  0018FC  802E               	bsf	___awdiv@quotient,0,c
  1333  0018FE  D000               	goto	l1750
  1334  001900                     l1750:
  1335  001900  90D8               	bcf	status,0,c
  1336  001902  322B               	rrcf	___awdiv@divisor+1,f,c
  1337  001904  322A               	rrcf	___awdiv@divisor,f,c
  1338  001906  2E2C               	decfsz	___awdiv@counter,f,c
  1339  001908  D7EC               	goto	l1742
  1340  00190A  D000               	goto	l1754
  1341  00190C                     l1754:
  1342  00190C  502D               	movf	___awdiv@sign,w,c
  1343  00190E  B4D8               	btfsc	status,2,c
  1344  001910  D005               	goto	l1758
  1345  001912  6C2E               	negf	___awdiv@quotient,c
  1346  001914  1E2F               	comf	___awdiv@quotient+1,f,c
  1347  001916  B0D8               	btfsc	status,0,c
  1348  001918  2A2F               	incf	___awdiv@quotient+1,f,c
  1349  00191A  D000               	goto	l1758
  1350  00191C                     l1758:
  1351  00191C  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1352  001920  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1353  001924  D000               	goto	l476
  1354  001926                     l476:
  1355  001926  0012               	return		;funcret
  1356  001928                     __end_of___awdiv:
  1357                           	opt stack 0
  1358                           tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           prodh	equ	0xFF4
  1363                           prodl	equ	0xFF3
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postinc2	equ	0xFDE
  1367                           postdec2	equ	0xFDD
  1368                           fsr2h	equ	0xFDA
  1369                           fsr2l	equ	0xFD9
  1370                           status	equ	0xFD8
  1371                           
  1372 ;; *************** function _MIN *****************
  1373 ;; Defined at:
  1374 ;;		line 175 in file "user.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  a               2   45[COMRAM] int 
  1377 ;;  b               2   47[COMRAM] int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2   45[COMRAM] int 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;Total ram usage:        5 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    4
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_sensorComputation
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text5
  1404  001A30                     __ptext5:
  1405                           	opt stack 0
  1406  001A30                     _MIN:
  1407                           	opt stack 24
  1408                           
  1409                           ;user.c: 177: if(a>b) return b;
  1410                           
  1411                           ;incstack = 0
  1412  001A30  502E               	movf	MIN@a,w,c
  1413  001A32  5C30               	subwf	MIN@b,w,c
  1414  001A34  5031               	movf	MIN@b+1,w,c
  1415  001A36  0A80               	xorlw	128
  1416  001A38  6E32               	movwf	??_MIN& (0+255),c
  1417  001A3A  502F               	movf	MIN@a+1,w,c
  1418  001A3C  0A80               	xorlw	128
  1419  001A3E  5832               	subwfb	??_MIN& (0+255),w,c
  1420  001A40  B0D8               	btfsc	status,0,c
  1421  001A42  D005               	goto	l275
  1422  001A44  C030  F02E         	movff	MIN@b,?_MIN
  1423  001A48  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1424  001A4C  D004               	goto	l276
  1425  001A4E                     l275:
  1426                           
  1427                           ;user.c: 178: return a;
  1428  001A4E  C02E  F02E         	movff	MIN@a,?_MIN
  1429  001A52  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1430  001A56                     l276:
  1431  001A56  0012               	return		;funcret
  1432  001A58                     __end_of_MIN:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _MAX *****************
  1449 ;; Defined at:
  1450 ;;		line 181 in file "user.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  a               2   45[COMRAM] int 
  1453 ;;  b               2   47[COMRAM] int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  2   45[COMRAM] int 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;Total ram usage:        5 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    4
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_sensorComputation
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text6
  1480  001A58                     __ptext6:
  1481                           	opt stack 0
  1482  001A58                     _MAX:
  1483                           	opt stack 24
  1484                           
  1485                           ;user.c: 183: if(a>b) return a;
  1486                           
  1487                           ;incstack = 0
  1488  001A58  502E               	movf	MAX@a,w,c
  1489  001A5A  5C30               	subwf	MAX@b,w,c
  1490  001A5C  5031               	movf	MAX@b+1,w,c
  1491  001A5E  0A80               	xorlw	128
  1492  001A60  6E32               	movwf	??_MAX& (0+255),c
  1493  001A62  502F               	movf	MAX@a+1,w,c
  1494  001A64  0A80               	xorlw	128
  1495  001A66  5832               	subwfb	??_MAX& (0+255),w,c
  1496  001A68  B0D8               	btfsc	status,0,c
  1497  001A6A  D005               	goto	l279
  1498  001A6C  C02E  F02E         	movff	MAX@a,?_MAX
  1499  001A70  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1500  001A74  D004               	goto	l280
  1501  001A76                     l279:
  1502                           
  1503                           ;user.c: 184: return b;
  1504  001A76  C030  F02E         	movff	MAX@b,?_MAX
  1505  001A7A  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1506  001A7E                     l280:
  1507  001A7E  0012               	return		;funcret
  1508  001A80                     __end_of_MAX:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _InitApp *****************
  1525 ;; Defined at:
  1526 ;;		line 35 in file "user.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;		None               void
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;Total ram usage:        0 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    5
  1547 ;; This function calls:
  1548 ;;		_AlgorithmSelection
  1549 ;;		_delay
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text7
  1556  001928                     __ptext7:
  1557                           	opt stack 0
  1558  001928                     _InitApp:
  1559                           	opt stack 25
  1560                           
  1561                           ;user.c: 39: TRISC = 0;
  1562                           
  1563                           ;incstack = 0
  1564  001928  0E00               	movlw	0
  1565  00192A  6E94               	movwf	3988,c	;volatile
  1566                           
  1567                           ;user.c: 43: TRISEbits.TRISE1=1;
  1568  00192C  8296               	bsf	3990,1,c	;volatile
  1569                           
  1570                           ;user.c: 45: TRISEbits.TRISE2=1;
  1571  00192E  8496               	bsf	3990,2,c	;volatile
  1572                           
  1573                           ;user.c: 47: TRISBbits.RB1=1;
  1574  001930  8293               	bsf	3987,1,c	;volatile
  1575                           
  1576                           ;user.c: 49: TRISBbits.RB0=1;
  1577  001932  8093               	bsf	3987,0,c	;volatile
  1578                           
  1579                           ;user.c: 52: TRISBbits.RB3=1;
  1580  001934  8693               	bsf	3987,3,c	;volatile
  1581                           
  1582                           ;user.c: 54: TRISBbits.RB2=1;
  1583  001936  8493               	bsf	3987,2,c	;volatile
  1584                           
  1585                           ;user.c: 58: ADCON1 =0b00000001;
  1586  001938  0E01               	movlw	1
  1587  00193A  6EC1               	movwf	4033,c	;volatile
  1588                           
  1589                           ;user.c: 63: ADCON2=0b00001010;
  1590  00193C  0E0A               	movlw	10
  1591  00193E  6EC0               	movwf	4032,c	;volatile
  1592                           
  1593                           ;user.c: 68: ADCON0=0b00101011;
  1594  001940  0E2B               	movlw	43
  1595  001942  6EC2               	movwf	4034,c	;volatile
  1596                           
  1597                           ;user.c: 77: T0CON = 0b11000100;
  1598  001944  0EC4               	movlw	196
  1599  001946  6ED5               	movwf	4053,c	;volatile
  1600                           
  1601                           ;user.c: 85: INTCON2 = 0b11110100;
  1602  001948  0EF4               	movlw	244
  1603  00194A  6EF1               	movwf	intcon2,c	;volatile
  1604                           
  1605                           ;user.c: 95: INTCON = 0b00100000;
  1606  00194C  0E20               	movlw	32
  1607  00194E  6EF2               	movwf	intcon,c	;volatile
  1608                           
  1609                           ;user.c: 105: AlgorithmSelection();
  1610  001950  EC40  F00D         	call	_AlgorithmSelection	;wreg free
  1611                           
  1612                           ;user.c: 108: delay(1000);
  1613  001954  0E03               	movlw	3
  1614  001956  6E29               	movwf	delay@ms+1,c
  1615  001958  0EE8               	movlw	232
  1616  00195A  6E28               	movwf	delay@ms,c
  1617  00195C  ECEA  F00C         	call	_delay	;wreg free
  1618                           
  1619                           ;user.c: 109: INTCONbits.GIE = 1;
  1620  001960  8EF2               	bsf	intcon,7,c	;volatile
  1621  001962  0012               	return		;funcret
  1622  001964                     __end_of_InitApp:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           intcon	equ	0xFF2
  1631                           intcon2	equ	0xFF1
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postinc2	equ	0xFDE
  1635                           postdec2	equ	0xFDD
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _delay *****************
  1641 ;; Defined at:
  1642 ;;		line 29 in file "user.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  ms              2   39[COMRAM] unsigned int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  x               2   42[COMRAM] int 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_InitApp
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text8
  1671  0019D4                     __ptext8:
  1672                           	opt stack 0
  1673  0019D4                     _delay:
  1674                           	opt stack 25
  1675                           
  1676                           ;user.c: 30: int x = 0;
  1677                           
  1678                           ;incstack = 0
  1679  0019D4  0E00               	movlw	0
  1680  0019D6  6E2C               	movwf	delay@x+1,c
  1681  0019D8  0E00               	movlw	0
  1682  0019DA  6E2B               	movwf	delay@x,c
  1683                           
  1684                           ;user.c: 31: for (x = 0; x < ms; x++)
  1685  0019DC  0E00               	movlw	0
  1686  0019DE  6E2C               	movwf	delay@x+1,c
  1687  0019E0  0E00               	movlw	0
  1688  0019E2  6E2B               	movwf	delay@x,c
  1689  0019E4  D00A               	goto	l235
  1690  0019E6                     l1440:
  1691                           
  1692                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1693  0019E6  0E0B               	movlw	11
  1694  0019E8  6E2A               	movwf	??_delay& (0+255),c
  1695  0019EA  0E62               	movlw	98
  1696  0019EC                     u1527:
  1697  0019EC  2EE8               	decfsz	wreg,f,c
  1698  0019EE  D7FE               	goto	u1527
  1699  0019F0  2E2A               	decfsz	??_delay& (0+255),f,c
  1700  0019F2  D7FC               	goto	u1527
  1701  0019F4  D000               	nop2	
  1702  0019F6  4A2B               	infsnz	delay@x,f,c
  1703  0019F8  2A2C               	incf	delay@x+1,f,c
  1704  0019FA                     l235:
  1705  0019FA  5028               	movf	delay@ms,w,c
  1706  0019FC  5C2B               	subwf	delay@x,w,c
  1707  0019FE  5029               	movf	delay@ms+1,w,c
  1708  001A00  582C               	subwfb	delay@x+1,w,c
  1709  001A02  A0D8               	btfss	status,0,c
  1710  001A04  D7F0               	goto	l1440
  1711  001A06  0012               	return		;funcret
  1712  001A08                     __end_of_delay:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           intcon2	equ	0xFF1
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _AlgorithmSelection *****************
  1731 ;; Defined at:
  1732 ;;		line 112 in file "user.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    4
  1753 ;; This function calls:
  1754 ;;		Nothing
  1755 ;; This function is called by:
  1756 ;;		_InitApp
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text9
  1761  001A80                     __ptext9:
  1762                           	opt stack 0
  1763  001A80                     _AlgorithmSelection:
  1764                           	opt stack 25
  1765                           
  1766                           ;user.c: 114: ADCON0 = 0b00100111;
  1767                           
  1768                           ;incstack = 0
  1769  001A80  0E27               	movlw	39
  1770  001A82  6EC2               	movwf	4034,c	;volatile
  1771                           
  1772                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1773  001A84  82C2               	bsf	4034,1,c	;volatile
  1774                           
  1775                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1776  001A86  D000               	goto	l244
  1777  001A88                     l244:
  1778  001A88  B2C2               	btfsc	4034,1,c	;volatile
  1779  001A8A  D7FE               	goto	l244
  1780                           
  1781                           ;user.c: 119: if(ADRESL > 0b10000000)
  1782  001A8C  0E80               	movlw	128
  1783  001A8E  64C3               	cpfsgt	4035,c	;volatile
  1784  001A90  D002               	goto	l1030
  1785                           
  1786                           ;user.c: 120: algorithm = LEFTWALL;
  1787  001A92  0E00               	movlw	0
  1788  001A94  D001               	goto	L5
  1789  001A96                     l1030:
  1790                           
  1791                           ;user.c: 121: else
  1792                           ;user.c: 122: algorithm = RIGHTWALL;
  1793  001A96  0E01               	movlw	1
  1794  001A98                     L5:
  1795  001A98  6E4F               	movwf	_algorithm,c
  1796  001A9A  D000               	goto	l249
  1797  001A9C                     l249:
  1798  001A9C  0012               	return		;funcret
  1799  001A9E                     __end_of_AlgorithmSelection:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           intcon2	equ	0xFF1
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _ConfigureOscillator *****************
  1818 ;; Defined at:
  1819 ;;		line 24 in file "system.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;		None               void
  1826 ;; Registers used:
  1827 ;;		wreg, status,2
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text10
  1848  001B14                     __ptext10:
  1849                           	opt stack 0
  1850  001B14                     _ConfigureOscillator:
  1851                           	opt stack 26
  1852                           
  1853                           ;system.c: 29: OSCCON = 0b01111100;
  1854                           
  1855                           ;incstack = 0
  1856  001B14  0E7C               	movlw	124
  1857  001B16  6ED3               	movwf	4051,c	;volatile
  1858                           
  1859                           ;system.c: 31: OSCTUNE = 0b01001111;
  1860  001B18  0E4F               	movlw	79
  1861  001B1A  6E9B               	movwf	3995,c	;volatile
  1862  001B1C  0012               	return		;funcret
  1863  001B1E                     __end_of_ConfigureOscillator:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           prodh	equ	0xFF4
  1870                           prodl	equ	0xFF3
  1871                           intcon	equ	0xFF2
  1872                           intcon2	equ	0xFF1
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postinc2	equ	0xFDE
  1876                           postdec2	equ	0xFDD
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _low_isr *****************
  1882 ;; Defined at:
  1883 ;;		line 228 in file "interrupts.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;		None               void
  1890 ;; Registers used:
  1891 ;;		None
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;Total ram usage:       17 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    3
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		Interrupt level 1
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	intcodelo
  1912  000018                     __pintcodelo:
  1913                           	opt stack 0
  1914  000018                     _low_isr:
  1915                           	opt stack 24
  1916                           
  1917                           ;incstack = 0
  1918  000018  CFD8 F001          	movff	status,??_low_isr
  1919  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1920  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1921  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1922  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1923  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1924  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1925  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1926  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1927  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1928  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1929  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1930  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1931  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1932  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1933  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1934  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1935  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1936  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1937  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1938  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1939  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1940  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1941  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1942  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1943  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1944  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1945  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1946  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1947  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1948  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1949  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1950  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1951  00009C  C001  FFD8         	movff	??_low_isr,status
  1952  0000A0  0010               	retfie	
  1953  0000A2                     __end_of_low_isr:
  1954                           	opt stack 0
  1955                           pclatu	equ	0xFFB
  1956                           pclath	equ	0xFFA
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           intcon2	equ	0xFF1
  1965                           postinc0	equ	0xFEE
  1966                           fsr0h	equ	0xFEA
  1967                           fsr0l	equ	0xFE9
  1968                           wreg	equ	0xFE8
  1969                           fsr1h	equ	0xFE2
  1970                           fsr1l	equ	0xFE1
  1971                           bsr	equ	0xFE0
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _high_isr *****************
  1979 ;; Defined at:
  1980 ;;		line 86 in file "interrupts.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;		None               void
  1987 ;; Registers used:
  1988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:       14 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    2
  2001 ;; This function calls:
  2002 ;;		_KController
  2003 ;;		_Reversing
  2004 ;;		_forward
  2005 ;;		_merge
  2006 ;;		_motorCounterUpdate
  2007 ;;		_moveMouse
  2008 ;;		_rotate
  2009 ;; This function is called by:
  2010 ;;		Interrupt level 2
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	intcode
  2015  000008                     __pintcode:
  2016                           	opt stack 0
  2017  000008                     _high_isr:
  2018                           	opt stack 24
  2019                           
  2020                           ;incstack = 0
  2021  000008  CFFA F01A          	movff	pclath,??_high_isr
  2022  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  2023  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  2024  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  2025                           pclatu	equ	0xFFB
  2026                           pclath	equ	0xFFA
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           intcon	equ	0xFF2
  2034                           intcon2	equ	0xFF1
  2035                           postinc0	equ	0xFEE
  2036                           fsr0h	equ	0xFEA
  2037                           fsr0l	equ	0xFE9
  2038                           wreg	equ	0xFE8
  2039                           fsr1h	equ	0xFE2
  2040                           fsr1l	equ	0xFE1
  2041                           bsr	equ	0xFE0
  2042                           postinc2	equ	0xFDE
  2043                           postdec2	equ	0xFDD
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048                           	psect	intcode_body
  2049  00100A                     __pintcode_body:
  2050                           	opt stack 24
  2051  00100A                     int_func:
  2052                           	opt stack 24
  2053  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2054  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2055  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2056  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2057  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2058  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2059  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2060  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2061  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2062  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2063  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2064  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2065                           
  2066                           ;interrupts.c: 105: if(INTCONbits.TMR0IF == 1)
  2067  001038  A4F2               	btfss	intcon,2,c	;volatile
  2068  00103A  D111               	goto	i2l81
  2069                           
  2070                           ;interrupts.c: 106: {
  2071                           ;interrupts.c: 107: if(MotorDelayCounter > 2)
  2072  00103C  BE44               	btfsc	_MotorDelayCounter+1,7,c
  2073  00103E  D10B               	goto	i2l1682
  2074  001040  5044               	movf	_MotorDelayCounter+1,w,c
  2075  001042  E104               	bnz	i2u105_40
  2076  001044  0E03               	movlw	3
  2077  001046  5C43               	subwf	_MotorDelayCounter,w,c
  2078  001048  A0D8               	btfss	status,0,c
  2079  00104A  D105               	goto	i2l1682
  2080  00104C                     i2u105_40:
  2081                           
  2082                           ;interrupts.c: 108: {
  2083                           ;interrupts.c: 110: if (ForwardCounter > 0) {
  2084  00104C  BE40               	btfsc	_ForwardCounter+1,7,c
  2085  00104E  D008               	goto	i2l1590
  2086  001050  5040               	movf	_ForwardCounter+1,w,c
  2087  001052  E103               	bnz	i2u106_40
  2088  001054  043F               	decf	_ForwardCounter,w,c
  2089  001056  A0D8               	btfss	status,0,c
  2090  001058  D003               	goto	i2l1590
  2091  00105A                     i2u106_40:
  2092                           
  2093                           ;interrupts.c: 111: forward();
  2094  00105A  EC4F  F00D         	call	_forward	;wreg free
  2095                           
  2096                           ;interrupts.c: 112: }
  2097  00105E  D0EF               	goto	i2l58
  2098  001060                     i2l1590:
  2099                           
  2100                           ;interrupts.c: 115: else if (ReverseCounter > 0)
  2101  001060  BE48               	btfsc	_ReverseCounter+1,7,c
  2102  001062  D008               	goto	i2l1594
  2103  001064  5048               	movf	_ReverseCounter+1,w,c
  2104  001066  E103               	bnz	i2u107_40
  2105  001068  0447               	decf	_ReverseCounter,w,c
  2106  00106A  A0D8               	btfss	status,0,c
  2107  00106C  D003               	goto	i2l1594
  2108  00106E                     i2u107_40:
  2109                           
  2110                           ;interrupts.c: 116: Reversing();
  2111  00106E  EC5D  F00D         	call	_Reversing	;wreg free
  2112  001072  D0E5               	goto	i2l58
  2113  001074                     i2l1594:
  2114                           
  2115                           ;interrupts.c: 117: else if(RotateCounter > 0)
  2116  001074  BE4A               	btfsc	_RotateCounter+1,7,c
  2117  001076  D020               	goto	i2l1606
  2118  001078  504A               	movf	_RotateCounter+1,w,c
  2119  00107A  E103               	bnz	i2u108_40
  2120  00107C  0449               	decf	_RotateCounter,w,c
  2121  00107E  A0D8               	btfss	status,0,c
  2122  001080  D01B               	goto	i2l1606
  2123  001082                     i2u108_40:
  2124                           
  2125                           ;interrupts.c: 118: {
  2126                           ;interrupts.c: 120: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2127  001082  BE3C               	btfsc	_sensorValue+5,7,c
  2128  001084  D006               	goto	i2l1598
  2129  001086  0E21               	movlw	33
  2130  001088  5C3B               	subwf	_sensorValue+4,w,c
  2131  00108A  0E03               	movlw	3
  2132  00108C  583C               	subwfb	_sensorValue+5,w,c
  2133  00108E  B0D8               	btfsc	status,0,c
  2134  001090  D008               	goto	i2l1600
  2135  001092                     i2l1598:
  2136  001092  BE3E               	btfsc	_sensorValue+7,7,c
  2137  001094  D00D               	goto	i2l1604
  2138  001096  0E21               	movlw	33
  2139  001098  5C3D               	subwf	_sensorValue+6,w,c
  2140  00109A  0E03               	movlw	3
  2141  00109C  583E               	subwfb	_sensorValue+7,w,c
  2142  00109E  A0D8               	btfss	status,0,c
  2143  0010A0  D007               	goto	i2l1604
  2144  0010A2                     i2l1600:
  2145                           
  2146                           ;interrupts.c: 121: ReverseCounter = 15;
  2147  0010A2  0E00               	movlw	0
  2148  0010A4  6E48               	movwf	_ReverseCounter+1,c
  2149  0010A6  0E0F               	movlw	15
  2150  0010A8  6E47               	movwf	_ReverseCounter,c
  2151                           
  2152                           ;interrupts.c: 122: Reversing();
  2153  0010AA  EC5D  F00D         	call	_Reversing	;wreg free
  2154                           
  2155                           ;interrupts.c: 123: } else {
  2156  0010AE  D0C7               	goto	i2l58
  2157  0010B0                     i2l1604:
  2158                           
  2159                           ;interrupts.c: 124: rotate(rotatingSide);
  2160  0010B0  5051               	movf	_rotatingSide,w,c
  2161  0010B2  ECB2  F00C         	call	_rotate
  2162                           
  2163                           ;interrupts.c: 125: }
  2164                           ;interrupts.c: 126: }
  2165  0010B6  D0C3               	goto	i2l58
  2166  0010B8                     i2l1606:
  2167                           
  2168                           ;interrupts.c: 130: else if (sensorValue[0] < 120 && algorithm == LEFTWALL)
  2169  0010B8  BE38               	btfsc	_sensorValue+1,7,c
  2170  0010BA  D006               	goto	i2l1608
  2171  0010BC  5038               	movf	_sensorValue+1,w,c
  2172  0010BE  E121               	bnz	i2l1626
  2173  0010C0  0E78               	movlw	120
  2174  0010C2  5C37               	subwf	_sensorValue,w,c
  2175  0010C4  B0D8               	btfsc	status,0,c
  2176  0010C6  D01D               	goto	i2l1626
  2177  0010C8                     i2l1608:
  2178  0010C8  504F               	movf	_algorithm,w,c
  2179  0010CA  A4D8               	btfss	status,2,c
  2180  0010CC  D01A               	goto	i2l1626
  2181                           
  2182                           ;interrupts.c: 131: {
  2183                           ;interrupts.c: 132: if(justTurned == 0) {
  2184  0010CE  5050               	movf	_justTurned,w,c
  2185  0010D0  A4D8               	btfss	status,2,c
  2186  0010D2  D004               	goto	i2l1614
  2187                           
  2188                           ;interrupts.c: 133: ForwardCounter = 440;
  2189  0010D4  0E01               	movlw	1
  2190  0010D6  6E40               	movwf	_ForwardCounter+1,c
  2191  0010D8  0EB8               	movlw	184
  2192  0010DA  D003               	goto	L6
  2193  0010DC                     i2l1614:
  2194                           
  2195                           ;interrupts.c: 135: ForwardCounter = 400;
  2196  0010DC  0E01               	movlw	1
  2197  0010DE  6E40               	movwf	_ForwardCounter+1,c
  2198  0010E0  0E90               	movlw	144
  2199  0010E2                     L6:
  2200  0010E2  6E3F               	movwf	_ForwardCounter,c
  2201  0010E4  D000               	goto	i2l1616
  2202  0010E6                     i2l1616:
  2203                           
  2204                           ;interrupts.c: 136: }
  2205                           ;interrupts.c: 137: forward();
  2206  0010E6  EC4F  F00D         	call	_forward	;wreg free
  2207                           
  2208                           ;interrupts.c: 138: RotateCounter = 167;
  2209  0010EA  0E00               	movlw	0
  2210  0010EC  6E4A               	movwf	_RotateCounter+1,c
  2211  0010EE  0EA7               	movlw	167
  2212  0010F0  6E49               	movwf	_RotateCounter,c
  2213                           
  2214                           ;interrupts.c: 139: rotatingSide = LEFT;
  2215  0010F2  0E00               	movlw	0
  2216  0010F4  6E51               	movwf	_rotatingSide,c
  2217  0010F6  D095               	goto	i2l1674
  2218  0010F8                     i2l1624:
  2219                           
  2220                           ;interrupts.c: 141: TurnRight= 200;
  2221  0010F8  0E00               	movlw	0
  2222  0010FA  6E53               	movwf	_TurnRight+1,c
  2223  0010FC  0EC8               	movlw	200
  2224  0010FE  6E52               	movwf	_TurnRight,c
  2225                           
  2226                           ;interrupts.c: 144: }
  2227  001100  D09E               	goto	i2l58
  2228  001102                     i2l1626:
  2229                           
  2230                           ;interrupts.c: 147: else if (sensorValue[1] < 130
  2231                           ;interrupts.c: 148: && sensorValue[0] > 120 && algorithm == LEFTWALL)
  2232  001102  BE3A               	btfsc	_sensorValue+3,7,c
  2233  001104  D006               	goto	i2l1628
  2234  001106  503A               	movf	_sensorValue+3,w,c
  2235  001108  E122               	bnz	i2l1642
  2236  00110A  0E82               	movlw	130
  2237  00110C  5C39               	subwf	_sensorValue+2,w,c
  2238  00110E  B0D8               	btfsc	status,0,c
  2239  001110  D01E               	goto	i2l1642
  2240  001112                     i2l1628:
  2241  001112  BE38               	btfsc	_sensorValue+1,7,c
  2242  001114  D01C               	goto	i2l1642
  2243  001116  5038               	movf	_sensorValue+1,w,c
  2244  001118  E104               	bnz	i2u115_40
  2245  00111A  0E79               	movlw	121
  2246  00111C  5C37               	subwf	_sensorValue,w,c
  2247  00111E  A0D8               	btfss	status,0,c
  2248  001120  D016               	goto	i2l1642
  2249  001122                     i2u115_40:
  2250  001122  504F               	movf	_algorithm,w,c
  2251  001124  A4D8               	btfss	status,2,c
  2252  001126  D013               	goto	i2l1642
  2253                           
  2254                           ;interrupts.c: 149: {
  2255                           ;interrupts.c: 150: TurnRight = sensorValue[1];
  2256  001128  C039  F052         	movff	_sensorValue+2,_TurnRight
  2257  00112C  C03A  F053         	movff	_sensorValue+3,_TurnRight+1
  2258                           
  2259                           ;interrupts.c: 151: if(justTurned == 0) {
  2260  001130  5050               	movf	_justTurned,w,c
  2261  001132  A4D8               	btfss	status,2,c
  2262  001134  D004               	goto	i2l1638
  2263                           
  2264                           ;interrupts.c: 152: ForwardCounter = 440;
  2265  001136  0E01               	movlw	1
  2266  001138  6E40               	movwf	_ForwardCounter+1,c
  2267  00113A  0EB8               	movlw	184
  2268  00113C  D003               	goto	L7
  2269  00113E                     i2l1638:
  2270                           
  2271                           ;interrupts.c: 154: ForwardCounter = 400;
  2272  00113E  0E01               	movlw	1
  2273  001140  6E40               	movwf	_ForwardCounter+1,c
  2274  001142  0E90               	movlw	144
  2275  001144                     L7:
  2276  001144  6E3F               	movwf	_ForwardCounter,c
  2277  001146  D000               	goto	i2l1640
  2278  001148                     i2l1640:
  2279                           
  2280                           ;interrupts.c: 155: }
  2281                           ;interrupts.c: 156: forward();
  2282  001148  EC4F  F00D         	call	_forward	;wreg free
  2283                           
  2284                           ;interrupts.c: 160: }
  2285  00114C  D078               	goto	i2l58
  2286  00114E                     i2l1642:
  2287                           
  2288                           ;interrupts.c: 161: else if (TurnRight < 130 && sensorValue[3] > 300) {
  2289  00114E  BE53               	btfsc	_TurnRight+1,7,c
  2290  001150  D006               	goto	i2l1644
  2291  001152  5053               	movf	_TurnRight+1,w,c
  2292  001154  E114               	bnz	i2l1648
  2293  001156  0E82               	movlw	130
  2294  001158  5C52               	subwf	_TurnRight,w,c
  2295  00115A  B0D8               	btfsc	status,0,c
  2296  00115C  D010               	goto	i2l1648
  2297  00115E                     i2l1644:
  2298  00115E  BE3E               	btfsc	_sensorValue+7,7,c
  2299  001160  D00E               	goto	i2l1648
  2300  001162  0E2D               	movlw	45
  2301  001164  5C3D               	subwf	_sensorValue+6,w,c
  2302  001166  0E01               	movlw	1
  2303  001168  583E               	subwfb	_sensorValue+7,w,c
  2304  00116A  A0D8               	btfss	status,0,c
  2305  00116C  D008               	goto	i2l1648
  2306                           
  2307                           ;interrupts.c: 162: RotateCounter = 167;
  2308  00116E  0E00               	movlw	0
  2309  001170  6E4A               	movwf	_RotateCounter+1,c
  2310  001172  0EA7               	movlw	167
  2311  001174  6E49               	movwf	_RotateCounter,c
  2312                           
  2313                           ;interrupts.c: 163: rotatingSide = RIGHT;
  2314  001176  0E01               	movlw	1
  2315  001178  6E51               	movwf	_rotatingSide,c
  2316                           
  2317                           ;interrupts.c: 164: justTurned = 1;
  2318  00117A  0E01               	movlw	1
  2319  00117C  D023               	goto	L8
  2320  00117E                     i2l1648:
  2321                           
  2322                           ;interrupts.c: 168: else if ((sensorValue[0] > 50 && sensorValue[1] > 50 )
  2323                           ;interrupts.c: 169: && (sensorValue[2] < 150 && sensorValue[3] < 150))
  2324  00117E  BE38               	btfsc	_sensorValue+1,7,c
  2325  001180  D023               	goto	i2l1660
  2326  001182  5038               	movf	_sensorValue+1,w,c
  2327  001184  E104               	bnz	i2u120_40
  2328  001186  0E33               	movlw	51
  2329  001188  5C37               	subwf	_sensorValue,w,c
  2330  00118A  A0D8               	btfss	status,0,c
  2331  00118C  D01D               	goto	i2l1660
  2332  00118E                     i2u120_40:
  2333  00118E  BE3A               	btfsc	_sensorValue+3,7,c
  2334  001190  D01B               	goto	i2l1660
  2335  001192  503A               	movf	_sensorValue+3,w,c
  2336  001194  E104               	bnz	i2u121_40
  2337  001196  0E33               	movlw	51
  2338  001198  5C39               	subwf	_sensorValue+2,w,c
  2339  00119A  A0D8               	btfss	status,0,c
  2340  00119C  D015               	goto	i2l1660
  2341  00119E                     i2u121_40:
  2342  00119E  BE3C               	btfsc	_sensorValue+5,7,c
  2343  0011A0  D006               	goto	i2l1654
  2344  0011A2  503C               	movf	_sensorValue+5,w,c
  2345  0011A4  E111               	bnz	i2l1660
  2346  0011A6  0E96               	movlw	150
  2347  0011A8  5C3B               	subwf	_sensorValue+4,w,c
  2348  0011AA  B0D8               	btfsc	status,0,c
  2349  0011AC  D00D               	goto	i2l1660
  2350  0011AE                     i2l1654:
  2351  0011AE  BE3E               	btfsc	_sensorValue+7,7,c
  2352  0011B0  D006               	goto	i2l1656
  2353  0011B2  503E               	movf	_sensorValue+7,w,c
  2354  0011B4  E109               	bnz	i2l1660
  2355  0011B6  0E96               	movlw	150
  2356  0011B8  5C3D               	subwf	_sensorValue+6,w,c
  2357  0011BA  B0D8               	btfsc	status,0,c
  2358  0011BC  D005               	goto	i2l1660
  2359  0011BE                     i2l1656:
  2360                           
  2361                           ;interrupts.c: 170: {
  2362                           ;interrupts.c: 171: KController();
  2363  0011BE  ECDC  F00B         	call	_KController	;wreg free
  2364                           
  2365                           ;interrupts.c: 172: justTurned = 0;
  2366  0011C2  0E00               	movlw	0
  2367  0011C4                     L8:
  2368  0011C4  6E50               	movwf	_justTurned,c
  2369                           
  2370                           ;interrupts.c: 173: }
  2371  0011C6  D03B               	goto	i2l58
  2372  0011C8                     i2l1660:
  2373                           
  2374                           ;interrupts.c: 175: else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2375                           ;interrupts.c: 176: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2376  0011C8  BE38               	btfsc	_sensorValue+1,7,c
  2377  0011CA  D02E               	goto	i2l1678
  2378  0011CC  5038               	movf	_sensorValue+1,w,c
  2379  0011CE  E104               	bnz	i2u124_40
  2380  0011D0  0E5B               	movlw	91
  2381  0011D2  5C37               	subwf	_sensorValue,w,c
  2382  0011D4  A0D8               	btfss	status,0,c
  2383  0011D6  D028               	goto	i2l1678
  2384  0011D8                     i2u124_40:
  2385  0011D8  BE3A               	btfsc	_sensorValue+3,7,c
  2386  0011DA  D026               	goto	i2l1678
  2387  0011DC  503A               	movf	_sensorValue+3,w,c
  2388  0011DE  E104               	bnz	i2u125_40
  2389  0011E0  0E5B               	movlw	91
  2390  0011E2  5C39               	subwf	_sensorValue+2,w,c
  2391  0011E4  A0D8               	btfss	status,0,c
  2392  0011E6  D020               	goto	i2l1678
  2393  0011E8                     i2u125_40:
  2394  0011E8  BE3C               	btfsc	_sensorValue+5,7,c
  2395  0011EA  D01E               	goto	i2l1678
  2396  0011EC  0EA5               	movlw	165
  2397  0011EE  5C3B               	subwf	_sensorValue+4,w,c
  2398  0011F0  0E01               	movlw	1
  2399  0011F2  583C               	subwfb	_sensorValue+5,w,c
  2400  0011F4  B0D8               	btfsc	status,0,c
  2401  0011F6  BE3E               	btfsc	_sensorValue+7,7,c
  2402  0011F8  D017               	goto	i2l1678
  2403  0011FA  0EA5               	movlw	165
  2404  0011FC  5C3D               	subwf	_sensorValue+6,w,c
  2405  0011FE  0E01               	movlw	1
  2406  001200  583E               	subwfb	_sensorValue+7,w,c
  2407  001202  A0D8               	btfss	status,0,c
  2408  001204  D011               	goto	i2l1678
  2409  001206  BE4A               	btfsc	_RotateCounter+1,7,c
  2410  001208  D005               	goto	i2l1670
  2411  00120A  504A               	movf	_RotateCounter+1,w,c
  2412  00120C  E10D               	bnz	i2l1678
  2413  00120E  0449               	decf	_RotateCounter,w,c
  2414  001210  B0D8               	btfsc	status,0,c
  2415  001212  D00A               	goto	i2l1678
  2416  001214                     i2l1670:
  2417                           
  2418                           ;interrupts.c: 177: {
  2419                           ;interrupts.c: 178: RotateCounter = 167*2;
  2420  001214  0E01               	movlw	1
  2421  001216  6E4A               	movwf	_RotateCounter+1,c
  2422  001218  0E4E               	movlw	78
  2423  00121A  6E49               	movwf	_RotateCounter,c
  2424                           
  2425                           ;interrupts.c: 179: rotate(rotatingSide);
  2426  00121C  5051               	movf	_rotatingSide,w,c
  2427  00121E  ECB2  F00C         	call	_rotate
  2428  001222                     i2l1674:
  2429                           
  2430                           ;interrupts.c: 180: justTurned = 1;
  2431  001222  0E01               	movlw	1
  2432  001224  6E50               	movwf	_justTurned,c
  2433  001226  D768               	goto	i2l1624
  2434  001228                     i2l1678:
  2435                           
  2436                           ;interrupts.c: 209: else {
  2437                           ;interrupts.c: 210: motorCounterUpdate(RIGHT,0);
  2438  001228  0E00               	movlw	0
  2439  00122A  6E12               	movwf	motorCounterUpdate@reverse,c
  2440  00122C  0E01               	movlw	1
  2441  00122E  EC62  F00B         	call	_motorCounterUpdate
  2442                           
  2443                           ;interrupts.c: 211: motorCounterUpdate(LEFT,0);
  2444  001232  0E00               	movlw	0
  2445  001234  6E12               	movwf	motorCounterUpdate@reverse,c
  2446  001236  0E00               	movlw	0
  2447  001238  EC62  F00B         	call	_motorCounterUpdate
  2448  00123C  D000               	goto	i2l58
  2449  00123E                     i2l58:
  2450                           
  2451                           ;interrupts.c: 212: }
  2452                           ;interrupts.c: 213: moveMouse(merge(LMotorCounter,RMotorCounter));
  2453  00123E  C04E  F012         	movff	_RMotorCounter,merge@right
  2454  001242  504D               	movf	_LMotorCounter,w,c
  2455  001244  EC82  F00D         	call	_merge
  2456  001248  EC8F  F00D         	call	_moveMouse
  2457                           
  2458                           ;interrupts.c: 214: MotorDelayCounter = 0;
  2459  00124C  0E00               	movlw	0
  2460  00124E  6E44               	movwf	_MotorDelayCounter+1,c
  2461  001250  0E00               	movlw	0
  2462  001252  6E43               	movwf	_MotorDelayCounter,c
  2463  001254  D000               	goto	i2l1682
  2464  001256                     i2l1682:
  2465                           
  2466                           ;interrupts.c: 216: }
  2467                           ;interrupts.c: 218: MotorDelayCounter++;
  2468  001256  4A43               	infsnz	_MotorDelayCounter,f,c
  2469  001258  2A44               	incf	_MotorDelayCounter+1,f,c
  2470                           
  2471                           ;interrupts.c: 219: INTCONbits.TMR0IF = 0;
  2472  00125A  94F2               	bcf	intcon,2,c	;volatile
  2473  00125C  D000               	goto	i2l81
  2474  00125E                     i2l81:
  2475  00125E  C027  FFF5         	movff	??_high_isr+13,tablat
  2476  001262  C026  FFF8         	movff	??_high_isr+12,tblptru
  2477  001266  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2478  00126A  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2479  00126E  C023  FFF4         	movff	??_high_isr+9,prodh
  2480  001272  C022  FFF3         	movff	??_high_isr+8,prodl
  2481  001276  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2482  00127A  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2483  00127E  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2484  001282  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2485  001286  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2486  00128A  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2487  00128E  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2488  001292  C01A  FFFA         	movff	??_high_isr,pclath
  2489  001296  0011               	retfie		f
  2490  001298                     __end_of_high_isr:
  2491                           	opt stack 0
  2492                           pclatu	equ	0xFFB
  2493                           pclath	equ	0xFFA
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           intcon	equ	0xFF2
  2501                           intcon2	equ	0xFF1
  2502                           postinc0	equ	0xFEE
  2503                           fsr0h	equ	0xFEA
  2504                           fsr0l	equ	0xFE9
  2505                           wreg	equ	0xFE8
  2506                           fsr1h	equ	0xFE2
  2507                           fsr1l	equ	0xFE1
  2508                           bsr	equ	0xFE0
  2509                           postinc2	equ	0xFDE
  2510                           postdec2	equ	0xFDD
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _rotate *****************
  2516 ;; Defined at:
  2517 ;;		line 365 in file "interrupts.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  side            1    wreg     enum E4082
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  side            1   19[COMRAM] enum E4082
  2522 ;; Return value:  Size  Location     Type
  2523 ;;		None               void
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    1
  2538 ;; This function calls:
  2539 ;;		_motorCounterUpdate
  2540 ;; This function is called by:
  2541 ;;		_high_isr
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text13
  2546  001964                     __ptext13:
  2547                           	opt stack 0
  2548  001964                     _rotate:
  2549                           	opt stack 24
  2550                           
  2551                           ;incstack = 0
  2552                           ;rotate@side stored from wreg
  2553  001964  6E14               	movwf	rotate@side,c
  2554                           
  2555                           ;interrupts.c: 367: if (side == LEFT){
  2556  001966  5014               	movf	rotate@side,w,c
  2557  001968  A4D8               	btfss	status,2,c
  2558  00196A  D00B               	goto	i2l1486
  2559                           
  2560                           ;interrupts.c: 368: motorCounterUpdate(RIGHT,0);
  2561  00196C  0E00               	movlw	0
  2562  00196E  6E12               	movwf	motorCounterUpdate@reverse,c
  2563  001970  0E01               	movlw	1
  2564  001972  EC62  F00B         	call	_motorCounterUpdate
  2565                           
  2566                           ;interrupts.c: 369: motorCounterUpdate(LEFT,1);
  2567  001976  0E01               	movlw	1
  2568  001978  6E12               	movwf	motorCounterUpdate@reverse,c
  2569  00197A  0E00               	movlw	0
  2570  00197C  EC62  F00B         	call	_motorCounterUpdate
  2571                           
  2572                           ;interrupts.c: 370: } else {
  2573  001980  D00B               	goto	i2l1488
  2574  001982                     i2l1486:
  2575                           
  2576                           ;interrupts.c: 371: motorCounterUpdate(LEFT,0);
  2577  001982  0E00               	movlw	0
  2578  001984  6E12               	movwf	motorCounterUpdate@reverse,c
  2579  001986  0E00               	movlw	0
  2580  001988  EC62  F00B         	call	_motorCounterUpdate
  2581                           
  2582                           ;interrupts.c: 372: motorCounterUpdate(RIGHT,1);
  2583  00198C  0E01               	movlw	1
  2584  00198E  6E12               	movwf	motorCounterUpdate@reverse,c
  2585  001990  0E01               	movlw	1
  2586  001992  EC62  F00B         	call	_motorCounterUpdate
  2587  001996  D000               	goto	i2l1488
  2588  001998                     i2l1488:
  2589                           
  2590                           ;interrupts.c: 373: }
  2591                           ;interrupts.c: 374: RotateCounter--;
  2592  001998  0649               	decf	_RotateCounter,f,c
  2593  00199A  A0D8               	btfss	status,0,c
  2594  00199C  064A               	decf	_RotateCounter+1,f,c
  2595  00199E  0012               	return		;funcret
  2596  0019A0                     __end_of_rotate:
  2597                           	opt stack 0
  2598                           pclatu	equ	0xFFB
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           postinc0	equ	0xFEE
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           fsr1h	equ	0xFE2
  2613                           fsr1l	equ	0xFE1
  2614                           bsr	equ	0xFE0
  2615                           postinc2	equ	0xFDE
  2616                           postdec2	equ	0xFDD
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _forward *****************
  2622 ;; Defined at:
  2623 ;;		line 396 in file "interrupts.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;		None               void
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    1
  2644 ;; This function calls:
  2645 ;;		_motorCounterUpdate
  2646 ;; This function is called by:
  2647 ;;		_high_isr
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text14
  2652  001A9E                     __ptext14:
  2653                           	opt stack 0
  2654  001A9E                     _forward:
  2655                           	opt stack 24
  2656                           
  2657                           ;interrupts.c: 398: motorCounterUpdate(RIGHT,0);
  2658                           
  2659                           ;incstack = 0
  2660  001A9E  0E00               	movlw	0
  2661  001AA0  6E12               	movwf	motorCounterUpdate@reverse,c
  2662  001AA2  0E01               	movlw	1
  2663  001AA4  EC62  F00B         	call	_motorCounterUpdate
  2664                           
  2665                           ;interrupts.c: 399: motorCounterUpdate(LEFT,0);
  2666  001AA8  0E00               	movlw	0
  2667  001AAA  6E12               	movwf	motorCounterUpdate@reverse,c
  2668  001AAC  0E00               	movlw	0
  2669  001AAE  EC62  F00B         	call	_motorCounterUpdate
  2670                           
  2671                           ;interrupts.c: 400: ForwardCounter--;
  2672  001AB2  063F               	decf	_ForwardCounter,f,c
  2673  001AB4  A0D8               	btfss	status,0,c
  2674  001AB6  0640               	decf	_ForwardCounter+1,f,c
  2675  001AB8  0012               	return		;funcret
  2676  001ABA                     __end_of_forward:
  2677                           	opt stack 0
  2678                           pclatu	equ	0xFFB
  2679                           pclath	equ	0xFFA
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           prodh	equ	0xFF4
  2685                           prodl	equ	0xFF3
  2686                           intcon	equ	0xFF2
  2687                           intcon2	equ	0xFF1
  2688                           postinc0	equ	0xFEE
  2689                           fsr0h	equ	0xFEA
  2690                           fsr0l	equ	0xFE9
  2691                           wreg	equ	0xFE8
  2692                           fsr1h	equ	0xFE2
  2693                           fsr1l	equ	0xFE1
  2694                           bsr	equ	0xFE0
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _Reversing *****************
  2702 ;; Defined at:
  2703 ;;		line 389 in file "interrupts.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;		None               void
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;Total ram usage:        0 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    1
  2724 ;; This function calls:
  2725 ;;		_motorCounterUpdate
  2726 ;; This function is called by:
  2727 ;;		_high_isr
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text15
  2732  001ABA                     __ptext15:
  2733                           	opt stack 0
  2734  001ABA                     _Reversing:
  2735                           	opt stack 24
  2736                           
  2737                           ;interrupts.c: 391: motorCounterUpdate(RIGHT,1);
  2738                           
  2739                           ;incstack = 0
  2740  001ABA  0E01               	movlw	1
  2741  001ABC  6E12               	movwf	motorCounterUpdate@reverse,c
  2742  001ABE  0E01               	movlw	1
  2743  001AC0  EC62  F00B         	call	_motorCounterUpdate
  2744                           
  2745                           ;interrupts.c: 392: motorCounterUpdate(LEFT,1);
  2746  001AC4  0E01               	movlw	1
  2747  001AC6  6E12               	movwf	motorCounterUpdate@reverse,c
  2748  001AC8  0E00               	movlw	0
  2749  001ACA  EC62  F00B         	call	_motorCounterUpdate
  2750                           
  2751                           ;interrupts.c: 393: ReverseCounter--;
  2752  001ACE  0647               	decf	_ReverseCounter,f,c
  2753  001AD0  A0D8               	btfss	status,0,c
  2754  001AD2  0648               	decf	_ReverseCounter+1,f,c
  2755  001AD4  0012               	return		;funcret
  2756  001AD6                     __end_of_Reversing:
  2757                           	opt stack 0
  2758                           pclatu	equ	0xFFB
  2759                           pclath	equ	0xFFA
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           intcon2	equ	0xFF1
  2768                           postinc0	equ	0xFEE
  2769                           fsr0h	equ	0xFEA
  2770                           fsr0l	equ	0xFE9
  2771                           wreg	equ	0xFE8
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           bsr	equ	0xFE0
  2775                           postinc2	equ	0xFDE
  2776                           postdec2	equ	0xFDD
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _KController *****************
  2782 ;; Defined at:
  2783 ;;		line 330 in file "interrupts.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  diff            2   23[COMRAM] int 
  2788 ;;  correctTo       1   22[COMRAM] enum E4082
  2789 ;; Return value:  Size  Location     Type
  2790 ;;		None               void
  2791 ;; Registers used:
  2792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        5 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    1
  2805 ;; This function calls:
  2806 ;;		_ABS
  2807 ;;		_merge
  2808 ;;		_motorCounterUpdate
  2809 ;;		_moveMouse
  2810 ;; This function is called by:
  2811 ;;		_high_isr
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text16
  2816  0017B8                     __ptext16:
  2817                           	opt stack 0
  2818  0017B8                     _KController:
  2819                           	opt stack 24
  2820                           
  2821                           ;interrupts.c: 332: Side correctTo;
  2822                           ;interrupts.c: 333: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2823                           
  2824                           ;incstack = 0
  2825  0017B8  EE20  F039         	lfsr	2,_sensorValue+2
  2826  0017BC  CFDE F015          	movff	postinc2,??_KController
  2827  0017C0  CFDD F016          	movff	postdec2,??_KController+1
  2828  0017C4  1E15               	comf	??_KController,f,c
  2829  0017C6  1E16               	comf	??_KController+1,f,c
  2830  0017C8  4A15               	infsnz	??_KController,f,c
  2831  0017CA  2A16               	incf	??_KController+1,f,c
  2832  0017CC  5037               	movf	_sensorValue,w,c
  2833  0017CE  2415               	addwf	??_KController,w,c
  2834  0017D0  6E12               	movwf	ABS@x,c
  2835  0017D2  5038               	movf	_sensorValue+1,w,c
  2836  0017D4  2016               	addwfc	??_KController+1,w,c
  2837  0017D6  6E13               	movwf	ABS@x+1,c
  2838  0017D8  EC6B  F00D         	call	_ABS	;wreg free
  2839  0017DC  C012  F018         	movff	?_ABS,KController@diff
  2840  0017E0  C013  F019         	movff	?_ABS+1,KController@diff+1
  2841                           
  2842                           ;interrupts.c: 336: if(controllerSteps > 0)
  2843  0017E4  5054               	movf	_controllerSteps,w,c
  2844  0017E6  B4D8               	btfsc	status,2,c
  2845  0017E8  D00C               	goto	i2l1500
  2846                           
  2847                           ;interrupts.c: 337: {
  2848                           ;interrupts.c: 338: motorCounterUpdate(RIGHT,0);
  2849  0017EA  0E00               	movlw	0
  2850  0017EC  6E12               	movwf	motorCounterUpdate@reverse,c
  2851  0017EE  0E01               	movlw	1
  2852  0017F0  EC62  F00B         	call	_motorCounterUpdate
  2853                           
  2854                           ;interrupts.c: 339: motorCounterUpdate(LEFT,0);
  2855  0017F4  0E00               	movlw	0
  2856  0017F6  6E12               	movwf	motorCounterUpdate@reverse,c
  2857  0017F8  0E00               	movlw	0
  2858  0017FA  EC62  F00B         	call	_motorCounterUpdate
  2859                           
  2860                           ;interrupts.c: 340: controllerSteps--;
  2861  0017FE  0654               	decf	_controllerSteps,f,c
  2862                           
  2863                           ;interrupts.c: 341: return;
  2864  001800  D047               	goto	i2l136
  2865  001802                     i2l1500:
  2866                           
  2867                           ;interrupts.c: 342: }
  2868                           ;interrupts.c: 344: if(sensorValue[0] > sensorValue[1])
  2869  001802  5037               	movf	_sensorValue,w,c
  2870  001804  5C39               	subwf	_sensorValue+2,w,c
  2871  001806  503A               	movf	_sensorValue+3,w,c
  2872  001808  0A80               	xorlw	128
  2873  00180A  6E15               	movwf	??_KController& (0+255),c
  2874  00180C  5038               	movf	_sensorValue+1,w,c
  2875  00180E  0A80               	xorlw	128
  2876  001810  5815               	subwfb	??_KController& (0+255),w,c
  2877  001812  B0D8               	btfsc	status,0,c
  2878  001814  D00F               	goto	i2l1508
  2879                           
  2880                           ;interrupts.c: 345: {
  2881                           ;interrupts.c: 346: correctTo = LEFT;
  2882  001816  0E00               	movlw	0
  2883  001818  6E17               	movwf	KController@correctTo,c
  2884                           
  2885                           ;interrupts.c: 347: motorCounterUpdate(correctTo,0);
  2886  00181A  0E00               	movlw	0
  2887  00181C  6E12               	movwf	motorCounterUpdate@reverse,c
  2888  00181E  5017               	movf	KController@correctTo,w,c
  2889  001820  EC62  F00B         	call	_motorCounterUpdate
  2890                           
  2891                           ;interrupts.c: 348: moveMouse(merge(LMotorCounter,RMotorCounter));
  2892  001824  C04E  F012         	movff	_RMotorCounter,merge@right
  2893  001828  504D               	movf	_LMotorCounter,w,c
  2894  00182A  EC82  F00D         	call	_merge
  2895  00182E  EC8F  F00D         	call	_moveMouse
  2896                           
  2897                           ;interrupts.c: 349: }
  2898  001832  D00F               	goto	i2l1514
  2899  001834                     i2l1508:
  2900                           
  2901                           ;interrupts.c: 350: else
  2902                           ;interrupts.c: 351: {
  2903                           ;interrupts.c: 352: correctTo = RIGHT;
  2904  001834  0E01               	movlw	1
  2905  001836  6E17               	movwf	KController@correctTo,c
  2906                           
  2907                           ;interrupts.c: 353: motorCounterUpdate(correctTo,0);
  2908  001838  0E00               	movlw	0
  2909  00183A  6E12               	movwf	motorCounterUpdate@reverse,c
  2910  00183C  5017               	movf	KController@correctTo,w,c
  2911  00183E  EC62  F00B         	call	_motorCounterUpdate
  2912                           
  2913                           ;interrupts.c: 354: moveMouse(merge(LMotorCounter,RMotorCounter));
  2914  001842  C04E  F012         	movff	_RMotorCounter,merge@right
  2915  001846  504D               	movf	_LMotorCounter,w,c
  2916  001848  EC82  F00D         	call	_merge
  2917  00184C  EC8F  F00D         	call	_moveMouse
  2918  001850  D000               	goto	i2l1514
  2919  001852                     i2l1514:
  2920                           
  2921                           ;interrupts.c: 355: }
  2922                           ;interrupts.c: 357: if(diff > 150)
  2923  001852  BE19               	btfsc	KController@diff+1,7,c
  2924  001854  D008               	goto	i2l1518
  2925  001856  5019               	movf	KController@diff+1,w,c
  2926  001858  E104               	bnz	i2u93_40
  2927  00185A  0E97               	movlw	151
  2928  00185C  5C18               	subwf	KController@diff,w,c
  2929  00185E  A0D8               	btfss	status,0,c
  2930  001860  D002               	goto	i2l1518
  2931  001862                     i2u93_40:
  2932                           
  2933                           ;interrupts.c: 358: controllerSteps = 1;
  2934  001862  0E01               	movlw	1
  2935  001864  D013               	goto	L10
  2936  001866                     i2l1518:
  2937                           
  2938                           ;interrupts.c: 359: else if(diff <= 150 && diff > 20)
  2939  001866  BE19               	btfsc	KController@diff+1,7,c
  2940  001868  D006               	goto	i2l1520
  2941  00186A  5019               	movf	KController@diff+1,w,c
  2942  00186C  E10E               	bnz	i2l1524
  2943  00186E  0E97               	movlw	151
  2944  001870  5C18               	subwf	KController@diff,w,c
  2945  001872  B0D8               	btfsc	status,0,c
  2946  001874  D00A               	goto	i2l1524
  2947  001876                     i2l1520:
  2948  001876  BE19               	btfsc	KController@diff+1,7,c
  2949  001878  D008               	goto	i2l1524
  2950  00187A  5019               	movf	KController@diff+1,w,c
  2951  00187C  E104               	bnz	i2u95_40
  2952  00187E  0E15               	movlw	21
  2953  001880  5C18               	subwf	KController@diff,w,c
  2954  001882  A0D8               	btfss	status,0,c
  2955  001884  D002               	goto	i2l1524
  2956  001886                     i2u95_40:
  2957                           
  2958                           ;interrupts.c: 360: controllerSteps = 2;
  2959  001886  0E02               	movlw	2
  2960  001888  D001               	goto	L10
  2961  00188A                     i2l1524:
  2962                           
  2963                           ;interrupts.c: 361: else
  2964                           ;interrupts.c: 362: controllerSteps = 3;
  2965  00188A  0E03               	movlw	3
  2966  00188C                     L10:
  2967  00188C  6E54               	movwf	_controllerSteps,c
  2968  00188E  D000               	goto	i2l136
  2969  001890                     i2l136:
  2970  001890  0012               	return		;funcret
  2971  001892                     __end_of_KController:
  2972                           	opt stack 0
  2973                           pclatu	equ	0xFFB
  2974                           pclath	equ	0xFFA
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           postinc0	equ	0xFEE
  2984                           fsr0h	equ	0xFEA
  2985                           fsr0l	equ	0xFE9
  2986                           wreg	equ	0xFE8
  2987                           fsr1h	equ	0xFE2
  2988                           fsr1l	equ	0xFE1
  2989                           bsr	equ	0xFE0
  2990                           postinc2	equ	0xFDE
  2991                           postdec2	equ	0xFDD
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _moveMouse *****************
  2997 ;; Defined at:
  2998 ;;		line 317 in file "interrupts.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  action          1    wreg     unsigned char 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  action          1   17[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;		None               void
  3005 ;; Registers used:
  3006 ;;		wreg
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;Total ram usage:        1 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_high_isr
  3022 ;;		_KController
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text17
  3027  001B1E                     __ptext17:
  3028                           	opt stack 0
  3029  001B1E                     _moveMouse:
  3030                           	opt stack 25
  3031                           
  3032                           ;incstack = 0
  3033                           ;moveMouse@action stored from wreg
  3034  001B1E  6E12               	movwf	moveMouse@action,c
  3035                           
  3036                           ;interrupts.c: 319: LATC = action;
  3037  001B20  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  3038  001B24  0012               	return		;funcret
  3039  001B26                     __end_of_moveMouse:
  3040                           	opt stack 0
  3041                           pclatu	equ	0xFFB
  3042                           pclath	equ	0xFFA
  3043                           tblptru	equ	0xFF8
  3044                           tblptrh	equ	0xFF7
  3045                           tblptrl	equ	0xFF6
  3046                           tablat	equ	0xFF5
  3047                           prodh	equ	0xFF4
  3048                           prodl	equ	0xFF3
  3049                           intcon	equ	0xFF2
  3050                           intcon2	equ	0xFF1
  3051                           postinc0	equ	0xFEE
  3052                           fsr0h	equ	0xFEA
  3053                           fsr0l	equ	0xFE9
  3054                           wreg	equ	0xFE8
  3055                           fsr1h	equ	0xFE2
  3056                           fsr1l	equ	0xFE1
  3057                           bsr	equ	0xFE0
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _motorCounterUpdate *****************
  3065 ;; Defined at:
  3066 ;;		line 265 in file "interrupts.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  side            1    wreg     enum E4082
  3069 ;;  reverse         1   17[COMRAM] unsigned char 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  side            1   18[COMRAM] enum E4082
  3072 ;; Return value:  Size  Location     Type
  3073 ;;		None               void
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3081 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;Total ram usage:        2 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_high_isr
  3091 ;;		_KController
  3092 ;;		_rotate
  3093 ;;		_Reversing
  3094 ;;		_forward
  3095 ;;		_smoothTurn
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text18
  3100  0016C4                     __ptext18:
  3101                           	opt stack 0
  3102  0016C4                     _motorCounterUpdate:
  3103                           	opt stack 24
  3104                           
  3105                           ;incstack = 0
  3106                           ;motorCounterUpdate@side stored from wreg
  3107  0016C4  6E13               	movwf	motorCounterUpdate@side,c
  3108                           
  3109                           ;interrupts.c: 267: if(side == LEFT && reverse == 1)
  3110  0016C6  5013               	movf	motorCounterUpdate@side,w,c
  3111  0016C8  A4D8               	btfss	status,2,c
  3112  0016CA  D01B               	goto	i2l1370
  3113  0016CC  0412               	decf	motorCounterUpdate@reverse,w,c
  3114  0016CE  B4D8               	btfsc	status,2,c
  3115  0016D0  D00B               	goto	i2l1368
  3116  0016D2  D017               	goto	i2l1370
  3117                           
  3118                           ;interrupts.c: 268: {
  3119                           ;interrupts.c: 269: switch(LMotorCounter)
  3120  0016D4  D009               	goto	i2l1368
  3121  0016D6                     i2l1358:
  3122  0016D6  0E02               	movlw	2
  3123  0016D8  D004               	goto	L13
  3124  0016DA                     i2l1360:
  3125  0016DA  0E04               	movlw	4
  3126  0016DC  D002               	goto	L13
  3127                           
  3128                           ;interrupts.c: 273: case 0b00000100: LMotorCounter = 0b00001000; break;
  3129  0016DE  D03E               	goto	i2l1402
  3130                           
  3131                           ;interrupts.c: 274: case 0b00001000: LMotorCounter = 0b00000001; break;
  3132  0016E0  D039               	goto	i2l1396
  3133  0016E2                     L13:
  3134  0016E2  6E4D               	movwf	_LMotorCounter,c
  3135  0016E4  D068               	goto	i2l122
  3136                           
  3137                           ;interrupts.c: 275: default: LMotorCounter = 0b00000001;
  3138  0016E6  D036               	goto	i2l1396
  3139  0016E8                     i2l1368:
  3140  0016E8  504D               	movf	_LMotorCounter,w,c
  3141                           
  3142                           ; Switch size 1, requested type "space"
  3143                           ; Number of cases is 4, Range of values is 1 to 8
  3144                           ; switch strategies available:
  3145                           ; Name         Instructions Cycles
  3146                           ; simple_byte           13     7 (average)
  3147                           ;	Chosen strategy is simple_byte
  3148  0016EA  0A01               	xorlw	1	; case 1
  3149  0016EC  B4D8               	btfsc	status,2,c
  3150  0016EE  D7F3               	goto	i2l1358
  3151  0016F0  0A03               	xorlw	3	; case 2
  3152  0016F2  B4D8               	btfsc	status,2,c
  3153  0016F4  D7F2               	goto	i2l1360
  3154  0016F6  0A06               	xorlw	6	; case 4
  3155  0016F8  B4D8               	btfsc	status,2,c
  3156  0016FA  D030               	goto	i2l1402
  3157  0016FC  0A0C               	xorlw	12	; case 8
  3158  0016FE  D02A               	goto	i2l1396
  3159                           
  3160                           ;interrupts.c: 277: } else if(side == RIGHT && reverse == 1)
  3161  001700  D05A               	goto	i2l122
  3162  001702                     i2l1370:
  3163  001702  0413               	decf	motorCounterUpdate@side,w,c
  3164  001704  A4D8               	btfss	status,2,c
  3165  001706  D01D               	goto	i2l1388
  3166  001708  0412               	decf	motorCounterUpdate@reverse,w,c
  3167  00170A  B4D8               	btfsc	status,2,c
  3168  00170C  D00B               	goto	i2l1386
  3169  00170E  D019               	goto	i2l1388
  3170                           
  3171                           ;interrupts.c: 278: {
  3172                           ;interrupts.c: 279: switch(RMotorCounter)
  3173  001710  D009               	goto	i2l1386
  3174  001712                     i2l1376:
  3175  001712  0E08               	movlw	8
  3176  001714  D040               	goto	L21
  3177  001716                     i2l1378:
  3178  001716  0E01               	movlw	1
  3179  001718  D03E               	goto	L21
  3180  00171A                     i2l1380:
  3181  00171A  0E02               	movlw	2
  3182  00171C  D03C               	goto	L21
  3183  00171E                     i2l1382:
  3184  00171E  0E04               	movlw	4
  3185  001720  D03A               	goto	L21
  3186                           
  3187                           ;interrupts.c: 285: default: RMotorCounter = 0b00001000;
  3188  001722  D7F7               	goto	i2l1376
  3189  001724                     i2l1386:
  3190  001724  504E               	movf	_RMotorCounter,w,c
  3191                           
  3192                           ; Switch size 1, requested type "space"
  3193                           ; Number of cases is 4, Range of values is 1 to 8
  3194                           ; switch strategies available:
  3195                           ; Name         Instructions Cycles
  3196                           ; simple_byte           13     7 (average)
  3197                           ;	Chosen strategy is simple_byte
  3198  001726  0A01               	xorlw	1	; case 1
  3199  001728  B4D8               	btfsc	status,2,c
  3200  00172A  D7F3               	goto	i2l1376
  3201  00172C  0A03               	xorlw	3	; case 2
  3202  00172E  B4D8               	btfsc	status,2,c
  3203  001730  D7F2               	goto	i2l1378
  3204  001732  0A06               	xorlw	6	; case 4
  3205  001734  B4D8               	btfsc	status,2,c
  3206  001736  D7F1               	goto	i2l1380
  3207  001738  0A0C               	xorlw	12	; case 8
  3208  00173A  B4D8               	btfsc	status,2,c
  3209  00173C  D7F0               	goto	i2l1382
  3210  00173E  D7E9               	goto	i2l1376
  3211                           
  3212                           ;interrupts.c: 287: } else if(side == LEFT && reverse == 0)
  3213  001740  D03A               	goto	i2l122
  3214  001742                     i2l1388:
  3215  001742  5013               	movf	motorCounterUpdate@side,w,c
  3216  001744  A4D8               	btfss	status,2,c
  3217  001746  D01B               	goto	i2l1406
  3218  001748  5012               	movf	motorCounterUpdate@reverse,w,c
  3219  00174A  B4D8               	btfsc	status,2,c
  3220  00174C  D009               	goto	i2l1404
  3221  00174E  D017               	goto	i2l1406
  3222                           
  3223                           ;interrupts.c: 288: {
  3224                           ;interrupts.c: 289: switch(LMotorCounter)
  3225  001750  D007               	goto	i2l1404
  3226                           
  3227                           ;interrupts.c: 290: {
  3228                           ;interrupts.c: 291: case 0b00000001: LMotorCounter = 0b00001000; break;
  3229  001752  D004               	goto	i2l1402
  3230  001754                     i2l1396:
  3231  001754  0E01               	movlw	1
  3232  001756  D7C5               	goto	L13
  3233                           
  3234                           ;interrupts.c: 293: case 0b00000100: LMotorCounter = 0b00000010; break;
  3235  001758  D7BE               	goto	i2l1358
  3236                           
  3237                           ;interrupts.c: 294: case 0b00001000: LMotorCounter = 0b00000100; break;
  3238  00175A  D7BF               	goto	i2l1360
  3239  00175C                     i2l1402:
  3240  00175C  0E08               	movlw	8
  3241  00175E  D7C1               	goto	L13
  3242  001760                     i2l1404:
  3243  001760  504D               	movf	_LMotorCounter,w,c
  3244                           
  3245                           ; Switch size 1, requested type "space"
  3246                           ; Number of cases is 4, Range of values is 1 to 8
  3247                           ; switch strategies available:
  3248                           ; Name         Instructions Cycles
  3249                           ; simple_byte           13     7 (average)
  3250                           ;	Chosen strategy is simple_byte
  3251  001762  0A01               	xorlw	1	; case 1
  3252  001764  B4D8               	btfsc	status,2,c
  3253  001766  D7FA               	goto	i2l1402
  3254  001768  0A03               	xorlw	3	; case 2
  3255  00176A  B4D8               	btfsc	status,2,c
  3256  00176C  D7F3               	goto	i2l1396
  3257  00176E  0A06               	xorlw	6	; case 4
  3258  001770  B4D8               	btfsc	status,2,c
  3259  001772  D7B1               	goto	i2l1358
  3260  001774  0A0C               	xorlw	12	; case 8
  3261  001776  B4D8               	btfsc	status,2,c
  3262  001778  D7B0               	goto	i2l1360
  3263  00177A  D7F0               	goto	i2l1402
  3264                           
  3265                           ;interrupts.c: 297: } else if(side == RIGHT && reverse == 0)
  3266  00177C  D01C               	goto	i2l122
  3267  00177E                     i2l1406:
  3268  00177E  0413               	decf	motorCounterUpdate@side,w,c
  3269  001780  A4D8               	btfss	status,2,c
  3270  001782  D019               	goto	i2l122
  3271  001784  5012               	movf	motorCounterUpdate@reverse,w,c
  3272  001786  B4D8               	btfsc	status,2,c
  3273  001788  D009               	goto	i2l1422
  3274  00178A  D015               	goto	i2l122
  3275                           
  3276                           ;interrupts.c: 298: {
  3277                           ;interrupts.c: 299: switch(RMotorCounter)
  3278  00178C  D007               	goto	i2l1422
  3279                           
  3280                           ;interrupts.c: 300: {
  3281                           ;interrupts.c: 301: case 0b00000001: RMotorCounter = 0b00000010; break;
  3282  00178E  D7C5               	goto	i2l1380
  3283                           
  3284                           ;interrupts.c: 302: case 0b00000010: RMotorCounter = 0b00000100; break;
  3285  001790  D7C6               	goto	i2l1382
  3286                           
  3287                           ;interrupts.c: 303: case 0b00000100: RMotorCounter = 0b00001000; break;
  3288  001792  D7BF               	goto	i2l1376
  3289                           
  3290                           ;interrupts.c: 304: case 0b00001000: RMotorCounter = 0b00000001; break;
  3291  001794  D7C0               	goto	i2l1378
  3292  001796                     L21:
  3293  001796  6E4E               	movwf	_RMotorCounter,c
  3294  001798  D00E               	goto	i2l122
  3295                           
  3296                           ;interrupts.c: 305: default: RMotorCounter = 0b00000001;
  3297  00179A  D7BD               	goto	i2l1378
  3298  00179C                     i2l1422:
  3299  00179C  504E               	movf	_RMotorCounter,w,c
  3300                           
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 4, Range of values is 1 to 8
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte           13     7 (average)
  3306                           ;	Chosen strategy is simple_byte
  3307  00179E  0A01               	xorlw	1	; case 1
  3308  0017A0  B4D8               	btfsc	status,2,c
  3309  0017A2  D7BB               	goto	i2l1380
  3310  0017A4  0A03               	xorlw	3	; case 2
  3311  0017A6  B4D8               	btfsc	status,2,c
  3312  0017A8  D7BA               	goto	i2l1382
  3313  0017AA  0A06               	xorlw	6	; case 4
  3314  0017AC  B4D8               	btfsc	status,2,c
  3315  0017AE  D7B1               	goto	i2l1376
  3316  0017B0  0A0C               	xorlw	12	; case 8
  3317  0017B2  D7B1               	goto	i2l1378
  3318  0017B4  D000               	goto	i2l122
  3319  0017B6                     i2l122:
  3320  0017B6  0012               	return		;funcret
  3321  0017B8                     __end_of_motorCounterUpdate:
  3322                           	opt stack 0
  3323                           pclatu	equ	0xFFB
  3324                           pclath	equ	0xFFA
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           intcon2	equ	0xFF1
  3333                           postinc0	equ	0xFEE
  3334                           fsr0h	equ	0xFEA
  3335                           fsr0l	equ	0xFE9
  3336                           wreg	equ	0xFE8
  3337                           fsr1h	equ	0xFE2
  3338                           fsr1l	equ	0xFE1
  3339                           bsr	equ	0xFE0
  3340                           postinc2	equ	0xFDE
  3341                           postdec2	equ	0xFDD
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _merge *****************
  3347 ;; Defined at:
  3348 ;;		line 310 in file "interrupts.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  left            1    wreg     unsigned char 
  3351 ;;  right           1   17[COMRAM] unsigned char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  left            1   18[COMRAM] unsigned char 
  3354 ;;  merged          1   19[COMRAM] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      unsigned char 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        3 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_high_isr
  3374 ;;		_KController
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text19
  3379  001B04                     __ptext19:
  3380                           	opt stack 0
  3381  001B04                     _merge:
  3382                           	opt stack 25
  3383                           
  3384                           ;incstack = 0
  3385                           ;merge@left stored from wreg
  3386  001B04  6E13               	movwf	merge@left,c
  3387                           
  3388                           ;interrupts.c: 312: unsigned char merged;
  3389                           ;interrupts.c: 313: merged = left + (right << 4);
  3390  001B06  3812               	swapf	merge@right,w,c
  3391  001B08  0BF0               	andlw	240
  3392  001B0A  2413               	addwf	merge@left,w,c
  3393  001B0C  6E14               	movwf	merge@merged,c
  3394                           
  3395                           ;interrupts.c: 314: return merged;
  3396  001B0E  5014               	movf	merge@merged,w,c
  3397  001B10  D000               	goto	i2l125
  3398  001B12                     i2l125:
  3399  001B12  0012               	return		;funcret
  3400  001B14                     __end_of_merge:
  3401                           	opt stack 0
  3402                           pclatu	equ	0xFFB
  3403                           pclath	equ	0xFFA
  3404                           tblptru	equ	0xFF8
  3405                           tblptrh	equ	0xFF7
  3406                           tblptrl	equ	0xFF6
  3407                           tablat	equ	0xFF5
  3408                           prodh	equ	0xFF4
  3409                           prodl	equ	0xFF3
  3410                           intcon	equ	0xFF2
  3411                           intcon2	equ	0xFF1
  3412                           postinc0	equ	0xFEE
  3413                           fsr0h	equ	0xFEA
  3414                           fsr0l	equ	0xFE9
  3415                           wreg	equ	0xFE8
  3416                           fsr1h	equ	0xFE2
  3417                           fsr1l	equ	0xFE1
  3418                           bsr	equ	0xFE0
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _ABS *****************
  3426 ;; Defined at:
  3427 ;;		line 323 in file "interrupts.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  x               2   17[COMRAM] int 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  2   17[COMRAM] int 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;Total ram usage:        2 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_KController
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text20
  3455  001AD6                     __ptext20:
  3456                           	opt stack 0
  3457  001AD6                     _ABS:
  3458                           	opt stack 24
  3459                           
  3460                           ;interrupts.c: 325: if(x<0) x = -x;
  3461                           
  3462                           ;incstack = 0
  3463  001AD6  AE13               	btfss	ABS@x+1,7,c
  3464  001AD8  D005               	goto	i2l1434
  3465  001ADA  6C12               	negf	ABS@x,c
  3466  001ADC  1E13               	comf	ABS@x+1,f,c
  3467  001ADE  B0D8               	btfsc	status,0,c
  3468  001AE0  2A13               	incf	ABS@x+1,f,c
  3469  001AE2  D000               	goto	i2l1434
  3470  001AE4                     i2l1434:
  3471                           
  3472                           ;interrupts.c: 326: return x;
  3473  001AE4  C012  F012         	movff	ABS@x,?_ABS
  3474  001AE8  C013  F013         	movff	ABS@x+1,?_ABS+1
  3475  001AEC  D000               	goto	i2l132
  3476  001AEE                     i2l132:
  3477  001AEE  0012               	return		;funcret
  3478  001AF0                     __end_of_ABS:
  3479                           	opt stack 0
  3480                           pclatu	equ	0xFFB
  3481                           pclath	equ	0xFFA
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           intcon2	equ	0xFF1
  3490                           postinc0	equ	0xFEE
  3491                           fsr0h	equ	0xFEA
  3492                           fsr0l	equ	0xFE9
  3493                           wreg	equ	0xFE8
  3494                           fsr1h	equ	0xFE2
  3495                           fsr1l	equ	0xFE1
  3496                           bsr	equ	0xFE0
  3497                           postinc2	equ	0xFDE
  3498                           postdec2	equ	0xFDD
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           pclatu	equ	0xFFB
  3503                           pclath	equ	0xFFA
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           intcon2	equ	0xFF1
  3512                           postinc0	equ	0xFEE
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           bsr	equ	0xFE0
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525                           	psect	rparam
  3526  0000                     pclatu	equ	0xFFB
  3527                           pclath	equ	0xFFA
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           prodh	equ	0xFF4
  3533                           prodl	equ	0xFF3
  3534                           intcon	equ	0xFF2
  3535                           intcon2	equ	0xFF1
  3536                           postinc0	equ	0xFEE
  3537                           fsr0h	equ	0xFEA
  3538                           fsr0l	equ	0xFE9
  3539                           wreg	equ	0xFE8
  3540                           fsr1h	equ	0xFE2
  3541                           fsr1l	equ	0xFE1
  3542                           bsr	equ	0xFE0
  3543                           postinc2	equ	0xFDE
  3544                           postdec2	equ	0xFDD
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        3
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     54      84
    BANK0           128    100     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             10 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5857
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1498
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     64      64       5       78.1%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     36      54       1       66.1%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8       6        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 24 22:34:21 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l235 19FA                           l244 1A88                           l280 1A7E  
                         l249 1A9C                           l265 1524                           l258 14C2  
                         l275 1A4E                           l283 1A2E                           l276 1A56  
                         l279 1A76                           _ABS 1AD6                           l476 1926  
                __CFG_CPB$OFF 000000                           _MAX 1A58                           _MIN 1A30  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A9E                  _rotatingSide 0051  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1030 1A96                          l1440 19E6  
                        l1740 18DA                          l1732 18BA                          l1804 150C  
                        l1750 1900                          l1742 18E2                          l1726 18A8  
                        l1814 15CA                          l1822 16A0                          l1816 162A  
                        l1832 1AFA                          l1738 18D0                          l1754 190C  
                        l1818 168A                          l1826 16B6                          l1780 1434  
                        l1758 191C                          l1774 12E0                          l1784 144A  
                        l1768 12BC                          l1778 1340                          l1798 14E8  
                        u1400 12DE                          _LATC 000F8B                          u1440 14E6  
                        u1450 150A                          u1390 12BA                          u1527 19EC  
                        u1475 1532                          i2l81 125E                          i2l58 123E  
                        _main 1AF0                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
 sensorComputation@sensorTemp 0033                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
             __end_of_InitApp 1964                         ??_ABS 0014                         ??_MAX 0032  
                       ??_MIN 0032    __size_of_sensorComputation 022C                         ?_main 0001  
             __end_of___awdiv 1928                         _T0CON 000FD5               ___awdiv@divisor 002A  
                       i2l122 17B6                         i2l132 1AEE                         i2l125 1B12  
                       i2l136 1890               ___awdiv@counter 002C                         _TRISC 000F94  
         _ConfigureOscillator 1B14                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _delay 19D4                         _merge 1B04               __end_of_forward 1ABA  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 19A0                  __end_of_main 1B04  
                      ??_main 0037                 __activetblptr 000002                        ?_delay 0028  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0028                        i2l1402 175C                        i2l1404 1760  
                      i2l1500 1802                        i2l1422 179C                        i2l1406 177E  
                      i2l1360 16DA                        i2l1520 1876                        i2l1600 10A2  
                      i2l1434 1AE4                        i2l1370 1702                        i2l1514 1852  
                      i2l1380 171A                        i2l1524 188A                        i2l1508 1834  
                      i2l1604 10B0                        i2l1382 171E                        i2l1358 16D6  
                      i2l1518 1866                        i2l1614 10DC                        i2l1606 10B8  
                      i2l1376 1712                        i2l1368 16E8                        i2l1640 1148  
                      i2l1624 10F8                        i2l1616 10E6                        i2l1608 10C8  
                      i2l1378 1716                        i2l1386 1724                        i2l1642 114E  
                      i2l1626 1102                        i2l1396 1754                        i2l1388 1742  
                      i2l1660 11C8                        i2l1644 115E                        i2l1628 1112  
                      i2l1486 1982                        i2l1670 1214                        i2l1654 11AE  
                      i2l1638 113E                        i2l1590 1060                        i2l1488 1998  
                      i2l1656 11BE                        i2l1648 117E                        i2l1674 1222  
                      i2l1594 1074                        i2l1682 1256                        i2l1678 1228  
                      i2l1598 1092                        _INTCON 000FF2                        _OSCCON 000FD3  
                   ??_InitApp 002D         ??_ConfigureOscillator 0028                   merge@merged 0014  
              __CFG_XINST$OFF 000000            sensorComputation@i 0086            sensorComputation@j 0088  
            __end_of_high_isr 1298                        ___wmul 1A08                     ??___awdiv 002C  
              __CFG_STVREN$ON 000000                        delay@x 002B                        clear_0 19A6  
            ___awdiv@quotient 002E                        _rotate 1964            __size_of_Reversing 001C  
                __pdataCOMRAM 0052                     ??_forward 0014                  __mediumconst 0000  
                   ??_low_isr 0001                _ReverseCounter 0047                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 19CA               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
                ?_KController 0001                __pcstackCOMRAM 0001                 __end_of_delay 1A08  
             moveMouse@action 0012                 __end_of_merge 1B14          KController@correctTo 0017  
  __end_of_motorCounterUpdate 17B8                _ForwardCounter 003F                       ??_delay 002A  
                     ??_merge 0013            _AlgorithmSelection 1A80                  _LTurnCounter 0041  
           __end_of_Reversing 1AD6                    _delay_time 004B             _MotorDelayCounter 0043  
         ?_AlgorithmSelection 0001                       ?___wmul 0028            __size_of_moveMouse 0008  
                     ?_rotate 0001                       _INTCON2 000FF1                       _OSCTUNE 000F9B  
                     i2u93_40 1862                       i2u95_40 1886          ??_AlgorithmSelection 0028  
                   ?_high_isr 0001                 _LMotorCounter 004D                       _InitApp 1928  
                     __Hparam 0000                       __Lparam 0000                       ___awdiv 1892  
             __size_of___wmul 0028                  __psmallconst 1000                       __pcinit 19A0  
                     __ramtop 1000                       __ptext0 1AF0                       __ptext1 14C4  
                     __ptext2 1298                       __ptext3 1A08                       __ptext4 1892  
                     __ptext5 1A30                       __ptext6 1A58                       __ptext7 1928  
                     __ptext8 19D4                       __ptext9 1A80               __size_of_rotate 003C  
                __size_of_ABS 001A                  __size_of_MAX 0028                  __size_of_MIN 0028  
                     _forward 1A9E                       delay@ms 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001A                __pintcode_body 100A  
        end_of_initialization 19CA              _sensorCorrection 1001             __end_of_moveMouse 1B26  
               __Lmediumconst 0000                       int_func 100A               _controllerSteps 0054  
                  _justTurned 0050          __size_of_KController 00DA                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                     _TRISBbits 000F93  
                   _TRISEbits 000F96                ??_sensorUpdate 008A   __end_of_ConfigureOscillator 1B1E  
                _RTurnCounter 0045                __end_of___wmul 1A30                 __pidataCOMRAM 1B26  
              __end_of_rotate 19A0           start_initialization 19A0                   __end_of_ABS 1AF0  
                 __end_of_MAX 1A80                   __end_of_MIN 1A58            _motorCounterUpdate 16C4  
            __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012                    merge@right 0012  
                   _Reversing 1ABA                      ??___wmul 002C              __CFG_LPT1OSC$OFF 000000  
                    ??_rotate 0014                _sensorLocation 1005          ??_motorCounterUpdate 0013  
                 __pbssCOMRAM 0037                 __pcstackBANK0 0080                     _TurnRight 0052  
      sensorUpdate@sensorTemp 0090             __size_of_high_isr 1290                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001                     _algorithm 004F  
                   __pintcode 0008        motorCounterUpdate@side 0013                      ?___awdiv 0028  
        __end_of_sensorUpdate 16C4        __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005  
                 __pintcodelo 0018                   __smallconst 1000                      ?_forward 0001  
                    ?_low_isr 0001                __size_of_delay 0034   __size_of_AlgorithmSelection 001E  
              __size_of_merge 0010                ___wmul@product 002C                     _moveMouse 1B1E  
                    i2u120_40 118E                      i2u121_40 119E                      i2u105_40 104C  
                    i2u106_40 105A                      i2u115_40 1122                      i2u107_40 106E  
                    i2u124_40 11D8                      i2u108_40 1082                      i2u125_40 11E8  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 0028  
               _RMotorCounter 004E                    rotate@side 0014                 ??_KController 0015  
                  ?_moveMouse 0001              __size_of_InitApp 003C                      __Hrparam 0000  
                   merge@left 0013          sensorComputation@max 0080                      __Lrparam 0000  
        sensorComputation@min 0082          sensorComputation@sum 0084                   ??_Reversing 0014  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096              __size_of_forward 001C  
            __size_of_low_isr 008A                      __ptext10 1B14                      __ptext20 1AD6  
                    __ptext13 1964                      __ptext14 1A9E                      __ptext15 1ABA  
                    __ptext16 17B8                      __ptext17 1B1E                      __ptext18 16C4  
                    __ptext19 1B04                      _high_isr 0008                 __size_of_main 0014  
               _RotateCounter 0049         __size_of_sensorUpdate 0200  __size_of_ConfigureOscillator 000A  
         __end_of_KController 1892             _sensorComputation 1298                    _INTCONbits 000FF2  
          ?_sensorComputation 0033                 sensorUpdate@i 00E0                 sensorUpdate@j 00E2  
                _sensorUpdate 14C4                      intlevel1 0000                      intlevel2 0000  
         ??_sensorComputation 0035                   ??_moveMouse 0012               KController@diff 0018  
   __end_of_sensorComputation 14C4                   _sensorValue 0037   __size_of_motorCounterUpdate 00F4  
   motorCounterUpdate@reverse 0012                   _KController 17B8  
