

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 17 16:45:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001ABE                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _controllerSteps
    42  001ABE  08                 	db	8
    43                           
    44                           	psect	smallconst
    45  001000                     __psmallconst:
    46                           	opt stack 0
    47  001000  00                 	db	0
    48  001001                     _sensorCorrection:
    49                           	opt stack 0
    50  001001  18                 	db	24
    51  001002  18                 	db	24
    52  001003  06                 	db	6
    53  001004  06                 	db	6
    54  001005                     __end_of_sensorCorrection:
    55                           	opt stack 0
    56  001005                     _sensorLocation:
    57                           	opt stack 0
    58  001005  1B                 	db	27
    59  001006  2B                 	db	43
    60  001007  1F                 	db	31
    61  001008  33                 	db	51
    62  001009                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _LATC	set	3979
    65  0000                     _OSCTUNE	set	3995
    66  0000                     _TRISBbits	set	3987
    67  0000                     _TRISC	set	3988
    68  0000                     _TRISEbits	set	3990
    69  0000                     _ADCON0	set	4034
    70  0000                     _ADCON0bits	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON2	set	4032
    73  0000                     _ADRESH	set	4036
    74  0000                     _ADRESL	set	4035
    75  0000                     _OSCCON	set	4051
    76  0000                     _T0CON	set	4053
    77  0000                     _INTCON	set	4082
    78  0000                     _INTCON2	set	4081
    79  0000                     _INTCONbits	set	4082
    80                           
    81                           ; #config settings
    82  001009  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001978                     __pcinit:
    86                           	opt stack 0
    87  001978                     start_initialization:
    88                           	opt stack 0
    89  001978                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (27 bytes)
    93  001978  EE00  F03D         	lfsr	0,__pbssCOMRAM
    94  00197C  0E1B               	movlw	27
    95  00197E                     clear_0:
    96  00197E  6AEE               	clrf	postinc0,c
    97  001980  06E8               	decf	wreg,f,c
    98  001982  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (1 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  001984  0EBE               	movlw	low __pidataCOMRAM
   103  001986  6EF6               	movwf	tblptrl,c
   104  001988  0E1A               	movlw	high __pidataCOMRAM
   105  00198A  6EF7               	movwf	tblptrh,c
   106  00198C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  00198E  6EF8               	movwf	tblptru,c
   108  001990  0009               	tblrd		*+	;fetch initializer
   109  001992  CFF5 F058          	movff	tablat,__pdataCOMRAM
   110  001996                     end_of_initialization:
   111                           	opt stack 0
   112  001996                     __end_of__initialization:
   113                           	opt stack 0
   114  001996  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  001998  6EF8               	movwf	tblptru,c
   116  00199A  0100               	movlb	0
   117  00199C  EF44  F00D         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _sensorValue:
   129                           	opt stack 0
   130  00003D                     	ds	8
   131  000045                     _ForwardCounter:
   132                           	opt stack 0
   133  000045                     	ds	2
   134  000047                     _LTurnCounter:
   135                           	opt stack 0
   136  000047                     	ds	2
   137  000049                     _MotorDelayCounter:
   138                           	opt stack 0
   139  000049                     	ds	2
   140  00004B                     _RTurnCounter:
   141                           	opt stack 0
   142  00004B                     	ds	2
   143  00004D                     _ReverseCounter:
   144                           	opt stack 0
   145  00004D                     	ds	2
   146  00004F                     _RotateCounter:
   147                           	opt stack 0
   148  00004F                     	ds	2
   149  000051                     _delay_time:
   150                           	opt stack 0
   151  000051                     	ds	2
   152  000053                     _LMotorCounter:
   153                           	opt stack 0
   154  000053                     	ds	1
   155  000054                     _RMotorCounter:
   156                           	opt stack 0
   157  000054                     	ds	1
   158  000055                     _algorithm:
   159                           	opt stack 0
   160  000055                     	ds	1
   161  000056                     _justTurned:
   162                           	opt stack 0
   163  000056                     	ds	1
   164  000057                     _rotatingSide:
   165                           	opt stack 0
   166  000057                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	dataCOMRAM
   175  000058                     __pdataCOMRAM:
   176                           	opt stack 0
   177  000058                     _controllerSteps:
   178                           	opt stack 0
   179  000058                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	cstackBANK0
   188  000080                     __pcstackBANK0:
   189                           	opt stack 0
   190  000080                     sensorComputation@max:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000080                     	ds	2
   195  000082                     sensorComputation@min:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000082                     	ds	2
   200  000084                     sensorComputation@sum:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000084                     	ds	2
   205  000086                     sensorComputation@i:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000086                     	ds	2
   210  000088                     sensorComputation@j:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214  000088                     	ds	2
   215  00008A                     sensorUpdate@sensorTemp:
   216                           	opt stack 0
   217                           
   218                           ; 80 bytes @ 0xA
   219  00008A                     	ds	80
   220  0000DA                     sensorUpdate@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x5A
   224  0000DA                     	ds	2
   225  0000DC                     sensorUpdate@j:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x5C
   229  0000DC                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_low_isr:
   241  000001                     
   242                           ; 0 bytes @ 0x0
   243  000001                     	ds	17
   244  000012                     ?_ABS:
   245                           	opt stack 0
   246  000012                     motorCounterUpdate@reverse:
   247                           	opt stack 0
   248  000012                     merge@right:
   249                           	opt stack 0
   250  000012                     moveMouse@action:
   251                           	opt stack 0
   252  000012                     ABS@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x11
   256  000012                     	ds	1
   257  000013                     motorCounterUpdate@side:
   258                           	opt stack 0
   259  000013                     merge@left:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	1
   264  000014                     merge@merged:
   265                           	opt stack 0
   266  000014                     rotate@side:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	1
   271  000015                     ??_KController:
   272                           
   273                           ; 0 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     KController@correctTo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000017                     	ds	1
   280  000018                     KController@diff:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     ??_high_isr:
   286                           
   287                           ; 0 bytes @ 0x19
   288  00001A                     	ds	14
   289  000028                     ?___wmul:
   290                           	opt stack 0
   291  000028                     ?___awdiv:
   292                           	opt stack 0
   293  000028                     delay@ms:
   294                           	opt stack 0
   295  000028                     ___wmul@multiplier:
   296                           	opt stack 0
   297  000028                     ___awdiv@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_delay:
   303  00002A                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  00002A                     ___awdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x29
   309  00002A                     	ds	1
   310  00002B                     delay@x:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     ___awdiv@counter:
   316                           	opt stack 0
   317  00002C                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2B
   321  00002C                     	ds	1
   322  00002D                     ___awdiv@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     ?_MIN:
   328                           	opt stack 0
   329  00002E                     ?_MAX:
   330                           	opt stack 0
   331  00002E                     MIN@a:
   332                           	opt stack 0
   333  00002E                     MAX@a:
   334                           	opt stack 0
   335  00002E                     ___awdiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2D
   339  00002E                     	ds	2
   340  000030                     MIN@b:
   341                           	opt stack 0
   342  000030                     MAX@b:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     ??_MIN:
   348  000032                     ??_MAX:
   349                           
   350                           ; 0 bytes @ 0x31
   351  000032                     	ds	1
   352  000033                     sensorComputation@sensorTemp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x32
   356  000033                     	ds	2
   357  000035                     ??_sensorComputation:
   358                           
   359                           ; 0 bytes @ 0x34
   360  000035                     	ds	2
   361  000037                     ??_sensorUpdate:
   362                           
   363                           ; 0 bytes @ 0x36
   364  000037                     	ds	6
   365  00003D                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           ; 0 bytes @ 0x3C
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 41 in file "main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    7
   398 ;; This function calls:
   399 ;;		_ConfigureOscillator
   400 ;;		_InitApp
   401 ;;		_sensorUpdate
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  001A88                     __ptext0:
   409                           	opt stack 0
   410  001A88                     _main:
   411                           	opt stack 24
   412                           
   413                           ;main.c: 44: ConfigureOscillator();
   414                           
   415                           ;incstack = 0
   416  001A88  EC56  F00D         	call	_ConfigureOscillator	;wreg free
   417                           
   418                           ;main.c: 47: InitApp();
   419  001A8C  EC66  F00C         	call	_InitApp	;wreg free
   420  001A90  D000               	goto	l1801
   421  001A92                     l1801:
   422                           
   423                           ;main.c: 50: {
   424                           ;main.c: 51: sensorUpdate();
   425  001A92  EC4E  F00A         	call	_sensorUpdate	;wreg free
   426  001A96  D7FD               	goto	l1801
   427  001A98  EF51  F000         	goto	start
   428  001A9C                     __end_of_main:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _sensorUpdate *****************
   438 ;; Defined at:
   439 ;;		line 146 in file "user.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   444 ;;  j               2   92[BANK0 ] int 
   445 ;;  i               2   90[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:       90 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		___wmul
   464 ;;		_sensorComputation
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  00149C                     __ptext1:
   472                           	opt stack 0
   473  00149C                     _sensorUpdate:
   474                           	opt stack 24
   475                           
   476                           ;user.c: 148: int i,j;
   477                           ;user.c: 149: int sensorTemp[4][10];
   478                           ;user.c: 152: for(i = 0; i < 10; i++)
   479                           
   480                           ;incstack = 0
   481  00149C  0E00               	movlw	0
   482  00149E  0100               	movlb	0	; () banked
   483  0014A0  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   484  0014A2  0E00               	movlw	0
   485  0014A4  6FDA               	movwf	sensorUpdate@i& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488  0014A6  0100               	movlb	0	; () banked
   489  0014A8  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   490  0014AA  D00A               	goto	l1767
   491  0014AC  0100               	movlb	0	; () banked
   492  0014AE  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   493  0014B0  E106               	bnz	u1460
   494  0014B2  0E0A               	movlw	10
   495  0014B4  0100               	movlb	0	; () banked
   496  0014B6  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   497  0014B8  B0D8               	btfsc	status,0,c
   498  0014BA  D0CF               	goto	l1795
   499  0014BC  D001               	goto	l1767
   500  0014BE                     u1460:
   501                           
   502                           ; BSR set to: 0
   503  0014BE  D0CD               	goto	l1795
   504  0014C0                     l1767:
   505                           
   506                           ; BSR set to: 0
   507                           ;user.c: 153: {
   508                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   509  0014C0  0E00               	movlw	0
   510  0014C2  0100               	movlb	0	; () banked
   511  0014C4  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   512  0014C6  0E00               	movlw	0
   513  0014C8  6FDC               	movwf	sensorUpdate@j& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516  0014CA  0100               	movlb	0	; () banked
   517  0014CC  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   518  0014CE  D00A               	goto	l1773
   519  0014D0  0100               	movlb	0	; () banked
   520  0014D2  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   521  0014D4  E106               	bnz	u1470
   522  0014D6  0E04               	movlw	4
   523  0014D8  0100               	movlb	0	; () banked
   524  0014DA  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   525  0014DC  B0D8               	btfsc	status,0,c
   526  0014DE  D0B2               	goto	l1791
   527  0014E0  D001               	goto	l1773
   528  0014E2                     u1470:
   529                           
   530                           ; BSR set to: 0
   531  0014E2  D0B0               	goto	l1791
   532  0014E4                     l1773:
   533                           
   534                           ; BSR set to: 0
   535                           ;user.c: 155: {
   536                           ;user.c: 156: ADCON0 = sensorLocation[j];
   537  0014E4  0E05               	movlw	low _sensorLocation
   538  0014E6  0100               	movlb	0	; () banked
   539  0014E8  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   540  0014EA  6EF6               	movwf	tblptrl,c
   541  0014EC  0E10               	movlw	high _sensorLocation
   542  0014EE  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   543  0014F0  6EF7               	movwf	tblptrh,c
   544  0014F2                     	if	0	;There are less than 3 active tblptr bytes
   545  0014F2                     	endif
   546  0014F2  0008               	tblrd		*
   547  0014F4  CFF5 FFC2          	movff	tablat,4034	;volatile
   548                           
   549                           ; BSR set to: 0
   550                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   551  0014F8  82C2               	bsf	4034,1,c	;volatile
   552                           
   553                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   554  0014FA  D000               	goto	l262
   555  0014FC                     l262:
   556  0014FC  B2C2               	btfsc	4034,1,c	;volatile
   557  0014FE  D7FE               	goto	l262
   558                           
   559                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   560  001500  CFC3 F037          	movff	4035,??_sensorUpdate	;volatile
   561  001504  0E06               	movlw	6
   562  001506  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   563  001508                     u1495:
   564  001508  90D8               	bcf	status,0,c
   565  00150A  3237               	rrcf	??_sensorUpdate,f,c
   566  00150C  2E38               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   567  00150E  D7FC               	goto	u1495
   568  001510  5037               	movf	??_sensorUpdate,w,c
   569  001512  CFC4 F039          	movff	4036,??_sensorUpdate+2	;volatile
   570  001516  6A3A               	clrf	(??_sensorUpdate+3)& (0+255),c
   571  001518  90D8               	bcf	status,0,c
   572  00151A  3639               	rlcf	??_sensorUpdate+2,f,c
   573  00151C  363A               	rlcf	??_sensorUpdate+3,f,c
   574  00151E  90D8               	bcf	status,0,c
   575  001520  3639               	rlcf	??_sensorUpdate+2,f,c
   576  001522  363A               	rlcf	??_sensorUpdate+3,f,c
   577  001524  2639               	addwf	??_sensorUpdate+2,f,c
   578  001526  0E00               	movlw	0
   579  001528  223A               	addwfc	??_sensorUpdate+3,f,c
   580  00152A  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   581  00152E  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   582  001532  0E00               	movlw	0
   583  001534  6E2B               	movwf	___wmul@multiplicand+1,c
   584  001536  0E14               	movlw	20
   585  001538  6E2A               	movwf	___wmul@multiplicand,c
   586  00153A  ECD0  F00C         	call	___wmul	;wreg free
   587  00153E  0E8A               	movlw	low sensorUpdate@sensorTemp
   588  001540  6E3B               	movwf	(??_sensorUpdate+4)& (0+255),c
   589  001542  0E00               	movlw	high sensorUpdate@sensorTemp
   590  001544  6E3C               	movwf	(??_sensorUpdate+5)& (0+255),c
   591  001546  5028               	movf	?___wmul,w,c
   592  001548  263B               	addwf	??_sensorUpdate+4,f,c
   593  00154A  5029               	movf	?___wmul+1,w,c
   594  00154C  223C               	addwfc	??_sensorUpdate+5,f,c
   595  00154E  90D8               	bcf	status,0,c
   596  001550  0100               	movlb	0	; () banked
   597  001552  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   598  001554  6ED9               	movwf	fsr2l,c
   599  001556  0100               	movlb	0	; () banked
   600  001558  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  00155A  6EDA               	movwf	fsr2h,c
   602  00155C  503B               	movf	??_sensorUpdate+4,w,c
   603  00155E  26D9               	addwf	fsr2l,f,c
   604  001560  503C               	movf	??_sensorUpdate+5,w,c
   605  001562  22DA               	addwfc	fsr2h,f,c
   606  001564  C039  FFDE         	movff	??_sensorUpdate+2,postinc2
   607  001568  C03A  FFDD         	movff	??_sensorUpdate+3,postdec2
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 163: if(j == 0 || j == 3)
   611  00156C  0100               	movlb	0	; () banked
   612  00156E  51DC               	movf	sensorUpdate@j& (0+255),w,b
   613  001570  0100               	movlb	0	; () banked
   614  001572  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   615  001574  B4D8               	btfsc	status,2,c
   616  001576  D007               	goto	l1783
   617                           
   618                           ; BSR set to: 0
   619  001578  0E03               	movlw	3
   620  00157A  0100               	movlb	0	; () banked
   621  00157C  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   622  00157E  0100               	movlb	0	; () banked
   623  001580  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   624  001582  A4D8               	btfss	status,2,c
   625  001584  D02A               	goto	l1785
   626  001586                     l1783:
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   630  001586  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   631  00158A  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   632  00158E  0E00               	movlw	0
   633  001590  6E2B               	movwf	___wmul@multiplicand+1,c
   634  001592  0E14               	movlw	20
   635  001594  6E2A               	movwf	___wmul@multiplicand,c
   636  001596  ECD0  F00C         	call	___wmul	;wreg free
   637  00159A  0E8A               	movlw	low sensorUpdate@sensorTemp
   638  00159C  6E37               	movwf	??_sensorUpdate& (0+255),c
   639  00159E  0E00               	movlw	high sensorUpdate@sensorTemp
   640  0015A0  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   641  0015A2  5028               	movf	?___wmul,w,c
   642  0015A4  2637               	addwf	??_sensorUpdate,f,c
   643  0015A6  5029               	movf	?___wmul+1,w,c
   644  0015A8  2238               	addwfc	??_sensorUpdate+1,f,c
   645  0015AA  90D8               	bcf	status,0,c
   646  0015AC  0100               	movlb	0	; () banked
   647  0015AE  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   648  0015B0  6ED9               	movwf	fsr2l,c
   649  0015B2  0100               	movlb	0	; () banked
   650  0015B4  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   651  0015B6  6EDA               	movwf	fsr2h,c
   652  0015B8  5037               	movf	??_sensorUpdate,w,c
   653  0015BA  26D9               	addwf	fsr2l,f,c
   654  0015BC  5038               	movf	??_sensorUpdate+1,w,c
   655  0015BE  22DA               	addwfc	fsr2h,f,c
   656  0015C0  0E01               	movlw	low _sensorCorrection
   657  0015C2  0100               	movlb	0	; () banked
   658  0015C4  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   659  0015C6  6EF6               	movwf	tblptrl,c
   660  0015C8  0E10               	movlw	high _sensorCorrection
   661  0015CA  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   662  0015CC  6EF7               	movwf	tblptrh,c
   663  0015CE                     	if	0	;There are less than 3 active tblptr bytes
   664  0015CE                     	endif
   665  0015CE  0008               	tblrd		*
   666  0015D0  50F5               	movf	tablat,w,c
   667  0015D2  5EDE               	subwf	postinc2,f,c
   668  0015D4  0E00               	movlw	0
   669  0015D6  5ADD               	subwfb	postdec2,f,c
   670  0015D8  D02A               	goto	l1787
   671  0015DA                     l1785:
   672                           
   673                           ; BSR set to: 0
   674                           ;user.c: 165: else
   675                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   676  0015DA  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   677  0015DE  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   678  0015E2  0E00               	movlw	0
   679  0015E4  6E2B               	movwf	___wmul@multiplicand+1,c
   680  0015E6  0E14               	movlw	20
   681  0015E8  6E2A               	movwf	___wmul@multiplicand,c
   682  0015EA  ECD0  F00C         	call	___wmul	;wreg free
   683  0015EE  0E8A               	movlw	low sensorUpdate@sensorTemp
   684  0015F0  6E37               	movwf	??_sensorUpdate& (0+255),c
   685  0015F2  0E00               	movlw	high sensorUpdate@sensorTemp
   686  0015F4  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   687  0015F6  5028               	movf	?___wmul,w,c
   688  0015F8  2637               	addwf	??_sensorUpdate,f,c
   689  0015FA  5029               	movf	?___wmul+1,w,c
   690  0015FC  2238               	addwfc	??_sensorUpdate+1,f,c
   691  0015FE  90D8               	bcf	status,0,c
   692  001600  0100               	movlb	0	; () banked
   693  001602  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   694  001604  6ED9               	movwf	fsr2l,c
   695  001606  0100               	movlb	0	; () banked
   696  001608  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   697  00160A  6EDA               	movwf	fsr2h,c
   698  00160C  5037               	movf	??_sensorUpdate,w,c
   699  00160E  26D9               	addwf	fsr2l,f,c
   700  001610  5038               	movf	??_sensorUpdate+1,w,c
   701  001612  22DA               	addwfc	fsr2h,f,c
   702  001614  0E01               	movlw	low _sensorCorrection
   703  001616  0100               	movlb	0	; () banked
   704  001618  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   705  00161A  6EF6               	movwf	tblptrl,c
   706  00161C  0E10               	movlw	high _sensorCorrection
   707  00161E  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   708  001620  6EF7               	movwf	tblptrh,c
   709  001622                     	if	0	;There are less than 3 active tblptr bytes
   710  001622                     	endif
   711  001622  0008               	tblrd		*
   712  001624  50F5               	movf	tablat,w,c
   713  001626  26DE               	addwf	postinc2,f,c
   714  001628  0E00               	movlw	0
   715  00162A  22DD               	addwfc	postdec2,f,c
   716  00162C  D000               	goto	l1787
   717  00162E                     l1787:
   718                           
   719                           ; BSR set to: 0
   720  00162E  0100               	movlb	0	; () banked
   721  001630  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   722  001632  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   723                           
   724                           ; BSR set to: 0
   725  001634  0100               	movlb	0	; () banked
   726  001636  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   727  001638  D755               	goto	l1773
   728  00163A  0100               	movlb	0	; () banked
   729  00163C  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   730  00163E  E102               	bnz	l1791
   731  001640  D74A               	goto	L1
   732  001642  D000               	goto	l1791
   733  001644                     l1791:
   734                           
   735                           ; BSR set to: 0
   736  001644  0100               	movlb	0	; () banked
   737  001646  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   738  001648  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741  00164A  0100               	movlb	0	; () banked
   742  00164C  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  00164E  D738               	goto	l1767
   744  001650  0100               	movlb	0	; () banked
   745  001652  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  001654  E102               	bnz	l1795
   747  001656  D72D               	goto	L2
   748  001658  D000               	goto	l1795
   749  00165A                     l1795:
   750                           
   751                           ; BSR set to: 0
   752                           ;user.c: 167: }
   753                           ;user.c: 168: }
   754                           ;user.c: 171: sensorComputation(sensorTemp);
   755  00165A  0E8A               	movlw	low sensorUpdate@sensorTemp
   756  00165C  6E33               	movwf	sensorComputation@sensorTemp,c
   757  00165E  0E00               	movlw	high sensorUpdate@sensorTemp
   758  001660  6E34               	movwf	sensorComputation@sensorTemp+1,c
   759  001662  EC38  F009         	call	_sensorComputation	;wreg free
   760  001666  0012               	return		;funcret
   761  001668                     __end_of_sensorUpdate:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postinc2	equ	0xFDE
   770                           postdec2	equ	0xFDD
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sensorComputation *****************
   776 ;; Defined at:
   777 ;;		line 125 in file "user.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   780 ;;		 -> sensorUpdate@sensorTemp(80), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  j               2    8[BANK0 ] int 
   783 ;;  i               2    6[BANK0 ] int 
   784 ;;  sum             2    4[BANK0 ] int 
   785 ;;  min             2    2[BANK0 ] int 
   786 ;;  max             2    0[BANK0 ] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       14 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    5
   803 ;; This function calls:
   804 ;;		_MAX
   805 ;;		_MIN
   806 ;;		___awdiv
   807 ;;		___wmul
   808 ;; This function is called by:
   809 ;;		_sensorUpdate
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  001270                     __ptext2:
   815                           	opt stack 0
   816  001270                     _sensorComputation:
   817                           	opt stack 24
   818                           
   819                           ;user.c: 127: int max,min,i,j,sum;
   820                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   821                           
   822                           ;incstack = 0
   823  001270  0E00               	movlw	0
   824  001272  0100               	movlb	0	; () banked
   825  001274  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   826  001276  0E00               	movlw	0
   827  001278  6F86               	movwf	sensorComputation@i& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830  00127A  0100               	movlb	0	; () banked
   831  00127C  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   832  00127E  D00A               	goto	l1737
   833  001280  0100               	movlb	0	; () banked
   834  001282  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   835  001284  E106               	bnz	u1410
   836  001286  0E04               	movlw	4
   837  001288  0100               	movlb	0	; () banked
   838  00128A  5D86               	subwf	sensorComputation@i& (0+255),w,b
   839  00128C  B0D8               	btfsc	status,0,c
   840  00128E  D105               	goto	l255
   841  001290  D001               	goto	l1737
   842  001292                     u1410:
   843                           
   844                           ; BSR set to: 0
   845  001292  D103               	goto	l255
   846  001294                     l1737:
   847                           
   848                           ; BSR set to: 0
   849                           ;user.c: 129: {
   850                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   851  001294  0E00               	movlw	0
   852  001296  0100               	movlb	0	; () banked
   853  001298  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   854  00129A  0E00               	movlw	0
   855  00129C  6F88               	movwf	sensorComputation@j& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858  00129E  0100               	movlb	0	; () banked
   859  0012A0  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   860  0012A2  D00A               	goto	l1743
   861  0012A4  0100               	movlb	0	; () banked
   862  0012A6  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   863  0012A8  E106               	bnz	u1420
   864  0012AA  0E0A               	movlw	10
   865  0012AC  0100               	movlb	0	; () banked
   866  0012AE  5D88               	subwf	sensorComputation@j& (0+255),w,b
   867  0012B0  B0D8               	btfsc	status,0,c
   868  0012B2  D0B7               	goto	l1753
   869  0012B4  D001               	goto	l1743
   870  0012B6                     u1420:
   871                           
   872                           ; BSR set to: 0
   873  0012B6  D0B5               	goto	l1753
   874  0012B8                     l1743:
   875                           
   876                           ; BSR set to: 0
   877                           ;user.c: 131: {
   878                           ;user.c: 132: if(j == 0)
   879  0012B8  0100               	movlb	0	; () banked
   880  0012BA  5188               	movf	sensorComputation@j& (0+255),w,b
   881  0012BC  0100               	movlb	0	; () banked
   882  0012BE  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   883  0012C0  A4D8               	btfss	status,2,c
   884  0012C2  D02A               	goto	l1747
   885                           
   886                           ; BSR set to: 0
   887                           ;user.c: 133: {
   888                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   889  0012C4  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   890  0012C8  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   891  0012CC  0E00               	movlw	0
   892  0012CE  6E2B               	movwf	___wmul@multiplicand+1,c
   893  0012D0  0E14               	movlw	20
   894  0012D2  6E2A               	movwf	___wmul@multiplicand,c
   895  0012D4  ECD0  F00C         	call	___wmul	;wreg free
   896  0012D8  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   897  0012DC  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   898  0012E0  5028               	movf	?___wmul,w,c
   899  0012E2  2635               	addwf	??_sensorComputation,f,c
   900  0012E4  5029               	movf	?___wmul+1,w,c
   901  0012E6  2236               	addwfc	??_sensorComputation+1,f,c
   902  0012E8  90D8               	bcf	status,0,c
   903  0012EA  0100               	movlb	0	; () banked
   904  0012EC  3588               	rlcf	sensorComputation@j& (0+255),w,b
   905  0012EE  6ED9               	movwf	fsr2l,c
   906  0012F0  0100               	movlb	0	; () banked
   907  0012F2  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   908  0012F4  6EDA               	movwf	fsr2h,c
   909  0012F6  5035               	movf	??_sensorComputation,w,c
   910  0012F8  26D9               	addwf	fsr2l,f,c
   911  0012FA  5036               	movf	??_sensorComputation+1,w,c
   912  0012FC  22DA               	addwfc	fsr2h,f,c
   913  0012FE  CFDE F080          	movff	postinc2,sensorComputation@max
   914  001302  CFDD F081          	movff	postdec2,sensorComputation@max+1
   915  001306  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   916  00130A  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   917  00130E  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   918  001312  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   919                           
   920                           ;user.c: 135: continue;
   921  001316  D07A               	goto	l1749
   922  001318                     l1747:
   923                           
   924                           ; BSR set to: 0
   925                           ;user.c: 136: }
   926                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   927  001318  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   928  00131C  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   929  001320  0E00               	movlw	0
   930  001322  6E2B               	movwf	___wmul@multiplicand+1,c
   931  001324  0E14               	movlw	20
   932  001326  6E2A               	movwf	___wmul@multiplicand,c
   933  001328  ECD0  F00C         	call	___wmul	;wreg free
   934  00132C  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   935  001330  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   936  001334  5028               	movf	?___wmul,w,c
   937  001336  2635               	addwf	??_sensorComputation,f,c
   938  001338  5029               	movf	?___wmul+1,w,c
   939  00133A  2236               	addwfc	??_sensorComputation+1,f,c
   940  00133C  90D8               	bcf	status,0,c
   941  00133E  0100               	movlb	0	; () banked
   942  001340  3588               	rlcf	sensorComputation@j& (0+255),w,b
   943  001342  6ED9               	movwf	fsr2l,c
   944  001344  0100               	movlb	0	; () banked
   945  001346  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   946  001348  6EDA               	movwf	fsr2h,c
   947  00134A  5035               	movf	??_sensorComputation,w,c
   948  00134C  26D9               	addwf	fsr2l,f,c
   949  00134E  5036               	movf	??_sensorComputation+1,w,c
   950  001350  22DA               	addwfc	fsr2h,f,c
   951  001352  CFDE F02E          	movff	postinc2,MIN@a
   952  001356  CFDD F02F          	movff	postdec2,MIN@a+1
   953  00135A  C082  F030         	movff	sensorComputation@min,MIN@b
   954  00135E  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   955  001362  ECE4  F00C         	call	_MIN	;wreg free
   956  001366  C02E  F082         	movff	?_MIN,sensorComputation@min
   957  00136A  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   958                           
   959                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   960  00136E  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   961  001372  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   962  001376  0E00               	movlw	0
   963  001378  6E2B               	movwf	___wmul@multiplicand+1,c
   964  00137A  0E14               	movlw	20
   965  00137C  6E2A               	movwf	___wmul@multiplicand,c
   966  00137E  ECD0  F00C         	call	___wmul	;wreg free
   967  001382  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   968  001386  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   969  00138A  5028               	movf	?___wmul,w,c
   970  00138C  2635               	addwf	??_sensorComputation,f,c
   971  00138E  5029               	movf	?___wmul+1,w,c
   972  001390  2236               	addwfc	??_sensorComputation+1,f,c
   973  001392  90D8               	bcf	status,0,c
   974  001394  0100               	movlb	0	; () banked
   975  001396  3588               	rlcf	sensorComputation@j& (0+255),w,b
   976  001398  6ED9               	movwf	fsr2l,c
   977  00139A  0100               	movlb	0	; () banked
   978  00139C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   979  00139E  6EDA               	movwf	fsr2h,c
   980  0013A0  5035               	movf	??_sensorComputation,w,c
   981  0013A2  26D9               	addwf	fsr2l,f,c
   982  0013A4  5036               	movf	??_sensorComputation+1,w,c
   983  0013A6  22DA               	addwfc	fsr2h,f,c
   984  0013A8  CFDE F02E          	movff	postinc2,MAX@a
   985  0013AC  CFDD F02F          	movff	postdec2,MAX@a+1
   986  0013B0  C080  F030         	movff	sensorComputation@max,MAX@b
   987  0013B4  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
   988  0013B8  ECF8  F00C         	call	_MAX	;wreg free
   989  0013BC  C02E  F080         	movff	?_MAX,sensorComputation@max
   990  0013C0  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
   991                           
   992                           ;user.c: 139: sum += sensorTemp[i][j];
   993  0013C4  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   994  0013C8  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   995  0013CC  0E00               	movlw	0
   996  0013CE  6E2B               	movwf	___wmul@multiplicand+1,c
   997  0013D0  0E14               	movlw	20
   998  0013D2  6E2A               	movwf	___wmul@multiplicand,c
   999  0013D4  ECD0  F00C         	call	___wmul	;wreg free
  1000  0013D8  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1001  0013DC  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1002  0013E0  5028               	movf	?___wmul,w,c
  1003  0013E2  2635               	addwf	??_sensorComputation,f,c
  1004  0013E4  5029               	movf	?___wmul+1,w,c
  1005  0013E6  2236               	addwfc	??_sensorComputation+1,f,c
  1006  0013E8  90D8               	bcf	status,0,c
  1007  0013EA  0100               	movlb	0	; () banked
  1008  0013EC  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1009  0013EE  6ED9               	movwf	fsr2l,c
  1010  0013F0  0100               	movlb	0	; () banked
  1011  0013F2  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1012  0013F4  6EDA               	movwf	fsr2h,c
  1013  0013F6  5035               	movf	??_sensorComputation,w,c
  1014  0013F8  26D9               	addwf	fsr2l,f,c
  1015  0013FA  5036               	movf	??_sensorComputation+1,w,c
  1016  0013FC  22DA               	addwfc	fsr2h,f,c
  1017  0013FE  50DE               	movf	postinc2,w,c
  1018  001400  0100               	movlb	0	; () banked
  1019  001402  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1020  001404  50DD               	movf	postdec2,w,c
  1021  001406  0100               	movlb	0	; () banked
  1022  001408  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1023  00140A  D000               	goto	l1749
  1024  00140C                     l1749:
  1025                           
  1026                           ; BSR set to: 0
  1027  00140C  0100               	movlb	0	; () banked
  1028  00140E  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1029  001410  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1030                           
  1031                           ; BSR set to: 0
  1032  001412  0100               	movlb	0	; () banked
  1033  001414  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1034  001416  D750               	goto	l1743
  1035  001418  0100               	movlb	0	; () banked
  1036  00141A  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1037  00141C  E102               	bnz	l1753
  1038  00141E  D745               	goto	L3
  1039  001420  D000               	goto	l1753
  1040  001422                     l1753:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;user.c: 140: }
  1044                           ;user.c: 141: sum = sum - min - max;
  1045  001422  0100               	movlb	0	; () banked
  1046  001424  5180               	movf	sensorComputation@max& (0+255),w,b
  1047  001426  0100               	movlb	0	; () banked
  1048  001428  2582               	addwf	sensorComputation@min& (0+255),w,b
  1049  00142A  6E35               	movwf	??_sensorComputation& (0+255),c
  1050  00142C  0100               	movlb	0	; () banked
  1051  00142E  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1052  001430  0100               	movlb	0	; () banked
  1053  001432  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1054  001434  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1055  001436  1E35               	comf	??_sensorComputation,f,c
  1056  001438  1E36               	comf	??_sensorComputation+1,f,c
  1057  00143A  4A35               	infsnz	??_sensorComputation,f,c
  1058  00143C  2A36               	incf	??_sensorComputation+1,f,c
  1059  00143E  0100               	movlb	0	; () banked
  1060  001440  5184               	movf	sensorComputation@sum& (0+255),w,b
  1061  001442  2435               	addwf	??_sensorComputation,w,c
  1062  001444  0100               	movlb	0	; () banked
  1063  001446  6F84               	movwf	sensorComputation@sum& (0+255),b
  1064  001448  0100               	movlb	0	; () banked
  1065  00144A  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1066  00144C  2036               	addwfc	??_sensorComputation+1,w,c
  1067  00144E  0100               	movlb	0	; () banked
  1068  001450  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1072  001452  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1073  001456  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1074  00145A  0E00               	movlw	0
  1075  00145C  6E2B               	movwf	___awdiv@divisor+1,c
  1076  00145E  0E08               	movlw	8
  1077  001460  6E2A               	movwf	___awdiv@divisor,c
  1078  001462  EC1B  F00C         	call	___awdiv	;wreg free
  1079  001466  90D8               	bcf	status,0,c
  1080  001468  0100               	movlb	0	; () banked
  1081  00146A  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1082  00146C  6ED9               	movwf	fsr2l,c
  1083  00146E  0100               	movlb	0	; () banked
  1084  001470  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1085  001472  6EDA               	movwf	fsr2h,c
  1086  001474  0E3D               	movlw	low _sensorValue
  1087  001476  26D9               	addwf	fsr2l,f,c
  1088  001478  0E00               	movlw	high _sensorValue
  1089  00147A  22DA               	addwfc	fsr2h,f,c
  1090  00147C  C028  FFDE         	movff	?___awdiv,postinc2
  1091  001480  C029  FFDD         	movff	?___awdiv+1,postdec2
  1092                           
  1093                           ; BSR set to: 0
  1094  001484  0100               	movlb	0	; () banked
  1095  001486  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1096  001488  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  00148A  0100               	movlb	0	; () banked
  1100  00148C  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1101  00148E  D702               	goto	l1737
  1102  001490  0100               	movlb	0	; () banked
  1103  001492  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1104  001494  E102               	bnz	l255
  1105  001496  D6F7               	goto	L4
  1106  001498  D000               	goto	l255
  1107  00149A                     l255:
  1108                           
  1109                           ; BSR set to: 0
  1110  00149A  0012               	return		;funcret
  1111  00149C                     __end_of_sensorComputation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function ___wmul *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  multiplier      2   39[COMRAM] unsigned int 
  1130 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  product         2   43[COMRAM] unsigned int 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   39[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, prodl, prodh
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    4
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_sensorComputation
  1153 ;;		_sensorUpdate
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  0019A0                     __ptext3:
  1159                           	opt stack 0
  1160  0019A0                     ___wmul:
  1161                           	opt stack 24
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  0019A0  5028               	movf	___wmul@multiplier,w,c
  1166  0019A2  022A               	mulwf	___wmul@multiplicand,c
  1167  0019A4  CFF3 F02C          	movff	prodl,___wmul@product
  1168  0019A8  CFF4 F02D          	movff	prodh,___wmul@product+1
  1169  0019AC  5028               	movf	___wmul@multiplier,w,c
  1170  0019AE  022B               	mulwf	___wmul@multiplicand+1,c
  1171  0019B0  50F3               	movf	prodl,w,c
  1172  0019B2  262D               	addwf	___wmul@product+1,f,c
  1173  0019B4  5029               	movf	___wmul@multiplier+1,w,c
  1174  0019B6  022A               	mulwf	___wmul@multiplicand,c
  1175  0019B8  50F3               	movf	prodl,w,c
  1176  0019BA  262D               	addwf	___wmul@product+1,f,c
  1177  0019BC  C02C  F028         	movff	___wmul@product,?___wmul
  1178  0019C0  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1179  0019C4  D000               	goto	l280
  1180  0019C6                     l280:
  1181  0019C6  0012               	return		;funcret
  1182  0019C8                     __end_of___wmul:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function ___awdiv *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        2   39[COMRAM] int 
  1203 ;;  divisor         2   41[COMRAM] int 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  quotient        2   45[COMRAM] int 
  1206 ;;  sign            1   44[COMRAM] unsigned char 
  1207 ;;  counter         1   43[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        8 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sensorComputation
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  001836                     __ptext4:
  1233                           	opt stack 0
  1234  001836                     ___awdiv:
  1235                           	opt stack 24
  1236                           
  1237                           ;incstack = 0
  1238  001836  0E00               	movlw	0
  1239  001838  6E2D               	movwf	___awdiv@sign,c
  1240  00183A  AE2B               	btfss	___awdiv@divisor+1,7,c
  1241  00183C  D007               	goto	l1695
  1242  00183E  6C2A               	negf	___awdiv@divisor,c
  1243  001840  1E2B               	comf	___awdiv@divisor+1,f,c
  1244  001842  B0D8               	btfsc	status,0,c
  1245  001844  2A2B               	incf	___awdiv@divisor+1,f,c
  1246  001846  0E01               	movlw	1
  1247  001848  6E2D               	movwf	___awdiv@sign,c
  1248  00184A  D000               	goto	l1695
  1249  00184C                     l1695:
  1250  00184C  AE29               	btfss	___awdiv@dividend+1,7,c
  1251  00184E  D007               	goto	l1701
  1252  001850  6C28               	negf	___awdiv@dividend,c
  1253  001852  1E29               	comf	___awdiv@dividend+1,f,c
  1254  001854  B0D8               	btfsc	status,0,c
  1255  001856  2A29               	incf	___awdiv@dividend+1,f,c
  1256  001858  0E01               	movlw	1
  1257  00185A  1A2D               	xorwf	___awdiv@sign,f,c
  1258  00185C  D000               	goto	l1701
  1259  00185E                     l1701:
  1260  00185E  0E00               	movlw	0
  1261  001860  6E2F               	movwf	___awdiv@quotient+1,c
  1262  001862  0E00               	movlw	0
  1263  001864  6E2E               	movwf	___awdiv@quotient,c
  1264  001866  502A               	movf	___awdiv@divisor,w,c
  1265  001868  102B               	iorwf	___awdiv@divisor+1,w,c
  1266  00186A  B4D8               	btfsc	status,2,c
  1267  00186C  D021               	goto	l1723
  1268  00186E  0E01               	movlw	1
  1269  001870  6E2C               	movwf	___awdiv@counter,c
  1270  001872  D005               	goto	l1709
  1271  001874                     l1707:
  1272  001874  90D8               	bcf	status,0,c
  1273  001876  362A               	rlcf	___awdiv@divisor,f,c
  1274  001878  362B               	rlcf	___awdiv@divisor+1,f,c
  1275  00187A  2A2C               	incf	___awdiv@counter,f,c
  1276  00187C  D000               	goto	l1709
  1277  00187E                     l1709:
  1278  00187E  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1279  001880  D002               	goto	l1711
  1280  001882  D7F8               	goto	l1707
  1281  001884  D000               	goto	l1711
  1282  001886                     l1711:
  1283  001886  90D8               	bcf	status,0,c
  1284  001888  362E               	rlcf	___awdiv@quotient,f,c
  1285  00188A  362F               	rlcf	___awdiv@quotient+1,f,c
  1286  00188C  502A               	movf	___awdiv@divisor,w,c
  1287  00188E  5C28               	subwf	___awdiv@dividend,w,c
  1288  001890  502B               	movf	___awdiv@divisor+1,w,c
  1289  001892  5829               	subwfb	___awdiv@dividend+1,w,c
  1290  001894  A0D8               	btfss	status,0,c
  1291  001896  D006               	goto	l1719
  1292  001898  502A               	movf	___awdiv@divisor,w,c
  1293  00189A  5E28               	subwf	___awdiv@dividend,f,c
  1294  00189C  502B               	movf	___awdiv@divisor+1,w,c
  1295  00189E  5A29               	subwfb	___awdiv@dividend+1,f,c
  1296  0018A0  802E               	bsf	___awdiv@quotient,0,c
  1297  0018A2  D000               	goto	l1719
  1298  0018A4                     l1719:
  1299  0018A4  90D8               	bcf	status,0,c
  1300  0018A6  322B               	rrcf	___awdiv@divisor+1,f,c
  1301  0018A8  322A               	rrcf	___awdiv@divisor,f,c
  1302  0018AA  2E2C               	decfsz	___awdiv@counter,f,c
  1303  0018AC  D7EC               	goto	l1711
  1304  0018AE  D000               	goto	l1723
  1305  0018B0                     l1723:
  1306  0018B0  502D               	movf	___awdiv@sign,w,c
  1307  0018B2  B4D8               	btfsc	status,2,c
  1308  0018B4  D005               	goto	l1727
  1309  0018B6  6C2E               	negf	___awdiv@quotient,c
  1310  0018B8  1E2F               	comf	___awdiv@quotient+1,f,c
  1311  0018BA  B0D8               	btfsc	status,0,c
  1312  0018BC  2A2F               	incf	___awdiv@quotient+1,f,c
  1313  0018BE  D000               	goto	l1727
  1314  0018C0                     l1727:
  1315  0018C0  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1316  0018C4  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1317  0018C8  D000               	goto	l473
  1318  0018CA                     l473:
  1319  0018CA  0012               	return		;funcret
  1320  0018CC                     __end_of___awdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _MIN *****************
  1337 ;; Defined at:
  1338 ;;		line 175 in file "user.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               2   45[COMRAM] int 
  1341 ;;  b               2   47[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   45[COMRAM] int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        5 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sensorComputation
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  0019C8                     __ptext5:
  1369                           	opt stack 0
  1370  0019C8                     _MIN:
  1371                           	opt stack 24
  1372                           
  1373                           ;user.c: 177: if(a>b) return b;
  1374                           
  1375                           ;incstack = 0
  1376  0019C8  502E               	movf	MIN@a,w,c
  1377  0019CA  5C30               	subwf	MIN@b,w,c
  1378  0019CC  5031               	movf	MIN@b+1,w,c
  1379  0019CE  0A80               	xorlw	128
  1380  0019D0  6E32               	movwf	??_MIN& (0+255),c
  1381  0019D2  502F               	movf	MIN@a+1,w,c
  1382  0019D4  0A80               	xorlw	128
  1383  0019D6  5832               	subwfb	??_MIN& (0+255),w,c
  1384  0019D8  B0D8               	btfsc	status,0,c
  1385  0019DA  D005               	goto	l272
  1386  0019DC  C030  F02E         	movff	MIN@b,?_MIN
  1387  0019E0  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1388  0019E4  D004               	goto	l273
  1389  0019E6                     l272:
  1390                           
  1391                           ;user.c: 178: return a;
  1392  0019E6  C02E  F02E         	movff	MIN@a,?_MIN
  1393  0019EA  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1394  0019EE                     l273:
  1395  0019EE  0012               	return		;funcret
  1396  0019F0                     __end_of_MIN:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postinc2	equ	0xFDE
  1407                           postdec2	equ	0xFDD
  1408                           fsr2h	equ	0xFDA
  1409                           fsr2l	equ	0xFD9
  1410                           status	equ	0xFD8
  1411                           
  1412 ;; *************** function _MAX *****************
  1413 ;; Defined at:
  1414 ;;		line 181 in file "user.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2   45[COMRAM] int 
  1417 ;;  b               2   47[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   45[COMRAM] int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;Total ram usage:        5 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    4
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_sensorComputation
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  0019F0                     __ptext6:
  1445                           	opt stack 0
  1446  0019F0                     _MAX:
  1447                           	opt stack 24
  1448                           
  1449                           ;user.c: 183: if(a>b) return a;
  1450                           
  1451                           ;incstack = 0
  1452  0019F0  502E               	movf	MAX@a,w,c
  1453  0019F2  5C30               	subwf	MAX@b,w,c
  1454  0019F4  5031               	movf	MAX@b+1,w,c
  1455  0019F6  0A80               	xorlw	128
  1456  0019F8  6E32               	movwf	??_MAX& (0+255),c
  1457  0019FA  502F               	movf	MAX@a+1,w,c
  1458  0019FC  0A80               	xorlw	128
  1459  0019FE  5832               	subwfb	??_MAX& (0+255),w,c
  1460  001A00  B0D8               	btfsc	status,0,c
  1461  001A02  D005               	goto	l276
  1462  001A04  C02E  F02E         	movff	MAX@a,?_MAX
  1463  001A08  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1464  001A0C  D004               	goto	l277
  1465  001A0E                     l276:
  1466                           
  1467                           ;user.c: 184: return b;
  1468  001A0E  C030  F02E         	movff	MAX@b,?_MAX
  1469  001A12  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1470  001A16                     l277:
  1471  001A16  0012               	return		;funcret
  1472  001A18                     __end_of_MAX:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _InitApp *****************
  1489 ;; Defined at:
  1490 ;;		line 35 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    5
  1511 ;; This function calls:
  1512 ;;		_AlgorithmSelection
  1513 ;;		_delay
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  0018CC                     __ptext7:
  1521                           	opt stack 0
  1522  0018CC                     _InitApp:
  1523                           	opt stack 25
  1524                           
  1525                           ;user.c: 39: TRISC = 0;
  1526                           
  1527                           ;incstack = 0
  1528  0018CC  0E00               	movlw	0
  1529  0018CE  6E94               	movwf	3988,c	;volatile
  1530                           
  1531                           ;user.c: 43: TRISEbits.TRISE1=1;
  1532  0018D0  8296               	bsf	3990,1,c	;volatile
  1533                           
  1534                           ;user.c: 45: TRISEbits.TRISE2=1;
  1535  0018D2  8496               	bsf	3990,2,c	;volatile
  1536                           
  1537                           ;user.c: 47: TRISBbits.RB1=1;
  1538  0018D4  8293               	bsf	3987,1,c	;volatile
  1539                           
  1540                           ;user.c: 49: TRISBbits.RB0=1;
  1541  0018D6  8093               	bsf	3987,0,c	;volatile
  1542                           
  1543                           ;user.c: 52: TRISBbits.RB3=1;
  1544  0018D8  8693               	bsf	3987,3,c	;volatile
  1545                           
  1546                           ;user.c: 54: TRISBbits.RB2=1;
  1547  0018DA  8493               	bsf	3987,2,c	;volatile
  1548                           
  1549                           ;user.c: 58: ADCON1 =0b00000001;
  1550  0018DC  0E01               	movlw	1
  1551  0018DE  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;user.c: 63: ADCON2=0b00001010;
  1554  0018E0  0E0A               	movlw	10
  1555  0018E2  6EC0               	movwf	4032,c	;volatile
  1556                           
  1557                           ;user.c: 68: ADCON0=0b00101011;
  1558  0018E4  0E2B               	movlw	43
  1559  0018E6  6EC2               	movwf	4034,c	;volatile
  1560                           
  1561                           ;user.c: 77: T0CON = 0b11000100;
  1562  0018E8  0EC4               	movlw	196
  1563  0018EA  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;user.c: 85: INTCON2 = 0b11110100;
  1566  0018EC  0EF4               	movlw	244
  1567  0018EE  6EF1               	movwf	intcon2,c	;volatile
  1568                           
  1569                           ;user.c: 95: INTCON = 0b00100000;
  1570  0018F0  0E20               	movlw	32
  1571  0018F2  6EF2               	movwf	intcon,c	;volatile
  1572                           
  1573                           ;user.c: 105: AlgorithmSelection();
  1574  0018F4  EC0C  F00D         	call	_AlgorithmSelection	;wreg free
  1575                           
  1576                           ;user.c: 108: delay(1000);
  1577  0018F8  0E03               	movlw	3
  1578  0018FA  6E29               	movwf	delay@ms+1,c
  1579  0018FC  0EE8               	movlw	232
  1580  0018FE  6E28               	movwf	delay@ms,c
  1581  001900  ECA2  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 109: INTCONbits.GIE = 1;
  1584  001904  8EF2               	bsf	intcon,7,c	;volatile
  1585  001906  0012               	return		;funcret
  1586  001908                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   39[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   42[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  001944                     __ptext8:
  1636                           	opt stack 0
  1637  001944                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  001944  0E00               	movlw	0
  1644  001946  6E2C               	movwf	delay@x+1,c
  1645  001948  0E00               	movlw	0
  1646  00194A  6E2B               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  00194C  0E00               	movlw	0
  1650  00194E  6E2C               	movwf	delay@x+1,c
  1651  001950  0E00               	movlw	0
  1652  001952  6E2B               	movwf	delay@x,c
  1653  001954  D00A               	goto	l232
  1654  001956                     l1423:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001956  0E0B               	movlw	11
  1658  001958  6E2A               	movwf	??_delay& (0+255),c
  1659  00195A  0E62               	movlw	98
  1660  00195C                     u1547:
  1661  00195C  2EE8               	decfsz	wreg,f,c
  1662  00195E  D7FE               	goto	u1547
  1663  001960  2E2A               	decfsz	??_delay& (0+255),f,c
  1664  001962  D7FC               	goto	u1547
  1665  001964  D000               	nop2	
  1666  001966  4A2B               	infsnz	delay@x,f,c
  1667  001968  2A2C               	incf	delay@x+1,f,c
  1668  00196A                     l232:
  1669  00196A  5028               	movf	delay@ms,w,c
  1670  00196C  5C2B               	subwf	delay@x,w,c
  1671  00196E  5029               	movf	delay@ms+1,w,c
  1672  001970  582C               	subwfb	delay@x+1,w,c
  1673  001972  A0D8               	btfss	status,0,c
  1674  001974  D7F0               	goto	l1423
  1675  001976  0012               	return		;funcret
  1676  001978                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _AlgorithmSelection *****************
  1695 ;; Defined at:
  1696 ;;		line 112 in file "user.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_InitApp
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001A18                     __ptext9:
  1726                           	opt stack 0
  1727  001A18                     _AlgorithmSelection:
  1728                           	opt stack 25
  1729                           
  1730                           ;user.c: 114: ADCON0 = 0b00100111;
  1731                           
  1732                           ;incstack = 0
  1733  001A18  0E27               	movlw	39
  1734  001A1A  6EC2               	movwf	4034,c	;volatile
  1735                           
  1736                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1737  001A1C  82C2               	bsf	4034,1,c	;volatile
  1738                           
  1739                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1740  001A1E  D000               	goto	l241
  1741  001A20                     l241:
  1742  001A20  B2C2               	btfsc	4034,1,c	;volatile
  1743  001A22  D7FE               	goto	l241
  1744                           
  1745                           ;user.c: 119: if(ADRESL > 0b10000000)
  1746  001A24  0E80               	movlw	128
  1747  001A26  64C3               	cpfsgt	4035,c	;volatile
  1748  001A28  D002               	goto	l1027
  1749                           
  1750                           ;user.c: 120: algorithm = LEFTWALL;
  1751  001A2A  0E00               	movlw	0
  1752  001A2C  D001               	goto	L5
  1753  001A2E                     l1027:
  1754                           
  1755                           ;user.c: 121: else
  1756                           ;user.c: 122: algorithm = RIGHTWALL;
  1757  001A2E  0E01               	movlw	1
  1758  001A30                     L5:
  1759  001A30  6E55               	movwf	_algorithm,c
  1760  001A32  D000               	goto	l246
  1761  001A34                     l246:
  1762  001A34  0012               	return		;funcret
  1763  001A36                     __end_of_AlgorithmSelection:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _ConfigureOscillator *****************
  1782 ;; Defined at:
  1783 ;;		line 24 in file "system.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text10
  1812  001AAC                     __ptext10:
  1813                           	opt stack 0
  1814  001AAC                     _ConfigureOscillator:
  1815                           	opt stack 26
  1816                           
  1817                           ;system.c: 29: OSCCON = 0b01111100;
  1818                           
  1819                           ;incstack = 0
  1820  001AAC  0E7C               	movlw	124
  1821  001AAE  6ED3               	movwf	4051,c	;volatile
  1822                           
  1823                           ;system.c: 31: OSCTUNE = 0b01001111;
  1824  001AB0  0E4F               	movlw	79
  1825  001AB2  6E9B               	movwf	3995,c	;volatile
  1826  001AB4  0012               	return		;funcret
  1827  001AB6                     __end_of_ConfigureOscillator:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _low_isr *****************
  1846 ;; Defined at:
  1847 ;;		line 205 in file "interrupts.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:       17 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		Interrupt level 1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	intcodelo
  1876  000018                     __pintcodelo:
  1877                           	opt stack 0
  1878  000018                     _low_isr:
  1879                           	opt stack 24
  1880                           
  1881                           ;incstack = 0
  1882  000018  CFD8 F001          	movff	status,??_low_isr
  1883  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1884  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1885  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1886  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1887  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1888  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1889  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1890  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1891  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1892  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1893  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1894  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1895  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1896  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1897  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1898  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1899  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1900  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1901  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1902  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1903  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1904  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1905  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1906  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1907  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1908  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1909  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1910  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1911  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1912  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1913  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1914  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1915  00009C  C001  FFD8         	movff	??_low_isr,status
  1916  0000A0  0010               	retfie	
  1917  0000A2                     __end_of_low_isr:
  1918                           	opt stack 0
  1919                           pclatu	equ	0xFFB
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon2	equ	0xFF1
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           bsr	equ	0xFE0
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _high_isr *****************
  1943 ;; Defined at:
  1944 ;;		line 81 in file "interrupts.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		_KController
  1967 ;;		_Reversing
  1968 ;;		_forward
  1969 ;;		_merge
  1970 ;;		_moveMouse
  1971 ;;		_rotate
  1972 ;; This function is called by:
  1973 ;;		Interrupt level 2
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	intcode
  1978  000008                     __pintcode:
  1979                           	opt stack 0
  1980  000008                     _high_isr:
  1981                           	opt stack 24
  1982                           
  1983                           ;incstack = 0
  1984  000008  CFFA F01A          	movff	pclath,??_high_isr
  1985  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1986  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1987  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  1988                           pclatu	equ	0xFFB
  1989                           pclath	equ	0xFFA
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           intcon	equ	0xFF2
  1997                           intcon2	equ	0xFF1
  1998                           postinc0	equ	0xFEE
  1999                           fsr0h	equ	0xFEA
  2000                           fsr0l	equ	0xFE9
  2001                           wreg	equ	0xFE8
  2002                           fsr1h	equ	0xFE2
  2003                           fsr1l	equ	0xFE1
  2004                           bsr	equ	0xFE0
  2005                           postinc2	equ	0xFDE
  2006                           postdec2	equ	0xFDD
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011                           	psect	intcode_body
  2012  00100A                     __pintcode_body:
  2013                           	opt stack 24
  2014  00100A                     int_func:
  2015                           	opt stack 24
  2016  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2017  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2018  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2019  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2020  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2021  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2022  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2023  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2024  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2025  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2026  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2027  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2028                           
  2029                           ;interrupts.c: 100: if(INTCONbits.TMR0IF == 1)
  2030  001038  A4F2               	btfss	intcon,2,c	;volatile
  2031  00103A  D0FD               	goto	i2l78
  2032                           
  2033                           ;interrupts.c: 101: {
  2034                           ;interrupts.c: 102: if(MotorDelayCounter > 2)
  2035  00103C  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2036  00103E  D0F7               	goto	i2l1651
  2037  001040  504A               	movf	_MotorDelayCounter+1,w,c
  2038  001042  E104               	bnz	i2u106_40
  2039  001044  0E03               	movlw	3
  2040  001046  5C49               	subwf	_MotorDelayCounter,w,c
  2041  001048  A0D8               	btfss	status,0,c
  2042  00104A  D0F1               	goto	i2l1651
  2043  00104C                     i2u106_40:
  2044                           
  2045                           ;interrupts.c: 103: {
  2046                           ;interrupts.c: 105: if (ForwardCounter > 0)
  2047  00104C  BE46               	btfsc	_ForwardCounter+1,7,c
  2048  00104E  D008               	goto	i2l1573
  2049  001050  5046               	movf	_ForwardCounter+1,w,c
  2050  001052  E103               	bnz	i2u107_40
  2051  001054  0445               	decf	_ForwardCounter,w,c
  2052  001056  A0D8               	btfss	status,0,c
  2053  001058  D003               	goto	i2l1573
  2054  00105A                     i2u107_40:
  2055                           
  2056                           ;interrupts.c: 106: forward();
  2057  00105A  EC1B  F00D         	call	_forward	;wreg free
  2058  00105E  D0DB               	goto	i2l1649
  2059  001060                     i2l1573:
  2060                           
  2061                           ;interrupts.c: 107: else if (ReverseCounter > 0)
  2062  001060  BE4E               	btfsc	_ReverseCounter+1,7,c
  2063  001062  D008               	goto	i2l1577
  2064  001064  504E               	movf	_ReverseCounter+1,w,c
  2065  001066  E103               	bnz	i2u108_40
  2066  001068  044D               	decf	_ReverseCounter,w,c
  2067  00106A  A0D8               	btfss	status,0,c
  2068  00106C  D003               	goto	i2l1577
  2069  00106E                     i2u108_40:
  2070                           
  2071                           ;interrupts.c: 108: Reversing();
  2072  00106E  EC29  F00D         	call	_Reversing	;wreg free
  2073  001072  D0D1               	goto	i2l1649
  2074  001074                     i2l1577:
  2075                           
  2076                           ;interrupts.c: 109: else if(RotateCounter > 0)
  2077  001074  BE50               	btfsc	_RotateCounter+1,7,c
  2078  001076  D020               	goto	i2l1589
  2079  001078  5050               	movf	_RotateCounter+1,w,c
  2080  00107A  E103               	bnz	i2u109_40
  2081  00107C  044F               	decf	_RotateCounter,w,c
  2082  00107E  A0D8               	btfss	status,0,c
  2083  001080  D01B               	goto	i2l1589
  2084  001082                     i2u109_40:
  2085                           
  2086                           ;interrupts.c: 110: {
  2087                           ;interrupts.c: 111: if ((sensorValue[2] > 700 || sensorValue[3] > 700)) {
  2088  001082  BE42               	btfsc	_sensorValue+5,7,c
  2089  001084  D006               	goto	i2l1581
  2090  001086  0EBD               	movlw	189
  2091  001088  5C41               	subwf	_sensorValue+4,w,c
  2092  00108A  0E02               	movlw	2
  2093  00108C  5842               	subwfb	_sensorValue+5,w,c
  2094  00108E  B0D8               	btfsc	status,0,c
  2095  001090  D008               	goto	i2l1583
  2096  001092                     i2l1581:
  2097  001092  BE44               	btfsc	_sensorValue+7,7,c
  2098  001094  D00D               	goto	i2l1587
  2099  001096  0EBD               	movlw	189
  2100  001098  5C43               	subwf	_sensorValue+6,w,c
  2101  00109A  0E02               	movlw	2
  2102  00109C  5844               	subwfb	_sensorValue+7,w,c
  2103  00109E  A0D8               	btfss	status,0,c
  2104  0010A0  D007               	goto	i2l1587
  2105  0010A2                     i2l1583:
  2106                           
  2107                           ;interrupts.c: 113: ReverseCounter = 15;
  2108  0010A2  0E00               	movlw	0
  2109  0010A4  6E4E               	movwf	_ReverseCounter+1,c
  2110  0010A6  0E0F               	movlw	15
  2111  0010A8  6E4D               	movwf	_ReverseCounter,c
  2112                           
  2113                           ;interrupts.c: 114: Reversing();
  2114  0010AA  EC29  F00D         	call	_Reversing	;wreg free
  2115                           
  2116                           ;interrupts.c: 115: } else {
  2117  0010AE  D0B3               	goto	i2l1649
  2118  0010B0                     i2l1587:
  2119                           
  2120                           ;interrupts.c: 116: rotate(rotatingSide);
  2121  0010B0  5057               	movf	_rotatingSide,w,c
  2122  0010B2  EC84  F00C         	call	_rotate
  2123                           
  2124                           ;interrupts.c: 117: }
  2125                           ;interrupts.c: 118: }
  2126  0010B6  D0AF               	goto	i2l1649
  2127  0010B8                     i2l1589:
  2128                           
  2129                           ;interrupts.c: 119: else if (LTurnCounter > 0 || RTurnCounter > 0) {
  2130  0010B8  BE48               	btfsc	_LTurnCounter+1,7,c
  2131  0010BA  D005               	goto	i2l1591
  2132  0010BC  5048               	movf	_LTurnCounter+1,w,c
  2133  0010BE  E102               	bnz	i2u112_41
  2134  0010C0  0447               	decf	_LTurnCounter,w,c
  2135  0010C2  B0D8               	btfsc	status,0,c
  2136  0010C4                     i2u112_41:
  2137  0010C4  D0A8               	goto	i2l1649
  2138  0010C6                     i2l1591:
  2139  0010C6  BE4C               	btfsc	_RTurnCounter+1,7,c
  2140  0010C8  D007               	goto	i2l1593
  2141  0010CA  504C               	movf	_RTurnCounter+1,w,c
  2142  0010CC  E104               	bnz	i2u113_40
  2143  0010CE  044B               	decf	_RTurnCounter,w,c
  2144  0010D0  B0D8               	btfsc	status,0,c
  2145  0010D2  D0A1               	goto	i2l1649
  2146  0010D4  D001               	goto	i2l1593
  2147  0010D6                     i2u113_40:
  2148                           
  2149                           ;interrupts.c: 121: }
  2150  0010D6  D09F               	goto	i2l1649
  2151  0010D8                     i2l1593:
  2152                           
  2153                           ;interrupts.c: 122: else if (sensorValue[0] < 90 && algorithm == LEFTWALL)
  2154  0010D8  BE3E               	btfsc	_sensorValue+1,7,c
  2155  0010DA  D006               	goto	i2l1595
  2156  0010DC  503E               	movf	_sensorValue+1,w,c
  2157  0010DE  E113               	bnz	i2l1605
  2158  0010E0  0E5A               	movlw	90
  2159  0010E2  5C3D               	subwf	_sensorValue,w,c
  2160  0010E4  B0D8               	btfsc	status,0,c
  2161  0010E6  D00F               	goto	i2l1605
  2162  0010E8                     i2l1595:
  2163  0010E8  5055               	movf	_algorithm,w,c
  2164  0010EA  A4D8               	btfss	status,2,c
  2165  0010EC  D00C               	goto	i2l1605
  2166                           
  2167                           ;interrupts.c: 125: {
  2168                           ;interrupts.c: 127: ForwardCounter = 420;
  2169  0010EE  0E01               	movlw	1
  2170  0010F0  6E46               	movwf	_ForwardCounter+1,c
  2171  0010F2  0EA4               	movlw	164
  2172  0010F4  6E45               	movwf	_ForwardCounter,c
  2173                           
  2174                           ;interrupts.c: 131: forward();
  2175  0010F6  EC1B  F00D         	call	_forward	;wreg free
  2176                           
  2177                           ;interrupts.c: 132: RotateCounter = 167;
  2178  0010FA  0E00               	movlw	0
  2179  0010FC  6E50               	movwf	_RotateCounter+1,c
  2180  0010FE  0EA7               	movlw	167
  2181  001100  6E4F               	movwf	_RotateCounter,c
  2182                           
  2183                           ;interrupts.c: 133: rotatingSide = LEFT;
  2184  001102  0E00               	movlw	0
  2185  001104  D036               	goto	L6
  2186  001106                     i2l1605:
  2187                           
  2188                           ;interrupts.c: 138: else if (sensorValue[1] < 90 && (sensorValue[2] < 140 || sensorValue
      +                          [3] < 140)
  2189                           ;interrupts.c: 139: && sensorValue[0] > 90 && sensorValue[0] < 90 && algorithm == LEFTWA
      +                          LL)
  2190  001106  BE40               	btfsc	_sensorValue+3,7,c
  2191  001108  D006               	goto	i2l1607
  2192  00110A  5040               	movf	_sensorValue+3,w,c
  2193  00110C  E134               	bnz	i2l1625
  2194  00110E  0E5A               	movlw	90
  2195  001110  5C3F               	subwf	_sensorValue+2,w,c
  2196  001112  B0D8               	btfsc	status,0,c
  2197  001114  D030               	goto	i2l1625
  2198  001116                     i2l1607:
  2199  001116  BE42               	btfsc	_sensorValue+5,7,c
  2200  001118  D00E               	goto	i2l1611
  2201  00111A  5042               	movf	_sensorValue+5,w,c
  2202  00111C  E104               	bnz	i2u117_40
  2203  00111E  0E8C               	movlw	140
  2204  001120  5C41               	subwf	_sensorValue+4,w,c
  2205  001122  A0D8               	btfss	status,0,c
  2206  001124  D008               	goto	i2l1611
  2207  001126                     i2u117_40:
  2208  001126  BE44               	btfsc	_sensorValue+7,7,c
  2209  001128  D006               	goto	i2l1611
  2210  00112A  5044               	movf	_sensorValue+7,w,c
  2211  00112C  E124               	bnz	i2l1625
  2212  00112E  0E8C               	movlw	140
  2213  001130  5C43               	subwf	_sensorValue+6,w,c
  2214  001132  B0D8               	btfsc	status,0,c
  2215  001134  D020               	goto	i2l1625
  2216  001136                     i2l1611:
  2217  001136  BE3E               	btfsc	_sensorValue+1,7,c
  2218  001138  D01E               	goto	i2l1625
  2219  00113A  503E               	movf	_sensorValue+1,w,c
  2220  00113C  E104               	bnz	i2u119_40
  2221  00113E  0E5B               	movlw	91
  2222  001140  5C3D               	subwf	_sensorValue,w,c
  2223  001142  A0D8               	btfss	status,0,c
  2224  001144  D018               	goto	i2l1625
  2225  001146                     i2u119_40:
  2226  001146  BE3E               	btfsc	_sensorValue+1,7,c
  2227  001148  D006               	goto	i2l1615
  2228  00114A  503E               	movf	_sensorValue+1,w,c
  2229  00114C  E114               	bnz	i2l1625
  2230  00114E  0E5A               	movlw	90
  2231  001150  5C3D               	subwf	_sensorValue,w,c
  2232  001152  B0D8               	btfsc	status,0,c
  2233  001154  D010               	goto	i2l1625
  2234  001156                     i2l1615:
  2235  001156  5055               	movf	_algorithm,w,c
  2236  001158  A4D8               	btfss	status,2,c
  2237  00115A  D00D               	goto	i2l1625
  2238                           
  2239                           ;interrupts.c: 140: {
  2240                           ;interrupts.c: 142: ForwardCounter = 420;
  2241  00115C  0E01               	movlw	1
  2242  00115E  6E46               	movwf	_ForwardCounter+1,c
  2243  001160  0EA4               	movlw	164
  2244  001162  6E45               	movwf	_ForwardCounter,c
  2245                           
  2246                           ;interrupts.c: 145: forward();
  2247  001164  EC1B  F00D         	call	_forward	;wreg free
  2248                           
  2249                           ;interrupts.c: 146: RotateCounter = 167;
  2250  001168  0E00               	movlw	0
  2251  00116A  6E50               	movwf	_RotateCounter+1,c
  2252  00116C  0EA7               	movlw	167
  2253  00116E  6E4F               	movwf	_RotateCounter,c
  2254                           
  2255                           ;interrupts.c: 147: rotatingSide = RIGHT;
  2256  001170  0E01               	movlw	1
  2257  001172                     L6:
  2258  001172  6E57               	movwf	_rotatingSide,c
  2259                           
  2260                           ;interrupts.c: 151: }
  2261  001174  D050               	goto	i2l1649
  2262  001176                     i2l1625:
  2263                           
  2264                           ;interrupts.c: 152: else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2265                           ;interrupts.c: 153: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2266  001176  BE3E               	btfsc	_sensorValue+1,7,c
  2267  001178  D020               	goto	i2l1635
  2268  00117A  503E               	movf	_sensorValue+1,w,c
  2269  00117C  E104               	bnz	i2u122_40
  2270  00117E  0E5B               	movlw	91
  2271  001180  5C3D               	subwf	_sensorValue,w,c
  2272  001182  A0D8               	btfss	status,0,c
  2273  001184  D01A               	goto	i2l1635
  2274  001186                     i2u122_40:
  2275  001186  BE40               	btfsc	_sensorValue+3,7,c
  2276  001188  D018               	goto	i2l1635
  2277  00118A  5040               	movf	_sensorValue+3,w,c
  2278  00118C  E104               	bnz	i2u123_40
  2279  00118E  0E5B               	movlw	91
  2280  001190  5C3F               	subwf	_sensorValue+2,w,c
  2281  001192  A0D8               	btfss	status,0,c
  2282  001194  D012               	goto	i2l1635
  2283  001196                     i2u123_40:
  2284  001196  BE42               	btfsc	_sensorValue+5,7,c
  2285  001198  D00D               	goto	i2l1633
  2286  00119A  0EA4               	movlw	164
  2287  00119C  5C41               	subwf	_sensorValue+4,w,c
  2288  00119E  0E01               	movlw	1
  2289  0011A0  5842               	subwfb	_sensorValue+5,w,c
  2290  0011A2  B0D8               	btfsc	status,0,c
  2291  0011A4  BE44               	btfsc	_sensorValue+7,7,c
  2292  0011A6  D006               	goto	i2l1633
  2293  0011A8  0EA4               	movlw	164
  2294  0011AA  5C43               	subwf	_sensorValue+6,w,c
  2295  0011AC  0E01               	movlw	1
  2296  0011AE  5844               	subwfb	_sensorValue+7,w,c
  2297  0011B0  B0D8               	btfsc	status,0,c
  2298  0011B2  D003               	goto	i2l1635
  2299  0011B4                     i2l1633:
  2300                           
  2301                           ;interrupts.c: 154: {
  2302                           ;interrupts.c: 155: KController();
  2303  0011B4  ECAE  F00B         	call	_KController	;wreg free
  2304                           
  2305                           ;interrupts.c: 157: }else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2306  0011B8  D02E               	goto	i2l1649
  2307  0011BA                     i2l1635:
  2308                           
  2309                           ;interrupts.c: 158: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2310  0011BA  BE3E               	btfsc	_sensorValue+1,7,c
  2311  0011BC  D02C               	goto	i2l1649
  2312  0011BE  503E               	movf	_sensorValue+1,w,c
  2313  0011C0  E104               	bnz	i2u126_40
  2314  0011C2  0E5B               	movlw	91
  2315  0011C4  5C3D               	subwf	_sensorValue,w,c
  2316  0011C6  A0D8               	btfss	status,0,c
  2317  0011C8  D026               	goto	i2l1649
  2318  0011CA                     i2u126_40:
  2319  0011CA  BE40               	btfsc	_sensorValue+3,7,c
  2320  0011CC  D024               	goto	i2l1649
  2321  0011CE  5040               	movf	_sensorValue+3,w,c
  2322  0011D0  E104               	bnz	i2u127_40
  2323  0011D2  0E5B               	movlw	91
  2324  0011D4  5C3F               	subwf	_sensorValue+2,w,c
  2325  0011D6  A0D8               	btfss	status,0,c
  2326  0011D8  D01E               	goto	i2l1649
  2327  0011DA                     i2u127_40:
  2328  0011DA  BE42               	btfsc	_sensorValue+5,7,c
  2329  0011DC  D01C               	goto	i2l1649
  2330  0011DE  0EA5               	movlw	165
  2331  0011E0  5C41               	subwf	_sensorValue+4,w,c
  2332  0011E2  0E01               	movlw	1
  2333  0011E4  5842               	subwfb	_sensorValue+5,w,c
  2334  0011E6  B0D8               	btfsc	status,0,c
  2335  0011E8  BE44               	btfsc	_sensorValue+7,7,c
  2336  0011EA  D015               	goto	i2l1649
  2337  0011EC  0EA5               	movlw	165
  2338  0011EE  5C43               	subwf	_sensorValue+6,w,c
  2339  0011F0  0E01               	movlw	1
  2340  0011F2  5844               	subwfb	_sensorValue+7,w,c
  2341  0011F4  A0D8               	btfss	status,0,c
  2342  0011F6  D00F               	goto	i2l1649
  2343  0011F8  BE50               	btfsc	_RotateCounter+1,7,c
  2344  0011FA  D005               	goto	i2l1645
  2345  0011FC  5050               	movf	_RotateCounter+1,w,c
  2346  0011FE  E10B               	bnz	i2l1649
  2347  001200  044F               	decf	_RotateCounter,w,c
  2348  001202  B0D8               	btfsc	status,0,c
  2349  001204  D008               	goto	i2l1649
  2350  001206                     i2l1645:
  2351                           
  2352                           ;interrupts.c: 159: {
  2353                           ;interrupts.c: 160: RotateCounter = 167*2;
  2354  001206  0E01               	movlw	1
  2355  001208  6E50               	movwf	_RotateCounter+1,c
  2356  00120A  0E4E               	movlw	78
  2357  00120C  6E4F               	movwf	_RotateCounter,c
  2358                           
  2359                           ;interrupts.c: 161: rotate(rotatingSide);
  2360  00120E  5057               	movf	_rotatingSide,w,c
  2361  001210  EC84  F00C         	call	_rotate
  2362  001214  D000               	goto	i2l1649
  2363  001216                     i2l1649:
  2364                           
  2365                           ;interrupts.c: 162: }
  2366                           ;interrupts.c: 190: moveMouse(merge(LMotorCounter,RMotorCounter));
  2367  001216  C054  F012         	movff	_RMotorCounter,merge@right
  2368  00121A  5053               	movf	_LMotorCounter,w,c
  2369  00121C  EC4E  F00D         	call	_merge
  2370  001220  EC5B  F00D         	call	_moveMouse
  2371                           
  2372                           ;interrupts.c: 191: MotorDelayCounter = 0;
  2373  001224  0E00               	movlw	0
  2374  001226  6E4A               	movwf	_MotorDelayCounter+1,c
  2375  001228  0E00               	movlw	0
  2376  00122A  6E49               	movwf	_MotorDelayCounter,c
  2377  00122C  D000               	goto	i2l1651
  2378  00122E                     i2l1651:
  2379                           
  2380                           ;interrupts.c: 193: }
  2381                           ;interrupts.c: 195: MotorDelayCounter++;
  2382  00122E  4A49               	infsnz	_MotorDelayCounter,f,c
  2383  001230  2A4A               	incf	_MotorDelayCounter+1,f,c
  2384                           
  2385                           ;interrupts.c: 196: INTCONbits.TMR0IF = 0;
  2386  001232  94F2               	bcf	intcon,2,c	;volatile
  2387  001234  D000               	goto	i2l78
  2388  001236                     i2l78:
  2389  001236  C027  FFF5         	movff	??_high_isr+13,tablat
  2390  00123A  C026  FFF8         	movff	??_high_isr+12,tblptru
  2391  00123E  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2392  001242  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2393  001246  C023  FFF4         	movff	??_high_isr+9,prodh
  2394  00124A  C022  FFF3         	movff	??_high_isr+8,prodl
  2395  00124E  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2396  001252  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2397  001256  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2398  00125A  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2399  00125E  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2400  001262  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2401  001266  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2402  00126A  C01A  FFFA         	movff	??_high_isr,pclath
  2403  00126E  0011               	retfie		f
  2404  001270                     __end_of_high_isr:
  2405                           	opt stack 0
  2406                           pclatu	equ	0xFFB
  2407                           pclath	equ	0xFFA
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           intcon	equ	0xFF2
  2415                           intcon2	equ	0xFF1
  2416                           postinc0	equ	0xFEE
  2417                           fsr0h	equ	0xFEA
  2418                           fsr0l	equ	0xFE9
  2419                           wreg	equ	0xFE8
  2420                           fsr1h	equ	0xFE2
  2421                           fsr1l	equ	0xFE1
  2422                           bsr	equ	0xFE0
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           fsr2h	equ	0xFDA
  2426                           fsr2l	equ	0xFD9
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _rotate *****************
  2430 ;; Defined at:
  2431 ;;		line 342 in file "interrupts.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  side            1    wreg     enum E4082
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  side            1   19[COMRAM] enum E4082
  2436 ;; Return value:  Size  Location     Type
  2437 ;;		None               void
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;Total ram usage:        1 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    1
  2452 ;; This function calls:
  2453 ;;		_motorCounterUpdate
  2454 ;; This function is called by:
  2455 ;;		_high_isr
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text13
  2460  001908                     __ptext13:
  2461                           	opt stack 0
  2462  001908                     _rotate:
  2463                           	opt stack 24
  2464                           
  2465                           ;incstack = 0
  2466                           ;rotate@side stored from wreg
  2467  001908  6E14               	movwf	rotate@side,c
  2468                           
  2469                           ;interrupts.c: 344: if (side == LEFT){
  2470  00190A  5014               	movf	rotate@side,w,c
  2471  00190C  A4D8               	btfss	status,2,c
  2472  00190E  D00B               	goto	i2l1469
  2473                           
  2474                           ;interrupts.c: 345: motorCounterUpdate(RIGHT,0);
  2475  001910  0E00               	movlw	0
  2476  001912  6E12               	movwf	motorCounterUpdate@reverse,c
  2477  001914  0E01               	movlw	1
  2478  001916  EC34  F00B         	call	_motorCounterUpdate
  2479                           
  2480                           ;interrupts.c: 346: motorCounterUpdate(LEFT,1);
  2481  00191A  0E01               	movlw	1
  2482  00191C  6E12               	movwf	motorCounterUpdate@reverse,c
  2483  00191E  0E00               	movlw	0
  2484  001920  EC34  F00B         	call	_motorCounterUpdate
  2485                           
  2486                           ;interrupts.c: 347: } else {
  2487  001924  D00B               	goto	i2l1471
  2488  001926                     i2l1469:
  2489                           
  2490                           ;interrupts.c: 348: motorCounterUpdate(LEFT,0);
  2491  001926  0E00               	movlw	0
  2492  001928  6E12               	movwf	motorCounterUpdate@reverse,c
  2493  00192A  0E00               	movlw	0
  2494  00192C  EC34  F00B         	call	_motorCounterUpdate
  2495                           
  2496                           ;interrupts.c: 349: motorCounterUpdate(RIGHT,1);
  2497  001930  0E01               	movlw	1
  2498  001932  6E12               	movwf	motorCounterUpdate@reverse,c
  2499  001934  0E01               	movlw	1
  2500  001936  EC34  F00B         	call	_motorCounterUpdate
  2501  00193A  D000               	goto	i2l1471
  2502  00193C                     i2l1471:
  2503                           
  2504                           ;interrupts.c: 350: }
  2505                           ;interrupts.c: 351: RotateCounter--;
  2506  00193C  064F               	decf	_RotateCounter,f,c
  2507  00193E  A0D8               	btfss	status,0,c
  2508  001940  0650               	decf	_RotateCounter+1,f,c
  2509  001942  0012               	return		;funcret
  2510  001944                     __end_of_rotate:
  2511                           	opt stack 0
  2512                           pclatu	equ	0xFFB
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           intcon2	equ	0xFF1
  2522                           postinc0	equ	0xFEE
  2523                           fsr0h	equ	0xFEA
  2524                           fsr0l	equ	0xFE9
  2525                           wreg	equ	0xFE8
  2526                           fsr1h	equ	0xFE2
  2527                           fsr1l	equ	0xFE1
  2528                           bsr	equ	0xFE0
  2529                           postinc2	equ	0xFDE
  2530                           postdec2	equ	0xFDD
  2531                           fsr2h	equ	0xFDA
  2532                           fsr2l	equ	0xFD9
  2533                           status	equ	0xFD8
  2534                           
  2535 ;; *************** function _forward *****************
  2536 ;; Defined at:
  2537 ;;		line 373 in file "interrupts.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;		None
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;		None
  2542 ;; Return value:  Size  Location     Type
  2543 ;;		None               void
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;Total ram usage:        0 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    1
  2558 ;; This function calls:
  2559 ;;		_motorCounterUpdate
  2560 ;; This function is called by:
  2561 ;;		_high_isr
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text14
  2566  001A36                     __ptext14:
  2567                           	opt stack 0
  2568  001A36                     _forward:
  2569                           	opt stack 24
  2570                           
  2571                           ;interrupts.c: 375: motorCounterUpdate(RIGHT,0);
  2572                           
  2573                           ;incstack = 0
  2574  001A36  0E00               	movlw	0
  2575  001A38  6E12               	movwf	motorCounterUpdate@reverse,c
  2576  001A3A  0E01               	movlw	1
  2577  001A3C  EC34  F00B         	call	_motorCounterUpdate
  2578                           
  2579                           ;interrupts.c: 376: motorCounterUpdate(LEFT,0);
  2580  001A40  0E00               	movlw	0
  2581  001A42  6E12               	movwf	motorCounterUpdate@reverse,c
  2582  001A44  0E00               	movlw	0
  2583  001A46  EC34  F00B         	call	_motorCounterUpdate
  2584                           
  2585                           ;interrupts.c: 377: ForwardCounter--;
  2586  001A4A  0645               	decf	_ForwardCounter,f,c
  2587  001A4C  A0D8               	btfss	status,0,c
  2588  001A4E  0646               	decf	_ForwardCounter+1,f,c
  2589  001A50  0012               	return		;funcret
  2590  001A52                     __end_of_forward:
  2591                           	opt stack 0
  2592                           pclatu	equ	0xFFB
  2593                           pclath	equ	0xFFA
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           intcon2	equ	0xFF1
  2602                           postinc0	equ	0xFEE
  2603                           fsr0h	equ	0xFEA
  2604                           fsr0l	equ	0xFE9
  2605                           wreg	equ	0xFE8
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           bsr	equ	0xFE0
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _Reversing *****************
  2616 ;; Defined at:
  2617 ;;		line 366 in file "interrupts.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;		None               void
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		_motorCounterUpdate
  2640 ;; This function is called by:
  2641 ;;		_high_isr
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text15
  2646  001A52                     __ptext15:
  2647                           	opt stack 0
  2648  001A52                     _Reversing:
  2649                           	opt stack 24
  2650                           
  2651                           ;interrupts.c: 368: motorCounterUpdate(RIGHT,1);
  2652                           
  2653                           ;incstack = 0
  2654  001A52  0E01               	movlw	1
  2655  001A54  6E12               	movwf	motorCounterUpdate@reverse,c
  2656  001A56  0E01               	movlw	1
  2657  001A58  EC34  F00B         	call	_motorCounterUpdate
  2658                           
  2659                           ;interrupts.c: 369: motorCounterUpdate(LEFT,1);
  2660  001A5C  0E01               	movlw	1
  2661  001A5E  6E12               	movwf	motorCounterUpdate@reverse,c
  2662  001A60  0E00               	movlw	0
  2663  001A62  EC34  F00B         	call	_motorCounterUpdate
  2664                           
  2665                           ;interrupts.c: 370: ReverseCounter--;
  2666  001A66  064D               	decf	_ReverseCounter,f,c
  2667  001A68  A0D8               	btfss	status,0,c
  2668  001A6A  064E               	decf	_ReverseCounter+1,f,c
  2669  001A6C  0012               	return		;funcret
  2670  001A6E                     __end_of_Reversing:
  2671                           	opt stack 0
  2672                           pclatu	equ	0xFFB
  2673                           pclath	equ	0xFFA
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           intcon	equ	0xFF2
  2681                           intcon2	equ	0xFF1
  2682                           postinc0	equ	0xFEE
  2683                           fsr0h	equ	0xFEA
  2684                           fsr0l	equ	0xFE9
  2685                           wreg	equ	0xFE8
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           bsr	equ	0xFE0
  2689                           postinc2	equ	0xFDE
  2690                           postdec2	equ	0xFDD
  2691                           fsr2h	equ	0xFDA
  2692                           fsr2l	equ	0xFD9
  2693                           status	equ	0xFD8
  2694                           
  2695 ;; *************** function _KController *****************
  2696 ;; Defined at:
  2697 ;;		line 307 in file "interrupts.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;		None
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  diff            2   23[COMRAM] int 
  2702 ;;  correctTo       1   22[COMRAM] enum E4082
  2703 ;; Return value:  Size  Location     Type
  2704 ;;		None               void
  2705 ;; Registers used:
  2706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;Total ram usage:        5 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    1
  2719 ;; This function calls:
  2720 ;;		_ABS
  2721 ;;		_merge
  2722 ;;		_motorCounterUpdate
  2723 ;;		_moveMouse
  2724 ;; This function is called by:
  2725 ;;		_high_isr
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text16
  2730  00175C                     __ptext16:
  2731                           	opt stack 0
  2732  00175C                     _KController:
  2733                           	opt stack 24
  2734                           
  2735                           ;interrupts.c: 309: Side correctTo;
  2736                           ;interrupts.c: 310: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2737                           
  2738                           ;incstack = 0
  2739  00175C  EE20  F03F         	lfsr	2,_sensorValue+2
  2740  001760  CFDE F015          	movff	postinc2,??_KController
  2741  001764  CFDD F016          	movff	postdec2,??_KController+1
  2742  001768  1E15               	comf	??_KController,f,c
  2743  00176A  1E16               	comf	??_KController+1,f,c
  2744  00176C  4A15               	infsnz	??_KController,f,c
  2745  00176E  2A16               	incf	??_KController+1,f,c
  2746  001770  503D               	movf	_sensorValue,w,c
  2747  001772  2415               	addwf	??_KController,w,c
  2748  001774  6E12               	movwf	ABS@x,c
  2749  001776  503E               	movf	_sensorValue+1,w,c
  2750  001778  2016               	addwfc	??_KController+1,w,c
  2751  00177A  6E13               	movwf	ABS@x+1,c
  2752  00177C  EC37  F00D         	call	_ABS	;wreg free
  2753  001780  C012  F018         	movff	?_ABS,KController@diff
  2754  001784  C013  F019         	movff	?_ABS+1,KController@diff+1
  2755                           
  2756                           ;interrupts.c: 313: if(controllerSteps > 0)
  2757  001788  5058               	movf	_controllerSteps,w,c
  2758  00178A  B4D8               	btfsc	status,2,c
  2759  00178C  D00C               	goto	i2l1483
  2760                           
  2761                           ;interrupts.c: 314: {
  2762                           ;interrupts.c: 315: motorCounterUpdate(RIGHT,0);
  2763  00178E  0E00               	movlw	0
  2764  001790  6E12               	movwf	motorCounterUpdate@reverse,c
  2765  001792  0E01               	movlw	1
  2766  001794  EC34  F00B         	call	_motorCounterUpdate
  2767                           
  2768                           ;interrupts.c: 316: motorCounterUpdate(LEFT,0);
  2769  001798  0E00               	movlw	0
  2770  00179A  6E12               	movwf	motorCounterUpdate@reverse,c
  2771  00179C  0E00               	movlw	0
  2772  00179E  EC34  F00B         	call	_motorCounterUpdate
  2773                           
  2774                           ;interrupts.c: 317: controllerSteps--;
  2775  0017A2  0658               	decf	_controllerSteps,f,c
  2776                           
  2777                           ;interrupts.c: 318: return;
  2778  0017A4  D047               	goto	i2l133
  2779  0017A6                     i2l1483:
  2780                           
  2781                           ;interrupts.c: 319: }
  2782                           ;interrupts.c: 321: if(sensorValue[0] > sensorValue[1])
  2783  0017A6  503D               	movf	_sensorValue,w,c
  2784  0017A8  5C3F               	subwf	_sensorValue+2,w,c
  2785  0017AA  5040               	movf	_sensorValue+3,w,c
  2786  0017AC  0A80               	xorlw	128
  2787  0017AE  6E15               	movwf	??_KController& (0+255),c
  2788  0017B0  503E               	movf	_sensorValue+1,w,c
  2789  0017B2  0A80               	xorlw	128
  2790  0017B4  5815               	subwfb	??_KController& (0+255),w,c
  2791  0017B6  B0D8               	btfsc	status,0,c
  2792  0017B8  D00F               	goto	i2l1491
  2793                           
  2794                           ;interrupts.c: 322: {
  2795                           ;interrupts.c: 323: correctTo = LEFT;
  2796  0017BA  0E00               	movlw	0
  2797  0017BC  6E17               	movwf	KController@correctTo,c
  2798                           
  2799                           ;interrupts.c: 324: motorCounterUpdate(correctTo,0);
  2800  0017BE  0E00               	movlw	0
  2801  0017C0  6E12               	movwf	motorCounterUpdate@reverse,c
  2802  0017C2  5017               	movf	KController@correctTo,w,c
  2803  0017C4  EC34  F00B         	call	_motorCounterUpdate
  2804                           
  2805                           ;interrupts.c: 325: moveMouse(merge(LMotorCounter,RMotorCounter));
  2806  0017C8  C054  F012         	movff	_RMotorCounter,merge@right
  2807  0017CC  5053               	movf	_LMotorCounter,w,c
  2808  0017CE  EC4E  F00D         	call	_merge
  2809  0017D2  EC5B  F00D         	call	_moveMouse
  2810                           
  2811                           ;interrupts.c: 326: }
  2812  0017D6  D00F               	goto	i2l1497
  2813  0017D8                     i2l1491:
  2814                           
  2815                           ;interrupts.c: 327: else
  2816                           ;interrupts.c: 328: {
  2817                           ;interrupts.c: 329: correctTo = RIGHT;
  2818  0017D8  0E01               	movlw	1
  2819  0017DA  6E17               	movwf	KController@correctTo,c
  2820                           
  2821                           ;interrupts.c: 330: motorCounterUpdate(correctTo,0);
  2822  0017DC  0E00               	movlw	0
  2823  0017DE  6E12               	movwf	motorCounterUpdate@reverse,c
  2824  0017E0  5017               	movf	KController@correctTo,w,c
  2825  0017E2  EC34  F00B         	call	_motorCounterUpdate
  2826                           
  2827                           ;interrupts.c: 331: moveMouse(merge(LMotorCounter,RMotorCounter));
  2828  0017E6  C054  F012         	movff	_RMotorCounter,merge@right
  2829  0017EA  5053               	movf	_LMotorCounter,w,c
  2830  0017EC  EC4E  F00D         	call	_merge
  2831  0017F0  EC5B  F00D         	call	_moveMouse
  2832  0017F4  D000               	goto	i2l1497
  2833  0017F6                     i2l1497:
  2834                           
  2835                           ;interrupts.c: 332: }
  2836                           ;interrupts.c: 334: if(diff > 150)
  2837  0017F6  BE19               	btfsc	KController@diff+1,7,c
  2838  0017F8  D008               	goto	i2l1501
  2839  0017FA  5019               	movf	KController@diff+1,w,c
  2840  0017FC  E104               	bnz	i2u94_40
  2841  0017FE  0E97               	movlw	151
  2842  001800  5C18               	subwf	KController@diff,w,c
  2843  001802  A0D8               	btfss	status,0,c
  2844  001804  D002               	goto	i2l1501
  2845  001806                     i2u94_40:
  2846                           
  2847                           ;interrupts.c: 335: controllerSteps = 1;
  2848  001806  0E01               	movlw	1
  2849  001808  D013               	goto	L8
  2850  00180A                     i2l1501:
  2851                           
  2852                           ;interrupts.c: 336: else if(diff <= 150 && diff > 20)
  2853  00180A  BE19               	btfsc	KController@diff+1,7,c
  2854  00180C  D006               	goto	i2l1503
  2855  00180E  5019               	movf	KController@diff+1,w,c
  2856  001810  E10E               	bnz	i2l1507
  2857  001812  0E97               	movlw	151
  2858  001814  5C18               	subwf	KController@diff,w,c
  2859  001816  B0D8               	btfsc	status,0,c
  2860  001818  D00A               	goto	i2l1507
  2861  00181A                     i2l1503:
  2862  00181A  BE19               	btfsc	KController@diff+1,7,c
  2863  00181C  D008               	goto	i2l1507
  2864  00181E  5019               	movf	KController@diff+1,w,c
  2865  001820  E104               	bnz	i2u96_40
  2866  001822  0E15               	movlw	21
  2867  001824  5C18               	subwf	KController@diff,w,c
  2868  001826  A0D8               	btfss	status,0,c
  2869  001828  D002               	goto	i2l1507
  2870  00182A                     i2u96_40:
  2871                           
  2872                           ;interrupts.c: 337: controllerSteps = 4;
  2873  00182A  0E04               	movlw	4
  2874  00182C  D001               	goto	L8
  2875  00182E                     i2l1507:
  2876                           
  2877                           ;interrupts.c: 338: else
  2878                           ;interrupts.c: 339: controllerSteps = 8;
  2879  00182E  0E08               	movlw	8
  2880  001830                     L8:
  2881  001830  6E58               	movwf	_controllerSteps,c
  2882  001832  D000               	goto	i2l133
  2883  001834                     i2l133:
  2884  001834  0012               	return		;funcret
  2885  001836                     __end_of_KController:
  2886                           	opt stack 0
  2887                           pclatu	equ	0xFFB
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           intcon2	equ	0xFF1
  2897                           postinc0	equ	0xFEE
  2898                           fsr0h	equ	0xFEA
  2899                           fsr0l	equ	0xFE9
  2900                           wreg	equ	0xFE8
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           bsr	equ	0xFE0
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _moveMouse *****************
  2911 ;; Defined at:
  2912 ;;		line 294 in file "interrupts.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  action          1    wreg     unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  action          1   17[COMRAM] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;Total ram usage:        1 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_high_isr
  2936 ;;		_KController
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text17
  2941  001AB6                     __ptext17:
  2942                           	opt stack 0
  2943  001AB6                     _moveMouse:
  2944                           	opt stack 25
  2945                           
  2946                           ;incstack = 0
  2947                           ;moveMouse@action stored from wreg
  2948  001AB6  6E12               	movwf	moveMouse@action,c
  2949                           
  2950                           ;interrupts.c: 296: LATC = action;
  2951  001AB8  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2952  001ABC  0012               	return		;funcret
  2953  001ABE                     __end_of_moveMouse:
  2954                           	opt stack 0
  2955                           pclatu	equ	0xFFB
  2956                           pclath	equ	0xFFA
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           intcon2	equ	0xFF1
  2965                           postinc0	equ	0xFEE
  2966                           fsr0h	equ	0xFEA
  2967                           fsr0l	equ	0xFE9
  2968                           wreg	equ	0xFE8
  2969                           fsr1h	equ	0xFE2
  2970                           fsr1l	equ	0xFE1
  2971                           bsr	equ	0xFE0
  2972                           postinc2	equ	0xFDE
  2973                           postdec2	equ	0xFDD
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _motorCounterUpdate *****************
  2979 ;; Defined at:
  2980 ;;		line 242 in file "interrupts.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  side            1    wreg     enum E4082
  2983 ;;  reverse         1   17[COMRAM] unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  side            1   18[COMRAM] enum E4082
  2986 ;; Return value:  Size  Location     Type
  2987 ;;		None               void
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;Total ram usage:        2 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_KController
  3005 ;;		_rotate
  3006 ;;		_Reversing
  3007 ;;		_forward
  3008 ;;		_smoothTurn
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text18
  3013  001668                     __ptext18:
  3014                           	opt stack 0
  3015  001668                     _motorCounterUpdate:
  3016                           	opt stack 24
  3017                           
  3018                           ;incstack = 0
  3019                           ;motorCounterUpdate@side stored from wreg
  3020  001668  6E13               	movwf	motorCounterUpdate@side,c
  3021                           
  3022                           ;interrupts.c: 244: if(side == LEFT && reverse == 1)
  3023  00166A  5013               	movf	motorCounterUpdate@side,w,c
  3024  00166C  A4D8               	btfss	status,2,c
  3025  00166E  D01B               	goto	i2l1359
  3026  001670  0412               	decf	motorCounterUpdate@reverse,w,c
  3027  001672  B4D8               	btfsc	status,2,c
  3028  001674  D00B               	goto	i2l1357
  3029  001676  D017               	goto	i2l1359
  3030                           
  3031                           ;interrupts.c: 245: {
  3032                           ;interrupts.c: 246: switch(LMotorCounter)
  3033  001678  D009               	goto	i2l1357
  3034  00167A                     i2l1347:
  3035  00167A  0E02               	movlw	2
  3036  00167C  D004               	goto	L11
  3037  00167E                     i2l1349:
  3038  00167E  0E04               	movlw	4
  3039  001680  D002               	goto	L11
  3040                           
  3041                           ;interrupts.c: 250: case 0b00000100: LMotorCounter = 0b00001000; break;
  3042  001682  D03E               	goto	i2l1391
  3043                           
  3044                           ;interrupts.c: 251: case 0b00001000: LMotorCounter = 0b00000001; break;
  3045  001684  D039               	goto	i2l1385
  3046  001686                     L11:
  3047  001686  6E53               	movwf	_LMotorCounter,c
  3048  001688  D068               	goto	i2l119
  3049                           
  3050                           ;interrupts.c: 252: default: LMotorCounter = 0b00000001;
  3051  00168A  D036               	goto	i2l1385
  3052  00168C                     i2l1357:
  3053  00168C  5053               	movf	_LMotorCounter,w,c
  3054                           
  3055                           ; Switch size 1, requested type "space"
  3056                           ; Number of cases is 4, Range of values is 1 to 8
  3057                           ; switch strategies available:
  3058                           ; Name         Instructions Cycles
  3059                           ; simple_byte           13     7 (average)
  3060                           ;	Chosen strategy is simple_byte
  3061  00168E  0A01               	xorlw	1	; case 1
  3062  001690  B4D8               	btfsc	status,2,c
  3063  001692  D7F3               	goto	i2l1347
  3064  001694  0A03               	xorlw	3	; case 2
  3065  001696  B4D8               	btfsc	status,2,c
  3066  001698  D7F2               	goto	i2l1349
  3067  00169A  0A06               	xorlw	6	; case 4
  3068  00169C  B4D8               	btfsc	status,2,c
  3069  00169E  D030               	goto	i2l1391
  3070  0016A0  0A0C               	xorlw	12	; case 8
  3071  0016A2  D02A               	goto	i2l1385
  3072                           
  3073                           ;interrupts.c: 254: } else if(side == RIGHT && reverse == 1)
  3074  0016A4  D05A               	goto	i2l119
  3075  0016A6                     i2l1359:
  3076  0016A6  0413               	decf	motorCounterUpdate@side,w,c
  3077  0016A8  A4D8               	btfss	status,2,c
  3078  0016AA  D01D               	goto	i2l1377
  3079  0016AC  0412               	decf	motorCounterUpdate@reverse,w,c
  3080  0016AE  B4D8               	btfsc	status,2,c
  3081  0016B0  D00B               	goto	i2l1375
  3082  0016B2  D019               	goto	i2l1377
  3083                           
  3084                           ;interrupts.c: 255: {
  3085                           ;interrupts.c: 256: switch(RMotorCounter)
  3086  0016B4  D009               	goto	i2l1375
  3087  0016B6                     i2l1365:
  3088  0016B6  0E08               	movlw	8
  3089  0016B8  D040               	goto	L19
  3090  0016BA                     i2l1367:
  3091  0016BA  0E01               	movlw	1
  3092  0016BC  D03E               	goto	L19
  3093  0016BE                     i2l1369:
  3094  0016BE  0E02               	movlw	2
  3095  0016C0  D03C               	goto	L19
  3096  0016C2                     i2l1371:
  3097  0016C2  0E04               	movlw	4
  3098  0016C4  D03A               	goto	L19
  3099                           
  3100                           ;interrupts.c: 262: default: RMotorCounter = 0b00001000;
  3101  0016C6  D7F7               	goto	i2l1365
  3102  0016C8                     i2l1375:
  3103  0016C8  5054               	movf	_RMotorCounter,w,c
  3104                           
  3105                           ; Switch size 1, requested type "space"
  3106                           ; Number of cases is 4, Range of values is 1 to 8
  3107                           ; switch strategies available:
  3108                           ; Name         Instructions Cycles
  3109                           ; simple_byte           13     7 (average)
  3110                           ;	Chosen strategy is simple_byte
  3111  0016CA  0A01               	xorlw	1	; case 1
  3112  0016CC  B4D8               	btfsc	status,2,c
  3113  0016CE  D7F3               	goto	i2l1365
  3114  0016D0  0A03               	xorlw	3	; case 2
  3115  0016D2  B4D8               	btfsc	status,2,c
  3116  0016D4  D7F2               	goto	i2l1367
  3117  0016D6  0A06               	xorlw	6	; case 4
  3118  0016D8  B4D8               	btfsc	status,2,c
  3119  0016DA  D7F1               	goto	i2l1369
  3120  0016DC  0A0C               	xorlw	12	; case 8
  3121  0016DE  B4D8               	btfsc	status,2,c
  3122  0016E0  D7F0               	goto	i2l1371
  3123  0016E2  D7E9               	goto	i2l1365
  3124                           
  3125                           ;interrupts.c: 264: } else if(side == LEFT && reverse == 0)
  3126  0016E4  D03A               	goto	i2l119
  3127  0016E6                     i2l1377:
  3128  0016E6  5013               	movf	motorCounterUpdate@side,w,c
  3129  0016E8  A4D8               	btfss	status,2,c
  3130  0016EA  D01B               	goto	i2l1395
  3131  0016EC  5012               	movf	motorCounterUpdate@reverse,w,c
  3132  0016EE  B4D8               	btfsc	status,2,c
  3133  0016F0  D009               	goto	i2l1393
  3134  0016F2  D017               	goto	i2l1395
  3135                           
  3136                           ;interrupts.c: 265: {
  3137                           ;interrupts.c: 266: switch(LMotorCounter)
  3138  0016F4  D007               	goto	i2l1393
  3139                           
  3140                           ;interrupts.c: 267: {
  3141                           ;interrupts.c: 268: case 0b00000001: LMotorCounter = 0b00001000; break;
  3142  0016F6  D004               	goto	i2l1391
  3143  0016F8                     i2l1385:
  3144  0016F8  0E01               	movlw	1
  3145  0016FA  D7C5               	goto	L11
  3146                           
  3147                           ;interrupts.c: 270: case 0b00000100: LMotorCounter = 0b00000010; break;
  3148  0016FC  D7BE               	goto	i2l1347
  3149                           
  3150                           ;interrupts.c: 271: case 0b00001000: LMotorCounter = 0b00000100; break;
  3151  0016FE  D7BF               	goto	i2l1349
  3152  001700                     i2l1391:
  3153  001700  0E08               	movlw	8
  3154  001702  D7C1               	goto	L11
  3155  001704                     i2l1393:
  3156  001704  5053               	movf	_LMotorCounter,w,c
  3157                           
  3158                           ; Switch size 1, requested type "space"
  3159                           ; Number of cases is 4, Range of values is 1 to 8
  3160                           ; switch strategies available:
  3161                           ; Name         Instructions Cycles
  3162                           ; simple_byte           13     7 (average)
  3163                           ;	Chosen strategy is simple_byte
  3164  001706  0A01               	xorlw	1	; case 1
  3165  001708  B4D8               	btfsc	status,2,c
  3166  00170A  D7FA               	goto	i2l1391
  3167  00170C  0A03               	xorlw	3	; case 2
  3168  00170E  B4D8               	btfsc	status,2,c
  3169  001710  D7F3               	goto	i2l1385
  3170  001712  0A06               	xorlw	6	; case 4
  3171  001714  B4D8               	btfsc	status,2,c
  3172  001716  D7B1               	goto	i2l1347
  3173  001718  0A0C               	xorlw	12	; case 8
  3174  00171A  B4D8               	btfsc	status,2,c
  3175  00171C  D7B0               	goto	i2l1349
  3176  00171E  D7F0               	goto	i2l1391
  3177                           
  3178                           ;interrupts.c: 274: } else if(side == RIGHT && reverse == 0)
  3179  001720  D01C               	goto	i2l119
  3180  001722                     i2l1395:
  3181  001722  0413               	decf	motorCounterUpdate@side,w,c
  3182  001724  A4D8               	btfss	status,2,c
  3183  001726  D019               	goto	i2l119
  3184  001728  5012               	movf	motorCounterUpdate@reverse,w,c
  3185  00172A  B4D8               	btfsc	status,2,c
  3186  00172C  D009               	goto	i2l1411
  3187  00172E  D015               	goto	i2l119
  3188                           
  3189                           ;interrupts.c: 275: {
  3190                           ;interrupts.c: 276: switch(RMotorCounter)
  3191  001730  D007               	goto	i2l1411
  3192                           
  3193                           ;interrupts.c: 277: {
  3194                           ;interrupts.c: 278: case 0b00000001: RMotorCounter = 0b00000010; break;
  3195  001732  D7C5               	goto	i2l1369
  3196                           
  3197                           ;interrupts.c: 279: case 0b00000010: RMotorCounter = 0b00000100; break;
  3198  001734  D7C6               	goto	i2l1371
  3199                           
  3200                           ;interrupts.c: 280: case 0b00000100: RMotorCounter = 0b00001000; break;
  3201  001736  D7BF               	goto	i2l1365
  3202                           
  3203                           ;interrupts.c: 281: case 0b00001000: RMotorCounter = 0b00000001; break;
  3204  001738  D7C0               	goto	i2l1367
  3205  00173A                     L19:
  3206  00173A  6E54               	movwf	_RMotorCounter,c
  3207  00173C  D00E               	goto	i2l119
  3208                           
  3209                           ;interrupts.c: 282: default: RMotorCounter = 0b00000001;
  3210  00173E  D7BD               	goto	i2l1367
  3211  001740                     i2l1411:
  3212  001740  5054               	movf	_RMotorCounter,w,c
  3213                           
  3214                           ; Switch size 1, requested type "space"
  3215                           ; Number of cases is 4, Range of values is 1 to 8
  3216                           ; switch strategies available:
  3217                           ; Name         Instructions Cycles
  3218                           ; simple_byte           13     7 (average)
  3219                           ;	Chosen strategy is simple_byte
  3220  001742  0A01               	xorlw	1	; case 1
  3221  001744  B4D8               	btfsc	status,2,c
  3222  001746  D7BB               	goto	i2l1369
  3223  001748  0A03               	xorlw	3	; case 2
  3224  00174A  B4D8               	btfsc	status,2,c
  3225  00174C  D7BA               	goto	i2l1371
  3226  00174E  0A06               	xorlw	6	; case 4
  3227  001750  B4D8               	btfsc	status,2,c
  3228  001752  D7B1               	goto	i2l1365
  3229  001754  0A0C               	xorlw	12	; case 8
  3230  001756  D7B1               	goto	i2l1367
  3231  001758  D000               	goto	i2l119
  3232  00175A                     i2l119:
  3233  00175A  0012               	return		;funcret
  3234  00175C                     __end_of_motorCounterUpdate:
  3235                           	opt stack 0
  3236                           pclatu	equ	0xFFB
  3237                           pclath	equ	0xFFA
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           prodh	equ	0xFF4
  3243                           prodl	equ	0xFF3
  3244                           intcon	equ	0xFF2
  3245                           intcon2	equ	0xFF1
  3246                           postinc0	equ	0xFEE
  3247                           fsr0h	equ	0xFEA
  3248                           fsr0l	equ	0xFE9
  3249                           wreg	equ	0xFE8
  3250                           fsr1h	equ	0xFE2
  3251                           fsr1l	equ	0xFE1
  3252                           bsr	equ	0xFE0
  3253                           postinc2	equ	0xFDE
  3254                           postdec2	equ	0xFDD
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _merge *****************
  3260 ;; Defined at:
  3261 ;;		line 287 in file "interrupts.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  left            1    wreg     unsigned char 
  3264 ;;  right           1   17[COMRAM] unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  left            1   18[COMRAM] unsigned char 
  3267 ;;  merged          1   19[COMRAM] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      unsigned char 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        3 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_high_isr
  3287 ;;		_KController
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text19
  3292  001A9C                     __ptext19:
  3293                           	opt stack 0
  3294  001A9C                     _merge:
  3295                           	opt stack 25
  3296                           
  3297                           ;incstack = 0
  3298                           ;merge@left stored from wreg
  3299  001A9C  6E13               	movwf	merge@left,c
  3300                           
  3301                           ;interrupts.c: 289: unsigned char merged;
  3302                           ;interrupts.c: 290: merged = left + (right << 4);
  3303  001A9E  3812               	swapf	merge@right,w,c
  3304  001AA0  0BF0               	andlw	240
  3305  001AA2  2413               	addwf	merge@left,w,c
  3306  001AA4  6E14               	movwf	merge@merged,c
  3307                           
  3308                           ;interrupts.c: 291: return merged;
  3309  001AA6  5014               	movf	merge@merged,w,c
  3310  001AA8  D000               	goto	i2l122
  3311  001AAA                     i2l122:
  3312  001AAA  0012               	return		;funcret
  3313  001AAC                     __end_of_merge:
  3314                           	opt stack 0
  3315                           pclatu	equ	0xFFB
  3316                           pclath	equ	0xFFA
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           intcon2	equ	0xFF1
  3325                           postinc0	equ	0xFEE
  3326                           fsr0h	equ	0xFEA
  3327                           fsr0l	equ	0xFE9
  3328                           wreg	equ	0xFE8
  3329                           fsr1h	equ	0xFE2
  3330                           fsr1l	equ	0xFE1
  3331                           bsr	equ	0xFE0
  3332                           postinc2	equ	0xFDE
  3333                           postdec2	equ	0xFDD
  3334                           fsr2h	equ	0xFDA
  3335                           fsr2l	equ	0xFD9
  3336                           status	equ	0xFD8
  3337                           
  3338 ;; *************** function _ABS *****************
  3339 ;; Defined at:
  3340 ;;		line 300 in file "interrupts.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  x               2   17[COMRAM] int 
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;		None
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  2   17[COMRAM] int 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2, status,0
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;Total ram usage:        2 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_KController
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text20
  3368  001A6E                     __ptext20:
  3369                           	opt stack 0
  3370  001A6E                     _ABS:
  3371                           	opt stack 24
  3372                           
  3373                           ;interrupts.c: 302: if(x<0) x = -x;
  3374                           
  3375                           ;incstack = 0
  3376  001A6E  AE13               	btfss	ABS@x+1,7,c
  3377  001A70  D005               	goto	i2l1417
  3378  001A72  6C12               	negf	ABS@x,c
  3379  001A74  1E13               	comf	ABS@x+1,f,c
  3380  001A76  B0D8               	btfsc	status,0,c
  3381  001A78  2A13               	incf	ABS@x+1,f,c
  3382  001A7A  D000               	goto	i2l1417
  3383  001A7C                     i2l1417:
  3384                           
  3385                           ;interrupts.c: 303: return x;
  3386  001A7C  C012  F012         	movff	ABS@x,?_ABS
  3387  001A80  C013  F013         	movff	ABS@x+1,?_ABS+1
  3388  001A84  D000               	goto	i2l129
  3389  001A86                     i2l129:
  3390  001A86  0012               	return		;funcret
  3391  001A88                     __end_of_ABS:
  3392                           	opt stack 0
  3393                           pclatu	equ	0xFFB
  3394                           pclath	equ	0xFFA
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           intcon2	equ	0xFF1
  3403                           postinc0	equ	0xFEE
  3404                           fsr0h	equ	0xFEA
  3405                           fsr0l	equ	0xFE9
  3406                           wreg	equ	0xFE8
  3407                           fsr1h	equ	0xFE2
  3408                           fsr1l	equ	0xFE1
  3409                           bsr	equ	0xFE0
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           pclatu	equ	0xFFB
  3416                           pclath	equ	0xFFA
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           intcon	equ	0xFF2
  3424                           intcon2	equ	0xFF1
  3425                           postinc0	equ	0xFEE
  3426                           fsr0h	equ	0xFEA
  3427                           fsr0l	equ	0xFE9
  3428                           wreg	equ	0xFE8
  3429                           fsr1h	equ	0xFE2
  3430                           fsr1l	equ	0xFE1
  3431                           bsr	equ	0xFE0
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438                           	psect	rparam
  3439  0000                     pclatu	equ	0xFFB
  3440                           pclath	equ	0xFFA
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           intcon2	equ	0xFF1
  3449                           postinc0	equ	0xFEE
  3450                           fsr0h	equ	0xFEA
  3451                           fsr0l	equ	0xFE9
  3452                           wreg	equ	0xFE8
  3453                           fsr1h	equ	0xFE2
  3454                           fsr1l	equ	0xFE1
  3455                           bsr	equ	0xFE0
  3456                           postinc2	equ	0xFDE
  3457                           postdec2	equ	0xFDD
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60      88
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             54 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4409
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     940
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1392
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     918
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      58       1       69.3%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6       6        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 17 16:45:48 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l232 196A                           l241 1A20                           l246 1A34  
                         l262 14FC                           l255 149A                           l272 19E6  
                         l280 19C6                           l273 19EE                           l276 1A0E  
                         l277 1A16                           l473 18CA                           _ABS 1A6E  
                __CFG_CPB$OFF 000000                           _MAX 19F0                           _MIN 19C8  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A36                  _rotatingSide 0057  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1027 1A2E                          l1423 1956  
                        l1701 185E                          l1711 1886                          l1801 1A92  
                        l1707 1874                          l1723 18B0                          l1709 187E  
                        l1727 18C0                          l1719 18A4                          l1743 12B8  
                        l1753 1422                          l1737 1294                          l1747 1318  
                        l1749 140C                          l1773 14E4                          l1695 184C  
                        l1783 1586                          l1791 1644                          l1767 14C0  
                        l1785 15DA                          l1787 162E                          l1795 165A  
                        u1410 1292                          u1420 12B6                          _LATC 000F8B  
                        u1460 14BE                          u1470 14E2                          u1547 195C  
                        u1495 1508                          i2l78 1236                          _main 1A88  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          fsr1l 000FE1                          fsr2l 000FD9  
                        pclat 000FFA                          prodh 000FF4                          prodl 000FF3  
                        start 00A2                 __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0033  
               __CFG_MCLRE$ON 000000                  ___param_bank 000010               __end_of_InitApp 1908  
                       ??_ABS 0014                         ??_MAX 0032                         ??_MIN 0032  
  __size_of_sensorComputation 022C                         ?_main 0001               __end_of___awdiv 18CC  
                       _T0CON 000FD5               ___awdiv@divisor 002A                         i2l122 1AAA  
                       i2l133 1834                         i2l119 175A                         i2l129 1A86  
             ___awdiv@counter 002C                         _TRISC 000F94           _ConfigureOscillator 1AAC  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1944  
                       _merge 1A9C               __end_of_forward 1A52               __end_of_low_isr 00A2  
                       tablat 000FF5                         status 000FD8          ?_ConfigureOscillator 0001  
             __initialization 1978                  __end_of_main 1A9C                        ??_main 003D  
               __activetblptr 000002                        ?_delay 0028                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0028  
                      i2l1411 1740                        i2l1501 180A                        i2l1503 181A  
                      i2l1417 1A7C                        i2l1371 16C2                        i2l1347 167A  
                      i2l1507 182E                        i2l1611 1136                        i2l1365 16B6  
                      i2l1349 167E                        i2l1357 168C                        i2l1605 1106  
                      i2l1391 1700                        i2l1367 16BA                        i2l1375 16C8  
                      i2l1359 16A6                        i2l1471 193C                        i2l1615 1156  
                      i2l1607 1116                        i2l1385 16F8                        i2l1393 1704  
                      i2l1369 16BE                        i2l1377 16E6                        i2l1633 11B4  
                      i2l1625 1176                        i2l1395 1722                        i2l1491 17D8  
                      i2l1483 17A6                        i2l1635 11BA                        i2l1651 122E  
                      i2l1469 1926                        i2l1645 1206                        i2l1581 1092  
                      i2l1573 1060                        i2l1591 10C6                        i2l1583 10A2  
                      i2l1497 17F6                        i2l1593 10D8                        i2l1577 1074  
                      i2l1649 1216                        i2l1595 10E8                        i2l1587 10B0  
                      i2l1589 10B8                        _INTCON 000FF2                        _OSCCON 000FD3  
                   ??_InitApp 002D         ??_ConfigureOscillator 0028                   merge@merged 0014  
              __CFG_XINST$OFF 000000            sensorComputation@i 0086            sensorComputation@j 0088  
            __end_of_high_isr 1270                        ___wmul 19A0                     ??___awdiv 002C  
              __CFG_STVREN$ON 000000                        delay@x 002B                        clear_0 197E  
            ___awdiv@quotient 002E                        _rotate 1908            __size_of_Reversing 001C  
                __pdataCOMRAM 0058                     ??_forward 0014                  __mediumconst 0000  
                   ??_low_isr 0001                _ReverseCounter 004D                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 1996               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
                ?_KController 0001                __pcstackCOMRAM 0001                 __end_of_delay 1978  
             moveMouse@action 0012                 __end_of_merge 1AAC          KController@correctTo 0017  
  __end_of_motorCounterUpdate 175C                _ForwardCounter 0045                       ??_delay 002A  
                     ??_merge 0013            _AlgorithmSelection 1A18                  _LTurnCounter 0047  
           __end_of_Reversing 1A6E                    _delay_time 0051             _MotorDelayCounter 0049  
         ?_AlgorithmSelection 0001                       ?___wmul 0028            __size_of_moveMouse 0008  
                     ?_rotate 0001                       _INTCON2 000FF1                       _OSCTUNE 000F9B  
                     i2u94_40 1806                       i2u96_40 182A          ??_AlgorithmSelection 0028  
                   ?_high_isr 0001                 _LMotorCounter 0053                       _InitApp 18CC  
                     __Hparam 0000                       __Lparam 0000                       ___awdiv 1836  
             __size_of___wmul 0028                  __psmallconst 1000                       __pcinit 1978  
                     __ramtop 1000                       __ptext0 1A88                       __ptext1 149C  
                     __ptext2 1270                       __ptext3 19A0                       __ptext4 1836  
                     __ptext5 19C8                       __ptext6 19F0                       __ptext7 18CC  
                     __ptext8 1944                       __ptext9 1A18               __size_of_rotate 003C  
                __size_of_ABS 001A                  __size_of_MAX 0028                  __size_of_MIN 0028  
                     _forward 1A36                       delay@ms 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001A                __pintcode_body 100A  
        end_of_initialization 1996              _sensorCorrection 1001             __end_of_moveMouse 1ABE  
               __Lmediumconst 0000                       int_func 100A               _controllerSteps 0058  
                  _justTurned 0056          __size_of_KController 00DA                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                     _TRISBbits 000F93  
                   _TRISEbits 000F96                ??_sensorUpdate 0037   __end_of_ConfigureOscillator 1AB6  
                _RTurnCounter 004B                __end_of___wmul 19C8                 __pidataCOMRAM 1ABE  
              __end_of_rotate 1944           start_initialization 1978                   __end_of_ABS 1A88  
                 __end_of_MAX 1A18                   __end_of_MIN 19F0            _motorCounterUpdate 1668  
            __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012                    merge@right 0012  
                   _Reversing 1A52                      ??___wmul 002C              __CFG_LPT1OSC$OFF 000000  
                    ??_rotate 0014                _sensorLocation 1005          ??_motorCounterUpdate 0013  
                 __pbssCOMRAM 003D                 __pcstackBANK0 0080        sensorUpdate@sensorTemp 008A  
           __size_of_high_isr 1268                      ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000  
                  ?_Reversing 0001                     _algorithm 0055                     __pintcode 0008  
      motorCounterUpdate@side 0013                      ?___awdiv 0028          __end_of_sensorUpdate 1668  
      __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005                   __pintcodelo 0018  
                 __smallconst 1000                      ?_forward 0001                      ?_low_isr 0001  
              __size_of_delay 0034   __size_of_AlgorithmSelection 001E                __size_of_merge 0010  
              ___wmul@product 002C                     _moveMouse 1AB6                      i2u112_41 10C4  
                    i2u113_40 10D6                      i2u122_40 1186                      i2u106_40 104C  
                    i2u123_40 1196                      i2u107_40 105A                      i2u108_40 106E  
                    i2u117_40 1126                      i2u109_40 1082                      i2u126_40 11CA  
                    i2u127_40 11DA                      i2u119_40 1146              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0028                 _RMotorCounter 0054  
                  rotate@side 0014                 ??_KController 0015                    ?_moveMouse 0001  
            __size_of_InitApp 003C                      __Hrparam 0000                     merge@left 0013  
        sensorComputation@max 0080                      __Lrparam 0000          sensorComputation@min 0082  
        sensorComputation@sum 0084                   ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of_forward 001C              __size_of_low_isr 008A  
                    __ptext10 1AAC                      __ptext20 1A6E                      __ptext13 1908  
                    __ptext14 1A36                      __ptext15 1A52                      __ptext16 175C  
                    __ptext17 1AB6                      __ptext18 1668                      __ptext19 1A9C  
                    _high_isr 0008                 __size_of_main 0014                 _RotateCounter 004F  
       __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A           __end_of_KController 1836  
           _sensorComputation 1270                    _INTCONbits 000FF2            ?_sensorComputation 0033  
               sensorUpdate@i 00DA                 sensorUpdate@j 00DC                  _sensorUpdate 149C  
                    intlevel1 0000                      intlevel2 0000           ??_sensorComputation 0035  
                 ??_moveMouse 0012               KController@diff 0018     __end_of_sensorComputation 149C  
                 _sensorValue 003D   __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012  
                 _KController 175C  
