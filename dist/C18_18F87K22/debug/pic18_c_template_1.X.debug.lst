

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 10 19:39:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           	psect	smallconst
    26  001000                     __psmallconst:
    27                           	opt stack 0
    28  001000  00                 	db	0
    29  001001                     _sensorCorrection:
    30                           	opt stack 0
    31  001001  16                 	db	22
    32  001002  17                 	db	23
    33  001003  11                 	db	17
    34  001004  11                 	db	17
    35  001005                     __end_of_sensorCorrection:
    36                           	opt stack 0
    37  001005                     _sensorLocation:
    38                           	opt stack 0
    39  001005  1B                 	db	27
    40  001006  2B                 	db	43
    41  001007  1F                 	db	31
    42  001008  33                 	db	51
    43  001009                     __end_of_sensorLocation:
    44                           	opt stack 0
    45  0000                     _LATC	set	3979
    46  0000                     _OSCTUNE	set	3995
    47  0000                     _PORTBbits	set	3969
    48  0000                     _TRISBbits	set	3987
    49  0000                     _TRISC	set	3988
    50  0000                     _TRISEbits	set	3990
    51  0000                     _ADCON0	set	4034
    52  0000                     _ADCON0bits	set	4034
    53  0000                     _ADCON1	set	4033
    54  0000                     _ADCON2	set	4032
    55  0000                     _ADRESH	set	4036
    56  0000                     _ADRESL	set	4035
    57  0000                     _OSCCON	set	4051
    58  0000                     _T0CON	set	4053
    59  0000                     _INTCON	set	4082
    60  0000                     _INTCON2	set	4081
    61  0000                     _INTCONbits	set	4082
    62                           
    63                           ; #config settings
    64  001009  00                 	db	0	; dummy byte at the end
    65  0000                     
    66                           	psect	cinit
    67  001590                     __pcinit:
    68                           	opt stack 0
    69  001590                     start_initialization:
    70                           	opt stack 0
    71  001590                     __initialization:
    72                           	opt stack 0
    73                           
    74                           ; Clear objects allocated to COMRAM (19 bytes)
    75  001590  EE00  F03F         	lfsr	0,__pbssCOMRAM
    76  001594  0E13               	movlw	19
    77  001596                     clear_0:
    78  001596  6AEE               	clrf	postinc0,c
    79  001598  06E8               	decf	wreg,f,c
    80  00159A  E1FD               	bnz	clear_0
    81  00159C                     end_of_initialization:
    82                           	opt stack 0
    83  00159C                     __end_of__initialization:
    84                           	opt stack 0
    85  00159C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    86  00159E  6EF8               	movwf	tblptru,c
    87  0015A0  0100               	movlb	0
    88  0015A2  EFD3  F00A         	goto	_main	;jump to C main() function
    89                           tblptru	equ	0xFF8
    90                           postinc0	equ	0xFEE
    91                           wreg	equ	0xFE8
    92                           
    93                           	psect	bssCOMRAM
    94  00003F                     __pbssCOMRAM:
    95                           	opt stack 0
    96  00003F                     _sensorValue:
    97                           	opt stack 0
    98  00003F                     	ds	8
    99  000047                     _LMotorDelayCounter:
   100                           	opt stack 0
   101  000047                     	ds	2
   102  000049                     _MotorDelayCounter:
   103                           	opt stack 0
   104  000049                     	ds	2
   105  00004B                     _RMotorDelayCounter:
   106                           	opt stack 0
   107  00004B                     	ds	2
   108  00004D                     _delay_time:
   109                           	opt stack 0
   110  00004D                     	ds	2
   111  00004F                     _LMotorCounter:
   112                           	opt stack 0
   113  00004F                     	ds	1
   114  000050                     _RMotorCounter:
   115                           	opt stack 0
   116  000050                     	ds	1
   117  000051                     _algorithm:
   118                           	opt stack 0
   119  000051                     	ds	1
   120                           tblptru	equ	0xFF8
   121                           postinc0	equ	0xFEE
   122                           wreg	equ	0xFE8
   123                           
   124                           	psect	cstackBANK0
   125  000080                     __pcstackBANK0:
   126                           	opt stack 0
   127  000080                     sensorUpdate@sensorTemp:
   128                           	opt stack 0
   129                           
   130                           ; 80 bytes @ 0x0
   131  000080                     	ds	80
   132  0000D0                     sensorUpdate@i:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x50
   136  0000D0                     	ds	2
   137  0000D2                     sensorUpdate@j:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x52
   141  0000D2                     	ds	2
   142                           tblptru	equ	0xFF8
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           
   146                           	psect	cstackCOMRAM
   147  000001                     __pcstackCOMRAM:
   148                           	opt stack 0
   149  000001                     ??_low_isr:
   150  000001                     
   151                           ; 0 bytes @ 0x0
   152  000001                     	ds	17
   153  000012                     ??_high_isr:
   154                           
   155                           ; 0 bytes @ 0x11
   156  000012                     	ds	14
   157  000020                     ?___wmul:
   158                           	opt stack 0
   159  000020                     ?___awdiv:
   160                           	opt stack 0
   161  000020                     ___wmul@multiplier:
   162                           	opt stack 0
   163  000020                     ___awdiv@dividend:
   164                           	opt stack 0
   165                           
   166                           ; 2 bytes @ 0x1F
   167  000020                     	ds	2
   168  000022                     ___wmul@multiplicand:
   169                           	opt stack 0
   170  000022                     ___awdiv@divisor:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x21
   174  000022                     	ds	2
   175  000024                     ___awdiv@counter:
   176                           	opt stack 0
   177  000024                     ___wmul@product:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x23
   181  000024                     	ds	1
   182  000025                     ___awdiv@sign:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x24
   186  000025                     	ds	1
   187  000026                     ?_MIN:
   188                           	opt stack 0
   189  000026                     ?_MAX:
   190                           	opt stack 0
   191  000026                     MIN@a:
   192                           	opt stack 0
   193  000026                     MAX@a:
   194                           	opt stack 0
   195  000026                     ___awdiv@quotient:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x25
   199  000026                     	ds	2
   200  000028                     MIN@b:
   201                           	opt stack 0
   202  000028                     MAX@b:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x27
   206  000028                     	ds	2
   207  00002A                     ??_MIN:
   208  00002A                     ??_MAX:
   209                           
   210                           ; 0 bytes @ 0x29
   211  00002A                     	ds	1
   212  00002B                     sensorComputation@sensorTemp:
   213                           	opt stack 0
   214                           
   215                           ; 2 bytes @ 0x2A
   216  00002B                     	ds	2
   217  00002D                     ??_sensorComputation:
   218                           
   219                           ; 0 bytes @ 0x2C
   220  00002D                     	ds	2
   221  00002F                     sensorComputation@max:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x2E
   225  00002F                     	ds	2
   226  000031                     sensorComputation@min:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x30
   230  000031                     	ds	2
   231  000033                     sensorComputation@sum:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x32
   235  000033                     	ds	2
   236  000035                     sensorComputation@i:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x34
   240  000035                     	ds	2
   241  000037                     sensorComputation@j:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x36
   245  000037                     	ds	2
   246  000039                     ??_sensorUpdate:
   247                           
   248                           ; 0 bytes @ 0x38
   249  000039                     	ds	6
   250  00003F                     tblptru	equ	0xFF8
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           
   254                           ; 0 bytes @ 0x3E
   255 ;;
   256 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   257 ;;
   258 ;; *************** function _main *****************
   259 ;; Defined at:
   260 ;;		line 41 in file "main.c"
   261 ;; Parameters:    Size  Location     Type
   262 ;;		None
   263 ;; Auto vars:     Size  Location     Type
   264 ;;		None
   265 ;; Return value:  Size  Location     Type
   266 ;;		None               void
   267 ;; Registers used:
   268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   278 ;;Total ram usage:        0 bytes
   279 ;; Hardware stack levels required when called:    5
   280 ;; This function calls:
   281 ;;		_ConfigureOscillator
   282 ;;		_InitApp
   283 ;;		_sensorUpdate
   284 ;; This function is called by:
   285 ;;		Startup code after reset
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289                           	psect	text0
   290  0015A6                     __ptext0:
   291                           	opt stack 0
   292  0015A6                     _main:
   293                           	opt stack 26
   294                           
   295                           ;main.c: 44: ConfigureOscillator();
   296                           
   297                           ;incstack = 0
   298  0015A6  ECDD  F00A         	call	_ConfigureOscillator	;wreg free
   299                           
   300                           ;main.c: 47: InitApp();
   301  0015AA  EC71  F00A         	call	_InitApp	;wreg free
   302  0015AE  D000               	goto	l1098
   303  0015B0                     l1098:
   304                           
   305                           ;main.c: 50: {
   306                           ;main.c: 51: sensorUpdate();
   307  0015B0  ECF7  F008         	call	_sensorUpdate	;wreg free
   308  0015B4  D7FD               	goto	l1098
   309  0015B6  EF51  F000         	goto	start
   310  0015BA                     __end_of_main:
   311                           	opt stack 0
   312                           tblptru	equ	0xFF8
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316 ;; *************** function _sensorUpdate *****************
   317 ;; Defined at:
   318 ;;		line 136 in file "user.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;  sensorTemp     80    0[BANK0 ] int [10][4]
   323 ;;  j               2   82[BANK0 ] int 
   324 ;;  i               2   80[BANK0 ] int 
   325 ;; Return value:  Size  Location     Type
   326 ;;		None               void
   327 ;; Registers used:
   328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;Total ram usage:       90 bytes
   339 ;; Hardware stack levels used:    1
   340 ;; Hardware stack levels required when called:    4
   341 ;; This function calls:
   342 ;;		___wmul
   343 ;;		_sensorComputation
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text1
   350  0011EE                     __ptext1:
   351                           	opt stack 0
   352  0011EE                     _sensorUpdate:
   353                           	opt stack 26
   354                           
   355                           ;user.c: 138: int i,j;
   356                           ;user.c: 139: int sensorTemp[4][10];
   357                           ;user.c: 142: for(i = 0; i < 10; i++)
   358                           
   359                           ;incstack = 0
   360  0011EE  0E00               	movlw	0
   361  0011F0  0100               	movlb	0	; () banked
   362  0011F2  6FD1               	movwf	(sensorUpdate@i+1)& (0+255),b
   363  0011F4  0E00               	movlw	0
   364  0011F6  6FD0               	movwf	sensorUpdate@i& (0+255),b
   365                           
   366                           ; BSR set to: 0
   367  0011F8  0100               	movlb	0	; () banked
   368  0011FA  BFD1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   369  0011FC  D00A               	goto	l1066
   370  0011FE  0100               	movlb	0	; () banked
   371  001200  51D1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   372  001202  E106               	bnz	u440
   373  001204  0E0A               	movlw	10
   374  001206  0100               	movlb	0	; () banked
   375  001208  5DD0               	subwf	sensorUpdate@i& (0+255),w,b
   376  00120A  B0D8               	btfsc	status,0,c
   377  00120C  D0CF               	goto	l1094
   378  00120E  D001               	goto	l1066
   379  001210                     u440:
   380                           
   381                           ; BSR set to: 0
   382  001210  D0CD               	goto	l1094
   383  001212                     l1066:
   384                           
   385                           ; BSR set to: 0
   386                           ;user.c: 143: {
   387                           ;user.c: 144: for(j = 0 ; j < 4 ; j++)
   388  001212  0E00               	movlw	0
   389  001214  0100               	movlb	0	; () banked
   390  001216  6FD3               	movwf	(sensorUpdate@j+1)& (0+255),b
   391  001218  0E00               	movlw	0
   392  00121A  6FD2               	movwf	sensorUpdate@j& (0+255),b
   393                           
   394                           ; BSR set to: 0
   395  00121C  0100               	movlb	0	; () banked
   396  00121E  BFD3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   397  001220  D00A               	goto	l1072
   398  001222  0100               	movlb	0	; () banked
   399  001224  51D3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   400  001226  E106               	bnz	u450
   401  001228  0E04               	movlw	4
   402  00122A  0100               	movlb	0	; () banked
   403  00122C  5DD2               	subwf	sensorUpdate@j& (0+255),w,b
   404  00122E  B0D8               	btfsc	status,0,c
   405  001230  D0B2               	goto	l1090
   406  001232  D001               	goto	l1072
   407  001234                     u450:
   408                           
   409                           ; BSR set to: 0
   410  001234  D0B0               	goto	l1090
   411  001236                     l1072:
   412                           
   413                           ; BSR set to: 0
   414                           ;user.c: 145: {
   415                           ;user.c: 146: ADCON0 = sensorLocation[j];
   416  001236  0E05               	movlw	low _sensorLocation
   417  001238  0100               	movlb	0	; () banked
   418  00123A  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   419  00123C  6EF6               	movwf	tblptrl,c
   420  00123E  0E10               	movlw	high _sensorLocation
   421  001240  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   422  001242  6EF7               	movwf	tblptrh,c
   423  001244                     	if	0	;There are less than 3 active tblptr bytes
   424  001244                     	endif
   425  001244  0008               	tblrd		*
   426  001246  CFF5 FFC2          	movff	tablat,4034	;volatile
   427                           
   428                           ; BSR set to: 0
   429                           ;user.c: 148: ADCON0bits.GO_DONE = 1;
   430  00124A  82C2               	bsf	4034,1,c	;volatile
   431                           
   432                           ;user.c: 149: while(ADCON0bits.GO_DONE != 0);
   433  00124C  D000               	goto	l163
   434  00124E                     l163:
   435  00124E  B2C2               	btfsc	4034,1,c	;volatile
   436  001250  D7FE               	goto	l163
   437                           
   438                           ;user.c: 150: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   439  001252  CFC3 F039          	movff	4035,??_sensorUpdate	;volatile
   440  001256  0E06               	movlw	6
   441  001258  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   442  00125A                     u475:
   443  00125A  90D8               	bcf	status,0,c
   444  00125C  3239               	rrcf	??_sensorUpdate,f,c
   445  00125E  2E3A               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   446  001260  D7FC               	goto	u475
   447  001262  5039               	movf	??_sensorUpdate,w,c
   448  001264  CFC4 F03B          	movff	4036,??_sensorUpdate+2	;volatile
   449  001268  6A3C               	clrf	(??_sensorUpdate+3)& (0+255),c
   450  00126A  90D8               	bcf	status,0,c
   451  00126C  363B               	rlcf	??_sensorUpdate+2,f,c
   452  00126E  363C               	rlcf	??_sensorUpdate+3,f,c
   453  001270  90D8               	bcf	status,0,c
   454  001272  363B               	rlcf	??_sensorUpdate+2,f,c
   455  001274  363C               	rlcf	??_sensorUpdate+3,f,c
   456  001276  263B               	addwf	??_sensorUpdate+2,f,c
   457  001278  0E00               	movlw	0
   458  00127A  223C               	addwfc	??_sensorUpdate+3,f,c
   459  00127C  C0D2  F020         	movff	sensorUpdate@j,___wmul@multiplier
   460  001280  C0D3  F021         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   461  001284  0E00               	movlw	0
   462  001286  6E23               	movwf	___wmul@multiplicand+1,c
   463  001288  0E14               	movlw	20
   464  00128A  6E22               	movwf	___wmul@multiplicand,c
   465  00128C  EC8C  F00A         	call	___wmul	;wreg free
   466  001290  0E80               	movlw	low sensorUpdate@sensorTemp
   467  001292  6E3D               	movwf	(??_sensorUpdate+4)& (0+255),c
   468  001294  0E00               	movlw	high sensorUpdate@sensorTemp
   469  001296  6E3E               	movwf	(??_sensorUpdate+5)& (0+255),c
   470  001298  5020               	movf	?___wmul,w,c
   471  00129A  263D               	addwf	??_sensorUpdate+4,f,c
   472  00129C  5021               	movf	?___wmul+1,w,c
   473  00129E  223E               	addwfc	??_sensorUpdate+5,f,c
   474  0012A0  90D8               	bcf	status,0,c
   475  0012A2  0100               	movlb	0	; () banked
   476  0012A4  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   477  0012A6  6ED9               	movwf	fsr2l,c
   478  0012A8  0100               	movlb	0	; () banked
   479  0012AA  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   480  0012AC  6EDA               	movwf	fsr2h,c
   481  0012AE  503D               	movf	??_sensorUpdate+4,w,c
   482  0012B0  26D9               	addwf	fsr2l,f,c
   483  0012B2  503E               	movf	??_sensorUpdate+5,w,c
   484  0012B4  22DA               	addwfc	fsr2h,f,c
   485  0012B6  C03B  FFDE         	movff	??_sensorUpdate+2,postinc2
   486  0012BA  C03C  FFDD         	movff	??_sensorUpdate+3,postdec2
   487                           
   488                           ; BSR set to: 0
   489                           ;user.c: 153: if(j == 0 || j == 3)
   490  0012BE  0100               	movlb	0	; () banked
   491  0012C0  51D2               	movf	sensorUpdate@j& (0+255),w,b
   492  0012C2  0100               	movlb	0	; () banked
   493  0012C4  11D3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   494  0012C6  B4D8               	btfsc	status,2,c
   495  0012C8  D007               	goto	l1082
   496                           
   497                           ; BSR set to: 0
   498  0012CA  0E03               	movlw	3
   499  0012CC  0100               	movlb	0	; () banked
   500  0012CE  19D2               	xorwf	sensorUpdate@j& (0+255),w,b
   501  0012D0  0100               	movlb	0	; () banked
   502  0012D2  11D3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   503  0012D4  A4D8               	btfss	status,2,c
   504  0012D6  D02A               	goto	l1084
   505  0012D8                     l1082:
   506                           
   507                           ; BSR set to: 0
   508                           ;user.c: 154: sensorTemp[j][i] -= sensorCorrection[j];
   509  0012D8  C0D2  F020         	movff	sensorUpdate@j,___wmul@multiplier
   510  0012DC  C0D3  F021         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   511  0012E0  0E00               	movlw	0
   512  0012E2  6E23               	movwf	___wmul@multiplicand+1,c
   513  0012E4  0E14               	movlw	20
   514  0012E6  6E22               	movwf	___wmul@multiplicand,c
   515  0012E8  EC8C  F00A         	call	___wmul	;wreg free
   516  0012EC  0E80               	movlw	low sensorUpdate@sensorTemp
   517  0012EE  6E39               	movwf	??_sensorUpdate& (0+255),c
   518  0012F0  0E00               	movlw	high sensorUpdate@sensorTemp
   519  0012F2  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   520  0012F4  5020               	movf	?___wmul,w,c
   521  0012F6  2639               	addwf	??_sensorUpdate,f,c
   522  0012F8  5021               	movf	?___wmul+1,w,c
   523  0012FA  223A               	addwfc	??_sensorUpdate+1,f,c
   524  0012FC  90D8               	bcf	status,0,c
   525  0012FE  0100               	movlb	0	; () banked
   526  001300  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   527  001302  6ED9               	movwf	fsr2l,c
   528  001304  0100               	movlb	0	; () banked
   529  001306  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   530  001308  6EDA               	movwf	fsr2h,c
   531  00130A  5039               	movf	??_sensorUpdate,w,c
   532  00130C  26D9               	addwf	fsr2l,f,c
   533  00130E  503A               	movf	??_sensorUpdate+1,w,c
   534  001310  22DA               	addwfc	fsr2h,f,c
   535  001312  0E01               	movlw	low _sensorCorrection
   536  001314  0100               	movlb	0	; () banked
   537  001316  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   538  001318  6EF6               	movwf	tblptrl,c
   539  00131A  0E10               	movlw	high _sensorCorrection
   540  00131C  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   541  00131E  6EF7               	movwf	tblptrh,c
   542  001320                     	if	0	;There are less than 3 active tblptr bytes
   543  001320                     	endif
   544  001320  0008               	tblrd		*
   545  001322  50F5               	movf	tablat,w,c
   546  001324  5EDE               	subwf	postinc2,f,c
   547  001326  0E00               	movlw	0
   548  001328  5ADD               	subwfb	postdec2,f,c
   549  00132A  D02A               	goto	l1086
   550  00132C                     l1084:
   551                           
   552                           ; BSR set to: 0
   553                           ;user.c: 155: else
   554                           ;user.c: 156: sensorTemp[j][i] += sensorCorrection[j];
   555  00132C  C0D2  F020         	movff	sensorUpdate@j,___wmul@multiplier
   556  001330  C0D3  F021         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   557  001334  0E00               	movlw	0
   558  001336  6E23               	movwf	___wmul@multiplicand+1,c
   559  001338  0E14               	movlw	20
   560  00133A  6E22               	movwf	___wmul@multiplicand,c
   561  00133C  EC8C  F00A         	call	___wmul	;wreg free
   562  001340  0E80               	movlw	low sensorUpdate@sensorTemp
   563  001342  6E39               	movwf	??_sensorUpdate& (0+255),c
   564  001344  0E00               	movlw	high sensorUpdate@sensorTemp
   565  001346  6E3A               	movwf	(??_sensorUpdate+1)& (0+255),c
   566  001348  5020               	movf	?___wmul,w,c
   567  00134A  2639               	addwf	??_sensorUpdate,f,c
   568  00134C  5021               	movf	?___wmul+1,w,c
   569  00134E  223A               	addwfc	??_sensorUpdate+1,f,c
   570  001350  90D8               	bcf	status,0,c
   571  001352  0100               	movlb	0	; () banked
   572  001354  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   573  001356  6ED9               	movwf	fsr2l,c
   574  001358  0100               	movlb	0	; () banked
   575  00135A  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   576  00135C  6EDA               	movwf	fsr2h,c
   577  00135E  5039               	movf	??_sensorUpdate,w,c
   578  001360  26D9               	addwf	fsr2l,f,c
   579  001362  503A               	movf	??_sensorUpdate+1,w,c
   580  001364  22DA               	addwfc	fsr2h,f,c
   581  001366  0E01               	movlw	low _sensorCorrection
   582  001368  0100               	movlb	0	; () banked
   583  00136A  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   584  00136C  6EF6               	movwf	tblptrl,c
   585  00136E  0E10               	movlw	high _sensorCorrection
   586  001370  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   587  001372  6EF7               	movwf	tblptrh,c
   588  001374                     	if	0	;There are less than 3 active tblptr bytes
   589  001374                     	endif
   590  001374  0008               	tblrd		*
   591  001376  50F5               	movf	tablat,w,c
   592  001378  26DE               	addwf	postinc2,f,c
   593  00137A  0E00               	movlw	0
   594  00137C  22DD               	addwfc	postdec2,f,c
   595  00137E  D000               	goto	l1086
   596  001380                     l1086:
   597                           
   598                           ; BSR set to: 0
   599  001380  0100               	movlb	0	; () banked
   600  001382  4BD2               	infsnz	sensorUpdate@j& (0+255),f,b
   601  001384  2BD3               	incf	(sensorUpdate@j+1)& (0+255),f,b
   602                           
   603                           ; BSR set to: 0
   604  001386  0100               	movlb	0	; () banked
   605  001388  BFD3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   606  00138A  D755               	goto	l1072
   607  00138C  0100               	movlb	0	; () banked
   608  00138E  51D3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   609  001390  E102               	bnz	l1090
   610  001392  D74A               	goto	L1
   611  001394  D000               	goto	l1090
   612  001396                     l1090:
   613                           
   614                           ; BSR set to: 0
   615  001396  0100               	movlb	0	; () banked
   616  001398  4BD0               	infsnz	sensorUpdate@i& (0+255),f,b
   617  00139A  2BD1               	incf	(sensorUpdate@i+1)& (0+255),f,b
   618                           
   619                           ; BSR set to: 0
   620  00139C  0100               	movlb	0	; () banked
   621  00139E  BFD1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   622  0013A0  D738               	goto	l1066
   623  0013A2  0100               	movlb	0	; () banked
   624  0013A4  51D1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   625  0013A6  E102               	bnz	l1094
   626  0013A8  D72D               	goto	L2
   627  0013AA  D000               	goto	l1094
   628  0013AC                     l1094:
   629                           
   630                           ; BSR set to: 0
   631                           ;user.c: 157: }
   632                           ;user.c: 158: }
   633                           ;user.c: 161: sensorComputation(sensorTemp);
   634  0013AC  0E80               	movlw	low sensorUpdate@sensorTemp
   635  0013AE  6E2B               	movwf	sensorComputation@sensorTemp,c
   636  0013B0  0E00               	movlw	high sensorUpdate@sensorTemp
   637  0013B2  6E2C               	movwf	sensorComputation@sensorTemp+1,c
   638  0013B4  EC05  F008         	call	_sensorComputation	;wreg free
   639  0013B8  0012               	return		;funcret
   640  0013BA                     __end_of_sensorUpdate:
   641                           	opt stack 0
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           tblptrl	equ	0xFF6
   645                           tablat	equ	0xFF5
   646                           postinc0	equ	0xFEE
   647                           wreg	equ	0xFE8
   648                           postinc2	equ	0xFDE
   649                           postdec2	equ	0xFDD
   650                           fsr2h	equ	0xFDA
   651                           fsr2l	equ	0xFD9
   652                           status	equ	0xFD8
   653                           
   654 ;; *************** function _sensorComputation *****************
   655 ;; Defined at:
   656 ;;		line 115 in file "user.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  sensorTemp      2   42[COMRAM] PTR int [10]
   659 ;;		 -> sensorUpdate@sensorTemp(80), 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  j               2   54[COMRAM] int 
   662 ;;  i               2   52[COMRAM] int 
   663 ;;  sum             2   50[COMRAM] int 
   664 ;;  min             2   48[COMRAM] int 
   665 ;;  max             2   46[COMRAM] int 
   666 ;; Return value:  Size  Location     Type
   667 ;;		None               void
   668 ;; Registers used:
   669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   679 ;;Total ram usage:       14 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    3
   682 ;; This function calls:
   683 ;;		_MAX
   684 ;;		_MIN
   685 ;;		___awdiv
   686 ;;		___wmul
   687 ;; This function is called by:
   688 ;;		_sensorUpdate
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text2
   693  00100A                     __ptext2:
   694                           	opt stack 0
   695  00100A                     _sensorComputation:
   696                           	opt stack 26
   697                           
   698                           ;user.c: 117: int max,min,i,j,sum;
   699                           ;user.c: 118: for(i = 0; i < 4 ; i++)
   700                           
   701                           ;incstack = 0
   702  00100A  0E00               	movlw	0
   703  00100C  6E36               	movwf	sensorComputation@i+1,c
   704  00100E  0E00               	movlw	0
   705  001010  6E35               	movwf	sensorComputation@i,c
   706  001012  BE36               	btfsc	sensorComputation@i+1,7,c
   707  001014  D008               	goto	l1036
   708  001016  5036               	movf	sensorComputation@i+1,w,c
   709  001018  E105               	bnz	u390
   710  00101A  0E04               	movlw	4
   711  00101C  5C35               	subwf	sensorComputation@i,w,c
   712  00101E  B0D8               	btfsc	status,0,c
   713  001020  D0E5               	goto	l156
   714  001022  D001               	goto	l1036
   715  001024                     u390:
   716  001024  D0E3               	goto	l156
   717  001026                     l1036:
   718                           
   719                           ;user.c: 119: {
   720                           ;user.c: 120: for(j = 0 ; j < 10 ; j++)
   721  001026  0E00               	movlw	0
   722  001028  6E38               	movwf	sensorComputation@j+1,c
   723  00102A  0E00               	movlw	0
   724  00102C  6E37               	movwf	sensorComputation@j,c
   725  00102E  BE38               	btfsc	sensorComputation@j+1,7,c
   726  001030  D008               	goto	l1042
   727  001032  5038               	movf	sensorComputation@j+1,w,c
   728  001034  E105               	bnz	u400
   729  001036  0E0A               	movlw	10
   730  001038  5C37               	subwf	sensorComputation@j,w,c
   731  00103A  B0D8               	btfsc	status,0,c
   732  00103C  D0A8               	goto	l1052
   733  00103E  D001               	goto	l1042
   734  001040                     u400:
   735  001040  D0A6               	goto	l1052
   736  001042                     l1042:
   737                           
   738                           ;user.c: 121: {
   739                           ;user.c: 122: if(j == 0)
   740  001042  5037               	movf	sensorComputation@j,w,c
   741  001044  1038               	iorwf	sensorComputation@j+1,w,c
   742  001046  A4D8               	btfss	status,2,c
   743  001048  D028               	goto	l1046
   744                           
   745                           ;user.c: 123: {
   746                           ;user.c: 124: sum = min = max = sensorTemp[i][j];
   747  00104A  C035  F020         	movff	sensorComputation@i,___wmul@multiplier
   748  00104E  C036  F021         	movff	sensorComputation@i+1,___wmul@multiplier+1
   749  001052  0E00               	movlw	0
   750  001054  6E23               	movwf	___wmul@multiplicand+1,c
   751  001056  0E14               	movlw	20
   752  001058  6E22               	movwf	___wmul@multiplicand,c
   753  00105A  EC8C  F00A         	call	___wmul	;wreg free
   754  00105E  C02B  F02D         	movff	sensorComputation@sensorTemp,??_sensorComputation
   755  001062  C02C  F02E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   756  001066  5020               	movf	?___wmul,w,c
   757  001068  262D               	addwf	??_sensorComputation,f,c
   758  00106A  5021               	movf	?___wmul+1,w,c
   759  00106C  222E               	addwfc	??_sensorComputation+1,f,c
   760  00106E  90D8               	bcf	status,0,c
   761  001070  3437               	rlcf	sensorComputation@j,w,c
   762  001072  6ED9               	movwf	fsr2l,c
   763  001074  3438               	rlcf	sensorComputation@j+1,w,c
   764  001076  6EDA               	movwf	fsr2h,c
   765  001078  502D               	movf	??_sensorComputation,w,c
   766  00107A  26D9               	addwf	fsr2l,f,c
   767  00107C  502E               	movf	??_sensorComputation+1,w,c
   768  00107E  22DA               	addwfc	fsr2h,f,c
   769  001080  CFDE F02F          	movff	postinc2,sensorComputation@max
   770  001084  CFDD F030          	movff	postdec2,sensorComputation@max+1
   771  001088  C02F  F031         	movff	sensorComputation@max,sensorComputation@min
   772  00108C  C030  F032         	movff	sensorComputation@max+1,sensorComputation@min+1
   773  001090  C031  F033         	movff	sensorComputation@min,sensorComputation@sum
   774  001094  C032  F034         	movff	sensorComputation@min+1,sensorComputation@sum+1
   775                           
   776                           ;user.c: 125: continue;
   777  001098  D072               	goto	l1048
   778  00109A                     l1046:
   779                           
   780                           ;user.c: 126: }
   781                           ;user.c: 127: min = MIN(sensorTemp[i][j],min);
   782  00109A  C035  F020         	movff	sensorComputation@i,___wmul@multiplier
   783  00109E  C036  F021         	movff	sensorComputation@i+1,___wmul@multiplier+1
   784  0010A2  0E00               	movlw	0
   785  0010A4  6E23               	movwf	___wmul@multiplicand+1,c
   786  0010A6  0E14               	movlw	20
   787  0010A8  6E22               	movwf	___wmul@multiplicand,c
   788  0010AA  EC8C  F00A         	call	___wmul	;wreg free
   789  0010AE  C02B  F02D         	movff	sensorComputation@sensorTemp,??_sensorComputation
   790  0010B2  C02C  F02E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   791  0010B6  5020               	movf	?___wmul,w,c
   792  0010B8  262D               	addwf	??_sensorComputation,f,c
   793  0010BA  5021               	movf	?___wmul+1,w,c
   794  0010BC  222E               	addwfc	??_sensorComputation+1,f,c
   795  0010BE  90D8               	bcf	status,0,c
   796  0010C0  3437               	rlcf	sensorComputation@j,w,c
   797  0010C2  6ED9               	movwf	fsr2l,c
   798  0010C4  3438               	rlcf	sensorComputation@j+1,w,c
   799  0010C6  6EDA               	movwf	fsr2h,c
   800  0010C8  502D               	movf	??_sensorComputation,w,c
   801  0010CA  26D9               	addwf	fsr2l,f,c
   802  0010CC  502E               	movf	??_sensorComputation+1,w,c
   803  0010CE  22DA               	addwfc	fsr2h,f,c
   804  0010D0  CFDE F026          	movff	postinc2,MIN@a
   805  0010D4  CFDD F027          	movff	postdec2,MIN@a+1
   806  0010D8  C031  F028         	movff	sensorComputation@min,MIN@b
   807  0010DC  C032  F029         	movff	sensorComputation@min+1,MIN@b+1
   808  0010E0  ECA0  F00A         	call	_MIN	;wreg free
   809  0010E4  C026  F031         	movff	?_MIN,sensorComputation@min
   810  0010E8  C027  F032         	movff	?_MIN+1,sensorComputation@min+1
   811                           
   812                           ;user.c: 128: max = MAX(sensorTemp[i][j],max);
   813  0010EC  C035  F020         	movff	sensorComputation@i,___wmul@multiplier
   814  0010F0  C036  F021         	movff	sensorComputation@i+1,___wmul@multiplier+1
   815  0010F4  0E00               	movlw	0
   816  0010F6  6E23               	movwf	___wmul@multiplicand+1,c
   817  0010F8  0E14               	movlw	20
   818  0010FA  6E22               	movwf	___wmul@multiplicand,c
   819  0010FC  EC8C  F00A         	call	___wmul	;wreg free
   820  001100  C02B  F02D         	movff	sensorComputation@sensorTemp,??_sensorComputation
   821  001104  C02C  F02E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   822  001108  5020               	movf	?___wmul,w,c
   823  00110A  262D               	addwf	??_sensorComputation,f,c
   824  00110C  5021               	movf	?___wmul+1,w,c
   825  00110E  222E               	addwfc	??_sensorComputation+1,f,c
   826  001110  90D8               	bcf	status,0,c
   827  001112  3437               	rlcf	sensorComputation@j,w,c
   828  001114  6ED9               	movwf	fsr2l,c
   829  001116  3438               	rlcf	sensorComputation@j+1,w,c
   830  001118  6EDA               	movwf	fsr2h,c
   831  00111A  502D               	movf	??_sensorComputation,w,c
   832  00111C  26D9               	addwf	fsr2l,f,c
   833  00111E  502E               	movf	??_sensorComputation+1,w,c
   834  001120  22DA               	addwfc	fsr2h,f,c
   835  001122  CFDE F026          	movff	postinc2,MAX@a
   836  001126  CFDD F027          	movff	postdec2,MAX@a+1
   837  00112A  C02F  F028         	movff	sensorComputation@max,MAX@b
   838  00112E  C030  F029         	movff	sensorComputation@max+1,MAX@b+1
   839  001132  ECB4  F00A         	call	_MAX	;wreg free
   840  001136  C026  F02F         	movff	?_MAX,sensorComputation@max
   841  00113A  C027  F030         	movff	?_MAX+1,sensorComputation@max+1
   842                           
   843                           ;user.c: 129: sum += sensorTemp[i][j];
   844  00113E  C035  F020         	movff	sensorComputation@i,___wmul@multiplier
   845  001142  C036  F021         	movff	sensorComputation@i+1,___wmul@multiplier+1
   846  001146  0E00               	movlw	0
   847  001148  6E23               	movwf	___wmul@multiplicand+1,c
   848  00114A  0E14               	movlw	20
   849  00114C  6E22               	movwf	___wmul@multiplicand,c
   850  00114E  EC8C  F00A         	call	___wmul	;wreg free
   851  001152  C02B  F02D         	movff	sensorComputation@sensorTemp,??_sensorComputation
   852  001156  C02C  F02E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   853  00115A  5020               	movf	?___wmul,w,c
   854  00115C  262D               	addwf	??_sensorComputation,f,c
   855  00115E  5021               	movf	?___wmul+1,w,c
   856  001160  222E               	addwfc	??_sensorComputation+1,f,c
   857  001162  90D8               	bcf	status,0,c
   858  001164  3437               	rlcf	sensorComputation@j,w,c
   859  001166  6ED9               	movwf	fsr2l,c
   860  001168  3438               	rlcf	sensorComputation@j+1,w,c
   861  00116A  6EDA               	movwf	fsr2h,c
   862  00116C  502D               	movf	??_sensorComputation,w,c
   863  00116E  26D9               	addwf	fsr2l,f,c
   864  001170  502E               	movf	??_sensorComputation+1,w,c
   865  001172  22DA               	addwfc	fsr2h,f,c
   866  001174  50DE               	movf	postinc2,w,c
   867  001176  2633               	addwf	sensorComputation@sum,f,c
   868  001178  50DD               	movf	postdec2,w,c
   869  00117A  2234               	addwfc	sensorComputation@sum+1,f,c
   870  00117C  D000               	goto	l1048
   871  00117E                     l1048:
   872  00117E  4A37               	infsnz	sensorComputation@j,f,c
   873  001180  2A38               	incf	sensorComputation@j+1,f,c
   874  001182  BE38               	btfsc	sensorComputation@j+1,7,c
   875  001184  D75E               	goto	l1042
   876  001186  5038               	movf	sensorComputation@j+1,w,c
   877  001188  E102               	bnz	l1052
   878  00118A  D755               	goto	L3
   879  00118C  D000               	goto	l1052
   880  00118E                     l1052:
   881                           
   882                           ;user.c: 130: }
   883                           ;user.c: 131: sum = sum - min - max;
   884  00118E  502F               	movf	sensorComputation@max,w,c
   885  001190  2431               	addwf	sensorComputation@min,w,c
   886  001192  6E2D               	movwf	??_sensorComputation& (0+255),c
   887  001194  5030               	movf	sensorComputation@max+1,w,c
   888  001196  2032               	addwfc	sensorComputation@min+1,w,c
   889  001198  6E2E               	movwf	(??_sensorComputation+1)& (0+255),c
   890  00119A  1E2D               	comf	??_sensorComputation,f,c
   891  00119C  1E2E               	comf	??_sensorComputation+1,f,c
   892  00119E  4A2D               	infsnz	??_sensorComputation,f,c
   893  0011A0  2A2E               	incf	??_sensorComputation+1,f,c
   894  0011A2  5033               	movf	sensorComputation@sum,w,c
   895  0011A4  242D               	addwf	??_sensorComputation,w,c
   896  0011A6  6E33               	movwf	sensorComputation@sum,c
   897  0011A8  5034               	movf	sensorComputation@sum+1,w,c
   898  0011AA  202E               	addwfc	??_sensorComputation+1,w,c
   899  0011AC  6E34               	movwf	sensorComputation@sum+1,c
   900                           
   901                           ;user.c: 132: sensorValue[i] = sum/(10-2);
   902  0011AE  C033  F020         	movff	sensorComputation@sum,___awdiv@dividend
   903  0011B2  C034  F021         	movff	sensorComputation@sum+1,___awdiv@dividend+1
   904  0011B6  0E00               	movlw	0
   905  0011B8  6E23               	movwf	___awdiv@divisor+1,c
   906  0011BA  0E08               	movlw	8
   907  0011BC  6E22               	movwf	___awdiv@divisor,c
   908  0011BE  ECDD  F009         	call	___awdiv	;wreg free
   909  0011C2  90D8               	bcf	status,0,c
   910  0011C4  3435               	rlcf	sensorComputation@i,w,c
   911  0011C6  6ED9               	movwf	fsr2l,c
   912  0011C8  3436               	rlcf	sensorComputation@i+1,w,c
   913  0011CA  6EDA               	movwf	fsr2h,c
   914  0011CC  0E3F               	movlw	low _sensorValue
   915  0011CE  26D9               	addwf	fsr2l,f,c
   916  0011D0  0E00               	movlw	high _sensorValue
   917  0011D2  22DA               	addwfc	fsr2h,f,c
   918  0011D4  C020  FFDE         	movff	?___awdiv,postinc2
   919  0011D8  C021  FFDD         	movff	?___awdiv+1,postdec2
   920  0011DC  4A35               	infsnz	sensorComputation@i,f,c
   921  0011DE  2A36               	incf	sensorComputation@i+1,f,c
   922  0011E0  BE36               	btfsc	sensorComputation@i+1,7,c
   923  0011E2  D721               	goto	l1036
   924  0011E4  5036               	movf	sensorComputation@i+1,w,c
   925  0011E6  E102               	bnz	l156
   926  0011E8  D718               	goto	L4
   927  0011EA  D000               	goto	l156
   928  0011EC                     l156:
   929  0011EC  0012               	return		;funcret
   930  0011EE                     __end_of_sensorComputation:
   931                           	opt stack 0
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           postinc2	equ	0xFDE
   939                           postdec2	equ	0xFDD
   940                           fsr2h	equ	0xFDA
   941                           fsr2l	equ	0xFD9
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function ___wmul *****************
   945 ;; Defined at:
   946 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  multiplier      2   31[COMRAM] unsigned int 
   949 ;;  multiplicand    2   33[COMRAM] unsigned int 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  product         2   35[COMRAM] unsigned int 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2   31[COMRAM] unsigned int 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, prodl, prodh
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;Total ram usage:        6 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    2
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_sensorComputation
   972 ;;		_sensorUpdate
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text3
   977  001518                     __ptext3:
   978                           	opt stack 0
   979  001518                     ___wmul:
   980                           	opt stack 26
   981                           
   982                           ;incstack = 0
   983  001518  5020               	movf	___wmul@multiplier,w,c
   984  00151A  0222               	mulwf	___wmul@multiplicand,c
   985  00151C  CFF3 F024          	movff	prodl,___wmul@product
   986  001520  CFF4 F025          	movff	prodh,___wmul@product+1
   987  001524  5020               	movf	___wmul@multiplier,w,c
   988  001526  0223               	mulwf	___wmul@multiplicand+1,c
   989  001528  50F3               	movf	prodl,w,c
   990  00152A  2625               	addwf	___wmul@product+1,f,c
   991  00152C  5021               	movf	___wmul@multiplier+1,w,c
   992  00152E  0222               	mulwf	___wmul@multiplicand,c
   993  001530  50F3               	movf	prodl,w,c
   994  001532  2625               	addwf	___wmul@product+1,f,c
   995  001534  C024  F020         	movff	___wmul@product,?___wmul
   996  001538  C025  F021         	movff	___wmul@product+1,?___wmul+1
   997  00153C  D000               	goto	l181
   998  00153E                     l181:
   999  00153E  0012               	return		;funcret
  1000  001540                     __end_of___wmul:
  1001                           	opt stack 0
  1002                           tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           prodh	equ	0xFF4
  1007                           prodl	equ	0xFF3
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postinc2	equ	0xFDE
  1011                           postdec2	equ	0xFDD
  1012                           fsr2h	equ	0xFDA
  1013                           fsr2l	equ	0xFD9
  1014                           status	equ	0xFD8
  1015                           
  1016 ;; *************** function ___awdiv *****************
  1017 ;; Defined at:
  1018 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  dividend        2   31[COMRAM] int 
  1021 ;;  divisor         2   33[COMRAM] int 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  quotient        2   37[COMRAM] int 
  1024 ;;  sign            1   36[COMRAM] unsigned char 
  1025 ;;  counter         1   35[COMRAM] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  2   31[COMRAM] int 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;Total ram usage:        8 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    2
  1042 ;; This function calls:
  1043 ;;		Nothing
  1044 ;; This function is called by:
  1045 ;;		_sensorComputation
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text4
  1050  0013BA                     __ptext4:
  1051                           	opt stack 0
  1052  0013BA                     ___awdiv:
  1053                           	opt stack 26
  1054                           
  1055                           ;incstack = 0
  1056  0013BA  0E00               	movlw	0
  1057  0013BC  6E25               	movwf	___awdiv@sign,c
  1058  0013BE  AE23               	btfss	___awdiv@divisor+1,7,c
  1059  0013C0  D007               	goto	l994
  1060  0013C2  6C22               	negf	___awdiv@divisor,c
  1061  0013C4  1E23               	comf	___awdiv@divisor+1,f,c
  1062  0013C6  B0D8               	btfsc	status,0,c
  1063  0013C8  2A23               	incf	___awdiv@divisor+1,f,c
  1064  0013CA  0E01               	movlw	1
  1065  0013CC  6E25               	movwf	___awdiv@sign,c
  1066  0013CE  D000               	goto	l994
  1067  0013D0                     l994:
  1068  0013D0  AE21               	btfss	___awdiv@dividend+1,7,c
  1069  0013D2  D007               	goto	l1000
  1070  0013D4  6C20               	negf	___awdiv@dividend,c
  1071  0013D6  1E21               	comf	___awdiv@dividend+1,f,c
  1072  0013D8  B0D8               	btfsc	status,0,c
  1073  0013DA  2A21               	incf	___awdiv@dividend+1,f,c
  1074  0013DC  0E01               	movlw	1
  1075  0013DE  1A25               	xorwf	___awdiv@sign,f,c
  1076  0013E0  D000               	goto	l1000
  1077  0013E2                     l1000:
  1078  0013E2  0E00               	movlw	0
  1079  0013E4  6E27               	movwf	___awdiv@quotient+1,c
  1080  0013E6  0E00               	movlw	0
  1081  0013E8  6E26               	movwf	___awdiv@quotient,c
  1082  0013EA  5022               	movf	___awdiv@divisor,w,c
  1083  0013EC  1023               	iorwf	___awdiv@divisor+1,w,c
  1084  0013EE  B4D8               	btfsc	status,2,c
  1085  0013F0  D021               	goto	l1022
  1086  0013F2  0E01               	movlw	1
  1087  0013F4  6E24               	movwf	___awdiv@counter,c
  1088  0013F6  D005               	goto	l1008
  1089  0013F8                     l1006:
  1090  0013F8  90D8               	bcf	status,0,c
  1091  0013FA  3622               	rlcf	___awdiv@divisor,f,c
  1092  0013FC  3623               	rlcf	___awdiv@divisor+1,f,c
  1093  0013FE  2A24               	incf	___awdiv@counter,f,c
  1094  001400  D000               	goto	l1008
  1095  001402                     l1008:
  1096  001402  BE23               	btfsc	___awdiv@divisor+1,7,c
  1097  001404  D002               	goto	l1010
  1098  001406  D7F8               	goto	l1006
  1099  001408  D000               	goto	l1010
  1100  00140A                     l1010:
  1101  00140A  90D8               	bcf	status,0,c
  1102  00140C  3626               	rlcf	___awdiv@quotient,f,c
  1103  00140E  3627               	rlcf	___awdiv@quotient+1,f,c
  1104  001410  5022               	movf	___awdiv@divisor,w,c
  1105  001412  5C20               	subwf	___awdiv@dividend,w,c
  1106  001414  5023               	movf	___awdiv@divisor+1,w,c
  1107  001416  5821               	subwfb	___awdiv@dividend+1,w,c
  1108  001418  A0D8               	btfss	status,0,c
  1109  00141A  D006               	goto	l1018
  1110  00141C  5022               	movf	___awdiv@divisor,w,c
  1111  00141E  5E20               	subwf	___awdiv@dividend,f,c
  1112  001420  5023               	movf	___awdiv@divisor+1,w,c
  1113  001422  5A21               	subwfb	___awdiv@dividend+1,f,c
  1114  001424  8026               	bsf	___awdiv@quotient,0,c
  1115  001426  D000               	goto	l1018
  1116  001428                     l1018:
  1117  001428  90D8               	bcf	status,0,c
  1118  00142A  3223               	rrcf	___awdiv@divisor+1,f,c
  1119  00142C  3222               	rrcf	___awdiv@divisor,f,c
  1120  00142E  2E24               	decfsz	___awdiv@counter,f,c
  1121  001430  D7EC               	goto	l1010
  1122  001432  D000               	goto	l1022
  1123  001434                     l1022:
  1124  001434  5025               	movf	___awdiv@sign,w,c
  1125  001436  B4D8               	btfsc	status,2,c
  1126  001438  D005               	goto	l1026
  1127  00143A  6C26               	negf	___awdiv@quotient,c
  1128  00143C  1E27               	comf	___awdiv@quotient+1,f,c
  1129  00143E  B0D8               	btfsc	status,0,c
  1130  001440  2A27               	incf	___awdiv@quotient+1,f,c
  1131  001442  D000               	goto	l1026
  1132  001444                     l1026:
  1133  001444  C026  F020         	movff	___awdiv@quotient,?___awdiv
  1134  001448  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
  1135  00144C  D000               	goto	l374
  1136  00144E                     l374:
  1137  00144E  0012               	return		;funcret
  1138  001450                     __end_of___awdiv:
  1139                           	opt stack 0
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           prodh	equ	0xFF4
  1145                           prodl	equ	0xFF3
  1146                           postinc0	equ	0xFEE
  1147                           wreg	equ	0xFE8
  1148                           postinc2	equ	0xFDE
  1149                           postdec2	equ	0xFDD
  1150                           fsr2h	equ	0xFDA
  1151                           fsr2l	equ	0xFD9
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _MIN *****************
  1155 ;; Defined at:
  1156 ;;		line 165 in file "user.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  a               2   37[COMRAM] int 
  1159 ;;  b               2   39[COMRAM] int 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  2   37[COMRAM] int 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;Total ram usage:        5 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    2
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_sensorComputation
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text5
  1186  001540                     __ptext5:
  1187                           	opt stack 0
  1188  001540                     _MIN:
  1189                           	opt stack 26
  1190                           
  1191                           ;user.c: 167: if(a>b) return b;
  1192                           
  1193                           ;incstack = 0
  1194  001540  5026               	movf	MIN@a,w,c
  1195  001542  5C28               	subwf	MIN@b,w,c
  1196  001544  5029               	movf	MIN@b+1,w,c
  1197  001546  0A80               	xorlw	128
  1198  001548  6E2A               	movwf	??_MIN& (0+255),c
  1199  00154A  5027               	movf	MIN@a+1,w,c
  1200  00154C  0A80               	xorlw	128
  1201  00154E  582A               	subwfb	??_MIN& (0+255),w,c
  1202  001550  B0D8               	btfsc	status,0,c
  1203  001552  D005               	goto	l173
  1204  001554  C028  F026         	movff	MIN@b,?_MIN
  1205  001558  C029  F027         	movff	MIN@b+1,?_MIN+1
  1206  00155C  D004               	goto	l174
  1207  00155E                     l173:
  1208                           
  1209                           ;user.c: 168: return a;
  1210  00155E  C026  F026         	movff	MIN@a,?_MIN
  1211  001562  C027  F027         	movff	MIN@a+1,?_MIN+1
  1212  001566                     l174:
  1213  001566  0012               	return		;funcret
  1214  001568                     __end_of_MIN:
  1215                           	opt stack 0
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           prodh	equ	0xFF4
  1221                           prodl	equ	0xFF3
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postinc2	equ	0xFDE
  1225                           postdec2	equ	0xFDD
  1226                           fsr2h	equ	0xFDA
  1227                           fsr2l	equ	0xFD9
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function _MAX *****************
  1231 ;; Defined at:
  1232 ;;		line 171 in file "user.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  a               2   37[COMRAM] int 
  1235 ;;  b               2   39[COMRAM] int 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2   37[COMRAM] int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;Total ram usage:        5 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    2
  1254 ;; This function calls:
  1255 ;;		Nothing
  1256 ;; This function is called by:
  1257 ;;		_sensorComputation
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text6
  1262  001568                     __ptext6:
  1263                           	opt stack 0
  1264  001568                     _MAX:
  1265                           	opt stack 26
  1266                           
  1267                           ;user.c: 173: if(a>b) return a;
  1268                           
  1269                           ;incstack = 0
  1270  001568  5026               	movf	MAX@a,w,c
  1271  00156A  5C28               	subwf	MAX@b,w,c
  1272  00156C  5029               	movf	MAX@b+1,w,c
  1273  00156E  0A80               	xorlw	128
  1274  001570  6E2A               	movwf	??_MAX& (0+255),c
  1275  001572  5027               	movf	MAX@a+1,w,c
  1276  001574  0A80               	xorlw	128
  1277  001576  582A               	subwfb	??_MAX& (0+255),w,c
  1278  001578  B0D8               	btfsc	status,0,c
  1279  00157A  D005               	goto	l177
  1280  00157C  C026  F026         	movff	MAX@a,?_MAX
  1281  001580  C027  F027         	movff	MAX@a+1,?_MAX+1
  1282  001584  D004               	goto	l178
  1283  001586                     l177:
  1284                           
  1285                           ;user.c: 174: return b;
  1286  001586  C028  F026         	movff	MAX@b,?_MAX
  1287  00158A  C029  F027         	movff	MAX@b+1,?_MAX+1
  1288  00158E                     l178:
  1289  00158E  0012               	return		;funcret
  1290  001590                     __end_of_MAX:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postinc2	equ	0xFDE
  1301                           postdec2	equ	0xFDD
  1302                           fsr2h	equ	0xFDA
  1303                           fsr2l	equ	0xFD9
  1304                           status	equ	0xFD8
  1305                           
  1306 ;; *************** function _InitApp *****************
  1307 ;; Defined at:
  1308 ;;		line 35 in file "user.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;		None               void
  1315 ;; Registers used:
  1316 ;;		wreg, status,2
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text7
  1337  0014E2                     __ptext7:
  1338                           	opt stack 0
  1339  0014E2                     _InitApp:
  1340                           	opt stack 28
  1341                           
  1342                           ;user.c: 39: TRISC = 0;
  1343                           
  1344                           ;incstack = 0
  1345  0014E2  0E00               	movlw	0
  1346  0014E4  6E94               	movwf	3988,c	;volatile
  1347                           
  1348                           ;user.c: 43: TRISEbits.TRISE1=1;
  1349  0014E6  8296               	bsf	3990,1,c	;volatile
  1350                           
  1351                           ;user.c: 45: TRISEbits.TRISE2=1;
  1352  0014E8  8496               	bsf	3990,2,c	;volatile
  1353                           
  1354                           ;user.c: 47: TRISBbits.RB1=1;
  1355  0014EA  8293               	bsf	3987,1,c	;volatile
  1356                           
  1357                           ;user.c: 49: TRISBbits.RB0=1;
  1358  0014EC  8093               	bsf	3987,0,c	;volatile
  1359                           
  1360                           ;user.c: 52: TRISBbits.RB3=1;
  1361  0014EE  8693               	bsf	3987,3,c	;volatile
  1362                           
  1363                           ;user.c: 54: TRISBbits.RB2=1;
  1364  0014F0  8493               	bsf	3987,2,c	;volatile
  1365                           
  1366                           ;user.c: 57: if(PORTBbits.RB3 == TRUE)
  1367  0014F2  A681               	btfss	3969,3,c	;volatile
  1368  0014F4  D002               	goto	l876
  1369                           
  1370                           ;user.c: 58: algorithm = LEFTWALL;
  1371  0014F6  0E00               	movlw	0
  1372  0014F8  D001               	goto	L5
  1373  0014FA                     l876:
  1374                           
  1375                           ;user.c: 59: else
  1376                           ;user.c: 60: algorithm = RIGHTWALL;
  1377  0014FA  0E01               	movlw	1
  1378  0014FC                     L5:
  1379  0014FC  6E51               	movwf	_algorithm,c
  1380                           
  1381                           ;user.c: 63: ADCON1 =0b00000001;
  1382  0014FE  0E01               	movlw	1
  1383  001500  6EC1               	movwf	4033,c	;volatile
  1384                           
  1385                           ;user.c: 68: ADCON2=0b00001010;
  1386  001502  0E0A               	movlw	10
  1387  001504  6EC0               	movwf	4032,c	;volatile
  1388                           
  1389                           ;user.c: 73: ADCON0=0b00101011;
  1390  001506  0E2B               	movlw	43
  1391  001508  6EC2               	movwf	4034,c	;volatile
  1392                           
  1393                           ;user.c: 82: T0CON = 0b11000100;
  1394  00150A  0EC4               	movlw	196
  1395  00150C  6ED5               	movwf	4053,c	;volatile
  1396                           
  1397                           ;user.c: 90: INTCON2 = 0b11110100;
  1398  00150E  0EF4               	movlw	244
  1399  001510  6EF1               	movwf	intcon2,c	;volatile
  1400                           
  1401                           ;user.c: 100: INTCON = 0b00100000;
  1402  001512  0E20               	movlw	32
  1403  001514  6EF2               	movwf	intcon,c	;volatile
  1404  001516  0012               	return		;funcret
  1405  001518                     __end_of_InitApp:
  1406                           	opt stack 0
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           prodh	equ	0xFF4
  1412                           prodl	equ	0xFF3
  1413                           intcon	equ	0xFF2
  1414                           intcon2	equ	0xFF1
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           postinc2	equ	0xFDE
  1418                           postdec2	equ	0xFDD
  1419                           fsr2h	equ	0xFDA
  1420                           fsr2l	equ	0xFD9
  1421                           status	equ	0xFD8
  1422                           
  1423 ;; *************** function _ConfigureOscillator *****************
  1424 ;; Defined at:
  1425 ;;		line 24 in file "system.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;		None               void
  1432 ;; Registers used:
  1433 ;;		wreg, status,2
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    2
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text8
  1454  0015BA                     __ptext8:
  1455                           	opt stack 0
  1456  0015BA                     _ConfigureOscillator:
  1457                           	opt stack 28
  1458                           
  1459                           ;system.c: 29: OSCCON = 0b01111100;
  1460                           
  1461                           ;incstack = 0
  1462  0015BA  0E7C               	movlw	124
  1463  0015BC  6ED3               	movwf	4051,c	;volatile
  1464                           
  1465                           ;system.c: 31: OSCTUNE = 0b01001111;
  1466  0015BE  0E4F               	movlw	79
  1467  0015C0  6E9B               	movwf	3995,c	;volatile
  1468  0015C2  0012               	return		;funcret
  1469  0015C4                     __end_of_ConfigureOscillator:
  1470                           	opt stack 0
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           prodh	equ	0xFF4
  1476                           prodl	equ	0xFF3
  1477                           intcon	equ	0xFF2
  1478                           intcon2	equ	0xFF1
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           postinc2	equ	0xFDE
  1482                           postdec2	equ	0xFDD
  1483                           fsr2h	equ	0xFDA
  1484                           fsr2l	equ	0xFD9
  1485                           status	equ	0xFD8
  1486                           
  1487 ;; *************** function _low_isr *****************
  1488 ;; Defined at:
  1489 ;;		line 102 in file "interrupts.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;		None               void
  1496 ;; Registers used:
  1497 ;;		None
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;Total ram usage:       17 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		Interrupt level 1
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	intcodelo
  1518  000018                     __pintcodelo:
  1519                           	opt stack 0
  1520  000018                     _low_isr:
  1521                           	opt stack 26
  1522                           
  1523                           ;incstack = 0
  1524  000018  CFD8 F001          	movff	status,??_low_isr
  1525  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1526  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1527  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1528  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1529  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1530  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1531  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1532  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1533  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1534  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1535  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1536  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1537  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1538  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1539  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1540  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1541  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1542  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1543  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1544  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1545  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1546  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1547  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1548  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1549  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1550  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1551  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1552  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1553  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1554  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1555  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1556  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1557  00009C  C001  FFD8         	movff	??_low_isr,status
  1558  0000A0  0010               	retfie	
  1559  0000A2                     __end_of_low_isr:
  1560                           	opt stack 0
  1561                           pclatu	equ	0xFFB
  1562                           pclath	equ	0xFFA
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodh	equ	0xFF4
  1568                           prodl	equ	0xFF3
  1569                           intcon	equ	0xFF2
  1570                           intcon2	equ	0xFF1
  1571                           postinc0	equ	0xFEE
  1572                           fsr0h	equ	0xFEA
  1573                           fsr0l	equ	0xFE9
  1574                           wreg	equ	0xFE8
  1575                           fsr1h	equ	0xFE2
  1576                           fsr1l	equ	0xFE1
  1577                           bsr	equ	0xFE0
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           fsr2h	equ	0xFDA
  1581                           fsr2l	equ	0xFD9
  1582                           status	equ	0xFD8
  1583                           
  1584 ;; *************** function _high_isr *****************
  1585 ;; Defined at:
  1586 ;;		line 58 in file "interrupts.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;		None               void
  1593 ;; Registers used:
  1594 ;;		wreg, status,2, status,0
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;Total ram usage:       14 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		Interrupt level 2
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	intcode
  1614  000008                     __pintcode:
  1615                           	opt stack 0
  1616  000008                     _high_isr:
  1617                           	opt stack 26
  1618                           
  1619                           ;incstack = 0
  1620  000008  CFFA F012          	movff	pclath,??_high_isr
  1621  00000C  CFFB F013          	movff	pclatu,??_high_isr+1
  1622  000010  CFE9 F014          	movff	fsr0l,??_high_isr+2
  1623  000014  ED28  F00A         	call	int_func,f	;refresh shadow registers
  1624                           pclatu	equ	0xFFB
  1625                           pclath	equ	0xFFA
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           prodh	equ	0xFF4
  1631                           prodl	equ	0xFF3
  1632                           intcon	equ	0xFF2
  1633                           intcon2	equ	0xFF1
  1634                           postinc0	equ	0xFEE
  1635                           fsr0h	equ	0xFEA
  1636                           fsr0l	equ	0xFE9
  1637                           wreg	equ	0xFE8
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           bsr	equ	0xFE0
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647                           	psect	intcode_body
  1648  001450                     __pintcode_body:
  1649                           	opt stack 26
  1650  001450                     int_func:
  1651                           	opt stack 26
  1652  001450  0006               	pop		; remove dummy address from shadow register refresh
  1653  001452  CFEA F015          	movff	fsr0h,??_high_isr+3
  1654  001456  CFE1 F016          	movff	fsr1l,??_high_isr+4
  1655  00145A  CFE2 F017          	movff	fsr1h,??_high_isr+5
  1656  00145E  CFD9 F018          	movff	fsr2l,??_high_isr+6
  1657  001462  CFDA F019          	movff	fsr2h,??_high_isr+7
  1658  001466  CFF3 F01A          	movff	prodl,??_high_isr+8
  1659  00146A  CFF4 F01B          	movff	prodh,??_high_isr+9
  1660  00146E  CFF6 F01C          	movff	tblptrl,??_high_isr+10
  1661  001472  CFF7 F01D          	movff	tblptrh,??_high_isr+11
  1662  001476  CFF8 F01E          	movff	tblptru,??_high_isr+12
  1663  00147A  CFF5 F01F          	movff	tablat,??_high_isr+13
  1664                           
  1665                           ;interrupts.c: 77: if(INTCONbits.TMR0IF == 1)
  1666  00147E  A4F2               	btfss	intcon,2,c	;volatile
  1667  001480  D013               	goto	i2l30
  1668                           
  1669                           ;interrupts.c: 78: {
  1670                           ;interrupts.c: 79: if(MotorDelayCounter > 30)
  1671  001482  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  1672  001484  D00D               	goto	i2l924
  1673  001486  504A               	movf	_MotorDelayCounter+1,w,c
  1674  001488  E106               	bnz	i2l922
  1675  00148A  0E1F               	movlw	31
  1676  00148C  5C49               	subwf	_MotorDelayCounter,w,c
  1677  00148E  B0D8               	btfsc	status,0,c
  1678  001490  D002               	goto	i2l922
  1679  001492  D006               	goto	i2l924
  1680  001494  D000               	goto	i2l922
  1681  001496                     i2l922:
  1682                           
  1683                           ;interrupts.c: 86: }
  1684                           ;interrupts.c: 89: MotorDelayCounter = 0;
  1685  001496  0E00               	movlw	0
  1686  001498  6E4A               	movwf	_MotorDelayCounter+1,c
  1687  00149A  0E00               	movlw	0
  1688  00149C  6E49               	movwf	_MotorDelayCounter,c
  1689  00149E  D000               	goto	i2l924
  1690  0014A0                     i2l924:
  1691                           
  1692                           ;interrupts.c: 90: }
  1693                           ;interrupts.c: 92: MotorDelayCounter++;
  1694  0014A0  4A49               	infsnz	_MotorDelayCounter,f,c
  1695  0014A2  2A4A               	incf	_MotorDelayCounter+1,f,c
  1696                           
  1697                           ;interrupts.c: 93: INTCONbits.TMR0IF = 0;
  1698  0014A4  94F2               	bcf	intcon,2,c	;volatile
  1699  0014A6  D000               	goto	i2l30
  1700  0014A8                     i2l30:
  1701  0014A8  C01F  FFF5         	movff	??_high_isr+13,tablat
  1702  0014AC  C01E  FFF8         	movff	??_high_isr+12,tblptru
  1703  0014B0  C01D  FFF7         	movff	??_high_isr+11,tblptrh
  1704  0014B4  C01C  FFF6         	movff	??_high_isr+10,tblptrl
  1705  0014B8  C01B  FFF4         	movff	??_high_isr+9,prodh
  1706  0014BC  C01A  FFF3         	movff	??_high_isr+8,prodl
  1707  0014C0  C019  FFDA         	movff	??_high_isr+7,fsr2h
  1708  0014C4  C018  FFD9         	movff	??_high_isr+6,fsr2l
  1709  0014C8  C017  FFE2         	movff	??_high_isr+5,fsr1h
  1710  0014CC  C016  FFE1         	movff	??_high_isr+4,fsr1l
  1711  0014D0  C015  FFEA         	movff	??_high_isr+3,fsr0h
  1712  0014D4  C014  FFE9         	movff	??_high_isr+2,fsr0l
  1713  0014D8  C013  FFFB         	movff	??_high_isr+1,pclatu
  1714  0014DC  C012  FFFA         	movff	??_high_isr,pclath
  1715  0014E0  0011               	retfie		f
  1716  0014E2                     __end_of_high_isr:
  1717                           	opt stack 0
  1718                           pclatu	equ	0xFFB
  1719                           pclath	equ	0xFFA
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           intcon2	equ	0xFF1
  1728                           postinc0	equ	0xFEE
  1729                           fsr0h	equ	0xFEA
  1730                           fsr0l	equ	0xFE9
  1731                           wreg	equ	0xFE8
  1732                           fsr1h	equ	0xFE2
  1733                           fsr1l	equ	0xFE1
  1734                           bsr	equ	0xFE0
  1735                           postinc2	equ	0xFDE
  1736                           postdec2	equ	0xFDD
  1737                           fsr2h	equ	0xFDA
  1738                           fsr2l	equ	0xFD9
  1739                           status	equ	0xFD8
  1740                           pclatu	equ	0xFFB
  1741                           pclath	equ	0xFFA
  1742                           tblptru	equ	0xFF8
  1743                           tblptrh	equ	0xFF7
  1744                           tblptrl	equ	0xFF6
  1745                           tablat	equ	0xFF5
  1746                           prodh	equ	0xFF4
  1747                           prodl	equ	0xFF3
  1748                           intcon	equ	0xFF2
  1749                           intcon2	equ	0xFF1
  1750                           postinc0	equ	0xFEE
  1751                           fsr0h	equ	0xFEA
  1752                           fsr0l	equ	0xFE9
  1753                           wreg	equ	0xFE8
  1754                           fsr1h	equ	0xFE2
  1755                           fsr1l	equ	0xFE1
  1756                           bsr	equ	0xFE0
  1757                           postinc2	equ	0xFDE
  1758                           postdec2	equ	0xFDD
  1759                           fsr2h	equ	0xFDA
  1760                           fsr2l	equ	0xFD9
  1761                           status	equ	0xFD8
  1762                           
  1763                           	psect	rparam
  1764  0000                     pclatu	equ	0xFFB
  1765                           pclath	equ	0xFFA
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           prodh	equ	0xFF4
  1771                           prodl	equ	0xFF3
  1772                           intcon	equ	0xFF2
  1773                           intcon2	equ	0xFF1
  1774                           postinc0	equ	0xFEE
  1775                           fsr0h	equ	0xFEA
  1776                           fsr0l	equ	0xFE9
  1777                           wreg	equ	0xFE8
  1778                           fsr1h	equ	0xFE2
  1779                           fsr1l	equ	0xFE1
  1780                           bsr	equ	0xFE0
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      81
    BANK0           128     84      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3620
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    3620
                                             56 COMRAM     6     6      0
                                              0 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    2287
                                             42 COMRAM    14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     901
                                             31 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                             31 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     194
                                             37 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     194
                                             37 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      54       5       65.6%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      51       1       63.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       6        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 10 19:39:49 2015

                ___awdiv@sign 0025                            bsr 000FE0           ___wmul@multiplicand 0022  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l163 124E                           l156 11EC                           l173 155E  
                         l181 153E                           l174 1566                           l177 1586  
                         l178 158E                           l374 144E                           l876 14FA  
                         l994 13D0                  __CFG_CPB$OFF 000000                           _MAX 1568  
                         u400 1040                           _MIN 1540                           u440 1210  
                         u450 1234                  __CFG_CPD$OFF 000000                           u390 1024  
                         u475 125A                           wreg 000FE8                          ?_MAX 0026  
                        ?_MIN 0026                          MAX@a 0026                          MAX@b 0028  
                        MIN@a 0026                          MIN@b 0028                  __CFG_WDT$OFF 000000  
                        l1000 13E2                          l1010 140A                          l1006 13F8  
                        l1022 1434                          l1008 1402                          l1026 1444  
                        l1018 1428                          l1042 1042                          l1052 118E  
                        l1036 1026                          l1046 109A                          l1048 117E  
                        l1072 1236                          l1082 12D8                          l1090 1396  
                        l1066 1212                          l1084 132C                          l1086 1380  
                        l1094 13AC                          l1098 15B0                          _LATC 000F8B  
                        i2l30 14A8                          _main 15A6                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 002B                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 1518                         ??_MAX 002A  
                       ??_MIN 002A    __size_of_sensorComputation 01E4                         ?_main 0001  
             __end_of___awdiv 1450                         _T0CON 000FD5               ___awdiv@divisor 0022  
                       i2l922 1496                         i2l924 14A0               ___awdiv@counter 0024  
                       _TRISC 000F94           _ConfigureOscillator 15BA                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               __end_of_low_isr 00A2                         tablat 000FF5  
                       status 000FD8          ?_ConfigureOscillator 0001               __initialization 1590  
                __end_of_main 15BA                        ??_main 003F                 __activetblptr 000002  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0020  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 0020  
       ??_ConfigureOscillator 0020                __CFG_XINST$OFF 000000            sensorComputation@i 0035  
          sensorComputation@j 0037              __end_of_high_isr 14E2                        ___wmul 1518  
                   ??___awdiv 0024                __CFG_STVREN$ON 000000                        clear_0 1596  
            ___awdiv@quotient 0026                  __mediumconst 0000                     ??_low_isr 0001  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0080       __end_of__initialization 159C               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                __pcstackCOMRAM 0001                    _delay_time 004D  
           _MotorDelayCounter 0049                       ?___wmul 0020                       _INTCON2 000FF1  
                     _OSCTUNE 000F9B                     ?_high_isr 0001                 _LMotorCounter 004F  
                     _InitApp 14E2                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 13BA               __size_of___wmul 0028                  __psmallconst 1000  
                     __pcinit 1590                       __ramtop 1000                       __ptext0 15A6  
                     __ptext1 11EE                       __ptext2 100A                       __ptext3 1518  
                     __ptext4 13BA                       __ptext5 1540                       __ptext6 1568  
                     __ptext7 14E2                       __ptext8 15BA                  __size_of_MAX 0028  
                __size_of_MIN 0028                       _low_isr 0018                 ?_sensorUpdate 0001  
                  ??_high_isr 0012                __pintcode_body 1450          end_of_initialization 159C  
            _sensorCorrection 1001                 __Lmediumconst 0000                       int_func 1450  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _PORTBbits 000F81                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0039   __end_of_ConfigureOscillator 15C4                __end_of___wmul 1540  
         start_initialization 1590                   __end_of_MAX 1590                   __end_of_MIN 1568  
            __CFG_OSC$INTIO67 000000                      ??___wmul 0024              __CFG_LPT1OSC$OFF 000000  
              _sensorLocation 1005                   __pbssCOMRAM 003F                 __pcstackBANK0 0080  
      sensorUpdate@sensorTemp 0080             __size_of_high_isr 14DA                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                     _algorithm 0051                     __pintcode 0008  
                    ?___awdiv 0020          __end_of_sensorUpdate 13BA        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_low_isr 0001                ___wmul@product 0024              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0020                 _RMotorCounter 0050  
            __size_of_InitApp 0036                      __Hrparam 0000          sensorComputation@max 002F  
                    __Lrparam 0000          sensorComputation@min 0031          sensorComputation@sum 0033  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096              __size_of_low_isr 008A  
                    _high_isr 0008            _LMotorDelayCounter 0047            _RMotorDelayCounter 004B  
               __size_of_main 0014         __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A  
           _sensorComputation 100A                    _INTCONbits 000FF2            ?_sensorComputation 002B  
               sensorUpdate@i 00D0                 sensorUpdate@j 00D2                  _sensorUpdate 11EE  
                    intlevel1 0000                      intlevel2 0000           ??_sensorComputation 002D  
   __end_of_sensorComputation 11EE                   _sensorValue 003F  
