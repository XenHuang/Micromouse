

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat May 02 15:50:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  001DAE                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _ignoreControll
    45  001DAE  0A                 	db	10
    46                           
    47                           	psect	smallconst
    48  001000                     __psmallconst:
    49                           	opt stack 0
    50  001000  00                 	db	0
    51  001001                     _sensorLocation:
    52                           	opt stack 0
    53  001001  1B                 	db	27
    54  001002  2B                 	db	43
    55  001003  1F                 	db	31
    56  001004  33                 	db	51
    57  001005                     __end_of_sensorLocation:
    58                           	opt stack 0
    59  0000                     _LATC	set	3979
    60  0000                     _OSCTUNE	set	3995
    61  0000                     _TRISBbits	set	3987
    62  0000                     _TRISC	set	3988
    63  0000                     _TRISEbits	set	3990
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _OSCCON	set	4051
    71  0000                     _T0CON	set	4053
    72  0000                     _INTCON	set	4082
    73  0000                     _INTCON2	set	4081
    74  0000                     _INTCONbits	set	4082
    75                           
    76                           ; #config settings
    77  001005  00                 	db	0	; dummy byte at the end
    78  0000                     
    79                           	psect	cinit
    80  001C66                     __pcinit:
    81                           	opt stack 0
    82  001C66                     start_initialization:
    83                           	opt stack 0
    84  001C66                     __initialization:
    85                           	opt stack 0
    86                           
    87                           ; Clear objects allocated to BANK0 (8 bytes)
    88  001C66  EE00  F0F4         	lfsr	0,__pbssBANK0
    89  001C6A  0E08               	movlw	8
    90  001C6C                     clear_0:
    91  001C6C  6AEE               	clrf	postinc0,c
    92  001C6E  06E8               	decf	wreg,f,c
    93  001C70  E1FD               	bnz	clear_0
    94                           
    95                           ; Clear objects allocated to COMRAM (49 bytes)
    96  001C72  EE00  F001         	lfsr	0,__pbssCOMRAM
    97  001C76  0E31               	movlw	49
    98  001C78                     clear_1:
    99  001C78  6AEE               	clrf	postinc0,c
   100  001C7A  06E8               	decf	wreg,f,c
   101  001C7C  E1FD               	bnz	clear_1
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  001C7E  0EAE               	movlw	low __pidataCOMRAM
   106  001C80  6EF6               	movwf	tblptrl,c
   107  001C82  0E1D               	movlw	high __pidataCOMRAM
   108  001C84  6EF7               	movwf	tblptrh,c
   109  001C86  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  001C88  6EF8               	movwf	tblptru,c
   111  001C8A  0009               	tblrd		*+	;fetch initializer
   112  001C8C  CFF5 F059          	movff	tablat,__pdataCOMRAM
   113  001C90                     end_of_initialization:
   114                           	opt stack 0
   115  001C90                     __end_of__initialization:
   116                           	opt stack 0
   117  001C90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   118  001C92  6EF8               	movwf	tblptru,c
   119  001C94  0100               	movlb	0
   120  001C96  EF7D  F00E         	goto	_main	;jump to C main() function
   121                           tblptru	equ	0xFF8
   122                           tblptrh	equ	0xFF7
   123                           tblptrl	equ	0xFF6
   124                           tablat	equ	0xFF5
   125                           postinc0	equ	0xFEE
   126                           wreg	equ	0xFE8
   127                           
   128                           	psect	bssCOMRAM
   129  000001                     __pbssCOMRAM:
   130                           	opt stack 0
   131  000001                     _sensorValue:
   132                           	opt stack 0
   133  000001                     	ds	8
   134  000009                     _ControllerCounter:
   135                           	opt stack 0
   136  000009                     	ds	2
   137  00000B                     _Deadend:
   138                           	opt stack 0
   139  00000B                     	ds	2
   140  00000D                     _ForwardCounter:
   141                           	opt stack 0
   142  00000D                     	ds	2
   143  00000F                     _LTurnCounter:
   144                           	opt stack 0
   145  00000F                     	ds	2
   146  000011                     _MotorDelayCounter:
   147                           	opt stack 0
   148  000011                     	ds	2
   149  000013                     _RTurnCounter:
   150                           	opt stack 0
   151  000013                     	ds	2
   152  000015                     _ReverseCounter:
   153                           	opt stack 0
   154  000015                     	ds	2
   155  000017                     _RotateCounter:
   156                           	opt stack 0
   157  000017                     	ds	2
   158  000019                     _TurnLeft:
   159                           	opt stack 0
   160  000019                     	ds	2
   161  00001B                     _TurnRight:
   162                           	opt stack 0
   163  00001B                     	ds	2
   164  00001D                     _TurnedLeft:
   165                           	opt stack 0
   166  00001D                     	ds	2
   167  00001F                     _TurnedRight:
   168                           	opt stack 0
   169  00001F                     	ds	2
   170  000021                     _delay_time:
   171                           	opt stack 0
   172  000021                     	ds	2
   173  000023                     _errorD:
   174                           	opt stack 0
   175  000023                     	ds	2
   176  000025                     _errorP:
   177                           	opt stack 0
   178  000025                     	ds	2
   179  000027                     _ignoreFControll:
   180                           	opt stack 0
   181  000027                     	ds	2
   182  000029                     _oldErrorP:
   183                           	opt stack 0
   184  000029                     	ds	2
   185  00002B                     _totalError:
   186                           	opt stack 0
   187  00002B                     	ds	2
   188  00002D                     _LMotorCounter:
   189                           	opt stack 0
   190  00002D                     	ds	1
   191  00002E                     _RMotorCounter:
   192                           	opt stack 0
   193  00002E                     	ds	1
   194  00002F                     _algorithm:
   195                           	opt stack 0
   196  00002F                     	ds	1
   197  000030                     _justTurned:
   198                           	opt stack 0
   199  000030                     	ds	1
   200  000031                     _rotatingSide:
   201                           	opt stack 0
   202  000031                     	ds	1
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           
   210                           	psect	dataCOMRAM
   211  000059                     __pdataCOMRAM:
   212                           	opt stack 0
   213  000059                     _ignoreControll:
   214                           	opt stack 0
   215  000059                     	ds	1
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	bssBANK0
   224  0000F4                     __pbssBANK0:
   225                           	opt stack 0
   226  0000F4                     _sensorCorrection:
   227                           	opt stack 0
   228  0000F4                     	ds	8
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	cstackBANK0
   237  000080                     __pcstackBANK0:
   238                           	opt stack 0
   239  000080                     ?___wmul:
   240                           	opt stack 0
   241  000080                     ?___awdiv:
   242                           	opt stack 0
   243  000080                     delay@ms:
   244                           	opt stack 0
   245  000080                     ___wmul@multiplier:
   246                           	opt stack 0
   247  000080                     ___awdiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x0
   251  000080                     	ds	2
   252  000082                     delay@x:
   253                           	opt stack 0
   254  000082                     ___wmul@multiplicand:
   255                           	opt stack 0
   256  000082                     ___awdiv@divisor:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  000082                     	ds	2
   261  000084                     ___awdiv@counter:
   262                           	opt stack 0
   263  000084                     ___wmul@product:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267  000084                     	ds	1
   268  000085                     ___awdiv@sign:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x5
   272  000085                     	ds	1
   273  000086                     ?_MIN:
   274                           	opt stack 0
   275  000086                     ?_MAX:
   276                           	opt stack 0
   277  000086                     MIN@a:
   278                           	opt stack 0
   279  000086                     MAX@a:
   280                           	opt stack 0
   281  000086                     ___awdiv@quotient:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x6
   285  000086                     	ds	2
   286  000088                     ??_setCorrection:
   287  000088                     MIN@b:
   288                           	opt stack 0
   289  000088                     MAX@b:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x8
   293  000088                     	ds	2
   294  00008A                     setCorrection@frontAvg:
   295                           	opt stack 0
   296  00008A                     sensorComputation@sensorTemp:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0xA
   300  00008A                     	ds	2
   301  00008C                     sensorComputation@getCorrection:
   302                           	opt stack 0
   303  00008C                     setCorrection@sideAvg:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0xC
   307  00008C                     	ds	1
   308  00008D                     ??_sensorComputation:
   309                           
   310                           ; 0 bytes @ 0xD
   311  00008D                     	ds	2
   312  00008F                     sensorComputation@max:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xF
   316  00008F                     	ds	2
   317  000091                     sensorComputation@min:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x11
   321  000091                     	ds	2
   322  000093                     sensorComputation@sum:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x13
   326  000093                     	ds	2
   327  000095                     sensorComputation@j:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x15
   331  000095                     	ds	2
   332  000097                     sensorComputation@i:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x17
   336  000097                     	ds	2
   337  000099                     ??_sensorUpdate:
   338                           
   339                           ; 0 bytes @ 0x19
   340  000099                     	ds	6
   341  00009F                     sensorUpdate@sensorTemp:
   342                           	opt stack 0
   343                           
   344                           ; 80 bytes @ 0x1F
   345  00009F                     	ds	80
   346  0000EF                     sensorUpdate@getCorrection:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0x6F
   350  0000EF                     	ds	1
   351  0000F0                     sensorUpdate@i:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x70
   355  0000F0                     	ds	2
   356  0000F2                     sensorUpdate@j:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x72
   360  0000F2                     	ds	2
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368                           	psect	cstackCOMRAM
   369  000032                     __pcstackCOMRAM:
   370                           	opt stack 0
   371  000032                     ??_low_isr:
   372  000032                     
   373                           ; 0 bytes @ 0x0
   374  000032                     	ds	17
   375  000043                     ?_ABS:
   376                           	opt stack 0
   377  000043                     motorCounterUpdate@reverse:
   378                           	opt stack 0
   379  000043                     merge@right:
   380                           	opt stack 0
   381  000043                     moveMouse@action:
   382                           	opt stack 0
   383  000043                     ABS@x:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x11
   387  000043                     	ds	1
   388  000044                     motorCounterUpdate@side:
   389                           	opt stack 0
   390  000044                     merge@left:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x12
   394  000044                     	ds	1
   395  000045                     ??_KController:
   396  000045                     ??_FrontController:
   397  000045                     merge@merged:
   398                           	opt stack 0
   399  000045                     rotate@side:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x13
   403  000045                     	ds	2
   404  000047                     KController@correctTo:
   405                           	opt stack 0
   406  000047                     FrontController@correctTo:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x15
   410  000047                     	ds	1
   411  000048                     KController@diff:
   412                           	opt stack 0
   413  000048                     FrontController@diff2:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x16
   417  000048                     	ds	2
   418  00004A                     ??_high_isr:
   419                           
   420                           ; 0 bytes @ 0x18
   421  00004A                     	ds	14
   422  000058                     ??_MIN:
   423  000058                     ??_MAX:
   424  000058                     ??_delay:
   425  000058                     
   426                           ; 0 bytes @ 0x26
   427  000058                     	ds	1
   428  000059                     tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           ; 0 bytes @ 0x27
   436 ;;
   437 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   438 ;;
   439 ;; *************** function _main *****************
   440 ;; Defined at:
   441 ;;		line 41 in file "main.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;		None
   444 ;; Auto vars:     Size  Location     Type
   445 ;;		None
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:        0 bytes
   460 ;; Hardware stack levels required when called:    7
   461 ;; This function calls:
   462 ;;		_ConfigureOscillator
   463 ;;		_InitApp
   464 ;;		_sensorUpdate
   465 ;;		_setCorrection
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text0
   472  001CFA                     __ptext0:
   473                           	opt stack 0
   474  001CFA                     _main:
   475                           	opt stack 24
   476                           
   477                           ;main.c: 44: ConfigureOscillator();
   478                           
   479                           ;incstack = 0
   480  001CFA  ECCE  F00E         	call	_ConfigureOscillator	;wreg free
   481                           
   482                           ;main.c: 47: InitApp();
   483  001CFE  ECDB  F00D         	call	_InitApp	;wreg free
   484                           
   485                           ;main.c: 48: sensorUpdate(1);
   486  001D02  0E01               	movlw	1
   487  001D04  ECFB  F00A         	call	_sensorUpdate
   488                           
   489                           ;main.c: 49: setCorrection();
   490  001D08  EC8B  F00B         	call	_setCorrection	;wreg free
   491                           
   492                           ;main.c: 50: INTCONbits.GIE = 1;
   493  001D0C  8EF2               	bsf	intcon,7,c	;volatile
   494  001D0E  D000               	goto	l2021
   495  001D10                     l2021:
   496                           
   497                           ;main.c: 52: {
   498                           ;main.c: 53: sensorUpdate(0);
   499  001D10  0E00               	movlw	0
   500  001D12  ECFB  F00A         	call	_sensorUpdate
   501  001D16  D7FC               	goto	l2021
   502  001D18  EF51  F000         	goto	start
   503  001D1C                     __end_of_main:
   504                           	opt stack 0
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           intcon	equ	0xFF2
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           
   513 ;; *************** function _setCorrection *****************
   514 ;; Defined at:
   515 ;;		line 125 in file "user.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  sideAvg         2   12[BANK0 ] int 
   520 ;;  frontAvg        2   10[BANK0 ] int 
   521 ;; Return value:  Size  Location     Type
   522 ;;		None               void
   523 ;; Registers used:
   524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;Total ram usage:        6 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    5
   537 ;; This function calls:
   538 ;;		___awdiv
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text1
   545  001716                     __ptext1:
   546                           	opt stack 0
   547  001716                     _setCorrection:
   548                           	opt stack 25
   549                           
   550                           ;user.c: 127: int sideAvg,frontAvg;
   551                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   552                           
   553                           ;incstack = 0
   554  001716  5001               	movf	_sensorValue,w,c
   555  001718  2403               	addwf	_sensorValue+2,w,c
   556  00171A  0100               	movlb	0	; () banked
   557  00171C  6F80               	movwf	___awdiv@dividend& (0+255),b
   558  00171E  5002               	movf	_sensorValue+1,w,c
   559  001720  2004               	addwfc	_sensorValue+3,w,c
   560  001722  0100               	movlb	0	; () banked
   561  001724  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   562  001726  0E00               	movlw	0
   563  001728  0100               	movlb	0	; () banked
   564  00172A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   565  00172C  0E02               	movlw	2
   566  00172E  6F82               	movwf	___awdiv@divisor& (0+255),b
   567  001730  ECF1  F00C         	call	___awdiv	;wreg free
   568  001734  C080  F08C         	movff	?___awdiv,setCorrection@sideAvg
   569  001738  C081  F08D         	movff	?___awdiv+1,setCorrection@sideAvg+1
   570                           
   571                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   572  00173C  5007               	movf	_sensorValue+6,w,c
   573  00173E  2405               	addwf	_sensorValue+4,w,c
   574  001740  0100               	movlb	0	; () banked
   575  001742  6F80               	movwf	___awdiv@dividend& (0+255),b
   576  001744  5008               	movf	_sensorValue+7,w,c
   577  001746  2006               	addwfc	_sensorValue+5,w,c
   578  001748  0100               	movlb	0	; () banked
   579  00174A  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   580  00174C  0E00               	movlw	0
   581  00174E  0100               	movlb	0	; () banked
   582  001750  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   583  001752  0E02               	movlw	2
   584  001754  6F82               	movwf	___awdiv@divisor& (0+255),b
   585  001756  ECF1  F00C         	call	___awdiv	;wreg free
   586  00175A  C080  F08A         	movff	?___awdiv,setCorrection@frontAvg
   587  00175E  C081  F08B         	movff	?___awdiv+1,setCorrection@frontAvg+1
   588                           
   589                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   590  001762  C001  F088         	movff	_sensorValue,??_setCorrection
   591  001766  C002  F089         	movff	_sensorValue+1,??_setCorrection+1
   592  00176A  0100               	movlb	0	; () banked
   593  00176C  1F88               	comf	??_setCorrection& (0+255),f,b
   594  00176E  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   595  001770  4B88               	infsnz	??_setCorrection& (0+255),f,b
   596  001772  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   597  001774  0100               	movlb	0	; () banked
   598  001776  518C               	movf	setCorrection@sideAvg& (0+255),w,b
   599  001778  0100               	movlb	0	; () banked
   600  00177A  2588               	addwf	??_setCorrection& (0+255),w,b
   601  00177C  0100               	movlb	0	; () banked
   602  00177E  6FF4               	movwf	_sensorCorrection& (0+255),b
   603  001780  0100               	movlb	0	; () banked
   604  001782  518D               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   605  001784  0100               	movlb	0	; () banked
   606  001786  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   607  001788  0100               	movlb	0	; () banked
   608  00178A  6FF5               	movwf	(_sensorCorrection+1)& (0+255),b
   609                           
   610                           ; BSR set to: 0
   611                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   612  00178C  EE20  F003         	lfsr	2,_sensorValue+2
   613  001790  CFDE F088          	movff	postinc2,??_setCorrection
   614  001794  CFDD F089          	movff	postdec2,??_setCorrection+1
   615  001798  0100               	movlb	0	; () banked
   616  00179A  1F88               	comf	??_setCorrection& (0+255),f,b
   617  00179C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   618  00179E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   619  0017A0  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   620  0017A2  0100               	movlb	0	; () banked
   621  0017A4  518C               	movf	setCorrection@sideAvg& (0+255),w,b
   622  0017A6  0100               	movlb	0	; () banked
   623  0017A8  2588               	addwf	??_setCorrection& (0+255),w,b
   624  0017AA  0100               	movlb	0	; () banked
   625  0017AC  6FF6               	movwf	(_sensorCorrection+2)& (0+255),b
   626  0017AE  0100               	movlb	0	; () banked
   627  0017B0  518D               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   628  0017B2  0100               	movlb	0	; () banked
   629  0017B4  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   630  0017B6  0100               	movlb	0	; () banked
   631  0017B8  6FF7               	movwf	(_sensorCorrection+3)& (0+255),b
   632                           
   633                           ; BSR set to: 0
   634                           ;user.c: 133: sensorCorrection[2] = sideAvg - sensorValue[2];
   635  0017BA  EE20  F005         	lfsr	2,_sensorValue+4
   636  0017BE  CFDE F088          	movff	postinc2,??_setCorrection
   637  0017C2  CFDD F089          	movff	postdec2,??_setCorrection+1
   638  0017C6  0100               	movlb	0	; () banked
   639  0017C8  1F88               	comf	??_setCorrection& (0+255),f,b
   640  0017CA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   641  0017CC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   642  0017CE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   643  0017D0  0100               	movlb	0	; () banked
   644  0017D2  518C               	movf	setCorrection@sideAvg& (0+255),w,b
   645  0017D4  0100               	movlb	0	; () banked
   646  0017D6  2588               	addwf	??_setCorrection& (0+255),w,b
   647  0017D8  0100               	movlb	0	; () banked
   648  0017DA  6FF8               	movwf	(_sensorCorrection+4)& (0+255),b
   649  0017DC  0100               	movlb	0	; () banked
   650  0017DE  518D               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   651  0017E0  0100               	movlb	0	; () banked
   652  0017E2  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   653  0017E4  0100               	movlb	0	; () banked
   654  0017E6  6FF9               	movwf	(_sensorCorrection+5)& (0+255),b
   655                           
   656                           ; BSR set to: 0
   657                           ;user.c: 134: sensorCorrection[3] = sideAvg - sensorValue[3];
   658  0017E8  EE20  F007         	lfsr	2,_sensorValue+6
   659  0017EC  CFDE F088          	movff	postinc2,??_setCorrection
   660  0017F0  CFDD F089          	movff	postdec2,??_setCorrection+1
   661  0017F4  0100               	movlb	0	; () banked
   662  0017F6  1F88               	comf	??_setCorrection& (0+255),f,b
   663  0017F8  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   664  0017FA  4B88               	infsnz	??_setCorrection& (0+255),f,b
   665  0017FC  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   666  0017FE  0100               	movlb	0	; () banked
   667  001800  518C               	movf	setCorrection@sideAvg& (0+255),w,b
   668  001802  0100               	movlb	0	; () banked
   669  001804  2588               	addwf	??_setCorrection& (0+255),w,b
   670  001806  0100               	movlb	0	; () banked
   671  001808  6FFA               	movwf	(_sensorCorrection+6)& (0+255),b
   672  00180A  0100               	movlb	0	; () banked
   673  00180C  518D               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   674  00180E  0100               	movlb	0	; () banked
   675  001810  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   676  001812  0100               	movlb	0	; () banked
   677  001814  6FFB               	movwf	(_sensorCorrection+7)& (0+255),b
   678                           
   679                           ; BSR set to: 0
   680  001816  0012               	return		;funcret
   681  001818                     __end_of_setCorrection:
   682                           	opt stack 0
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           intcon	equ	0xFF2
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postinc2	equ	0xFDE
   691                           postdec2	equ	0xFDD
   692                           
   693 ;; *************** function _sensorUpdate *****************
   694 ;; Defined at:
   695 ;;		line 161 in file "user.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  getCorrectio    1    wreg     unsigned char 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  getCorrectio    1  111[BANK0 ] unsigned char 
   700 ;;  sensorTemp     80   31[BANK0 ] int [10][4]
   701 ;;  j               2  114[BANK0 ] int 
   702 ;;  i               2  112[BANK0 ] int 
   703 ;; Return value:  Size  Location     Type
   704 ;;		None               void
   705 ;; Registers used:
   706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   715 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   716 ;;Total ram usage:       91 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    6
   719 ;; This function calls:
   720 ;;		___wmul
   721 ;;		_sensorComputation
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text2
   728  0015F6                     __ptext2:
   729                           	opt stack 0
   730  0015F6                     _sensorUpdate:
   731                           	opt stack 24
   732                           
   733                           ; BSR set to: 0
   734                           ;incstack = 0
   735                           ;sensorUpdate@getCorrection stored from wreg
   736  0015F6  0100               	movlb	0	; () banked
   737  0015F8  6FEF               	movwf	sensorUpdate@getCorrection& (0+255),b
   738                           
   739                           ; BSR set to: 0
   740                           ;user.c: 163: int i,j;
   741                           ;user.c: 164: int sensorTemp[4][10];
   742                           ;user.c: 167: for(i = 0; i < 10; i++)
   743  0015FA  0E00               	movlw	0
   744  0015FC  0100               	movlb	0	; () banked
   745  0015FE  6FF1               	movwf	(sensorUpdate@i+1)& (0+255),b
   746  001600  0E00               	movlw	0
   747  001602  6FF0               	movwf	sensorUpdate@i& (0+255),b
   748  001604                     l1975:
   749                           
   750                           ; BSR set to: 0
   751  001604  0100               	movlb	0	; () banked
   752  001606  BFF1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   753  001608  D00A               	goto	l1979
   754  00160A  0100               	movlb	0	; () banked
   755  00160C  51F1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   756  00160E  E178               	bnz	l1999
   757  001610  0E0A               	movlw	10
   758  001612  0100               	movlb	0	; () banked
   759  001614  5DF0               	subwf	sensorUpdate@i& (0+255),w,b
   760  001616  B0D8               	btfsc	status,0,c
   761  001618  D073               	goto	l1999
   762  00161A  D001               	goto	l1979
   763                           
   764                           ; BSR set to: 0
   765  00161C  D071               	goto	l1999
   766  00161E                     l1979:
   767                           
   768                           ; BSR set to: 0
   769                           ;user.c: 168: {
   770                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   771  00161E  0E00               	movlw	0
   772  001620  0100               	movlb	0	; () banked
   773  001622  6FF3               	movwf	(sensorUpdate@j+1)& (0+255),b
   774  001624  0E00               	movlw	0
   775  001626  6FF2               	movwf	sensorUpdate@j& (0+255),b
   776  001628                     l1981:
   777                           
   778                           ; BSR set to: 0
   779  001628  0100               	movlb	0	; () banked
   780  00162A  BFF3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   781  00162C  D00A               	goto	l1985
   782  00162E  0100               	movlb	0	; () banked
   783  001630  51F3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   784  001632  E161               	bnz	l1995
   785  001634  0E04               	movlw	4
   786  001636  0100               	movlb	0	; () banked
   787  001638  5DF2               	subwf	sensorUpdate@j& (0+255),w,b
   788  00163A  B0D8               	btfsc	status,0,c
   789  00163C  D05C               	goto	l1995
   790  00163E  D001               	goto	l1985
   791                           
   792                           ; BSR set to: 0
   793  001640  D05A               	goto	l1995
   794  001642                     l1985:
   795                           
   796                           ; BSR set to: 0
   797                           ;user.c: 170: {
   798                           ;user.c: 171: ADCON0 = sensorLocation[j];
   799  001642  0E01               	movlw	low _sensorLocation
   800  001644  0100               	movlb	0	; () banked
   801  001646  25F2               	addwf	sensorUpdate@j& (0+255),w,b
   802  001648  6EF6               	movwf	tblptrl,c
   803  00164A  0E10               	movlw	high _sensorLocation
   804  00164C  21F3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   805  00164E  6EF7               	movwf	tblptrh,c
   806  001650                     	if	0	;There are less than 3 active tblptr bytes
   807  001650                     	endif
   808  001650  0008               	tblrd		*
   809  001652  CFF5 FFC2          	movff	tablat,4034	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   813  001656  82C2               	bsf	4034,1,c	;volatile
   814                           
   815                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   816  001658  D000               	goto	l312
   817  00165A                     l312:
   818                           
   819                           ; BSR set to: 0
   820  00165A  B2C2               	btfsc	4034,1,c	;volatile
   821  00165C  D7FE               	goto	l312
   822                           
   823                           ; BSR set to: 0
   824                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   825                           
   826                           ; BSR set to: 0
   827  00165E  CFC3 F099          	movff	4035,??_sensorUpdate	;volatile
   828  001662  0E06               	movlw	6
   829  001664  0100               	movlb	0	; () banked
   830  001666  6F9A               	movwf	(??_sensorUpdate+1)& (0+255),b
   831  001668                     u1735:
   832  001668  0100               	movlb	0	; () banked
   833  00166A  90D8               	bcf	status,0,c
   834  00166C  3399               	rrcf	??_sensorUpdate& (0+255),f,b
   835  00166E  0100               	movlb	0	; () banked
   836  001670  2F9A               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   837  001672  D7FA               	goto	u1735
   838  001674  0100               	movlb	0	; () banked
   839  001676  5199               	movf	??_sensorUpdate& (0+255),w,b
   840  001678  CFC4 F09B          	movff	4036,??_sensorUpdate+2	;volatile
   841  00167C  0100               	movlb	0	; () banked
   842  00167E  6B9C               	clrf	(??_sensorUpdate+3)& (0+255),b
   843  001680  0100               	movlb	0	; () banked
   844  001682  90D8               	bcf	status,0,c
   845  001684  379B               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   846  001686  379C               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   847  001688  0100               	movlb	0	; () banked
   848  00168A  90D8               	bcf	status,0,c
   849  00168C  379B               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   850  00168E  379C               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   851  001690  0100               	movlb	0	; () banked
   852  001692  279B               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   853  001694  0E00               	movlw	0
   854  001696  239C               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   855  001698  C0F2  F080         	movff	sensorUpdate@j,___wmul@multiplier
   856  00169C  C0F3  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   857  0016A0  0E00               	movlw	0
   858  0016A2  0100               	movlb	0	; () banked
   859  0016A4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   860  0016A6  0E14               	movlw	20
   861  0016A8  6F82               	movwf	___wmul@multiplicand& (0+255),b
   862  0016AA  EC17  F00E         	call	___wmul	;wreg free
   863  0016AE  0E9F               	movlw	low sensorUpdate@sensorTemp
   864  0016B0  0100               	movlb	0	; () banked
   865  0016B2  6F9D               	movwf	(??_sensorUpdate+4)& (0+255),b
   866  0016B4  0E00               	movlw	high sensorUpdate@sensorTemp
   867  0016B6  0100               	movlb	0	; () banked
   868  0016B8  6F9E               	movwf	(??_sensorUpdate+5)& (0+255),b
   869  0016BA  0100               	movlb	0	; () banked
   870  0016BC  5180               	movf	?___wmul& (0+255),w,b
   871  0016BE  0100               	movlb	0	; () banked
   872  0016C0  279D               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   873  0016C2  0100               	movlb	0	; () banked
   874  0016C4  5181               	movf	(?___wmul+1)& (0+255),w,b
   875  0016C6  0100               	movlb	0	; () banked
   876  0016C8  239E               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   877  0016CA  90D8               	bcf	status,0,c
   878  0016CC  0100               	movlb	0	; () banked
   879  0016CE  35F0               	rlcf	sensorUpdate@i& (0+255),w,b
   880  0016D0  6ED9               	movwf	fsr2l,c
   881  0016D2  0100               	movlb	0	; () banked
   882  0016D4  35F1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   883  0016D6  6EDA               	movwf	fsr2h,c
   884  0016D8  0100               	movlb	0	; () banked
   885  0016DA  519D               	movf	(??_sensorUpdate+4)& (0+255),w,b
   886  0016DC  26D9               	addwf	fsr2l,f,c
   887  0016DE  0100               	movlb	0	; () banked
   888  0016E0  519E               	movf	(??_sensorUpdate+5)& (0+255),w,b
   889  0016E2  22DA               	addwfc	fsr2h,f,c
   890  0016E4  C09B  FFDE         	movff	??_sensorUpdate+2,postinc2
   891  0016E8  C09C  FFDD         	movff	??_sensorUpdate+3,postdec2
   892                           
   893                           ; BSR set to: 0
   894  0016EC  0100               	movlb	0	; () banked
   895  0016EE  4BF2               	infsnz	sensorUpdate@j& (0+255),f,b
   896  0016F0  2BF3               	incf	(sensorUpdate@j+1)& (0+255),f,b
   897  0016F2  D79A               	goto	l1981
   898                           
   899                           ; BSR set to: 0
   900  0016F4  D000               	goto	l1995
   901  0016F6                     l1995:
   902                           
   903                           ; BSR set to: 0
   904  0016F6  0100               	movlb	0	; () banked
   905  0016F8  4BF0               	infsnz	sensorUpdate@i& (0+255),f,b
   906  0016FA  2BF1               	incf	(sensorUpdate@i+1)& (0+255),f,b
   907  0016FC  D783               	goto	l1975
   908                           
   909                           ; BSR set to: 0
   910  0016FE  D000               	goto	l1999
   911  001700                     l1999:
   912                           
   913                           ; BSR set to: 0
   914                           ;user.c: 176: }
   915                           ;user.c: 177: }
   916                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   917  001700  0E9F               	movlw	low sensorUpdate@sensorTemp
   918  001702  0100               	movlb	0	; () banked
   919  001704  6F8A               	movwf	sensorComputation@sensorTemp& (0+255),b
   920  001706  0E00               	movlw	high sensorUpdate@sensorTemp
   921  001708  0100               	movlb	0	; () banked
   922  00170A  6F8B               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   923  00170C  C0EF  F08C         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   924  001710  EC99  F009         	call	_sensorComputation	;wreg free
   925  001714  0012               	return		;funcret
   926  001716                     __end_of_sensorUpdate:
   927                           	opt stack 0
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           intcon	equ	0xFF2
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           postinc2	equ	0xFDE
   936                           postdec2	equ	0xFDD
   937                           fsr2h	equ	0xFDA
   938                           fsr2l	equ	0xFD9
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _sensorComputation *****************
   942 ;; Defined at:
   943 ;;		line 137 in file "user.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;  sensorTemp      2   10[BANK0 ] PTR int [10]
   946 ;;		 -> sensorUpdate@sensorTemp(80), 
   947 ;;  getCorrectio    1   12[BANK0 ] unsigned char 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  i               2   23[BANK0 ] int 
   950 ;;  j               2   21[BANK0 ] int 
   951 ;;  sum             2   19[BANK0 ] int 
   952 ;;  min             2   17[BANK0 ] int 
   953 ;;  max             2   15[BANK0 ] int 
   954 ;; Return value:  Size  Location     Type
   955 ;;		None               void
   956 ;; Registers used:
   957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   963 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;Total ram usage:       15 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    5
   970 ;; This function calls:
   971 ;;		_MAX
   972 ;;		_MIN
   973 ;;		___awdiv
   974 ;;		___wmul
   975 ;; This function is called by:
   976 ;;		_sensorUpdate
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text3
   981  001332                     __ptext3:
   982                           	opt stack 0
   983  001332                     _sensorComputation:
   984                           	opt stack 24
   985                           
   986                           ;user.c: 139: int max,min,i,j,sum;
   987                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   988                           
   989                           ;incstack = 0
   990  001332  0E00               	movlw	0
   991  001334  0100               	movlb	0	; () banked
   992  001336  6F98               	movwf	(sensorComputation@i+1)& (0+255),b
   993  001338  0E00               	movlw	0
   994  00133A  6F97               	movwf	sensorComputation@i& (0+255),b
   995                           
   996                           ; BSR set to: 0
   997  00133C  0100               	movlb	0	; () banked
   998  00133E  BF98               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   999  001340  D00A               	goto	l1929
  1000  001342  0100               	movlb	0	; () banked
  1001  001344  5198               	movf	(sensorComputation@i+1)& (0+255),w,b
  1002  001346  E106               	bnz	u1640
  1003  001348  0E04               	movlw	4
  1004  00134A  0100               	movlb	0	; () banked
  1005  00134C  5D97               	subwf	sensorComputation@i& (0+255),w,b
  1006  00134E  B0D8               	btfsc	status,0,c
  1007  001350  D151               	goto	l305
  1008  001352  D001               	goto	l1929
  1009  001354                     u1640:
  1010                           
  1011                           ; BSR set to: 0
  1012  001354  D14F               	goto	l305
  1013  001356                     l1929:
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;user.c: 141: {
  1017                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1018  001356  0E00               	movlw	0
  1019  001358  0100               	movlb	0	; () banked
  1020  00135A  6F96               	movwf	(sensorComputation@j+1)& (0+255),b
  1021  00135C  0E00               	movlw	0
  1022  00135E  6F95               	movwf	sensorComputation@j& (0+255),b
  1023                           
  1024                           ; BSR set to: 0
  1025  001360  0100               	movlb	0	; () banked
  1026  001362  BF96               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1027  001364  D00A               	goto	l1935
  1028  001366  0100               	movlb	0	; () banked
  1029  001368  5196               	movf	(sensorComputation@j+1)& (0+255),w,b
  1030  00136A  E106               	bnz	u1650
  1031  00136C  0E0A               	movlw	10
  1032  00136E  0100               	movlb	0	; () banked
  1033  001370  5D95               	subwf	sensorComputation@j& (0+255),w,b
  1034  001372  B0D8               	btfsc	status,0,c
  1035  001374  D0D3               	goto	l1945
  1036  001376  D001               	goto	l1935
  1037  001378                     u1650:
  1038                           
  1039                           ; BSR set to: 0
  1040  001378  D0D1               	goto	l1945
  1041  00137A                     l1935:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;user.c: 143: {
  1045                           ;user.c: 144: if(j == 0)
  1046  00137A  0100               	movlb	0	; () banked
  1047  00137C  5195               	movf	sensorComputation@j& (0+255),w,b
  1048  00137E  0100               	movlb	0	; () banked
  1049  001380  1196               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1050  001382  A4D8               	btfss	status,2,c
  1051  001384  D031               	goto	l1939
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;user.c: 145: {
  1055                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1056  001386  C097  F080         	movff	sensorComputation@i,___wmul@multiplier
  1057  00138A  C098  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1058  00138E  0E00               	movlw	0
  1059  001390  0100               	movlb	0	; () banked
  1060  001392  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1061  001394  0E14               	movlw	20
  1062  001396  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1063  001398  EC17  F00E         	call	___wmul	;wreg free
  1064  00139C  C08A  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1065  0013A0  C08B  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1066  0013A4  0100               	movlb	0	; () banked
  1067  0013A6  5180               	movf	?___wmul& (0+255),w,b
  1068  0013A8  0100               	movlb	0	; () banked
  1069  0013AA  278D               	addwf	??_sensorComputation& (0+255),f,b
  1070  0013AC  0100               	movlb	0	; () banked
  1071  0013AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  1072  0013B0  0100               	movlb	0	; () banked
  1073  0013B2  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1074  0013B4  90D8               	bcf	status,0,c
  1075  0013B6  0100               	movlb	0	; () banked
  1076  0013B8  3595               	rlcf	sensorComputation@j& (0+255),w,b
  1077  0013BA  6ED9               	movwf	fsr2l,c
  1078  0013BC  0100               	movlb	0	; () banked
  1079  0013BE  3596               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1080  0013C0  6EDA               	movwf	fsr2h,c
  1081  0013C2  0100               	movlb	0	; () banked
  1082  0013C4  518D               	movf	??_sensorComputation& (0+255),w,b
  1083  0013C6  26D9               	addwf	fsr2l,f,c
  1084  0013C8  0100               	movlb	0	; () banked
  1085  0013CA  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1086  0013CC  22DA               	addwfc	fsr2h,f,c
  1087  0013CE  CFDE F08F          	movff	postinc2,sensorComputation@max
  1088  0013D2  CFDD F090          	movff	postdec2,sensorComputation@max+1
  1089  0013D6  C08F  F091         	movff	sensorComputation@max,sensorComputation@min
  1090  0013DA  C090  F092         	movff	sensorComputation@max+1,sensorComputation@min+1
  1091  0013DE  C091  F093         	movff	sensorComputation@min,sensorComputation@sum
  1092  0013E2  C092  F094         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1093                           
  1094                           ;user.c: 147: continue;
  1095  0013E6  D08F               	goto	l1941
  1096  0013E8                     l1939:
  1097                           
  1098                           ; BSR set to: 0
  1099                           ;user.c: 148: }
  1100                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1101  0013E8  C097  F080         	movff	sensorComputation@i,___wmul@multiplier
  1102  0013EC  C098  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1103  0013F0  0E00               	movlw	0
  1104  0013F2  0100               	movlb	0	; () banked
  1105  0013F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1106  0013F6  0E14               	movlw	20
  1107  0013F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1108  0013FA  EC17  F00E         	call	___wmul	;wreg free
  1109  0013FE  C08A  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1110  001402  C08B  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1111  001406  0100               	movlb	0	; () banked
  1112  001408  5180               	movf	?___wmul& (0+255),w,b
  1113  00140A  0100               	movlb	0	; () banked
  1114  00140C  278D               	addwf	??_sensorComputation& (0+255),f,b
  1115  00140E  0100               	movlb	0	; () banked
  1116  001410  5181               	movf	(?___wmul+1)& (0+255),w,b
  1117  001412  0100               	movlb	0	; () banked
  1118  001414  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1119  001416  90D8               	bcf	status,0,c
  1120  001418  0100               	movlb	0	; () banked
  1121  00141A  3595               	rlcf	sensorComputation@j& (0+255),w,b
  1122  00141C  6ED9               	movwf	fsr2l,c
  1123  00141E  0100               	movlb	0	; () banked
  1124  001420  3596               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1125  001422  6EDA               	movwf	fsr2h,c
  1126  001424  0100               	movlb	0	; () banked
  1127  001426  518D               	movf	??_sensorComputation& (0+255),w,b
  1128  001428  26D9               	addwf	fsr2l,f,c
  1129  00142A  0100               	movlb	0	; () banked
  1130  00142C  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1131  00142E  22DA               	addwfc	fsr2h,f,c
  1132  001430  CFDE F086          	movff	postinc2,MIN@a
  1133  001434  CFDD F087          	movff	postdec2,MIN@a+1
  1134  001438  C091  F088         	movff	sensorComputation@min,MIN@b
  1135  00143C  C092  F089         	movff	sensorComputation@min+1,MIN@b+1
  1136  001440  EC4D  F00E         	call	_MIN	;wreg free
  1137  001444  C086  F091         	movff	?_MIN,sensorComputation@min
  1138  001448  C087  F092         	movff	?_MIN+1,sensorComputation@min+1
  1139                           
  1140                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1141  00144C  C097  F080         	movff	sensorComputation@i,___wmul@multiplier
  1142  001450  C098  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1143  001454  0E00               	movlw	0
  1144  001456  0100               	movlb	0	; () banked
  1145  001458  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1146  00145A  0E14               	movlw	20
  1147  00145C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1148  00145E  EC17  F00E         	call	___wmul	;wreg free
  1149  001462  C08A  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1150  001466  C08B  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1151  00146A  0100               	movlb	0	; () banked
  1152  00146C  5180               	movf	?___wmul& (0+255),w,b
  1153  00146E  0100               	movlb	0	; () banked
  1154  001470  278D               	addwf	??_sensorComputation& (0+255),f,b
  1155  001472  0100               	movlb	0	; () banked
  1156  001474  5181               	movf	(?___wmul+1)& (0+255),w,b
  1157  001476  0100               	movlb	0	; () banked
  1158  001478  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1159  00147A  90D8               	bcf	status,0,c
  1160  00147C  0100               	movlb	0	; () banked
  1161  00147E  3595               	rlcf	sensorComputation@j& (0+255),w,b
  1162  001480  6ED9               	movwf	fsr2l,c
  1163  001482  0100               	movlb	0	; () banked
  1164  001484  3596               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1165  001486  6EDA               	movwf	fsr2h,c
  1166  001488  0100               	movlb	0	; () banked
  1167  00148A  518D               	movf	??_sensorComputation& (0+255),w,b
  1168  00148C  26D9               	addwf	fsr2l,f,c
  1169  00148E  0100               	movlb	0	; () banked
  1170  001490  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1171  001492  22DA               	addwfc	fsr2h,f,c
  1172  001494  CFDE F086          	movff	postinc2,MAX@a
  1173  001498  CFDD F087          	movff	postdec2,MAX@a+1
  1174  00149C  C08F  F088         	movff	sensorComputation@max,MAX@b
  1175  0014A0  C090  F089         	movff	sensorComputation@max+1,MAX@b+1
  1176  0014A4  EC65  F00E         	call	_MAX	;wreg free
  1177  0014A8  C086  F08F         	movff	?_MAX,sensorComputation@max
  1178  0014AC  C087  F090         	movff	?_MAX+1,sensorComputation@max+1
  1179                           
  1180                           ;user.c: 151: sum += sensorTemp[i][j];
  1181  0014B0  C097  F080         	movff	sensorComputation@i,___wmul@multiplier
  1182  0014B4  C098  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1183  0014B8  0E00               	movlw	0
  1184  0014BA  0100               	movlb	0	; () banked
  1185  0014BC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1186  0014BE  0E14               	movlw	20
  1187  0014C0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1188  0014C2  EC17  F00E         	call	___wmul	;wreg free
  1189  0014C6  C08A  F08D         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1190  0014CA  C08B  F08E         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1191  0014CE  0100               	movlb	0	; () banked
  1192  0014D0  5180               	movf	?___wmul& (0+255),w,b
  1193  0014D2  0100               	movlb	0	; () banked
  1194  0014D4  278D               	addwf	??_sensorComputation& (0+255),f,b
  1195  0014D6  0100               	movlb	0	; () banked
  1196  0014D8  5181               	movf	(?___wmul+1)& (0+255),w,b
  1197  0014DA  0100               	movlb	0	; () banked
  1198  0014DC  238E               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1199  0014DE  90D8               	bcf	status,0,c
  1200  0014E0  0100               	movlb	0	; () banked
  1201  0014E2  3595               	rlcf	sensorComputation@j& (0+255),w,b
  1202  0014E4  6ED9               	movwf	fsr2l,c
  1203  0014E6  0100               	movlb	0	; () banked
  1204  0014E8  3596               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1205  0014EA  6EDA               	movwf	fsr2h,c
  1206  0014EC  0100               	movlb	0	; () banked
  1207  0014EE  518D               	movf	??_sensorComputation& (0+255),w,b
  1208  0014F0  26D9               	addwf	fsr2l,f,c
  1209  0014F2  0100               	movlb	0	; () banked
  1210  0014F4  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1211  0014F6  22DA               	addwfc	fsr2h,f,c
  1212  0014F8  50DE               	movf	postinc2,w,c
  1213  0014FA  0100               	movlb	0	; () banked
  1214  0014FC  2793               	addwf	sensorComputation@sum& (0+255),f,b
  1215  0014FE  50DD               	movf	postdec2,w,c
  1216  001500  0100               	movlb	0	; () banked
  1217  001502  2394               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1218  001504  D000               	goto	l1941
  1219  001506                     l1941:
  1220                           
  1221                           ; BSR set to: 0
  1222  001506  0100               	movlb	0	; () banked
  1223  001508  4B95               	infsnz	sensorComputation@j& (0+255),f,b
  1224  00150A  2B96               	incf	(sensorComputation@j+1)& (0+255),f,b
  1225                           
  1226                           ; BSR set to: 0
  1227  00150C  0100               	movlb	0	; () banked
  1228  00150E  BF96               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1229  001510  D734               	goto	l1935
  1230  001512  0100               	movlb	0	; () banked
  1231  001514  5196               	movf	(sensorComputation@j+1)& (0+255),w,b
  1232  001516  E102               	bnz	l1945
  1233  001518  D729               	goto	L2
  1234  00151A  D000               	goto	l1945
  1235  00151C                     l1945:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;user.c: 152: }
  1239                           ;user.c: 153: sum = sum - min - max;
  1240  00151C  0100               	movlb	0	; () banked
  1241  00151E  518F               	movf	sensorComputation@max& (0+255),w,b
  1242  001520  0100               	movlb	0	; () banked
  1243  001522  2591               	addwf	sensorComputation@min& (0+255),w,b
  1244  001524  0100               	movlb	0	; () banked
  1245  001526  6F8D               	movwf	??_sensorComputation& (0+255),b
  1246  001528  0100               	movlb	0	; () banked
  1247  00152A  5190               	movf	(sensorComputation@max+1)& (0+255),w,b
  1248  00152C  0100               	movlb	0	; () banked
  1249  00152E  2192               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1250  001530  0100               	movlb	0	; () banked
  1251  001532  6F8E               	movwf	(??_sensorComputation+1)& (0+255),b
  1252  001534  0100               	movlb	0	; () banked
  1253  001536  1F8D               	comf	??_sensorComputation& (0+255),f,b
  1254  001538  1F8E               	comf	(??_sensorComputation+1)& (0+255),f,b
  1255  00153A  4B8D               	infsnz	??_sensorComputation& (0+255),f,b
  1256  00153C  2B8E               	incf	(??_sensorComputation+1)& (0+255),f,b
  1257  00153E  0100               	movlb	0	; () banked
  1258  001540  5193               	movf	sensorComputation@sum& (0+255),w,b
  1259  001542  0100               	movlb	0	; () banked
  1260  001544  258D               	addwf	??_sensorComputation& (0+255),w,b
  1261  001546  0100               	movlb	0	; () banked
  1262  001548  6F93               	movwf	sensorComputation@sum& (0+255),b
  1263  00154A  0100               	movlb	0	; () banked
  1264  00154C  5194               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1265  00154E  0100               	movlb	0	; () banked
  1266  001550  218E               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1267  001552  0100               	movlb	0	; () banked
  1268  001554  6F94               	movwf	(sensorComputation@sum+1)& (0+255),b
  1269                           
  1270                           ;user.c: 154: if(getCorrection == 1)
  1271  001556  0100               	movlb	0	; () banked
  1272  001558  058C               	decf	sensorComputation@getCorrection& (0+255),w,b
  1273  00155A  A4D8               	btfss	status,2,c
  1274  00155C  D00C               	goto	l1949
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1278  00155E  C093  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1279  001562  C094  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1280  001566  0E00               	movlw	0
  1281  001568  0100               	movlb	0	; () banked
  1282  00156A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1283  00156C  0E08               	movlw	8
  1284  00156E  6F82               	movwf	___awdiv@divisor& (0+255),b
  1285  001570  ECF1  F00C         	call	___awdiv	;wreg free
  1286  001574  D022               	goto	L3
  1287  001576                     l1949:
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;user.c: 156: else
  1291                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1292  001576  90D8               	bcf	status,0,c
  1293  001578  0100               	movlb	0	; () banked
  1294  00157A  3597               	rlcf	sensorComputation@i& (0+255),w,b
  1295  00157C  6ED9               	movwf	fsr2l,c
  1296  00157E  0100               	movlb	0	; () banked
  1297  001580  3598               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1298  001582  6EDA               	movwf	fsr2h,c
  1299  001584  0EF4               	movlw	low _sensorCorrection
  1300  001586  26D9               	addwf	fsr2l,f,c
  1301  001588  0E00               	movlw	high _sensorCorrection
  1302  00158A  22DA               	addwfc	fsr2h,f,c
  1303  00158C  CFDE F08D          	movff	postinc2,??_sensorComputation
  1304  001590  CFDD F08E          	movff	postdec2,??_sensorComputation+1
  1305  001594  C093  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1306  001598  C094  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1307  00159C  0E00               	movlw	0
  1308  00159E  0100               	movlb	0	; () banked
  1309  0015A0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1310  0015A2  0E08               	movlw	8
  1311  0015A4  6F82               	movwf	___awdiv@divisor& (0+255),b
  1312  0015A6  ECF1  F00C         	call	___awdiv	;wreg free
  1313  0015AA  0100               	movlb	0	; () banked
  1314  0015AC  518D               	movf	??_sensorComputation& (0+255),w,b
  1315  0015AE  0100               	movlb	0	; () banked
  1316  0015B0  2780               	addwf	?___awdiv& (0+255),f,b
  1317  0015B2  0100               	movlb	0	; () banked
  1318  0015B4  518E               	movf	(??_sensorComputation+1)& (0+255),w,b
  1319  0015B6  0100               	movlb	0	; () banked
  1320  0015B8  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1321  0015BA                     L3:
  1322  0015BA  90D8               	bcf	status,0,c
  1323  0015BC  0100               	movlb	0	; () banked
  1324  0015BE  3597               	rlcf	sensorComputation@i& (0+255),w,b
  1325  0015C0  6ED9               	movwf	fsr2l,c
  1326  0015C2  0100               	movlb	0	; () banked
  1327  0015C4  3598               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1328  0015C6  6EDA               	movwf	fsr2h,c
  1329  0015C8  0E01               	movlw	low _sensorValue
  1330  0015CA  26D9               	addwf	fsr2l,f,c
  1331  0015CC  0E00               	movlw	high _sensorValue
  1332  0015CE  22DA               	addwfc	fsr2h,f,c
  1333  0015D0  0100               	movlb	0	; () banked
  1334  0015D2  C080  FFDE         	movff	?___awdiv,postinc2
  1335  0015D6  0100               	movlb	0	; () banked
  1336  0015D8  C081  FFDD         	movff	?___awdiv+1,postdec2
  1337  0015DC  D000               	goto	l1951
  1338  0015DE                     l1951:
  1339                           
  1340                           ; BSR set to: 0
  1341  0015DE  0100               	movlb	0	; () banked
  1342  0015E0  4B97               	infsnz	sensorComputation@i& (0+255),f,b
  1343  0015E2  2B98               	incf	(sensorComputation@i+1)& (0+255),f,b
  1344                           
  1345                           ; BSR set to: 0
  1346  0015E4  0100               	movlb	0	; () banked
  1347  0015E6  BF98               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1348  0015E8  D6B6               	goto	l1929
  1349  0015EA  0100               	movlb	0	; () banked
  1350  0015EC  5198               	movf	(sensorComputation@i+1)& (0+255),w,b
  1351  0015EE  E102               	bnz	l305
  1352  0015F0  D6AB               	goto	L4
  1353  0015F2  D000               	goto	l305
  1354  0015F4                     l305:
  1355                           
  1356                           ; BSR set to: 0
  1357  0015F4  0012               	return		;funcret
  1358  0015F6                     __end_of_sensorComputation:
  1359                           	opt stack 0
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           intcon	equ	0xFF2
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postinc2	equ	0xFDE
  1368                           postdec2	equ	0xFDD
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function ___wmul *****************
  1374 ;; Defined at:
  1375 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1378 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  product         2    4[BANK0 ] unsigned int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2    0[BANK0 ] unsigned int 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, prodl, prodh
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;Total ram usage:        6 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    4
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_sensorComputation
  1401 ;;		_sensorUpdate
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text4
  1406  001C2E                     __ptext4:
  1407                           	opt stack 0
  1408  001C2E                     ___wmul:
  1409                           	opt stack 24
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;incstack = 0
  1413  001C2E  0100               	movlb	0	; () banked
  1414  001C30  5180               	movf	___wmul@multiplier& (0+255),w,b
  1415  001C32  0100               	movlb	0	; () banked
  1416  001C34  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1417  001C36  CFF3 F084          	movff	prodl,___wmul@product
  1418  001C3A  CFF4 F085          	movff	prodh,___wmul@product+1
  1419  001C3E  0100               	movlb	0	; () banked
  1420  001C40  5180               	movf	___wmul@multiplier& (0+255),w,b
  1421  001C42  0100               	movlb	0	; () banked
  1422  001C44  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1423  001C46  50F3               	movf	prodl,w,c
  1424  001C48  0100               	movlb	0	; () banked
  1425  001C4A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1426  001C4C  0100               	movlb	0	; () banked
  1427  001C4E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1428  001C50  0100               	movlb	0	; () banked
  1429  001C52  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1430  001C54  50F3               	movf	prodl,w,c
  1431  001C56  0100               	movlb	0	; () banked
  1432  001C58  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1433                           
  1434                           ; BSR set to: 0
  1435  001C5A  C084  F080         	movff	___wmul@product,?___wmul
  1436  001C5E  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1437  001C62  D000               	goto	l326
  1438  001C64                     l326:
  1439                           
  1440                           ; BSR set to: 0
  1441  001C64  0012               	return		;funcret
  1442  001C66                     __end_of___wmul:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           prodh	equ	0xFF4
  1449                           prodl	equ	0xFF3
  1450                           intcon	equ	0xFF2
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postinc2	equ	0xFDE
  1454                           postdec2	equ	0xFDD
  1455                           fsr2h	equ	0xFDA
  1456                           fsr2l	equ	0xFD9
  1457                           status	equ	0xFD8
  1458                           
  1459 ;; *************** function ___awdiv *****************
  1460 ;; Defined at:
  1461 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  dividend        2    0[BANK0 ] int 
  1464 ;;  divisor         2    2[BANK0 ] int 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  quotient        2    6[BANK0 ] int 
  1467 ;;  sign            1    5[BANK0 ] unsigned char 
  1468 ;;  counter         1    4[BANK0 ] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2    0[BANK0 ] int 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1478 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;Total ram usage:        8 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    4
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_setCorrection
  1489 ;;		_sensorComputation
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text5
  1494  0019E2                     __ptext5:
  1495                           	opt stack 0
  1496  0019E2                     ___awdiv:
  1497                           	opt stack 25
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;incstack = 0
  1501  0019E2  0E00               	movlw	0
  1502  0019E4  0100               	movlb	0	; () banked
  1503  0019E6  6F85               	movwf	___awdiv@sign& (0+255),b
  1504                           
  1505                           ; BSR set to: 0
  1506  0019E8  0100               	movlb	0	; () banked
  1507  0019EA  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1508  0019EC  D009               	goto	l1881
  1509                           
  1510                           ; BSR set to: 0
  1511  0019EE  0100               	movlb	0	; () banked
  1512  0019F0  6D82               	negf	___awdiv@divisor& (0+255),b
  1513  0019F2  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1514  0019F4  B0D8               	btfsc	status,0,c
  1515  0019F6  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1516                           
  1517                           ; BSR set to: 0
  1518  0019F8  0E01               	movlw	1
  1519  0019FA  0100               	movlb	0	; () banked
  1520  0019FC  6F85               	movwf	___awdiv@sign& (0+255),b
  1521  0019FE  D000               	goto	l1881
  1522  001A00                     l1881:
  1523                           
  1524                           ; BSR set to: 0
  1525  001A00  0100               	movlb	0	; () banked
  1526  001A02  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1527  001A04  D009               	goto	l1887
  1528                           
  1529                           ; BSR set to: 0
  1530  001A06  0100               	movlb	0	; () banked
  1531  001A08  6D80               	negf	___awdiv@dividend& (0+255),b
  1532  001A0A  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1533  001A0C  B0D8               	btfsc	status,0,c
  1534  001A0E  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1535                           
  1536                           ; BSR set to: 0
  1537  001A10  0E01               	movlw	1
  1538  001A12  0100               	movlb	0	; () banked
  1539  001A14  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1540  001A16  D000               	goto	l1887
  1541  001A18                     l1887:
  1542                           
  1543                           ; BSR set to: 0
  1544  001A18  0E00               	movlw	0
  1545  001A1A  0100               	movlb	0	; () banked
  1546  001A1C  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1547  001A1E  0E00               	movlw	0
  1548  001A20  6F86               	movwf	___awdiv@quotient& (0+255),b
  1549                           
  1550                           ; BSR set to: 0
  1551  001A22  0100               	movlb	0	; () banked
  1552  001A24  5182               	movf	___awdiv@divisor& (0+255),w,b
  1553  001A26  0100               	movlb	0	; () banked
  1554  001A28  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1555  001A2A  B4D8               	btfsc	status,2,c
  1556  001A2C  D031               	goto	l1909
  1557                           
  1558                           ; BSR set to: 0
  1559  001A2E  0E01               	movlw	1
  1560  001A30  0100               	movlb	0	; () banked
  1561  001A32  6F84               	movwf	___awdiv@counter& (0+255),b
  1562  001A34  D007               	goto	l1895
  1563  001A36                     l1893:
  1564                           
  1565                           ; BSR set to: 0
  1566  001A36  0100               	movlb	0	; () banked
  1567  001A38  90D8               	bcf	status,0,c
  1568  001A3A  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1569  001A3C  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1570  001A3E  0100               	movlb	0	; () banked
  1571  001A40  2B84               	incf	___awdiv@counter& (0+255),f,b
  1572  001A42  D000               	goto	l1895
  1573  001A44                     l1895:
  1574                           
  1575                           ; BSR set to: 0
  1576  001A44  0100               	movlb	0	; () banked
  1577  001A46  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1578  001A48  D002               	goto	l1897
  1579  001A4A  D7F5               	goto	l1893
  1580                           
  1581                           ; BSR set to: 0
  1582  001A4C  D000               	goto	l1897
  1583  001A4E                     l1897:
  1584                           
  1585                           ; BSR set to: 0
  1586  001A4E  0100               	movlb	0	; () banked
  1587  001A50  90D8               	bcf	status,0,c
  1588  001A52  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1589  001A54  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1590                           
  1591                           ; BSR set to: 0
  1592  001A56  0100               	movlb	0	; () banked
  1593  001A58  5182               	movf	___awdiv@divisor& (0+255),w,b
  1594  001A5A  0100               	movlb	0	; () banked
  1595  001A5C  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1596  001A5E  0100               	movlb	0	; () banked
  1597  001A60  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1598  001A62  0100               	movlb	0	; () banked
  1599  001A64  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1600  001A66  A0D8               	btfss	status,0,c
  1601  001A68  D00B               	goto	l1905
  1602                           
  1603                           ; BSR set to: 0
  1604  001A6A  0100               	movlb	0	; () banked
  1605  001A6C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1606  001A6E  0100               	movlb	0	; () banked
  1607  001A70  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1608  001A72  0100               	movlb	0	; () banked
  1609  001A74  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1610  001A76  0100               	movlb	0	; () banked
  1611  001A78  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1612                           
  1613                           ; BSR set to: 0
  1614  001A7A  0100               	movlb	0	; () banked
  1615  001A7C  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1616  001A7E  D000               	goto	l1905
  1617  001A80                     l1905:
  1618                           
  1619                           ; BSR set to: 0
  1620  001A80  0100               	movlb	0	; () banked
  1621  001A82  90D8               	bcf	status,0,c
  1622  001A84  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1623  001A86  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1624                           
  1625                           ; BSR set to: 0
  1626  001A88  0100               	movlb	0	; () banked
  1627  001A8A  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1628  001A8C  D7E0               	goto	l1897
  1629                           
  1630                           ; BSR set to: 0
  1631  001A8E  D000               	goto	l1909
  1632  001A90                     l1909:
  1633                           
  1634                           ; BSR set to: 0
  1635  001A90  0100               	movlb	0	; () banked
  1636  001A92  5185               	movf	___awdiv@sign& (0+255),w,b
  1637  001A94  0100               	movlb	0	; () banked
  1638  001A96  B4D8               	btfsc	status,2,c
  1639  001A98  D006               	goto	l1913
  1640                           
  1641                           ; BSR set to: 0
  1642  001A9A  0100               	movlb	0	; () banked
  1643  001A9C  6D86               	negf	___awdiv@quotient& (0+255),b
  1644  001A9E  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1645  001AA0  B0D8               	btfsc	status,0,c
  1646  001AA2  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1647  001AA4  D000               	goto	l1913
  1648  001AA6                     l1913:
  1649                           
  1650                           ; BSR set to: 0
  1651  001AA6  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1652  001AAA  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1653  001AAE  D000               	goto	l519
  1654  001AB0                     l519:
  1655                           
  1656                           ; BSR set to: 0
  1657  001AB0  0012               	return		;funcret
  1658  001AB2                     __end_of___awdiv:
  1659                           	opt stack 0
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           prodh	equ	0xFF4
  1665                           prodl	equ	0xFF3
  1666                           intcon	equ	0xFF2
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           postinc2	equ	0xFDE
  1670                           postdec2	equ	0xFDD
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _MIN *****************
  1676 ;; Defined at:
  1677 ;;		line 184 in file "user.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  a               2    6[BANK0 ] int 
  1680 ;;  b               2    8[BANK0 ] int 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  2    6[BANK0 ] int 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;Total ram usage:        5 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    4
  1699 ;; This function calls:
  1700 ;;		Nothing
  1701 ;; This function is called by:
  1702 ;;		_sensorComputation
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text6
  1707  001C9A                     __ptext6:
  1708                           	opt stack 0
  1709  001C9A                     _MIN:
  1710                           	opt stack 24
  1711                           
  1712                           ;user.c: 186: if(a>b) return b;
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;incstack = 0
  1716  001C9A  0100               	movlb	0	; () banked
  1717  001C9C  5186               	movf	MIN@a& (0+255),w,b
  1718  001C9E  0100               	movlb	0	; () banked
  1719  001CA0  5D88               	subwf	MIN@b& (0+255),w,b
  1720  001CA2  0100               	movlb	0	; () banked
  1721  001CA4  5189               	movf	(MIN@b+1)& (0+255),w,b
  1722  001CA6  0A80               	xorlw	128
  1723  001CA8  6E58               	movwf	??_MIN& (0+255),c
  1724  001CAA  0100               	movlb	0	; () banked
  1725  001CAC  5187               	movf	(MIN@a+1)& (0+255),w,b
  1726  001CAE  0A80               	xorlw	128
  1727  001CB0  5858               	subwfb	??_MIN& (0+255),w,c
  1728  001CB2  B0D8               	btfsc	status,0,c
  1729  001CB4  D005               	goto	l318
  1730                           
  1731                           ; BSR set to: 0
  1732  001CB6  C088  F086         	movff	MIN@b,?_MIN
  1733  001CBA  C089  F087         	movff	MIN@b+1,?_MIN+1
  1734  001CBE  D004               	goto	l319
  1735  001CC0                     l318:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;user.c: 187: return a;
  1739  001CC0  C086  F086         	movff	MIN@a,?_MIN
  1740  001CC4  C087  F087         	movff	MIN@a+1,?_MIN+1
  1741  001CC8                     l319:
  1742                           
  1743                           ; BSR set to: 0
  1744  001CC8  0012               	return		;funcret
  1745  001CCA                     __end_of_MIN:
  1746                           	opt stack 0
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           intcon	equ	0xFF2
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postinc2	equ	0xFDE
  1757                           postdec2	equ	0xFDD
  1758                           fsr2h	equ	0xFDA
  1759                           fsr2l	equ	0xFD9
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _MAX *****************
  1763 ;; Defined at:
  1764 ;;		line 190 in file "user.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  a               2    6[BANK0 ] int 
  1767 ;;  b               2    8[BANK0 ] int 
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  2    6[BANK0 ] int 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;Total ram usage:        5 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    4
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_sensorComputation
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text7
  1794  001CCA                     __ptext7:
  1795                           	opt stack 0
  1796  001CCA                     _MAX:
  1797                           	opt stack 24
  1798                           
  1799                           ;user.c: 192: if(a>b) return a;
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;incstack = 0
  1803  001CCA  0100               	movlb	0	; () banked
  1804  001CCC  5186               	movf	MAX@a& (0+255),w,b
  1805  001CCE  0100               	movlb	0	; () banked
  1806  001CD0  5D88               	subwf	MAX@b& (0+255),w,b
  1807  001CD2  0100               	movlb	0	; () banked
  1808  001CD4  5189               	movf	(MAX@b+1)& (0+255),w,b
  1809  001CD6  0A80               	xorlw	128
  1810  001CD8  6E58               	movwf	??_MAX& (0+255),c
  1811  001CDA  0100               	movlb	0	; () banked
  1812  001CDC  5187               	movf	(MAX@a+1)& (0+255),w,b
  1813  001CDE  0A80               	xorlw	128
  1814  001CE0  5858               	subwfb	??_MAX& (0+255),w,c
  1815  001CE2  B0D8               	btfsc	status,0,c
  1816  001CE4  D005               	goto	l322
  1817                           
  1818                           ; BSR set to: 0
  1819  001CE6  C086  F086         	movff	MAX@a,?_MAX
  1820  001CEA  C087  F087         	movff	MAX@a+1,?_MAX+1
  1821  001CEE  D004               	goto	l323
  1822  001CF0                     l322:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;user.c: 193: return b;
  1826  001CF0  C088  F086         	movff	MAX@b,?_MAX
  1827  001CF4  C089  F087         	movff	MAX@b+1,?_MAX+1
  1828  001CF8                     l323:
  1829                           
  1830                           ; BSR set to: 0
  1831  001CF8  0012               	return		;funcret
  1832  001CFA                     __end_of_MAX:
  1833                           	opt stack 0
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           intcon	equ	0xFF2
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _InitApp *****************
  1850 ;; Defined at:
  1851 ;;		line 35 in file "user.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    5
  1872 ;; This function calls:
  1873 ;;		_AlgorithmSelection
  1874 ;;		_delay
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text8
  1881  001BB6                     __ptext8:
  1882                           	opt stack 0
  1883  001BB6                     _InitApp:
  1884                           	opt stack 25
  1885                           
  1886                           ;user.c: 39: TRISC = 0;
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;incstack = 0
  1890  001BB6  0E00               	movlw	0
  1891  001BB8  6E94               	movwf	3988,c	;volatile
  1892                           
  1893                           ;user.c: 43: TRISEbits.TRISE1=1;
  1894  001BBA  8296               	bsf	3990,1,c	;volatile
  1895                           
  1896                           ;user.c: 45: TRISEbits.TRISE2=1;
  1897  001BBC  8496               	bsf	3990,2,c	;volatile
  1898                           
  1899                           ;user.c: 47: TRISBbits.RB1=1;
  1900  001BBE  8293               	bsf	3987,1,c	;volatile
  1901                           
  1902                           ;user.c: 49: TRISBbits.RB0=1;
  1903  001BC0  8093               	bsf	3987,0,c	;volatile
  1904                           
  1905                           ;user.c: 52: TRISBbits.RB3=1;
  1906  001BC2  8693               	bsf	3987,3,c	;volatile
  1907                           
  1908                           ;user.c: 54: TRISBbits.RB2=1;
  1909  001BC4  8493               	bsf	3987,2,c	;volatile
  1910                           
  1911                           ;user.c: 58: ADCON1 =0b00000001;
  1912  001BC6  0E01               	movlw	1
  1913  001BC8  6EC1               	movwf	4033,c	;volatile
  1914                           
  1915                           ;user.c: 63: ADCON2=0b00001010;
  1916  001BCA  0E0A               	movlw	10
  1917  001BCC  6EC0               	movwf	4032,c	;volatile
  1918                           
  1919                           ;user.c: 68: ADCON0=0b00101011;
  1920  001BCE  0E2B               	movlw	43
  1921  001BD0  6EC2               	movwf	4034,c	;volatile
  1922                           
  1923                           ;user.c: 77: T0CON = 0b11000100;
  1924  001BD2  0EC4               	movlw	196
  1925  001BD4  6ED5               	movwf	4053,c	;volatile
  1926                           
  1927                           ;user.c: 85: INTCON2 = 0b11110100;
  1928  001BD6  0EF4               	movlw	244
  1929  001BD8  6EF1               	movwf	intcon2,c	;volatile
  1930                           
  1931                           ;user.c: 95: INTCON = 0b00100000;
  1932  001BDA  0E20               	movlw	32
  1933  001BDC  6EF2               	movwf	intcon,c	;volatile
  1934                           
  1935                           ;user.c: 105: AlgorithmSelection();
  1936  001BDE  EC8E  F00E         	call	_AlgorithmSelection	;wreg free
  1937                           
  1938                           ;user.c: 108: delay(1000);
  1939  001BE2  0E03               	movlw	3
  1940  001BE4  0100               	movlb	0	; () banked
  1941  001BE6  6F81               	movwf	(delay@ms+1)& (0+255),b
  1942  001BE8  0EE8               	movlw	232
  1943  001BEA  6F80               	movwf	delay@ms& (0+255),b
  1944  001BEC  ECBA  F00D         	call	_delay	;wreg free
  1945  001BF0  0012               	return		;funcret
  1946  001BF2                     __end_of_InitApp:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           intcon2	equ	0xFF1
  1956                           postinc0	equ	0xFEE
  1957                           wreg	equ	0xFE8
  1958                           postinc2	equ	0xFDE
  1959                           postdec2	equ	0xFDD
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _delay *****************
  1965 ;; Defined at:
  1966 ;;		line 29 in file "user.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  ms              2    0[BANK0 ] unsigned int 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  x               2    2[BANK0 ] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        5 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    4
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_InitApp
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text9
  1995  001B74                     __ptext9:
  1996                           	opt stack 0
  1997  001B74                     _delay:
  1998                           	opt stack 25
  1999                           
  2000                           ;user.c: 30: int x = 0;
  2001                           
  2002                           ;incstack = 0
  2003  001B74  0E00               	movlw	0
  2004  001B76  0100               	movlb	0	; () banked
  2005  001B78  6F83               	movwf	(delay@x+1)& (0+255),b
  2006  001B7A  0E00               	movlw	0
  2007  001B7C  6F82               	movwf	delay@x& (0+255),b
  2008                           
  2009                           ;user.c: 31: for (x = 0; x < ms; x++)
  2010  001B7E  0E00               	movlw	0
  2011  001B80  0100               	movlb	0	; () banked
  2012  001B82  6F83               	movwf	(delay@x+1)& (0+255),b
  2013  001B84  0E00               	movlw	0
  2014  001B86  6F82               	movwf	delay@x& (0+255),b
  2015  001B88  D00B               	goto	l277
  2016  001B8A                     l1919:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2020  001B8A  0E0B               	movlw	11
  2021  001B8C  6E58               	movwf	??_delay& (0+255),c
  2022  001B8E  0E62               	movlw	98
  2023  001B90                     u1767:
  2024  001B90  2EE8               	decfsz	wreg,f,c
  2025  001B92  D7FE               	goto	u1767
  2026  001B94  2E58               	decfsz	??_delay& (0+255),f,c
  2027  001B96  D7FC               	goto	u1767
  2028  001B98  D000               	nop2	
  2029  001B9A  0100               	movlb	0	; () banked
  2030  001B9C  4B82               	infsnz	delay@x& (0+255),f,b
  2031  001B9E  2B83               	incf	(delay@x+1)& (0+255),f,b
  2032  001BA0                     l277:
  2033                           
  2034                           ; BSR set to: 0
  2035  001BA0  0100               	movlb	0	; () banked
  2036  001BA2  5180               	movf	delay@ms& (0+255),w,b
  2037  001BA4  0100               	movlb	0	; () banked
  2038  001BA6  5D82               	subwf	delay@x& (0+255),w,b
  2039  001BA8  0100               	movlb	0	; () banked
  2040  001BAA  5181               	movf	(delay@ms+1)& (0+255),w,b
  2041  001BAC  0100               	movlb	0	; () banked
  2042  001BAE  5983               	subwfb	(delay@x+1)& (0+255),w,b
  2043  001BB0  A0D8               	btfss	status,0,c
  2044  001BB2  D7EB               	goto	l1919
  2045                           
  2046                           ; BSR set to: 0
  2047                           
  2048                           ; BSR set to: 0
  2049  001BB4  0012               	return		;funcret
  2050  001BB6                     __end_of_delay:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           intcon2	equ	0xFF1
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postinc2	equ	0xFDE
  2063                           postdec2	equ	0xFDD
  2064                           fsr2h	equ	0xFDA
  2065                           fsr2l	equ	0xFD9
  2066                           status	equ	0xFD8
  2067                           
  2068 ;; *************** function _AlgorithmSelection *****************
  2069 ;; Defined at:
  2070 ;;		line 112 in file "user.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;		None               void
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    4
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_InitApp
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text10
  2099  001D1C                     __ptext10:
  2100                           	opt stack 0
  2101  001D1C                     _AlgorithmSelection:
  2102                           	opt stack 25
  2103                           
  2104                           ;user.c: 114: ADCON0 = 0b00100111;
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;incstack = 0
  2108  001D1C  0E27               	movlw	39
  2109  001D1E  6EC2               	movwf	4034,c	;volatile
  2110                           
  2111                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2112  001D20  82C2               	bsf	4034,1,c	;volatile
  2113                           
  2114                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2115  001D22  D000               	goto	l286
  2116  001D24                     l286:
  2117  001D24  B2C2               	btfsc	4034,1,c	;volatile
  2118  001D26  D7FE               	goto	l286
  2119                           
  2120                           ;user.c: 119: if(ADRESL > 0b10000000)
  2121  001D28  0E80               	movlw	128
  2122  001D2A  64C3               	cpfsgt	4035,c	;volatile
  2123  001D2C  D002               	goto	l1065
  2124                           
  2125                           ;user.c: 120: algorithm = LEFTWALL;
  2126  001D2E  0E00               	movlw	0
  2127  001D30  D001               	goto	L5
  2128  001D32                     l1065:
  2129                           
  2130                           ;user.c: 121: else
  2131                           ;user.c: 122: algorithm = RIGHTWALL;
  2132  001D32  0E01               	movlw	1
  2133  001D34                     L5:
  2134  001D34  6E2F               	movwf	_algorithm,c
  2135  001D36  D000               	goto	l291
  2136  001D38                     l291:
  2137  001D38  0012               	return		;funcret
  2138  001D3A                     __end_of_AlgorithmSelection:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           prodh	equ	0xFF4
  2145                           prodl	equ	0xFF3
  2146                           intcon	equ	0xFF2
  2147                           intcon2	equ	0xFF1
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _ConfigureOscillator *****************
  2157 ;; Defined at:
  2158 ;;		line 24 in file "system.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, status,2
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;Total ram usage:        0 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    4
  2179 ;; This function calls:
  2180 ;;		Nothing
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text11
  2187  001D9C                     __ptext11:
  2188                           	opt stack 0
  2189  001D9C                     _ConfigureOscillator:
  2190                           	opt stack 26
  2191                           
  2192                           ;system.c: 29: OSCCON = 0b01111100;
  2193                           
  2194                           ;incstack = 0
  2195  001D9C  0E7C               	movlw	124
  2196  001D9E  6ED3               	movwf	4051,c	;volatile
  2197                           
  2198                           ;system.c: 31: OSCTUNE = 0b01001111;
  2199  001DA0  0E4F               	movlw	79
  2200  001DA2  6E9B               	movwf	3995,c	;volatile
  2201  001DA4  0012               	return		;funcret
  2202  001DA6                     __end_of_ConfigureOscillator:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           intcon2	equ	0xFF1
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           postinc2	equ	0xFDE
  2215                           postdec2	equ	0xFDD
  2216                           fsr2h	equ	0xFDA
  2217                           fsr2l	equ	0xFD9
  2218                           status	equ	0xFD8
  2219                           
  2220 ;; *************** function _low_isr *****************
  2221 ;; Defined at:
  2222 ;;		line 238 in file "interrupts.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;		None               void
  2229 ;; Registers used:
  2230 ;;		None
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;Total ram usage:       17 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    3
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		Interrupt level 1
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	intcodelo
  2251  000018                     __pintcodelo:
  2252                           	opt stack 0
  2253  000018                     _low_isr:
  2254                           	opt stack 24
  2255                           
  2256                           ;incstack = 0
  2257  000018  CFD8 F032          	movff	status,??_low_isr
  2258  00001C  CFE8 F033          	movff	wreg,??_low_isr+1
  2259  000020  CFE0 F034          	movff	bsr,??_low_isr+2
  2260  000024  CFFA F035          	movff	pclath,??_low_isr+3
  2261  000028  CFFB F036          	movff	pclatu,??_low_isr+4
  2262  00002C  CFE9 F037          	movff	fsr0l,??_low_isr+5
  2263  000030  CFEA F038          	movff	fsr0h,??_low_isr+6
  2264  000034  CFE1 F039          	movff	fsr1l,??_low_isr+7
  2265  000038  CFE2 F03A          	movff	fsr1h,??_low_isr+8
  2266  00003C  CFD9 F03B          	movff	fsr2l,??_low_isr+9
  2267  000040  CFDA F03C          	movff	fsr2h,??_low_isr+10
  2268  000044  CFF3 F03D          	movff	prodl,??_low_isr+11
  2269  000048  CFF4 F03E          	movff	prodh,??_low_isr+12
  2270  00004C  CFF6 F03F          	movff	tblptrl,??_low_isr+13
  2271  000050  CFF7 F040          	movff	tblptrh,??_low_isr+14
  2272  000054  CFF8 F041          	movff	tblptru,??_low_isr+15
  2273  000058  CFF5 F042          	movff	tablat,??_low_isr+16
  2274  00005C  C042  FFF5         	movff	??_low_isr+16,tablat
  2275  000060  C041  FFF8         	movff	??_low_isr+15,tblptru
  2276  000064  C040  FFF7         	movff	??_low_isr+14,tblptrh
  2277  000068  C03F  FFF6         	movff	??_low_isr+13,tblptrl
  2278  00006C  C03E  FFF4         	movff	??_low_isr+12,prodh
  2279  000070  C03D  FFF3         	movff	??_low_isr+11,prodl
  2280  000074  C03C  FFDA         	movff	??_low_isr+10,fsr2h
  2281  000078  C03B  FFD9         	movff	??_low_isr+9,fsr2l
  2282  00007C  C03A  FFE2         	movff	??_low_isr+8,fsr1h
  2283  000080  C039  FFE1         	movff	??_low_isr+7,fsr1l
  2284  000084  C038  FFEA         	movff	??_low_isr+6,fsr0h
  2285  000088  C037  FFE9         	movff	??_low_isr+5,fsr0l
  2286  00008C  C036  FFFB         	movff	??_low_isr+4,pclatu
  2287  000090  C035  FFFA         	movff	??_low_isr+3,pclath
  2288  000094  C034  FFE0         	movff	??_low_isr+2,bsr
  2289  000098  C033  FFE8         	movff	??_low_isr+1,wreg
  2290  00009C  C032  FFD8         	movff	??_low_isr,status
  2291  0000A0  0010               	retfie	
  2292  0000A2                     __end_of_low_isr:
  2293                           	opt stack 0
  2294                           pclatu	equ	0xFFB
  2295                           pclath	equ	0xFFA
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           intcon	equ	0xFF2
  2303                           intcon2	equ	0xFF1
  2304                           postinc0	equ	0xFEE
  2305                           fsr0h	equ	0xFEA
  2306                           fsr0l	equ	0xFE9
  2307                           wreg	equ	0xFE8
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           bsr	equ	0xFE0
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _high_isr *****************
  2318 ;; Defined at:
  2319 ;;		line 100 in file "interrupts.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:       14 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    2
  2340 ;; This function calls:
  2341 ;;		_FrontController
  2342 ;;		_KController
  2343 ;;		_Reversing
  2344 ;;		_forward
  2345 ;;		_merge
  2346 ;;		_motorCounterUpdate
  2347 ;;		_moveMouse
  2348 ;;		_rotate
  2349 ;; This function is called by:
  2350 ;;		Interrupt level 2
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	intcode
  2355  000008                     __pintcode:
  2356                           	opt stack 0
  2357  000008                     _high_isr:
  2358                           	opt stack 24
  2359                           
  2360                           ;incstack = 0
  2361  000008  CFFA F04A          	movff	pclath,??_high_isr
  2362  00000C  CFFB F04B          	movff	pclatu,??_high_isr+1
  2363  000010  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  2364  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2365                           pclatu	equ	0xFFB
  2366                           pclath	equ	0xFFA
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           intcon	equ	0xFF2
  2374                           intcon2	equ	0xFF1
  2375                           postinc0	equ	0xFEE
  2376                           fsr0h	equ	0xFEA
  2377                           fsr0l	equ	0xFE9
  2378                           wreg	equ	0xFE8
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           bsr	equ	0xFE0
  2382                           postinc2	equ	0xFDE
  2383                           postdec2	equ	0xFDD
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388                           	psect	intcode_body
  2389  001006                     __pintcode_body:
  2390                           	opt stack 24
  2391  001006                     int_func:
  2392                           	opt stack 24
  2393  001006  0006               	pop		; remove dummy address from shadow register refresh
  2394  001008  CFEA F04D          	movff	fsr0h,??_high_isr+3
  2395  00100C  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  2396  001010  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  2397  001014  CFD9 F050          	movff	fsr2l,??_high_isr+6
  2398  001018  CFDA F051          	movff	fsr2h,??_high_isr+7
  2399  00101C  CFF3 F052          	movff	prodl,??_high_isr+8
  2400  001020  CFF4 F053          	movff	prodh,??_high_isr+9
  2401  001024  CFF6 F054          	movff	tblptrl,??_high_isr+10
  2402  001028  CFF7 F055          	movff	tblptrh,??_high_isr+11
  2403  00102C  CFF8 F056          	movff	tblptru,??_high_isr+12
  2404  001030  CFF5 F057          	movff	tablat,??_high_isr+13
  2405                           
  2406                           ;interrupts.c: 119: if(INTCONbits.TMR0IF == 1)
  2407  001034  A4F2               	btfss	intcon,2,c	;volatile
  2408  001036  D160               	goto	i2l111
  2409                           
  2410                           ;interrupts.c: 120: {
  2411                           ;interrupts.c: 121: if(MotorDelayCounter > 2)
  2412  001038  BE12               	btfsc	_MotorDelayCounter+1,7,c
  2413  00103A  D15A               	goto	i2l1831
  2414  00103C  5012               	movf	_MotorDelayCounter+1,w,c
  2415  00103E  E104               	bnz	i2u121_40
  2416  001040  0E03               	movlw	3
  2417  001042  5C11               	subwf	_MotorDelayCounter,w,c
  2418  001044  A0D8               	btfss	status,0,c
  2419  001046  D154               	goto	i2l1831
  2420  001048                     i2u121_40:
  2421                           
  2422                           ;interrupts.c: 122: {
  2423                           ;interrupts.c: 124: if(ignoreControll > 0){
  2424  001048  5059               	movf	_ignoreControll,w,c
  2425  00104A  B4D8               	btfsc	status,2,c
  2426  00104C  D015               	goto	i2l1725
  2427                           
  2428                           ;interrupts.c: 125: KController();
  2429  00104E  EC59  F00D         	call	_KController	;wreg free
  2430                           
  2431                           ;interrupts.c: 126: if (sensorValue[3] > 100 && sensorValue[2] > 100){
  2432  001052  BE08               	btfsc	_sensorValue+7,7,c
  2433  001054  D141               	goto	i2l1829
  2434  001056  5008               	movf	_sensorValue+7,w,c
  2435  001058  E104               	bnz	i2u123_40
  2436  00105A  0E65               	movlw	101
  2437  00105C  5C07               	subwf	_sensorValue+6,w,c
  2438  00105E  A0D8               	btfss	status,0,c
  2439  001060  D13B               	goto	i2l1829
  2440  001062                     i2u123_40:
  2441  001062  BE06               	btfsc	_sensorValue+5,7,c
  2442  001064  D139               	goto	i2l1829
  2443  001066  5006               	movf	_sensorValue+5,w,c
  2444  001068  E104               	bnz	i2u124_40
  2445  00106A  0E65               	movlw	101
  2446  00106C  5C05               	subwf	_sensorValue+4,w,c
  2447  00106E  A0D8               	btfss	status,0,c
  2448  001070  D133               	goto	i2l1829
  2449  001072                     i2u124_40:
  2450                           
  2451                           ;interrupts.c: 127: ignoreControll = 0;
  2452  001072  0E00               	movlw	0
  2453  001074  6E59               	movwf	_ignoreControll,c
  2454                           
  2455                           ;interrupts.c: 128: }
  2456                           ;interrupts.c: 130: }
  2457  001076  D130               	goto	i2l1829
  2458  001078                     i2l1725:
  2459                           
  2460                           ;interrupts.c: 131: else if (ignoreFControll > 0){
  2461  001078  BE28               	btfsc	_ignoreFControll+1,7,c
  2462  00107A  D01B               	goto	i2l1735
  2463  00107C  5028               	movf	_ignoreFControll+1,w,c
  2464  00107E  E103               	bnz	i2u125_40
  2465  001080  0427               	decf	_ignoreFControll,w,c
  2466  001082  A0D8               	btfss	status,0,c
  2467  001084  D016               	goto	i2l1735
  2468  001086                     i2u125_40:
  2469                           
  2470                           ;interrupts.c: 132: FrontController();
  2471  001086  EC86  F00C         	call	_FrontController	;wreg free
  2472                           
  2473                           ;interrupts.c: 133: if (sensorValue[3] > 480 - 50 && sensorValue[2] > 480 - 50){
  2474  00108A  BE08               	btfsc	_sensorValue+7,7,c
  2475  00108C  D125               	goto	i2l1829
  2476  00108E  0EAF               	movlw	175
  2477  001090  5C07               	subwf	_sensorValue+6,w,c
  2478  001092  0E01               	movlw	1
  2479  001094  5808               	subwfb	_sensorValue+7,w,c
  2480  001096  B0D8               	btfsc	status,0,c
  2481  001098  BE06               	btfsc	_sensorValue+5,7,c
  2482  00109A  D11E               	goto	i2l1829
  2483  00109C  0EAF               	movlw	175
  2484  00109E  5C05               	subwf	_sensorValue+4,w,c
  2485  0010A0  0E01               	movlw	1
  2486  0010A2  5806               	subwfb	_sensorValue+5,w,c
  2487  0010A4  A0D8               	btfss	status,0,c
  2488  0010A6  D118               	goto	i2l1829
  2489                           
  2490                           ;interrupts.c: 134: ignoreFControll = 0;
  2491  0010A8  0E00               	movlw	0
  2492  0010AA  6E28               	movwf	_ignoreFControll+1,c
  2493  0010AC  0E00               	movlw	0
  2494  0010AE  6E27               	movwf	_ignoreFControll,c
  2495                           
  2496                           ;interrupts.c: 135: }
  2497                           ;interrupts.c: 136: }
  2498  0010B0  D113               	goto	i2l1829
  2499  0010B2                     i2l1735:
  2500                           
  2501                           ;interrupts.c: 137: else if (ForwardCounter > 0) {
  2502  0010B2  BE0E               	btfsc	_ForwardCounter+1,7,c
  2503  0010B4  D008               	goto	i2l1739
  2504  0010B6  500E               	movf	_ForwardCounter+1,w,c
  2505  0010B8  E103               	bnz	i2u128_40
  2506  0010BA  040D               	decf	_ForwardCounter,w,c
  2507  0010BC  A0D8               	btfss	status,0,c
  2508  0010BE  D003               	goto	i2l1739
  2509  0010C0                     i2u128_40:
  2510                           
  2511                           ;interrupts.c: 138: forward();
  2512  0010C0  EC9D  F00E         	call	_forward	;wreg free
  2513                           
  2514                           ;interrupts.c: 145: }
  2515  0010C4  D109               	goto	i2l1829
  2516  0010C6                     i2l1739:
  2517                           
  2518                           ;interrupts.c: 147: else if (ReverseCounter > 0) {
  2519  0010C6  BE16               	btfsc	_ReverseCounter+1,7,c
  2520  0010C8  D008               	goto	i2l1743
  2521  0010CA  5016               	movf	_ReverseCounter+1,w,c
  2522  0010CC  E103               	bnz	i2u129_40
  2523  0010CE  0415               	decf	_ReverseCounter,w,c
  2524  0010D0  A0D8               	btfss	status,0,c
  2525  0010D2  D003               	goto	i2l1743
  2526  0010D4                     i2u129_40:
  2527                           
  2528                           ;interrupts.c: 148: Reversing();
  2529  0010D4  ECAB  F00E         	call	_Reversing	;wreg free
  2530                           
  2531                           ;interrupts.c: 149: }
  2532  0010D8  D0FF               	goto	i2l1829
  2533  0010DA                     i2l1743:
  2534                           
  2535                           ;interrupts.c: 151: else if(RotateCounter > 0) {
  2536  0010DA  BE18               	btfsc	_RotateCounter+1,7,c
  2537  0010DC  D025               	goto	i2l1759
  2538  0010DE  5018               	movf	_RotateCounter+1,w,c
  2539  0010E0  E103               	bnz	i2u130_40
  2540  0010E2  0417               	decf	_RotateCounter,w,c
  2541  0010E4  A0D8               	btfss	status,0,c
  2542  0010E6  D020               	goto	i2l1759
  2543  0010E8                     i2u130_40:
  2544                           
  2545                           ;interrupts.c: 153: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2546  0010E8  BE06               	btfsc	_sensorValue+5,7,c
  2547  0010EA  D006               	goto	i2l1747
  2548  0010EC  0E21               	movlw	33
  2549  0010EE  5C05               	subwf	_sensorValue+4,w,c
  2550  0010F0  0E03               	movlw	3
  2551  0010F2  5806               	subwfb	_sensorValue+5,w,c
  2552  0010F4  B0D8               	btfsc	status,0,c
  2553  0010F6  D008               	goto	i2l1749
  2554  0010F8                     i2l1747:
  2555  0010F8  BE08               	btfsc	_sensorValue+7,7,c
  2556  0010FA  D00D               	goto	i2l1753
  2557  0010FC  0E21               	movlw	33
  2558  0010FE  5C07               	subwf	_sensorValue+6,w,c
  2559  001100  0E03               	movlw	3
  2560  001102  5808               	subwfb	_sensorValue+7,w,c
  2561  001104  A0D8               	btfss	status,0,c
  2562  001106  D007               	goto	i2l1753
  2563  001108                     i2l1749:
  2564                           
  2565                           ;interrupts.c: 154: ReverseCounter = 15;
  2566  001108  0E00               	movlw	0
  2567  00110A  6E16               	movwf	_ReverseCounter+1,c
  2568  00110C  0E0F               	movlw	15
  2569  00110E  6E15               	movwf	_ReverseCounter,c
  2570                           
  2571                           ;interrupts.c: 155: Reversing();
  2572  001110  ECAB  F00E         	call	_Reversing	;wreg free
  2573                           
  2574                           ;interrupts.c: 156: } else {
  2575  001114  D0E1               	goto	i2l1829
  2576  001116                     i2l1753:
  2577                           
  2578                           ;interrupts.c: 157: rotate(rotatingSide);
  2579  001116  5031               	movf	_rotatingSide,w,c
  2580  001118  ECF9  F00D         	call	_rotate
  2581                           
  2582                           ;interrupts.c: 158: TurnRight = 0;
  2583  00111C  0E00               	movlw	0
  2584  00111E  6E1C               	movwf	_TurnRight+1,c
  2585  001120  0E00               	movlw	0
  2586  001122  6E1B               	movwf	_TurnRight,c
  2587  001124  D00D               	goto	L6
  2588                           
  2589                           ;interrupts.c: 160: }
  2590                           ;interrupts.c: 161: }
  2591                           
  2592                           ;interrupts.c: 159: TurnLeft = 0;
  2593  001126  D0D8               	goto	i2l1829
  2594  001128                     i2l1759:
  2595                           
  2596                           ;interrupts.c: 163: else if (TurnLeft == 1){
  2597  001128  0419               	decf	_TurnLeft,w,c
  2598  00112A  101A               	iorwf	_TurnLeft+1,w,c
  2599  00112C  A4D8               	btfss	status,2,c
  2600  00112E  D00D               	goto	i2l1763
  2601                           
  2602                           ;interrupts.c: 164: RotateCounter = 170;
  2603  001130  0E00               	movlw	0
  2604  001132  6E18               	movwf	_RotateCounter+1,c
  2605  001134  0EAA               	movlw	170
  2606  001136  6E17               	movwf	_RotateCounter,c
  2607                           
  2608                           ;interrupts.c: 165: rotatingSide = LEFT;
  2609  001138  0E00               	movlw	0
  2610  00113A  6E31               	movwf	_rotatingSide,c
  2611                           
  2612                           ;interrupts.c: 166: justTurned = 1;
  2613  00113C  0E01               	movlw	1
  2614  00113E  6E30               	movwf	_justTurned,c
  2615  001140                     L6:
  2616                           
  2617                           ;interrupts.c: 167: TurnLeft = 0;
  2618  001140  0E00               	movlw	0
  2619  001142  6E1A               	movwf	_TurnLeft+1,c
  2620  001144  0E00               	movlw	0
  2621  001146  6E19               	movwf	_TurnLeft,c
  2622                           
  2623                           ;interrupts.c: 168: }
  2624  001148  D0C7               	goto	i2l1829
  2625  00114A                     i2l1763:
  2626                           
  2627                           ;interrupts.c: 170: else if (TurnRight == 1 && sensorValue[3] > 480 - 40 && sensorValue[
      +                          2] > 480 - 40) {
  2628  00114A  041B               	decf	_TurnRight,w,c
  2629  00114C  101C               	iorwf	_TurnRight+1,w,c
  2630  00114E  B4D8               	btfsc	status,2,c
  2631  001150  BE08               	btfsc	_sensorValue+7,7,c
  2632  001152  D016               	goto	i2l1771
  2633  001154  0EB9               	movlw	185
  2634  001156  5C07               	subwf	_sensorValue+6,w,c
  2635  001158  0E01               	movlw	1
  2636  00115A  5808               	subwfb	_sensorValue+7,w,c
  2637  00115C  B0D8               	btfsc	status,0,c
  2638  00115E  BE06               	btfsc	_sensorValue+5,7,c
  2639  001160  D00F               	goto	i2l1771
  2640  001162  0EB9               	movlw	185
  2641  001164  5C05               	subwf	_sensorValue+4,w,c
  2642  001166  0E01               	movlw	1
  2643  001168  5806               	subwfb	_sensorValue+5,w,c
  2644  00116A  A0D8               	btfss	status,0,c
  2645  00116C  D009               	goto	i2l1771
  2646                           
  2647                           ;interrupts.c: 171: RotateCounter = 170;
  2648  00116E  0E00               	movlw	0
  2649  001170  6E18               	movwf	_RotateCounter+1,c
  2650  001172  0EAA               	movlw	170
  2651  001174  6E17               	movwf	_RotateCounter,c
  2652                           
  2653                           ;interrupts.c: 172: rotatingSide = RIGHT;
  2654  001176  0E01               	movlw	1
  2655  001178  6E31               	movwf	_rotatingSide,c
  2656                           
  2657                           ;interrupts.c: 173: justTurned = 1;
  2658  00117A  0E01               	movlw	1
  2659  00117C  6E30               	movwf	_justTurned,c
  2660  00117E  D0A7               	goto	i2l1827
  2661  001180                     i2l1771:
  2662                           
  2663                           ;interrupts.c: 177: else if (sensorValue[0] < 95 && algorithm == LEFTWALL) {
  2664  001180  BE02               	btfsc	_sensorValue+1,7,c
  2665  001182  D006               	goto	i2l1773
  2666  001184  5002               	movf	_sensorValue+1,w,c
  2667  001186  E11A               	bnz	i2l1783
  2668  001188  0E5F               	movlw	95
  2669  00118A  5C01               	subwf	_sensorValue,w,c
  2670  00118C  B0D8               	btfsc	status,0,c
  2671  00118E  D016               	goto	i2l1783
  2672  001190                     i2l1773:
  2673  001190  502F               	movf	_algorithm,w,c
  2674  001192  A4D8               	btfss	status,2,c
  2675  001194  D013               	goto	i2l1783
  2676                           
  2677                           ;interrupts.c: 178: TurnLeft = 1;
  2678  001196  0E00               	movlw	0
  2679  001198  6E1A               	movwf	_TurnLeft+1,c
  2680  00119A  0E01               	movlw	1
  2681  00119C  6E19               	movwf	_TurnLeft,c
  2682                           
  2683                           ;interrupts.c: 179: if(justTurned == 0) {
  2684  00119E  5030               	movf	_justTurned,w,c
  2685  0011A0  A4D8               	btfss	status,2,c
  2686  0011A2  D004               	goto	i2l1779
  2687                           
  2688                           ;interrupts.c: 180: ForwardCounter = 450;
  2689  0011A4  0E01               	movlw	1
  2690  0011A6  6E0E               	movwf	_ForwardCounter+1,c
  2691  0011A8  0EC2               	movlw	194
  2692  0011AA  D003               	goto	L7
  2693  0011AC                     i2l1779:
  2694                           
  2695                           ;interrupts.c: 182: ForwardCounter = 410;
  2696  0011AC  0E01               	movlw	1
  2697  0011AE  6E0E               	movwf	_ForwardCounter+1,c
  2698  0011B0  0E9A               	movlw	154
  2699  0011B2                     L7:
  2700  0011B2  6E0D               	movwf	_ForwardCounter,c
  2701  0011B4  D000               	goto	i2l1781
  2702  0011B6                     i2l1781:
  2703                           
  2704                           ;interrupts.c: 183: }
  2705                           ;interrupts.c: 184: forward();
  2706  0011B6  EC9D  F00E         	call	_forward	;wreg free
  2707                           
  2708                           ;interrupts.c: 185: }
  2709  0011BA  D08E               	goto	i2l1829
  2710  0011BC                     i2l1783:
  2711                           
  2712                           ;interrupts.c: 187: else if (sensorValue[1] < 95 && sensorValue[0] > 95 && algorithm == 
      +                          LEFTWALL) {
  2713  0011BC  BE04               	btfsc	_sensorValue+3,7,c
  2714  0011BE  D006               	goto	i2l1785
  2715  0011C0  5004               	movf	_sensorValue+3,w,c
  2716  0011C2  E122               	bnz	i2l1797
  2717  0011C4  0E5F               	movlw	95
  2718  0011C6  5C03               	subwf	_sensorValue+2,w,c
  2719  0011C8  B0D8               	btfsc	status,0,c
  2720  0011CA  D01E               	goto	i2l1797
  2721  0011CC                     i2l1785:
  2722  0011CC  BE02               	btfsc	_sensorValue+1,7,c
  2723  0011CE  D01C               	goto	i2l1797
  2724  0011D0  5002               	movf	_sensorValue+1,w,c
  2725  0011D2  E104               	bnz	i2u141_40
  2726  0011D4  0E60               	movlw	96
  2727  0011D6  5C01               	subwf	_sensorValue,w,c
  2728  0011D8  A0D8               	btfss	status,0,c
  2729  0011DA  D016               	goto	i2l1797
  2730  0011DC                     i2u141_40:
  2731  0011DC  502F               	movf	_algorithm,w,c
  2732  0011DE  A4D8               	btfss	status,2,c
  2733  0011E0  D013               	goto	i2l1797
  2734                           
  2735                           ;interrupts.c: 188: TurnRight = 1;
  2736  0011E2  0E00               	movlw	0
  2737  0011E4  6E1C               	movwf	_TurnRight+1,c
  2738  0011E6  0E01               	movlw	1
  2739  0011E8  6E1B               	movwf	_TurnRight,c
  2740                           
  2741                           ;interrupts.c: 189: if(justTurned == 0) {
  2742  0011EA  5030               	movf	_justTurned,w,c
  2743  0011EC  A4D8               	btfss	status,2,c
  2744  0011EE  D004               	goto	i2l1793
  2745                           
  2746                           ;interrupts.c: 190: ForwardCounter = 430;
  2747  0011F0  0E01               	movlw	1
  2748  0011F2  6E0E               	movwf	_ForwardCounter+1,c
  2749  0011F4  0EAE               	movlw	174
  2750  0011F6  D003               	goto	L8
  2751  0011F8                     i2l1793:
  2752                           
  2753                           ;interrupts.c: 192: ForwardCounter = 390;
  2754  0011F8  0E01               	movlw	1
  2755  0011FA  6E0E               	movwf	_ForwardCounter+1,c
  2756  0011FC  0E86               	movlw	134
  2757  0011FE                     L8:
  2758  0011FE  6E0D               	movwf	_ForwardCounter,c
  2759  001200  D000               	goto	i2l1795
  2760  001202                     i2l1795:
  2761                           
  2762                           ;interrupts.c: 193: }
  2763                           ;interrupts.c: 194: forward();
  2764  001202  EC9D  F00E         	call	_forward	;wreg free
  2765                           
  2766                           ;interrupts.c: 195: }
  2767  001206  D068               	goto	i2l1829
  2768  001208                     i2l1797:
  2769                           
  2770                           ;interrupts.c: 197: else if ((sensorValue[0] > 95 && sensorValue[1] > 95 )
  2771                           ;interrupts.c: 198: && (sensorValue[3] > 480 && sensorValue[2] > 480) && RotateCounter <
      +                          = 0)
  2772  001208  BE02               	btfsc	_sensorValue+1,7,c
  2773  00120A  D02C               	goto	i2l1809
  2774  00120C  5002               	movf	_sensorValue+1,w,c
  2775  00120E  E104               	bnz	i2u144_40
  2776  001210  0E60               	movlw	96
  2777  001212  5C01               	subwf	_sensorValue,w,c
  2778  001214  A0D8               	btfss	status,0,c
  2779  001216  D026               	goto	i2l1809
  2780  001218                     i2u144_40:
  2781  001218  BE04               	btfsc	_sensorValue+3,7,c
  2782  00121A  D024               	goto	i2l1809
  2783  00121C  5004               	movf	_sensorValue+3,w,c
  2784  00121E  E104               	bnz	i2u145_40
  2785  001220  0E60               	movlw	96
  2786  001222  5C03               	subwf	_sensorValue+2,w,c
  2787  001224  A0D8               	btfss	status,0,c
  2788  001226  D01E               	goto	i2l1809
  2789  001228                     i2u145_40:
  2790  001228  BE08               	btfsc	_sensorValue+7,7,c
  2791  00122A  D01C               	goto	i2l1809
  2792  00122C  0EE1               	movlw	225
  2793  00122E  5C07               	subwf	_sensorValue+6,w,c
  2794  001230  0E01               	movlw	1
  2795  001232  5808               	subwfb	_sensorValue+7,w,c
  2796  001234  B0D8               	btfsc	status,0,c
  2797  001236  BE06               	btfsc	_sensorValue+5,7,c
  2798  001238  D015               	goto	i2l1809
  2799  00123A  0EE1               	movlw	225
  2800  00123C  5C05               	subwf	_sensorValue+4,w,c
  2801  00123E  0E01               	movlw	1
  2802  001240  5806               	subwfb	_sensorValue+5,w,c
  2803  001242  A0D8               	btfss	status,0,c
  2804  001244  D00F               	goto	i2l1809
  2805  001246  BE18               	btfsc	_RotateCounter+1,7,c
  2806  001248  D005               	goto	i2l1807
  2807  00124A  5018               	movf	_RotateCounter+1,w,c
  2808  00124C  E10B               	bnz	i2l1809
  2809  00124E  0417               	decf	_RotateCounter,w,c
  2810  001250  B0D8               	btfsc	status,0,c
  2811  001252  D008               	goto	i2l1809
  2812  001254                     i2l1807:
  2813                           
  2814                           ;interrupts.c: 199: {
  2815                           ;interrupts.c: 200: RotateCounter = 170*2;
  2816  001254  0E01               	movlw	1
  2817  001256  6E18               	movwf	_RotateCounter+1,c
  2818  001258  0E54               	movlw	84
  2819  00125A  6E17               	movwf	_RotateCounter,c
  2820                           
  2821                           ;interrupts.c: 201: rotatingSide = LEFT;
  2822  00125C  0E00               	movlw	0
  2823  00125E  6E31               	movwf	_rotatingSide,c
  2824                           
  2825                           ;interrupts.c: 202: justTurned = 1;
  2826  001260  0E01               	movlw	1
  2827  001262  D023               	goto	L9
  2828  001264                     i2l1809:
  2829                           
  2830                           ;interrupts.c: 206: else if ((sensorValue[0] > 95 && sensorValue[1] > 95) && sensorValue
      +                          [3] < 100 && sensorValue[2] < 100 ) {
  2831  001264  BE02               	btfsc	_sensorValue+1,7,c
  2832  001266  D023               	goto	i2l1821
  2833  001268  5002               	movf	_sensorValue+1,w,c
  2834  00126A  E104               	bnz	i2u149_40
  2835  00126C  0E60               	movlw	96
  2836  00126E  5C01               	subwf	_sensorValue,w,c
  2837  001270  A0D8               	btfss	status,0,c
  2838  001272  D01D               	goto	i2l1821
  2839  001274                     i2u149_40:
  2840  001274  BE04               	btfsc	_sensorValue+3,7,c
  2841  001276  D01B               	goto	i2l1821
  2842  001278  5004               	movf	_sensorValue+3,w,c
  2843  00127A  E104               	bnz	i2u150_40
  2844  00127C  0E60               	movlw	96
  2845  00127E  5C03               	subwf	_sensorValue+2,w,c
  2846  001280  A0D8               	btfss	status,0,c
  2847  001282  D015               	goto	i2l1821
  2848  001284                     i2u150_40:
  2849  001284  BE08               	btfsc	_sensorValue+7,7,c
  2850  001286  D006               	goto	i2l1815
  2851  001288  5008               	movf	_sensorValue+7,w,c
  2852  00128A  E111               	bnz	i2l1821
  2853  00128C  0E64               	movlw	100
  2854  00128E  5C07               	subwf	_sensorValue+6,w,c
  2855  001290  B0D8               	btfsc	status,0,c
  2856  001292  D00D               	goto	i2l1821
  2857  001294                     i2l1815:
  2858  001294  BE06               	btfsc	_sensorValue+5,7,c
  2859  001296  D006               	goto	i2l1817
  2860  001298  5006               	movf	_sensorValue+5,w,c
  2861  00129A  E109               	bnz	i2l1821
  2862  00129C  0E64               	movlw	100
  2863  00129E  5C05               	subwf	_sensorValue+4,w,c
  2864  0012A0  B0D8               	btfsc	status,0,c
  2865  0012A2  D005               	goto	i2l1821
  2866  0012A4                     i2l1817:
  2867                           
  2868                           ;interrupts.c: 208: KController();
  2869  0012A4  EC59  F00D         	call	_KController	;wreg free
  2870                           
  2871                           ;interrupts.c: 209: justTurned = 0;
  2872  0012A8  0E00               	movlw	0
  2873  0012AA                     L9:
  2874  0012AA  6E30               	movwf	_justTurned,c
  2875                           
  2876                           ;interrupts.c: 211: }
  2877  0012AC  D015               	goto	i2l1829
  2878  0012AE                     i2l1821:
  2879                           
  2880                           ;interrupts.c: 218: else {
  2881                           ;interrupts.c: 219: motorCounterUpdate(RIGHT,0);
  2882  0012AE  0E00               	movlw	0
  2883  0012B0  6E43               	movwf	motorCounterUpdate@reverse,c
  2884  0012B2  0E01               	movlw	1
  2885  0012B4  EC0C  F00C         	call	_motorCounterUpdate
  2886                           
  2887                           ;interrupts.c: 220: motorCounterUpdate(LEFT,0);
  2888  0012B8  0E00               	movlw	0
  2889  0012BA  6E43               	movwf	motorCounterUpdate@reverse,c
  2890  0012BC  0E00               	movlw	0
  2891  0012BE  EC0C  F00C         	call	_motorCounterUpdate
  2892                           
  2893                           ;interrupts.c: 221: justTurned = 0;
  2894  0012C2  0E00               	movlw	0
  2895  0012C4  6E30               	movwf	_justTurned,c
  2896                           
  2897                           ;interrupts.c: 222: TurnLeft = 0;
  2898  0012C6  0E00               	movlw	0
  2899  0012C8  6E1A               	movwf	_TurnLeft+1,c
  2900  0012CA  0E00               	movlw	0
  2901  0012CC  6E19               	movwf	_TurnLeft,c
  2902  0012CE                     i2l1827:
  2903                           
  2904                           ;interrupts.c: 223: TurnRight = 0;
  2905  0012CE  0E00               	movlw	0
  2906  0012D0  6E1C               	movwf	_TurnRight+1,c
  2907  0012D2  0E00               	movlw	0
  2908  0012D4  6E1B               	movwf	_TurnRight,c
  2909  0012D6  D000               	goto	i2l1829
  2910  0012D8                     i2l1829:
  2911                           
  2912                           ;interrupts.c: 224: }
  2913                           ;interrupts.c: 225: moveMouse(merge(LMotorCounter,RMotorCounter));
  2914  0012D8  C02E  F043         	movff	_RMotorCounter,merge@right
  2915  0012DC  502D               	movf	_LMotorCounter,w,c
  2916  0012DE  ECC6  F00E         	call	_merge
  2917  0012E2  ECD3  F00E         	call	_moveMouse
  2918                           
  2919                           ;interrupts.c: 226: MotorDelayCounter = 0;
  2920  0012E6  0E00               	movlw	0
  2921  0012E8  6E12               	movwf	_MotorDelayCounter+1,c
  2922  0012EA  0E00               	movlw	0
  2923  0012EC  6E11               	movwf	_MotorDelayCounter,c
  2924  0012EE  D000               	goto	i2l1831
  2925  0012F0                     i2l1831:
  2926                           
  2927                           ;interrupts.c: 227: }
  2928                           ;interrupts.c: 229: MotorDelayCounter++;
  2929  0012F0  4A11               	infsnz	_MotorDelayCounter,f,c
  2930  0012F2  2A12               	incf	_MotorDelayCounter+1,f,c
  2931                           
  2932                           ;interrupts.c: 230: INTCONbits.TMR0IF = 0;
  2933  0012F4  94F2               	bcf	intcon,2,c	;volatile
  2934  0012F6  D000               	goto	i2l111
  2935  0012F8                     i2l111:
  2936  0012F8  C057  FFF5         	movff	??_high_isr+13,tablat
  2937  0012FC  C056  FFF8         	movff	??_high_isr+12,tblptru
  2938  001300  C055  FFF7         	movff	??_high_isr+11,tblptrh
  2939  001304  C054  FFF6         	movff	??_high_isr+10,tblptrl
  2940  001308  C053  FFF4         	movff	??_high_isr+9,prodh
  2941  00130C  C052  FFF3         	movff	??_high_isr+8,prodl
  2942  001310  C051  FFDA         	movff	??_high_isr+7,fsr2h
  2943  001314  C050  FFD9         	movff	??_high_isr+6,fsr2l
  2944  001318  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  2945  00131C  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  2946  001320  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  2947  001324  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  2948  001328  C04B  FFFB         	movff	??_high_isr+1,pclatu
  2949  00132C  C04A  FFFA         	movff	??_high_isr,pclath
  2950  001330  0011               	retfie		f
  2951  001332                     __end_of_high_isr:
  2952                           	opt stack 0
  2953                           pclatu	equ	0xFFB
  2954                           pclath	equ	0xFFA
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           intcon2	equ	0xFF1
  2963                           postinc0	equ	0xFEE
  2964                           fsr0h	equ	0xFEA
  2965                           fsr0l	equ	0xFE9
  2966                           wreg	equ	0xFE8
  2967                           fsr1h	equ	0xFE2
  2968                           fsr1l	equ	0xFE1
  2969                           bsr	equ	0xFE0
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _rotate *****************
  2977 ;; Defined at:
  2978 ;;		line 408 in file "interrupts.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  side            1    wreg     enum E4145
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  side            1   19[COMRAM] enum E4145
  2983 ;; Return value:  Size  Location     Type
  2984 ;;		None               void
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, status,0, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;Total ram usage:        1 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    1
  2999 ;; This function calls:
  3000 ;;		_motorCounterUpdate
  3001 ;; This function is called by:
  3002 ;;		_high_isr
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text14
  3007  001BF2                     __ptext14:
  3008                           	opt stack 0
  3009  001BF2                     _rotate:
  3010                           	opt stack 24
  3011                           
  3012                           ;incstack = 0
  3013                           ;rotate@side stored from wreg
  3014  001BF2  6E45               	movwf	rotate@side,c
  3015                           
  3016                           ;interrupts.c: 410: if (side == LEFT){
  3017  001BF4  5045               	movf	rotate@side,w,c
  3018  001BF6  A4D8               	btfss	status,2,c
  3019  001BF8  D00B               	goto	i2l1645
  3020                           
  3021                           ;interrupts.c: 411: motorCounterUpdate(RIGHT,0);
  3022  001BFA  0E00               	movlw	0
  3023  001BFC  6E43               	movwf	motorCounterUpdate@reverse,c
  3024  001BFE  0E01               	movlw	1
  3025  001C00  EC0C  F00C         	call	_motorCounterUpdate
  3026                           
  3027                           ;interrupts.c: 412: motorCounterUpdate(LEFT,1);
  3028  001C04  0E01               	movlw	1
  3029  001C06  6E43               	movwf	motorCounterUpdate@reverse,c
  3030  001C08  0E00               	movlw	0
  3031  001C0A  EC0C  F00C         	call	_motorCounterUpdate
  3032                           
  3033                           ;interrupts.c: 413: } else {
  3034  001C0E  D00B               	goto	i2l1647
  3035  001C10                     i2l1645:
  3036                           
  3037                           ;interrupts.c: 414: motorCounterUpdate(LEFT,0);
  3038  001C10  0E00               	movlw	0
  3039  001C12  6E43               	movwf	motorCounterUpdate@reverse,c
  3040  001C14  0E00               	movlw	0
  3041  001C16  EC0C  F00C         	call	_motorCounterUpdate
  3042                           
  3043                           ;interrupts.c: 415: motorCounterUpdate(RIGHT,1);
  3044  001C1A  0E01               	movlw	1
  3045  001C1C  6E43               	movwf	motorCounterUpdate@reverse,c
  3046  001C1E  0E01               	movlw	1
  3047  001C20  EC0C  F00C         	call	_motorCounterUpdate
  3048  001C24  D000               	goto	i2l1647
  3049  001C26                     i2l1647:
  3050                           
  3051                           ;interrupts.c: 416: }
  3052                           ;interrupts.c: 417: RotateCounter--;
  3053  001C26  0617               	decf	_RotateCounter,f,c
  3054  001C28  A0D8               	btfss	status,0,c
  3055  001C2A  0618               	decf	_RotateCounter+1,f,c
  3056  001C2C  0012               	return		;funcret
  3057  001C2E                     __end_of_rotate:
  3058                           	opt stack 0
  3059                           pclatu	equ	0xFFB
  3060                           pclath	equ	0xFFA
  3061                           tblptru	equ	0xFF8
  3062                           tblptrh	equ	0xFF7
  3063                           tblptrl	equ	0xFF6
  3064                           tablat	equ	0xFF5
  3065                           prodh	equ	0xFF4
  3066                           prodl	equ	0xFF3
  3067                           intcon	equ	0xFF2
  3068                           intcon2	equ	0xFF1
  3069                           postinc0	equ	0xFEE
  3070                           fsr0h	equ	0xFEA
  3071                           fsr0l	equ	0xFE9
  3072                           wreg	equ	0xFE8
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           bsr	equ	0xFE0
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _moveMouse *****************
  3083 ;; Defined at:
  3084 ;;		line 327 in file "interrupts.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  action          1    wreg     unsigned char 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  action          1   17[COMRAM] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;		None               void
  3091 ;; Registers used:
  3092 ;;		wreg
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;Total ram usage:        1 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_high_isr
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text15
  3112  001DA6                     __ptext15:
  3113                           	opt stack 0
  3114  001DA6                     _moveMouse:
  3115                           	opt stack 25
  3116                           
  3117                           ;incstack = 0
  3118                           ;moveMouse@action stored from wreg
  3119  001DA6  6E43               	movwf	moveMouse@action,c
  3120                           
  3121                           ;interrupts.c: 329: LATC = action;
  3122  001DA8  C043  FF8B         	movff	moveMouse@action,3979	;volatile
  3123  001DAC  0012               	return		;funcret
  3124  001DAE                     __end_of_moveMouse:
  3125                           	opt stack 0
  3126                           pclatu	equ	0xFFB
  3127                           pclath	equ	0xFFA
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           intcon	equ	0xFF2
  3135                           intcon2	equ	0xFF1
  3136                           postinc0	equ	0xFEE
  3137                           fsr0h	equ	0xFEA
  3138                           fsr0l	equ	0xFE9
  3139                           wreg	equ	0xFE8
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           bsr	equ	0xFE0
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _merge *****************
  3150 ;; Defined at:
  3151 ;;		line 320 in file "interrupts.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  left            1    wreg     unsigned char 
  3154 ;;  right           1   17[COMRAM] unsigned char 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  left            1   18[COMRAM] unsigned char 
  3157 ;;  merged          1   19[COMRAM] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      unsigned char 
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:        3 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_high_isr
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text16
  3181  001D8C                     __ptext16:
  3182                           	opt stack 0
  3183  001D8C                     _merge:
  3184                           	opt stack 25
  3185                           
  3186                           ;incstack = 0
  3187                           ;merge@left stored from wreg
  3188  001D8C  6E44               	movwf	merge@left,c
  3189                           
  3190                           ;interrupts.c: 322: unsigned char merged;
  3191                           ;interrupts.c: 323: merged = left + (right << 4);
  3192  001D8E  3843               	swapf	merge@right,w,c
  3193  001D90  0BF0               	andlw	240
  3194  001D92  2444               	addwf	merge@left,w,c
  3195  001D94  6E45               	movwf	merge@merged,c
  3196                           
  3197                           ;interrupts.c: 324: return merged;
  3198  001D96  5045               	movf	merge@merged,w,c
  3199  001D98  D000               	goto	i2l155
  3200  001D9A                     i2l155:
  3201  001D9A  0012               	return		;funcret
  3202  001D9C                     __end_of_merge:
  3203                           	opt stack 0
  3204                           pclatu	equ	0xFFB
  3205                           pclath	equ	0xFFA
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           intcon2	equ	0xFF1
  3214                           postinc0	equ	0xFEE
  3215                           fsr0h	equ	0xFEA
  3216                           fsr0l	equ	0xFE9
  3217                           wreg	equ	0xFE8
  3218                           fsr1h	equ	0xFE2
  3219                           fsr1l	equ	0xFE1
  3220                           bsr	equ	0xFE0
  3221                           postinc2	equ	0xFDE
  3222                           postdec2	equ	0xFDD
  3223                           fsr2h	equ	0xFDA
  3224                           fsr2l	equ	0xFD9
  3225                           status	equ	0xFD8
  3226                           
  3227 ;; *************** function _forward *****************
  3228 ;; Defined at:
  3229 ;;		line 453 in file "interrupts.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;		None               void
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    1
  3250 ;; This function calls:
  3251 ;;		_motorCounterUpdate
  3252 ;; This function is called by:
  3253 ;;		_high_isr
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text17
  3258  001D3A                     __ptext17:
  3259                           	opt stack 0
  3260  001D3A                     _forward:
  3261                           	opt stack 24
  3262                           
  3263                           ;interrupts.c: 455: motorCounterUpdate(RIGHT,0);
  3264                           
  3265                           ;incstack = 0
  3266  001D3A  0E00               	movlw	0
  3267  001D3C  6E43               	movwf	motorCounterUpdate@reverse,c
  3268  001D3E  0E01               	movlw	1
  3269  001D40  EC0C  F00C         	call	_motorCounterUpdate
  3270                           
  3271                           ;interrupts.c: 456: motorCounterUpdate(LEFT,0);
  3272  001D44  0E00               	movlw	0
  3273  001D46  6E43               	movwf	motorCounterUpdate@reverse,c
  3274  001D48  0E00               	movlw	0
  3275  001D4A  EC0C  F00C         	call	_motorCounterUpdate
  3276                           
  3277                           ;interrupts.c: 457: ForwardCounter--;
  3278  001D4E  060D               	decf	_ForwardCounter,f,c
  3279  001D50  A0D8               	btfss	status,0,c
  3280  001D52  060E               	decf	_ForwardCounter+1,f,c
  3281  001D54  0012               	return		;funcret
  3282  001D56                     __end_of_forward:
  3283                           	opt stack 0
  3284                           pclatu	equ	0xFFB
  3285                           pclath	equ	0xFFA
  3286                           tblptru	equ	0xFF8
  3287                           tblptrh	equ	0xFF7
  3288                           tblptrl	equ	0xFF6
  3289                           tablat	equ	0xFF5
  3290                           prodh	equ	0xFF4
  3291                           prodl	equ	0xFF3
  3292                           intcon	equ	0xFF2
  3293                           intcon2	equ	0xFF1
  3294                           postinc0	equ	0xFEE
  3295                           fsr0h	equ	0xFEA
  3296                           fsr0l	equ	0xFE9
  3297                           wreg	equ	0xFE8
  3298                           fsr1h	equ	0xFE2
  3299                           fsr1l	equ	0xFE1
  3300                           bsr	equ	0xFE0
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _Reversing *****************
  3308 ;; Defined at:
  3309 ;;		line 432 in file "interrupts.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;		None
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;Total ram usage:        0 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    1
  3330 ;; This function calls:
  3331 ;;		_motorCounterUpdate
  3332 ;; This function is called by:
  3333 ;;		_high_isr
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text18
  3338  001D56                     __ptext18:
  3339                           	opt stack 0
  3340  001D56                     _Reversing:
  3341                           	opt stack 24
  3342                           
  3343                           ;interrupts.c: 434: motorCounterUpdate(RIGHT,1);
  3344                           
  3345                           ;incstack = 0
  3346  001D56  0E01               	movlw	1
  3347  001D58  6E43               	movwf	motorCounterUpdate@reverse,c
  3348  001D5A  0E01               	movlw	1
  3349  001D5C  EC0C  F00C         	call	_motorCounterUpdate
  3350                           
  3351                           ;interrupts.c: 435: motorCounterUpdate(LEFT,1);
  3352  001D60  0E01               	movlw	1
  3353  001D62  6E43               	movwf	motorCounterUpdate@reverse,c
  3354  001D64  0E00               	movlw	0
  3355  001D66  EC0C  F00C         	call	_motorCounterUpdate
  3356                           
  3357                           ;interrupts.c: 436: ReverseCounter--;
  3358  001D6A  0615               	decf	_ReverseCounter,f,c
  3359  001D6C  A0D8               	btfss	status,0,c
  3360  001D6E  0616               	decf	_ReverseCounter+1,f,c
  3361  001D70  0012               	return		;funcret
  3362  001D72                     __end_of_Reversing:
  3363                           	opt stack 0
  3364                           pclatu	equ	0xFFB
  3365                           pclath	equ	0xFFA
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           prodh	equ	0xFF4
  3371                           prodl	equ	0xFF3
  3372                           intcon	equ	0xFF2
  3373                           intcon2	equ	0xFF1
  3374                           postinc0	equ	0xFEE
  3375                           fsr0h	equ	0xFEA
  3376                           fsr0l	equ	0xFE9
  3377                           wreg	equ	0xFE8
  3378                           fsr1h	equ	0xFE2
  3379                           fsr1l	equ	0xFE1
  3380                           bsr	equ	0xFE0
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _KController *****************
  3388 ;; Defined at:
  3389 ;;		line 340 in file "interrupts.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  diff            2   22[COMRAM] int 
  3394 ;;  correctTo       1   21[COMRAM] enum E4145
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:        5 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    1
  3411 ;; This function calls:
  3412 ;;		_ABS
  3413 ;;		_motorCounterUpdate
  3414 ;; This function is called by:
  3415 ;;		_high_isr
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text19
  3420  001AB2                     __ptext19:
  3421                           	opt stack 0
  3422  001AB2                     _KController:
  3423                           	opt stack 24
  3424                           
  3425                           ;interrupts.c: 342: Side correctTo;
  3426                           ;interrupts.c: 343: int diff = 0;
  3427                           
  3428                           ;incstack = 0
  3429  001AB2  0E00               	movlw	0
  3430  001AB4  6E49               	movwf	KController@diff+1,c
  3431  001AB6  0E00               	movlw	0
  3432  001AB8  6E48               	movwf	KController@diff,c
  3433                           
  3434                           ;interrupts.c: 344: if(ignoreControll > 0){
  3435  001ABA  5059               	movf	_ignoreControll,w,c
  3436  001ABC  B4D8               	btfsc	status,2,c
  3437  001ABE  D00C               	goto	i2l1577
  3438                           
  3439                           ;interrupts.c: 345: motorCounterUpdate(RIGHT,0);
  3440  001AC0  0E00               	movlw	0
  3441  001AC2  6E43               	movwf	motorCounterUpdate@reverse,c
  3442  001AC4  0E01               	movlw	1
  3443  001AC6  EC0C  F00C         	call	_motorCounterUpdate
  3444                           
  3445                           ;interrupts.c: 346: motorCounterUpdate(LEFT,0);
  3446  001ACA  0E00               	movlw	0
  3447  001ACC  6E43               	movwf	motorCounterUpdate@reverse,c
  3448  001ACE  0E00               	movlw	0
  3449  001AD0  EC0C  F00C         	call	_motorCounterUpdate
  3450                           
  3451                           ;interrupts.c: 347: ignoreControll--;
  3452  001AD4  0659               	decf	_ignoreControll,f,c
  3453                           
  3454                           ;interrupts.c: 348: return;
  3455  001AD6  D04D               	goto	i2l166
  3456  001AD8                     i2l1577:
  3457                           
  3458                           ;interrupts.c: 349: }
  3459                           ;interrupts.c: 351: diff = ABS(sensorValue[1] - sensorValue[0]);
  3460  001AD8  C001  F045         	movff	_sensorValue,??_KController
  3461  001ADC  C002  F046         	movff	_sensorValue+1,??_KController+1
  3462  001AE0  1E45               	comf	??_KController,f,c
  3463  001AE2  1E46               	comf	??_KController+1,f,c
  3464  001AE4  4A45               	infsnz	??_KController,f,c
  3465  001AE6  2A46               	incf	??_KController+1,f,c
  3466  001AE8  5003               	movf	_sensorValue+2,w,c
  3467  001AEA  2445               	addwf	??_KController,w,c
  3468  001AEC  6E43               	movwf	ABS@x,c
  3469  001AEE  5004               	movf	_sensorValue+3,w,c
  3470  001AF0  2046               	addwfc	??_KController+1,w,c
  3471  001AF2  6E44               	movwf	ABS@x+1,c
  3472  001AF4  ECB9  F00E         	call	_ABS	;wreg free
  3473  001AF8  C043  F048         	movff	?_ABS,KController@diff
  3474  001AFC  C044  F049         	movff	?_ABS+1,KController@diff+1
  3475                           
  3476                           ;interrupts.c: 353: if(sensorValue[0] > sensorValue[1])
  3477  001B00  5001               	movf	_sensorValue,w,c
  3478  001B02  5C03               	subwf	_sensorValue+2,w,c
  3479  001B04  5004               	movf	_sensorValue+3,w,c
  3480  001B06  0A80               	xorlw	128
  3481  001B08  6E45               	movwf	??_KController& (0+255),c
  3482  001B0A  5002               	movf	_sensorValue+1,w,c
  3483  001B0C  0A80               	xorlw	128
  3484  001B0E  5845               	subwfb	??_KController& (0+255),w,c
  3485  001B10  B0D8               	btfsc	status,0,c
  3486  001B12  D008               	goto	i2l1585
  3487                           
  3488                           ;interrupts.c: 354: {
  3489                           ;interrupts.c: 355: correctTo = LEFT;
  3490  001B14  0E00               	movlw	0
  3491  001B16  6E47               	movwf	KController@correctTo,c
  3492                           
  3493                           ;interrupts.c: 356: motorCounterUpdate(correctTo,0);
  3494  001B18  0E00               	movlw	0
  3495  001B1A  6E43               	movwf	motorCounterUpdate@reverse,c
  3496  001B1C  5047               	movf	KController@correctTo,w,c
  3497  001B1E  EC0C  F00C         	call	_motorCounterUpdate
  3498                           
  3499                           ;interrupts.c: 357: }
  3500  001B22  D008               	goto	i2l1589
  3501  001B24                     i2l1585:
  3502                           
  3503                           ;interrupts.c: 358: else
  3504                           ;interrupts.c: 359: {
  3505                           ;interrupts.c: 360: correctTo = RIGHT;
  3506  001B24  0E01               	movlw	1
  3507  001B26  6E47               	movwf	KController@correctTo,c
  3508                           
  3509                           ;interrupts.c: 361: motorCounterUpdate(correctTo,0);
  3510  001B28  0E00               	movlw	0
  3511  001B2A  6E43               	movwf	motorCounterUpdate@reverse,c
  3512  001B2C  5047               	movf	KController@correctTo,w,c
  3513  001B2E  EC0C  F00C         	call	_motorCounterUpdate
  3514  001B32  D000               	goto	i2l1589
  3515  001B34                     i2l1589:
  3516                           
  3517                           ;interrupts.c: 362: }
  3518                           ;interrupts.c: 364: if(diff > 60)
  3519  001B34  BE49               	btfsc	KController@diff+1,7,c
  3520  001B36  D008               	goto	i2l1593
  3521  001B38  5049               	movf	KController@diff+1,w,c
  3522  001B3A  E104               	bnz	i2u105_40
  3523  001B3C  0E3D               	movlw	61
  3524  001B3E  5C48               	subwf	KController@diff,w,c
  3525  001B40  A0D8               	btfss	status,0,c
  3526  001B42  D002               	goto	i2l1593
  3527  001B44                     i2u105_40:
  3528                           
  3529                           ;interrupts.c: 365: ignoreControll = 1;
  3530  001B44  0E01               	movlw	1
  3531  001B46  D013               	goto	L11
  3532  001B48                     i2l1593:
  3533                           
  3534                           ;interrupts.c: 366: else if(diff <= 60 && diff > 20)
  3535  001B48  BE49               	btfsc	KController@diff+1,7,c
  3536  001B4A  D006               	goto	i2l1595
  3537  001B4C  5049               	movf	KController@diff+1,w,c
  3538  001B4E  E10E               	bnz	i2l1599
  3539  001B50  0E3D               	movlw	61
  3540  001B52  5C48               	subwf	KController@diff,w,c
  3541  001B54  B0D8               	btfsc	status,0,c
  3542  001B56  D00A               	goto	i2l1599
  3543  001B58                     i2l1595:
  3544  001B58  BE49               	btfsc	KController@diff+1,7,c
  3545  001B5A  D008               	goto	i2l1599
  3546  001B5C  5049               	movf	KController@diff+1,w,c
  3547  001B5E  E104               	bnz	i2u107_40
  3548  001B60  0E15               	movlw	21
  3549  001B62  5C48               	subwf	KController@diff,w,c
  3550  001B64  A0D8               	btfss	status,0,c
  3551  001B66  D002               	goto	i2l1599
  3552  001B68                     i2u107_40:
  3553                           
  3554                           ;interrupts.c: 367: ignoreControll = 3;
  3555  001B68  0E03               	movlw	3
  3556  001B6A  D001               	goto	L11
  3557  001B6C                     i2l1599:
  3558                           
  3559                           ;interrupts.c: 368: else
  3560                           ;interrupts.c: 369: ignoreControll = 10;
  3561  001B6C  0E0A               	movlw	10
  3562  001B6E                     L11:
  3563  001B6E  6E59               	movwf	_ignoreControll,c
  3564  001B70  D000               	goto	i2l166
  3565  001B72                     i2l166:
  3566  001B72  0012               	return		;funcret
  3567  001B74                     __end_of_KController:
  3568                           	opt stack 0
  3569                           pclatu	equ	0xFFB
  3570                           pclath	equ	0xFFA
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon2	equ	0xFF1
  3579                           postinc0	equ	0xFEE
  3580                           fsr0h	equ	0xFEA
  3581                           fsr0l	equ	0xFE9
  3582                           wreg	equ	0xFE8
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           bsr	equ	0xFE0
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _FrontController *****************
  3593 ;; Defined at:
  3594 ;;		line 373 in file "interrupts.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  diff2           2   22[COMRAM] int 
  3599 ;;  correctTo       1   21[COMRAM] enum E4145
  3600 ;; Return value:  Size  Location     Type
  3601 ;;		None               void
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:        5 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    1
  3616 ;; This function calls:
  3617 ;;		_ABS
  3618 ;;		_motorCounterUpdate
  3619 ;; This function is called by:
  3620 ;;		_high_isr
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text20
  3625  00190C                     __ptext20:
  3626                           	opt stack 0
  3627  00190C                     _FrontController:
  3628                           	opt stack 24
  3629                           
  3630                           ;interrupts.c: 374: int diff2 = ABS(sensorValue[3] - sensorValue[2]);
  3631                           
  3632                           ;incstack = 0
  3633  00190C  EE20  F005         	lfsr	2,_sensorValue+4
  3634  001910  CFDE F045          	movff	postinc2,??_FrontController
  3635  001914  CFDD F046          	movff	postdec2,??_FrontController+1
  3636  001918  1E45               	comf	??_FrontController,f,c
  3637  00191A  1E46               	comf	??_FrontController+1,f,c
  3638  00191C  4A45               	infsnz	??_FrontController,f,c
  3639  00191E  2A46               	incf	??_FrontController+1,f,c
  3640  001920  5007               	movf	_sensorValue+6,w,c
  3641  001922  2445               	addwf	??_FrontController,w,c
  3642  001924  6E43               	movwf	ABS@x,c
  3643  001926  5008               	movf	_sensorValue+7,w,c
  3644  001928  2046               	addwfc	??_FrontController+1,w,c
  3645  00192A  6E44               	movwf	ABS@x+1,c
  3646  00192C  ECB9  F00E         	call	_ABS	;wreg free
  3647  001930  C043  F048         	movff	?_ABS,FrontController@diff2
  3648  001934  C044  F049         	movff	?_ABS+1,FrontController@diff2+1
  3649                           
  3650                           ;interrupts.c: 375: Side correctTo;
  3651                           ;interrupts.c: 377: if(ignoreFControll > 0)
  3652  001938  BE28               	btfsc	_ignoreFControll+1,7,c
  3653  00193A  D013               	goto	i2l1611
  3654  00193C  5028               	movf	_ignoreFControll+1,w,c
  3655  00193E  E103               	bnz	i2u108_40
  3656  001940  0427               	decf	_ignoreFControll,w,c
  3657  001942  A0D8               	btfss	status,0,c
  3658  001944  D00E               	goto	i2l1611
  3659  001946                     i2u108_40:
  3660                           
  3661                           ;interrupts.c: 378: {
  3662                           ;interrupts.c: 379: motorCounterUpdate(RIGHT,0);
  3663  001946  0E00               	movlw	0
  3664  001948  6E43               	movwf	motorCounterUpdate@reverse,c
  3665  00194A  0E01               	movlw	1
  3666  00194C  EC0C  F00C         	call	_motorCounterUpdate
  3667                           
  3668                           ;interrupts.c: 380: motorCounterUpdate(LEFT,0);
  3669  001950  0E00               	movlw	0
  3670  001952  6E43               	movwf	motorCounterUpdate@reverse,c
  3671  001954  0E00               	movlw	0
  3672  001956  EC0C  F00C         	call	_motorCounterUpdate
  3673                           
  3674                           ;interrupts.c: 381: ignoreFControll--;
  3675  00195A  0627               	decf	_ignoreFControll,f,c
  3676  00195C  A0D8               	btfss	status,0,c
  3677  00195E  0628               	decf	_ignoreFControll+1,f,c
  3678                           
  3679                           ;interrupts.c: 382: return;
  3680  001960  D03F               	goto	i2l176
  3681  001962                     i2l1611:
  3682                           
  3683                           ;interrupts.c: 383: }
  3684                           ;interrupts.c: 385: if(sensorValue[2] > sensorValue[3])
  3685  001962  5005               	movf	_sensorValue+4,w,c
  3686  001964  5C07               	subwf	_sensorValue+6,w,c
  3687  001966  5008               	movf	_sensorValue+7,w,c
  3688  001968  0A80               	xorlw	128
  3689  00196A  6E45               	movwf	??_FrontController& (0+255),c
  3690  00196C  5006               	movf	_sensorValue+5,w,c
  3691  00196E  0A80               	xorlw	128
  3692  001970  5845               	subwfb	??_FrontController& (0+255),w,c
  3693  001972  B0D8               	btfsc	status,0,c
  3694  001974  D008               	goto	i2l1617
  3695                           
  3696                           ;interrupts.c: 386: {
  3697                           ;interrupts.c: 388: correctTo = LEFT;
  3698  001976  0E00               	movlw	0
  3699  001978  6E47               	movwf	FrontController@correctTo,c
  3700                           
  3701                           ;interrupts.c: 389: motorCounterUpdate(correctTo,0);
  3702  00197A  0E00               	movlw	0
  3703  00197C  6E43               	movwf	motorCounterUpdate@reverse,c
  3704  00197E  5047               	movf	FrontController@correctTo,w,c
  3705  001980  EC0C  F00C         	call	_motorCounterUpdate
  3706                           
  3707                           ;interrupts.c: 390: }
  3708  001984  D008               	goto	i2l1621
  3709  001986                     i2l1617:
  3710                           
  3711                           ;interrupts.c: 391: else
  3712                           ;interrupts.c: 392: {
  3713                           ;interrupts.c: 394: correctTo = RIGHT;
  3714  001986  0E01               	movlw	1
  3715  001988  6E47               	movwf	FrontController@correctTo,c
  3716                           
  3717                           ;interrupts.c: 395: motorCounterUpdate(correctTo,0);
  3718  00198A  0E00               	movlw	0
  3719  00198C  6E43               	movwf	motorCounterUpdate@reverse,c
  3720  00198E  5047               	movf	FrontController@correctTo,w,c
  3721  001990  EC0C  F00C         	call	_motorCounterUpdate
  3722  001994  D000               	goto	i2l1621
  3723  001996                     i2l1621:
  3724                           
  3725                           ;interrupts.c: 396: }
  3726                           ;interrupts.c: 398: if(diff2 > 60)
  3727  001996  BE49               	btfsc	FrontController@diff2+1,7,c
  3728  001998  D00A               	goto	i2l1625
  3729  00199A  5049               	movf	FrontController@diff2+1,w,c
  3730  00199C  E104               	bnz	i2u110_40
  3731  00199E  0E3D               	movlw	61
  3732  0019A0  5C48               	subwf	FrontController@diff2,w,c
  3733  0019A2  A0D8               	btfss	status,0,c
  3734  0019A4  D004               	goto	i2l1625
  3735  0019A6                     i2u110_40:
  3736                           
  3737                           ;interrupts.c: 399: ignoreFControll = 1;
  3738  0019A6  0E00               	movlw	0
  3739  0019A8  6E28               	movwf	_ignoreFControll+1,c
  3740  0019AA  0E01               	movlw	1
  3741  0019AC  D017               	goto	L13
  3742  0019AE                     i2l1625:
  3743                           
  3744                           ;interrupts.c: 400: else if(diff2 <= 60 && diff2 > 20)
  3745  0019AE  BE49               	btfsc	FrontController@diff2+1,7,c
  3746  0019B0  D006               	goto	i2l1627
  3747  0019B2  5049               	movf	FrontController@diff2+1,w,c
  3748  0019B4  E110               	bnz	i2l1631
  3749  0019B6  0E3D               	movlw	61
  3750  0019B8  5C48               	subwf	FrontController@diff2,w,c
  3751  0019BA  B0D8               	btfsc	status,0,c
  3752  0019BC  D00C               	goto	i2l1631
  3753  0019BE                     i2l1627:
  3754  0019BE  BE49               	btfsc	FrontController@diff2+1,7,c
  3755  0019C0  D00A               	goto	i2l1631
  3756  0019C2  5049               	movf	FrontController@diff2+1,w,c
  3757  0019C4  E104               	bnz	i2u112_40
  3758  0019C6  0E15               	movlw	21
  3759  0019C8  5C48               	subwf	FrontController@diff2,w,c
  3760  0019CA  A0D8               	btfss	status,0,c
  3761  0019CC  D004               	goto	i2l1631
  3762  0019CE                     i2u112_40:
  3763                           
  3764                           ;interrupts.c: 401: ignoreFControll = 3;
  3765  0019CE  0E00               	movlw	0
  3766  0019D0  6E28               	movwf	_ignoreFControll+1,c
  3767  0019D2  0E03               	movlw	3
  3768  0019D4  D003               	goto	L13
  3769  0019D6                     i2l1631:
  3770                           
  3771                           ;interrupts.c: 402: else
  3772                           ;interrupts.c: 403: ignoreFControll = 10;
  3773  0019D6  0E00               	movlw	0
  3774  0019D8  6E28               	movwf	_ignoreFControll+1,c
  3775  0019DA  0E0A               	movlw	10
  3776  0019DC                     L13:
  3777  0019DC  6E27               	movwf	_ignoreFControll,c
  3778  0019DE  D000               	goto	i2l176
  3779  0019E0                     i2l176:
  3780  0019E0  0012               	return		;funcret
  3781  0019E2                     __end_of_FrontController:
  3782                           	opt stack 0
  3783                           pclatu	equ	0xFFB
  3784                           pclath	equ	0xFFA
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           intcon	equ	0xFF2
  3792                           intcon2	equ	0xFF1
  3793                           postinc0	equ	0xFEE
  3794                           fsr0h	equ	0xFEA
  3795                           fsr0l	equ	0xFE9
  3796                           wreg	equ	0xFE8
  3797                           fsr1h	equ	0xFE2
  3798                           fsr1l	equ	0xFE1
  3799                           bsr	equ	0xFE0
  3800                           postinc2	equ	0xFDE
  3801                           postdec2	equ	0xFDD
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _motorCounterUpdate *****************
  3807 ;; Defined at:
  3808 ;;		line 275 in file "interrupts.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  side            1    wreg     enum E4145
  3811 ;;  reverse         1   17[COMRAM] unsigned char 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  side            1   18[COMRAM] enum E4145
  3814 ;; Return value:  Size  Location     Type
  3815 ;;		None               void
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3823 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;Total ram usage:        2 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_high_isr
  3833 ;;		_KController
  3834 ;;		_FrontController
  3835 ;;		_rotate
  3836 ;;		_Reversing
  3837 ;;		_forward
  3838 ;;		_smoothTurn
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text21
  3843  001818                     __ptext21:
  3844                           	opt stack 0
  3845  001818                     _motorCounterUpdate:
  3846                           	opt stack 24
  3847                           
  3848                           ;incstack = 0
  3849                           ;motorCounterUpdate@side stored from wreg
  3850  001818  6E44               	movwf	motorCounterUpdate@side,c
  3851                           
  3852                           ;interrupts.c: 277: if(side == LEFT && reverse == 1)
  3853  00181A  5044               	movf	motorCounterUpdate@side,w,c
  3854  00181C  A4D8               	btfss	status,2,c
  3855  00181E  D01B               	goto	i2l1469
  3856  001820  0443               	decf	motorCounterUpdate@reverse,w,c
  3857  001822  B4D8               	btfsc	status,2,c
  3858  001824  D00B               	goto	i2l1467
  3859  001826  D017               	goto	i2l1469
  3860                           
  3861                           ;interrupts.c: 278: {
  3862                           ;interrupts.c: 279: switch(LMotorCounter)
  3863  001828  D009               	goto	i2l1467
  3864  00182A                     i2l1457:
  3865  00182A  0E02               	movlw	2
  3866  00182C  D004               	goto	L16
  3867  00182E                     i2l1459:
  3868  00182E  0E04               	movlw	4
  3869  001830  D002               	goto	L16
  3870                           
  3871                           ;interrupts.c: 283: case 0b00000100: LMotorCounter = 0b00001000; break;
  3872  001832  D03E               	goto	i2l1501
  3873                           
  3874                           ;interrupts.c: 284: case 0b00001000: LMotorCounter = 0b00000001; break;
  3875  001834  D039               	goto	i2l1495
  3876  001836                     L16:
  3877  001836  6E2D               	movwf	_LMotorCounter,c
  3878  001838  D068               	goto	i2l152
  3879                           
  3880                           ;interrupts.c: 285: default: LMotorCounter = 0b00000001;
  3881  00183A  D036               	goto	i2l1495
  3882  00183C                     i2l1467:
  3883  00183C  502D               	movf	_LMotorCounter,w,c
  3884                           
  3885                           ; Switch size 1, requested type "space"
  3886                           ; Number of cases is 4, Range of values is 1 to 8
  3887                           ; switch strategies available:
  3888                           ; Name         Instructions Cycles
  3889                           ; simple_byte           13     7 (average)
  3890                           ;	Chosen strategy is simple_byte
  3891  00183E  0A01               	xorlw	1	; case 1
  3892  001840  B4D8               	btfsc	status,2,c
  3893  001842  D7F3               	goto	i2l1457
  3894  001844  0A03               	xorlw	3	; case 2
  3895  001846  B4D8               	btfsc	status,2,c
  3896  001848  D7F2               	goto	i2l1459
  3897  00184A  0A06               	xorlw	6	; case 4
  3898  00184C  B4D8               	btfsc	status,2,c
  3899  00184E  D030               	goto	i2l1501
  3900  001850  0A0C               	xorlw	12	; case 8
  3901  001852  D02A               	goto	i2l1495
  3902                           
  3903                           ;interrupts.c: 287: } else if(side == RIGHT && reverse == 1)
  3904  001854  D05A               	goto	i2l152
  3905  001856                     i2l1469:
  3906  001856  0444               	decf	motorCounterUpdate@side,w,c
  3907  001858  A4D8               	btfss	status,2,c
  3908  00185A  D01D               	goto	i2l1487
  3909  00185C  0443               	decf	motorCounterUpdate@reverse,w,c
  3910  00185E  B4D8               	btfsc	status,2,c
  3911  001860  D00B               	goto	i2l1485
  3912  001862  D019               	goto	i2l1487
  3913                           
  3914                           ;interrupts.c: 288: {
  3915                           ;interrupts.c: 289: switch(RMotorCounter)
  3916  001864  D009               	goto	i2l1485
  3917  001866                     i2l1475:
  3918  001866  0E08               	movlw	8
  3919  001868  D040               	goto	L24
  3920  00186A                     i2l1477:
  3921  00186A  0E01               	movlw	1
  3922  00186C  D03E               	goto	L24
  3923  00186E                     i2l1479:
  3924  00186E  0E02               	movlw	2
  3925  001870  D03C               	goto	L24
  3926  001872                     i2l1481:
  3927  001872  0E04               	movlw	4
  3928  001874  D03A               	goto	L24
  3929                           
  3930                           ;interrupts.c: 295: default: RMotorCounter = 0b00001000;
  3931  001876  D7F7               	goto	i2l1475
  3932  001878                     i2l1485:
  3933  001878  502E               	movf	_RMotorCounter,w,c
  3934                           
  3935                           ; Switch size 1, requested type "space"
  3936                           ; Number of cases is 4, Range of values is 1 to 8
  3937                           ; switch strategies available:
  3938                           ; Name         Instructions Cycles
  3939                           ; simple_byte           13     7 (average)
  3940                           ;	Chosen strategy is simple_byte
  3941  00187A  0A01               	xorlw	1	; case 1
  3942  00187C  B4D8               	btfsc	status,2,c
  3943  00187E  D7F3               	goto	i2l1475
  3944  001880  0A03               	xorlw	3	; case 2
  3945  001882  B4D8               	btfsc	status,2,c
  3946  001884  D7F2               	goto	i2l1477
  3947  001886  0A06               	xorlw	6	; case 4
  3948  001888  B4D8               	btfsc	status,2,c
  3949  00188A  D7F1               	goto	i2l1479
  3950  00188C  0A0C               	xorlw	12	; case 8
  3951  00188E  B4D8               	btfsc	status,2,c
  3952  001890  D7F0               	goto	i2l1481
  3953  001892  D7E9               	goto	i2l1475
  3954                           
  3955                           ;interrupts.c: 297: } else if(side == LEFT && reverse == 0)
  3956  001894  D03A               	goto	i2l152
  3957  001896                     i2l1487:
  3958  001896  5044               	movf	motorCounterUpdate@side,w,c
  3959  001898  A4D8               	btfss	status,2,c
  3960  00189A  D01B               	goto	i2l1505
  3961  00189C  5043               	movf	motorCounterUpdate@reverse,w,c
  3962  00189E  B4D8               	btfsc	status,2,c
  3963  0018A0  D009               	goto	i2l1503
  3964  0018A2  D017               	goto	i2l1505
  3965                           
  3966                           ;interrupts.c: 298: {
  3967                           ;interrupts.c: 299: switch(LMotorCounter)
  3968  0018A4  D007               	goto	i2l1503
  3969                           
  3970                           ;interrupts.c: 300: {
  3971                           ;interrupts.c: 301: case 0b00000001: LMotorCounter = 0b00001000; break;
  3972  0018A6  D004               	goto	i2l1501
  3973  0018A8                     i2l1495:
  3974  0018A8  0E01               	movlw	1
  3975  0018AA  D7C5               	goto	L16
  3976                           
  3977                           ;interrupts.c: 303: case 0b00000100: LMotorCounter = 0b00000010; break;
  3978  0018AC  D7BE               	goto	i2l1457
  3979                           
  3980                           ;interrupts.c: 304: case 0b00001000: LMotorCounter = 0b00000100; break;
  3981  0018AE  D7BF               	goto	i2l1459
  3982  0018B0                     i2l1501:
  3983  0018B0  0E08               	movlw	8
  3984  0018B2  D7C1               	goto	L16
  3985  0018B4                     i2l1503:
  3986  0018B4  502D               	movf	_LMotorCounter,w,c
  3987                           
  3988                           ; Switch size 1, requested type "space"
  3989                           ; Number of cases is 4, Range of values is 1 to 8
  3990                           ; switch strategies available:
  3991                           ; Name         Instructions Cycles
  3992                           ; simple_byte           13     7 (average)
  3993                           ;	Chosen strategy is simple_byte
  3994  0018B6  0A01               	xorlw	1	; case 1
  3995  0018B8  B4D8               	btfsc	status,2,c
  3996  0018BA  D7FA               	goto	i2l1501
  3997  0018BC  0A03               	xorlw	3	; case 2
  3998  0018BE  B4D8               	btfsc	status,2,c
  3999  0018C0  D7F3               	goto	i2l1495
  4000  0018C2  0A06               	xorlw	6	; case 4
  4001  0018C4  B4D8               	btfsc	status,2,c
  4002  0018C6  D7B1               	goto	i2l1457
  4003  0018C8  0A0C               	xorlw	12	; case 8
  4004  0018CA  B4D8               	btfsc	status,2,c
  4005  0018CC  D7B0               	goto	i2l1459
  4006  0018CE  D7F0               	goto	i2l1501
  4007                           
  4008                           ;interrupts.c: 307: } else if(side == RIGHT && reverse == 0)
  4009  0018D0  D01C               	goto	i2l152
  4010  0018D2                     i2l1505:
  4011  0018D2  0444               	decf	motorCounterUpdate@side,w,c
  4012  0018D4  A4D8               	btfss	status,2,c
  4013  0018D6  D019               	goto	i2l152
  4014  0018D8  5043               	movf	motorCounterUpdate@reverse,w,c
  4015  0018DA  B4D8               	btfsc	status,2,c
  4016  0018DC  D009               	goto	i2l1521
  4017  0018DE  D015               	goto	i2l152
  4018                           
  4019                           ;interrupts.c: 308: {
  4020                           ;interrupts.c: 309: switch(RMotorCounter)
  4021  0018E0  D007               	goto	i2l1521
  4022                           
  4023                           ;interrupts.c: 310: {
  4024                           ;interrupts.c: 311: case 0b00000001: RMotorCounter = 0b00000010; break;
  4025  0018E2  D7C5               	goto	i2l1479
  4026                           
  4027                           ;interrupts.c: 312: case 0b00000010: RMotorCounter = 0b00000100; break;
  4028  0018E4  D7C6               	goto	i2l1481
  4029                           
  4030                           ;interrupts.c: 313: case 0b00000100: RMotorCounter = 0b00001000; break;
  4031  0018E6  D7BF               	goto	i2l1475
  4032                           
  4033                           ;interrupts.c: 314: case 0b00001000: RMotorCounter = 0b00000001; break;
  4034  0018E8  D7C0               	goto	i2l1477
  4035  0018EA                     L24:
  4036  0018EA  6E2E               	movwf	_RMotorCounter,c
  4037  0018EC  D00E               	goto	i2l152
  4038                           
  4039                           ;interrupts.c: 315: default: RMotorCounter = 0b00000001;
  4040  0018EE  D7BD               	goto	i2l1477
  4041  0018F0                     i2l1521:
  4042  0018F0  502E               	movf	_RMotorCounter,w,c
  4043                           
  4044                           ; Switch size 1, requested type "space"
  4045                           ; Number of cases is 4, Range of values is 1 to 8
  4046                           ; switch strategies available:
  4047                           ; Name         Instructions Cycles
  4048                           ; simple_byte           13     7 (average)
  4049                           ;	Chosen strategy is simple_byte
  4050  0018F2  0A01               	xorlw	1	; case 1
  4051  0018F4  B4D8               	btfsc	status,2,c
  4052  0018F6  D7BB               	goto	i2l1479
  4053  0018F8  0A03               	xorlw	3	; case 2
  4054  0018FA  B4D8               	btfsc	status,2,c
  4055  0018FC  D7BA               	goto	i2l1481
  4056  0018FE  0A06               	xorlw	6	; case 4
  4057  001900  B4D8               	btfsc	status,2,c
  4058  001902  D7B1               	goto	i2l1475
  4059  001904  0A0C               	xorlw	12	; case 8
  4060  001906  D7B1               	goto	i2l1477
  4061  001908  D000               	goto	i2l152
  4062  00190A                     i2l152:
  4063  00190A  0012               	return		;funcret
  4064  00190C                     __end_of_motorCounterUpdate:
  4065                           	opt stack 0
  4066                           pclatu	equ	0xFFB
  4067                           pclath	equ	0xFFA
  4068                           tblptru	equ	0xFF8
  4069                           tblptrh	equ	0xFF7
  4070                           tblptrl	equ	0xFF6
  4071                           tablat	equ	0xFF5
  4072                           prodh	equ	0xFF4
  4073                           prodl	equ	0xFF3
  4074                           intcon	equ	0xFF2
  4075                           intcon2	equ	0xFF1
  4076                           postinc0	equ	0xFEE
  4077                           fsr0h	equ	0xFEA
  4078                           fsr0l	equ	0xFE9
  4079                           wreg	equ	0xFE8
  4080                           fsr1h	equ	0xFE2
  4081                           fsr1l	equ	0xFE1
  4082                           bsr	equ	0xFE0
  4083                           postinc2	equ	0xFDE
  4084                           postdec2	equ	0xFDD
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _ABS *****************
  4090 ;; Defined at:
  4091 ;;		line 333 in file "interrupts.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  x               2   17[COMRAM] int 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;		None
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  2   17[COMRAM] int 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;Total ram usage:        2 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_KController
  4115 ;;		_FrontController
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text22
  4120  001D72                     __ptext22:
  4121                           	opt stack 0
  4122  001D72                     _ABS:
  4123                           	opt stack 24
  4124                           
  4125                           ;interrupts.c: 335: if(x<0) x = -x;
  4126                           
  4127                           ;incstack = 0
  4128  001D72  AE44               	btfss	ABS@x+1,7,c
  4129  001D74  D005               	goto	i2l1527
  4130  001D76  6C43               	negf	ABS@x,c
  4131  001D78  1E44               	comf	ABS@x+1,f,c
  4132  001D7A  B0D8               	btfsc	status,0,c
  4133  001D7C  2A44               	incf	ABS@x+1,f,c
  4134  001D7E  D000               	goto	i2l1527
  4135  001D80                     i2l1527:
  4136                           
  4137                           ;interrupts.c: 336: return x;
  4138  001D80  C043  F043         	movff	ABS@x,?_ABS
  4139  001D84  C044  F044         	movff	ABS@x+1,?_ABS+1
  4140  001D88  D000               	goto	i2l162
  4141  001D8A                     i2l162:
  4142  001D8A  0012               	return		;funcret
  4143  001D8C                     __end_of_ABS:
  4144                           	opt stack 0
  4145                           pclatu	equ	0xFFB
  4146                           pclath	equ	0xFFA
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           intcon	equ	0xFF2
  4154                           intcon2	equ	0xFF1
  4155                           postinc0	equ	0xFEE
  4156                           fsr0h	equ	0xFEA
  4157                           fsr0l	equ	0xFE9
  4158                           wreg	equ	0xFE8
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           bsr	equ	0xFE0
  4162                           postinc2	equ	0xFDE
  4163                           postdec2	equ	0xFDD
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           pclatu	equ	0xFFB
  4168                           pclath	equ	0xFFA
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           intcon	equ	0xFF2
  4176                           intcon2	equ	0xFF1
  4177                           postinc0	equ	0xFEE
  4178                           fsr0h	equ	0xFEA
  4179                           fsr0l	equ	0xFE9
  4180                           wreg	equ	0xFE8
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           bsr	equ	0xFE0
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190                           	psect	rparam
  4191  0000                     pclatu	equ	0xFFB
  4192                           pclath	equ	0xFFA
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           postinc0	equ	0xFEE
  4202                           fsr0h	equ	0xFEA
  4203                           fsr0l	equ	0xFE9
  4204                           wreg	equ	0xFE8
  4205                           fsr1h	equ	0xFE2
  4206                           fsr1l	equ	0xFE1
  4207                           bsr	equ	0xFE0
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      89
    BANK0           128    116     124
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_FrontController
    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_ABS
    _KController->_motorCounterUpdate
    _FrontController->_ABS
    _FrontController->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             25 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             10 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             38 COMRAM     1     1      0
                                              6 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             38 COMRAM     1     1      0
                                              6 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                             38 COMRAM     1     1      0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8146
                                             24 COMRAM    14    14      0
                    _FrontController
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1258
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1236
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1236
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1523
                                             19 COMRAM     5     5      0
                                _ABS
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _FrontController                                      5     5      0    1522
                                             19 COMRAM     5     5      0
                                _ABS
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1236
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _FrontController
     _ABS
     _motorCounterUpdate
   _KController
     _ABS
     _motorCounterUpdate
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     74      7C       5       96.9%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      59       1       70.1%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D5       6        0.0%
DATA                 0      0      D5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat May 02 15:50:04 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l312 165A                             l305 15F4                             l322 1CF0  
                           l323 1CF8                             l318 1CC0                             l326 1C64  
                           l319 1CC8                             l291 1D38                             l277 1BA0  
                           l286 1D24                             l519 1AB0                             _ABS 1D72  
                  __CFG_CPB$OFF 000000                             _MAX 1CCA                             _MIN 1C9A  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1D3A                    _rotatingSide 0031  
                           wreg 000FE8                            ABS@x 0043                            ?_ABS 0043  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l2021 1D10                            l1065 1D32  
                          l1913 1AA6                            l1905 1A80                            l1909 1A90  
                          l1941 1506                            l1919 1B8A                            l1951 15DE  
                          l1935 137A                            l1881 1A00                            l1945 151C  
                          l1929 1356                            l1939 13E8                            l1893 1A36  
                          l1949 1576                            l1981 1628                            l1895 1A44  
                          l1887 1A18                            l1975 1604                            l1897 1A4E  
                          l1985 1642                            l1995 16F6                            l1979 161E  
                          l1999 1700                            _LATC 000F8B                            u1640 1354  
                          u1650 1378                            u1735 1668                            u1767 1B90  
                          _main 1CFA                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2            FrontController@diff2 0048  
                 __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 008A                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000010                 __end_of_InitApp 1BF2           __end_of_setCorrection 1818  
                         ??_ABS 0045                           ??_MAX 0058                           ??_MIN 0058  
    __size_of_sensorComputation 02C4                           ?_main 0032                 __end_of___awdiv 1AB2  
                         _T0CON 000FD5                 ___awdiv@divisor 0082                           i2l111 12F8  
                         i2l152 190A                           i2l162 1D8A                           i2l155 1D9A  
                         i2l166 1B72                           i2l176 19E0                 ___awdiv@counter 0084  
                         _TRISC 000F94             _ConfigureOscillator 1D9C                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                           _delay 1B74                           _merge 1D8C  
               __end_of_forward 1D56                 __end_of_low_isr 00A2                           tablat 000FF5  
                         status 000FD8            ?_ConfigureOscillator 0032               _ControllerCounter 0009  
               __initialization 1C66                    __end_of_main 1D1C                          ??_main 0059  
                 __activetblptr 000002                          ?_delay 0080                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          ?_merge 0043  
                        _ADRESH 000FC4                          _ADRESL 000FC3                ___awdiv@dividend 0080  
      __size_of_FrontController 00D6                          i2l1501 18B0                          i2l1503 18B4  
                        i2l1521 18F0                          i2l1505 18D2                          i2l1611 1962  
                        i2l1621 1996                          i2l1527 1D80                          i2l1631 19D6  
                        i2l1481 1872                          i2l1457 182A                          i2l1625 19AE  
                        i2l1617 1986                          i2l1475 1866                          i2l1459 182E  
                        i2l1467 183C                          i2l1627 19BE                          i2l1477 186A  
                        i2l1485 1878                          i2l1469 1856                          i2l1645 1C10  
                        i2l1821 12AE                          i2l1725 1078                          i2l1495 18A8  
                        i2l1479 186E                          i2l1487 1896                          i2l1647 1C26  
                        i2l1815 1294                          i2l1807 1254                          i2l1743 10DA  
                        i2l1735 10B2                          i2l1831 12F0                          i2l1593 1B48  
                        i2l1585 1B24                          i2l1577 1AD8                          i2l1817 12A4  
                        i2l1809 1264                          i2l1753 1116                          i2l1595 1B58  
                        i2l1827 12CE                          i2l1771 1180                          i2l1763 114A  
                        i2l1747 10F8                          i2l1739 10C6                          i2l1589 1B34  
                        i2l1781 11B6                          i2l1773 1190                          i2l1749 1108  
                        i2l1829 12D8                          i2l1599 1B6C                          i2l1783 11BC  
                        i2l1759 1128                          i2l1793 11F8                          i2l1785 11CC  
                        i2l1795 1202                          i2l1779 11AC                          i2l1797 1208  
                        _INTCON 000FF2                          _OSCCON 000FD3                       ??_InitApp 0059  
         ??_ConfigureOscillator 0058                     merge@merged 0045                  __CFG_XINST$OFF 000000  
            sensorComputation@i 0097              sensorComputation@j 0095                __end_of_high_isr 1332  
                        ___wmul 1C2E                       ??___awdiv 0058                  __CFG_STVREN$ON 000000  
                        _errorD 0023                          _errorP 0025                          delay@x 0082  
                        clear_0 1C6C                          clear_1 1C78                ___awdiv@quotient 0086  
                        _rotate 1BF2              __size_of_Reversing 001C                    __pdataCOMRAM 0059  
                     ??_forward 0045                    __mediumconst 0000                       ??_low_isr 0032  
                _ReverseCounter 0015                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                      __accesstop 0080         __end_of__initialization 1C90  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                    ?_KController 0032  
                __pcstackCOMRAM 0032                   __end_of_delay 1BB6                      _TurnedLeft 001D  
               moveMouse@action 0043                   __end_of_merge 1D9C            KController@correctTo 0047  
    __end_of_motorCounterUpdate 190C                  _ignoreControll 0059                  _ForwardCounter 000D  
                       ??_delay 0058                         ??_merge 0044                      __pbssBANK0 00F4  
            _AlgorithmSelection 1D1C                    _LTurnCounter 000F               __end_of_Reversing 1D72  
             ??_FrontController 0045                      _delay_time 0021               _MotorDelayCounter 0011  
           ?_AlgorithmSelection 0032            setCorrection@sideAvg 008C                         ?___wmul 0080  
            __size_of_moveMouse 0008                         ?_rotate 0032                         _INTCON2 000FF1  
                       _OSCTUNE 000F9B            ??_AlgorithmSelection 0058                       ?_high_isr 0032  
                       _Deadend 000B                   _LMotorCounter 002D                         _InitApp 1BB6  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 19E2  
               __size_of___wmul 0038                    __psmallconst 1000                         __pcinit 1C66  
                       __ramtop 1000                         __ptext0 1CFA                         __ptext1 1716  
                       __ptext2 15F6                         __ptext3 1332                         __ptext4 1C2E  
                       __ptext5 19E2                         __ptext6 1C9A                         __ptext7 1CCA  
                       __ptext8 1BB6                         __ptext9 1B74                 __size_of_rotate 003C  
                  __size_of_ABS 001A                    __size_of_MAX 0030                    __size_of_MIN 0030  
                       _forward 1D3A                         delay@ms 0080                         _low_isr 0018  
                 ?_sensorUpdate 0032                      ??_high_isr 004A                  __pintcode_body 1006  
        __size_of_setCorrection 0102            end_of_initialization 1C90                _sensorCorrection 00F4  
             __end_of_moveMouse 1DAE                   __Lmediumconst 0000                         int_func 1006  
                    _justTurned 0030            __size_of_KController 00C2                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                       _TRISBbits 000F93  
                     _TRISEbits 000F96                  ??_sensorUpdate 0099     __end_of_ConfigureOscillator 1DA6  
               _ignoreFControll 0027                      _totalError 002B                    _RTurnCounter 0013  
sensorComputation@getCorrection 008C                   _setCorrection 1716                  __end_of___wmul 1C66  
                 __pidataCOMRAM 1DAE                     _TurnedRight 001F                  __end_of_rotate 1C2E  
           start_initialization 1C66                     __end_of_ABS 1D8C                     __end_of_MAX 1CFA  
                   __end_of_MIN 1CCA                 _FrontController 190C              _motorCounterUpdate 1818  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0043                      merge@right 0043  
                     _Reversing 1D56                  ?_setCorrection 0032                        ??___wmul 0058  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 0045                  _sensorLocation 1001  
          ??_motorCounterUpdate 0044                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 001B       sensorUpdate@getCorrection 00EF          sensorUpdate@sensorTemp 009F  
             __size_of_high_isr 132A                        ?_InitApp 0032               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 0032                       _algorithm 002F                       __pintcode 0008  
         setCorrection@frontAvg 008A          motorCounterUpdate@side 0044                        ?___awdiv 0080  
          __end_of_sensorUpdate 1716          __end_of_sensorLocation 1005                     __pintcodelo 0018  
       __end_of_FrontController 19E2                     __smallconst 1000                        ?_forward 0032  
                      ?_low_isr 0032                       _oldErrorP 0029                  __size_of_delay 0042  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0084  
                     _moveMouse 1DA6                        i2u110_40 19A6                        i2u112_40 19CE  
                      i2u105_40 1B44                        i2u121_40 1048                        i2u130_40 10E8  
                      i2u107_40 1B68                        i2u123_40 1062                        i2u108_40 1946  
                      i2u124_40 1072                        i2u141_40 11DC                        i2u125_40 1086  
                      i2u150_40 1284                        i2u144_40 1218                        i2u128_40 10C0  
                      i2u145_40 1228                        i2u129_40 10D4                 ??_setCorrection 0088  
                      i2u149_40 1274                __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2  
             ___wmul@multiplier 0080                   _RMotorCounter 002E                      rotate@side 0045  
                 ??_KController 0045                      ?_moveMouse 0032                __size_of_InitApp 003C  
                      __Hrparam 0000                       merge@left 0044            sensorComputation@max 008F  
                      __Lrparam 0000            sensorComputation@min 0091            sensorComputation@sum 0093  
                   ??_Reversing 0045              __CFG_BOREN$SBORDIS 000000                __size_of___awdiv 00D0  
                      _TurnLeft 0019                ?_FrontController 0032                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1D1C                        __ptext11 1D9C  
                      __ptext20 190C                        __ptext21 1818                        __ptext22 1D72  
                      __ptext14 1BF2                        __ptext15 1DA6                        __ptext16 1D8C  
                      __ptext17 1D3A                        __ptext18 1D56                        __ptext19 1AB2  
                      _high_isr 0008                   __size_of_main 0022                   _RotateCounter 0017  
         __size_of_sensorUpdate 0120    __size_of_ConfigureOscillator 000A             __end_of_KController 1B74  
             _sensorComputation 1332                      _INTCONbits 000FF2              ?_sensorComputation 008A  
                 sensorUpdate@i 00F0                   sensorUpdate@j 00F2                    _sensorUpdate 15F6  
                      intlevel1 0000                        intlevel2 0000             ??_sensorComputation 008D  
                   ??_moveMouse 0043                 KController@diff 0048       __end_of_sensorComputation 15F6  
                   _sensorValue 0001     __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0043  
                   _KController 1AB2        FrontController@correctTo 0047  
