

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed May 06 00:39:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataCOMRAM
    42  0020A6                     __pidataCOMRAM:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _MOTORDELAYMAX
    46  0020A6  02                 	db	2
    47                           
    48                           ;initializer for _cState
    49  0020A7  02                 	db	2
    50                           
    51                           ;initializer for _ignoreControll
    52  0020A8  0A                 	db	10
    53                           
    54                           ;initializer for _pState
    55  0020A9  02                 	db	2
    56                           
    57                           	psect	smallconst
    58  001000                     __psmallconst:
    59                           	opt stack 0
    60  001000  00                 	db	0
    61  001001                     _sensorLocation:
    62                           	opt stack 0
    63  001001  1B                 	db	27
    64  001002  2B                 	db	43
    65  001003  1F                 	db	31
    66  001004  33                 	db	51
    67  001005                     __end_of_sensorLocation:
    68                           	opt stack 0
    69  0000                     _ADCON0	set	4034
    70  0000                     _ADCON0bits	set	4034
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON2	set	4032
    73  0000                     _ADRESH	set	4036
    74  0000                     _ADRESL	set	4035
    75  0000                     _INTCON	set	4082
    76  0000                     _INTCON2	set	4081
    77  0000                     _INTCONbits	set	4082
    78  0000                     _LATC	set	3979
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCTUNE	set	3995
    81  0000                     _T0CON	set	4053
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TRISC	set	3988
    84  0000                     _TRISEbits	set	3990
    85                           
    86                           ; #config settings
    87  001005  00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           	psect	cinit
    90  001E40                     __pcinit:
    91                           	opt stack 0
    92  001E40                     start_initialization:
    93                           	opt stack 0
    94  001E40                     __initialization:
    95                           	opt stack 0
    96                           
    97                           ; Clear objects allocated to BANK0 (8 bytes)
    98  001E40  EE00  F0F7         	lfsr	0,__pbssBANK0
    99  001E44  0E08               	movlw	8
   100  001E46                     clear_0:
   101  001E46  6AEE               	clrf	postinc0,c
   102  001E48  06E8               	decf	wreg,f,c
   103  001E4A  E1FD               	bnz	clear_0
   104                           
   105                           ; Clear objects allocated to COMRAM (45 bytes)
   106  001E4C  EE00  F001         	lfsr	0,__pbssCOMRAM
   107  001E50  0E2D               	movlw	45
   108  001E52                     clear_1:
   109  001E52  6AEE               	clrf	postinc0,c
   110  001E54  06E8               	decf	wreg,f,c
   111  001E56  E1FD               	bnz	clear_1
   112                           
   113                           ; Initialize objects allocated to COMRAM (4 bytes)
   114                           ; load TBLPTR registers with __pidataCOMRAM
   115  001E58  0EA6               	movlw	low __pidataCOMRAM
   116  001E5A  6EF6               	movwf	tblptrl,c
   117  001E5C  0E20               	movlw	high __pidataCOMRAM
   118  001E5E  6EF7               	movwf	tblptrh,c
   119  001E60  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   120  001E62  6EF8               	movwf	tblptru,c
   121  001E64  EE00  F058         	lfsr	0,__pdataCOMRAM
   122  001E68  EE10 F004          	lfsr	1,4
   123  001E6C                     copy_data0:
   124  001E6C  0009               	tblrd		*+
   125  001E6E  CFF5 FFEE          	movff	tablat,postinc0
   126  001E72  50E5               	movf	postdec1,w,c
   127  001E74  50E1               	movf	fsr1l,w,c
   128  001E76  E1FA               	bnz	copy_data0
   129  001E78                     end_of_initialization:
   130                           	opt stack 0
   131  001E78                     __end_of__initialization:
   132                           	opt stack 0
   133  001E78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   134  001E7A  6EF8               	movwf	tblptru,c
   135  001E7C  0100               	movlb	0
   136  001E7E  EFE7  F00F         	goto	_main	;jump to C main() function
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           wreg	equ	0xFE8
   143                           postdec1	equ	0xFE5
   144                           fsr1l	equ	0xFE1
   145                           
   146                           	psect	bssCOMRAM
   147  000001                     __pbssCOMRAM:
   148                           	opt stack 0
   149  000001                     _sensorValue:
   150                           	opt stack 0
   151  000001                     	ds	8
   152  000009                     _Deadend:
   153                           	opt stack 0
   154  000009                     	ds	2
   155  00000B                     _ForwardCounter:
   156                           	opt stack 0
   157  00000B                     	ds	2
   158  00000D                     _LTurnCounter:
   159                           	opt stack 0
   160  00000D                     	ds	2
   161  00000F                     _MotorDelayCounter:
   162                           	opt stack 0
   163  00000F                     	ds	2
   164  000011                     _RTurnCounter:
   165                           	opt stack 0
   166  000011                     	ds	2
   167  000013                     _ReverseCounter:
   168                           	opt stack 0
   169  000013                     	ds	2
   170  000015                     _RotateCounter:
   171                           	opt stack 0
   172  000015                     	ds	2
   173  000017                     _TurnLeft:
   174                           	opt stack 0
   175  000017                     	ds	2
   176  000019                     _TurnRight:
   177                           	opt stack 0
   178  000019                     	ds	2
   179  00001B                     _TurnedLeft:
   180                           	opt stack 0
   181  00001B                     	ds	2
   182  00001D                     _TurnedRight:
   183                           	opt stack 0
   184  00001D                     	ds	2
   185  00001F                     _controlToLeft:
   186                           	opt stack 0
   187  00001F                     	ds	2
   188  000021                     _controlToRight:
   189                           	opt stack 0
   190  000021                     	ds	2
   191  000023                     _delay_time:
   192                           	opt stack 0
   193  000023                     	ds	2
   194  000025                     _oldErrorP:
   195                           	opt stack 0
   196  000025                     	ds	2
   197  000027                     _ChangeRequired:
   198                           	opt stack 0
   199  000027                     	ds	1
   200  000028                     _LMotorCounter:
   201                           	opt stack 0
   202  000028                     	ds	1
   203  000029                     _RMotorCounter:
   204                           	opt stack 0
   205  000029                     	ds	1
   206  00002A                     _algorithm:
   207                           	opt stack 0
   208  00002A                     	ds	1
   209  00002B                     _deadEnd:
   210                           	opt stack 0
   211  00002B                     	ds	1
   212  00002C                     _justTurned:
   213                           	opt stack 0
   214  00002C                     	ds	1
   215  00002D                     _rotatingSide:
   216                           	opt stack 0
   217  00002D                     	ds	1
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           postdec1	equ	0xFE5
   225                           fsr1l	equ	0xFE1
   226                           
   227                           	psect	dataCOMRAM
   228  000058                     __pdataCOMRAM:
   229                           	opt stack 0
   230  000058                     _MOTORDELAYMAX:
   231                           	opt stack 0
   232  000058                     	ds	1
   233  000059                     _cState:
   234                           	opt stack 0
   235  000059                     	ds	1
   236  00005A                     _ignoreControll:
   237                           	opt stack 0
   238  00005A                     	ds	1
   239  00005B                     _pState:
   240                           	opt stack 0
   241  00005B                     	ds	1
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           postdec1	equ	0xFE5
   249                           fsr1l	equ	0xFE1
   250                           
   251                           	psect	bssBANK0
   252  0000F7                     __pbssBANK0:
   253                           	opt stack 0
   254  0000F7                     _sensorCorrection:
   255                           	opt stack 0
   256  0000F7                     	ds	8
   257                           tblptru	equ	0xFF8
   258                           tblptrh	equ	0xFF7
   259                           tblptrl	equ	0xFF6
   260                           tablat	equ	0xFF5
   261                           postinc0	equ	0xFEE
   262                           wreg	equ	0xFE8
   263                           postdec1	equ	0xFE5
   264                           fsr1l	equ	0xFE1
   265                           
   266                           	psect	cstackBANK0
   267  000080                     __pcstackBANK0:
   268                           	opt stack 0
   269  000080                     ?___wmul:
   270                           	opt stack 0
   271  000080                     ?___awdiv:
   272                           	opt stack 0
   273  000080                     delay@ms:
   274                           	opt stack 0
   275  000080                     ___wmul@multiplier:
   276                           	opt stack 0
   277  000080                     ___awdiv@dividend:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x0
   281  000080                     	ds	2
   282  000082                     ??_delay:
   283  000082                     ___wmul@multiplicand:
   284                           	opt stack 0
   285  000082                     ___awdiv@divisor:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x2
   289  000082                     	ds	1
   290  000083                     delay@x:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x3
   294  000083                     	ds	1
   295  000084                     ___awdiv@counter:
   296                           	opt stack 0
   297  000084                     ___wmul@product:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x4
   301  000084                     	ds	1
   302  000085                     ___awdiv@sign:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x5
   306  000085                     	ds	1
   307  000086                     ?_MIN:
   308                           	opt stack 0
   309  000086                     ?_MAX:
   310                           	opt stack 0
   311  000086                     MIN@a:
   312                           	opt stack 0
   313  000086                     MAX@a:
   314                           	opt stack 0
   315  000086                     ___awdiv@quotient:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x6
   319  000086                     	ds	2
   320  000088                     ??_setCorrection:
   321  000088                     MIN@b:
   322                           	opt stack 0
   323  000088                     MAX@b:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x8
   327  000088                     	ds	2
   328  00008A                     ??_MIN:
   329  00008A                     ??_MAX:
   330  00008A                     setCorrection@sideAvg:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0xA
   334  00008A                     	ds	1
   335  00008B                     sensorComputation@sensorTemp:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0xB
   339  00008B                     	ds	1
   340  00008C                     setCorrection@frontAvg:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0xC
   344  00008C                     	ds	1
   345  00008D                     sensorComputation@getCorrection:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0xD
   349  00008D                     	ds	1
   350  00008E                     ??_sensorComputation:
   351                           
   352                           ; 0 bytes @ 0xE
   353  00008E                     	ds	4
   354  000092                     sensorComputation@max:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x12
   358  000092                     	ds	2
   359  000094                     sensorComputation@min:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x14
   363  000094                     	ds	2
   364  000096                     sensorComputation@sum:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x16
   368  000096                     	ds	2
   369  000098                     sensorComputation@j:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x18
   373  000098                     	ds	2
   374  00009A                     sensorComputation@i:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00009A                     	ds	2
   379  00009C                     ??_sensorUpdate:
   380                           
   381                           ; 0 bytes @ 0x1C
   382  00009C                     	ds	6
   383  0000A2                     sensorUpdate@sensorTemp:
   384                           	opt stack 0
   385                           
   386                           ; 80 bytes @ 0x22
   387  0000A2                     	ds	80
   388  0000F2                     sensorUpdate@getCorrection:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x72
   392  0000F2                     	ds	1
   393  0000F3                     sensorUpdate@i:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x73
   397  0000F3                     	ds	2
   398  0000F5                     sensorUpdate@j:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x75
   402  0000F5                     	ds	2
   403  0000F7                     tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           ; 0 bytes @ 0x77
   413                           
   414                           	psect	cstackCOMRAM
   415  00002E                     __pcstackCOMRAM:
   416                           	opt stack 0
   417  00002E                     ??_low_isr:
   418  00002E                     
   419                           ; 0 bytes @ 0x0
   420  00002E                     	ds	17
   421  00003F                     motorCounterUpdate@reverse:
   422                           	opt stack 0
   423  00003F                     merge@right:
   424                           	opt stack 0
   425  00003F                     moveMouse@action:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x11
   429  00003F                     	ds	1
   430  000040                     motorCounterUpdate@side:
   431                           	opt stack 0
   432  000040                     merge@left:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x12
   436  000040                     	ds	1
   437  000041                     merge@merged:
   438                           	opt stack 0
   439  000041                     rotate@side:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x13
   443  000041                     	ds	1
   444  000042                     initialRotation@isDeadEnd:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x14
   448  000042                     	ds	2
   449  000044                     initialRotation@side:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x16
   453  000044                     	ds	1
   454  000045                     ??_high_isr:
   455                           
   456                           ; 0 bytes @ 0x17
   457  000045                     	ds	17
   458  000056                     high_isr@a:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x28
   462  000056                     	ds	2
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1l	equ	0xFE1
   471                           
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 41 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;		None
   482 ;; Return value:  Size  Location     Type
   483 ;;		None               void
   484 ;; Registers used:
   485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;Total ram usage:        0 bytes
   496 ;; Hardware stack levels required when called:    8
   497 ;; This function calls:
   498 ;;		_ConfigureOscillator
   499 ;;		_InitApp
   500 ;;		_sensorUpdate
   501 ;;		_setCorrection
   502 ;; This function is called by:
   503 ;;		Startup code after reset
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text0
   508  001FCE                     __ptext0:
   509                           	opt stack 0
   510  001FCE                     _main:
   511                           	opt stack 23
   512                           
   513                           ;main.c: 44: ConfigureOscillator();
   514                           
   515                           ;incstack = 0
   516  001FCE  EC4A  F010         	call	_ConfigureOscillator	;wreg free
   517                           
   518                           ;main.c: 47: InitApp();
   519  001FD2  EC41  F00F         	call	_InitApp	;wreg free
   520                           
   521                           ;main.c: 48: sensorUpdate(1);
   522  001FD6  0E01               	movlw	1
   523  001FD8  ECE0  F00C         	call	_sensorUpdate
   524                           
   525                           ;main.c: 49: sensorUpdate(1);
   526  001FDC  0E01               	movlw	1
   527  001FDE  ECE0  F00C         	call	_sensorUpdate
   528                           
   529                           ;main.c: 50: sensorUpdate(1);
   530  001FE2  0E01               	movlw	1
   531  001FE4  ECE0  F00C         	call	_sensorUpdate
   532                           
   533                           ;main.c: 51: setCorrection();
   534  001FE8  EC70  F00D         	call	_setCorrection	;wreg free
   535                           
   536                           ;main.c: 52: INTCONbits.GIE = 1;
   537  001FEC  8EF2               	bsf	intcon,7,c	;volatile
   538  001FEE  D000               	goto	l2265
   539  001FF0                     l2265:
   540                           
   541                           ;main.c: 54: {
   542                           ;main.c: 55: sensorUpdate(0);
   543  001FF0  0E00               	movlw	0
   544  001FF2  ECE0  F00C         	call	_sensorUpdate
   545  001FF6  D7FC               	goto	l2265
   546  001FF8  EF51  F000         	goto	start
   547  001FFC                     __end_of_main:
   548                           	opt stack 0
   549                           tblptru	equ	0xFF8
   550                           tblptrh	equ	0xFF7
   551                           tblptrl	equ	0xFF6
   552                           tablat	equ	0xFF5
   553                           intcon	equ	0xFF2
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1l	equ	0xFE1
   558                           
   559 ;; *************** function _setCorrection *****************
   560 ;; Defined at:
   561 ;;		line 125 in file "user.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  frontAvg        2   12[BANK0 ] int 
   566 ;;  sideAvg         2   10[BANK0 ] int 
   567 ;; Return value:  Size  Location     Type
   568 ;;		None               void
   569 ;; Registers used:
   570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;Total ram usage:        6 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    6
   583 ;; This function calls:
   584 ;;		___awdiv
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text1
   591  001AE0                     __ptext1:
   592                           	opt stack 0
   593  001AE0                     _setCorrection:
   594                           	opt stack 24
   595                           
   596                           ;user.c: 127: int sideAvg,frontAvg;
   597                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   598                           
   599                           ;incstack = 0
   600  001AE0  5001               	movf	_sensorValue,w,c
   601  001AE2  2403               	addwf	_sensorValue+2,w,c
   602  001AE4  0100               	movlb	0	; () banked
   603  001AE6  6F80               	movwf	___awdiv@dividend& (0+255),b
   604  001AE8  5002               	movf	_sensorValue+1,w,c
   605  001AEA  2004               	addwfc	_sensorValue+3,w,c
   606  001AEC  0100               	movlb	0	; () banked
   607  001AEE  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   608  001AF0  0E00               	movlw	0
   609  001AF2  0100               	movlb	0	; () banked
   610  001AF4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   611  001AF6  0E02               	movlw	2
   612  001AF8  6F82               	movwf	___awdiv@divisor& (0+255),b
   613  001AFA  EC6B  F00E         	call	___awdiv	;wreg free
   614  001AFE  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   615  001B02  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   616                           
   617                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   618  001B06  5007               	movf	_sensorValue+6,w,c
   619  001B08  2405               	addwf	_sensorValue+4,w,c
   620  001B0A  0100               	movlb	0	; () banked
   621  001B0C  6F80               	movwf	___awdiv@dividend& (0+255),b
   622  001B0E  5008               	movf	_sensorValue+7,w,c
   623  001B10  2006               	addwfc	_sensorValue+5,w,c
   624  001B12  0100               	movlb	0	; () banked
   625  001B14  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   626  001B16  0E00               	movlw	0
   627  001B18  0100               	movlb	0	; () banked
   628  001B1A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   629  001B1C  0E02               	movlw	2
   630  001B1E  6F82               	movwf	___awdiv@divisor& (0+255),b
   631  001B20  EC6B  F00E         	call	___awdiv	;wreg free
   632  001B24  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   633  001B28  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   634                           
   635                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   636  001B2C  C001  F088         	movff	_sensorValue,??_setCorrection
   637  001B30  C002  F089         	movff	_sensorValue+1,??_setCorrection+1
   638  001B34  0100               	movlb	0	; () banked
   639  001B36  1F88               	comf	??_setCorrection& (0+255),f,b
   640  001B38  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   641  001B3A  4B88               	infsnz	??_setCorrection& (0+255),f,b
   642  001B3C  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   643  001B3E  0100               	movlb	0	; () banked
   644  001B40  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   645  001B42  0100               	movlb	0	; () banked
   646  001B44  2588               	addwf	??_setCorrection& (0+255),w,b
   647  001B46  0100               	movlb	0	; () banked
   648  001B48  6FF7               	movwf	_sensorCorrection& (0+255),b
   649  001B4A  0100               	movlb	0	; () banked
   650  001B4C  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   651  001B4E  0100               	movlb	0	; () banked
   652  001B50  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   653  001B52  0100               	movlb	0	; () banked
   654  001B54  6FF8               	movwf	(_sensorCorrection+1)& (0+255),b
   655                           
   656                           ; BSR set to: 0
   657                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   658  001B56  EE20  F003         	lfsr	2,_sensorValue+2
   659  001B5A  CFDE F088          	movff	postinc2,??_setCorrection
   660  001B5E  CFDD F089          	movff	postdec2,??_setCorrection+1
   661  001B62  0100               	movlb	0	; () banked
   662  001B64  1F88               	comf	??_setCorrection& (0+255),f,b
   663  001B66  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   664  001B68  4B88               	infsnz	??_setCorrection& (0+255),f,b
   665  001B6A  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   666  001B6C  0100               	movlb	0	; () banked
   667  001B6E  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   668  001B70  0100               	movlb	0	; () banked
   669  001B72  2588               	addwf	??_setCorrection& (0+255),w,b
   670  001B74  0100               	movlb	0	; () banked
   671  001B76  6FF9               	movwf	(_sensorCorrection+2)& (0+255),b
   672  001B78  0100               	movlb	0	; () banked
   673  001B7A  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   674  001B7C  0100               	movlb	0	; () banked
   675  001B7E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   676  001B80  0100               	movlb	0	; () banked
   677  001B82  6FFA               	movwf	(_sensorCorrection+3)& (0+255),b
   678                           
   679                           ; BSR set to: 0
   680                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   681  001B84  EE20  F005         	lfsr	2,_sensorValue+4
   682  001B88  CFDE F088          	movff	postinc2,??_setCorrection
   683  001B8C  CFDD F089          	movff	postdec2,??_setCorrection+1
   684  001B90  0100               	movlb	0	; () banked
   685  001B92  1F88               	comf	??_setCorrection& (0+255),f,b
   686  001B94  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   687  001B96  4B88               	infsnz	??_setCorrection& (0+255),f,b
   688  001B98  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   689  001B9A  0100               	movlb	0	; () banked
   690  001B9C  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   691  001B9E  0100               	movlb	0	; () banked
   692  001BA0  2588               	addwf	??_setCorrection& (0+255),w,b
   693  001BA2  0100               	movlb	0	; () banked
   694  001BA4  6FFB               	movwf	(_sensorCorrection+4)& (0+255),b
   695  001BA6  0100               	movlb	0	; () banked
   696  001BA8  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   697  001BAA  0100               	movlb	0	; () banked
   698  001BAC  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   699  001BAE  0100               	movlb	0	; () banked
   700  001BB0  6FFC               	movwf	(_sensorCorrection+5)& (0+255),b
   701                           
   702                           ; BSR set to: 0
   703                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   704  001BB2  EE20  F007         	lfsr	2,_sensorValue+6
   705  001BB6  CFDE F088          	movff	postinc2,??_setCorrection
   706  001BBA  CFDD F089          	movff	postdec2,??_setCorrection+1
   707  001BBE  0100               	movlb	0	; () banked
   708  001BC0  1F88               	comf	??_setCorrection& (0+255),f,b
   709  001BC2  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   710  001BC4  4B88               	infsnz	??_setCorrection& (0+255),f,b
   711  001BC6  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   712  001BC8  0100               	movlb	0	; () banked
   713  001BCA  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   714  001BCC  0100               	movlb	0	; () banked
   715  001BCE  2588               	addwf	??_setCorrection& (0+255),w,b
   716  001BD0  0100               	movlb	0	; () banked
   717  001BD2  6FFD               	movwf	(_sensorCorrection+6)& (0+255),b
   718  001BD4  0100               	movlb	0	; () banked
   719  001BD6  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   720  001BD8  0100               	movlb	0	; () banked
   721  001BDA  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   722  001BDC  0100               	movlb	0	; () banked
   723  001BDE  6FFE               	movwf	(_sensorCorrection+7)& (0+255),b
   724                           
   725                           ; BSR set to: 0
   726  001BE0  0012               	return		;funcret
   727  001BE2                     __end_of_setCorrection:
   728                           	opt stack 0
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           intcon	equ	0xFF2
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           postinc2	equ	0xFDE
   739                           postdec2	equ	0xFDD
   740                           
   741 ;; *************** function _sensorUpdate *****************
   742 ;; Defined at:
   743 ;;		line 168 in file "user.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  getCorrectio    1    wreg     unsigned char 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;  getCorrectio    1  114[BANK0 ] unsigned char 
   748 ;;  sensorTemp     80   34[BANK0 ] int [10][4]
   749 ;;  j               2  117[BANK0 ] int 
   750 ;;  i               2  115[BANK0 ] int 
   751 ;; Return value:  Size  Location     Type
   752 ;;		None               void
   753 ;; Registers used:
   754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;Total ram usage:       91 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    7
   767 ;; This function calls:
   768 ;;		___wmul
   769 ;;		_sensorComputation
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text2
   776  0019C0                     __ptext2:
   777                           	opt stack 0
   778  0019C0                     _sensorUpdate:
   779                           	opt stack 23
   780                           
   781                           ; BSR set to: 0
   782                           ;incstack = 0
   783                           ;sensorUpdate@getCorrection stored from wreg
   784  0019C0  0100               	movlb	0	; () banked
   785  0019C2  6FF2               	movwf	sensorUpdate@getCorrection& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 170: int i,j;
   789                           ;user.c: 171: int sensorTemp[4][10];
   790                           ;user.c: 174: for(i = 0; i < 10; i++)
   791  0019C4  0E00               	movlw	0
   792  0019C6  0100               	movlb	0	; () banked
   793  0019C8  6FF4               	movwf	(sensorUpdate@i+1)& (0+255),b
   794  0019CA  0E00               	movlw	0
   795  0019CC  6FF3               	movwf	sensorUpdate@i& (0+255),b
   796  0019CE                     l2215:
   797                           
   798                           ; BSR set to: 0
   799  0019CE  0100               	movlb	0	; () banked
   800  0019D0  BFF4               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   801  0019D2  D00A               	goto	l2219
   802  0019D4  0100               	movlb	0	; () banked
   803  0019D6  51F4               	movf	(sensorUpdate@i+1)& (0+255),w,b
   804  0019D8  E178               	bnz	l2239
   805  0019DA  0E0A               	movlw	10
   806  0019DC  0100               	movlb	0	; () banked
   807  0019DE  5DF3               	subwf	sensorUpdate@i& (0+255),w,b
   808  0019E0  B0D8               	btfsc	status,0,c
   809  0019E2  D073               	goto	l2239
   810  0019E4  D001               	goto	l2219
   811                           
   812                           ; BSR set to: 0
   813  0019E6  D071               	goto	l2239
   814  0019E8                     l2219:
   815                           
   816                           ; BSR set to: 0
   817                           ;user.c: 175: {
   818                           ;user.c: 176: for(j = 0 ; j < 4 ; j++)
   819  0019E8  0E00               	movlw	0
   820  0019EA  0100               	movlb	0	; () banked
   821  0019EC  6FF6               	movwf	(sensorUpdate@j+1)& (0+255),b
   822  0019EE  0E00               	movlw	0
   823  0019F0  6FF5               	movwf	sensorUpdate@j& (0+255),b
   824  0019F2                     l2221:
   825                           
   826                           ; BSR set to: 0
   827  0019F2  0100               	movlb	0	; () banked
   828  0019F4  BFF6               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   829  0019F6  D00A               	goto	l2225
   830  0019F8  0100               	movlb	0	; () banked
   831  0019FA  51F6               	movf	(sensorUpdate@j+1)& (0+255),w,b
   832  0019FC  E161               	bnz	l2235
   833  0019FE  0E04               	movlw	4
   834  001A00  0100               	movlb	0	; () banked
   835  001A02  5DF5               	subwf	sensorUpdate@j& (0+255),w,b
   836  001A04  B0D8               	btfsc	status,0,c
   837  001A06  D05C               	goto	l2235
   838  001A08  D001               	goto	l2225
   839                           
   840                           ; BSR set to: 0
   841  001A0A  D05A               	goto	l2235
   842  001A0C                     l2225:
   843                           
   844                           ; BSR set to: 0
   845                           ;user.c: 177: {
   846                           ;user.c: 178: ADCON0 = sensorLocation[j];
   847  001A0C  0E01               	movlw	low _sensorLocation
   848  001A0E  0100               	movlb	0	; () banked
   849  001A10  25F5               	addwf	sensorUpdate@j& (0+255),w,b
   850  001A12  6EF6               	movwf	tblptrl,c
   851  001A14  0E10               	movlw	high _sensorLocation
   852  001A16  21F6               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   853  001A18  6EF7               	movwf	tblptrh,c
   854  001A1A                     	if	0	;There are less than 3 active tblptr bytes
   855  001A1A                     	endif
   856  001A1A  0008               	tblrd		*
   857  001A1C  CFF5 FFC2          	movff	tablat,4034	;volatile
   858                           
   859                           ; BSR set to: 0
   860                           ;user.c: 180: ADCON0bits.GO_DONE = 1;
   861  001A20  82C2               	bsf	4034,1,c	;volatile
   862                           
   863                           ;user.c: 181: while(ADCON0bits.GO_DONE != 0);
   864  001A22  D000               	goto	l378
   865  001A24                     l378:
   866                           
   867                           ; BSR set to: 0
   868  001A24  B2C2               	btfsc	4034,1,c	;volatile
   869  001A26  D7FE               	goto	l378
   870                           
   871                           ; BSR set to: 0
   872                           ;user.c: 182: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   873                           
   874                           ; BSR set to: 0
   875  001A28  CFC3 F09C          	movff	4035,??_sensorUpdate	;volatile
   876  001A2C  0E06               	movlw	6
   877  001A2E  0100               	movlb	0	; () banked
   878  001A30  6F9D               	movwf	(??_sensorUpdate+1)& (0+255),b
   879  001A32                     u2325:
   880  001A32  0100               	movlb	0	; () banked
   881  001A34  90D8               	bcf	status,0,c
   882  001A36  339C               	rrcf	??_sensorUpdate& (0+255),f,b
   883  001A38  0100               	movlb	0	; () banked
   884  001A3A  2F9D               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   885  001A3C  D7FA               	goto	u2325
   886  001A3E  0100               	movlb	0	; () banked
   887  001A40  519C               	movf	??_sensorUpdate& (0+255),w,b
   888  001A42  CFC4 F09E          	movff	4036,??_sensorUpdate+2	;volatile
   889  001A46  0100               	movlb	0	; () banked
   890  001A48  6B9F               	clrf	(??_sensorUpdate+3)& (0+255),b
   891  001A4A  0100               	movlb	0	; () banked
   892  001A4C  90D8               	bcf	status,0,c
   893  001A4E  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   894  001A50  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   895  001A52  0100               	movlb	0	; () banked
   896  001A54  90D8               	bcf	status,0,c
   897  001A56  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   898  001A58  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   899  001A5A  0100               	movlb	0	; () banked
   900  001A5C  279E               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   901  001A5E  0E00               	movlw	0
   902  001A60  239F               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   903  001A62  C0F5  F080         	movff	sensorUpdate@j,___wmul@multiplier
   904  001A66  C0F6  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   905  001A6A  0E00               	movlw	0
   906  001A6C  0100               	movlb	0	; () banked
   907  001A6E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   908  001A70  0E14               	movlw	20
   909  001A72  6F82               	movwf	___wmul@multiplicand& (0+255),b
   910  001A74  EC7D  F00F         	call	___wmul	;wreg free
   911  001A78  0EA2               	movlw	low sensorUpdate@sensorTemp
   912  001A7A  0100               	movlb	0	; () banked
   913  001A7C  6FA0               	movwf	(??_sensorUpdate+4)& (0+255),b
   914  001A7E  0E00               	movlw	high sensorUpdate@sensorTemp
   915  001A80  0100               	movlb	0	; () banked
   916  001A82  6FA1               	movwf	(??_sensorUpdate+5)& (0+255),b
   917  001A84  0100               	movlb	0	; () banked
   918  001A86  5180               	movf	?___wmul& (0+255),w,b
   919  001A88  0100               	movlb	0	; () banked
   920  001A8A  27A0               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   921  001A8C  0100               	movlb	0	; () banked
   922  001A8E  5181               	movf	(?___wmul+1)& (0+255),w,b
   923  001A90  0100               	movlb	0	; () banked
   924  001A92  23A1               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   925  001A94  90D8               	bcf	status,0,c
   926  001A96  0100               	movlb	0	; () banked
   927  001A98  35F3               	rlcf	sensorUpdate@i& (0+255),w,b
   928  001A9A  6ED9               	movwf	fsr2l,c
   929  001A9C  0100               	movlb	0	; () banked
   930  001A9E  35F4               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   931  001AA0  6EDA               	movwf	fsr2h,c
   932  001AA2  0100               	movlb	0	; () banked
   933  001AA4  51A0               	movf	(??_sensorUpdate+4)& (0+255),w,b
   934  001AA6  26D9               	addwf	fsr2l,f,c
   935  001AA8  0100               	movlb	0	; () banked
   936  001AAA  51A1               	movf	(??_sensorUpdate+5)& (0+255),w,b
   937  001AAC  22DA               	addwfc	fsr2h,f,c
   938  001AAE  C09E  FFDE         	movff	??_sensorUpdate+2,postinc2
   939  001AB2  C09F  FFDD         	movff	??_sensorUpdate+3,postdec2
   940                           
   941                           ; BSR set to: 0
   942  001AB6  0100               	movlb	0	; () banked
   943  001AB8  4BF5               	infsnz	sensorUpdate@j& (0+255),f,b
   944  001ABA  2BF6               	incf	(sensorUpdate@j+1)& (0+255),f,b
   945  001ABC  D79A               	goto	l2221
   946                           
   947                           ; BSR set to: 0
   948  001ABE  D000               	goto	l2235
   949  001AC0                     l2235:
   950                           
   951                           ; BSR set to: 0
   952  001AC0  0100               	movlb	0	; () banked
   953  001AC2  4BF3               	infsnz	sensorUpdate@i& (0+255),f,b
   954  001AC4  2BF4               	incf	(sensorUpdate@i+1)& (0+255),f,b
   955  001AC6  D783               	goto	l2215
   956                           
   957                           ; BSR set to: 0
   958  001AC8  D000               	goto	l2239
   959  001ACA                     l2239:
   960                           
   961                           ; BSR set to: 0
   962                           ;user.c: 183: }
   963                           ;user.c: 184: }
   964                           ;user.c: 187: sensorComputation(sensorTemp,getCorrection);
   965  001ACA  0EA2               	movlw	low sensorUpdate@sensorTemp
   966  001ACC  0100               	movlb	0	; () banked
   967  001ACE  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   968  001AD0  0E00               	movlw	high sensorUpdate@sensorTemp
   969  001AD2  0100               	movlb	0	; () banked
   970  001AD4  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   971  001AD6  C0F2  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   972  001ADA  ECEE  F009         	call	_sensorComputation	;wreg free
   973  001ADE  0012               	return		;funcret
   974  001AE0                     __end_of_sensorUpdate:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           intcon	equ	0xFF2
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1l	equ	0xFE1
   985                           postinc2	equ	0xFDE
   986                           postdec2	equ	0xFDD
   987                           fsr2h	equ	0xFDA
   988                           fsr2l	equ	0xFD9
   989                           status	equ	0xFD8
   990                           
   991 ;; *************** function _sensorComputation *****************
   992 ;; Defined at:
   993 ;;		line 137 in file "user.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   996 ;;		 -> sensorUpdate@sensorTemp(80), 
   997 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  i               2   26[BANK0 ] int 
  1000 ;;  j               2   24[BANK0 ] int 
  1001 ;;  sum             2   22[BANK0 ] int 
  1002 ;;  min             2   20[BANK0 ] int 
  1003 ;;  max             2   18[BANK0 ] int 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;		None               void
  1006 ;; Registers used:
  1007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1016 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1017 ;;Total ram usage:       17 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    6
  1020 ;; This function calls:
  1021 ;;		_MAX
  1022 ;;		_MIN
  1023 ;;		___awdiv
  1024 ;;		___wmul
  1025 ;; This function is called by:
  1026 ;;		_sensorUpdate
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text3
  1031  0013DC                     __ptext3:
  1032                           	opt stack 0
  1033  0013DC                     _sensorComputation:
  1034                           	opt stack 23
  1035                           
  1036                           ;user.c: 139: int max,min,i,j,sum;
  1037                           ;user.c: 140: for(i = 0; i < 4 ; i++)
  1038                           
  1039                           ;incstack = 0
  1040  0013DC  0E00               	movlw	0
  1041  0013DE  0100               	movlb	0	; () banked
  1042  0013E0  6F9B               	movwf	(sensorComputation@i+1)& (0+255),b
  1043  0013E2  0E00               	movlw	0
  1044  0013E4  6F9A               	movwf	sensorComputation@i& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047  0013E6  0100               	movlb	0	; () banked
  1048  0013E8  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1049  0013EA  D00A               	goto	l2155
  1050  0013EC  0100               	movlb	0	; () banked
  1051  0013EE  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
  1052  0013F0  E106               	bnz	u2190
  1053  0013F2  0E04               	movlw	4
  1054  0013F4  0100               	movlb	0	; () banked
  1055  0013F6  5D9A               	subwf	sensorComputation@i& (0+255),w,b
  1056  0013F8  B0D8               	btfsc	status,0,c
  1057  0013FA  D1D3               	goto	l371
  1058  0013FC  D001               	goto	l2155
  1059  0013FE                     u2190:
  1060                           
  1061                           ; BSR set to: 0
  1062  0013FE  D1D1               	goto	l371
  1063  001400                     l2155:
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;user.c: 141: {
  1067                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1068  001400  0E00               	movlw	0
  1069  001402  0100               	movlb	0	; () banked
  1070  001404  6F99               	movwf	(sensorComputation@j+1)& (0+255),b
  1071  001406  0E00               	movlw	0
  1072  001408  6F98               	movwf	sensorComputation@j& (0+255),b
  1073                           
  1074                           ; BSR set to: 0
  1075  00140A  0100               	movlb	0	; () banked
  1076  00140C  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1077  00140E  D00A               	goto	l2161
  1078  001410  0100               	movlb	0	; () banked
  1079  001412  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1080  001414  E106               	bnz	u2200
  1081  001416  0E0A               	movlw	10
  1082  001418  0100               	movlb	0	; () banked
  1083  00141A  5D98               	subwf	sensorComputation@j& (0+255),w,b
  1084  00141C  B0D8               	btfsc	status,0,c
  1085  00141E  D0D3               	goto	l2171
  1086  001420  D001               	goto	l2161
  1087  001422                     u2200:
  1088                           
  1089                           ; BSR set to: 0
  1090  001422  D0D1               	goto	l2171
  1091  001424                     l2161:
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;user.c: 143: {
  1095                           ;user.c: 144: if(j == 0)
  1096  001424  0100               	movlb	0	; () banked
  1097  001426  5198               	movf	sensorComputation@j& (0+255),w,b
  1098  001428  0100               	movlb	0	; () banked
  1099  00142A  1199               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1100  00142C  A4D8               	btfss	status,2,c
  1101  00142E  D031               	goto	l2165
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;user.c: 145: {
  1105                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1106  001430  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1107  001434  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1108  001438  0E00               	movlw	0
  1109  00143A  0100               	movlb	0	; () banked
  1110  00143C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1111  00143E  0E14               	movlw	20
  1112  001440  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1113  001442  EC7D  F00F         	call	___wmul	;wreg free
  1114  001446  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1115  00144A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1116  00144E  0100               	movlb	0	; () banked
  1117  001450  5180               	movf	?___wmul& (0+255),w,b
  1118  001452  0100               	movlb	0	; () banked
  1119  001454  278E               	addwf	??_sensorComputation& (0+255),f,b
  1120  001456  0100               	movlb	0	; () banked
  1121  001458  5181               	movf	(?___wmul+1)& (0+255),w,b
  1122  00145A  0100               	movlb	0	; () banked
  1123  00145C  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1124  00145E  90D8               	bcf	status,0,c
  1125  001460  0100               	movlb	0	; () banked
  1126  001462  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1127  001464  6ED9               	movwf	fsr2l,c
  1128  001466  0100               	movlb	0	; () banked
  1129  001468  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1130  00146A  6EDA               	movwf	fsr2h,c
  1131  00146C  0100               	movlb	0	; () banked
  1132  00146E  518E               	movf	??_sensorComputation& (0+255),w,b
  1133  001470  26D9               	addwf	fsr2l,f,c
  1134  001472  0100               	movlb	0	; () banked
  1135  001474  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1136  001476  22DA               	addwfc	fsr2h,f,c
  1137  001478  CFDE F092          	movff	postinc2,sensorComputation@max
  1138  00147C  CFDD F093          	movff	postdec2,sensorComputation@max+1
  1139  001480  C092  F094         	movff	sensorComputation@max,sensorComputation@min
  1140  001484  C093  F095         	movff	sensorComputation@max+1,sensorComputation@min+1
  1141  001488  C094  F096         	movff	sensorComputation@min,sensorComputation@sum
  1142  00148C  C095  F097         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1143                           
  1144                           ;user.c: 147: continue;
  1145  001490  D08F               	goto	l2167
  1146  001492                     l2165:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;user.c: 148: }
  1150                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1151  001492  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1152  001496  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1153  00149A  0E00               	movlw	0
  1154  00149C  0100               	movlb	0	; () banked
  1155  00149E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1156  0014A0  0E14               	movlw	20
  1157  0014A2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1158  0014A4  EC7D  F00F         	call	___wmul	;wreg free
  1159  0014A8  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1160  0014AC  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1161  0014B0  0100               	movlb	0	; () banked
  1162  0014B2  5180               	movf	?___wmul& (0+255),w,b
  1163  0014B4  0100               	movlb	0	; () banked
  1164  0014B6  278E               	addwf	??_sensorComputation& (0+255),f,b
  1165  0014B8  0100               	movlb	0	; () banked
  1166  0014BA  5181               	movf	(?___wmul+1)& (0+255),w,b
  1167  0014BC  0100               	movlb	0	; () banked
  1168  0014BE  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1169  0014C0  90D8               	bcf	status,0,c
  1170  0014C2  0100               	movlb	0	; () banked
  1171  0014C4  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1172  0014C6  6ED9               	movwf	fsr2l,c
  1173  0014C8  0100               	movlb	0	; () banked
  1174  0014CA  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1175  0014CC  6EDA               	movwf	fsr2h,c
  1176  0014CE  0100               	movlb	0	; () banked
  1177  0014D0  518E               	movf	??_sensorComputation& (0+255),w,b
  1178  0014D2  26D9               	addwf	fsr2l,f,c
  1179  0014D4  0100               	movlb	0	; () banked
  1180  0014D6  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1181  0014D8  22DA               	addwfc	fsr2h,f,c
  1182  0014DA  CFDE F086          	movff	postinc2,MIN@a
  1183  0014DE  CFDD F087          	movff	postdec2,MIN@a+1
  1184  0014E2  C094  F088         	movff	sensorComputation@min,MIN@b
  1185  0014E6  C095  F089         	movff	sensorComputation@min+1,MIN@b+1
  1186  0014EA  EC99  F00F         	call	_MIN	;wreg free
  1187  0014EE  C086  F094         	movff	?_MIN,sensorComputation@min
  1188  0014F2  C087  F095         	movff	?_MIN+1,sensorComputation@min+1
  1189                           
  1190                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1191  0014F6  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1192  0014FA  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1193  0014FE  0E00               	movlw	0
  1194  001500  0100               	movlb	0	; () banked
  1195  001502  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1196  001504  0E14               	movlw	20
  1197  001506  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1198  001508  EC7D  F00F         	call	___wmul	;wreg free
  1199  00150C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1200  001510  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1201  001514  0100               	movlb	0	; () banked
  1202  001516  5180               	movf	?___wmul& (0+255),w,b
  1203  001518  0100               	movlb	0	; () banked
  1204  00151A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1205  00151C  0100               	movlb	0	; () banked
  1206  00151E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1207  001520  0100               	movlb	0	; () banked
  1208  001522  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1209  001524  90D8               	bcf	status,0,c
  1210  001526  0100               	movlb	0	; () banked
  1211  001528  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1212  00152A  6ED9               	movwf	fsr2l,c
  1213  00152C  0100               	movlb	0	; () banked
  1214  00152E  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1215  001530  6EDA               	movwf	fsr2h,c
  1216  001532  0100               	movlb	0	; () banked
  1217  001534  518E               	movf	??_sensorComputation& (0+255),w,b
  1218  001536  26D9               	addwf	fsr2l,f,c
  1219  001538  0100               	movlb	0	; () banked
  1220  00153A  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1221  00153C  22DA               	addwfc	fsr2h,f,c
  1222  00153E  CFDE F086          	movff	postinc2,MAX@a
  1223  001542  CFDD F087          	movff	postdec2,MAX@a+1
  1224  001546  C092  F088         	movff	sensorComputation@max,MAX@b
  1225  00154A  C093  F089         	movff	sensorComputation@max+1,MAX@b+1
  1226  00154E  ECB3  F00F         	call	_MAX	;wreg free
  1227  001552  C086  F092         	movff	?_MAX,sensorComputation@max
  1228  001556  C087  F093         	movff	?_MAX+1,sensorComputation@max+1
  1229                           
  1230                           ;user.c: 151: sum += sensorTemp[i][j];
  1231  00155A  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1232  00155E  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1233  001562  0E00               	movlw	0
  1234  001564  0100               	movlb	0	; () banked
  1235  001566  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1236  001568  0E14               	movlw	20
  1237  00156A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1238  00156C  EC7D  F00F         	call	___wmul	;wreg free
  1239  001570  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1240  001574  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1241  001578  0100               	movlb	0	; () banked
  1242  00157A  5180               	movf	?___wmul& (0+255),w,b
  1243  00157C  0100               	movlb	0	; () banked
  1244  00157E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1245  001580  0100               	movlb	0	; () banked
  1246  001582  5181               	movf	(?___wmul+1)& (0+255),w,b
  1247  001584  0100               	movlb	0	; () banked
  1248  001586  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1249  001588  90D8               	bcf	status,0,c
  1250  00158A  0100               	movlb	0	; () banked
  1251  00158C  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1252  00158E  6ED9               	movwf	fsr2l,c
  1253  001590  0100               	movlb	0	; () banked
  1254  001592  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1255  001594  6EDA               	movwf	fsr2h,c
  1256  001596  0100               	movlb	0	; () banked
  1257  001598  518E               	movf	??_sensorComputation& (0+255),w,b
  1258  00159A  26D9               	addwf	fsr2l,f,c
  1259  00159C  0100               	movlb	0	; () banked
  1260  00159E  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1261  0015A0  22DA               	addwfc	fsr2h,f,c
  1262  0015A2  50DE               	movf	postinc2,w,c
  1263  0015A4  0100               	movlb	0	; () banked
  1264  0015A6  2796               	addwf	sensorComputation@sum& (0+255),f,b
  1265  0015A8  50DD               	movf	postdec2,w,c
  1266  0015AA  0100               	movlb	0	; () banked
  1267  0015AC  2397               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1268  0015AE  D000               	goto	l2167
  1269  0015B0                     l2167:
  1270                           
  1271                           ; BSR set to: 0
  1272  0015B0  0100               	movlb	0	; () banked
  1273  0015B2  4B98               	infsnz	sensorComputation@j& (0+255),f,b
  1274  0015B4  2B99               	incf	(sensorComputation@j+1)& (0+255),f,b
  1275                           
  1276                           ; BSR set to: 0
  1277  0015B6  0100               	movlb	0	; () banked
  1278  0015B8  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1279  0015BA  D734               	goto	l2161
  1280  0015BC  0100               	movlb	0	; () banked
  1281  0015BE  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1282  0015C0  E102               	bnz	l2171
  1283  0015C2  D729               	goto	L2
  1284  0015C4  D000               	goto	l2171
  1285  0015C6                     l2171:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;user.c: 152: }
  1289                           ;user.c: 153: sum = sum - min - max;
  1290  0015C6  0100               	movlb	0	; () banked
  1291  0015C8  5192               	movf	sensorComputation@max& (0+255),w,b
  1292  0015CA  0100               	movlb	0	; () banked
  1293  0015CC  2594               	addwf	sensorComputation@min& (0+255),w,b
  1294  0015CE  0100               	movlb	0	; () banked
  1295  0015D0  6F8E               	movwf	??_sensorComputation& (0+255),b
  1296  0015D2  0100               	movlb	0	; () banked
  1297  0015D4  5193               	movf	(sensorComputation@max+1)& (0+255),w,b
  1298  0015D6  0100               	movlb	0	; () banked
  1299  0015D8  2195               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1300  0015DA  0100               	movlb	0	; () banked
  1301  0015DC  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1302  0015DE  0100               	movlb	0	; () banked
  1303  0015E0  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1304  0015E2  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1305  0015E4  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1306  0015E6  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1307  0015E8  0100               	movlb	0	; () banked
  1308  0015EA  5196               	movf	sensorComputation@sum& (0+255),w,b
  1309  0015EC  0100               	movlb	0	; () banked
  1310  0015EE  258E               	addwf	??_sensorComputation& (0+255),w,b
  1311  0015F0  0100               	movlb	0	; () banked
  1312  0015F2  6F96               	movwf	sensorComputation@sum& (0+255),b
  1313  0015F4  0100               	movlb	0	; () banked
  1314  0015F6  5197               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1315  0015F8  0100               	movlb	0	; () banked
  1316  0015FA  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1317  0015FC  0100               	movlb	0	; () banked
  1318  0015FE  6F97               	movwf	(sensorComputation@sum+1)& (0+255),b
  1319                           
  1320                           ;user.c: 154: if(getCorrection == 1)
  1321  001600  0100               	movlb	0	; () banked
  1322  001602  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1323  001604  A4D8               	btfss	status,2,c
  1324  001606  D01D               	goto	l2175
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1328  001608  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1329  00160C  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1330  001610  0E00               	movlw	0
  1331  001612  0100               	movlb	0	; () banked
  1332  001614  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1333  001616  0E08               	movlw	8
  1334  001618  6F82               	movwf	___awdiv@divisor& (0+255),b
  1335  00161A  EC6B  F00E         	call	___awdiv	;wreg free
  1336  00161E  90D8               	bcf	status,0,c
  1337  001620  0100               	movlb	0	; () banked
  1338  001622  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1339  001624  6ED9               	movwf	fsr2l,c
  1340  001626  0100               	movlb	0	; () banked
  1341  001628  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1342  00162A  6EDA               	movwf	fsr2h,c
  1343  00162C  0E01               	movlw	low _sensorValue
  1344  00162E  26D9               	addwf	fsr2l,f,c
  1345  001630  0E00               	movlw	high _sensorValue
  1346  001632  22DA               	addwfc	fsr2h,f,c
  1347  001634  0100               	movlb	0	; () banked
  1348  001636  C080  FFDE         	movff	?___awdiv,postinc2
  1349  00163A  0100               	movlb	0	; () banked
  1350  00163C  C081  FFDD         	movff	?___awdiv+1,postdec2
  1351  001640  D0A5               	goto	l2189
  1352  001642                     l2175:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;user.c: 156: else
  1356                           ;user.c: 157: {
  1357                           ;user.c: 158: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1358  001642  90D8               	bcf	status,0,c
  1359  001644  0100               	movlb	0	; () banked
  1360  001646  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1361  001648  6ED9               	movwf	fsr2l,c
  1362  00164A  0100               	movlb	0	; () banked
  1363  00164C  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1364  00164E  6EDA               	movwf	fsr2h,c
  1365  001650  0EF7               	movlw	low _sensorCorrection
  1366  001652  26D9               	addwf	fsr2l,f,c
  1367  001654  0E00               	movlw	high _sensorCorrection
  1368  001656  22DA               	addwfc	fsr2h,f,c
  1369  001658  CFDE F08E          	movff	postinc2,??_sensorComputation
  1370  00165C  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1371  001660  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1372  001664  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1373  001668  0E00               	movlw	0
  1374  00166A  0100               	movlb	0	; () banked
  1375  00166C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1376  00166E  0E08               	movlw	8
  1377  001670  6F82               	movwf	___awdiv@divisor& (0+255),b
  1378  001672  EC6B  F00E         	call	___awdiv	;wreg free
  1379  001676  0100               	movlb	0	; () banked
  1380  001678  518E               	movf	??_sensorComputation& (0+255),w,b
  1381  00167A  0100               	movlb	0	; () banked
  1382  00167C  2780               	addwf	?___awdiv& (0+255),f,b
  1383  00167E  0100               	movlb	0	; () banked
  1384  001680  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1385  001682  0100               	movlb	0	; () banked
  1386  001684  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1387  001686  90D8               	bcf	status,0,c
  1388  001688  0100               	movlb	0	; () banked
  1389  00168A  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1390  00168C  6ED9               	movwf	fsr2l,c
  1391  00168E  0100               	movlb	0	; () banked
  1392  001690  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1393  001692  6EDA               	movwf	fsr2h,c
  1394  001694  0E01               	movlw	low _sensorValue
  1395  001696  26D9               	addwf	fsr2l,f,c
  1396  001698  0E00               	movlw	high _sensorValue
  1397  00169A  22DA               	addwfc	fsr2h,f,c
  1398  00169C  0100               	movlb	0	; () banked
  1399  00169E  C080  FFDE         	movff	?___awdiv,postinc2
  1400  0016A2  0100               	movlb	0	; () banked
  1401  0016A4  C081  FFDD         	movff	?___awdiv+1,postdec2
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;user.c: 159: if( i == 3)
  1405  0016A8  0E03               	movlw	3
  1406  0016AA  0100               	movlb	0	; () banked
  1407  0016AC  199A               	xorwf	sensorComputation@i& (0+255),w,b
  1408  0016AE  0100               	movlb	0	; () banked
  1409  0016B0  119B               	iorwf	(sensorComputation@i+1)& (0+255),w,b
  1410  0016B2  A4D8               	btfss	status,2,c
  1411  0016B4  D06B               	goto	l2189
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;user.c: 160: {
  1415                           ;user.c: 161: if(sensorValue[i] > 350 && sensorValue[i] <= 450) sensorValue[i] = sensorV
      +                          alue[i] - 40;
  1416  0016B6  90D8               	bcf	status,0,c
  1417  0016B8  0100               	movlb	0	; () banked
  1418  0016BA  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1419  0016BC  6ED9               	movwf	fsr2l,c
  1420  0016BE  0100               	movlb	0	; () banked
  1421  0016C0  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1422  0016C2  6EDA               	movwf	fsr2h,c
  1423  0016C4  0E01               	movlw	low _sensorValue
  1424  0016C6  26D9               	addwf	fsr2l,f,c
  1425  0016C8  0E00               	movlw	high _sensorValue
  1426  0016CA  22DA               	addwfc	fsr2h,f,c
  1427  0016CC  0E01               	movlw	1
  1428  0016CE  BEDB               	btfsc	plusw2,7,c
  1429  0016D0  D01C               	goto	l2185
  1430  0016D2  0E5F               	movlw	95
  1431  0016D4  5CDE               	subwf	postinc2,w,c
  1432  0016D6  0E01               	movlw	1
  1433  0016D8  58DE               	subwfb	postinc2,w,c
  1434  0016DA  A0D8               	btfss	status,0,c
  1435  0016DC  D016               	goto	l2185
  1436                           
  1437                           ; BSR set to: 0
  1438  0016DE  90D8               	bcf	status,0,c
  1439  0016E0  0100               	movlb	0	; () banked
  1440  0016E2  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1441  0016E4  6ED9               	movwf	fsr2l,c
  1442  0016E6  0100               	movlb	0	; () banked
  1443  0016E8  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1444  0016EA  6EDA               	movwf	fsr2h,c
  1445  0016EC  0E01               	movlw	low _sensorValue
  1446  0016EE  26D9               	addwf	fsr2l,f,c
  1447  0016F0  0E00               	movlw	high _sensorValue
  1448  0016F2  22DA               	addwfc	fsr2h,f,c
  1449  0016F4  0E01               	movlw	1
  1450  0016F6  BEDB               	btfsc	plusw2,7,c
  1451  0016F8  D006               	goto	l2183
  1452  0016FA  0EC3               	movlw	195
  1453  0016FC  5CDE               	subwf	postinc2,w,c
  1454  0016FE  0E01               	movlw	1
  1455  001700  58DE               	subwfb	postinc2,w,c
  1456  001702  B0D8               	btfsc	status,0,c
  1457  001704  D002               	goto	l2185
  1458  001706                     l2183:
  1459                           
  1460                           ; BSR set to: 0
  1461  001706  0ED8               	movlw	216
  1462  001708  D015               	goto	L3
  1463  00170A                     l2185:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;user.c: 162: else if(sensorValue[i] > 450) sensorValue[i] = sensorValue[i] - 60;
  1467  00170A  90D8               	bcf	status,0,c
  1468  00170C  0100               	movlb	0	; () banked
  1469  00170E  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1470  001710  6ED9               	movwf	fsr2l,c
  1471  001712  0100               	movlb	0	; () banked
  1472  001714  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1473  001716  6EDA               	movwf	fsr2h,c
  1474  001718  0E01               	movlw	low _sensorValue
  1475  00171A  26D9               	addwf	fsr2l,f,c
  1476  00171C  0E00               	movlw	high _sensorValue
  1477  00171E  22DA               	addwfc	fsr2h,f,c
  1478  001720  0E01               	movlw	1
  1479  001722  BEDB               	btfsc	plusw2,7,c
  1480  001724  D033               	goto	l2189
  1481  001726  0EC3               	movlw	195
  1482  001728  5CDE               	subwf	postinc2,w,c
  1483  00172A  0E01               	movlw	1
  1484  00172C  58DE               	subwfb	postinc2,w,c
  1485  00172E  A0D8               	btfss	status,0,c
  1486  001730  D02D               	goto	l2189
  1487                           
  1488                           ; BSR set to: 0
  1489  001732  0EC4               	movlw	196
  1490  001734                     L3:
  1491  001734  0100               	movlb	0	; () banked
  1492  001736  6F8E               	movwf	??_sensorComputation& (0+255),b
  1493  001738  0EFF               	movlw	255
  1494  00173A  0100               	movlb	0	; () banked
  1495  00173C  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1496  00173E  90D8               	bcf	status,0,c
  1497  001740  0100               	movlb	0	; () banked
  1498  001742  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1499  001744  6ED9               	movwf	fsr2l,c
  1500  001746  0100               	movlb	0	; () banked
  1501  001748  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1502  00174A  6EDA               	movwf	fsr2h,c
  1503  00174C  0E01               	movlw	low _sensorValue
  1504  00174E  26D9               	addwf	fsr2l,f,c
  1505  001750  0E00               	movlw	high _sensorValue
  1506  001752  22DA               	addwfc	fsr2h,f,c
  1507  001754  CFDE F090          	movff	postinc2,??_sensorComputation+2
  1508  001758  CFDD F091          	movff	postdec2,??_sensorComputation+3
  1509  00175C  0100               	movlb	0	; () banked
  1510  00175E  518E               	movf	??_sensorComputation& (0+255),w,b
  1511  001760  0100               	movlb	0	; () banked
  1512  001762  2790               	addwf	(??_sensorComputation+2)& (0+255),f,b
  1513  001764  0100               	movlb	0	; () banked
  1514  001766  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1515  001768  0100               	movlb	0	; () banked
  1516  00176A  2391               	addwfc	(??_sensorComputation+3)& (0+255),f,b
  1517  00176C  90D8               	bcf	status,0,c
  1518  00176E  0100               	movlb	0	; () banked
  1519  001770  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1520  001772  6ED9               	movwf	fsr2l,c
  1521  001774  0100               	movlb	0	; () banked
  1522  001776  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1523  001778  6EDA               	movwf	fsr2h,c
  1524  00177A  0E01               	movlw	low _sensorValue
  1525  00177C  26D9               	addwf	fsr2l,f,c
  1526  00177E  0E00               	movlw	high _sensorValue
  1527  001780  22DA               	addwfc	fsr2h,f,c
  1528  001782  C090  FFDE         	movff	??_sensorComputation+2,postinc2
  1529  001786  C091  FFDD         	movff	??_sensorComputation+3,postdec2
  1530                           
  1531                           ; BSR set to: 0
  1532                           
  1533                           ; BSR set to: 0
  1534                           
  1535                           ; BSR set to: 0
  1536  00178A  D000               	goto	l2189
  1537  00178C                     l2189:
  1538                           
  1539                           ; BSR set to: 0
  1540  00178C  0100               	movlb	0	; () banked
  1541  00178E  4B9A               	infsnz	sensorComputation@i& (0+255),f,b
  1542  001790  2B9B               	incf	(sensorComputation@i+1)& (0+255),f,b
  1543                           
  1544                           ; BSR set to: 0
  1545  001792  0100               	movlb	0	; () banked
  1546  001794  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1547  001796  D634               	goto	l2155
  1548  001798  0100               	movlb	0	; () banked
  1549  00179A  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
  1550  00179C  E102               	bnz	l371
  1551  00179E  D629               	goto	L4
  1552  0017A0  D000               	goto	l371
  1553  0017A2                     l371:
  1554                           
  1555                           ; BSR set to: 0
  1556  0017A2  0012               	return		;funcret
  1557  0017A4                     __end_of_sensorComputation:
  1558                           	opt stack 0
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           intcon	equ	0xFF2
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1l	equ	0xFE1
  1568                           postinc2	equ	0xFDE
  1569                           postdec2	equ	0xFDD
  1570                           plusw2	equ	0xFDB
  1571                           fsr2h	equ	0xFDA
  1572                           fsr2l	equ	0xFD9
  1573                           status	equ	0xFD8
  1574                           
  1575 ;; *************** function ___wmul *****************
  1576 ;; Defined at:
  1577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1580 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  product         2    4[BANK0 ] unsigned int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  2    0[BANK0 ] unsigned int 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0, prodl, prodh
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1592 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;Total ram usage:        6 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    5
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_sensorComputation
  1603 ;;		_sensorUpdate
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text4
  1608  001EFA                     __ptext4:
  1609                           	opt stack 0
  1610  001EFA                     ___wmul:
  1611                           	opt stack 23
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;incstack = 0
  1615  001EFA  0100               	movlb	0	; () banked
  1616  001EFC  5180               	movf	___wmul@multiplier& (0+255),w,b
  1617  001EFE  0100               	movlb	0	; () banked
  1618  001F00  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1619  001F02  CFF3 F084          	movff	prodl,___wmul@product
  1620  001F06  CFF4 F085          	movff	prodh,___wmul@product+1
  1621  001F0A  0100               	movlb	0	; () banked
  1622  001F0C  5180               	movf	___wmul@multiplier& (0+255),w,b
  1623  001F0E  0100               	movlb	0	; () banked
  1624  001F10  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1625  001F12  50F3               	movf	prodl,w,c
  1626  001F14  0100               	movlb	0	; () banked
  1627  001F16  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1628  001F18  0100               	movlb	0	; () banked
  1629  001F1A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1630  001F1C  0100               	movlb	0	; () banked
  1631  001F1E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1632  001F20  50F3               	movf	prodl,w,c
  1633  001F22  0100               	movlb	0	; () banked
  1634  001F24  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 0
  1637  001F26  C084  F080         	movff	___wmul@product,?___wmul
  1638  001F2A  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1639  001F2E  D000               	goto	l392
  1640  001F30                     l392:
  1641                           
  1642                           ; BSR set to: 0
  1643  001F30  0012               	return		;funcret
  1644  001F32                     __end_of___wmul:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           intcon	equ	0xFF2
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1l	equ	0xFE1
  1657                           postinc2	equ	0xFDE
  1658                           postdec2	equ	0xFDD
  1659                           plusw2	equ	0xFDB
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function ___awdiv *****************
  1665 ;; Defined at:
  1666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  dividend        2    0[BANK0 ] int 
  1669 ;;  divisor         2    2[BANK0 ] int 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  quotient        2    6[BANK0 ] int 
  1672 ;;  sign            1    5[BANK0 ] unsigned char 
  1673 ;;  counter         1    4[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2    0[BANK0 ] int 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:        8 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    5
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_setCorrection
  1694 ;;		_sensorComputation
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text5
  1699  001CD6                     __ptext5:
  1700                           	opt stack 0
  1701  001CD6                     ___awdiv:
  1702                           	opt stack 24
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;incstack = 0
  1706  001CD6  0E00               	movlw	0
  1707  001CD8  0100               	movlb	0	; () banked
  1708  001CDA  6F85               	movwf	___awdiv@sign& (0+255),b
  1709                           
  1710                           ; BSR set to: 0
  1711  001CDC  0100               	movlb	0	; () banked
  1712  001CDE  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1713  001CE0  D009               	goto	l2097
  1714                           
  1715                           ; BSR set to: 0
  1716  001CE2  0100               	movlb	0	; () banked
  1717  001CE4  6D82               	negf	___awdiv@divisor& (0+255),b
  1718  001CE6  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1719  001CE8  B0D8               	btfsc	status,0,c
  1720  001CEA  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1721                           
  1722                           ; BSR set to: 0
  1723  001CEC  0E01               	movlw	1
  1724  001CEE  0100               	movlb	0	; () banked
  1725  001CF0  6F85               	movwf	___awdiv@sign& (0+255),b
  1726  001CF2  D000               	goto	l2097
  1727  001CF4                     l2097:
  1728                           
  1729                           ; BSR set to: 0
  1730  001CF4  0100               	movlb	0	; () banked
  1731  001CF6  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1732  001CF8  D009               	goto	l2103
  1733                           
  1734                           ; BSR set to: 0
  1735  001CFA  0100               	movlb	0	; () banked
  1736  001CFC  6D80               	negf	___awdiv@dividend& (0+255),b
  1737  001CFE  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1738  001D00  B0D8               	btfsc	status,0,c
  1739  001D02  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1740                           
  1741                           ; BSR set to: 0
  1742  001D04  0E01               	movlw	1
  1743  001D06  0100               	movlb	0	; () banked
  1744  001D08  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1745  001D0A  D000               	goto	l2103
  1746  001D0C                     l2103:
  1747                           
  1748                           ; BSR set to: 0
  1749  001D0C  0E00               	movlw	0
  1750  001D0E  0100               	movlb	0	; () banked
  1751  001D10  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1752  001D12  0E00               	movlw	0
  1753  001D14  6F86               	movwf	___awdiv@quotient& (0+255),b
  1754                           
  1755                           ; BSR set to: 0
  1756  001D16  0100               	movlb	0	; () banked
  1757  001D18  5182               	movf	___awdiv@divisor& (0+255),w,b
  1758  001D1A  0100               	movlb	0	; () banked
  1759  001D1C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1760  001D1E  B4D8               	btfsc	status,2,c
  1761  001D20  D031               	goto	l2125
  1762                           
  1763                           ; BSR set to: 0
  1764  001D22  0E01               	movlw	1
  1765  001D24  0100               	movlb	0	; () banked
  1766  001D26  6F84               	movwf	___awdiv@counter& (0+255),b
  1767  001D28  D007               	goto	l2111
  1768  001D2A                     l2109:
  1769                           
  1770                           ; BSR set to: 0
  1771  001D2A  0100               	movlb	0	; () banked
  1772  001D2C  90D8               	bcf	status,0,c
  1773  001D2E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1774  001D30  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1775  001D32  0100               	movlb	0	; () banked
  1776  001D34  2B84               	incf	___awdiv@counter& (0+255),f,b
  1777  001D36  D000               	goto	l2111
  1778  001D38                     l2111:
  1779                           
  1780                           ; BSR set to: 0
  1781  001D38  0100               	movlb	0	; () banked
  1782  001D3A  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1783  001D3C  D002               	goto	l2113
  1784  001D3E  D7F5               	goto	l2109
  1785                           
  1786                           ; BSR set to: 0
  1787  001D40  D000               	goto	l2113
  1788  001D42                     l2113:
  1789                           
  1790                           ; BSR set to: 0
  1791  001D42  0100               	movlb	0	; () banked
  1792  001D44  90D8               	bcf	status,0,c
  1793  001D46  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1794  001D48  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1795                           
  1796                           ; BSR set to: 0
  1797  001D4A  0100               	movlb	0	; () banked
  1798  001D4C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1799  001D4E  0100               	movlb	0	; () banked
  1800  001D50  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1801  001D52  0100               	movlb	0	; () banked
  1802  001D54  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1803  001D56  0100               	movlb	0	; () banked
  1804  001D58  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1805  001D5A  A0D8               	btfss	status,0,c
  1806  001D5C  D00B               	goto	l2121
  1807                           
  1808                           ; BSR set to: 0
  1809  001D5E  0100               	movlb	0	; () banked
  1810  001D60  5182               	movf	___awdiv@divisor& (0+255),w,b
  1811  001D62  0100               	movlb	0	; () banked
  1812  001D64  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1813  001D66  0100               	movlb	0	; () banked
  1814  001D68  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1815  001D6A  0100               	movlb	0	; () banked
  1816  001D6C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1817                           
  1818                           ; BSR set to: 0
  1819  001D6E  0100               	movlb	0	; () banked
  1820  001D70  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1821  001D72  D000               	goto	l2121
  1822  001D74                     l2121:
  1823                           
  1824                           ; BSR set to: 0
  1825  001D74  0100               	movlb	0	; () banked
  1826  001D76  90D8               	bcf	status,0,c
  1827  001D78  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1828  001D7A  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1829                           
  1830                           ; BSR set to: 0
  1831  001D7C  0100               	movlb	0	; () banked
  1832  001D7E  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1833  001D80  D7E0               	goto	l2113
  1834                           
  1835                           ; BSR set to: 0
  1836  001D82  D000               	goto	l2125
  1837  001D84                     l2125:
  1838                           
  1839                           ; BSR set to: 0
  1840  001D84  0100               	movlb	0	; () banked
  1841  001D86  5185               	movf	___awdiv@sign& (0+255),w,b
  1842  001D88  0100               	movlb	0	; () banked
  1843  001D8A  B4D8               	btfsc	status,2,c
  1844  001D8C  D006               	goto	l2129
  1845                           
  1846                           ; BSR set to: 0
  1847  001D8E  0100               	movlb	0	; () banked
  1848  001D90  6D86               	negf	___awdiv@quotient& (0+255),b
  1849  001D92  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1850  001D94  B0D8               	btfsc	status,0,c
  1851  001D96  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1852  001D98  D000               	goto	l2129
  1853  001D9A                     l2129:
  1854                           
  1855                           ; BSR set to: 0
  1856  001D9A  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1857  001D9E  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1858  001DA2  D000               	goto	l585
  1859  001DA4                     l585:
  1860                           
  1861                           ; BSR set to: 0
  1862  001DA4  0012               	return		;funcret
  1863  001DA6                     __end_of___awdiv:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           prodh	equ	0xFF4
  1870                           prodl	equ	0xFF3
  1871                           intcon	equ	0xFF2
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           plusw2	equ	0xFDB
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _MIN *****************
  1884 ;; Defined at:
  1885 ;;		line 191 in file "user.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  a               2    6[BANK0 ] int 
  1888 ;;  b               2    8[BANK0 ] int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    6[BANK0 ] int 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:        5 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    5
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_sensorComputation
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text6
  1915  001F32                     __ptext6:
  1916                           	opt stack 0
  1917  001F32                     _MIN:
  1918                           	opt stack 23
  1919                           
  1920                           ;user.c: 193: if(a>b) return b;
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;incstack = 0
  1924  001F32  0100               	movlb	0	; () banked
  1925  001F34  5186               	movf	MIN@a& (0+255),w,b
  1926  001F36  0100               	movlb	0	; () banked
  1927  001F38  5D88               	subwf	MIN@b& (0+255),w,b
  1928  001F3A  0100               	movlb	0	; () banked
  1929  001F3C  5189               	movf	(MIN@b+1)& (0+255),w,b
  1930  001F3E  0A80               	xorlw	128
  1931  001F40  0100               	movlb	0	; () banked
  1932  001F42  6F8A               	movwf	??_MIN& (0+255),b
  1933  001F44  0100               	movlb	0	; () banked
  1934  001F46  5187               	movf	(MIN@a+1)& (0+255),w,b
  1935  001F48  0A80               	xorlw	128
  1936  001F4A  0100               	movlb	0	; () banked
  1937  001F4C  598A               	subwfb	??_MIN& (0+255),w,b
  1938  001F4E  B0D8               	btfsc	status,0,c
  1939  001F50  D005               	goto	l384
  1940                           
  1941                           ; BSR set to: 0
  1942  001F52  C088  F086         	movff	MIN@b,?_MIN
  1943  001F56  C089  F087         	movff	MIN@b+1,?_MIN+1
  1944  001F5A  D004               	goto	l385
  1945  001F5C                     l384:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;user.c: 194: return a;
  1949  001F5C  C086  F086         	movff	MIN@a,?_MIN
  1950  001F60  C087  F087         	movff	MIN@a+1,?_MIN+1
  1951  001F64                     l385:
  1952                           
  1953                           ; BSR set to: 0
  1954  001F64  0012               	return		;funcret
  1955  001F66                     __end_of_MIN:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           plusw2	equ	0xFDB
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _MAX *****************
  1976 ;; Defined at:
  1977 ;;		line 197 in file "user.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  a               2    6[BANK0 ] int 
  1980 ;;  b               2    8[BANK0 ] int 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    6[BANK0 ] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;Total ram usage:        5 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    5
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_sensorComputation
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text7
  2007  001F66                     __ptext7:
  2008                           	opt stack 0
  2009  001F66                     _MAX:
  2010                           	opt stack 23
  2011                           
  2012                           ;user.c: 199: if(a>b) return a;
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;incstack = 0
  2016  001F66  0100               	movlb	0	; () banked
  2017  001F68  5186               	movf	MAX@a& (0+255),w,b
  2018  001F6A  0100               	movlb	0	; () banked
  2019  001F6C  5D88               	subwf	MAX@b& (0+255),w,b
  2020  001F6E  0100               	movlb	0	; () banked
  2021  001F70  5189               	movf	(MAX@b+1)& (0+255),w,b
  2022  001F72  0A80               	xorlw	128
  2023  001F74  0100               	movlb	0	; () banked
  2024  001F76  6F8A               	movwf	??_MAX& (0+255),b
  2025  001F78  0100               	movlb	0	; () banked
  2026  001F7A  5187               	movf	(MAX@a+1)& (0+255),w,b
  2027  001F7C  0A80               	xorlw	128
  2028  001F7E  0100               	movlb	0	; () banked
  2029  001F80  598A               	subwfb	??_MAX& (0+255),w,b
  2030  001F82  B0D8               	btfsc	status,0,c
  2031  001F84  D005               	goto	l388
  2032                           
  2033                           ; BSR set to: 0
  2034  001F86  C086  F086         	movff	MAX@a,?_MAX
  2035  001F8A  C087  F087         	movff	MAX@a+1,?_MAX+1
  2036  001F8E  D004               	goto	l389
  2037  001F90                     l388:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;user.c: 200: return b;
  2041  001F90  C088  F086         	movff	MAX@b,?_MAX
  2042  001F94  C089  F087         	movff	MAX@b+1,?_MAX+1
  2043  001F98                     l389:
  2044                           
  2045                           ; BSR set to: 0
  2046  001F98  0012               	return		;funcret
  2047  001F9A                     __end_of_MAX:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           tblptrh	equ	0xFF7
  2051                           tblptrl	equ	0xFF6
  2052                           tablat	equ	0xFF5
  2053                           prodh	equ	0xFF4
  2054                           prodl	equ	0xFF3
  2055                           intcon	equ	0xFF2
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postdec1	equ	0xFE5
  2059                           fsr1l	equ	0xFE1
  2060                           postinc2	equ	0xFDE
  2061                           postdec2	equ	0xFDD
  2062                           plusw2	equ	0xFDB
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _InitApp *****************
  2068 ;; Defined at:
  2069 ;;		line 35 in file "user.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    6
  2090 ;; This function calls:
  2091 ;;		_AlgorithmSelection
  2092 ;;		_delay
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text8
  2099  001E82                     __ptext8:
  2100                           	opt stack 0
  2101  001E82                     _InitApp:
  2102                           	opt stack 24
  2103                           
  2104                           ;user.c: 39: TRISC = 0;
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;incstack = 0
  2108  001E82  0E00               	movlw	0
  2109  001E84  6E94               	movwf	3988,c	;volatile
  2110                           
  2111                           ;user.c: 43: TRISEbits.TRISE1=1;
  2112  001E86  8296               	bsf	3990,1,c	;volatile
  2113                           
  2114                           ;user.c: 45: TRISEbits.TRISE2=1;
  2115  001E88  8496               	bsf	3990,2,c	;volatile
  2116                           
  2117                           ;user.c: 47: TRISBbits.RB1=1;
  2118  001E8A  8293               	bsf	3987,1,c	;volatile
  2119                           
  2120                           ;user.c: 49: TRISBbits.RB0=1;
  2121  001E8C  8093               	bsf	3987,0,c	;volatile
  2122                           
  2123                           ;user.c: 52: TRISBbits.RB3=1;
  2124  001E8E  8693               	bsf	3987,3,c	;volatile
  2125                           
  2126                           ;user.c: 54: TRISBbits.RB2=1;
  2127  001E90  8493               	bsf	3987,2,c	;volatile
  2128                           
  2129                           ;user.c: 58: ADCON1 =0b00000001;
  2130  001E92  0E01               	movlw	1
  2131  001E94  6EC1               	movwf	4033,c	;volatile
  2132                           
  2133                           ;user.c: 63: ADCON2=0b00001010;
  2134  001E96  0E0A               	movlw	10
  2135  001E98  6EC0               	movwf	4032,c	;volatile
  2136                           
  2137                           ;user.c: 68: ADCON0=0b00101011;
  2138  001E9A  0E2B               	movlw	43
  2139  001E9C  6EC2               	movwf	4034,c	;volatile
  2140                           
  2141                           ;user.c: 77: T0CON = 0b11000100;
  2142  001E9E  0EC4               	movlw	196
  2143  001EA0  6ED5               	movwf	4053,c	;volatile
  2144                           
  2145                           ;user.c: 85: INTCON2 = 0b11110100;
  2146  001EA2  0EF4               	movlw	244
  2147  001EA4  6EF1               	movwf	intcon2,c	;volatile
  2148                           
  2149                           ;user.c: 95: INTCON = 0b00100000;
  2150  001EA6  0E20               	movlw	32
  2151  001EA8  6EF2               	movwf	intcon,c	;volatile
  2152                           
  2153                           ;user.c: 105: AlgorithmSelection();
  2154  001EAA  EC25  F010         	call	_AlgorithmSelection	;wreg free
  2155                           
  2156                           ;user.c: 108: delay(1000);
  2157  001EAE  0E03               	movlw	3
  2158  001EB0  0100               	movlb	0	; () banked
  2159  001EB2  6F81               	movwf	(delay@ms+1)& (0+255),b
  2160  001EB4  0EE8               	movlw	232
  2161  001EB6  6F80               	movwf	delay@ms& (0+255),b
  2162  001EB8  ECFE  F00E         	call	_delay	;wreg free
  2163  001EBC  0012               	return		;funcret
  2164  001EBE                     __end_of_InitApp:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           intcon	equ	0xFF2
  2173                           intcon2	equ	0xFF1
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           postdec1	equ	0xFE5
  2177                           fsr1l	equ	0xFE1
  2178                           postinc2	equ	0xFDE
  2179                           postdec2	equ	0xFDD
  2180                           plusw2	equ	0xFDB
  2181                           fsr2h	equ	0xFDA
  2182                           fsr2l	equ	0xFD9
  2183                           status	equ	0xFD8
  2184                           
  2185 ;; *************** function _delay *****************
  2186 ;; Defined at:
  2187 ;;		line 29 in file "user.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  ms              2    0[BANK0 ] unsigned int 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  x               2    3[BANK0 ] int 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;		None               void
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;Total ram usage:        5 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    5
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_InitApp
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text9
  2216  001DFC                     __ptext9:
  2217                           	opt stack 0
  2218  001DFC                     _delay:
  2219                           	opt stack 24
  2220                           
  2221                           ;user.c: 30: int x = 0;
  2222                           
  2223                           ;incstack = 0
  2224  001DFC  0E00               	movlw	0
  2225  001DFE  0100               	movlb	0	; () banked
  2226  001E00  6F84               	movwf	(delay@x+1)& (0+255),b
  2227  001E02  0E00               	movlw	0
  2228  001E04  6F83               	movwf	delay@x& (0+255),b
  2229                           
  2230                           ;user.c: 31: for (x = 0; x < ms; x++)
  2231  001E06  0E00               	movlw	0
  2232  001E08  0100               	movlb	0	; () banked
  2233  001E0A  6F84               	movwf	(delay@x+1)& (0+255),b
  2234  001E0C  0E00               	movlw	0
  2235  001E0E  6F83               	movwf	delay@x& (0+255),b
  2236  001E10  D00C               	goto	l339
  2237  001E12                     l2135:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2241  001E12  0E0B               	movlw	11
  2242  001E14  0100               	movlb	0	; () banked
  2243  001E16  6F82               	movwf	??_delay& (0+255),b
  2244  001E18  0E62               	movlw	98
  2245  001E1A                     u2357:
  2246  001E1A  2EE8               	decfsz	wreg,f,c
  2247  001E1C  D7FE               	goto	u2357
  2248  001E1E  2F82               	decfsz	??_delay& (0+255),f,b
  2249  001E20  D7FC               	goto	u2357
  2250  001E22  D000               	nop2	
  2251  001E24  0100               	movlb	0	; () banked
  2252  001E26  4B83               	infsnz	delay@x& (0+255),f,b
  2253  001E28  2B84               	incf	(delay@x+1)& (0+255),f,b
  2254  001E2A                     l339:
  2255                           
  2256                           ; BSR set to: 0
  2257  001E2A  0100               	movlb	0	; () banked
  2258  001E2C  5180               	movf	delay@ms& (0+255),w,b
  2259  001E2E  0100               	movlb	0	; () banked
  2260  001E30  5D83               	subwf	delay@x& (0+255),w,b
  2261  001E32  0100               	movlb	0	; () banked
  2262  001E34  5181               	movf	(delay@ms+1)& (0+255),w,b
  2263  001E36  0100               	movlb	0	; () banked
  2264  001E38  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2265  001E3A  A0D8               	btfss	status,0,c
  2266  001E3C  D7EA               	goto	l2135
  2267                           
  2268                           ; BSR set to: 0
  2269                           
  2270                           ; BSR set to: 0
  2271  001E3E  0012               	return		;funcret
  2272  001E40                     __end_of_delay:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           prodh	equ	0xFF4
  2279                           prodl	equ	0xFF3
  2280                           intcon	equ	0xFF2
  2281                           intcon2	equ	0xFF1
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postdec1	equ	0xFE5
  2285                           fsr1l	equ	0xFE1
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           plusw2	equ	0xFDB
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _AlgorithmSelection *****************
  2294 ;; Defined at:
  2295 ;;		line 112 in file "user.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:        0 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_InitApp
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text10
  2324  00204A                     __ptext10:
  2325                           	opt stack 0
  2326  00204A                     _AlgorithmSelection:
  2327                           	opt stack 24
  2328                           
  2329                           ;user.c: 114: ADCON0 = 0b00100111;
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;incstack = 0
  2333  00204A  0E27               	movlw	39
  2334  00204C  6EC2               	movwf	4034,c	;volatile
  2335                           
  2336                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2337  00204E  82C2               	bsf	4034,1,c	;volatile
  2338                           
  2339                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2340  002050  D000               	goto	l348
  2341  002052                     l348:
  2342  002052  B2C2               	btfsc	4034,1,c	;volatile
  2343  002054  D7FE               	goto	l348
  2344                           
  2345                           ;user.c: 119: if(ADRESL > 0b10000000)
  2346  002056  0E80               	movlw	128
  2347  002058  64C3               	cpfsgt	4035,c	;volatile
  2348  00205A  D002               	goto	l2147
  2349                           
  2350                           ;user.c: 120: algorithm = LEFTWALL;
  2351  00205C  0E00               	movlw	0
  2352  00205E  D001               	goto	L5
  2353  002060                     l2147:
  2354                           
  2355                           ;user.c: 121: else
  2356                           ;user.c: 122: algorithm = RIGHTWALL;
  2357  002060  0E01               	movlw	1
  2358  002062                     L5:
  2359  002062  6E2A               	movwf	_algorithm,c
  2360  002064  D000               	goto	l353
  2361  002066                     l353:
  2362  002066  0012               	return		;funcret
  2363  002068                     __end_of_AlgorithmSelection:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1l	equ	0xFE1
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           plusw2	equ	0xFDB
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _ConfigureOscillator *****************
  2385 ;; Defined at:
  2386 ;;		line 24 in file "system.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;		None               void
  2393 ;; Registers used:
  2394 ;;		wreg, status,2
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;Total ram usage:        0 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    5
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text11
  2415  002094                     __ptext11:
  2416                           	opt stack 0
  2417  002094                     _ConfigureOscillator:
  2418                           	opt stack 25
  2419                           
  2420                           ;system.c: 29: OSCCON = 0b01111100;
  2421                           
  2422                           ;incstack = 0
  2423  002094  0E7C               	movlw	124
  2424  002096  6ED3               	movwf	4051,c	;volatile
  2425                           
  2426                           ;system.c: 31: OSCTUNE = 0b01001111;
  2427  002098  0E4F               	movlw	79
  2428  00209A  6E9B               	movwf	3995,c	;volatile
  2429  00209C  0012               	return		;funcret
  2430  00209E                     __end_of_ConfigureOscillator:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           intcon	equ	0xFF2
  2439                           intcon2	equ	0xFF1
  2440                           postinc0	equ	0xFEE
  2441                           wreg	equ	0xFE8
  2442                           postdec1	equ	0xFE5
  2443                           fsr1l	equ	0xFE1
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           plusw2	equ	0xFDB
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _low_isr *****************
  2452 ;; Defined at:
  2453 ;;		line 240 in file "interrupts.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;		None               void
  2460 ;; Registers used:
  2461 ;;		None
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;Total ram usage:       17 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    4
  2474 ;; This function calls:
  2475 ;;		Nothing
  2476 ;; This function is called by:
  2477 ;;		Interrupt level 1
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           	psect	intcodelo
  2482  000018                     __pintcodelo:
  2483                           	opt stack 0
  2484  000018                     _low_isr:
  2485                           	opt stack 23
  2486                           
  2487                           ;incstack = 0
  2488  000018  CFD8 F02E          	movff	status,??_low_isr
  2489  00001C  CFE8 F02F          	movff	wreg,??_low_isr+1
  2490  000020  CFE0 F030          	movff	bsr,??_low_isr+2
  2491  000024  CFFA F031          	movff	pclath,??_low_isr+3
  2492  000028  CFFB F032          	movff	pclatu,??_low_isr+4
  2493  00002C  CFE9 F033          	movff	fsr0l,??_low_isr+5
  2494  000030  CFEA F034          	movff	fsr0h,??_low_isr+6
  2495  000034  CFE1 F035          	movff	fsr1l,??_low_isr+7
  2496  000038  CFE2 F036          	movff	fsr1h,??_low_isr+8
  2497  00003C  CFD9 F037          	movff	fsr2l,??_low_isr+9
  2498  000040  CFDA F038          	movff	fsr2h,??_low_isr+10
  2499  000044  CFF3 F039          	movff	prodl,??_low_isr+11
  2500  000048  CFF4 F03A          	movff	prodh,??_low_isr+12
  2501  00004C  CFF6 F03B          	movff	tblptrl,??_low_isr+13
  2502  000050  CFF7 F03C          	movff	tblptrh,??_low_isr+14
  2503  000054  CFF8 F03D          	movff	tblptru,??_low_isr+15
  2504  000058  CFF5 F03E          	movff	tablat,??_low_isr+16
  2505  00005C  C03E  FFF5         	movff	??_low_isr+16,tablat
  2506  000060  C03D  FFF8         	movff	??_low_isr+15,tblptru
  2507  000064  C03C  FFF7         	movff	??_low_isr+14,tblptrh
  2508  000068  C03B  FFF6         	movff	??_low_isr+13,tblptrl
  2509  00006C  C03A  FFF4         	movff	??_low_isr+12,prodh
  2510  000070  C039  FFF3         	movff	??_low_isr+11,prodl
  2511  000074  C038  FFDA         	movff	??_low_isr+10,fsr2h
  2512  000078  C037  FFD9         	movff	??_low_isr+9,fsr2l
  2513  00007C  C036  FFE2         	movff	??_low_isr+8,fsr1h
  2514  000080  C035  FFE1         	movff	??_low_isr+7,fsr1l
  2515  000084  C034  FFEA         	movff	??_low_isr+6,fsr0h
  2516  000088  C033  FFE9         	movff	??_low_isr+5,fsr0l
  2517  00008C  C032  FFFB         	movff	??_low_isr+4,pclatu
  2518  000090  C031  FFFA         	movff	??_low_isr+3,pclath
  2519  000094  C030  FFE0         	movff	??_low_isr+2,bsr
  2520  000098  C02F  FFE8         	movff	??_low_isr+1,wreg
  2521  00009C  C02E  FFD8         	movff	??_low_isr,status
  2522  0000A0  0010               	retfie	
  2523  0000A2                     __end_of_low_isr:
  2524                           	opt stack 0
  2525                           pclatu	equ	0xFFB
  2526                           pclath	equ	0xFFA
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           intcon2	equ	0xFF1
  2535                           postinc0	equ	0xFEE
  2536                           fsr0h	equ	0xFEA
  2537                           fsr0l	equ	0xFE9
  2538                           wreg	equ	0xFE8
  2539                           postdec1	equ	0xFE5
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           bsr	equ	0xFE0
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           plusw2	equ	0xFDB
  2546                           fsr2h	equ	0xFDA
  2547                           fsr2l	equ	0xFD9
  2548                           status	equ	0xFD8
  2549                           
  2550 ;; *************** function _high_isr *****************
  2551 ;; Defined at:
  2552 ;;		line 106 in file "interrupts.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;		None
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  a               2   40[COMRAM] int 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;		None               void
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;Total ram usage:       19 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    3
  2573 ;; This function calls:
  2574 ;;		_KController
  2575 ;;		_Reversing
  2576 ;;		_forward
  2577 ;;		_initialRotation
  2578 ;;		_merge
  2579 ;;		_motorCounterUpdate
  2580 ;;		_moveMouse
  2581 ;;		_rotate
  2582 ;;		_singleForward
  2583 ;;		_stateUpdate
  2584 ;; This function is called by:
  2585 ;;		Interrupt level 2
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	intcode
  2590  000008                     __pintcode:
  2591                           	opt stack 0
  2592  000008                     _high_isr:
  2593                           	opt stack 23
  2594                           
  2595                           ;incstack = 0
  2596  000008  CFFA F048          	movff	pclath,??_high_isr+3
  2597  00000C  CFFB F049          	movff	pclatu,??_high_isr+4
  2598  000010  CFE9 F04A          	movff	fsr0l,??_high_isr+5
  2599  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2600                           pclatu	equ	0xFFB
  2601                           pclath	equ	0xFFA
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon2	equ	0xFF1
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           bsr	equ	0xFE0
  2618                           postinc2	equ	0xFDE
  2619                           postdec2	equ	0xFDD
  2620                           plusw2	equ	0xFDB
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625                           	psect	intcode_body
  2626  001006                     __pintcode_body:
  2627                           	opt stack 23
  2628  001006                     int_func:
  2629                           	opt stack 23
  2630  001006  0006               	pop		; remove dummy address from shadow register refresh
  2631  001008  CFEA F04B          	movff	fsr0h,??_high_isr+6
  2632  00100C  CFE1 F04C          	movff	fsr1l,??_high_isr+7
  2633  001010  CFE2 F04D          	movff	fsr1h,??_high_isr+8
  2634  001014  CFD9 F04E          	movff	fsr2l,??_high_isr+9
  2635  001018  CFDA F04F          	movff	fsr2h,??_high_isr+10
  2636  00101C  CFF3 F050          	movff	prodl,??_high_isr+11
  2637  001020  CFF4 F051          	movff	prodh,??_high_isr+12
  2638  001024  CFF6 F052          	movff	tblptrl,??_high_isr+13
  2639  001028  CFF7 F053          	movff	tblptrh,??_high_isr+14
  2640  00102C  CFF8 F054          	movff	tblptru,??_high_isr+15
  2641  001030  CFF5 F055          	movff	tablat,??_high_isr+16
  2642                           
  2643                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2644  001034  A4F2               	btfss	intcon,2,c	;volatile
  2645  001036  D1B5               	goto	i2l154
  2646                           
  2647                           ;interrupts.c: 126: {
  2648                           ;interrupts.c: 127: if(MotorDelayCounter > MOTORDELAYMAX)
  2649  001038  5058               	movf	_MOTORDELAYMAX,w,c
  2650  00103A  6E45               	movwf	??_high_isr& (0+255),c
  2651  00103C  6A46               	clrf	(??_high_isr+1)& (0+255),c
  2652  00103E  500F               	movf	_MotorDelayCounter,w,c
  2653  001040  5C45               	subwf	??_high_isr,w,c
  2654  001042  5046               	movf	??_high_isr+1,w,c
  2655  001044  0A80               	xorlw	128
  2656  001046  6E47               	movwf	(??_high_isr+2)& (0+255),c
  2657  001048  5010               	movf	_MotorDelayCounter+1,w,c
  2658  00104A  0A80               	xorlw	128
  2659  00104C  5847               	subwfb	(??_high_isr+2)& (0+255),w,c
  2660  00104E  B0D8               	btfsc	status,0,c
  2661  001050  D1A4               	goto	i2l2043
  2662                           
  2663                           ;interrupts.c: 128: {
  2664                           ;interrupts.c: 129: stateUpdate();
  2665  001052  ECD2  F00B         	call	_stateUpdate	;wreg free
  2666                           
  2667                           ;interrupts.c: 131: if(cState != pState)
  2668  001056  505B               	movf	_pState,w,c
  2669  001058  1859               	xorwf	_cState,w,c
  2670  00105A  B4D8               	btfsc	status,2,c
  2671  00105C  D002               	goto	i2l1877
  2672                           
  2673                           ;interrupts.c: 132: ChangeRequired = 1;
  2674  00105E  0E01               	movlw	1
  2675  001060  D001               	goto	L6
  2676  001062                     i2l1877:
  2677                           
  2678                           ;interrupts.c: 133: else
  2679                           ;interrupts.c: 134: ChangeRequired = 0;
  2680  001062  0E00               	movlw	0
  2681  001064                     L6:
  2682  001064  6E27               	movwf	_ChangeRequired,c
  2683  001066  D000               	goto	i2l1879
  2684  001068                     i2l1879:
  2685                           
  2686                           ;interrupts.c: 137: if(RotateCounter == 170*2-1 || RotateCounter == 170-1)
  2687  001068  0E53               	movlw	83
  2688  00106A  1815               	xorwf	_RotateCounter,w,c
  2689  00106C  E103               	bnz	i2u165_40
  2690  00106E  0416               	decf	_RotateCounter+1,w,c
  2691  001070  B4D8               	btfsc	status,2,c
  2692  001072  D005               	goto	i2l1883
  2693  001074                     i2u165_40:
  2694  001074  0EA9               	movlw	169
  2695  001076  1815               	xorwf	_RotateCounter,w,c
  2696  001078  1016               	iorwf	_RotateCounter+1,w,c
  2697  00107A  A4D8               	btfss	status,2,c
  2698  00107C  D005               	goto	i2l1885
  2699  00107E                     i2l1883:
  2700                           
  2701                           ;interrupts.c: 138: {
  2702                           ;interrupts.c: 139: int a = 0;
  2703  00107E  0E00               	movlw	0
  2704  001080  6E57               	movwf	high_isr@a+1,c
  2705  001082  0E00               	movlw	0
  2706  001084  6E56               	movwf	high_isr@a,c
  2707  001086  D000               	goto	i2l1885
  2708  001088                     i2l1885:
  2709                           
  2710                           ;interrupts.c: 140: }
  2711                           ;interrupts.c: 142: if (ReverseCounter > 0) {
  2712  001088  BE14               	btfsc	_ReverseCounter+1,7,c
  2713  00108A  D008               	goto	i2l1889
  2714  00108C  5014               	movf	_ReverseCounter+1,w,c
  2715  00108E  E103               	bnz	i2u167_40
  2716  001090  0413               	decf	_ReverseCounter,w,c
  2717  001092  A0D8               	btfss	status,0,c
  2718  001094  D003               	goto	i2l1889
  2719  001096                     i2u167_40:
  2720                           
  2721                           ;interrupts.c: 143: Reversing();
  2722  001096  EC34  F010         	call	_Reversing	;wreg free
  2723                           
  2724                           ;interrupts.c: 144: }
  2725  00109A  D173               	goto	i2l93
  2726  00109C                     i2l1889:
  2727                           
  2728                           ;interrupts.c: 145: else if(ChangeRequired == 1 && RotateCounter == 0)
  2729  00109C  0427               	decf	_ChangeRequired,w,c
  2730  00109E  A4D8               	btfss	status,2,c
  2731  0010A0  D026               	goto	i2l1911
  2732  0010A2  5015               	movf	_RotateCounter,w,c
  2733  0010A4  1016               	iorwf	_RotateCounter+1,w,c
  2734  0010A6  A4D8               	btfss	status,2,c
  2735  0010A8  D022               	goto	i2l1911
  2736                           
  2737                           ;interrupts.c: 146: {
  2738                           ;interrupts.c: 147: if(sensorValue[2] < 300-50 && sensorValue[3] < 300-50)
  2739  0010AA  BE06               	btfsc	_sensorValue+5,7,c
  2740  0010AC  D006               	goto	i2l1895
  2741  0010AE  5006               	movf	_sensorValue+5,w,c
  2742  0010B0  E112               	bnz	i2l1903
  2743  0010B2  0EFA               	movlw	250
  2744  0010B4  5C05               	subwf	_sensorValue+4,w,c
  2745  0010B6  B0D8               	btfsc	status,0,c
  2746  0010B8  D00E               	goto	i2l1903
  2747  0010BA                     i2l1895:
  2748  0010BA  BE08               	btfsc	_sensorValue+7,7,c
  2749  0010BC  D006               	goto	i2l1897
  2750  0010BE  5008               	movf	_sensorValue+7,w,c
  2751  0010C0  E10A               	bnz	i2l1903
  2752  0010C2  0EFA               	movlw	250
  2753  0010C4  5C07               	subwf	_sensorValue+6,w,c
  2754  0010C6  B0D8               	btfsc	status,0,c
  2755  0010C8  D006               	goto	i2l1903
  2756  0010CA                     i2l1897:
  2757                           
  2758                           ;interrupts.c: 148: {
  2759                           ;interrupts.c: 149: if(justTurned == 1)
  2760  0010CA  042C               	decf	_justTurned,w,c
  2761                           
  2762                           ;interrupts.c: 151: else
  2763                           ;interrupts.c: 152: ForwardCounter = 350;
  2764                           
  2765                           ;interrupts.c: 150: ForwardCounter = 350;
  2766  0010CC  0E01               	movlw	1
  2767  0010CE  6E0C               	movwf	_ForwardCounter+1,c
  2768  0010D0  0E5E               	movlw	94
  2769  0010D2  D004               	goto	L7
  2770                           
  2771                           ;interrupts.c: 153: } else
  2772  0010D4  D005               	goto	i2l1905
  2773  0010D6                     i2l1903:
  2774                           
  2775                           ;interrupts.c: 154: ForwardCounter = 1;
  2776  0010D6  0E00               	movlw	0
  2777  0010D8  6E0C               	movwf	_ForwardCounter+1,c
  2778  0010DA  0E01               	movlw	1
  2779  0010DC                     L7:
  2780  0010DC  6E0B               	movwf	_ForwardCounter,c
  2781  0010DE  D000               	goto	i2l1905
  2782  0010E0                     i2l1905:
  2783                           
  2784                           ;interrupts.c: 155: forward();
  2785  0010E0  ECFE  F00F         	call	_forward	;wreg free
  2786                           
  2787                           ;interrupts.c: 156: pState = cState;
  2788  0010E4  C059  F05B         	movff	_cState,_pState
  2789                           
  2790                           ;interrupts.c: 157: ChangeRequired = 0;
  2791  0010E8  0E00               	movlw	0
  2792  0010EA  6E27               	movwf	_ChangeRequired,c
  2793                           
  2794                           ;interrupts.c: 158: }
  2795  0010EC  D14A               	goto	i2l93
  2796  0010EE                     i2l1911:
  2797                           
  2798                           ;interrupts.c: 159: else if(RotateCounter > 0) {
  2799  0010EE  BE16               	btfsc	_RotateCounter+1,7,c
  2800  0010F0  D04D               	goto	i2l1943
  2801  0010F2  5016               	movf	_RotateCounter+1,w,c
  2802  0010F4  E103               	bnz	i2u173_40
  2803  0010F6  0415               	decf	_RotateCounter,w,c
  2804  0010F8  A0D8               	btfss	status,0,c
  2805  0010FA  D048               	goto	i2l1943
  2806  0010FC                     i2u173_40:
  2807                           
  2808                           ;interrupts.c: 160: if ((sensorValue[2] > 800 || sensorValue[3] > 800))
  2809  0010FC  BE06               	btfsc	_sensorValue+5,7,c
  2810  0010FE  D006               	goto	i2l1915
  2811  001100  0E21               	movlw	33
  2812  001102  5C05               	subwf	_sensorValue+4,w,c
  2813  001104  0E03               	movlw	3
  2814  001106  5806               	subwfb	_sensorValue+5,w,c
  2815  001108  B0D8               	btfsc	status,0,c
  2816  00110A  D008               	goto	i2l1917
  2817  00110C                     i2l1915:
  2818  00110C  BE08               	btfsc	_sensorValue+7,7,c
  2819  00110E  D00D               	goto	i2l1921
  2820  001110  0E21               	movlw	33
  2821  001112  5C07               	subwf	_sensorValue+6,w,c
  2822  001114  0E03               	movlw	3
  2823  001116  5808               	subwfb	_sensorValue+7,w,c
  2824  001118  A0D8               	btfss	status,0,c
  2825  00111A  D007               	goto	i2l1921
  2826  00111C                     i2l1917:
  2827                           
  2828                           ;interrupts.c: 161: {
  2829                           ;interrupts.c: 162: ReverseCounter = 5;
  2830  00111C  0E00               	movlw	0
  2831  00111E  6E14               	movwf	_ReverseCounter+1,c
  2832  001120  0E05               	movlw	5
  2833  001122  6E13               	movwf	_ReverseCounter,c
  2834                           
  2835                           ;interrupts.c: 163: Reversing();
  2836  001124  EC34  F010         	call	_Reversing	;wreg free
  2837                           
  2838                           ;interrupts.c: 164: } else {
  2839  001128  D12C               	goto	i2l93
  2840  00112A                     i2l1921:
  2841                           
  2842                           ;interrupts.c: 165: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2843  00112A  BE06               	btfsc	_sensorValue+5,7,c
  2844  00112C  D006               	goto	i2l1923
  2845  00112E  5006               	movf	_sensorValue+5,w,c
  2846  001130  E114               	bnz	i2l1929
  2847  001132  0E64               	movlw	100
  2848  001134  5C05               	subwf	_sensorValue+4,w,c
  2849  001136  B0D8               	btfsc	status,0,c
  2850  001138  D010               	goto	i2l1929
  2851  00113A                     i2l1923:
  2852  00113A  BE08               	btfsc	_sensorValue+7,7,c
  2853  00113C  D006               	goto	i2l1925
  2854  00113E  5008               	movf	_sensorValue+7,w,c
  2855  001140  E10C               	bnz	i2l1929
  2856  001142  0E64               	movlw	100
  2857  001144  5C07               	subwf	_sensorValue+6,w,c
  2858  001146  B0D8               	btfsc	status,0,c
  2859  001148  D008               	goto	i2l1929
  2860  00114A                     i2l1925:
  2861  00114A  042B               	decf	_deadEnd,w,c
  2862  00114C  A4D8               	btfss	status,2,c
  2863  00114E  D005               	goto	i2l1929
  2864                           
  2865                           ;interrupts.c: 166: RotateCounter = 5;
  2866  001150  0E00               	movlw	0
  2867  001152  6E16               	movwf	_RotateCounter+1,c
  2868  001154  0E05               	movlw	5
  2869  001156  6E15               	movwf	_RotateCounter,c
  2870  001158  D000               	goto	i2l1929
  2871  00115A                     i2l1929:
  2872                           
  2873                           ;interrupts.c: 167: rotate(rotatingSide);
  2874  00115A  502D               	movf	_rotatingSide,w,c
  2875  00115C  EC5F  F00F         	call	_rotate
  2876                           
  2877                           ;interrupts.c: 168: TurnRight = 0;
  2878  001160  0E00               	movlw	0
  2879  001162  6E1A               	movwf	_TurnRight+1,c
  2880  001164  0E00               	movlw	0
  2881  001166  6E19               	movwf	_TurnRight,c
  2882                           
  2883                           ;interrupts.c: 169: TurnLeft = 0;
  2884  001168  0E00               	movlw	0
  2885  00116A  6E18               	movwf	_TurnLeft+1,c
  2886  00116C  0E00               	movlw	0
  2887  00116E  6E17               	movwf	_TurnLeft,c
  2888                           
  2889                           ;interrupts.c: 170: if(RotateCounter == 0)
  2890  001170  5015               	movf	_RotateCounter,w,c
  2891  001172  1016               	iorwf	_RotateCounter+1,w,c
  2892  001174  A4D8               	btfss	status,2,c
  2893  001176  D105               	goto	i2l93
  2894                           
  2895                           ;interrupts.c: 171: {
  2896                           ;interrupts.c: 172: justTurned = 1;
  2897  001178  0E01               	movlw	1
  2898  00117A  6E2C               	movwf	_justTurned,c
  2899                           
  2900                           ;interrupts.c: 173: if(deadEnd == 1)
  2901  00117C  042B               	decf	_deadEnd,w,c
  2902  00117E  A4D8               	btfss	status,2,c
  2903  001180  D100               	goto	i2l93
  2904                           
  2905                           ;interrupts.c: 174: {
  2906                           ;interrupts.c: 175: ReverseCounter = 5*5;
  2907  001182  0E00               	movlw	0
  2908  001184  6E14               	movwf	_ReverseCounter+1,c
  2909  001186  0E19               	movlw	25
  2910  001188  6E13               	movwf	_ReverseCounter,c
  2911                           
  2912                           ;interrupts.c: 176: }
  2913                           ;interrupts.c: 177: }
  2914                           ;interrupts.c: 178: }
  2915                           ;interrupts.c: 179: }
  2916  00118A  D0FB               	goto	i2l93
  2917  00118C                     i2l1943:
  2918                           
  2919                           ;interrupts.c: 180: else if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 
      +                          0)
  2920  00118C  BE20               	btfsc	_controlToLeft+1,7,c
  2921  00118E  D005               	goto	i2l1945
  2922  001190  5020               	movf	_controlToLeft+1,w,c
  2923  001192  E113               	bnz	i2l1949
  2924  001194  041F               	decf	_controlToLeft,w,c
  2925  001196  B0D8               	btfsc	status,0,c
  2926  001198  D010               	goto	i2l1949
  2927  00119A                     i2l1945:
  2928  00119A  BE22               	btfsc	_controlToRight+1,7,c
  2929  00119C  D005               	goto	i2l1947
  2930  00119E  5022               	movf	_controlToRight+1,w,c
  2931  0011A0  E10C               	bnz	i2l1949
  2932  0011A2  0421               	decf	_controlToRight,w,c
  2933  0011A4  B0D8               	btfsc	status,0,c
  2934  0011A6  D009               	goto	i2l1949
  2935  0011A8                     i2l1947:
  2936  0011A8  BE0C               	btfsc	_ForwardCounter+1,7,c
  2937  0011AA  D02C               	goto	i2l1965
  2938  0011AC  500C               	movf	_ForwardCounter+1,w,c
  2939  0011AE  E105               	bnz	i2l1949
  2940  0011B0  040B               	decf	_ForwardCounter,w,c
  2941  0011B2  B0D8               	btfsc	status,0,c
  2942  0011B4  D002               	goto	i2l1949
  2943  0011B6  D026               	goto	i2l1965
  2944  0011B8  D000               	goto	i2l1949
  2945  0011BA                     i2l1949:
  2946                           
  2947                           ;interrupts.c: 181: {
  2948                           ;interrupts.c: 182: KController();
  2949  0011BA  ECD3  F00E         	call	_KController	;wreg free
  2950                           
  2951                           ;interrupts.c: 184: if(controlToLeft > 0 )
  2952  0011BE  BE20               	btfsc	_controlToLeft+1,7,c
  2953  0011C0  D00E               	goto	i2l1957
  2954  0011C2  5020               	movf	_controlToLeft+1,w,c
  2955  0011C4  E103               	bnz	i2u184_40
  2956  0011C6  041F               	decf	_controlToLeft,w,c
  2957  0011C8  A0D8               	btfss	status,0,c
  2958  0011CA  D009               	goto	i2l1957
  2959  0011CC                     i2u184_40:
  2960                           
  2961                           ;interrupts.c: 185: {
  2962                           ;interrupts.c: 186: motorCounterUpdate(RIGHT,0);
  2963  0011CC  0E00               	movlw	0
  2964  0011CE  6E3F               	movwf	motorCounterUpdate@reverse,c
  2965  0011D0  0E01               	movlw	1
  2966  0011D2  ECF1  F00D         	call	_motorCounterUpdate
  2967                           
  2968                           ;interrupts.c: 187: controlToLeft--;
  2969  0011D6  061F               	decf	_controlToLeft,f,c
  2970  0011D8  A0D8               	btfss	status,0,c
  2971  0011DA  0620               	decf	_controlToLeft+1,f,c
  2972                           
  2973                           ;interrupts.c: 188: } else if(controlToRight > 0){
  2974  0011DC  D0D2               	goto	i2l93
  2975  0011DE                     i2l1957:
  2976  0011DE  BE22               	btfsc	_controlToRight+1,7,c
  2977  0011E0  D00E               	goto	i2l1963
  2978  0011E2  5022               	movf	_controlToRight+1,w,c
  2979  0011E4  E103               	bnz	i2u185_40
  2980  0011E6  0421               	decf	_controlToRight,w,c
  2981  0011E8  A0D8               	btfss	status,0,c
  2982  0011EA  D009               	goto	i2l1963
  2983  0011EC                     i2u185_40:
  2984                           
  2985                           ;interrupts.c: 189: motorCounterUpdate(LEFT,0);
  2986  0011EC  0E00               	movlw	0
  2987  0011EE  6E3F               	movwf	motorCounterUpdate@reverse,c
  2988  0011F0  0E00               	movlw	0
  2989  0011F2  ECF1  F00D         	call	_motorCounterUpdate
  2990                           
  2991                           ;interrupts.c: 190: controlToRight--;
  2992  0011F6  0621               	decf	_controlToRight,f,c
  2993  0011F8  A0D8               	btfss	status,0,c
  2994  0011FA  0622               	decf	_controlToRight+1,f,c
  2995                           
  2996                           ;interrupts.c: 191: } else {
  2997  0011FC  D0C2               	goto	i2l93
  2998  0011FE                     i2l1963:
  2999                           
  3000                           ;interrupts.c: 192: forward();
  3001  0011FE  ECFE  F00F         	call	_forward	;wreg free
  3002                           
  3003                           ;interrupts.c: 193: }
  3004                           ;interrupts.c: 195: } else if(ForwardCounter == 0)
  3005  001202  D0BF               	goto	i2l93
  3006  001204                     i2l1965:
  3007  001204  500B               	movf	_ForwardCounter,w,c
  3008  001206  100C               	iorwf	_ForwardCounter+1,w,c
  3009  001208  A4D8               	btfss	status,2,c
  3010  00120A  D0BB               	goto	i2l93
  3011                           
  3012                           ;interrupts.c: 196: {
  3013                           ;interrupts.c: 197: if(algorithm == LEFTWALL)
  3014  00120C  502A               	movf	_algorithm,w,c
  3015  00120E  A4D8               	btfss	status,2,c
  3016  001210  D05C               	goto	i2l2005
  3017                           
  3018                           ;interrupts.c: 198: {
  3019                           ;interrupts.c: 199: if(cState == empty)
  3020  001212  5059               	movf	_cState,w,c
  3021  001214  A4D8               	btfss	status,2,c
  3022  001216  D010               	goto	i2l1977
  3023                           
  3024                           ;interrupts.c: 200: if(justTurned == 0)
  3025  001218  502C               	movf	_justTurned,w,c
  3026  00121A  A4D8               	btfss	status,2,c
  3027  00121C  D008               	goto	i2l1975
  3028                           
  3029                           ;interrupts.c: 201: initialRotation(LEFT,0);
  3030  00121E  0E00               	movlw	0
  3031  001220  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3032  001222  0E00               	movlw	0
  3033  001224  6E42               	movwf	initialRotation@isDeadEnd,c
  3034  001226  0E00               	movlw	0
  3035  001228  ECCD  F00F         	call	_initialRotation
  3036  00122C  D0AA               	goto	i2l93
  3037  00122E                     i2l1975:
  3038                           
  3039                           ;interrupts.c: 202: else
  3040                           ;interrupts.c: 203: ForwardCounter = 350;
  3041  00122E  0E01               	movlw	1
  3042  001230  6E0C               	movwf	_ForwardCounter+1,c
  3043  001232  0E5E               	movlw	94
  3044  001234  6E0B               	movwf	_ForwardCounter,c
  3045  001236  D0A5               	goto	i2l93
  3046  001238                     i2l1977:
  3047                           
  3048                           ;interrupts.c: 204: else if(cState == twoside) singleForward();
  3049  001238  0E02               	movlw	2
  3050  00123A  1859               	xorwf	_cState,w,c
  3051  00123C  A4D8               	btfss	status,2,c
  3052  00123E  D003               	goto	i2l1981
  3053  001240  EC13  F010         	call	_singleForward	;wreg free
  3054  001244  D09E               	goto	i2l93
  3055  001246                     i2l1981:
  3056                           
  3057                           ;interrupts.c: 205: else if(cState == threeside) initialRotation(LEFT,1);
  3058  001246  0E03               	movlw	3
  3059  001248  1859               	xorwf	_cState,w,c
  3060  00124A  A4D8               	btfss	status,2,c
  3061  00124C  D008               	goto	i2l1985
  3062  00124E  0E00               	movlw	0
  3063  001250  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3064  001252  0E01               	movlw	1
  3065  001254  6E42               	movwf	initialRotation@isDeadEnd,c
  3066  001256  0E00               	movlw	0
  3067  001258  ECCD  F00F         	call	_initialRotation
  3068  00125C  D092               	goto	i2l93
  3069  00125E                     i2l1985:
  3070                           
  3071                           ;interrupts.c: 206: else if(cState == leftside) singleForward();
  3072  00125E  0E04               	movlw	4
  3073  001260  1859               	xorwf	_cState,w,c
  3074  001262  A4D8               	btfss	status,2,c
  3075  001264  D003               	goto	i2l1989
  3076  001266  EC13  F010         	call	_singleForward	;wreg free
  3077  00126A  D08B               	goto	i2l93
  3078  00126C                     i2l1989:
  3079                           
  3080                           ;interrupts.c: 207: else if(cState == rightside) initialRotation(LEFT,0);
  3081  00126C  0E05               	movlw	5
  3082  00126E  1859               	xorwf	_cState,w,c
  3083  001270  A4D8               	btfss	status,2,c
  3084  001272  D008               	goto	i2l1993
  3085  001274  0E00               	movlw	0
  3086  001276  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3087  001278  0E00               	movlw	0
  3088  00127A  6E42               	movwf	initialRotation@isDeadEnd,c
  3089  00127C  0E00               	movlw	0
  3090  00127E  ECCD  F00F         	call	_initialRotation
  3091  001282  D07F               	goto	i2l93
  3092  001284                     i2l1993:
  3093                           
  3094                           ;interrupts.c: 208: else if(cState == frontleft) initialRotation(RIGHT,0);
  3095  001284  0E06               	movlw	6
  3096  001286  1859               	xorwf	_cState,w,c
  3097  001288  A4D8               	btfss	status,2,c
  3098  00128A  D008               	goto	i2l1997
  3099  00128C  0E00               	movlw	0
  3100  00128E  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3101  001290  0E00               	movlw	0
  3102  001292  6E42               	movwf	initialRotation@isDeadEnd,c
  3103  001294  0E01               	movlw	1
  3104  001296  ECCD  F00F         	call	_initialRotation
  3105  00129A  D073               	goto	i2l93
  3106  00129C                     i2l1997:
  3107                           
  3108                           ;interrupts.c: 209: else if(cState == frontright) initialRotation(LEFT,0);
  3109  00129C  0E07               	movlw	7
  3110  00129E  1859               	xorwf	_cState,w,c
  3111  0012A0  A4D8               	btfss	status,2,c
  3112  0012A2  D008               	goto	i2l2001
  3113  0012A4  0E00               	movlw	0
  3114  0012A6  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3115  0012A8  0E00               	movlw	0
  3116  0012AA  6E42               	movwf	initialRotation@isDeadEnd,c
  3117  0012AC  0E00               	movlw	0
  3118  0012AE  ECCD  F00F         	call	_initialRotation
  3119  0012B2  D067               	goto	i2l93
  3120  0012B4                     i2l2001:
  3121                           
  3122                           ;interrupts.c: 210: else if(cState == front) initialRotation(LEFT,0);
  3123  0012B4  0459               	decf	_cState,w,c
  3124  0012B6  A4D8               	btfss	status,2,c
  3125  0012B8  D064               	goto	i2l93
  3126  0012BA  0E00               	movlw	0
  3127  0012BC  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3128  0012BE  0E00               	movlw	0
  3129  0012C0  6E42               	movwf	initialRotation@isDeadEnd,c
  3130  0012C2  0E00               	movlw	0
  3131  0012C4  ECCD  F00F         	call	_initialRotation
  3132                           
  3133                           ;interrupts.c: 211: } else {
  3134  0012C8  D05C               	goto	i2l93
  3135  0012CA                     i2l2005:
  3136                           
  3137                           ;interrupts.c: 212: if(cState == empty)
  3138  0012CA  5059               	movf	_cState,w,c
  3139  0012CC  A4D8               	btfss	status,2,c
  3140  0012CE  D010               	goto	i2l2013
  3141                           
  3142                           ;interrupts.c: 213: if(justTurned == 0)
  3143  0012D0  502C               	movf	_justTurned,w,c
  3144  0012D2  A4D8               	btfss	status,2,c
  3145  0012D4  D008               	goto	i2l2011
  3146                           
  3147                           ;interrupts.c: 214: initialRotation(RIGHT,0);
  3148  0012D6  0E00               	movlw	0
  3149  0012D8  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3150  0012DA  0E00               	movlw	0
  3151  0012DC  6E42               	movwf	initialRotation@isDeadEnd,c
  3152  0012DE  0E01               	movlw	1
  3153  0012E0  ECCD  F00F         	call	_initialRotation
  3154  0012E4  D04E               	goto	i2l93
  3155  0012E6                     i2l2011:
  3156                           
  3157                           ;interrupts.c: 215: else
  3158                           ;interrupts.c: 216: ForwardCounter = 350;
  3159  0012E6  0E01               	movlw	1
  3160  0012E8  6E0C               	movwf	_ForwardCounter+1,c
  3161  0012EA  0E5E               	movlw	94
  3162  0012EC  6E0B               	movwf	_ForwardCounter,c
  3163  0012EE  D049               	goto	i2l93
  3164  0012F0                     i2l2013:
  3165                           
  3166                           ;interrupts.c: 217: else if(cState == twoside) singleForward();
  3167  0012F0  0E02               	movlw	2
  3168  0012F2  1859               	xorwf	_cState,w,c
  3169  0012F4  A4D8               	btfss	status,2,c
  3170  0012F6  D003               	goto	i2l2017
  3171  0012F8  EC13  F010         	call	_singleForward	;wreg free
  3172  0012FC  D042               	goto	i2l93
  3173  0012FE                     i2l2017:
  3174                           
  3175                           ;interrupts.c: 218: else if(cState == threeside) initialRotation(RIGHT,1);
  3176  0012FE  0E03               	movlw	3
  3177  001300  1859               	xorwf	_cState,w,c
  3178  001302  A4D8               	btfss	status,2,c
  3179  001304  D008               	goto	i2l2021
  3180  001306  0E00               	movlw	0
  3181  001308  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3182  00130A  0E01               	movlw	1
  3183  00130C  6E42               	movwf	initialRotation@isDeadEnd,c
  3184  00130E  0E01               	movlw	1
  3185  001310  ECCD  F00F         	call	_initialRotation
  3186  001314  D036               	goto	i2l93
  3187  001316                     i2l2021:
  3188                           
  3189                           ;interrupts.c: 219: else if(cState == leftside) initialRotation(RIGHT,0);
  3190  001316  0E04               	movlw	4
  3191  001318  1859               	xorwf	_cState,w,c
  3192  00131A  A4D8               	btfss	status,2,c
  3193  00131C  D008               	goto	i2l2025
  3194  00131E  0E00               	movlw	0
  3195  001320  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3196  001322  0E00               	movlw	0
  3197  001324  6E42               	movwf	initialRotation@isDeadEnd,c
  3198  001326  0E01               	movlw	1
  3199  001328  ECCD  F00F         	call	_initialRotation
  3200  00132C  D02A               	goto	i2l93
  3201  00132E                     i2l2025:
  3202                           
  3203                           ;interrupts.c: 220: else if(cState == rightside) singleForward();
  3204  00132E  0E05               	movlw	5
  3205  001330  1859               	xorwf	_cState,w,c
  3206  001332  A4D8               	btfss	status,2,c
  3207  001334  D003               	goto	i2l2029
  3208  001336  EC13  F010         	call	_singleForward	;wreg free
  3209  00133A  D023               	goto	i2l93
  3210  00133C                     i2l2029:
  3211                           
  3212                           ;interrupts.c: 221: else if(cState == frontleft) initialRotation(RIGHT,0);
  3213  00133C  0E06               	movlw	6
  3214  00133E  1859               	xorwf	_cState,w,c
  3215  001340  A4D8               	btfss	status,2,c
  3216  001342  D008               	goto	i2l2033
  3217  001344  0E00               	movlw	0
  3218  001346  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3219  001348  0E00               	movlw	0
  3220  00134A  6E42               	movwf	initialRotation@isDeadEnd,c
  3221  00134C  0E01               	movlw	1
  3222  00134E  ECCD  F00F         	call	_initialRotation
  3223  001352  D017               	goto	i2l93
  3224  001354                     i2l2033:
  3225                           
  3226                           ;interrupts.c: 222: else if(cState == frontright) initialRotation(LEFT,0);
  3227  001354  0E07               	movlw	7
  3228  001356  1859               	xorwf	_cState,w,c
  3229  001358  A4D8               	btfss	status,2,c
  3230  00135A  D008               	goto	i2l2037
  3231  00135C  0E00               	movlw	0
  3232  00135E  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3233  001360  0E00               	movlw	0
  3234  001362  6E42               	movwf	initialRotation@isDeadEnd,c
  3235  001364  0E00               	movlw	0
  3236  001366  ECCD  F00F         	call	_initialRotation
  3237  00136A  D00B               	goto	i2l93
  3238  00136C                     i2l2037:
  3239                           
  3240                           ;interrupts.c: 223: else if(cState == front) initialRotation(RIGHT,0);
  3241  00136C  0459               	decf	_cState,w,c
  3242  00136E  A4D8               	btfss	status,2,c
  3243  001370  D008               	goto	i2l93
  3244  001372  0E00               	movlw	0
  3245  001374  6E43               	movwf	initialRotation@isDeadEnd+1,c
  3246  001376  0E00               	movlw	0
  3247  001378  6E42               	movwf	initialRotation@isDeadEnd,c
  3248  00137A  0E01               	movlw	1
  3249  00137C  ECCD  F00F         	call	_initialRotation
  3250  001380  D000               	goto	i2l93
  3251  001382                     i2l93:
  3252                           
  3253                           ;interrupts.c: 224: }
  3254                           ;interrupts.c: 225: }
  3255                           ;interrupts.c: 227: moveMouse(merge(LMotorCounter,RMotorCounter));
  3256  001382  C029  F03F         	movff	_RMotorCounter,merge@right
  3257  001386  5028               	movf	_LMotorCounter,w,c
  3258  001388  EC42  F010         	call	_merge
  3259  00138C  EC4F  F010         	call	_moveMouse
  3260                           
  3261                           ;interrupts.c: 228: MotorDelayCounter = 0;
  3262  001390  0E00               	movlw	0
  3263  001392  6E10               	movwf	_MotorDelayCounter+1,c
  3264  001394  0E00               	movlw	0
  3265  001396  6E0F               	movwf	_MotorDelayCounter,c
  3266  001398  D000               	goto	i2l2043
  3267  00139A                     i2l2043:
  3268                           
  3269                           ;interrupts.c: 229: }
  3270                           ;interrupts.c: 231: MotorDelayCounter++;
  3271  00139A  4A0F               	infsnz	_MotorDelayCounter,f,c
  3272  00139C  2A10               	incf	_MotorDelayCounter+1,f,c
  3273                           
  3274                           ;interrupts.c: 232: INTCONbits.TMR0IF = 0;
  3275  00139E  94F2               	bcf	intcon,2,c	;volatile
  3276  0013A0  D000               	goto	i2l154
  3277  0013A2                     i2l154:
  3278  0013A2  C055  FFF5         	movff	??_high_isr+16,tablat
  3279  0013A6  C054  FFF8         	movff	??_high_isr+15,tblptru
  3280  0013AA  C053  FFF7         	movff	??_high_isr+14,tblptrh
  3281  0013AE  C052  FFF6         	movff	??_high_isr+13,tblptrl
  3282  0013B2  C051  FFF4         	movff	??_high_isr+12,prodh
  3283  0013B6  C050  FFF3         	movff	??_high_isr+11,prodl
  3284  0013BA  C04F  FFDA         	movff	??_high_isr+10,fsr2h
  3285  0013BE  C04E  FFD9         	movff	??_high_isr+9,fsr2l
  3286  0013C2  C04D  FFE2         	movff	??_high_isr+8,fsr1h
  3287  0013C6  C04C  FFE1         	movff	??_high_isr+7,fsr1l
  3288  0013CA  C04B  FFEA         	movff	??_high_isr+6,fsr0h
  3289  0013CE  C04A  FFE9         	movff	??_high_isr+5,fsr0l
  3290  0013D2  C049  FFFB         	movff	??_high_isr+4,pclatu
  3291  0013D6  C048  FFFA         	movff	??_high_isr+3,pclath
  3292  0013DA  0011               	retfie		f
  3293  0013DC                     __end_of_high_isr:
  3294                           	opt stack 0
  3295                           pclatu	equ	0xFFB
  3296                           pclath	equ	0xFFA
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon2	equ	0xFF1
  3305                           postinc0	equ	0xFEE
  3306                           fsr0h	equ	0xFEA
  3307                           fsr0l	equ	0xFE9
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1h	equ	0xFE2
  3311                           fsr1l	equ	0xFE1
  3312                           bsr	equ	0xFE0
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           plusw2	equ	0xFDB
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8
  3319                           
  3320 ;; *************** function _stateUpdate *****************
  3321 ;; Defined at:
  3322 ;;		line 454 in file "interrupts.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;		None               void
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;Total ram usage:        0 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_high_isr
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text14
  3350  0017A4                     __ptext14:
  3351                           	opt stack 0
  3352  0017A4                     _stateUpdate:
  3353                           	opt stack 25
  3354                           
  3355                           ;interrupts.c: 456: if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3356                           ;interrupts.c: 457: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3357                           
  3358                           ;incstack = 0
  3359  0017A4  BE02               	btfsc	_sensorValue+1,7,c
  3360  0017A6  D006               	goto	i2l1187
  3361  0017A8  5002               	movf	_sensorValue+1,w,c
  3362  0017AA  E11E               	bnz	i2l1195
  3363  0017AC  0EC8               	movlw	200
  3364  0017AE  5C01               	subwf	_sensorValue,w,c
  3365  0017B0  B0D8               	btfsc	status,0,c
  3366  0017B2  D01A               	goto	i2l1195
  3367  0017B4                     i2l1187:
  3368  0017B4  BE04               	btfsc	_sensorValue+3,7,c
  3369  0017B6  D006               	goto	i2l1189
  3370  0017B8  5004               	movf	_sensorValue+3,w,c
  3371  0017BA  E116               	bnz	i2l1195
  3372  0017BC  0EC8               	movlw	200
  3373  0017BE  5C03               	subwf	_sensorValue+2,w,c
  3374  0017C0  B0D8               	btfsc	status,0,c
  3375  0017C2  D012               	goto	i2l1195
  3376  0017C4                     i2l1189:
  3377  0017C4  BE06               	btfsc	_sensorValue+5,7,c
  3378  0017C6  D006               	goto	i2l1191
  3379  0017C8  0E2C               	movlw	44
  3380  0017CA  5C05               	subwf	_sensorValue+4,w,c
  3381  0017CC  0E01               	movlw	1
  3382  0017CE  5806               	subwfb	_sensorValue+5,w,c
  3383  0017D0  B0D8               	btfsc	status,0,c
  3384  0017D2  D00A               	goto	i2l1195
  3385  0017D4                     i2l1191:
  3386  0017D4  BE08               	btfsc	_sensorValue+7,7,c
  3387  0017D6  D006               	goto	i2l1193
  3388  0017D8  0E2C               	movlw	44
  3389  0017DA  5C07               	subwf	_sensorValue+6,w,c
  3390  0017DC  0E01               	movlw	1
  3391  0017DE  5808               	subwfb	_sensorValue+7,w,c
  3392  0017E0  B0D8               	btfsc	status,0,c
  3393  0017E2  D002               	goto	i2l1195
  3394  0017E4                     i2l1193:
  3395                           
  3396                           ;interrupts.c: 458: cState = empty;
  3397  0017E4  0E00               	movlw	0
  3398  0017E6  D0E9               	goto	L14
  3399  0017E8                     i2l1195:
  3400                           
  3401                           ;interrupts.c: 459: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3402                           ;interrupts.c: 460: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3403  0017E8  BE02               	btfsc	_sensorValue+1,7,c
  3404  0017EA  D020               	goto	i2l1205
  3405  0017EC  5002               	movf	_sensorValue+1,w,c
  3406  0017EE  E104               	bnz	i2u36_40
  3407  0017F0  0EC9               	movlw	201
  3408  0017F2  5C01               	subwf	_sensorValue,w,c
  3409  0017F4  A0D8               	btfss	status,0,c
  3410  0017F6  D01A               	goto	i2l1205
  3411  0017F8                     i2u36_40:
  3412  0017F8  BE04               	btfsc	_sensorValue+3,7,c
  3413  0017FA  D018               	goto	i2l1205
  3414  0017FC  5004               	movf	_sensorValue+3,w,c
  3415  0017FE  E104               	bnz	i2u37_40
  3416  001800  0EC9               	movlw	201
  3417  001802  5C03               	subwf	_sensorValue+2,w,c
  3418  001804  A0D8               	btfss	status,0,c
  3419  001806  D012               	goto	i2l1205
  3420  001808                     i2u37_40:
  3421  001808  BE06               	btfsc	_sensorValue+5,7,c
  3422  00180A  D006               	goto	i2l1201
  3423  00180C  0E2C               	movlw	44
  3424  00180E  5C05               	subwf	_sensorValue+4,w,c
  3425  001810  0E01               	movlw	1
  3426  001812  5806               	subwfb	_sensorValue+5,w,c
  3427  001814  B0D8               	btfsc	status,0,c
  3428  001816  D00A               	goto	i2l1205
  3429  001818                     i2l1201:
  3430  001818  BE08               	btfsc	_sensorValue+7,7,c
  3431  00181A  D006               	goto	i2l1203
  3432  00181C  0E2C               	movlw	44
  3433  00181E  5C07               	subwf	_sensorValue+6,w,c
  3434  001820  0E01               	movlw	1
  3435  001822  5808               	subwfb	_sensorValue+7,w,c
  3436  001824  B0D8               	btfsc	status,0,c
  3437  001826  D002               	goto	i2l1205
  3438  001828                     i2l1203:
  3439                           
  3440                           ;interrupts.c: 461: cState = twoside;
  3441  001828  0E02               	movlw	2
  3442  00182A  D0C7               	goto	L14
  3443  00182C                     i2l1205:
  3444                           
  3445                           ;interrupts.c: 462: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3446                           ;interrupts.c: 463: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3447  00182C  BE02               	btfsc	_sensorValue+1,7,c
  3448  00182E  D01F               	goto	i2l1215
  3449  001830  5002               	movf	_sensorValue+1,w,c
  3450  001832  E104               	bnz	i2u40_40
  3451  001834  0EC9               	movlw	201
  3452  001836  5C01               	subwf	_sensorValue,w,c
  3453  001838  A0D8               	btfss	status,0,c
  3454  00183A  D019               	goto	i2l1215
  3455  00183C                     i2u40_40:
  3456  00183C  BE04               	btfsc	_sensorValue+3,7,c
  3457  00183E  D017               	goto	i2l1215
  3458  001840  5004               	movf	_sensorValue+3,w,c
  3459  001842  E104               	bnz	i2u41_40
  3460  001844  0EC9               	movlw	201
  3461  001846  5C03               	subwf	_sensorValue+2,w,c
  3462  001848  A0D8               	btfss	status,0,c
  3463  00184A  D011               	goto	i2l1215
  3464  00184C                     i2u41_40:
  3465  00184C  BE06               	btfsc	_sensorValue+5,7,c
  3466  00184E  D00F               	goto	i2l1215
  3467  001850  0E2D               	movlw	45
  3468  001852  5C05               	subwf	_sensorValue+4,w,c
  3469  001854  0E01               	movlw	1
  3470  001856  5806               	subwfb	_sensorValue+5,w,c
  3471  001858  B0D8               	btfsc	status,0,c
  3472  00185A  BE08               	btfsc	_sensorValue+7,7,c
  3473  00185C  D008               	goto	i2l1215
  3474  00185E  0E2D               	movlw	45
  3475  001860  5C07               	subwf	_sensorValue+6,w,c
  3476  001862  0E01               	movlw	1
  3477  001864  5808               	subwfb	_sensorValue+7,w,c
  3478  001866  A0D8               	btfss	status,0,c
  3479  001868  D002               	goto	i2l1215
  3480                           
  3481                           ;interrupts.c: 464: cState = threeside;
  3482  00186A  0E03               	movlw	3
  3483  00186C  D0A6               	goto	L14
  3484  00186E                     i2l1215:
  3485                           
  3486                           ;interrupts.c: 465: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3487                           ;interrupts.c: 466: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3488  00186E  BE02               	btfsc	_sensorValue+1,7,c
  3489  001870  D020               	goto	i2l1225
  3490  001872  5002               	movf	_sensorValue+1,w,c
  3491  001874  E104               	bnz	i2u44_40
  3492  001876  0EC9               	movlw	201
  3493  001878  5C01               	subwf	_sensorValue,w,c
  3494  00187A  A0D8               	btfss	status,0,c
  3495  00187C  D01A               	goto	i2l1225
  3496  00187E                     i2u44_40:
  3497  00187E  BE04               	btfsc	_sensorValue+3,7,c
  3498  001880  D006               	goto	i2l1219
  3499  001882  5004               	movf	_sensorValue+3,w,c
  3500  001884  E116               	bnz	i2l1225
  3501  001886  0EC8               	movlw	200
  3502  001888  5C03               	subwf	_sensorValue+2,w,c
  3503  00188A  B0D8               	btfsc	status,0,c
  3504  00188C  D012               	goto	i2l1225
  3505  00188E                     i2l1219:
  3506  00188E  BE06               	btfsc	_sensorValue+5,7,c
  3507  001890  D006               	goto	i2l1221
  3508  001892  0E2C               	movlw	44
  3509  001894  5C05               	subwf	_sensorValue+4,w,c
  3510  001896  0E01               	movlw	1
  3511  001898  5806               	subwfb	_sensorValue+5,w,c
  3512  00189A  B0D8               	btfsc	status,0,c
  3513  00189C  D00A               	goto	i2l1225
  3514  00189E                     i2l1221:
  3515  00189E  BE08               	btfsc	_sensorValue+7,7,c
  3516  0018A0  D006               	goto	i2l1223
  3517  0018A2  0E2C               	movlw	44
  3518  0018A4  5C07               	subwf	_sensorValue+6,w,c
  3519  0018A6  0E01               	movlw	1
  3520  0018A8  5808               	subwfb	_sensorValue+7,w,c
  3521  0018AA  B0D8               	btfsc	status,0,c
  3522  0018AC  D002               	goto	i2l1225
  3523  0018AE                     i2l1223:
  3524                           
  3525                           ;interrupts.c: 467: cState = leftside;
  3526  0018AE  0E04               	movlw	4
  3527  0018B0  D084               	goto	L14
  3528  0018B2                     i2l1225:
  3529                           
  3530                           ;interrupts.c: 468: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3531                           ;interrupts.c: 469: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3532  0018B2  BE02               	btfsc	_sensorValue+1,7,c
  3533  0018B4  D006               	goto	i2l1227
  3534  0018B6  5002               	movf	_sensorValue+1,w,c
  3535  0018B8  E11E               	bnz	i2l1235
  3536  0018BA  0EC8               	movlw	200
  3537  0018BC  5C01               	subwf	_sensorValue,w,c
  3538  0018BE  B0D8               	btfsc	status,0,c
  3539  0018C0  D01A               	goto	i2l1235
  3540  0018C2                     i2l1227:
  3541  0018C2  BE04               	btfsc	_sensorValue+3,7,c
  3542  0018C4  D018               	goto	i2l1235
  3543  0018C6  5004               	movf	_sensorValue+3,w,c
  3544  0018C8  E104               	bnz	i2u49_40
  3545  0018CA  0EC9               	movlw	201
  3546  0018CC  5C03               	subwf	_sensorValue+2,w,c
  3547  0018CE  A0D8               	btfss	status,0,c
  3548  0018D0  D012               	goto	i2l1235
  3549  0018D2                     i2u49_40:
  3550  0018D2  BE06               	btfsc	_sensorValue+5,7,c
  3551  0018D4  D006               	goto	i2l1231
  3552  0018D6  0E2C               	movlw	44
  3553  0018D8  5C05               	subwf	_sensorValue+4,w,c
  3554  0018DA  0E01               	movlw	1
  3555  0018DC  5806               	subwfb	_sensorValue+5,w,c
  3556  0018DE  B0D8               	btfsc	status,0,c
  3557  0018E0  D00A               	goto	i2l1235
  3558  0018E2                     i2l1231:
  3559  0018E2  BE08               	btfsc	_sensorValue+7,7,c
  3560  0018E4  D006               	goto	i2l1233
  3561  0018E6  0E2C               	movlw	44
  3562  0018E8  5C07               	subwf	_sensorValue+6,w,c
  3563  0018EA  0E01               	movlw	1
  3564  0018EC  5808               	subwfb	_sensorValue+7,w,c
  3565  0018EE  B0D8               	btfsc	status,0,c
  3566  0018F0  D002               	goto	i2l1235
  3567  0018F2                     i2l1233:
  3568                           
  3569                           ;interrupts.c: 470: cState = rightside;
  3570  0018F2  0E05               	movlw	5
  3571  0018F4  D062               	goto	L14
  3572  0018F6                     i2l1235:
  3573                           
  3574                           ;interrupts.c: 471: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3575                           ;interrupts.c: 472: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3576  0018F6  BE02               	btfsc	_sensorValue+1,7,c
  3577  0018F8  D01F               	goto	i2l1245
  3578  0018FA  5002               	movf	_sensorValue+1,w,c
  3579  0018FC  E104               	bnz	i2u52_40
  3580  0018FE  0EC9               	movlw	201
  3581  001900  5C01               	subwf	_sensorValue,w,c
  3582  001902  A0D8               	btfss	status,0,c
  3583  001904  D019               	goto	i2l1245
  3584  001906                     i2u52_40:
  3585  001906  BE04               	btfsc	_sensorValue+3,7,c
  3586  001908  D006               	goto	i2l1239
  3587  00190A  5004               	movf	_sensorValue+3,w,c
  3588  00190C  E115               	bnz	i2l1245
  3589  00190E  0EC8               	movlw	200
  3590  001910  5C03               	subwf	_sensorValue+2,w,c
  3591  001912  B0D8               	btfsc	status,0,c
  3592  001914  D011               	goto	i2l1245
  3593  001916                     i2l1239:
  3594  001916  BE06               	btfsc	_sensorValue+5,7,c
  3595  001918  D00F               	goto	i2l1245
  3596  00191A  0E2D               	movlw	45
  3597  00191C  5C05               	subwf	_sensorValue+4,w,c
  3598  00191E  0E01               	movlw	1
  3599  001920  5806               	subwfb	_sensorValue+5,w,c
  3600  001922  B0D8               	btfsc	status,0,c
  3601  001924  BE08               	btfsc	_sensorValue+7,7,c
  3602  001926  D008               	goto	i2l1245
  3603  001928  0E2D               	movlw	45
  3604  00192A  5C07               	subwf	_sensorValue+6,w,c
  3605  00192C  0E01               	movlw	1
  3606  00192E  5808               	subwfb	_sensorValue+7,w,c
  3607  001930  A0D8               	btfss	status,0,c
  3608  001932  D002               	goto	i2l1245
  3609                           
  3610                           ;interrupts.c: 473: cState = frontleft;
  3611  001934  0E06               	movlw	6
  3612  001936  D041               	goto	L14
  3613  001938                     i2l1245:
  3614                           
  3615                           ;interrupts.c: 474: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3616                           ;interrupts.c: 475: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3617  001938  BE02               	btfsc	_sensorValue+1,7,c
  3618  00193A  D006               	goto	i2l1247
  3619  00193C  5002               	movf	_sensorValue+1,w,c
  3620  00193E  E11D               	bnz	i2l1255
  3621  001940  0EC8               	movlw	200
  3622  001942  5C01               	subwf	_sensorValue,w,c
  3623  001944  B0D8               	btfsc	status,0,c
  3624  001946  D019               	goto	i2l1255
  3625  001948                     i2l1247:
  3626  001948  BE04               	btfsc	_sensorValue+3,7,c
  3627  00194A  D017               	goto	i2l1255
  3628  00194C  5004               	movf	_sensorValue+3,w,c
  3629  00194E  E104               	bnz	i2u57_40
  3630  001950  0EC9               	movlw	201
  3631  001952  5C03               	subwf	_sensorValue+2,w,c
  3632  001954  A0D8               	btfss	status,0,c
  3633  001956  D011               	goto	i2l1255
  3634  001958                     i2u57_40:
  3635  001958  BE06               	btfsc	_sensorValue+5,7,c
  3636  00195A  D00F               	goto	i2l1255
  3637  00195C  0E2D               	movlw	45
  3638  00195E  5C05               	subwf	_sensorValue+4,w,c
  3639  001960  0E01               	movlw	1
  3640  001962  5806               	subwfb	_sensorValue+5,w,c
  3641  001964  B0D8               	btfsc	status,0,c
  3642  001966  BE08               	btfsc	_sensorValue+7,7,c
  3643  001968  D008               	goto	i2l1255
  3644  00196A  0E2D               	movlw	45
  3645  00196C  5C07               	subwf	_sensorValue+6,w,c
  3646  00196E  0E01               	movlw	1
  3647  001970  5808               	subwfb	_sensorValue+7,w,c
  3648  001972  A0D8               	btfss	status,0,c
  3649  001974  D002               	goto	i2l1255
  3650                           
  3651                           ;interrupts.c: 476: cState = frontright;
  3652  001976  0E07               	movlw	7
  3653  001978  D020               	goto	L14
  3654  00197A                     i2l1255:
  3655                           
  3656                           ;interrupts.c: 477: else if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3657                           ;interrupts.c: 478: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3658  00197A  BE02               	btfsc	_sensorValue+1,7,c
  3659  00197C  D006               	goto	i2l1257
  3660  00197E  5002               	movf	_sensorValue+1,w,c
  3661  001980  E11E               	bnz	i2l261
  3662  001982  0EC8               	movlw	200
  3663  001984  5C01               	subwf	_sensorValue,w,c
  3664  001986  B0D8               	btfsc	status,0,c
  3665  001988  D01A               	goto	i2l261
  3666  00198A                     i2l1257:
  3667  00198A  BE04               	btfsc	_sensorValue+3,7,c
  3668  00198C  D006               	goto	i2l1259
  3669  00198E  5004               	movf	_sensorValue+3,w,c
  3670  001990  E116               	bnz	i2l261
  3671  001992  0EC8               	movlw	200
  3672  001994  5C03               	subwf	_sensorValue+2,w,c
  3673  001996  B0D8               	btfsc	status,0,c
  3674  001998  D012               	goto	i2l261
  3675  00199A                     i2l1259:
  3676  00199A  BE06               	btfsc	_sensorValue+5,7,c
  3677  00199C  D010               	goto	i2l261
  3678  00199E  0E2D               	movlw	45
  3679  0019A0  5C05               	subwf	_sensorValue+4,w,c
  3680  0019A2  0E01               	movlw	1
  3681  0019A4  5806               	subwfb	_sensorValue+5,w,c
  3682  0019A6  B0D8               	btfsc	status,0,c
  3683  0019A8  BE08               	btfsc	_sensorValue+7,7,c
  3684  0019AA  D009               	goto	i2l261
  3685  0019AC  0E2D               	movlw	45
  3686  0019AE  5C07               	subwf	_sensorValue+6,w,c
  3687  0019B0  0E01               	movlw	1
  3688  0019B2  5808               	subwfb	_sensorValue+7,w,c
  3689  0019B4  A0D8               	btfss	status,0,c
  3690  0019B6  D003               	goto	i2l261
  3691                           
  3692                           ;interrupts.c: 479: cState = front;
  3693  0019B8  0E01               	movlw	1
  3694  0019BA                     L14:
  3695  0019BA  6E59               	movwf	_cState,c
  3696  0019BC  D000               	goto	i2l261
  3697  0019BE                     i2l261:
  3698  0019BE  0012               	return		;funcret
  3699  0019C0                     __end_of_stateUpdate:
  3700                           	opt stack 0
  3701                           pclatu	equ	0xFFB
  3702                           pclath	equ	0xFFA
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           intcon2	equ	0xFF1
  3711                           postinc0	equ	0xFEE
  3712                           fsr0h	equ	0xFEA
  3713                           fsr0l	equ	0xFE9
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1h	equ	0xFE2
  3717                           fsr1l	equ	0xFE1
  3718                           bsr	equ	0xFE0
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           plusw2	equ	0xFDB
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _singleForward *****************
  3727 ;; Defined at:
  3728 ;;		line 423 in file "interrupts.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;		None               void
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    2
  3749 ;; This function calls:
  3750 ;;		_forward
  3751 ;; This function is called by:
  3752 ;;		_high_isr
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text15
  3757  002026                     __ptext15:
  3758                           	opt stack 0
  3759  002026                     _singleForward:
  3760                           	opt stack 23
  3761                           
  3762                           ;interrupts.c: 425: MOTORDELAYMAX = 2;
  3763                           
  3764                           ;incstack = 0
  3765  002026  0E02               	movlw	2
  3766  002028  6E58               	movwf	_MOTORDELAYMAX,c
  3767                           
  3768                           ;interrupts.c: 426: if(ForwardCounter == 0 || ForwardCounter == 1)
  3769  00202A  500B               	movf	_ForwardCounter,w,c
  3770  00202C  100C               	iorwf	_ForwardCounter+1,w,c
  3771  00202E  B4D8               	btfsc	status,2,c
  3772  002030  D004               	goto	i2l1801
  3773  002032  040B               	decf	_ForwardCounter,w,c
  3774  002034  100C               	iorwf	_ForwardCounter+1,w,c
  3775  002036  A4D8               	btfss	status,2,c
  3776  002038  D007               	goto	i2l238
  3777  00203A                     i2l1801:
  3778                           
  3779                           ;interrupts.c: 427: {
  3780                           ;interrupts.c: 428: ForwardCounter = 1;
  3781  00203A  0E00               	movlw	0
  3782  00203C  6E0C               	movwf	_ForwardCounter+1,c
  3783  00203E  0E01               	movlw	1
  3784  002040  6E0B               	movwf	_ForwardCounter,c
  3785                           
  3786                           ;interrupts.c: 429: forward();
  3787  002042  ECFE  F00F         	call	_forward	;wreg free
  3788  002046  D000               	goto	i2l238
  3789  002048                     i2l238:
  3790  002048  0012               	return		;funcret
  3791  00204A                     __end_of_singleForward:
  3792                           	opt stack 0
  3793                           pclatu	equ	0xFFB
  3794                           pclath	equ	0xFFA
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           intcon2	equ	0xFF1
  3803                           postinc0	equ	0xFEE
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1h	equ	0xFE2
  3809                           fsr1l	equ	0xFE1
  3810                           bsr	equ	0xFE0
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           plusw2	equ	0xFDB
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _forward *****************
  3819 ;; Defined at:
  3820 ;;		line 413 in file "interrupts.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;		None               void
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    1
  3841 ;; This function calls:
  3842 ;;		_motorCounterUpdate
  3843 ;; This function is called by:
  3844 ;;		_high_isr
  3845 ;;		_singleForward
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text16
  3850  001FFC                     __ptext16:
  3851                           	opt stack 0
  3852  001FFC                     _forward:
  3853                           	opt stack 23
  3854                           
  3855                           ;interrupts.c: 415: motorCounterUpdate(RIGHT,0);
  3856                           
  3857                           ;incstack = 0
  3858  001FFC  0E00               	movlw	0
  3859  001FFE  6E3F               	movwf	motorCounterUpdate@reverse,c
  3860  002000  0E01               	movlw	1
  3861  002002  ECF1  F00D         	call	_motorCounterUpdate
  3862                           
  3863                           ;interrupts.c: 416: motorCounterUpdate(LEFT,0);
  3864  002006  0E00               	movlw	0
  3865  002008  6E3F               	movwf	motorCounterUpdate@reverse,c
  3866  00200A  0E00               	movlw	0
  3867  00200C  ECF1  F00D         	call	_motorCounterUpdate
  3868                           
  3869                           ;interrupts.c: 417: ForwardCounter--;
  3870  002010  060B               	decf	_ForwardCounter,f,c
  3871  002012  A0D8               	btfss	status,0,c
  3872  002014  060C               	decf	_ForwardCounter+1,f,c
  3873                           
  3874                           ;interrupts.c: 418: if(ForwardCounter == 0)
  3875  002016  500B               	movf	_ForwardCounter,w,c
  3876  002018  100C               	iorwf	_ForwardCounter+1,w,c
  3877  00201A  A4D8               	btfss	status,2,c
  3878  00201C  D003               	goto	i2l232
  3879                           
  3880                           ;interrupts.c: 419: justTurned = 0;
  3881  00201E  0E00               	movlw	0
  3882  002020  6E2C               	movwf	_justTurned,c
  3883  002022  D000               	goto	i2l232
  3884  002024                     i2l232:
  3885  002024  0012               	return		;funcret
  3886  002026                     __end_of_forward:
  3887                           	opt stack 0
  3888                           pclatu	equ	0xFFB
  3889                           pclath	equ	0xFFA
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           intcon	equ	0xFF2
  3897                           intcon2	equ	0xFF1
  3898                           postinc0	equ	0xFEE
  3899                           fsr0h	equ	0xFEA
  3900                           fsr0l	equ	0xFE9
  3901                           wreg	equ	0xFE8
  3902                           postdec1	equ	0xFE5
  3903                           fsr1h	equ	0xFE2
  3904                           fsr1l	equ	0xFE1
  3905                           bsr	equ	0xFE0
  3906                           postinc2	equ	0xFDE
  3907                           postdec2	equ	0xFDD
  3908                           plusw2	equ	0xFDB
  3909                           fsr2h	equ	0xFDA
  3910                           fsr2l	equ	0xFD9
  3911                           status	equ	0xFD8
  3912                           
  3913 ;; *************** function _moveMouse *****************
  3914 ;; Defined at:
  3915 ;;		line 329 in file "interrupts.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  action          1    wreg     unsigned char 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  action          1   17[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;		None               void
  3922 ;; Registers used:
  3923 ;;		wreg
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;Total ram usage:        1 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_high_isr
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text17
  3943  00209E                     __ptext17:
  3944                           	opt stack 0
  3945  00209E                     _moveMouse:
  3946                           	opt stack 25
  3947                           
  3948                           ;incstack = 0
  3949                           ;moveMouse@action stored from wreg
  3950  00209E  6E3F               	movwf	moveMouse@action,c
  3951                           
  3952                           ;interrupts.c: 331: LATC = action;
  3953  0020A0  C03F  FF8B         	movff	moveMouse@action,3979	;volatile
  3954  0020A4  0012               	return		;funcret
  3955  0020A6                     __end_of_moveMouse:
  3956                           	opt stack 0
  3957                           pclatu	equ	0xFFB
  3958                           pclath	equ	0xFFA
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           intcon2	equ	0xFF1
  3967                           postinc0	equ	0xFEE
  3968                           fsr0h	equ	0xFEA
  3969                           fsr0l	equ	0xFE9
  3970                           wreg	equ	0xFE8
  3971                           postdec1	equ	0xFE5
  3972                           fsr1h	equ	0xFE2
  3973                           fsr1l	equ	0xFE1
  3974                           bsr	equ	0xFE0
  3975                           postinc2	equ	0xFDE
  3976                           postdec2	equ	0xFDD
  3977                           plusw2	equ	0xFDB
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982 ;; *************** function _merge *****************
  3983 ;; Defined at:
  3984 ;;		line 322 in file "interrupts.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  left            1    wreg     unsigned char 
  3987 ;;  right           1   17[COMRAM] unsigned char 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  left            1   18[COMRAM] unsigned char 
  3990 ;;  merged          1   19[COMRAM] unsigned char 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      unsigned char 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, status,0
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4000 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;Total ram usage:        3 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; This function calls:
  4007 ;;		Nothing
  4008 ;; This function is called by:
  4009 ;;		_high_isr
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           	psect	text18
  4014  002084                     __ptext18:
  4015                           	opt stack 0
  4016  002084                     _merge:
  4017                           	opt stack 25
  4018                           
  4019                           ;incstack = 0
  4020                           ;merge@left stored from wreg
  4021  002084  6E40               	movwf	merge@left,c
  4022                           
  4023                           ;interrupts.c: 324: unsigned char merged;
  4024                           ;interrupts.c: 325: merged = left + (right << 4);
  4025  002086  383F               	swapf	merge@right,w,c
  4026  002088  0BF0               	andlw	240
  4027  00208A  2440               	addwf	merge@left,w,c
  4028  00208C  6E41               	movwf	merge@merged,c
  4029                           
  4030                           ;interrupts.c: 326: return merged;
  4031  00208E  5041               	movf	merge@merged,w,c
  4032  002090  D000               	goto	i2l198
  4033  002092                     i2l198:
  4034  002092  0012               	return		;funcret
  4035  002094                     __end_of_merge:
  4036                           	opt stack 0
  4037                           pclatu	equ	0xFFB
  4038                           pclath	equ	0xFFA
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           postinc0	equ	0xFEE
  4048                           fsr0h	equ	0xFEA
  4049                           fsr0l	equ	0xFE9
  4050                           wreg	equ	0xFE8
  4051                           postdec1	equ	0xFE5
  4052                           fsr1h	equ	0xFE2
  4053                           fsr1l	equ	0xFE1
  4054                           bsr	equ	0xFE0
  4055                           postinc2	equ	0xFDE
  4056                           postdec2	equ	0xFDD
  4057                           plusw2	equ	0xFDB
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _initialRotation *****************
  4063 ;; Defined at:
  4064 ;;		line 434 in file "interrupts.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  side            1    wreg     enum E4146
  4067 ;;  isDeadEnd       2   20[COMRAM] int 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  side            1   22[COMRAM] enum E4146
  4070 ;; Return value:  Size  Location     Type
  4071 ;;		None               void
  4072 ;; Registers used:
  4073 ;;		wreg, status,2, status,0, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4079 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;Total ram usage:        3 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    2
  4086 ;; This function calls:
  4087 ;;		_rotate
  4088 ;; This function is called by:
  4089 ;;		_high_isr
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text19
  4094  001F9A                     __ptext19:
  4095                           	opt stack 0
  4096  001F9A                     _initialRotation:
  4097                           	opt stack 23
  4098                           
  4099                           ;incstack = 0
  4100                           ;initialRotation@side stored from wreg
  4101  001F9A  6E44               	movwf	initialRotation@side,c
  4102                           
  4103                           ;interrupts.c: 436: MOTORDELAYMAX=2;
  4104  001F9C  0E02               	movlw	2
  4105  001F9E  6E58               	movwf	_MOTORDELAYMAX,c
  4106                           
  4107                           ;interrupts.c: 437: if(isDeadEnd == 1)
  4108  001FA0  0442               	decf	initialRotation@isDeadEnd,w,c
  4109  001FA2  1043               	iorwf	initialRotation@isDeadEnd+1,w,c
  4110  001FA4  A4D8               	btfss	status,2,c
  4111  001FA6  D006               	goto	i2l1789
  4112                           
  4113                           ;interrupts.c: 438: {
  4114                           ;interrupts.c: 439: RotateCounter = 170*2;
  4115  001FA8  0E01               	movlw	1
  4116  001FAA  6E16               	movwf	_RotateCounter+1,c
  4117  001FAC  0E54               	movlw	84
  4118  001FAE  6E15               	movwf	_RotateCounter,c
  4119                           
  4120                           ;interrupts.c: 440: deadEnd = 1;
  4121  001FB0  0E01               	movlw	1
  4122  001FB2  D005               	goto	L15
  4123  001FB4                     i2l1789:
  4124                           
  4125                           ;interrupts.c: 442: else
  4126                           ;interrupts.c: 443: {
  4127                           ;interrupts.c: 444: RotateCounter = 170;
  4128  001FB4  0E00               	movlw	0
  4129  001FB6  6E16               	movwf	_RotateCounter+1,c
  4130  001FB8  0EAA               	movlw	170
  4131  001FBA  6E15               	movwf	_RotateCounter,c
  4132                           
  4133                           ;interrupts.c: 445: deadEnd = 0;
  4134  001FBC  0E00               	movlw	0
  4135  001FBE                     L15:
  4136  001FBE  6E2B               	movwf	_deadEnd,c
  4137  001FC0  D000               	goto	i2l1791
  4138  001FC2                     i2l1791:
  4139                           
  4140                           ;interrupts.c: 446: }
  4141                           ;interrupts.c: 448: rotatingSide = side;
  4142  001FC2  C044  F02D         	movff	initialRotation@side,_rotatingSide
  4143                           
  4144                           ;interrupts.c: 449: rotate(rotatingSide);
  4145  001FC6  502D               	movf	_rotatingSide,w,c
  4146  001FC8  EC5F  F00F         	call	_rotate
  4147  001FCC  0012               	return		;funcret
  4148  001FCE                     __end_of_initialRotation:
  4149                           	opt stack 0
  4150                           pclatu	equ	0xFFB
  4151                           pclath	equ	0xFFA
  4152                           tblptru	equ	0xFF8
  4153                           tblptrh	equ	0xFF7
  4154                           tblptrl	equ	0xFF6
  4155                           tablat	equ	0xFF5
  4156                           prodh	equ	0xFF4
  4157                           prodl	equ	0xFF3
  4158                           intcon	equ	0xFF2
  4159                           intcon2	equ	0xFF1
  4160                           postinc0	equ	0xFEE
  4161                           fsr0h	equ	0xFEA
  4162                           fsr0l	equ	0xFE9
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1h	equ	0xFE2
  4166                           fsr1l	equ	0xFE1
  4167                           bsr	equ	0xFE0
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           plusw2	equ	0xFDB
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function _rotate *****************
  4176 ;; Defined at:
  4177 ;;		line 368 in file "interrupts.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  side            1    wreg     enum E4146
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  side            1   19[COMRAM] enum E4146
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;Total ram usage:        1 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    1
  4198 ;; This function calls:
  4199 ;;		_motorCounterUpdate
  4200 ;; This function is called by:
  4201 ;;		_high_isr
  4202 ;;		_initialRotation
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text20
  4207  001EBE                     __ptext20:
  4208                           	opt stack 0
  4209  001EBE                     _rotate:
  4210                           	opt stack 24
  4211                           
  4212                           ;incstack = 0
  4213                           ;rotate@side stored from wreg
  4214  001EBE  6E41               	movwf	rotate@side,c
  4215                           
  4216                           ;interrupts.c: 370: if (side == LEFT){
  4217  001EC0  5041               	movf	rotate@side,w,c
  4218  001EC2  A4D8               	btfss	status,2,c
  4219  001EC4  D00B               	goto	i2l1725
  4220                           
  4221                           ;interrupts.c: 371: motorCounterUpdate(RIGHT,0);
  4222  001EC6  0E00               	movlw	0
  4223  001EC8  6E3F               	movwf	motorCounterUpdate@reverse,c
  4224  001ECA  0E01               	movlw	1
  4225  001ECC  ECF1  F00D         	call	_motorCounterUpdate
  4226                           
  4227                           ;interrupts.c: 372: motorCounterUpdate(LEFT,1);
  4228  001ED0  0E01               	movlw	1
  4229  001ED2  6E3F               	movwf	motorCounterUpdate@reverse,c
  4230  001ED4  0E00               	movlw	0
  4231  001ED6  ECF1  F00D         	call	_motorCounterUpdate
  4232                           
  4233                           ;interrupts.c: 373: } else {
  4234  001EDA  D00B               	goto	i2l1727
  4235  001EDC                     i2l1725:
  4236                           
  4237                           ;interrupts.c: 374: motorCounterUpdate(LEFT,0);
  4238  001EDC  0E00               	movlw	0
  4239  001EDE  6E3F               	movwf	motorCounterUpdate@reverse,c
  4240  001EE0  0E00               	movlw	0
  4241  001EE2  ECF1  F00D         	call	_motorCounterUpdate
  4242                           
  4243                           ;interrupts.c: 375: motorCounterUpdate(RIGHT,1);
  4244  001EE6  0E01               	movlw	1
  4245  001EE8  6E3F               	movwf	motorCounterUpdate@reverse,c
  4246  001EEA  0E01               	movlw	1
  4247  001EEC  ECF1  F00D         	call	_motorCounterUpdate
  4248  001EF0  D000               	goto	i2l1727
  4249  001EF2                     i2l1727:
  4250                           
  4251                           ;interrupts.c: 376: }
  4252                           ;interrupts.c: 377: RotateCounter--;
  4253  001EF2  0615               	decf	_RotateCounter,f,c
  4254  001EF4  A0D8               	btfss	status,0,c
  4255  001EF6  0616               	decf	_RotateCounter+1,f,c
  4256  001EF8  0012               	return		;funcret
  4257  001EFA                     __end_of_rotate:
  4258                           	opt stack 0
  4259                           pclatu	equ	0xFFB
  4260                           pclath	equ	0xFFA
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           intcon	equ	0xFF2
  4268                           intcon2	equ	0xFF1
  4269                           postinc0	equ	0xFEE
  4270                           fsr0h	equ	0xFEA
  4271                           fsr0l	equ	0xFE9
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1h	equ	0xFE2
  4275                           fsr1l	equ	0xFE1
  4276                           bsr	equ	0xFE0
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           plusw2	equ	0xFDB
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _Reversing *****************
  4285 ;; Defined at:
  4286 ;;		line 392 in file "interrupts.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    1
  4307 ;; This function calls:
  4308 ;;		_motorCounterUpdate
  4309 ;; This function is called by:
  4310 ;;		_high_isr
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text21
  4315  002068                     __ptext21:
  4316                           	opt stack 0
  4317  002068                     _Reversing:
  4318                           	opt stack 24
  4319                           
  4320                           ;interrupts.c: 394: motorCounterUpdate(RIGHT,1);
  4321                           
  4322                           ;incstack = 0
  4323  002068  0E01               	movlw	1
  4324  00206A  6E3F               	movwf	motorCounterUpdate@reverse,c
  4325  00206C  0E01               	movlw	1
  4326  00206E  ECF1  F00D         	call	_motorCounterUpdate
  4327                           
  4328                           ;interrupts.c: 395: motorCounterUpdate(LEFT,1);
  4329  002072  0E01               	movlw	1
  4330  002074  6E3F               	movwf	motorCounterUpdate@reverse,c
  4331  002076  0E00               	movlw	0
  4332  002078  ECF1  F00D         	call	_motorCounterUpdate
  4333                           
  4334                           ;interrupts.c: 396: ReverseCounter--;
  4335  00207C  0613               	decf	_ReverseCounter,f,c
  4336  00207E  A0D8               	btfss	status,0,c
  4337  002080  0614               	decf	_ReverseCounter+1,f,c
  4338  002082  0012               	return		;funcret
  4339  002084                     __end_of_Reversing:
  4340                           	opt stack 0
  4341                           pclatu	equ	0xFFB
  4342                           pclath	equ	0xFFA
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           intcon2	equ	0xFF1
  4351                           postinc0	equ	0xFEE
  4352                           fsr0h	equ	0xFEA
  4353                           fsr0l	equ	0xFE9
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1h	equ	0xFE2
  4357                           fsr1l	equ	0xFE1
  4358                           bsr	equ	0xFE0
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           plusw2	equ	0xFDB
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _motorCounterUpdate *****************
  4367 ;; Defined at:
  4368 ;;		line 277 in file "interrupts.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  side            1    wreg     enum E4146
  4371 ;;  reverse         1   17[COMRAM] unsigned char 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  side            1   18[COMRAM] enum E4146
  4374 ;; Return value:  Size  Location     Type
  4375 ;;		None               void
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4383 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;Total ram usage:        2 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_high_isr
  4393 ;;		_rotate
  4394 ;;		_Reversing
  4395 ;;		_forward
  4396 ;;		_smoothTurn
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text22
  4401  001BE2                     __ptext22:
  4402                           	opt stack 0
  4403  001BE2                     _motorCounterUpdate:
  4404                           	opt stack 23
  4405                           
  4406                           ;incstack = 0
  4407                           ;motorCounterUpdate@side stored from wreg
  4408  001BE2  6E40               	movwf	motorCounterUpdate@side,c
  4409                           
  4410                           ;interrupts.c: 279: if(side == LEFT && reverse == 1)
  4411  001BE4  5040               	movf	motorCounterUpdate@side,w,c
  4412  001BE6  A4D8               	btfss	status,2,c
  4413  001BE8  D01B               	goto	i2l1601
  4414  001BEA  043F               	decf	motorCounterUpdate@reverse,w,c
  4415  001BEC  B4D8               	btfsc	status,2,c
  4416  001BEE  D00B               	goto	i2l1599
  4417  001BF0  D017               	goto	i2l1601
  4418                           
  4419                           ;interrupts.c: 280: {
  4420                           ;interrupts.c: 281: switch(LMotorCounter)
  4421  001BF2  D009               	goto	i2l1599
  4422  001BF4                     i2l1589:
  4423  001BF4  0E02               	movlw	2
  4424  001BF6  D004               	goto	L18
  4425  001BF8                     i2l1591:
  4426  001BF8  0E04               	movlw	4
  4427  001BFA  D002               	goto	L18
  4428                           
  4429                           ;interrupts.c: 285: case 0b00000100: LMotorCounter = 0b00001000; break;
  4430  001BFC  D03E               	goto	i2l1633
  4431                           
  4432                           ;interrupts.c: 286: case 0b00001000: LMotorCounter = 0b00000001; break;
  4433  001BFE  D039               	goto	i2l1627
  4434  001C00                     L18:
  4435  001C00  6E28               	movwf	_LMotorCounter,c
  4436  001C02  D068               	goto	i2l195
  4437                           
  4438                           ;interrupts.c: 287: default: LMotorCounter = 0b00000001;
  4439  001C04  D036               	goto	i2l1627
  4440  001C06                     i2l1599:
  4441  001C06  5028               	movf	_LMotorCounter,w,c
  4442                           
  4443                           ; Switch size 1, requested type "space"
  4444                           ; Number of cases is 4, Range of values is 1 to 8
  4445                           ; switch strategies available:
  4446                           ; Name         Instructions Cycles
  4447                           ; simple_byte           13     7 (average)
  4448                           ;	Chosen strategy is simple_byte
  4449  001C08  0A01               	xorlw	1	; case 1
  4450  001C0A  B4D8               	btfsc	status,2,c
  4451  001C0C  D7F3               	goto	i2l1589
  4452  001C0E  0A03               	xorlw	3	; case 2
  4453  001C10  B4D8               	btfsc	status,2,c
  4454  001C12  D7F2               	goto	i2l1591
  4455  001C14  0A06               	xorlw	6	; case 4
  4456  001C16  B4D8               	btfsc	status,2,c
  4457  001C18  D030               	goto	i2l1633
  4458  001C1A  0A0C               	xorlw	12	; case 8
  4459  001C1C  D02A               	goto	i2l1627
  4460                           
  4461                           ;interrupts.c: 289: } else if(side == RIGHT && reverse == 1)
  4462  001C1E  D05A               	goto	i2l195
  4463  001C20                     i2l1601:
  4464  001C20  0440               	decf	motorCounterUpdate@side,w,c
  4465  001C22  A4D8               	btfss	status,2,c
  4466  001C24  D01D               	goto	i2l1619
  4467  001C26  043F               	decf	motorCounterUpdate@reverse,w,c
  4468  001C28  B4D8               	btfsc	status,2,c
  4469  001C2A  D00B               	goto	i2l1617
  4470  001C2C  D019               	goto	i2l1619
  4471                           
  4472                           ;interrupts.c: 290: {
  4473                           ;interrupts.c: 291: switch(RMotorCounter)
  4474  001C2E  D009               	goto	i2l1617
  4475  001C30                     i2l1607:
  4476  001C30  0E08               	movlw	8
  4477  001C32  D040               	goto	L26
  4478  001C34                     i2l1609:
  4479  001C34  0E01               	movlw	1
  4480  001C36  D03E               	goto	L26
  4481  001C38                     i2l1611:
  4482  001C38  0E02               	movlw	2
  4483  001C3A  D03C               	goto	L26
  4484  001C3C                     i2l1613:
  4485  001C3C  0E04               	movlw	4
  4486  001C3E  D03A               	goto	L26
  4487                           
  4488                           ;interrupts.c: 297: default: RMotorCounter = 0b00001000;
  4489  001C40  D7F7               	goto	i2l1607
  4490  001C42                     i2l1617:
  4491  001C42  5029               	movf	_RMotorCounter,w,c
  4492                           
  4493                           ; Switch size 1, requested type "space"
  4494                           ; Number of cases is 4, Range of values is 1 to 8
  4495                           ; switch strategies available:
  4496                           ; Name         Instructions Cycles
  4497                           ; simple_byte           13     7 (average)
  4498                           ;	Chosen strategy is simple_byte
  4499  001C44  0A01               	xorlw	1	; case 1
  4500  001C46  B4D8               	btfsc	status,2,c
  4501  001C48  D7F3               	goto	i2l1607
  4502  001C4A  0A03               	xorlw	3	; case 2
  4503  001C4C  B4D8               	btfsc	status,2,c
  4504  001C4E  D7F2               	goto	i2l1609
  4505  001C50  0A06               	xorlw	6	; case 4
  4506  001C52  B4D8               	btfsc	status,2,c
  4507  001C54  D7F1               	goto	i2l1611
  4508  001C56  0A0C               	xorlw	12	; case 8
  4509  001C58  B4D8               	btfsc	status,2,c
  4510  001C5A  D7F0               	goto	i2l1613
  4511  001C5C  D7E9               	goto	i2l1607
  4512                           
  4513                           ;interrupts.c: 299: } else if(side == LEFT && reverse == 0)
  4514  001C5E  D03A               	goto	i2l195
  4515  001C60                     i2l1619:
  4516  001C60  5040               	movf	motorCounterUpdate@side,w,c
  4517  001C62  A4D8               	btfss	status,2,c
  4518  001C64  D01B               	goto	i2l1637
  4519  001C66  503F               	movf	motorCounterUpdate@reverse,w,c
  4520  001C68  B4D8               	btfsc	status,2,c
  4521  001C6A  D009               	goto	i2l1635
  4522  001C6C  D017               	goto	i2l1637
  4523                           
  4524                           ;interrupts.c: 300: {
  4525                           ;interrupts.c: 301: switch(LMotorCounter)
  4526  001C6E  D007               	goto	i2l1635
  4527                           
  4528                           ;interrupts.c: 302: {
  4529                           ;interrupts.c: 303: case 0b00000001: LMotorCounter = 0b00001000; break;
  4530  001C70  D004               	goto	i2l1633
  4531  001C72                     i2l1627:
  4532  001C72  0E01               	movlw	1
  4533  001C74  D7C5               	goto	L18
  4534                           
  4535                           ;interrupts.c: 305: case 0b00000100: LMotorCounter = 0b00000010; break;
  4536  001C76  D7BE               	goto	i2l1589
  4537                           
  4538                           ;interrupts.c: 306: case 0b00001000: LMotorCounter = 0b00000100; break;
  4539  001C78  D7BF               	goto	i2l1591
  4540  001C7A                     i2l1633:
  4541  001C7A  0E08               	movlw	8
  4542  001C7C  D7C1               	goto	L18
  4543  001C7E                     i2l1635:
  4544  001C7E  5028               	movf	_LMotorCounter,w,c
  4545                           
  4546                           ; Switch size 1, requested type "space"
  4547                           ; Number of cases is 4, Range of values is 1 to 8
  4548                           ; switch strategies available:
  4549                           ; Name         Instructions Cycles
  4550                           ; simple_byte           13     7 (average)
  4551                           ;	Chosen strategy is simple_byte
  4552  001C80  0A01               	xorlw	1	; case 1
  4553  001C82  B4D8               	btfsc	status,2,c
  4554  001C84  D7FA               	goto	i2l1633
  4555  001C86  0A03               	xorlw	3	; case 2
  4556  001C88  B4D8               	btfsc	status,2,c
  4557  001C8A  D7F3               	goto	i2l1627
  4558  001C8C  0A06               	xorlw	6	; case 4
  4559  001C8E  B4D8               	btfsc	status,2,c
  4560  001C90  D7B1               	goto	i2l1589
  4561  001C92  0A0C               	xorlw	12	; case 8
  4562  001C94  B4D8               	btfsc	status,2,c
  4563  001C96  D7B0               	goto	i2l1591
  4564  001C98  D7F0               	goto	i2l1633
  4565                           
  4566                           ;interrupts.c: 309: } else if(side == RIGHT && reverse == 0)
  4567  001C9A  D01C               	goto	i2l195
  4568  001C9C                     i2l1637:
  4569  001C9C  0440               	decf	motorCounterUpdate@side,w,c
  4570  001C9E  A4D8               	btfss	status,2,c
  4571  001CA0  D019               	goto	i2l195
  4572  001CA2  503F               	movf	motorCounterUpdate@reverse,w,c
  4573  001CA4  B4D8               	btfsc	status,2,c
  4574  001CA6  D009               	goto	i2l1653
  4575  001CA8  D015               	goto	i2l195
  4576                           
  4577                           ;interrupts.c: 310: {
  4578                           ;interrupts.c: 311: switch(RMotorCounter)
  4579  001CAA  D007               	goto	i2l1653
  4580                           
  4581                           ;interrupts.c: 312: {
  4582                           ;interrupts.c: 313: case 0b00000001: RMotorCounter = 0b00000010; break;
  4583  001CAC  D7C5               	goto	i2l1611
  4584                           
  4585                           ;interrupts.c: 314: case 0b00000010: RMotorCounter = 0b00000100; break;
  4586  001CAE  D7C6               	goto	i2l1613
  4587                           
  4588                           ;interrupts.c: 315: case 0b00000100: RMotorCounter = 0b00001000; break;
  4589  001CB0  D7BF               	goto	i2l1607
  4590                           
  4591                           ;interrupts.c: 316: case 0b00001000: RMotorCounter = 0b00000001; break;
  4592  001CB2  D7C0               	goto	i2l1609
  4593  001CB4                     L26:
  4594  001CB4  6E29               	movwf	_RMotorCounter,c
  4595  001CB6  D00E               	goto	i2l195
  4596                           
  4597                           ;interrupts.c: 317: default: RMotorCounter = 0b00000001;
  4598  001CB8  D7BD               	goto	i2l1609
  4599  001CBA                     i2l1653:
  4600  001CBA  5029               	movf	_RMotorCounter,w,c
  4601                           
  4602                           ; Switch size 1, requested type "space"
  4603                           ; Number of cases is 4, Range of values is 1 to 8
  4604                           ; switch strategies available:
  4605                           ; Name         Instructions Cycles
  4606                           ; simple_byte           13     7 (average)
  4607                           ;	Chosen strategy is simple_byte
  4608  001CBC  0A01               	xorlw	1	; case 1
  4609  001CBE  B4D8               	btfsc	status,2,c
  4610  001CC0  D7BB               	goto	i2l1611
  4611  001CC2  0A03               	xorlw	3	; case 2
  4612  001CC4  B4D8               	btfsc	status,2,c
  4613  001CC6  D7BA               	goto	i2l1613
  4614  001CC8  0A06               	xorlw	6	; case 4
  4615  001CCA  B4D8               	btfsc	status,2,c
  4616  001CCC  D7B1               	goto	i2l1607
  4617  001CCE  0A0C               	xorlw	12	; case 8
  4618  001CD0  D7B1               	goto	i2l1609
  4619  001CD2  D000               	goto	i2l195
  4620  001CD4                     i2l195:
  4621  001CD4  0012               	return		;funcret
  4622  001CD6                     __end_of_motorCounterUpdate:
  4623                           	opt stack 0
  4624                           pclatu	equ	0xFFB
  4625                           pclath	equ	0xFFA
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           intcon2	equ	0xFF1
  4634                           postinc0	equ	0xFEE
  4635                           fsr0h	equ	0xFEA
  4636                           fsr0l	equ	0xFE9
  4637                           wreg	equ	0xFE8
  4638                           postdec1	equ	0xFE5
  4639                           fsr1h	equ	0xFE2
  4640                           fsr1l	equ	0xFE1
  4641                           bsr	equ	0xFE0
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           plusw2	equ	0xFDB
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _KController *****************
  4650 ;; Defined at:
  4651 ;;		line 342 in file "interrupts.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;Total ram usage:        0 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_high_isr
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text23
  4679  001DA6                     __ptext23:
  4680                           	opt stack 0
  4681  001DA6                     _KController:
  4682                           	opt stack 25
  4683                           
  4684                           ;interrupts.c: 353: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  4685                           
  4686                           ;incstack = 0
  4687  001DA6  BE06               	btfsc	_sensorValue+5,7,c
  4688  001DA8  D00E               	goto	i2l1273
  4689  001DAA  5006               	movf	_sensorValue+5,w,c
  4690  001DAC  E104               	bnz	i2u64_40
  4691  001DAE  0E96               	movlw	150
  4692  001DB0  5C05               	subwf	_sensorValue+4,w,c
  4693  001DB2  A0D8               	btfss	status,0,c
  4694  001DB4  D008               	goto	i2l1273
  4695  001DB6                     i2u64_40:
  4696  001DB6  BE08               	btfsc	_sensorValue+7,7,c
  4697  001DB8  D006               	goto	i2l1273
  4698  001DBA  5008               	movf	_sensorValue+7,w,c
  4699  001DBC  E11E               	bnz	i2l214
  4700  001DBE  0E96               	movlw	150
  4701  001DC0  5C07               	subwf	_sensorValue+6,w,c
  4702  001DC2  B0D8               	btfsc	status,0,c
  4703  001DC4  D01A               	goto	i2l214
  4704  001DC6                     i2l1273:
  4705                           
  4706                           ;interrupts.c: 354: {
  4707                           ;interrupts.c: 356: if(sensorValue[0] > 400)
  4708  001DC6  BE02               	btfsc	_sensorValue+1,7,c
  4709  001DC8  D00B               	goto	i2l1277
  4710  001DCA  0E91               	movlw	145
  4711  001DCC  5C01               	subwf	_sensorValue,w,c
  4712  001DCE  0E01               	movlw	1
  4713  001DD0  5802               	subwfb	_sensorValue+1,w,c
  4714  001DD2  A0D8               	btfss	status,0,c
  4715  001DD4  D005               	goto	i2l1277
  4716                           
  4717                           ;interrupts.c: 357: {
  4718                           ;interrupts.c: 358: controlToRight = 30;
  4719  001DD6  0E00               	movlw	0
  4720  001DD8  6E22               	movwf	_controlToRight+1,c
  4721  001DDA  0E1E               	movlw	30
  4722  001DDC  6E21               	movwf	_controlToRight,c
  4723                           
  4724                           ;interrupts.c: 359: } else if(sensorValue[1] > 400)
  4725  001DDE  D00D               	goto	i2l214
  4726  001DE0                     i2l1277:
  4727  001DE0  BE04               	btfsc	_sensorValue+3,7,c
  4728  001DE2  D00B               	goto	i2l214
  4729  001DE4  0E91               	movlw	145
  4730  001DE6  5C03               	subwf	_sensorValue+2,w,c
  4731  001DE8  0E01               	movlw	1
  4732  001DEA  5804               	subwfb	_sensorValue+3,w,c
  4733  001DEC  A0D8               	btfss	status,0,c
  4734  001DEE  D005               	goto	i2l214
  4735                           
  4736                           ;interrupts.c: 360: {
  4737                           ;interrupts.c: 361: controlToLeft = 30;
  4738  001DF0  0E00               	movlw	0
  4739  001DF2  6E20               	movwf	_controlToLeft+1,c
  4740  001DF4  0E1E               	movlw	30
  4741  001DF6  6E1F               	movwf	_controlToLeft,c
  4742  001DF8  D000               	goto	i2l214
  4743  001DFA                     i2l214:
  4744  001DFA  0012               	return		;funcret
  4745  001DFC                     __end_of_KController:
  4746                           	opt stack 0
  4747                           pclatu	equ	0xFFB
  4748                           pclath	equ	0xFFA
  4749                           tblptru	equ	0xFF8
  4750                           tblptrh	equ	0xFF7
  4751                           tblptrl	equ	0xFF6
  4752                           tablat	equ	0xFF5
  4753                           prodh	equ	0xFF4
  4754                           prodl	equ	0xFF3
  4755                           intcon	equ	0xFF2
  4756                           intcon2	equ	0xFF1
  4757                           postinc0	equ	0xFEE
  4758                           fsr0h	equ	0xFEA
  4759                           fsr0l	equ	0xFE9
  4760                           wreg	equ	0xFE8
  4761                           postdec1	equ	0xFE5
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           bsr	equ	0xFE0
  4765                           postinc2	equ	0xFDE
  4766                           postdec2	equ	0xFDD
  4767                           plusw2	equ	0xFDB
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           pclatu	equ	0xFFB
  4772                           pclath	equ	0xFFA
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           postinc0	equ	0xFEE
  4782                           fsr0h	equ	0xFEA
  4783                           fsr0l	equ	0xFE9
  4784                           wreg	equ	0xFE8
  4785                           postdec1	equ	0xFE5
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           bsr	equ	0xFE0
  4789                           postinc2	equ	0xFDE
  4790                           postdec2	equ	0xFDD
  4791                           plusw2	equ	0xFDB
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796                           	psect	rparam
  4797  0000                     pclatu	equ	0xFFB
  4798                           pclath	equ	0xFFA
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           intcon	equ	0xFF2
  4806                           intcon2	equ	0xFF1
  4807                           postinc0	equ	0xFEE
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           bsr	equ	0xFE0
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           plusw2	equ	0xFDB
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        4
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     42      91
    BANK0           128    119     127
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_initialRotation
    _forward->_motorCounterUpdate
    _initialRotation->_rotate
    _rotate->_motorCounterUpdate
    _Reversing->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6087
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4856
                                             28 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   17    14      3    3634
                                             11 BANK0     17    14      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            19    19      0    5732
                                             23 COMRAM    19    19      0
                        _KController
                          _Reversing
                            _forward
                    _initialRotation
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
                      _singleForward
                        _stateUpdate
 ---------------------------------------------------------------------------------
 (6) _stateUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _singleForward                                        0     0      0     812
                            _forward
 ---------------------------------------------------------------------------------
 (7) _forward                                              0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _initialRotation                                      3     1      2    1514
                                             20 COMRAM     3     1      2
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     834
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (8) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _initialRotation
     _rotate
       _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate
   _singleForward
     _forward
       _motorCounterUpdate
   _stateUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2A      5B       1       71.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DA      34        0.0%
DATA                 0      0      DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed May 06 00:39:36 2015

                   _stateUpdate 17A4                    ___awdiv@sign 0085                              bsr 000FE0  
           ___wmul@multiplicand 0082                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_LVP$ON 000000                             l353 2066                             l339 1E2A  
                           l371 17A2                             l348 2052                             l384 1F5C  
                           l392 1F30                             l385 1F64                             l378 1A24  
                           l388 1F90                             l389 1F98                             l585 1DA4  
                  __CFG_CPB$OFF 000000                             _MAX 1F66                             _MIN 1F32  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 2068                    _rotatingSide 002D  
                           wreg 000FE8                            ?_MAX 0086                            ?_MIN 0086  
                          MAX@a 0086                            MAX@b 0088                            MIN@a 0086  
                          MIN@b 0088                    __CFG_WDT$OFF 000000                            l2111 1D38  
                          l2103 1D0C                            l2121 1D74                            l2113 1D42  
                          l2109 1D2A                            l2125 1D84                            l2221 19F2  
                          l2135 1E12                            l2215 19CE                            l2129 1D9A  
                          l2161 1424                            l2225 1A0C                            l2147 2060  
                          l2171 15C6                            l2155 1400                            l2235 1AC0  
                          l2219 19E8                            l2165 1492                            l2183 1706  
                          l2175 1642                            l2167 15B0                            l2239 1ACA  
                          l2097 1CF4                            l2185 170A                            l2265 1FF0  
                          l2189 178C                            u2200 1422                            _LATC 000F8B  
                          u2325 1A32                            u2190 13FE                            u2357 1E1A  
                          i2l93 1382               ??_initialRotation 0044                            _main 1FCE  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            fsr2l 000FD9  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00A2                   __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 008B  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                 __end_of_InitApp 1EBE  
         __end_of_setCorrection 1BE2                           ??_MAX 008A                           ??_MIN 008A  
    __size_of_sensorComputation 03C8                           ?_main 002E                 __end_of___awdiv 1DA6  
                         _T0CON 000FD5                 ___awdiv@divisor 0082                           i2l214 1DFA  
                         i2l232 2024                           i2l154 13A2                           i2l261 19BE  
                         i2l238 2048                           i2l195 1CD4                           i2l198 2092  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 2094  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                   _controlToLeft 001F                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                         _delay 1DFC                           _merge 2084                 __end_of_forward 2026  
               __end_of_low_isr 00A2                           tablat 000FF5                           plusw2 000FDB  
                         status 000FD8            ?_ConfigureOscillator 002E                 __initialization 1E40  
                  __end_of_main 1FFC                          ??_main 00F7                   __activetblptr 000002  
                        ?_delay 0080                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          ?_merge 003F                          _ADRESH 000FC4  
                        _ADRESL 000FC3                ___awdiv@dividend 0080                          i2l1201 1818  
                        i2l2001 12B4                          i2l1203 1828                          i2l2011 12E6  
                        i2l1221 189E                          i2l1205 182C                          i2l2021 1316  
                        i2l2013 12F0                          i2l2005 12CA                          i2l1231 18E2  
                        i2l1223 18AE                          i2l1215 186E                          i2l1233 18F2  
                        i2l1225 18B2                          i2l2033 1354                          i2l2025 132E  
                        i2l2017 12FE                          i2l1227 18C2                          i2l1235 18F6  
                        i2l1219 188E                          i2l2043 139A                          i2l1245 1938  
                        i2l2037 136C                          i2l2029 133C                          i2l1247 1948  
                        i2l1255 197A                          i2l1239 1916                          i2l1191 17D4  
                        i2l1273 1DC6                          i2l1601 1C20                          i2l1257 198A  
                        i2l1193 17E4                          i2l1611 1C38                          i2l1259 199A  
                        i2l1187 17B4                          i2l1195 17E8                          i2l1277 1DE0  
                        i2l1613 1C3C                          i2l1189 17C4                          i2l1607 1C30  
                        i2l1633 1C7A                          i2l1609 1C34                          i2l1617 1C42  
                        i2l1801 203A                          i2l1627 1C72                          i2l1635 1C7E  
                        i2l1619 1C60                          i2l1653 1CBA                          i2l1637 1C9C  
                        i2l1725 1EDC                          i2l1591 1BF8                          i2l1727 1EF2  
                        i2l1903 10D6                          i2l1911 10EE                          i2l1921 112A  
                        i2l1905 10E0                          i2l1923 113A                          i2l1915 110C  
                        i2l1589 1BF4                          i2l1925 114A                          i2l1917 111C  
                        i2l1599 1C06                          i2l1791 1FC2                          i2l1943 118C  
                        i2l1945 119A                          i2l1929 115A                          i2l1963 11FE  
                        i2l1947 11A8                          i2l1883 107E                          i2l1789 1FB4  
                        i2l1981 1246                          i2l1957 11DE                          i2l1965 1204  
                        i2l1949 11BA                          i2l1885 1088                          i2l1877 1062  
                        i2l1975 122E                          i2l1895 10BA                          i2l1879 1068  
                        i2l1993 1284                          i2l1985 125E                          i2l1977 1238  
                        i2l1897 10CA                          i2l1889 109C                          i2l1997 129C  
                        i2l1989 126C                          _INTCON 000FF2                          _OSCCON 000FD3  
                     ??_InitApp 0085           ??_ConfigureOscillator 0080                     merge@merged 0041  
                __CFG_XINST$OFF 000000              sensorComputation@i 009A              sensorComputation@j 0098  
                _controlToRight 0021                __end_of_high_isr 13DC                          _cState 0059  
                        ___wmul 1EFA                       ??___awdiv 0084                  __CFG_STVREN$ON 000000  
                        _pState 005B                          delay@x 0083                          clear_0 1E46  
                        clear_1 1E52                ___awdiv@quotient 0086                          _rotate 1EBE  
            __size_of_Reversing 001C                    __pdataCOMRAM 0058                       ??_forward 0041  
                  __mediumconst 0000                       ??_low_isr 002E                  _ReverseCounter 0013  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                    __accesstop 0080         __end_of__initialization 1E78                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                    ?_KController 002E                  __pcstackCOMRAM 002E  
                 __end_of_delay 1E40                    ?_stateUpdate 002E                      _TurnedLeft 001B  
               moveMouse@action 003F                   __end_of_merge 2094      __end_of_motorCounterUpdate 1CD6  
               _initialRotation 1F9A                  _ignoreControll 005A                  _ForwardCounter 000B  
                       ??_delay 0082                         ??_merge 0040                      __pbssBANK0 00F7  
            _AlgorithmSelection 204A                    _LTurnCounter 000D               __end_of_Reversing 2084  
                    _delay_time 0023           __end_of_singleForward 204A               _MotorDelayCounter 000F  
           ?_AlgorithmSelection 002E            setCorrection@sideAvg 008A                         ?___wmul 0080  
            __size_of_moveMouse 0008                         ?_rotate 002E                         _INTCON2 000FF1  
                       i2u40_40 183C                         i2u41_40 184C                         i2u52_40 1906  
                       i2u44_40 187E                         i2u36_40 17F8                         i2u37_40 1808  
                       _OSCTUNE 000F9B                         i2u64_40 1DB6                         i2u57_40 1958  
                       i2u49_40 18D2            ??_AlgorithmSelection 0080                       ?_high_isr 002E  
                       _Deadend 0009                   _LMotorCounter 0028                         _InitApp 1E82  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1CD6  
               __size_of___wmul 0038                         _deadEnd 002B         __end_of_initialRotation 1FCE  
                  __psmallconst 1000                         __pcinit 1E40                         __ramtop 1000  
                       __ptext0 1FCE                         __ptext1 1AE0                         __ptext2 19C0  
                       __ptext3 13DC                         __ptext4 1EFA                         __ptext5 1CD6  
                       __ptext6 1F32                         __ptext7 1F66                         __ptext8 1E82  
                       __ptext9 1DFC                 __size_of_rotate 003C                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1FFC                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 002E                      ??_high_isr 0045  
                __pintcode_body 1006          __size_of_setCorrection 0102            end_of_initialization 1E78  
              _sensorCorrection 00F7               __end_of_moveMouse 20A6                   __Lmediumconst 0000  
                       int_func 1006                      _justTurned 002C            __size_of_KController 0056  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE            __size_of_stateUpdate 021C                   _MOTORDELAYMAX 0058  
                     _TRISBbits 000F93                       _TRISEbits 000F96                  ??_sensorUpdate 009C  
   __end_of_ConfigureOscillator 209E                    _RTurnCounter 0011  sensorComputation@getCorrection 008D  
                 _setCorrection 1AE0                ?_initialRotation 0042                  __end_of___wmul 1F32  
                 __pidataCOMRAM 20A6                     _TurnedRight 001D                  __end_of_rotate 1EFA  
           start_initialization 1E40                     __end_of_MAX 1F9A                     __end_of_MIN 1F66  
            _motorCounterUpdate 1BE2                __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 003F  
                    merge@right 003F                       _Reversing 2068                  ?_setCorrection 002E  
                      ??___wmul 0084                __CFG_LPT1OSC$OFF 000000                        ??_rotate 0041  
                _sensorLocation 1001            ??_motorCounterUpdate 0040                     __pbssCOMRAM 0001  
                 __pcstackBANK0 0080                       _TurnRight 0019       sensorUpdate@getCorrection 00F2  
        sensorUpdate@sensorTemp 00A2               __size_of_high_isr 13D4                        ?_InitApp 002E  
             __CFG_CCP2MX$PORTC 000000                      ?_Reversing 002E                       _algorithm 002A  
                     __pintcode 0008           setCorrection@frontAvg 008C          motorCounterUpdate@side 0040  
                      ?___awdiv 0080            __end_of_sensorUpdate 1AE0          __end_of_sensorLocation 1005  
                   __pintcodelo 0018             initialRotation@side 0044                  _ChangeRequired 0027  
                   __smallconst 1000                        ?_forward 002E                        ?_low_isr 002E  
                     _oldErrorP 0025          __size_of_singleForward 0024                  __size_of_delay 0044  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0084  
                     _moveMouse 209E                 ??_setCorrection 0088                        i2u173_40 10FC  
                      i2u165_40 1074                        i2u167_40 1096                        i2u184_40 11CC  
                      i2u185_40 11EC                __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2  
             ___wmul@multiplier 0080                       high_isr@a 0056                       copy_data0 1E6C  
                 _RMotorCounter 0029                      rotate@side 0041                   ??_KController 003F  
                    ?_moveMouse 002E                __size_of_InitApp 003C                        __Hrparam 0000  
                     merge@left 0040            sensorComputation@max 0092                        __Lrparam 0000  
          sensorComputation@min 0094            sensorComputation@sum 0096                     ??_Reversing 0041  
            __CFG_BOREN$SBORDIS 000000                   _singleForward 2026                   ??_stateUpdate 003F  
              __size_of___awdiv 00D0                        _TurnLeft 0017                __size_of_forward 002A  
              __size_of_low_isr 008A                        __ptext10 204A                        __ptext11 2094  
                      __ptext20 1EBE                        __ptext21 2068                        __ptext22 1BE2  
                      __ptext14 17A4                        __ptext23 1DA6                        __ptext15 2026  
                      __ptext16 1FFC                        __ptext17 209E                        __ptext18 2084  
                      __ptext19 1F9A                        _high_isr 0008                   __size_of_main 002E  
                 _RotateCounter 0015           __size_of_sensorUpdate 0120    __size_of_ConfigureOscillator 000A  
                ?_singleForward 002E             __end_of_KController 1DFC               _sensorComputation 13DC  
           __end_of_stateUpdate 19C0                      _INTCONbits 000FF2              ?_sensorComputation 008B  
      __size_of_initialRotation 0034                   sensorUpdate@i 00F3                   sensorUpdate@j 00F5  
                  _sensorUpdate 19C0                        intlevel1 0000                        intlevel2 0000  
           ??_sensorComputation 008E                     ??_moveMouse 003F        initialRotation@isDeadEnd 0042  
     __end_of_sensorComputation 17A4                     _sensorValue 0001     __size_of_motorCounterUpdate 00F4  
     motorCounterUpdate@reverse 003F                 ??_singleForward 0041                     _KController 1DA6  
