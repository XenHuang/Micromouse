

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 16:19:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	idataCOMRAM
    40  001FC2                     __pidataCOMRAM:
    41                           	opt stack 0
    42                           
    43                           ;initializer for _cState
    44  001FC2  02                 	db	2
    45                           
    46                           ;initializer for _ignoreControll
    47  001FC3  0A                 	db	10
    48                           
    49                           ;initializer for _pState
    50  001FC4  02                 	db	2
    51                           
    52                           	psect	smallconst
    53  001000                     __psmallconst:
    54                           	opt stack 0
    55  001000  00                 	db	0
    56  001001                     _sensorLocation:
    57                           	opt stack 0
    58  001001  1B                 	db	27
    59  001002  2B                 	db	43
    60  001003  1F                 	db	31
    61  001004  33                 	db	51
    62  001005                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATC	set	3979
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCTUNE	set	3995
    76  0000                     _T0CON	set	4053
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISEbits	set	3990
    80                           
    81                           ; #config settings
    82  001005  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001E3A                     __pcinit:
    86                           	opt stack 0
    87  001E3A                     start_initialization:
    88                           	opt stack 0
    89  001E3A                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (53 bytes)
    93  001E3A  EE00  F001         	lfsr	0,__pbssCOMRAM
    94  001E3E  0E35               	movlw	53
    95  001E40                     clear_0:
    96  001E40  6AEE               	clrf	postinc0,c
    97  001E42  06E8               	decf	wreg,f,c
    98  001E44  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (3 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  001E46  0EC2               	movlw	low __pidataCOMRAM
   103  001E48  6EF6               	movwf	tblptrl,c
   104  001E4A  0E1F               	movlw	high __pidataCOMRAM
   105  001E4C  6EF7               	movwf	tblptrh,c
   106  001E4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  001E50  6EF8               	movwf	tblptru,c
   108  001E52  0009               	tblrd		*+	;fetch initializer
   109  001E54  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   110  001E58  0009               	tblrd		*+	;fetch initializer
   111  001E5A  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
   112  001E5E  0009               	tblrd		*+	;fetch initializer
   113  001E60  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
   114  001E64                     end_of_initialization:
   115                           	opt stack 0
   116  001E64                     __end_of__initialization:
   117                           	opt stack 0
   118  001E64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   119  001E66  6EF8               	movwf	tblptru,c
   120  001E68  0100               	movlb	0
   121  001E6A  EF85  F00F         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           tblptrl	equ	0xFF6
   125                           tablat	equ	0xFF5
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	bssCOMRAM
   130  000001                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000001                     _sensorCorrection:
   133                           	opt stack 0
   134  000001                     	ds	8
   135  000009                     _sensorValue:
   136                           	opt stack 0
   137  000009                     	ds	8
   138  000011                     _Deadend:
   139                           	opt stack 0
   140  000011                     	ds	2
   141  000013                     _ForwardCounter:
   142                           	opt stack 0
   143  000013                     	ds	2
   144  000015                     _LTurnCounter:
   145                           	opt stack 0
   146  000015                     	ds	2
   147  000017                     _MotorDelayCounter:
   148                           	opt stack 0
   149  000017                     	ds	2
   150  000019                     _RTurnCounter:
   151                           	opt stack 0
   152  000019                     	ds	2
   153  00001B                     _ReverseCounter:
   154                           	opt stack 0
   155  00001B                     	ds	2
   156  00001D                     _RotateCounter:
   157                           	opt stack 0
   158  00001D                     	ds	2
   159  00001F                     _TurnLeft:
   160                           	opt stack 0
   161  00001F                     	ds	2
   162  000021                     _TurnRight:
   163                           	opt stack 0
   164  000021                     	ds	2
   165  000023                     _TurnedLeft:
   166                           	opt stack 0
   167  000023                     	ds	2
   168  000025                     _TurnedRight:
   169                           	opt stack 0
   170  000025                     	ds	2
   171  000027                     _controlToLeft:
   172                           	opt stack 0
   173  000027                     	ds	2
   174  000029                     _controlToRight:
   175                           	opt stack 0
   176  000029                     	ds	2
   177  00002B                     _delay_time:
   178                           	opt stack 0
   179  00002B                     	ds	2
   180  00002D                     _oldErrorP:
   181                           	opt stack 0
   182  00002D                     	ds	2
   183  00002F                     _ChangeRequired:
   184                           	opt stack 0
   185  00002F                     	ds	1
   186  000030                     _LMotorCounter:
   187                           	opt stack 0
   188  000030                     	ds	1
   189  000031                     _RMotorCounter:
   190                           	opt stack 0
   191  000031                     	ds	1
   192  000032                     _algorithm:
   193                           	opt stack 0
   194  000032                     	ds	1
   195  000033                     _deadEnd:
   196                           	opt stack 0
   197  000033                     	ds	1
   198  000034                     _justTurned:
   199                           	opt stack 0
   200  000034                     	ds	1
   201  000035                     _rotatingSide:
   202                           	opt stack 0
   203  000035                     	ds	1
   204                           tblptru	equ	0xFF8
   205                           tblptrh	equ	0xFF7
   206                           tblptrl	equ	0xFF6
   207                           tablat	equ	0xFF5
   208                           postinc0	equ	0xFEE
   209                           wreg	equ	0xFE8
   210                           
   211                           	psect	dataCOMRAM
   212  00005B                     __pdataCOMRAM:
   213                           	opt stack 0
   214  00005B                     _cState:
   215                           	opt stack 0
   216  00005B                     	ds	1
   217  00005C                     _ignoreControll:
   218                           	opt stack 0
   219  00005C                     	ds	1
   220  00005D                     _pState:
   221                           	opt stack 0
   222  00005D                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackBANK0
   231  000080                     __pcstackBANK0:
   232                           	opt stack 0
   233  000080                     ?___wmul:
   234                           	opt stack 0
   235  000080                     ?___awdiv:
   236                           	opt stack 0
   237  000080                     delay@ms:
   238                           	opt stack 0
   239  000080                     ___wmul@multiplier:
   240                           	opt stack 0
   241  000080                     ___awdiv@dividend:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x0
   245  000080                     	ds	2
   246  000082                     ??_delay:
   247  000082                     ___wmul@multiplicand:
   248                           	opt stack 0
   249  000082                     ___awdiv@divisor:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253  000082                     	ds	1
   254  000083                     delay@x:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x3
   258  000083                     	ds	1
   259  000084                     ___awdiv@counter:
   260                           	opt stack 0
   261  000084                     ___wmul@product:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x4
   265  000084                     	ds	1
   266  000085                     ___awdiv@sign:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x5
   270  000085                     	ds	1
   271  000086                     ?_MIN:
   272                           	opt stack 0
   273  000086                     ?_MAX:
   274                           	opt stack 0
   275  000086                     MIN@a:
   276                           	opt stack 0
   277  000086                     MAX@a:
   278                           	opt stack 0
   279  000086                     ___awdiv@quotient:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x6
   283  000086                     	ds	2
   284  000088                     ??_setCorrection:
   285  000088                     MIN@b:
   286                           	opt stack 0
   287  000088                     MAX@b:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x8
   291  000088                     	ds	2
   292  00008A                     ??_MIN:
   293  00008A                     ??_MAX:
   294  00008A                     setCorrection@sideAvg:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0xA
   298  00008A                     	ds	1
   299  00008B                     sensorComputation@sensorTemp:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0xB
   303  00008B                     	ds	1
   304  00008C                     setCorrection@frontAvg:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xC
   308  00008C                     	ds	1
   309  00008D                     sensorComputation@getCorrection:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0xD
   313  00008D                     	ds	1
   314  00008E                     ??_sensorComputation:
   315                           
   316                           ; 0 bytes @ 0xE
   317  00008E                     	ds	4
   318  000092                     sensorComputation@max:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x12
   322  000092                     	ds	2
   323  000094                     sensorComputation@min:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x14
   327  000094                     	ds	2
   328  000096                     sensorComputation@sum:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x16
   332  000096                     	ds	2
   333  000098                     sensorComputation@j:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x18
   337  000098                     	ds	2
   338  00009A                     sensorComputation@i:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x1A
   342  00009A                     	ds	2
   343  00009C                     ??_sensorUpdate:
   344                           
   345                           ; 0 bytes @ 0x1C
   346  00009C                     	ds	6
   347  0000A2                     sensorUpdate@sensorTemp:
   348                           	opt stack 0
   349                           
   350                           ; 80 bytes @ 0x22
   351  0000A2                     	ds	80
   352  0000F2                     sensorUpdate@getCorrection:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x72
   356  0000F2                     	ds	1
   357  0000F3                     sensorUpdate@i:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x73
   361  0000F3                     	ds	2
   362  0000F5                     sensorUpdate@j:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x75
   366  0000F5                     	ds	2
   367  0000F7                     tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           ; 0 bytes @ 0x77
   375                           
   376                           	psect	cstackCOMRAM
   377  000036                     __pcstackCOMRAM:
   378                           	opt stack 0
   379  000036                     ??_low_isr:
   380  000036                     
   381                           ; 0 bytes @ 0x0
   382  000036                     	ds	17
   383  000047                     motorCounterUpdate@reverse:
   384                           	opt stack 0
   385  000047                     merge@right:
   386                           	opt stack 0
   387  000047                     moveMouse@action:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x11
   391  000047                     	ds	1
   392  000048                     motorCounterUpdate@side:
   393                           	opt stack 0
   394  000048                     merge@left:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x12
   398  000048                     	ds	1
   399  000049                     merge@merged:
   400                           	opt stack 0
   401  000049                     rotate@side:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x13
   405  000049                     	ds	1
   406  00004A                     initialRotation@isDeadEnd:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x14
   410  00004A                     	ds	2
   411  00004C                     initialRotation@side:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x16
   415  00004C                     	ds	1
   416  00004D                     ??_high_isr:
   417                           
   418                           ; 0 bytes @ 0x17
   419  00004D                     	ds	14
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           
   427 ;;
   428 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   429 ;;
   430 ;; *************** function _main *****************
   431 ;; Defined at:
   432 ;;		line 41 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;		None               void
   439 ;; Registers used:
   440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels required when called:    8
   452 ;; This function calls:
   453 ;;		_ConfigureOscillator
   454 ;;		_InitApp
   455 ;;		_sensorUpdate
   456 ;;		_setCorrection
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text0
   463  001F0A                     __ptext0:
   464                           	opt stack 0
   465  001F0A                     _main:
   466                           	opt stack 23
   467                           
   468                           ;main.c: 44: ConfigureOscillator();
   469                           
   470                           ;incstack = 0
   471  001F0A  ECD8  F00F         	call	_ConfigureOscillator	;wreg free
   472                           
   473                           ;main.c: 47: InitApp();
   474  001F0E  ECC5  F00E         	call	_InitApp	;wreg free
   475                           
   476                           ;main.c: 48: sensorUpdate(1);
   477  001F12  0E01               	movlw	1
   478  001F14  EC8D  F00C         	call	_sensorUpdate
   479                           
   480                           ;main.c: 49: sensorUpdate(1);
   481  001F18  0E01               	movlw	1
   482  001F1A  EC8D  F00C         	call	_sensorUpdate
   483                           
   484                           ;main.c: 50: sensorUpdate(1);
   485  001F1E  0E01               	movlw	1
   486  001F20  EC8D  F00C         	call	_sensorUpdate
   487                           
   488                           ;main.c: 51: setCorrection();
   489  001F24  EC97  F00D         	call	_setCorrection	;wreg free
   490                           
   491                           ;main.c: 52: INTCONbits.GIE = 1;
   492  001F28  8EF2               	bsf	intcon,7,c	;volatile
   493  001F2A  D000               	goto	l2170
   494  001F2C                     l2170:
   495                           
   496                           ;main.c: 54: {
   497                           ;main.c: 55: sensorUpdate(0);
   498  001F2C  0E00               	movlw	0
   499  001F2E  EC8D  F00C         	call	_sensorUpdate
   500  001F32  D7FC               	goto	l2170
   501  001F34  EF51  F000         	goto	start
   502  001F38                     __end_of_main:
   503                           	opt stack 0
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           intcon	equ	0xFF2
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           
   512 ;; *************** function _setCorrection *****************
   513 ;; Defined at:
   514 ;;		line 125 in file "user.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  frontAvg        2   12[BANK0 ] int 
   519 ;;  sideAvg         2   10[BANK0 ] int 
   520 ;; Return value:  Size  Location     Type
   521 ;;		None               void
   522 ;; Registers used:
   523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;Total ram usage:        6 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; Hardware stack levels required when called:    6
   536 ;; This function calls:
   537 ;;		___awdiv
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text1
   544  001B2E                     __ptext1:
   545                           	opt stack 0
   546  001B2E                     _setCorrection:
   547                           	opt stack 24
   548                           
   549                           ;user.c: 127: int sideAvg,frontAvg;
   550                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   551                           
   552                           ;incstack = 0
   553  001B2E  5009               	movf	_sensorValue,w,c
   554  001B30  240B               	addwf	_sensorValue+2,w,c
   555  001B32  0100               	movlb	0	; () banked
   556  001B34  6F80               	movwf	___awdiv@dividend& (0+255),b
   557  001B36  500A               	movf	_sensorValue+1,w,c
   558  001B38  200C               	addwfc	_sensorValue+3,w,c
   559  001B3A  0100               	movlb	0	; () banked
   560  001B3C  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   561  001B3E  0E00               	movlw	0
   562  001B40  0100               	movlb	0	; () banked
   563  001B42  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   564  001B44  0E02               	movlw	2
   565  001B46  6F82               	movwf	___awdiv@divisor& (0+255),b
   566  001B48  EC10  F00E         	call	___awdiv	;wreg free
   567  001B4C  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   568  001B50  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   569                           
   570                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   571  001B54  500F               	movf	_sensorValue+6,w,c
   572  001B56  240D               	addwf	_sensorValue+4,w,c
   573  001B58  0100               	movlb	0	; () banked
   574  001B5A  6F80               	movwf	___awdiv@dividend& (0+255),b
   575  001B5C  5010               	movf	_sensorValue+7,w,c
   576  001B5E  200E               	addwfc	_sensorValue+5,w,c
   577  001B60  0100               	movlb	0	; () banked
   578  001B62  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   579  001B64  0E00               	movlw	0
   580  001B66  0100               	movlb	0	; () banked
   581  001B68  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   582  001B6A  0E02               	movlw	2
   583  001B6C  6F82               	movwf	___awdiv@divisor& (0+255),b
   584  001B6E  EC10  F00E         	call	___awdiv	;wreg free
   585  001B72  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   586  001B76  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   587                           
   588                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   589  001B7A  C009  F088         	movff	_sensorValue,??_setCorrection
   590  001B7E  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   591  001B82  0100               	movlb	0	; () banked
   592  001B84  1F88               	comf	??_setCorrection& (0+255),f,b
   593  001B86  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   594  001B88  4B88               	infsnz	??_setCorrection& (0+255),f,b
   595  001B8A  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   596  001B8C  0100               	movlb	0	; () banked
   597  001B8E  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   598  001B90  0100               	movlb	0	; () banked
   599  001B92  2588               	addwf	??_setCorrection& (0+255),w,b
   600  001B94  6E01               	movwf	_sensorCorrection,c
   601  001B96  0100               	movlb	0	; () banked
   602  001B98  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   603  001B9A  0100               	movlb	0	; () banked
   604  001B9C  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   605  001B9E  6E02               	movwf	_sensorCorrection+1,c
   606                           
   607                           ; BSR set to: 0
   608                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   609  001BA0  EE20  F00B         	lfsr	2,_sensorValue+2
   610  001BA4  CFDE F088          	movff	postinc2,??_setCorrection
   611  001BA8  CFDD F089          	movff	postdec2,??_setCorrection+1
   612  001BAC  0100               	movlb	0	; () banked
   613  001BAE  1F88               	comf	??_setCorrection& (0+255),f,b
   614  001BB0  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   615  001BB2  4B88               	infsnz	??_setCorrection& (0+255),f,b
   616  001BB4  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   617  001BB6  0100               	movlb	0	; () banked
   618  001BB8  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   619  001BBA  0100               	movlb	0	; () banked
   620  001BBC  2588               	addwf	??_setCorrection& (0+255),w,b
   621  001BBE  6E03               	movwf	_sensorCorrection+2,c
   622  001BC0  0100               	movlb	0	; () banked
   623  001BC2  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   624  001BC4  0100               	movlb	0	; () banked
   625  001BC6  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   626  001BC8  6E04               	movwf	_sensorCorrection+3,c
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   630  001BCA  EE20  F00D         	lfsr	2,_sensorValue+4
   631  001BCE  CFDE F088          	movff	postinc2,??_setCorrection
   632  001BD2  CFDD F089          	movff	postdec2,??_setCorrection+1
   633  001BD6  0100               	movlb	0	; () banked
   634  001BD8  1F88               	comf	??_setCorrection& (0+255),f,b
   635  001BDA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   636  001BDC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   637  001BDE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   638  001BE0  0100               	movlb	0	; () banked
   639  001BE2  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   640  001BE4  0100               	movlb	0	; () banked
   641  001BE6  2588               	addwf	??_setCorrection& (0+255),w,b
   642  001BE8  6E05               	movwf	_sensorCorrection+4,c
   643  001BEA  0100               	movlb	0	; () banked
   644  001BEC  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   645  001BEE  0100               	movlb	0	; () banked
   646  001BF0  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   647  001BF2  6E06               	movwf	_sensorCorrection+5,c
   648                           
   649                           ; BSR set to: 0
   650                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   651  001BF4  EE20  F00F         	lfsr	2,_sensorValue+6
   652  001BF8  CFDE F088          	movff	postinc2,??_setCorrection
   653  001BFC  CFDD F089          	movff	postdec2,??_setCorrection+1
   654  001C00  0100               	movlb	0	; () banked
   655  001C02  1F88               	comf	??_setCorrection& (0+255),f,b
   656  001C04  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   657  001C06  4B88               	infsnz	??_setCorrection& (0+255),f,b
   658  001C08  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   659  001C0A  0100               	movlb	0	; () banked
   660  001C0C  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   661  001C0E  0100               	movlb	0	; () banked
   662  001C10  2588               	addwf	??_setCorrection& (0+255),w,b
   663  001C12  6E07               	movwf	_sensorCorrection+6,c
   664  001C14  0100               	movlb	0	; () banked
   665  001C16  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   666  001C18  0100               	movlb	0	; () banked
   667  001C1A  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   668  001C1C  6E08               	movwf	_sensorCorrection+7,c
   669                           
   670                           ; BSR set to: 0
   671  001C1E  0012               	return		;funcret
   672  001C20                     __end_of_setCorrection:
   673                           	opt stack 0
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           intcon	equ	0xFF2
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postinc2	equ	0xFDE
   682                           postdec2	equ	0xFDD
   683                           
   684 ;; *************** function _sensorUpdate *****************
   685 ;; Defined at:
   686 ;;		line 168 in file "user.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  getCorrectio    1    wreg     unsigned char 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  getCorrectio    1  114[BANK0 ] unsigned char 
   691 ;;  sensorTemp     80   34[BANK0 ] int [10][4]
   692 ;;  j               2  117[BANK0 ] int 
   693 ;;  i               2  115[BANK0 ] int 
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;Total ram usage:       91 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    7
   710 ;; This function calls:
   711 ;;		___wmul
   712 ;;		_sensorComputation
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text2
   719  00191A                     __ptext2:
   720                           	opt stack 0
   721  00191A                     _sensorUpdate:
   722                           	opt stack 23
   723                           
   724                           ; BSR set to: 0
   725                           ;incstack = 0
   726                           ;sensorUpdate@getCorrection stored from wreg
   727  00191A  0100               	movlb	0	; () banked
   728  00191C  6FF2               	movwf	sensorUpdate@getCorrection& (0+255),b
   729                           
   730                           ; BSR set to: 0
   731                           ;user.c: 170: int i,j;
   732                           ;user.c: 171: int sensorTemp[4][10];
   733                           ;user.c: 174: for(i = 0; i < 10; i++)
   734  00191E  0E00               	movlw	0
   735  001920  0100               	movlb	0	; () banked
   736  001922  6FF4               	movwf	(sensorUpdate@i+1)& (0+255),b
   737  001924  0E00               	movlw	0
   738  001926  6FF3               	movwf	sensorUpdate@i& (0+255),b
   739  001928                     l2120:
   740                           
   741                           ; BSR set to: 0
   742  001928  0100               	movlb	0	; () banked
   743  00192A  BFF4               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   744  00192C  D00A               	goto	l2124
   745  00192E  0100               	movlb	0	; () banked
   746  001930  51F4               	movf	(sensorUpdate@i+1)& (0+255),w,b
   747  001932  E178               	bnz	l2144
   748  001934  0E0A               	movlw	10
   749  001936  0100               	movlb	0	; () banked
   750  001938  5DF3               	subwf	sensorUpdate@i& (0+255),w,b
   751  00193A  B0D8               	btfsc	status,0,c
   752  00193C  D073               	goto	l2144
   753  00193E  D001               	goto	l2124
   754                           
   755                           ; BSR set to: 0
   756  001940  D071               	goto	l2144
   757  001942                     l2124:
   758                           
   759                           ; BSR set to: 0
   760                           ;user.c: 175: {
   761                           ;user.c: 176: for(j = 0 ; j < 4 ; j++)
   762  001942  0E00               	movlw	0
   763  001944  0100               	movlb	0	; () banked
   764  001946  6FF6               	movwf	(sensorUpdate@j+1)& (0+255),b
   765  001948  0E00               	movlw	0
   766  00194A  6FF5               	movwf	sensorUpdate@j& (0+255),b
   767  00194C                     l2126:
   768                           
   769                           ; BSR set to: 0
   770  00194C  0100               	movlb	0	; () banked
   771  00194E  BFF6               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   772  001950  D00A               	goto	l2130
   773  001952  0100               	movlb	0	; () banked
   774  001954  51F6               	movf	(sensorUpdate@j+1)& (0+255),w,b
   775  001956  E161               	bnz	l2140
   776  001958  0E04               	movlw	4
   777  00195A  0100               	movlb	0	; () banked
   778  00195C  5DF5               	subwf	sensorUpdate@j& (0+255),w,b
   779  00195E  B0D8               	btfsc	status,0,c
   780  001960  D05C               	goto	l2140
   781  001962  D001               	goto	l2130
   782                           
   783                           ; BSR set to: 0
   784  001964  D05A               	goto	l2140
   785  001966                     l2130:
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 177: {
   789                           ;user.c: 178: ADCON0 = sensorLocation[j];
   790  001966  0E01               	movlw	low _sensorLocation
   791  001968  0100               	movlb	0	; () banked
   792  00196A  25F5               	addwf	sensorUpdate@j& (0+255),w,b
   793  00196C  6EF6               	movwf	tblptrl,c
   794  00196E  0E10               	movlw	high _sensorLocation
   795  001970  21F6               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   796  001972  6EF7               	movwf	tblptrh,c
   797  001974                     	if	0	;There are less than 3 active tblptr bytes
   798  001974                     	endif
   799  001974  0008               	tblrd		*
   800  001976  CFF5 FFC2          	movff	tablat,4034	;volatile
   801                           
   802                           ; BSR set to: 0
   803                           ;user.c: 180: ADCON0bits.GO_DONE = 1;
   804  00197A  82C2               	bsf	4034,1,c	;volatile
   805                           
   806                           ;user.c: 181: while(ADCON0bits.GO_DONE != 0);
   807  00197C  D000               	goto	l359
   808  00197E                     l359:
   809                           
   810                           ; BSR set to: 0
   811  00197E  B2C2               	btfsc	4034,1,c	;volatile
   812  001980  D7FE               	goto	l359
   813                           
   814                           ; BSR set to: 0
   815                           ;user.c: 182: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   816                           
   817                           ; BSR set to: 0
   818  001982  CFC3 F09C          	movff	4035,??_sensorUpdate	;volatile
   819  001986  0E06               	movlw	6
   820  001988  0100               	movlb	0	; () banked
   821  00198A  6F9D               	movwf	(??_sensorUpdate+1)& (0+255),b
   822  00198C                     u2145:
   823  00198C  0100               	movlb	0	; () banked
   824  00198E  90D8               	bcf	status,0,c
   825  001990  339C               	rrcf	??_sensorUpdate& (0+255),f,b
   826  001992  0100               	movlb	0	; () banked
   827  001994  2F9D               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   828  001996  D7FA               	goto	u2145
   829  001998  0100               	movlb	0	; () banked
   830  00199A  519C               	movf	??_sensorUpdate& (0+255),w,b
   831  00199C  CFC4 F09E          	movff	4036,??_sensorUpdate+2	;volatile
   832  0019A0  0100               	movlb	0	; () banked
   833  0019A2  6B9F               	clrf	(??_sensorUpdate+3)& (0+255),b
   834  0019A4  0100               	movlb	0	; () banked
   835  0019A6  90D8               	bcf	status,0,c
   836  0019A8  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   837  0019AA  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   838  0019AC  0100               	movlb	0	; () banked
   839  0019AE  90D8               	bcf	status,0,c
   840  0019B0  379E               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   841  0019B2  379F               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   842  0019B4  0100               	movlb	0	; () banked
   843  0019B6  279E               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   844  0019B8  0E00               	movlw	0
   845  0019BA  239F               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   846  0019BC  C0F5  F080         	movff	sensorUpdate@j,___wmul@multiplier
   847  0019C0  C0F6  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   848  0019C4  0E00               	movlw	0
   849  0019C6  0100               	movlb	0	; () banked
   850  0019C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   851  0019CA  0E14               	movlw	20
   852  0019CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
   853  0019CE  EC01  F00F         	call	___wmul	;wreg free
   854  0019D2  0EA2               	movlw	low sensorUpdate@sensorTemp
   855  0019D4  0100               	movlb	0	; () banked
   856  0019D6  6FA0               	movwf	(??_sensorUpdate+4)& (0+255),b
   857  0019D8  0E00               	movlw	high sensorUpdate@sensorTemp
   858  0019DA  0100               	movlb	0	; () banked
   859  0019DC  6FA1               	movwf	(??_sensorUpdate+5)& (0+255),b
   860  0019DE  0100               	movlb	0	; () banked
   861  0019E0  5180               	movf	?___wmul& (0+255),w,b
   862  0019E2  0100               	movlb	0	; () banked
   863  0019E4  27A0               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   864  0019E6  0100               	movlb	0	; () banked
   865  0019E8  5181               	movf	(?___wmul+1)& (0+255),w,b
   866  0019EA  0100               	movlb	0	; () banked
   867  0019EC  23A1               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   868  0019EE  90D8               	bcf	status,0,c
   869  0019F0  0100               	movlb	0	; () banked
   870  0019F2  35F3               	rlcf	sensorUpdate@i& (0+255),w,b
   871  0019F4  6ED9               	movwf	fsr2l,c
   872  0019F6  0100               	movlb	0	; () banked
   873  0019F8  35F4               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   874  0019FA  6EDA               	movwf	fsr2h,c
   875  0019FC  0100               	movlb	0	; () banked
   876  0019FE  51A0               	movf	(??_sensorUpdate+4)& (0+255),w,b
   877  001A00  26D9               	addwf	fsr2l,f,c
   878  001A02  0100               	movlb	0	; () banked
   879  001A04  51A1               	movf	(??_sensorUpdate+5)& (0+255),w,b
   880  001A06  22DA               	addwfc	fsr2h,f,c
   881  001A08  C09E  FFDE         	movff	??_sensorUpdate+2,postinc2
   882  001A0C  C09F  FFDD         	movff	??_sensorUpdate+3,postdec2
   883                           
   884                           ; BSR set to: 0
   885  001A10  0100               	movlb	0	; () banked
   886  001A12  4BF5               	infsnz	sensorUpdate@j& (0+255),f,b
   887  001A14  2BF6               	incf	(sensorUpdate@j+1)& (0+255),f,b
   888  001A16  D79A               	goto	l2126
   889                           
   890                           ; BSR set to: 0
   891  001A18  D000               	goto	l2140
   892  001A1A                     l2140:
   893                           
   894                           ; BSR set to: 0
   895  001A1A  0100               	movlb	0	; () banked
   896  001A1C  4BF3               	infsnz	sensorUpdate@i& (0+255),f,b
   897  001A1E  2BF4               	incf	(sensorUpdate@i+1)& (0+255),f,b
   898  001A20  D783               	goto	l2120
   899                           
   900                           ; BSR set to: 0
   901  001A22  D000               	goto	l2144
   902  001A24                     l2144:
   903                           
   904                           ; BSR set to: 0
   905                           ;user.c: 183: }
   906                           ;user.c: 184: }
   907                           ;user.c: 187: sensorComputation(sensorTemp,getCorrection);
   908  001A24  0EA2               	movlw	low sensorUpdate@sensorTemp
   909  001A26  0100               	movlb	0	; () banked
   910  001A28  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   911  001A2A  0E00               	movlw	high sensorUpdate@sensorTemp
   912  001A2C  0100               	movlb	0	; () banked
   913  001A2E  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   914  001A30  C0F2  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   915  001A34  EC03  F008         	call	_sensorComputation	;wreg free
   916  001A38  0012               	return		;funcret
   917  001A3A                     __end_of_sensorUpdate:
   918                           	opt stack 0
   919                           tblptru	equ	0xFF8
   920                           tblptrh	equ	0xFF7
   921                           tblptrl	equ	0xFF6
   922                           tablat	equ	0xFF5
   923                           intcon	equ	0xFF2
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           postinc2	equ	0xFDE
   927                           postdec2	equ	0xFDD
   928                           fsr2h	equ	0xFDA
   929                           fsr2l	equ	0xFD9
   930                           status	equ	0xFD8
   931                           
   932 ;; *************** function _sensorComputation *****************
   933 ;; Defined at:
   934 ;;		line 137 in file "user.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   937 ;;		 -> sensorUpdate@sensorTemp(80), 
   938 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  i               2   26[BANK0 ] int 
   941 ;;  j               2   24[BANK0 ] int 
   942 ;;  sum             2   22[BANK0 ] int 
   943 ;;  min             2   20[BANK0 ] int 
   944 ;;  max             2   18[BANK0 ] int 
   945 ;; Return value:  Size  Location     Type
   946 ;;		None               void
   947 ;; Registers used:
   948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   954 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;Total ram usage:       17 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    6
   961 ;; This function calls:
   962 ;;		_MAX
   963 ;;		_MIN
   964 ;;		___awdiv
   965 ;;		___wmul
   966 ;; This function is called by:
   967 ;;		_sensorUpdate
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text3
   972  001006                     __ptext3:
   973                           	opt stack 0
   974  001006                     _sensorComputation:
   975                           	opt stack 23
   976                           
   977                           ;user.c: 139: int max,min,i,j,sum;
   978                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   979                           
   980                           ;incstack = 0
   981  001006  0E00               	movlw	0
   982  001008  0100               	movlb	0	; () banked
   983  00100A  6F9B               	movwf	(sensorComputation@i+1)& (0+255),b
   984  00100C  0E00               	movlw	0
   985  00100E  6F9A               	movwf	sensorComputation@i& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988  001010  0100               	movlb	0	; () banked
   989  001012  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   990  001014  D00A               	goto	l2060
   991  001016  0100               	movlb	0	; () banked
   992  001018  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
   993  00101A  E106               	bnz	u2010
   994  00101C  0E04               	movlw	4
   995  00101E  0100               	movlb	0	; () banked
   996  001020  5D9A               	subwf	sensorComputation@i& (0+255),w,b
   997  001022  B0D8               	btfsc	status,0,c
   998  001024  D1D3               	goto	l352
   999  001026  D001               	goto	l2060
  1000  001028                     u2010:
  1001                           
  1002                           ; BSR set to: 0
  1003  001028  D1D1               	goto	l352
  1004  00102A                     l2060:
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;user.c: 141: {
  1008                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1009  00102A  0E00               	movlw	0
  1010  00102C  0100               	movlb	0	; () banked
  1011  00102E  6F99               	movwf	(sensorComputation@j+1)& (0+255),b
  1012  001030  0E00               	movlw	0
  1013  001032  6F98               	movwf	sensorComputation@j& (0+255),b
  1014                           
  1015                           ; BSR set to: 0
  1016  001034  0100               	movlb	0	; () banked
  1017  001036  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1018  001038  D00A               	goto	l2066
  1019  00103A  0100               	movlb	0	; () banked
  1020  00103C  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1021  00103E  E106               	bnz	u2020
  1022  001040  0E0A               	movlw	10
  1023  001042  0100               	movlb	0	; () banked
  1024  001044  5D98               	subwf	sensorComputation@j& (0+255),w,b
  1025  001046  B0D8               	btfsc	status,0,c
  1026  001048  D0D3               	goto	l2076
  1027  00104A  D001               	goto	l2066
  1028  00104C                     u2020:
  1029                           
  1030                           ; BSR set to: 0
  1031  00104C  D0D1               	goto	l2076
  1032  00104E                     l2066:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;user.c: 143: {
  1036                           ;user.c: 144: if(j == 0)
  1037  00104E  0100               	movlb	0	; () banked
  1038  001050  5198               	movf	sensorComputation@j& (0+255),w,b
  1039  001052  0100               	movlb	0	; () banked
  1040  001054  1199               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1041  001056  A4D8               	btfss	status,2,c
  1042  001058  D031               	goto	l2070
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;user.c: 145: {
  1046                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1047  00105A  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1048  00105E  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1049  001062  0E00               	movlw	0
  1050  001064  0100               	movlb	0	; () banked
  1051  001066  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1052  001068  0E14               	movlw	20
  1053  00106A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1054  00106C  EC01  F00F         	call	___wmul	;wreg free
  1055  001070  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1056  001074  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1057  001078  0100               	movlb	0	; () banked
  1058  00107A  5180               	movf	?___wmul& (0+255),w,b
  1059  00107C  0100               	movlb	0	; () banked
  1060  00107E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1061  001080  0100               	movlb	0	; () banked
  1062  001082  5181               	movf	(?___wmul+1)& (0+255),w,b
  1063  001084  0100               	movlb	0	; () banked
  1064  001086  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1065  001088  90D8               	bcf	status,0,c
  1066  00108A  0100               	movlb	0	; () banked
  1067  00108C  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1068  00108E  6ED9               	movwf	fsr2l,c
  1069  001090  0100               	movlb	0	; () banked
  1070  001092  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1071  001094  6EDA               	movwf	fsr2h,c
  1072  001096  0100               	movlb	0	; () banked
  1073  001098  518E               	movf	??_sensorComputation& (0+255),w,b
  1074  00109A  26D9               	addwf	fsr2l,f,c
  1075  00109C  0100               	movlb	0	; () banked
  1076  00109E  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1077  0010A0  22DA               	addwfc	fsr2h,f,c
  1078  0010A2  CFDE F092          	movff	postinc2,sensorComputation@max
  1079  0010A6  CFDD F093          	movff	postdec2,sensorComputation@max+1
  1080  0010AA  C092  F094         	movff	sensorComputation@max,sensorComputation@min
  1081  0010AE  C093  F095         	movff	sensorComputation@max+1,sensorComputation@min+1
  1082  0010B2  C094  F096         	movff	sensorComputation@min,sensorComputation@sum
  1083  0010B6  C095  F097         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1084                           
  1085                           ;user.c: 147: continue;
  1086  0010BA  D08F               	goto	l2072
  1087  0010BC                     l2070:
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;user.c: 148: }
  1091                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1092  0010BC  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1093  0010C0  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1094  0010C4  0E00               	movlw	0
  1095  0010C6  0100               	movlb	0	; () banked
  1096  0010C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1097  0010CA  0E14               	movlw	20
  1098  0010CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1099  0010CE  EC01  F00F         	call	___wmul	;wreg free
  1100  0010D2  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1101  0010D6  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1102  0010DA  0100               	movlb	0	; () banked
  1103  0010DC  5180               	movf	?___wmul& (0+255),w,b
  1104  0010DE  0100               	movlb	0	; () banked
  1105  0010E0  278E               	addwf	??_sensorComputation& (0+255),f,b
  1106  0010E2  0100               	movlb	0	; () banked
  1107  0010E4  5181               	movf	(?___wmul+1)& (0+255),w,b
  1108  0010E6  0100               	movlb	0	; () banked
  1109  0010E8  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1110  0010EA  90D8               	bcf	status,0,c
  1111  0010EC  0100               	movlb	0	; () banked
  1112  0010EE  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1113  0010F0  6ED9               	movwf	fsr2l,c
  1114  0010F2  0100               	movlb	0	; () banked
  1115  0010F4  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1116  0010F6  6EDA               	movwf	fsr2h,c
  1117  0010F8  0100               	movlb	0	; () banked
  1118  0010FA  518E               	movf	??_sensorComputation& (0+255),w,b
  1119  0010FC  26D9               	addwf	fsr2l,f,c
  1120  0010FE  0100               	movlb	0	; () banked
  1121  001100  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1122  001102  22DA               	addwfc	fsr2h,f,c
  1123  001104  CFDE F086          	movff	postinc2,MIN@a
  1124  001108  CFDD F087          	movff	postdec2,MIN@a+1
  1125  00110C  C094  F088         	movff	sensorComputation@min,MIN@b
  1126  001110  C095  F089         	movff	sensorComputation@min+1,MIN@b+1
  1127  001114  EC37  F00F         	call	_MIN	;wreg free
  1128  001118  C086  F094         	movff	?_MIN,sensorComputation@min
  1129  00111C  C087  F095         	movff	?_MIN+1,sensorComputation@min+1
  1130                           
  1131                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1132  001120  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1133  001124  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1134  001128  0E00               	movlw	0
  1135  00112A  0100               	movlb	0	; () banked
  1136  00112C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1137  00112E  0E14               	movlw	20
  1138  001130  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1139  001132  EC01  F00F         	call	___wmul	;wreg free
  1140  001136  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1141  00113A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1142  00113E  0100               	movlb	0	; () banked
  1143  001140  5180               	movf	?___wmul& (0+255),w,b
  1144  001142  0100               	movlb	0	; () banked
  1145  001144  278E               	addwf	??_sensorComputation& (0+255),f,b
  1146  001146  0100               	movlb	0	; () banked
  1147  001148  5181               	movf	(?___wmul+1)& (0+255),w,b
  1148  00114A  0100               	movlb	0	; () banked
  1149  00114C  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1150  00114E  90D8               	bcf	status,0,c
  1151  001150  0100               	movlb	0	; () banked
  1152  001152  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1153  001154  6ED9               	movwf	fsr2l,c
  1154  001156  0100               	movlb	0	; () banked
  1155  001158  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1156  00115A  6EDA               	movwf	fsr2h,c
  1157  00115C  0100               	movlb	0	; () banked
  1158  00115E  518E               	movf	??_sensorComputation& (0+255),w,b
  1159  001160  26D9               	addwf	fsr2l,f,c
  1160  001162  0100               	movlb	0	; () banked
  1161  001164  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1162  001166  22DA               	addwfc	fsr2h,f,c
  1163  001168  CFDE F086          	movff	postinc2,MAX@a
  1164  00116C  CFDD F087          	movff	postdec2,MAX@a+1
  1165  001170  C092  F088         	movff	sensorComputation@max,MAX@b
  1166  001174  C093  F089         	movff	sensorComputation@max+1,MAX@b+1
  1167  001178  EC51  F00F         	call	_MAX	;wreg free
  1168  00117C  C086  F092         	movff	?_MAX,sensorComputation@max
  1169  001180  C087  F093         	movff	?_MAX+1,sensorComputation@max+1
  1170                           
  1171                           ;user.c: 151: sum += sensorTemp[i][j];
  1172  001184  C09A  F080         	movff	sensorComputation@i,___wmul@multiplier
  1173  001188  C09B  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1174  00118C  0E00               	movlw	0
  1175  00118E  0100               	movlb	0	; () banked
  1176  001190  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1177  001192  0E14               	movlw	20
  1178  001194  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1179  001196  EC01  F00F         	call	___wmul	;wreg free
  1180  00119A  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1181  00119E  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1182  0011A2  0100               	movlb	0	; () banked
  1183  0011A4  5180               	movf	?___wmul& (0+255),w,b
  1184  0011A6  0100               	movlb	0	; () banked
  1185  0011A8  278E               	addwf	??_sensorComputation& (0+255),f,b
  1186  0011AA  0100               	movlb	0	; () banked
  1187  0011AC  5181               	movf	(?___wmul+1)& (0+255),w,b
  1188  0011AE  0100               	movlb	0	; () banked
  1189  0011B0  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1190  0011B2  90D8               	bcf	status,0,c
  1191  0011B4  0100               	movlb	0	; () banked
  1192  0011B6  3598               	rlcf	sensorComputation@j& (0+255),w,b
  1193  0011B8  6ED9               	movwf	fsr2l,c
  1194  0011BA  0100               	movlb	0	; () banked
  1195  0011BC  3599               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1196  0011BE  6EDA               	movwf	fsr2h,c
  1197  0011C0  0100               	movlb	0	; () banked
  1198  0011C2  518E               	movf	??_sensorComputation& (0+255),w,b
  1199  0011C4  26D9               	addwf	fsr2l,f,c
  1200  0011C6  0100               	movlb	0	; () banked
  1201  0011C8  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1202  0011CA  22DA               	addwfc	fsr2h,f,c
  1203  0011CC  50DE               	movf	postinc2,w,c
  1204  0011CE  0100               	movlb	0	; () banked
  1205  0011D0  2796               	addwf	sensorComputation@sum& (0+255),f,b
  1206  0011D2  50DD               	movf	postdec2,w,c
  1207  0011D4  0100               	movlb	0	; () banked
  1208  0011D6  2397               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1209  0011D8  D000               	goto	l2072
  1210  0011DA                     l2072:
  1211                           
  1212                           ; BSR set to: 0
  1213  0011DA  0100               	movlb	0	; () banked
  1214  0011DC  4B98               	infsnz	sensorComputation@j& (0+255),f,b
  1215  0011DE  2B99               	incf	(sensorComputation@j+1)& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 0
  1218  0011E0  0100               	movlb	0	; () banked
  1219  0011E2  BF99               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1220  0011E4  D734               	goto	l2066
  1221  0011E6  0100               	movlb	0	; () banked
  1222  0011E8  5199               	movf	(sensorComputation@j+1)& (0+255),w,b
  1223  0011EA  E102               	bnz	l2076
  1224  0011EC  D729               	goto	L2
  1225  0011EE  D000               	goto	l2076
  1226  0011F0                     l2076:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;user.c: 152: }
  1230                           ;user.c: 153: sum = sum - min - max;
  1231  0011F0  0100               	movlb	0	; () banked
  1232  0011F2  5192               	movf	sensorComputation@max& (0+255),w,b
  1233  0011F4  0100               	movlb	0	; () banked
  1234  0011F6  2594               	addwf	sensorComputation@min& (0+255),w,b
  1235  0011F8  0100               	movlb	0	; () banked
  1236  0011FA  6F8E               	movwf	??_sensorComputation& (0+255),b
  1237  0011FC  0100               	movlb	0	; () banked
  1238  0011FE  5193               	movf	(sensorComputation@max+1)& (0+255),w,b
  1239  001200  0100               	movlb	0	; () banked
  1240  001202  2195               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1241  001204  0100               	movlb	0	; () banked
  1242  001206  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1243  001208  0100               	movlb	0	; () banked
  1244  00120A  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1245  00120C  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1246  00120E  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1247  001210  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1248  001212  0100               	movlb	0	; () banked
  1249  001214  5196               	movf	sensorComputation@sum& (0+255),w,b
  1250  001216  0100               	movlb	0	; () banked
  1251  001218  258E               	addwf	??_sensorComputation& (0+255),w,b
  1252  00121A  0100               	movlb	0	; () banked
  1253  00121C  6F96               	movwf	sensorComputation@sum& (0+255),b
  1254  00121E  0100               	movlb	0	; () banked
  1255  001220  5197               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1256  001222  0100               	movlb	0	; () banked
  1257  001224  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1258  001226  0100               	movlb	0	; () banked
  1259  001228  6F97               	movwf	(sensorComputation@sum+1)& (0+255),b
  1260                           
  1261                           ;user.c: 154: if(getCorrection == 1)
  1262  00122A  0100               	movlb	0	; () banked
  1263  00122C  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1264  00122E  A4D8               	btfss	status,2,c
  1265  001230  D01D               	goto	l2080
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1269  001232  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1270  001236  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1271  00123A  0E00               	movlw	0
  1272  00123C  0100               	movlb	0	; () banked
  1273  00123E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1274  001240  0E08               	movlw	8
  1275  001242  6F82               	movwf	___awdiv@divisor& (0+255),b
  1276  001244  EC10  F00E         	call	___awdiv	;wreg free
  1277  001248  90D8               	bcf	status,0,c
  1278  00124A  0100               	movlb	0	; () banked
  1279  00124C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1280  00124E  6ED9               	movwf	fsr2l,c
  1281  001250  0100               	movlb	0	; () banked
  1282  001252  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1283  001254  6EDA               	movwf	fsr2h,c
  1284  001256  0E09               	movlw	low _sensorValue
  1285  001258  26D9               	addwf	fsr2l,f,c
  1286  00125A  0E00               	movlw	high _sensorValue
  1287  00125C  22DA               	addwfc	fsr2h,f,c
  1288  00125E  0100               	movlb	0	; () banked
  1289  001260  C080  FFDE         	movff	?___awdiv,postinc2
  1290  001264  0100               	movlb	0	; () banked
  1291  001266  C081  FFDD         	movff	?___awdiv+1,postdec2
  1292  00126A  D0A5               	goto	l2094
  1293  00126C                     l2080:
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;user.c: 156: else
  1297                           ;user.c: 157: {
  1298                           ;user.c: 158: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1299  00126C  90D8               	bcf	status,0,c
  1300  00126E  0100               	movlb	0	; () banked
  1301  001270  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1302  001272  6ED9               	movwf	fsr2l,c
  1303  001274  0100               	movlb	0	; () banked
  1304  001276  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1305  001278  6EDA               	movwf	fsr2h,c
  1306  00127A  0E01               	movlw	low _sensorCorrection
  1307  00127C  26D9               	addwf	fsr2l,f,c
  1308  00127E  0E00               	movlw	high _sensorCorrection
  1309  001280  22DA               	addwfc	fsr2h,f,c
  1310  001282  CFDE F08E          	movff	postinc2,??_sensorComputation
  1311  001286  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1312  00128A  C096  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1313  00128E  C097  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1314  001292  0E00               	movlw	0
  1315  001294  0100               	movlb	0	; () banked
  1316  001296  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1317  001298  0E08               	movlw	8
  1318  00129A  6F82               	movwf	___awdiv@divisor& (0+255),b
  1319  00129C  EC10  F00E         	call	___awdiv	;wreg free
  1320  0012A0  0100               	movlb	0	; () banked
  1321  0012A2  518E               	movf	??_sensorComputation& (0+255),w,b
  1322  0012A4  0100               	movlb	0	; () banked
  1323  0012A6  2780               	addwf	?___awdiv& (0+255),f,b
  1324  0012A8  0100               	movlb	0	; () banked
  1325  0012AA  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1326  0012AC  0100               	movlb	0	; () banked
  1327  0012AE  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1328  0012B0  90D8               	bcf	status,0,c
  1329  0012B2  0100               	movlb	0	; () banked
  1330  0012B4  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1331  0012B6  6ED9               	movwf	fsr2l,c
  1332  0012B8  0100               	movlb	0	; () banked
  1333  0012BA  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1334  0012BC  6EDA               	movwf	fsr2h,c
  1335  0012BE  0E09               	movlw	low _sensorValue
  1336  0012C0  26D9               	addwf	fsr2l,f,c
  1337  0012C2  0E00               	movlw	high _sensorValue
  1338  0012C4  22DA               	addwfc	fsr2h,f,c
  1339  0012C6  0100               	movlb	0	; () banked
  1340  0012C8  C080  FFDE         	movff	?___awdiv,postinc2
  1341  0012CC  0100               	movlb	0	; () banked
  1342  0012CE  C081  FFDD         	movff	?___awdiv+1,postdec2
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;user.c: 159: if( i == 3)
  1346  0012D2  0E03               	movlw	3
  1347  0012D4  0100               	movlb	0	; () banked
  1348  0012D6  199A               	xorwf	sensorComputation@i& (0+255),w,b
  1349  0012D8  0100               	movlb	0	; () banked
  1350  0012DA  119B               	iorwf	(sensorComputation@i+1)& (0+255),w,b
  1351  0012DC  A4D8               	btfss	status,2,c
  1352  0012DE  D06B               	goto	l2094
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;user.c: 160: {
  1356                           ;user.c: 161: if(sensorValue[i] > 350 && sensorValue[i] <= 450) sensorValue[i] = sensorV
      +                          alue[i] - 40;
  1357  0012E0  90D8               	bcf	status,0,c
  1358  0012E2  0100               	movlb	0	; () banked
  1359  0012E4  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1360  0012E6  6ED9               	movwf	fsr2l,c
  1361  0012E8  0100               	movlb	0	; () banked
  1362  0012EA  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1363  0012EC  6EDA               	movwf	fsr2h,c
  1364  0012EE  0E09               	movlw	low _sensorValue
  1365  0012F0  26D9               	addwf	fsr2l,f,c
  1366  0012F2  0E00               	movlw	high _sensorValue
  1367  0012F4  22DA               	addwfc	fsr2h,f,c
  1368  0012F6  0E01               	movlw	1
  1369  0012F8  BEDB               	btfsc	plusw2,7,c
  1370  0012FA  D01C               	goto	l2090
  1371  0012FC  0E5F               	movlw	95
  1372  0012FE  5CDE               	subwf	postinc2,w,c
  1373  001300  0E01               	movlw	1
  1374  001302  58DE               	subwfb	postinc2,w,c
  1375  001304  A0D8               	btfss	status,0,c
  1376  001306  D016               	goto	l2090
  1377                           
  1378                           ; BSR set to: 0
  1379  001308  90D8               	bcf	status,0,c
  1380  00130A  0100               	movlb	0	; () banked
  1381  00130C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1382  00130E  6ED9               	movwf	fsr2l,c
  1383  001310  0100               	movlb	0	; () banked
  1384  001312  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1385  001314  6EDA               	movwf	fsr2h,c
  1386  001316  0E09               	movlw	low _sensorValue
  1387  001318  26D9               	addwf	fsr2l,f,c
  1388  00131A  0E00               	movlw	high _sensorValue
  1389  00131C  22DA               	addwfc	fsr2h,f,c
  1390  00131E  0E01               	movlw	1
  1391  001320  BEDB               	btfsc	plusw2,7,c
  1392  001322  D006               	goto	l2088
  1393  001324  0EC3               	movlw	195
  1394  001326  5CDE               	subwf	postinc2,w,c
  1395  001328  0E01               	movlw	1
  1396  00132A  58DE               	subwfb	postinc2,w,c
  1397  00132C  B0D8               	btfsc	status,0,c
  1398  00132E  D002               	goto	l2090
  1399  001330                     l2088:
  1400                           
  1401                           ; BSR set to: 0
  1402  001330  0ED8               	movlw	216
  1403  001332  D015               	goto	L3
  1404  001334                     l2090:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;user.c: 162: else if(sensorValue[i] > 450) sensorValue[i] = sensorValue[i] - 60;
  1408  001334  90D8               	bcf	status,0,c
  1409  001336  0100               	movlb	0	; () banked
  1410  001338  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1411  00133A  6ED9               	movwf	fsr2l,c
  1412  00133C  0100               	movlb	0	; () banked
  1413  00133E  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1414  001340  6EDA               	movwf	fsr2h,c
  1415  001342  0E09               	movlw	low _sensorValue
  1416  001344  26D9               	addwf	fsr2l,f,c
  1417  001346  0E00               	movlw	high _sensorValue
  1418  001348  22DA               	addwfc	fsr2h,f,c
  1419  00134A  0E01               	movlw	1
  1420  00134C  BEDB               	btfsc	plusw2,7,c
  1421  00134E  D033               	goto	l2094
  1422  001350  0EC3               	movlw	195
  1423  001352  5CDE               	subwf	postinc2,w,c
  1424  001354  0E01               	movlw	1
  1425  001356  58DE               	subwfb	postinc2,w,c
  1426  001358  A0D8               	btfss	status,0,c
  1427  00135A  D02D               	goto	l2094
  1428                           
  1429                           ; BSR set to: 0
  1430  00135C  0EC4               	movlw	196
  1431  00135E                     L3:
  1432  00135E  0100               	movlb	0	; () banked
  1433  001360  6F8E               	movwf	??_sensorComputation& (0+255),b
  1434  001362  0EFF               	movlw	255
  1435  001364  0100               	movlb	0	; () banked
  1436  001366  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1437  001368  90D8               	bcf	status,0,c
  1438  00136A  0100               	movlb	0	; () banked
  1439  00136C  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1440  00136E  6ED9               	movwf	fsr2l,c
  1441  001370  0100               	movlb	0	; () banked
  1442  001372  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1443  001374  6EDA               	movwf	fsr2h,c
  1444  001376  0E09               	movlw	low _sensorValue
  1445  001378  26D9               	addwf	fsr2l,f,c
  1446  00137A  0E00               	movlw	high _sensorValue
  1447  00137C  22DA               	addwfc	fsr2h,f,c
  1448  00137E  CFDE F090          	movff	postinc2,??_sensorComputation+2
  1449  001382  CFDD F091          	movff	postdec2,??_sensorComputation+3
  1450  001386  0100               	movlb	0	; () banked
  1451  001388  518E               	movf	??_sensorComputation& (0+255),w,b
  1452  00138A  0100               	movlb	0	; () banked
  1453  00138C  2790               	addwf	(??_sensorComputation+2)& (0+255),f,b
  1454  00138E  0100               	movlb	0	; () banked
  1455  001390  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1456  001392  0100               	movlb	0	; () banked
  1457  001394  2391               	addwfc	(??_sensorComputation+3)& (0+255),f,b
  1458  001396  90D8               	bcf	status,0,c
  1459  001398  0100               	movlb	0	; () banked
  1460  00139A  359A               	rlcf	sensorComputation@i& (0+255),w,b
  1461  00139C  6ED9               	movwf	fsr2l,c
  1462  00139E  0100               	movlb	0	; () banked
  1463  0013A0  359B               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1464  0013A2  6EDA               	movwf	fsr2h,c
  1465  0013A4  0E09               	movlw	low _sensorValue
  1466  0013A6  26D9               	addwf	fsr2l,f,c
  1467  0013A8  0E00               	movlw	high _sensorValue
  1468  0013AA  22DA               	addwfc	fsr2h,f,c
  1469  0013AC  C090  FFDE         	movff	??_sensorComputation+2,postinc2
  1470  0013B0  C091  FFDD         	movff	??_sensorComputation+3,postdec2
  1471                           
  1472                           ; BSR set to: 0
  1473                           
  1474                           ; BSR set to: 0
  1475                           
  1476                           ; BSR set to: 0
  1477  0013B4  D000               	goto	l2094
  1478  0013B6                     l2094:
  1479                           
  1480                           ; BSR set to: 0
  1481  0013B6  0100               	movlb	0	; () banked
  1482  0013B8  4B9A               	infsnz	sensorComputation@i& (0+255),f,b
  1483  0013BA  2B9B               	incf	(sensorComputation@i+1)& (0+255),f,b
  1484                           
  1485                           ; BSR set to: 0
  1486  0013BC  0100               	movlb	0	; () banked
  1487  0013BE  BF9B               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1488  0013C0  D634               	goto	l2060
  1489  0013C2  0100               	movlb	0	; () banked
  1490  0013C4  519B               	movf	(sensorComputation@i+1)& (0+255),w,b
  1491  0013C6  E102               	bnz	l352
  1492  0013C8  D629               	goto	L4
  1493  0013CA  D000               	goto	l352
  1494  0013CC                     l352:
  1495                           
  1496                           ; BSR set to: 0
  1497  0013CC  0012               	return		;funcret
  1498  0013CE                     __end_of_sensorComputation:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           intcon	equ	0xFF2
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postinc2	equ	0xFDE
  1508                           postdec2	equ	0xFDD
  1509                           plusw2	equ	0xFDB
  1510                           fsr2h	equ	0xFDA
  1511                           fsr2l	equ	0xFD9
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function ___wmul *****************
  1515 ;; Defined at:
  1516 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1519 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  product         2    4[BANK0 ] unsigned int 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  2    0[BANK0 ] unsigned int 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, status,0, prodl, prodh
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        6 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    5
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_sensorComputation
  1542 ;;		_sensorUpdate
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text4
  1547  001E02                     __ptext4:
  1548                           	opt stack 0
  1549  001E02                     ___wmul:
  1550                           	opt stack 23
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;incstack = 0
  1554  001E02  0100               	movlb	0	; () banked
  1555  001E04  5180               	movf	___wmul@multiplier& (0+255),w,b
  1556  001E06  0100               	movlb	0	; () banked
  1557  001E08  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1558  001E0A  CFF3 F084          	movff	prodl,___wmul@product
  1559  001E0E  CFF4 F085          	movff	prodh,___wmul@product+1
  1560  001E12  0100               	movlb	0	; () banked
  1561  001E14  5180               	movf	___wmul@multiplier& (0+255),w,b
  1562  001E16  0100               	movlb	0	; () banked
  1563  001E18  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1564  001E1A  50F3               	movf	prodl,w,c
  1565  001E1C  0100               	movlb	0	; () banked
  1566  001E1E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1567  001E20  0100               	movlb	0	; () banked
  1568  001E22  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1569  001E24  0100               	movlb	0	; () banked
  1570  001E26  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1571  001E28  50F3               	movf	prodl,w,c
  1572  001E2A  0100               	movlb	0	; () banked
  1573  001E2C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1574                           
  1575                           ; BSR set to: 0
  1576  001E2E  C084  F080         	movff	___wmul@product,?___wmul
  1577  001E32  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1578  001E36  D000               	goto	l373
  1579  001E38                     l373:
  1580                           
  1581                           ; BSR set to: 0
  1582  001E38  0012               	return		;funcret
  1583  001E3A                     __end_of___wmul:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           intcon	equ	0xFF2
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           plusw2	equ	0xFDB
  1597                           fsr2h	equ	0xFDA
  1598                           fsr2l	equ	0xFD9
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function ___awdiv *****************
  1602 ;; Defined at:
  1603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  dividend        2    0[BANK0 ] int 
  1606 ;;  divisor         2    2[BANK0 ] int 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  quotient        2    6[BANK0 ] int 
  1609 ;;  sign            1    5[BANK0 ] unsigned char 
  1610 ;;  counter         1    4[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2    0[BANK0 ] int 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        8 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    5
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_setCorrection
  1631 ;;		_sensorComputation
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text5
  1636  001C20                     __ptext5:
  1637                           	opt stack 0
  1638  001C20                     ___awdiv:
  1639                           	opt stack 24
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;incstack = 0
  1643  001C20  0E00               	movlw	0
  1644  001C22  0100               	movlb	0	; () banked
  1645  001C24  6F85               	movwf	___awdiv@sign& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648  001C26  0100               	movlb	0	; () banked
  1649  001C28  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1650  001C2A  D009               	goto	l2002
  1651                           
  1652                           ; BSR set to: 0
  1653  001C2C  0100               	movlb	0	; () banked
  1654  001C2E  6D82               	negf	___awdiv@divisor& (0+255),b
  1655  001C30  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1656  001C32  B0D8               	btfsc	status,0,c
  1657  001C34  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1658                           
  1659                           ; BSR set to: 0
  1660  001C36  0E01               	movlw	1
  1661  001C38  0100               	movlb	0	; () banked
  1662  001C3A  6F85               	movwf	___awdiv@sign& (0+255),b
  1663  001C3C  D000               	goto	l2002
  1664  001C3E                     l2002:
  1665                           
  1666                           ; BSR set to: 0
  1667  001C3E  0100               	movlb	0	; () banked
  1668  001C40  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1669  001C42  D009               	goto	l2008
  1670                           
  1671                           ; BSR set to: 0
  1672  001C44  0100               	movlb	0	; () banked
  1673  001C46  6D80               	negf	___awdiv@dividend& (0+255),b
  1674  001C48  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1675  001C4A  B0D8               	btfsc	status,0,c
  1676  001C4C  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1677                           
  1678                           ; BSR set to: 0
  1679  001C4E  0E01               	movlw	1
  1680  001C50  0100               	movlb	0	; () banked
  1681  001C52  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1682  001C54  D000               	goto	l2008
  1683  001C56                     l2008:
  1684                           
  1685                           ; BSR set to: 0
  1686  001C56  0E00               	movlw	0
  1687  001C58  0100               	movlb	0	; () banked
  1688  001C5A  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1689  001C5C  0E00               	movlw	0
  1690  001C5E  6F86               	movwf	___awdiv@quotient& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693  001C60  0100               	movlb	0	; () banked
  1694  001C62  5182               	movf	___awdiv@divisor& (0+255),w,b
  1695  001C64  0100               	movlb	0	; () banked
  1696  001C66  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1697  001C68  B4D8               	btfsc	status,2,c
  1698  001C6A  D031               	goto	l2030
  1699                           
  1700                           ; BSR set to: 0
  1701  001C6C  0E01               	movlw	1
  1702  001C6E  0100               	movlb	0	; () banked
  1703  001C70  6F84               	movwf	___awdiv@counter& (0+255),b
  1704  001C72  D007               	goto	l2016
  1705  001C74                     l2014:
  1706                           
  1707                           ; BSR set to: 0
  1708  001C74  0100               	movlb	0	; () banked
  1709  001C76  90D8               	bcf	status,0,c
  1710  001C78  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1711  001C7A  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1712  001C7C  0100               	movlb	0	; () banked
  1713  001C7E  2B84               	incf	___awdiv@counter& (0+255),f,b
  1714  001C80  D000               	goto	l2016
  1715  001C82                     l2016:
  1716                           
  1717                           ; BSR set to: 0
  1718  001C82  0100               	movlb	0	; () banked
  1719  001C84  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1720  001C86  D002               	goto	l2018
  1721  001C88  D7F5               	goto	l2014
  1722                           
  1723                           ; BSR set to: 0
  1724  001C8A  D000               	goto	l2018
  1725  001C8C                     l2018:
  1726                           
  1727                           ; BSR set to: 0
  1728  001C8C  0100               	movlb	0	; () banked
  1729  001C8E  90D8               	bcf	status,0,c
  1730  001C90  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1731  001C92  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1732                           
  1733                           ; BSR set to: 0
  1734  001C94  0100               	movlb	0	; () banked
  1735  001C96  5182               	movf	___awdiv@divisor& (0+255),w,b
  1736  001C98  0100               	movlb	0	; () banked
  1737  001C9A  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1738  001C9C  0100               	movlb	0	; () banked
  1739  001C9E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1740  001CA0  0100               	movlb	0	; () banked
  1741  001CA2  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1742  001CA4  A0D8               	btfss	status,0,c
  1743  001CA6  D00B               	goto	l2026
  1744                           
  1745                           ; BSR set to: 0
  1746  001CA8  0100               	movlb	0	; () banked
  1747  001CAA  5182               	movf	___awdiv@divisor& (0+255),w,b
  1748  001CAC  0100               	movlb	0	; () banked
  1749  001CAE  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1750  001CB0  0100               	movlb	0	; () banked
  1751  001CB2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1752  001CB4  0100               	movlb	0	; () banked
  1753  001CB6  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1754                           
  1755                           ; BSR set to: 0
  1756  001CB8  0100               	movlb	0	; () banked
  1757  001CBA  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1758  001CBC  D000               	goto	l2026
  1759  001CBE                     l2026:
  1760                           
  1761                           ; BSR set to: 0
  1762  001CBE  0100               	movlb	0	; () banked
  1763  001CC0  90D8               	bcf	status,0,c
  1764  001CC2  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1765  001CC4  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1766                           
  1767                           ; BSR set to: 0
  1768  001CC6  0100               	movlb	0	; () banked
  1769  001CC8  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1770  001CCA  D7E0               	goto	l2018
  1771                           
  1772                           ; BSR set to: 0
  1773  001CCC  D000               	goto	l2030
  1774  001CCE                     l2030:
  1775                           
  1776                           ; BSR set to: 0
  1777  001CCE  0100               	movlb	0	; () banked
  1778  001CD0  5185               	movf	___awdiv@sign& (0+255),w,b
  1779  001CD2  0100               	movlb	0	; () banked
  1780  001CD4  B4D8               	btfsc	status,2,c
  1781  001CD6  D006               	goto	l2034
  1782                           
  1783                           ; BSR set to: 0
  1784  001CD8  0100               	movlb	0	; () banked
  1785  001CDA  6D86               	negf	___awdiv@quotient& (0+255),b
  1786  001CDC  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1787  001CDE  B0D8               	btfsc	status,0,c
  1788  001CE0  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1789  001CE2  D000               	goto	l2034
  1790  001CE4                     l2034:
  1791                           
  1792                           ; BSR set to: 0
  1793  001CE4  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1794  001CE8  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1795  001CEC  D000               	goto	l566
  1796  001CEE                     l566:
  1797                           
  1798                           ; BSR set to: 0
  1799  001CEE  0012               	return		;funcret
  1800  001CF0                     __end_of___awdiv:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           prodh	equ	0xFF4
  1807                           prodl	equ	0xFF3
  1808                           intcon	equ	0xFF2
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           plusw2	equ	0xFDB
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _MIN *****************
  1819 ;; Defined at:
  1820 ;;		line 191 in file "user.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  a               2    6[BANK0 ] int 
  1823 ;;  b               2    8[BANK0 ] int 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  2    6[BANK0 ] int 
  1828 ;; Registers used:
  1829 ;;		wreg, status,2, status,0
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1835 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;Total ram usage:        5 bytes
  1840 ;; Hardware stack levels used:    1
  1841 ;; Hardware stack levels required when called:    5
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_sensorComputation
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text6
  1850  001E6E                     __ptext6:
  1851                           	opt stack 0
  1852  001E6E                     _MIN:
  1853                           	opt stack 23
  1854                           
  1855                           ;user.c: 193: if(a>b) return b;
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;incstack = 0
  1859  001E6E  0100               	movlb	0	; () banked
  1860  001E70  5186               	movf	MIN@a& (0+255),w,b
  1861  001E72  0100               	movlb	0	; () banked
  1862  001E74  5D88               	subwf	MIN@b& (0+255),w,b
  1863  001E76  0100               	movlb	0	; () banked
  1864  001E78  5189               	movf	(MIN@b+1)& (0+255),w,b
  1865  001E7A  0A80               	xorlw	128
  1866  001E7C  0100               	movlb	0	; () banked
  1867  001E7E  6F8A               	movwf	??_MIN& (0+255),b
  1868  001E80  0100               	movlb	0	; () banked
  1869  001E82  5187               	movf	(MIN@a+1)& (0+255),w,b
  1870  001E84  0A80               	xorlw	128
  1871  001E86  0100               	movlb	0	; () banked
  1872  001E88  598A               	subwfb	??_MIN& (0+255),w,b
  1873  001E8A  B0D8               	btfsc	status,0,c
  1874  001E8C  D005               	goto	l365
  1875                           
  1876                           ; BSR set to: 0
  1877  001E8E  C088  F086         	movff	MIN@b,?_MIN
  1878  001E92  C089  F087         	movff	MIN@b+1,?_MIN+1
  1879  001E96  D004               	goto	l366
  1880  001E98                     l365:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;user.c: 194: return a;
  1884  001E98  C086  F086         	movff	MIN@a,?_MIN
  1885  001E9C  C087  F087         	movff	MIN@a+1,?_MIN+1
  1886  001EA0                     l366:
  1887                           
  1888                           ; BSR set to: 0
  1889  001EA0  0012               	return		;funcret
  1890  001EA2                     __end_of_MIN:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           intcon	equ	0xFF2
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           plusw2	equ	0xFDB
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _MAX *****************
  1909 ;; Defined at:
  1910 ;;		line 197 in file "user.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  a               2    6[BANK0 ] int 
  1913 ;;  b               2    8[BANK0 ] int 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  2    6[BANK0 ] int 
  1918 ;; Registers used:
  1919 ;;		wreg, status,2, status,0
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:        5 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    5
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		_sensorComputation
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text7
  1940  001EA2                     __ptext7:
  1941                           	opt stack 0
  1942  001EA2                     _MAX:
  1943                           	opt stack 23
  1944                           
  1945                           ;user.c: 199: if(a>b) return a;
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;incstack = 0
  1949  001EA2  0100               	movlb	0	; () banked
  1950  001EA4  5186               	movf	MAX@a& (0+255),w,b
  1951  001EA6  0100               	movlb	0	; () banked
  1952  001EA8  5D88               	subwf	MAX@b& (0+255),w,b
  1953  001EAA  0100               	movlb	0	; () banked
  1954  001EAC  5189               	movf	(MAX@b+1)& (0+255),w,b
  1955  001EAE  0A80               	xorlw	128
  1956  001EB0  0100               	movlb	0	; () banked
  1957  001EB2  6F8A               	movwf	??_MAX& (0+255),b
  1958  001EB4  0100               	movlb	0	; () banked
  1959  001EB6  5187               	movf	(MAX@a+1)& (0+255),w,b
  1960  001EB8  0A80               	xorlw	128
  1961  001EBA  0100               	movlb	0	; () banked
  1962  001EBC  598A               	subwfb	??_MAX& (0+255),w,b
  1963  001EBE  B0D8               	btfsc	status,0,c
  1964  001EC0  D005               	goto	l369
  1965                           
  1966                           ; BSR set to: 0
  1967  001EC2  C086  F086         	movff	MAX@a,?_MAX
  1968  001EC6  C087  F087         	movff	MAX@a+1,?_MAX+1
  1969  001ECA  D004               	goto	l370
  1970  001ECC                     l369:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;user.c: 200: return b;
  1974  001ECC  C088  F086         	movff	MAX@b,?_MAX
  1975  001ED0  C089  F087         	movff	MAX@b+1,?_MAX+1
  1976  001ED4                     l370:
  1977                           
  1978                           ; BSR set to: 0
  1979  001ED4  0012               	return		;funcret
  1980  001ED6                     __end_of_MAX:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon	equ	0xFF2
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postinc2	equ	0xFDE
  1992                           postdec2	equ	0xFDD
  1993                           plusw2	equ	0xFDB
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _InitApp *****************
  1999 ;; Defined at:
  2000 ;;		line 35 in file "user.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;		None               void
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    6
  2021 ;; This function calls:
  2022 ;;		_AlgorithmSelection
  2023 ;;		_delay
  2024 ;; This function is called by:
  2025 ;;		_main
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text8
  2030  001D8A                     __ptext8:
  2031                           	opt stack 0
  2032  001D8A                     _InitApp:
  2033                           	opt stack 24
  2034                           
  2035                           ;user.c: 39: TRISC = 0;
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;incstack = 0
  2039  001D8A  0E00               	movlw	0
  2040  001D8C  6E94               	movwf	3988,c	;volatile
  2041                           
  2042                           ;user.c: 43: TRISEbits.TRISE1=1;
  2043  001D8E  8296               	bsf	3990,1,c	;volatile
  2044                           
  2045                           ;user.c: 45: TRISEbits.TRISE2=1;
  2046  001D90  8496               	bsf	3990,2,c	;volatile
  2047                           
  2048                           ;user.c: 47: TRISBbits.RB1=1;
  2049  001D92  8293               	bsf	3987,1,c	;volatile
  2050                           
  2051                           ;user.c: 49: TRISBbits.RB0=1;
  2052  001D94  8093               	bsf	3987,0,c	;volatile
  2053                           
  2054                           ;user.c: 52: TRISBbits.RB3=1;
  2055  001D96  8693               	bsf	3987,3,c	;volatile
  2056                           
  2057                           ;user.c: 54: TRISBbits.RB2=1;
  2058  001D98  8493               	bsf	3987,2,c	;volatile
  2059                           
  2060                           ;user.c: 58: ADCON1 =0b00000001;
  2061  001D9A  0E01               	movlw	1
  2062  001D9C  6EC1               	movwf	4033,c	;volatile
  2063                           
  2064                           ;user.c: 63: ADCON2=0b00001010;
  2065  001D9E  0E0A               	movlw	10
  2066  001DA0  6EC0               	movwf	4032,c	;volatile
  2067                           
  2068                           ;user.c: 68: ADCON0=0b00101011;
  2069  001DA2  0E2B               	movlw	43
  2070  001DA4  6EC2               	movwf	4034,c	;volatile
  2071                           
  2072                           ;user.c: 77: T0CON = 0b11000100;
  2073  001DA6  0EC4               	movlw	196
  2074  001DA8  6ED5               	movwf	4053,c	;volatile
  2075                           
  2076                           ;user.c: 85: INTCON2 = 0b11110100;
  2077  001DAA  0EF4               	movlw	244
  2078  001DAC  6EF1               	movwf	intcon2,c	;volatile
  2079                           
  2080                           ;user.c: 95: INTCON = 0b00100000;
  2081  001DAE  0E20               	movlw	32
  2082  001DB0  6EF2               	movwf	intcon,c	;volatile
  2083                           
  2084                           ;user.c: 105: AlgorithmSelection();
  2085  001DB2  ECC1  F00F         	call	_AlgorithmSelection	;wreg free
  2086                           
  2087                           ;user.c: 108: delay(1000);
  2088  001DB6  0E03               	movlw	3
  2089  001DB8  0100               	movlb	0	; () banked
  2090  001DBA  6F81               	movwf	(delay@ms+1)& (0+255),b
  2091  001DBC  0EE8               	movlw	232
  2092  001DBE  6F80               	movwf	delay@ms& (0+255),b
  2093  001DC0  ECA3  F00E         	call	_delay	;wreg free
  2094  001DC4  0012               	return		;funcret
  2095  001DC6                     __end_of_InitApp:
  2096                           	opt stack 0
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           prodh	equ	0xFF4
  2102                           prodl	equ	0xFF3
  2103                           intcon	equ	0xFF2
  2104                           intcon2	equ	0xFF1
  2105                           postinc0	equ	0xFEE
  2106                           wreg	equ	0xFE8
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           plusw2	equ	0xFDB
  2110                           fsr2h	equ	0xFDA
  2111                           fsr2l	equ	0xFD9
  2112                           status	equ	0xFD8
  2113                           
  2114 ;; *************** function _delay *****************
  2115 ;; Defined at:
  2116 ;;		line 29 in file "user.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  ms              2    0[BANK0 ] unsigned int 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  x               2    3[BANK0 ] int 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;Total ram usage:        5 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    5
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_InitApp
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text9
  2145  001D46                     __ptext9:
  2146                           	opt stack 0
  2147  001D46                     _delay:
  2148                           	opt stack 24
  2149                           
  2150                           ;user.c: 30: int x = 0;
  2151                           
  2152                           ;incstack = 0
  2153  001D46  0E00               	movlw	0
  2154  001D48  0100               	movlb	0	; () banked
  2155  001D4A  6F84               	movwf	(delay@x+1)& (0+255),b
  2156  001D4C  0E00               	movlw	0
  2157  001D4E  6F83               	movwf	delay@x& (0+255),b
  2158                           
  2159                           ;user.c: 31: for (x = 0; x < ms; x++)
  2160  001D50  0E00               	movlw	0
  2161  001D52  0100               	movlb	0	; () banked
  2162  001D54  6F84               	movwf	(delay@x+1)& (0+255),b
  2163  001D56  0E00               	movlw	0
  2164  001D58  6F83               	movwf	delay@x& (0+255),b
  2165  001D5A  D00C               	goto	l320
  2166  001D5C                     l2040:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2170  001D5C  0E0B               	movlw	11
  2171  001D5E  0100               	movlb	0	; () banked
  2172  001D60  6F82               	movwf	??_delay& (0+255),b
  2173  001D62  0E62               	movlw	98
  2174  001D64                     u2177:
  2175  001D64  2EE8               	decfsz	wreg,f,c
  2176  001D66  D7FE               	goto	u2177
  2177  001D68  2F82               	decfsz	??_delay& (0+255),f,b
  2178  001D6A  D7FC               	goto	u2177
  2179  001D6C  D000               	nop2	
  2180  001D6E  0100               	movlb	0	; () banked
  2181  001D70  4B83               	infsnz	delay@x& (0+255),f,b
  2182  001D72  2B84               	incf	(delay@x+1)& (0+255),f,b
  2183  001D74                     l320:
  2184                           
  2185                           ; BSR set to: 0
  2186  001D74  0100               	movlb	0	; () banked
  2187  001D76  5180               	movf	delay@ms& (0+255),w,b
  2188  001D78  0100               	movlb	0	; () banked
  2189  001D7A  5D83               	subwf	delay@x& (0+255),w,b
  2190  001D7C  0100               	movlb	0	; () banked
  2191  001D7E  5181               	movf	(delay@ms+1)& (0+255),w,b
  2192  001D80  0100               	movlb	0	; () banked
  2193  001D82  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2194  001D84  A0D8               	btfss	status,0,c
  2195  001D86  D7EA               	goto	l2040
  2196                           
  2197                           ; BSR set to: 0
  2198                           
  2199                           ; BSR set to: 0
  2200  001D88  0012               	return		;funcret
  2201  001D8A                     __end_of_delay:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           intcon	equ	0xFF2
  2210                           intcon2	equ	0xFF1
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           plusw2	equ	0xFDB
  2216                           fsr2h	equ	0xFDA
  2217                           fsr2l	equ	0xFD9
  2218                           status	equ	0xFD8
  2219                           
  2220 ;; *************** function _AlgorithmSelection *****************
  2221 ;; Defined at:
  2222 ;;		line 112 in file "user.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;		None               void
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    5
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_InitApp
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text10
  2251  001F82                     __ptext10:
  2252                           	opt stack 0
  2253  001F82                     _AlgorithmSelection:
  2254                           	opt stack 24
  2255                           
  2256                           ;user.c: 114: ADCON0 = 0b00100111;
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;incstack = 0
  2260  001F82  0E27               	movlw	39
  2261  001F84  6EC2               	movwf	4034,c	;volatile
  2262                           
  2263                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2264  001F86  82C2               	bsf	4034,1,c	;volatile
  2265                           
  2266                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2267  001F88  D000               	goto	l329
  2268  001F8A                     l329:
  2269  001F8A  B2C2               	btfsc	4034,1,c	;volatile
  2270  001F8C  D7FE               	goto	l329
  2271                           
  2272                           ;user.c: 119: if(ADRESL > 0b10000000)
  2273  001F8E  0E80               	movlw	128
  2274  001F90  64C3               	cpfsgt	4035,c	;volatile
  2275  001F92  D002               	goto	l2052
  2276                           
  2277                           ;user.c: 120: algorithm = LEFTWALL;
  2278  001F94  0E00               	movlw	0
  2279  001F96  D001               	goto	L5
  2280  001F98                     l2052:
  2281                           
  2282                           ;user.c: 121: else
  2283                           ;user.c: 122: algorithm = RIGHTWALL;
  2284  001F98  0E01               	movlw	1
  2285  001F9A                     L5:
  2286  001F9A  6E32               	movwf	_algorithm,c
  2287  001F9C  D000               	goto	l334
  2288  001F9E                     l334:
  2289  001F9E  0012               	return		;funcret
  2290  001FA0                     __end_of_AlgorithmSelection:
  2291                           	opt stack 0
  2292                           tblptru	equ	0xFF8
  2293                           tblptrh	equ	0xFF7
  2294                           tblptrl	equ	0xFF6
  2295                           tablat	equ	0xFF5
  2296                           prodh	equ	0xFF4
  2297                           prodl	equ	0xFF3
  2298                           intcon	equ	0xFF2
  2299                           intcon2	equ	0xFF1
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postinc2	equ	0xFDE
  2303                           postdec2	equ	0xFDD
  2304                           plusw2	equ	0xFDB
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _ConfigureOscillator *****************
  2310 ;; Defined at:
  2311 ;;		line 24 in file "system.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;		None               void
  2318 ;; Registers used:
  2319 ;;		wreg, status,2
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;Total ram usage:        0 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    5
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_main
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text11
  2340  001FB0                     __ptext11:
  2341                           	opt stack 0
  2342  001FB0                     _ConfigureOscillator:
  2343                           	opt stack 25
  2344                           
  2345                           ;system.c: 29: OSCCON = 0b01111100;
  2346                           
  2347                           ;incstack = 0
  2348  001FB0  0E7C               	movlw	124
  2349  001FB2  6ED3               	movwf	4051,c	;volatile
  2350                           
  2351                           ;system.c: 31: OSCTUNE = 0b01001111;
  2352  001FB4  0E4F               	movlw	79
  2353  001FB6  6E9B               	movwf	3995,c	;volatile
  2354  001FB8  0012               	return		;funcret
  2355  001FBA                     __end_of_ConfigureOscillator:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           prodh	equ	0xFF4
  2362                           prodl	equ	0xFF3
  2363                           intcon	equ	0xFF2
  2364                           intcon2	equ	0xFF1
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           plusw2	equ	0xFDB
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _low_isr *****************
  2375 ;; Defined at:
  2376 ;;		line 209 in file "interrupts.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;		None               void
  2383 ;; Registers used:
  2384 ;;		None
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;Total ram usage:       17 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    4
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		Interrupt level 1
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	intcodelo
  2405  000018                     __pintcodelo:
  2406                           	opt stack 0
  2407  000018                     _low_isr:
  2408                           	opt stack 23
  2409                           
  2410                           ;incstack = 0
  2411  000018  CFD8 F036          	movff	status,??_low_isr
  2412  00001C  CFE8 F037          	movff	wreg,??_low_isr+1
  2413  000020  CFE0 F038          	movff	bsr,??_low_isr+2
  2414  000024  CFFA F039          	movff	pclath,??_low_isr+3
  2415  000028  CFFB F03A          	movff	pclatu,??_low_isr+4
  2416  00002C  CFE9 F03B          	movff	fsr0l,??_low_isr+5
  2417  000030  CFEA F03C          	movff	fsr0h,??_low_isr+6
  2418  000034  CFE1 F03D          	movff	fsr1l,??_low_isr+7
  2419  000038  CFE2 F03E          	movff	fsr1h,??_low_isr+8
  2420  00003C  CFD9 F03F          	movff	fsr2l,??_low_isr+9
  2421  000040  CFDA F040          	movff	fsr2h,??_low_isr+10
  2422  000044  CFF3 F041          	movff	prodl,??_low_isr+11
  2423  000048  CFF4 F042          	movff	prodh,??_low_isr+12
  2424  00004C  CFF6 F043          	movff	tblptrl,??_low_isr+13
  2425  000050  CFF7 F044          	movff	tblptrh,??_low_isr+14
  2426  000054  CFF8 F045          	movff	tblptru,??_low_isr+15
  2427  000058  CFF5 F046          	movff	tablat,??_low_isr+16
  2428  00005C  C046  FFF5         	movff	??_low_isr+16,tablat
  2429  000060  C045  FFF8         	movff	??_low_isr+15,tblptru
  2430  000064  C044  FFF7         	movff	??_low_isr+14,tblptrh
  2431  000068  C043  FFF6         	movff	??_low_isr+13,tblptrl
  2432  00006C  C042  FFF4         	movff	??_low_isr+12,prodh
  2433  000070  C041  FFF3         	movff	??_low_isr+11,prodl
  2434  000074  C040  FFDA         	movff	??_low_isr+10,fsr2h
  2435  000078  C03F  FFD9         	movff	??_low_isr+9,fsr2l
  2436  00007C  C03E  FFE2         	movff	??_low_isr+8,fsr1h
  2437  000080  C03D  FFE1         	movff	??_low_isr+7,fsr1l
  2438  000084  C03C  FFEA         	movff	??_low_isr+6,fsr0h
  2439  000088  C03B  FFE9         	movff	??_low_isr+5,fsr0l
  2440  00008C  C03A  FFFB         	movff	??_low_isr+4,pclatu
  2441  000090  C039  FFFA         	movff	??_low_isr+3,pclath
  2442  000094  C038  FFE0         	movff	??_low_isr+2,bsr
  2443  000098  C037  FFE8         	movff	??_low_isr+1,wreg
  2444  00009C  C036  FFD8         	movff	??_low_isr,status
  2445  0000A0  0010               	retfie	
  2446  0000A2                     __end_of_low_isr:
  2447                           	opt stack 0
  2448                           pclatu	equ	0xFFB
  2449                           pclath	equ	0xFFA
  2450                           tblptru	equ	0xFF8
  2451                           tblptrh	equ	0xFF7
  2452                           tblptrl	equ	0xFF6
  2453                           tablat	equ	0xFF5
  2454                           prodh	equ	0xFF4
  2455                           prodl	equ	0xFF3
  2456                           intcon	equ	0xFF2
  2457                           intcon2	equ	0xFF1
  2458                           postinc0	equ	0xFEE
  2459                           fsr0h	equ	0xFEA
  2460                           fsr0l	equ	0xFE9
  2461                           wreg	equ	0xFE8
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           bsr	equ	0xFE0
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           plusw2	equ	0xFDB
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _high_isr *****************
  2473 ;; Defined at:
  2474 ;;		line 106 in file "interrupts.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;		None               void
  2481 ;; Registers used:
  2482 ;;		wreg, status,2, status,0, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;Total ram usage:       14 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    3
  2495 ;; This function calls:
  2496 ;;		_KController
  2497 ;;		_forward
  2498 ;;		_initialRotation
  2499 ;;		_merge
  2500 ;;		_motorCounterUpdate
  2501 ;;		_moveMouse
  2502 ;;		_rotate
  2503 ;;		_singleForward
  2504 ;;		_stateUpdate
  2505 ;; This function is called by:
  2506 ;;		Interrupt level 2
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	intcode
  2511  000008                     __pintcode:
  2512                           	opt stack 0
  2513  000008                     _high_isr:
  2514                           	opt stack 23
  2515                           
  2516                           ;incstack = 0
  2517  000008  CFFA F04D          	movff	pclath,??_high_isr
  2518  00000C  CFFB F04E          	movff	pclatu,??_high_isr+1
  2519  000010  CFE9 F04F          	movff	fsr0l,??_high_isr+2
  2520  000014  EDE7  F009         	call	int_func,f	;refresh shadow registers
  2521                           pclatu	equ	0xFFB
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon2	equ	0xFF1
  2531                           postinc0	equ	0xFEE
  2532                           fsr0h	equ	0xFEA
  2533                           fsr0l	equ	0xFE9
  2534                           wreg	equ	0xFE8
  2535                           fsr1h	equ	0xFE2
  2536                           fsr1l	equ	0xFE1
  2537                           bsr	equ	0xFE0
  2538                           postinc2	equ	0xFDE
  2539                           postdec2	equ	0xFDD
  2540                           plusw2	equ	0xFDB
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545                           	psect	intcode_body
  2546  0013CE                     __pintcode_body:
  2547                           	opt stack 23
  2548  0013CE                     int_func:
  2549                           	opt stack 23
  2550  0013CE  0006               	pop		; remove dummy address from shadow register refresh
  2551  0013D0  CFEA F050          	movff	fsr0h,??_high_isr+3
  2552  0013D4  CFE1 F051          	movff	fsr1l,??_high_isr+4
  2553  0013D8  CFE2 F052          	movff	fsr1h,??_high_isr+5
  2554  0013DC  CFD9 F053          	movff	fsr2l,??_high_isr+6
  2555  0013E0  CFDA F054          	movff	fsr2h,??_high_isr+7
  2556  0013E4  CFF3 F055          	movff	prodl,??_high_isr+8
  2557  0013E8  CFF4 F056          	movff	prodh,??_high_isr+9
  2558  0013EC  CFF6 F057          	movff	tblptrl,??_high_isr+10
  2559  0013F0  CFF7 F058          	movff	tblptrh,??_high_isr+11
  2560  0013F4  CFF8 F059          	movff	tblptru,??_high_isr+12
  2561  0013F8  CFF5 F05A          	movff	tablat,??_high_isr+13
  2562                           
  2563                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2564  0013FC  A4F2               	btfss	intcon,2,c	;volatile
  2565  0013FE  D162               	goto	i2l135
  2566                           
  2567                           ;interrupts.c: 126: {
  2568                           ;interrupts.c: 127: if(MotorDelayCounter > 2)
  2569  001400  BE18               	btfsc	_MotorDelayCounter+1,7,c
  2570  001402  D15C               	goto	i2l1944
  2571  001404  5018               	movf	_MotorDelayCounter+1,w,c
  2572  001406  E104               	bnz	i2u154_40
  2573  001408  0E03               	movlw	3
  2574  00140A  5C17               	subwf	_MotorDelayCounter,w,c
  2575  00140C  A0D8               	btfss	status,0,c
  2576  00140E  D156               	goto	i2l1944
  2577  001410                     i2u154_40:
  2578                           
  2579                           ;interrupts.c: 128: {
  2580                           ;interrupts.c: 129: stateUpdate();
  2581  001410  EC7F  F00B         	call	_stateUpdate	;wreg free
  2582                           
  2583                           ;interrupts.c: 131: if(cState != pState)
  2584  001414  505D               	movf	_pState,w,c
  2585  001416  185B               	xorwf	_cState,w,c
  2586  001418  B4D8               	btfsc	status,2,c
  2587  00141A  D002               	goto	i2l1812
  2588                           
  2589                           ;interrupts.c: 132: ChangeRequired = 1;
  2590  00141C  0E01               	movlw	1
  2591  00141E  D001               	goto	L6
  2592  001420                     i2l1812:
  2593                           
  2594                           ;interrupts.c: 133: else
  2595                           ;interrupts.c: 134: ChangeRequired = 0;
  2596  001420  0E00               	movlw	0
  2597  001422                     L6:
  2598  001422  6E2F               	movwf	_ChangeRequired,c
  2599  001424  D000               	goto	i2l1814
  2600  001426                     i2l1814:
  2601                           
  2602                           ;interrupts.c: 136: if(ChangeRequired == 1 && RotateCounter == 0)
  2603  001426  042F               	decf	_ChangeRequired,w,c
  2604  001428  A4D8               	btfss	status,2,c
  2605  00142A  D026               	goto	i2l1836
  2606  00142C  501D               	movf	_RotateCounter,w,c
  2607  00142E  101E               	iorwf	_RotateCounter+1,w,c
  2608  001430  A4D8               	btfss	status,2,c
  2609  001432  D022               	goto	i2l1836
  2610                           
  2611                           ;interrupts.c: 137: {
  2612                           ;interrupts.c: 138: if(sensorValue[2] < 300-50 && sensorValue[3] < 300-50)
  2613  001434  BE0E               	btfsc	_sensorValue+5,7,c
  2614  001436  D006               	goto	i2l1820
  2615  001438  500E               	movf	_sensorValue+5,w,c
  2616  00143A  E112               	bnz	i2l1828
  2617  00143C  0EFA               	movlw	250
  2618  00143E  5C0D               	subwf	_sensorValue+4,w,c
  2619  001440  B0D8               	btfsc	status,0,c
  2620  001442  D00E               	goto	i2l1828
  2621  001444                     i2l1820:
  2622  001444  BE10               	btfsc	_sensorValue+7,7,c
  2623  001446  D006               	goto	i2l1822
  2624  001448  5010               	movf	_sensorValue+7,w,c
  2625  00144A  E10A               	bnz	i2l1828
  2626  00144C  0EFA               	movlw	250
  2627  00144E  5C0F               	subwf	_sensorValue+6,w,c
  2628  001450  B0D8               	btfsc	status,0,c
  2629  001452  D006               	goto	i2l1828
  2630  001454                     i2l1822:
  2631                           
  2632                           ;interrupts.c: 139: {
  2633                           ;interrupts.c: 140: if(justTurned == 1)
  2634  001454  0434               	decf	_justTurned,w,c
  2635                           
  2636                           ;interrupts.c: 142: else
  2637                           ;interrupts.c: 143: ForwardCounter = 350;
  2638                           
  2639                           ;interrupts.c: 141: ForwardCounter = 350;
  2640  001456  0E01               	movlw	1
  2641  001458  6E14               	movwf	_ForwardCounter+1,c
  2642  00145A  0E5E               	movlw	94
  2643  00145C  D004               	goto	L7
  2644                           
  2645                           ;interrupts.c: 144: } else
  2646  00145E  D005               	goto	i2l1830
  2647  001460                     i2l1828:
  2648                           
  2649                           ;interrupts.c: 145: ForwardCounter = 1;
  2650  001460  0E00               	movlw	0
  2651  001462  6E14               	movwf	_ForwardCounter+1,c
  2652  001464  0E01               	movlw	1
  2653  001466                     L7:
  2654  001466  6E13               	movwf	_ForwardCounter,c
  2655  001468  D000               	goto	i2l1830
  2656  00146A                     i2l1830:
  2657                           
  2658                           ;interrupts.c: 146: forward();
  2659  00146A  EC9C  F00F         	call	_forward	;wreg free
  2660                           
  2661                           ;interrupts.c: 147: pState = cState;
  2662  00146E  C05B  F05D         	movff	_cState,_pState
  2663                           
  2664                           ;interrupts.c: 148: ChangeRequired = 0;
  2665  001472  0E00               	movlw	0
  2666  001474  6E2F               	movwf	_ChangeRequired,c
  2667                           
  2668                           ;interrupts.c: 149: }
  2669  001476  D116               	goto	i2l90
  2670  001478                     i2l1836:
  2671                           
  2672                           ;interrupts.c: 150: else if(RotateCounter > 0) {
  2673  001478  BE1E               	btfsc	_RotateCounter+1,7,c
  2674  00147A  D029               	goto	i2l1852
  2675  00147C  501E               	movf	_RotateCounter+1,w,c
  2676  00147E  E103               	bnz	i2u161_40
  2677  001480  041D               	decf	_RotateCounter,w,c
  2678  001482  A0D8               	btfss	status,0,c
  2679  001484  D024               	goto	i2l1852
  2680  001486                     i2u161_40:
  2681                           
  2682                           ;interrupts.c: 151: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2683  001486  BE0E               	btfsc	_sensorValue+5,7,c
  2684  001488  D006               	goto	i2l1840
  2685  00148A  500E               	movf	_sensorValue+5,w,c
  2686  00148C  E114               	bnz	i2l1846
  2687  00148E  0E64               	movlw	100
  2688  001490  5C0D               	subwf	_sensorValue+4,w,c
  2689  001492  B0D8               	btfsc	status,0,c
  2690  001494  D010               	goto	i2l1846
  2691  001496                     i2l1840:
  2692  001496  BE10               	btfsc	_sensorValue+7,7,c
  2693  001498  D006               	goto	i2l1842
  2694  00149A  5010               	movf	_sensorValue+7,w,c
  2695  00149C  E10C               	bnz	i2l1846
  2696  00149E  0E64               	movlw	100
  2697  0014A0  5C0F               	subwf	_sensorValue+6,w,c
  2698  0014A2  B0D8               	btfsc	status,0,c
  2699  0014A4  D008               	goto	i2l1846
  2700  0014A6                     i2l1842:
  2701  0014A6  0433               	decf	_deadEnd,w,c
  2702  0014A8  A4D8               	btfss	status,2,c
  2703  0014AA  D005               	goto	i2l1846
  2704                           
  2705                           ;interrupts.c: 152: RotateCounter = 5;
  2706  0014AC  0E00               	movlw	0
  2707  0014AE  6E1E               	movwf	_RotateCounter+1,c
  2708  0014B0  0E05               	movlw	5
  2709  0014B2  6E1D               	movwf	_RotateCounter,c
  2710  0014B4  D000               	goto	i2l1846
  2711  0014B6                     i2l1846:
  2712                           
  2713                           ;interrupts.c: 153: rotate(rotatingSide);
  2714  0014B6  5035               	movf	_rotatingSide,w,c
  2715  0014B8  ECE3  F00E         	call	_rotate
  2716                           
  2717                           ;interrupts.c: 154: TurnRight = 0;
  2718  0014BC  0E00               	movlw	0
  2719  0014BE  6E22               	movwf	_TurnRight+1,c
  2720  0014C0  0E00               	movlw	0
  2721  0014C2  6E21               	movwf	_TurnRight,c
  2722                           
  2723                           ;interrupts.c: 155: TurnLeft = 0;
  2724  0014C4  0E00               	movlw	0
  2725  0014C6  6E20               	movwf	_TurnLeft+1,c
  2726  0014C8  0E00               	movlw	0
  2727  0014CA  6E1F               	movwf	_TurnLeft,c
  2728                           
  2729                           ;interrupts.c: 156: }
  2730  0014CC  D0EB               	goto	i2l90
  2731  0014CE                     i2l1852:
  2732                           
  2733                           ;interrupts.c: 157: else if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 
      +                          0)
  2734  0014CE  BE28               	btfsc	_controlToLeft+1,7,c
  2735  0014D0  D005               	goto	i2l1854
  2736  0014D2  5028               	movf	_controlToLeft+1,w,c
  2737  0014D4  E113               	bnz	i2l1858
  2738  0014D6  0427               	decf	_controlToLeft,w,c
  2739  0014D8  B0D8               	btfsc	status,0,c
  2740  0014DA  D010               	goto	i2l1858
  2741  0014DC                     i2l1854:
  2742  0014DC  BE2A               	btfsc	_controlToRight+1,7,c
  2743  0014DE  D005               	goto	i2l1856
  2744  0014E0  502A               	movf	_controlToRight+1,w,c
  2745  0014E2  E10C               	bnz	i2l1858
  2746  0014E4  0429               	decf	_controlToRight,w,c
  2747  0014E6  B0D8               	btfsc	status,0,c
  2748  0014E8  D009               	goto	i2l1858
  2749  0014EA                     i2l1856:
  2750  0014EA  BE14               	btfsc	_ForwardCounter+1,7,c
  2751  0014EC  D02C               	goto	i2l1874
  2752  0014EE  5014               	movf	_ForwardCounter+1,w,c
  2753  0014F0  E105               	bnz	i2l1858
  2754  0014F2  0413               	decf	_ForwardCounter,w,c
  2755  0014F4  B0D8               	btfsc	status,0,c
  2756  0014F6  D002               	goto	i2l1858
  2757  0014F8  D026               	goto	i2l1874
  2758  0014FA  D000               	goto	i2l1858
  2759  0014FC                     i2l1858:
  2760                           
  2761                           ;interrupts.c: 158: {
  2762                           ;interrupts.c: 159: KController();
  2763  0014FC  EC78  F00E         	call	_KController	;wreg free
  2764                           
  2765                           ;interrupts.c: 161: if(controlToLeft > 0 )
  2766  001500  BE28               	btfsc	_controlToLeft+1,7,c
  2767  001502  D00E               	goto	i2l1866
  2768  001504  5028               	movf	_controlToLeft+1,w,c
  2769  001506  E103               	bnz	i2u168_40
  2770  001508  0427               	decf	_controlToLeft,w,c
  2771  00150A  A0D8               	btfss	status,0,c
  2772  00150C  D009               	goto	i2l1866
  2773  00150E                     i2u168_40:
  2774                           
  2775                           ;interrupts.c: 162: {
  2776                           ;interrupts.c: 163: motorCounterUpdate(RIGHT,0);
  2777  00150E  0E00               	movlw	0
  2778  001510  6E47               	movwf	motorCounterUpdate@reverse,c
  2779  001512  0E01               	movlw	1
  2780  001514  EC1D  F00D         	call	_motorCounterUpdate
  2781                           
  2782                           ;interrupts.c: 164: controlToLeft--;
  2783  001518  0627               	decf	_controlToLeft,f,c
  2784  00151A  A0D8               	btfss	status,0,c
  2785  00151C  0628               	decf	_controlToLeft+1,f,c
  2786                           
  2787                           ;interrupts.c: 165: } else if(controlToRight > 0){
  2788  00151E  D0C2               	goto	i2l90
  2789  001520                     i2l1866:
  2790  001520  BE2A               	btfsc	_controlToRight+1,7,c
  2791  001522  D00E               	goto	i2l1872
  2792  001524  502A               	movf	_controlToRight+1,w,c
  2793  001526  E103               	bnz	i2u169_40
  2794  001528  0429               	decf	_controlToRight,w,c
  2795  00152A  A0D8               	btfss	status,0,c
  2796  00152C  D009               	goto	i2l1872
  2797  00152E                     i2u169_40:
  2798                           
  2799                           ;interrupts.c: 166: motorCounterUpdate(LEFT,0);
  2800  00152E  0E00               	movlw	0
  2801  001530  6E47               	movwf	motorCounterUpdate@reverse,c
  2802  001532  0E00               	movlw	0
  2803  001534  EC1D  F00D         	call	_motorCounterUpdate
  2804                           
  2805                           ;interrupts.c: 167: controlToRight--;
  2806  001538  0629               	decf	_controlToRight,f,c
  2807  00153A  A0D8               	btfss	status,0,c
  2808  00153C  062A               	decf	_controlToRight+1,f,c
  2809                           
  2810                           ;interrupts.c: 168: } else {
  2811  00153E  D0B2               	goto	i2l90
  2812  001540                     i2l1872:
  2813                           
  2814                           ;interrupts.c: 169: forward();
  2815  001540  EC9C  F00F         	call	_forward	;wreg free
  2816                           
  2817                           ;interrupts.c: 170: }
  2818                           ;interrupts.c: 172: } else if(ForwardCounter == 0)
  2819  001544  D0AF               	goto	i2l90
  2820  001546                     i2l1874:
  2821  001546  5013               	movf	_ForwardCounter,w,c
  2822  001548  1014               	iorwf	_ForwardCounter+1,w,c
  2823  00154A  A4D8               	btfss	status,2,c
  2824  00154C  D0AB               	goto	i2l90
  2825                           
  2826                           ;interrupts.c: 173: {
  2827                           ;interrupts.c: 174: if(algorithm == LEFTWALL)
  2828  00154E  5032               	movf	_algorithm,w,c
  2829  001550  A4D8               	btfss	status,2,c
  2830  001552  D054               	goto	i2l1910
  2831                           
  2832                           ;interrupts.c: 175: {
  2833                           ;interrupts.c: 176: if(cState == empty) initialRotation(LEFT,0);
  2834  001554  505B               	movf	_cState,w,c
  2835  001556  A4D8               	btfss	status,2,c
  2836  001558  D008               	goto	i2l1882
  2837  00155A  0E00               	movlw	0
  2838  00155C  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2839  00155E  0E00               	movlw	0
  2840  001560  6E4A               	movwf	initialRotation@isDeadEnd,c
  2841  001562  0E00               	movlw	0
  2842  001564  EC6B  F00F         	call	_initialRotation
  2843  001568  D09D               	goto	i2l90
  2844  00156A                     i2l1882:
  2845                           
  2846                           ;interrupts.c: 177: else if(cState == twoside) singleForward();
  2847  00156A  0E02               	movlw	2
  2848  00156C  185B               	xorwf	_cState,w,c
  2849  00156E  A4D8               	btfss	status,2,c
  2850  001570  D003               	goto	i2l1886
  2851  001572  ECB1  F00F         	call	_singleForward	;wreg free
  2852  001576  D096               	goto	i2l90
  2853  001578                     i2l1886:
  2854                           
  2855                           ;interrupts.c: 178: else if(cState == threeside) initialRotation(LEFT,1);
  2856  001578  0E03               	movlw	3
  2857  00157A  185B               	xorwf	_cState,w,c
  2858  00157C  A4D8               	btfss	status,2,c
  2859  00157E  D008               	goto	i2l1890
  2860  001580  0E00               	movlw	0
  2861  001582  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2862  001584  0E01               	movlw	1
  2863  001586  6E4A               	movwf	initialRotation@isDeadEnd,c
  2864  001588  0E00               	movlw	0
  2865  00158A  EC6B  F00F         	call	_initialRotation
  2866  00158E  D08A               	goto	i2l90
  2867  001590                     i2l1890:
  2868                           
  2869                           ;interrupts.c: 179: else if(cState == leftside) singleForward();
  2870  001590  0E04               	movlw	4
  2871  001592  185B               	xorwf	_cState,w,c
  2872  001594  A4D8               	btfss	status,2,c
  2873  001596  D003               	goto	i2l1894
  2874  001598  ECB1  F00F         	call	_singleForward	;wreg free
  2875  00159C  D083               	goto	i2l90
  2876  00159E                     i2l1894:
  2877                           
  2878                           ;interrupts.c: 180: else if(cState == rightside) initialRotation(LEFT,0);
  2879  00159E  0E05               	movlw	5
  2880  0015A0  185B               	xorwf	_cState,w,c
  2881  0015A2  A4D8               	btfss	status,2,c
  2882  0015A4  D008               	goto	i2l1898
  2883  0015A6  0E00               	movlw	0
  2884  0015A8  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2885  0015AA  0E00               	movlw	0
  2886  0015AC  6E4A               	movwf	initialRotation@isDeadEnd,c
  2887  0015AE  0E00               	movlw	0
  2888  0015B0  EC6B  F00F         	call	_initialRotation
  2889  0015B4  D077               	goto	i2l90
  2890  0015B6                     i2l1898:
  2891                           
  2892                           ;interrupts.c: 181: else if(cState == frontleft) initialRotation(RIGHT,0);
  2893  0015B6  0E06               	movlw	6
  2894  0015B8  185B               	xorwf	_cState,w,c
  2895  0015BA  A4D8               	btfss	status,2,c
  2896  0015BC  D008               	goto	i2l1902
  2897  0015BE  0E00               	movlw	0
  2898  0015C0  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2899  0015C2  0E00               	movlw	0
  2900  0015C4  6E4A               	movwf	initialRotation@isDeadEnd,c
  2901  0015C6  0E01               	movlw	1
  2902  0015C8  EC6B  F00F         	call	_initialRotation
  2903  0015CC  D06B               	goto	i2l90
  2904  0015CE                     i2l1902:
  2905                           
  2906                           ;interrupts.c: 182: else if(cState == frontright) initialRotation(LEFT,0);
  2907  0015CE  0E07               	movlw	7
  2908  0015D0  185B               	xorwf	_cState,w,c
  2909  0015D2  A4D8               	btfss	status,2,c
  2910  0015D4  D008               	goto	i2l1906
  2911  0015D6  0E00               	movlw	0
  2912  0015D8  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2913  0015DA  0E00               	movlw	0
  2914  0015DC  6E4A               	movwf	initialRotation@isDeadEnd,c
  2915  0015DE  0E00               	movlw	0
  2916  0015E0  EC6B  F00F         	call	_initialRotation
  2917  0015E4  D05F               	goto	i2l90
  2918  0015E6                     i2l1906:
  2919                           
  2920                           ;interrupts.c: 183: else if(cState == front) initialRotation(LEFT,0);
  2921  0015E6  045B               	decf	_cState,w,c
  2922  0015E8  A4D8               	btfss	status,2,c
  2923  0015EA  D05C               	goto	i2l90
  2924  0015EC  0E00               	movlw	0
  2925  0015EE  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2926  0015F0  0E00               	movlw	0
  2927  0015F2  6E4A               	movwf	initialRotation@isDeadEnd,c
  2928  0015F4  0E00               	movlw	0
  2929  0015F6  EC6B  F00F         	call	_initialRotation
  2930                           
  2931                           ;interrupts.c: 184: } else {
  2932  0015FA  D054               	goto	i2l90
  2933  0015FC                     i2l1910:
  2934                           
  2935                           ;interrupts.c: 185: if(cState == empty) initialRotation(RIGHT,0);
  2936  0015FC  505B               	movf	_cState,w,c
  2937  0015FE  A4D8               	btfss	status,2,c
  2938  001600  D008               	goto	i2l1914
  2939  001602  0E00               	movlw	0
  2940  001604  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2941  001606  0E00               	movlw	0
  2942  001608  6E4A               	movwf	initialRotation@isDeadEnd,c
  2943  00160A  0E01               	movlw	1
  2944  00160C  EC6B  F00F         	call	_initialRotation
  2945  001610  D049               	goto	i2l90
  2946  001612                     i2l1914:
  2947                           
  2948                           ;interrupts.c: 186: else if(cState == twoside) singleForward();
  2949  001612  0E02               	movlw	2
  2950  001614  185B               	xorwf	_cState,w,c
  2951  001616  A4D8               	btfss	status,2,c
  2952  001618  D003               	goto	i2l1918
  2953  00161A  ECB1  F00F         	call	_singleForward	;wreg free
  2954  00161E  D042               	goto	i2l90
  2955  001620                     i2l1918:
  2956                           
  2957                           ;interrupts.c: 187: else if(cState == threeside) initialRotation(RIGHT,1);
  2958  001620  0E03               	movlw	3
  2959  001622  185B               	xorwf	_cState,w,c
  2960  001624  A4D8               	btfss	status,2,c
  2961  001626  D008               	goto	i2l1922
  2962  001628  0E00               	movlw	0
  2963  00162A  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2964  00162C  0E01               	movlw	1
  2965  00162E  6E4A               	movwf	initialRotation@isDeadEnd,c
  2966  001630  0E01               	movlw	1
  2967  001632  EC6B  F00F         	call	_initialRotation
  2968  001636  D036               	goto	i2l90
  2969  001638                     i2l1922:
  2970                           
  2971                           ;interrupts.c: 188: else if(cState == leftside) initialRotation(RIGHT,0);
  2972  001638  0E04               	movlw	4
  2973  00163A  185B               	xorwf	_cState,w,c
  2974  00163C  A4D8               	btfss	status,2,c
  2975  00163E  D008               	goto	i2l1926
  2976  001640  0E00               	movlw	0
  2977  001642  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2978  001644  0E00               	movlw	0
  2979  001646  6E4A               	movwf	initialRotation@isDeadEnd,c
  2980  001648  0E01               	movlw	1
  2981  00164A  EC6B  F00F         	call	_initialRotation
  2982  00164E  D02A               	goto	i2l90
  2983  001650                     i2l1926:
  2984                           
  2985                           ;interrupts.c: 189: else if(cState == rightside) singleForward();
  2986  001650  0E05               	movlw	5
  2987  001652  185B               	xorwf	_cState,w,c
  2988  001654  A4D8               	btfss	status,2,c
  2989  001656  D003               	goto	i2l1930
  2990  001658  ECB1  F00F         	call	_singleForward	;wreg free
  2991  00165C  D023               	goto	i2l90
  2992  00165E                     i2l1930:
  2993                           
  2994                           ;interrupts.c: 190: else if(cState == frontleft) initialRotation(RIGHT,0);
  2995  00165E  0E06               	movlw	6
  2996  001660  185B               	xorwf	_cState,w,c
  2997  001662  A4D8               	btfss	status,2,c
  2998  001664  D008               	goto	i2l1934
  2999  001666  0E00               	movlw	0
  3000  001668  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  3001  00166A  0E00               	movlw	0
  3002  00166C  6E4A               	movwf	initialRotation@isDeadEnd,c
  3003  00166E  0E01               	movlw	1
  3004  001670  EC6B  F00F         	call	_initialRotation
  3005  001674  D017               	goto	i2l90
  3006  001676                     i2l1934:
  3007                           
  3008                           ;interrupts.c: 191: else if(cState == frontright) initialRotation(LEFT,0);
  3009  001676  0E07               	movlw	7
  3010  001678  185B               	xorwf	_cState,w,c
  3011  00167A  A4D8               	btfss	status,2,c
  3012  00167C  D008               	goto	i2l1938
  3013  00167E  0E00               	movlw	0
  3014  001680  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  3015  001682  0E00               	movlw	0
  3016  001684  6E4A               	movwf	initialRotation@isDeadEnd,c
  3017  001686  0E00               	movlw	0
  3018  001688  EC6B  F00F         	call	_initialRotation
  3019  00168C  D00B               	goto	i2l90
  3020  00168E                     i2l1938:
  3021                           
  3022                           ;interrupts.c: 192: else if(cState == front) initialRotation(RIGHT,0);
  3023  00168E  045B               	decf	_cState,w,c
  3024  001690  A4D8               	btfss	status,2,c
  3025  001692  D008               	goto	i2l90
  3026  001694  0E00               	movlw	0
  3027  001696  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  3028  001698  0E00               	movlw	0
  3029  00169A  6E4A               	movwf	initialRotation@isDeadEnd,c
  3030  00169C  0E01               	movlw	1
  3031  00169E  EC6B  F00F         	call	_initialRotation
  3032  0016A2  D000               	goto	i2l90
  3033  0016A4                     i2l90:
  3034                           
  3035                           ;interrupts.c: 193: }
  3036                           ;interrupts.c: 194: }
  3037                           ;interrupts.c: 196: moveMouse(merge(LMotorCounter,RMotorCounter));
  3038  0016A4  C031  F047         	movff	_RMotorCounter,merge@right
  3039  0016A8  5030               	movf	_LMotorCounter,w,c
  3040  0016AA  ECD0  F00F         	call	_merge
  3041  0016AE  ECDD  F00F         	call	_moveMouse
  3042                           
  3043                           ;interrupts.c: 197: MotorDelayCounter = 0;
  3044  0016B2  0E00               	movlw	0
  3045  0016B4  6E18               	movwf	_MotorDelayCounter+1,c
  3046  0016B6  0E00               	movlw	0
  3047  0016B8  6E17               	movwf	_MotorDelayCounter,c
  3048  0016BA  D000               	goto	i2l1944
  3049  0016BC                     i2l1944:
  3050                           
  3051                           ;interrupts.c: 198: }
  3052                           ;interrupts.c: 200: MotorDelayCounter++;
  3053  0016BC  4A17               	infsnz	_MotorDelayCounter,f,c
  3054  0016BE  2A18               	incf	_MotorDelayCounter+1,f,c
  3055                           
  3056                           ;interrupts.c: 201: INTCONbits.TMR0IF = 0;
  3057  0016C0  94F2               	bcf	intcon,2,c	;volatile
  3058  0016C2  D000               	goto	i2l135
  3059  0016C4                     i2l135:
  3060  0016C4  C05A  FFF5         	movff	??_high_isr+13,tablat
  3061  0016C8  C059  FFF8         	movff	??_high_isr+12,tblptru
  3062  0016CC  C058  FFF7         	movff	??_high_isr+11,tblptrh
  3063  0016D0  C057  FFF6         	movff	??_high_isr+10,tblptrl
  3064  0016D4  C056  FFF4         	movff	??_high_isr+9,prodh
  3065  0016D8  C055  FFF3         	movff	??_high_isr+8,prodl
  3066  0016DC  C054  FFDA         	movff	??_high_isr+7,fsr2h
  3067  0016E0  C053  FFD9         	movff	??_high_isr+6,fsr2l
  3068  0016E4  C052  FFE2         	movff	??_high_isr+5,fsr1h
  3069  0016E8  C051  FFE1         	movff	??_high_isr+4,fsr1l
  3070  0016EC  C050  FFEA         	movff	??_high_isr+3,fsr0h
  3071  0016F0  C04F  FFE9         	movff	??_high_isr+2,fsr0l
  3072  0016F4  C04E  FFFB         	movff	??_high_isr+1,pclatu
  3073  0016F8  C04D  FFFA         	movff	??_high_isr,pclath
  3074  0016FC  0011               	retfie		f
  3075  0016FE                     __end_of_high_isr:
  3076                           	opt stack 0
  3077                           pclatu	equ	0xFFB
  3078                           pclath	equ	0xFFA
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           prodh	equ	0xFF4
  3084                           prodl	equ	0xFF3
  3085                           intcon	equ	0xFF2
  3086                           intcon2	equ	0xFF1
  3087                           postinc0	equ	0xFEE
  3088                           fsr0h	equ	0xFEA
  3089                           fsr0l	equ	0xFE9
  3090                           wreg	equ	0xFE8
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           bsr	equ	0xFE0
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           plusw2	equ	0xFDB
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _stateUpdate *****************
  3102 ;; Defined at:
  3103 ;;		line 422 in file "interrupts.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_high_isr
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text14
  3131  0016FE                     __ptext14:
  3132                           	opt stack 0
  3133  0016FE                     _stateUpdate:
  3134                           	opt stack 25
  3135                           
  3136                           ;interrupts.c: 424: if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3137                           ;interrupts.c: 425: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3138                           
  3139                           ;incstack = 0
  3140  0016FE  BE0A               	btfsc	_sensorValue+1,7,c
  3141  001700  D006               	goto	i2l1168
  3142  001702  500A               	movf	_sensorValue+1,w,c
  3143  001704  E11E               	bnz	i2l1176
  3144  001706  0EC8               	movlw	200
  3145  001708  5C09               	subwf	_sensorValue,w,c
  3146  00170A  B0D8               	btfsc	status,0,c
  3147  00170C  D01A               	goto	i2l1176
  3148  00170E                     i2l1168:
  3149  00170E  BE0C               	btfsc	_sensorValue+3,7,c
  3150  001710  D006               	goto	i2l1170
  3151  001712  500C               	movf	_sensorValue+3,w,c
  3152  001714  E116               	bnz	i2l1176
  3153  001716  0EC8               	movlw	200
  3154  001718  5C0B               	subwf	_sensorValue+2,w,c
  3155  00171A  B0D8               	btfsc	status,0,c
  3156  00171C  D012               	goto	i2l1176
  3157  00171E                     i2l1170:
  3158  00171E  BE0E               	btfsc	_sensorValue+5,7,c
  3159  001720  D006               	goto	i2l1172
  3160  001722  0E2C               	movlw	44
  3161  001724  5C0D               	subwf	_sensorValue+4,w,c
  3162  001726  0E01               	movlw	1
  3163  001728  580E               	subwfb	_sensorValue+5,w,c
  3164  00172A  B0D8               	btfsc	status,0,c
  3165  00172C  D00A               	goto	i2l1176
  3166  00172E                     i2l1172:
  3167  00172E  BE10               	btfsc	_sensorValue+7,7,c
  3168  001730  D006               	goto	i2l1174
  3169  001732  0E2C               	movlw	44
  3170  001734  5C0F               	subwf	_sensorValue+6,w,c
  3171  001736  0E01               	movlw	1
  3172  001738  5810               	subwfb	_sensorValue+7,w,c
  3173  00173A  B0D8               	btfsc	status,0,c
  3174  00173C  D002               	goto	i2l1176
  3175  00173E                     i2l1174:
  3176                           
  3177                           ;interrupts.c: 426: cState = empty;
  3178  00173E  0E00               	movlw	0
  3179  001740  D0E9               	goto	L14
  3180  001742                     i2l1176:
  3181                           
  3182                           ;interrupts.c: 427: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3183                           ;interrupts.c: 428: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3184  001742  BE0A               	btfsc	_sensorValue+1,7,c
  3185  001744  D020               	goto	i2l1186
  3186  001746  500A               	movf	_sensorValue+1,w,c
  3187  001748  E104               	bnz	i2u36_40
  3188  00174A  0EC9               	movlw	201
  3189  00174C  5C09               	subwf	_sensorValue,w,c
  3190  00174E  A0D8               	btfss	status,0,c
  3191  001750  D01A               	goto	i2l1186
  3192  001752                     i2u36_40:
  3193  001752  BE0C               	btfsc	_sensorValue+3,7,c
  3194  001754  D018               	goto	i2l1186
  3195  001756  500C               	movf	_sensorValue+3,w,c
  3196  001758  E104               	bnz	i2u37_40
  3197  00175A  0EC9               	movlw	201
  3198  00175C  5C0B               	subwf	_sensorValue+2,w,c
  3199  00175E  A0D8               	btfss	status,0,c
  3200  001760  D012               	goto	i2l1186
  3201  001762                     i2u37_40:
  3202  001762  BE0E               	btfsc	_sensorValue+5,7,c
  3203  001764  D006               	goto	i2l1182
  3204  001766  0E2C               	movlw	44
  3205  001768  5C0D               	subwf	_sensorValue+4,w,c
  3206  00176A  0E01               	movlw	1
  3207  00176C  580E               	subwfb	_sensorValue+5,w,c
  3208  00176E  B0D8               	btfsc	status,0,c
  3209  001770  D00A               	goto	i2l1186
  3210  001772                     i2l1182:
  3211  001772  BE10               	btfsc	_sensorValue+7,7,c
  3212  001774  D006               	goto	i2l1184
  3213  001776  0E2C               	movlw	44
  3214  001778  5C0F               	subwf	_sensorValue+6,w,c
  3215  00177A  0E01               	movlw	1
  3216  00177C  5810               	subwfb	_sensorValue+7,w,c
  3217  00177E  B0D8               	btfsc	status,0,c
  3218  001780  D002               	goto	i2l1186
  3219  001782                     i2l1184:
  3220                           
  3221                           ;interrupts.c: 429: cState = twoside;
  3222  001782  0E02               	movlw	2
  3223  001784  D0C7               	goto	L14
  3224  001786                     i2l1186:
  3225                           
  3226                           ;interrupts.c: 430: else if(sensorValue[0] > 200 && sensorValue[1] > 200 &&
  3227                           ;interrupts.c: 431: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3228  001786  BE0A               	btfsc	_sensorValue+1,7,c
  3229  001788  D01F               	goto	i2l1196
  3230  00178A  500A               	movf	_sensorValue+1,w,c
  3231  00178C  E104               	bnz	i2u40_40
  3232  00178E  0EC9               	movlw	201
  3233  001790  5C09               	subwf	_sensorValue,w,c
  3234  001792  A0D8               	btfss	status,0,c
  3235  001794  D019               	goto	i2l1196
  3236  001796                     i2u40_40:
  3237  001796  BE0C               	btfsc	_sensorValue+3,7,c
  3238  001798  D017               	goto	i2l1196
  3239  00179A  500C               	movf	_sensorValue+3,w,c
  3240  00179C  E104               	bnz	i2u41_40
  3241  00179E  0EC9               	movlw	201
  3242  0017A0  5C0B               	subwf	_sensorValue+2,w,c
  3243  0017A2  A0D8               	btfss	status,0,c
  3244  0017A4  D011               	goto	i2l1196
  3245  0017A6                     i2u41_40:
  3246  0017A6  BE0E               	btfsc	_sensorValue+5,7,c
  3247  0017A8  D00F               	goto	i2l1196
  3248  0017AA  0E2D               	movlw	45
  3249  0017AC  5C0D               	subwf	_sensorValue+4,w,c
  3250  0017AE  0E01               	movlw	1
  3251  0017B0  580E               	subwfb	_sensorValue+5,w,c
  3252  0017B2  B0D8               	btfsc	status,0,c
  3253  0017B4  BE10               	btfsc	_sensorValue+7,7,c
  3254  0017B6  D008               	goto	i2l1196
  3255  0017B8  0E2D               	movlw	45
  3256  0017BA  5C0F               	subwf	_sensorValue+6,w,c
  3257  0017BC  0E01               	movlw	1
  3258  0017BE  5810               	subwfb	_sensorValue+7,w,c
  3259  0017C0  A0D8               	btfss	status,0,c
  3260  0017C2  D002               	goto	i2l1196
  3261                           
  3262                           ;interrupts.c: 432: cState = threeside;
  3263  0017C4  0E03               	movlw	3
  3264  0017C6  D0A6               	goto	L14
  3265  0017C8                     i2l1196:
  3266                           
  3267                           ;interrupts.c: 433: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3268                           ;interrupts.c: 434: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3269  0017C8  BE0A               	btfsc	_sensorValue+1,7,c
  3270  0017CA  D020               	goto	i2l1206
  3271  0017CC  500A               	movf	_sensorValue+1,w,c
  3272  0017CE  E104               	bnz	i2u44_40
  3273  0017D0  0EC9               	movlw	201
  3274  0017D2  5C09               	subwf	_sensorValue,w,c
  3275  0017D4  A0D8               	btfss	status,0,c
  3276  0017D6  D01A               	goto	i2l1206
  3277  0017D8                     i2u44_40:
  3278  0017D8  BE0C               	btfsc	_sensorValue+3,7,c
  3279  0017DA  D006               	goto	i2l1200
  3280  0017DC  500C               	movf	_sensorValue+3,w,c
  3281  0017DE  E116               	bnz	i2l1206
  3282  0017E0  0EC8               	movlw	200
  3283  0017E2  5C0B               	subwf	_sensorValue+2,w,c
  3284  0017E4  B0D8               	btfsc	status,0,c
  3285  0017E6  D012               	goto	i2l1206
  3286  0017E8                     i2l1200:
  3287  0017E8  BE0E               	btfsc	_sensorValue+5,7,c
  3288  0017EA  D006               	goto	i2l1202
  3289  0017EC  0E2C               	movlw	44
  3290  0017EE  5C0D               	subwf	_sensorValue+4,w,c
  3291  0017F0  0E01               	movlw	1
  3292  0017F2  580E               	subwfb	_sensorValue+5,w,c
  3293  0017F4  B0D8               	btfsc	status,0,c
  3294  0017F6  D00A               	goto	i2l1206
  3295  0017F8                     i2l1202:
  3296  0017F8  BE10               	btfsc	_sensorValue+7,7,c
  3297  0017FA  D006               	goto	i2l1204
  3298  0017FC  0E2C               	movlw	44
  3299  0017FE  5C0F               	subwf	_sensorValue+6,w,c
  3300  001800  0E01               	movlw	1
  3301  001802  5810               	subwfb	_sensorValue+7,w,c
  3302  001804  B0D8               	btfsc	status,0,c
  3303  001806  D002               	goto	i2l1206
  3304  001808                     i2l1204:
  3305                           
  3306                           ;interrupts.c: 435: cState = leftside;
  3307  001808  0E04               	movlw	4
  3308  00180A  D084               	goto	L14
  3309  00180C                     i2l1206:
  3310                           
  3311                           ;interrupts.c: 436: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3312                           ;interrupts.c: 437: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3313  00180C  BE0A               	btfsc	_sensorValue+1,7,c
  3314  00180E  D006               	goto	i2l1208
  3315  001810  500A               	movf	_sensorValue+1,w,c
  3316  001812  E11E               	bnz	i2l1216
  3317  001814  0EC8               	movlw	200
  3318  001816  5C09               	subwf	_sensorValue,w,c
  3319  001818  B0D8               	btfsc	status,0,c
  3320  00181A  D01A               	goto	i2l1216
  3321  00181C                     i2l1208:
  3322  00181C  BE0C               	btfsc	_sensorValue+3,7,c
  3323  00181E  D018               	goto	i2l1216
  3324  001820  500C               	movf	_sensorValue+3,w,c
  3325  001822  E104               	bnz	i2u49_40
  3326  001824  0EC9               	movlw	201
  3327  001826  5C0B               	subwf	_sensorValue+2,w,c
  3328  001828  A0D8               	btfss	status,0,c
  3329  00182A  D012               	goto	i2l1216
  3330  00182C                     i2u49_40:
  3331  00182C  BE0E               	btfsc	_sensorValue+5,7,c
  3332  00182E  D006               	goto	i2l1212
  3333  001830  0E2C               	movlw	44
  3334  001832  5C0D               	subwf	_sensorValue+4,w,c
  3335  001834  0E01               	movlw	1
  3336  001836  580E               	subwfb	_sensorValue+5,w,c
  3337  001838  B0D8               	btfsc	status,0,c
  3338  00183A  D00A               	goto	i2l1216
  3339  00183C                     i2l1212:
  3340  00183C  BE10               	btfsc	_sensorValue+7,7,c
  3341  00183E  D006               	goto	i2l1214
  3342  001840  0E2C               	movlw	44
  3343  001842  5C0F               	subwf	_sensorValue+6,w,c
  3344  001844  0E01               	movlw	1
  3345  001846  5810               	subwfb	_sensorValue+7,w,c
  3346  001848  B0D8               	btfsc	status,0,c
  3347  00184A  D002               	goto	i2l1216
  3348  00184C                     i2l1214:
  3349                           
  3350                           ;interrupts.c: 438: cState = rightside;
  3351  00184C  0E05               	movlw	5
  3352  00184E  D062               	goto	L14
  3353  001850                     i2l1216:
  3354                           
  3355                           ;interrupts.c: 439: else if(sensorValue[0] > 200 && sensorValue[1] < 200 &&
  3356                           ;interrupts.c: 440: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3357  001850  BE0A               	btfsc	_sensorValue+1,7,c
  3358  001852  D01F               	goto	i2l1226
  3359  001854  500A               	movf	_sensorValue+1,w,c
  3360  001856  E104               	bnz	i2u52_40
  3361  001858  0EC9               	movlw	201
  3362  00185A  5C09               	subwf	_sensorValue,w,c
  3363  00185C  A0D8               	btfss	status,0,c
  3364  00185E  D019               	goto	i2l1226
  3365  001860                     i2u52_40:
  3366  001860  BE0C               	btfsc	_sensorValue+3,7,c
  3367  001862  D006               	goto	i2l1220
  3368  001864  500C               	movf	_sensorValue+3,w,c
  3369  001866  E115               	bnz	i2l1226
  3370  001868  0EC8               	movlw	200
  3371  00186A  5C0B               	subwf	_sensorValue+2,w,c
  3372  00186C  B0D8               	btfsc	status,0,c
  3373  00186E  D011               	goto	i2l1226
  3374  001870                     i2l1220:
  3375  001870  BE0E               	btfsc	_sensorValue+5,7,c
  3376  001872  D00F               	goto	i2l1226
  3377  001874  0E2D               	movlw	45
  3378  001876  5C0D               	subwf	_sensorValue+4,w,c
  3379  001878  0E01               	movlw	1
  3380  00187A  580E               	subwfb	_sensorValue+5,w,c
  3381  00187C  B0D8               	btfsc	status,0,c
  3382  00187E  BE10               	btfsc	_sensorValue+7,7,c
  3383  001880  D008               	goto	i2l1226
  3384  001882  0E2D               	movlw	45
  3385  001884  5C0F               	subwf	_sensorValue+6,w,c
  3386  001886  0E01               	movlw	1
  3387  001888  5810               	subwfb	_sensorValue+7,w,c
  3388  00188A  A0D8               	btfss	status,0,c
  3389  00188C  D002               	goto	i2l1226
  3390                           
  3391                           ;interrupts.c: 441: cState = frontleft;
  3392  00188E  0E06               	movlw	6
  3393  001890  D041               	goto	L14
  3394  001892                     i2l1226:
  3395                           
  3396                           ;interrupts.c: 442: else if(sensorValue[0] < 200 && sensorValue[1] > 200 &&
  3397                           ;interrupts.c: 443: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3398  001892  BE0A               	btfsc	_sensorValue+1,7,c
  3399  001894  D006               	goto	i2l1228
  3400  001896  500A               	movf	_sensorValue+1,w,c
  3401  001898  E11D               	bnz	i2l1236
  3402  00189A  0EC8               	movlw	200
  3403  00189C  5C09               	subwf	_sensorValue,w,c
  3404  00189E  B0D8               	btfsc	status,0,c
  3405  0018A0  D019               	goto	i2l1236
  3406  0018A2                     i2l1228:
  3407  0018A2  BE0C               	btfsc	_sensorValue+3,7,c
  3408  0018A4  D017               	goto	i2l1236
  3409  0018A6  500C               	movf	_sensorValue+3,w,c
  3410  0018A8  E104               	bnz	i2u57_40
  3411  0018AA  0EC9               	movlw	201
  3412  0018AC  5C0B               	subwf	_sensorValue+2,w,c
  3413  0018AE  A0D8               	btfss	status,0,c
  3414  0018B0  D011               	goto	i2l1236
  3415  0018B2                     i2u57_40:
  3416  0018B2  BE0E               	btfsc	_sensorValue+5,7,c
  3417  0018B4  D00F               	goto	i2l1236
  3418  0018B6  0E2D               	movlw	45
  3419  0018B8  5C0D               	subwf	_sensorValue+4,w,c
  3420  0018BA  0E01               	movlw	1
  3421  0018BC  580E               	subwfb	_sensorValue+5,w,c
  3422  0018BE  B0D8               	btfsc	status,0,c
  3423  0018C0  BE10               	btfsc	_sensorValue+7,7,c
  3424  0018C2  D008               	goto	i2l1236
  3425  0018C4  0E2D               	movlw	45
  3426  0018C6  5C0F               	subwf	_sensorValue+6,w,c
  3427  0018C8  0E01               	movlw	1
  3428  0018CA  5810               	subwfb	_sensorValue+7,w,c
  3429  0018CC  A0D8               	btfss	status,0,c
  3430  0018CE  D002               	goto	i2l1236
  3431                           
  3432                           ;interrupts.c: 444: cState = frontright;
  3433  0018D0  0E07               	movlw	7
  3434  0018D2  D020               	goto	L14
  3435  0018D4                     i2l1236:
  3436                           
  3437                           ;interrupts.c: 445: else if(sensorValue[0] < 200 && sensorValue[1] < 200 &&
  3438                           ;interrupts.c: 446: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3439  0018D4  BE0A               	btfsc	_sensorValue+1,7,c
  3440  0018D6  D006               	goto	i2l1238
  3441  0018D8  500A               	movf	_sensorValue+1,w,c
  3442  0018DA  E11E               	bnz	i2l242
  3443  0018DC  0EC8               	movlw	200
  3444  0018DE  5C09               	subwf	_sensorValue,w,c
  3445  0018E0  B0D8               	btfsc	status,0,c
  3446  0018E2  D01A               	goto	i2l242
  3447  0018E4                     i2l1238:
  3448  0018E4  BE0C               	btfsc	_sensorValue+3,7,c
  3449  0018E6  D006               	goto	i2l1240
  3450  0018E8  500C               	movf	_sensorValue+3,w,c
  3451  0018EA  E116               	bnz	i2l242
  3452  0018EC  0EC8               	movlw	200
  3453  0018EE  5C0B               	subwf	_sensorValue+2,w,c
  3454  0018F0  B0D8               	btfsc	status,0,c
  3455  0018F2  D012               	goto	i2l242
  3456  0018F4                     i2l1240:
  3457  0018F4  BE0E               	btfsc	_sensorValue+5,7,c
  3458  0018F6  D010               	goto	i2l242
  3459  0018F8  0E2D               	movlw	45
  3460  0018FA  5C0D               	subwf	_sensorValue+4,w,c
  3461  0018FC  0E01               	movlw	1
  3462  0018FE  580E               	subwfb	_sensorValue+5,w,c
  3463  001900  B0D8               	btfsc	status,0,c
  3464  001902  BE10               	btfsc	_sensorValue+7,7,c
  3465  001904  D009               	goto	i2l242
  3466  001906  0E2D               	movlw	45
  3467  001908  5C0F               	subwf	_sensorValue+6,w,c
  3468  00190A  0E01               	movlw	1
  3469  00190C  5810               	subwfb	_sensorValue+7,w,c
  3470  00190E  A0D8               	btfss	status,0,c
  3471  001910  D003               	goto	i2l242
  3472                           
  3473                           ;interrupts.c: 447: cState = front;
  3474  001912  0E01               	movlw	1
  3475  001914                     L14:
  3476  001914  6E5B               	movwf	_cState,c
  3477  001916  D000               	goto	i2l242
  3478  001918                     i2l242:
  3479  001918  0012               	return		;funcret
  3480  00191A                     __end_of_stateUpdate:
  3481                           	opt stack 0
  3482                           pclatu	equ	0xFFB
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           intcon2	equ	0xFF1
  3492                           postinc0	equ	0xFEE
  3493                           fsr0h	equ	0xFEA
  3494                           fsr0l	equ	0xFE9
  3495                           wreg	equ	0xFE8
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           bsr	equ	0xFE0
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           plusw2	equ	0xFDB
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _singleForward *****************
  3507 ;; Defined at:
  3508 ;;		line 392 in file "interrupts.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		_forward
  3531 ;; This function is called by:
  3532 ;;		_high_isr
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text15
  3537  001F62                     __ptext15:
  3538                           	opt stack 0
  3539  001F62                     _singleForward:
  3540                           	opt stack 23
  3541                           
  3542                           ;interrupts.c: 394: if(ForwardCounter == 0 || ForwardCounter == 1)
  3543                           
  3544                           ;incstack = 0
  3545  001F62  5013               	movf	_ForwardCounter,w,c
  3546  001F64  1014               	iorwf	_ForwardCounter+1,w,c
  3547  001F66  B4D8               	btfsc	status,2,c
  3548  001F68  D004               	goto	i2l1736
  3549  001F6A  0413               	decf	_ForwardCounter,w,c
  3550  001F6C  1014               	iorwf	_ForwardCounter+1,w,c
  3551  001F6E  A4D8               	btfss	status,2,c
  3552  001F70  D007               	goto	i2l219
  3553  001F72                     i2l1736:
  3554                           
  3555                           ;interrupts.c: 395: {
  3556                           ;interrupts.c: 396: ForwardCounter = 1;
  3557  001F72  0E00               	movlw	0
  3558  001F74  6E14               	movwf	_ForwardCounter+1,c
  3559  001F76  0E01               	movlw	1
  3560  001F78  6E13               	movwf	_ForwardCounter,c
  3561                           
  3562                           ;interrupts.c: 397: forward();
  3563  001F7A  EC9C  F00F         	call	_forward	;wreg free
  3564  001F7E  D000               	goto	i2l219
  3565  001F80                     i2l219:
  3566  001F80  0012               	return		;funcret
  3567  001F82                     __end_of_singleForward:
  3568                           	opt stack 0
  3569                           pclatu	equ	0xFFB
  3570                           pclath	equ	0xFFA
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon2	equ	0xFF1
  3579                           postinc0	equ	0xFEE
  3580                           fsr0h	equ	0xFEA
  3581                           fsr0l	equ	0xFE9
  3582                           wreg	equ	0xFE8
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           bsr	equ	0xFE0
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           plusw2	equ	0xFDB
  3589                           fsr2h	equ	0xFDA
  3590                           fsr2l	equ	0xFD9
  3591                           status	equ	0xFD8
  3592                           
  3593 ;; *************** function _forward *****************
  3594 ;; Defined at:
  3595 ;;		line 382 in file "interrupts.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;		None               void
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:        0 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    1
  3616 ;; This function calls:
  3617 ;;		_motorCounterUpdate
  3618 ;; This function is called by:
  3619 ;;		_high_isr
  3620 ;;		_singleForward
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text16
  3625  001F38                     __ptext16:
  3626                           	opt stack 0
  3627  001F38                     _forward:
  3628                           	opt stack 23
  3629                           
  3630                           ;interrupts.c: 384: motorCounterUpdate(RIGHT,0);
  3631                           
  3632                           ;incstack = 0
  3633  001F38  0E00               	movlw	0
  3634  001F3A  6E47               	movwf	motorCounterUpdate@reverse,c
  3635  001F3C  0E01               	movlw	1
  3636  001F3E  EC1D  F00D         	call	_motorCounterUpdate
  3637                           
  3638                           ;interrupts.c: 385: motorCounterUpdate(LEFT,0);
  3639  001F42  0E00               	movlw	0
  3640  001F44  6E47               	movwf	motorCounterUpdate@reverse,c
  3641  001F46  0E00               	movlw	0
  3642  001F48  EC1D  F00D         	call	_motorCounterUpdate
  3643                           
  3644                           ;interrupts.c: 386: ForwardCounter--;
  3645  001F4C  0613               	decf	_ForwardCounter,f,c
  3646  001F4E  A0D8               	btfss	status,0,c
  3647  001F50  0614               	decf	_ForwardCounter+1,f,c
  3648                           
  3649                           ;interrupts.c: 387: if(ForwardCounter == 0)
  3650  001F52  5013               	movf	_ForwardCounter,w,c
  3651  001F54  1014               	iorwf	_ForwardCounter+1,w,c
  3652  001F56  A4D8               	btfss	status,2,c
  3653  001F58  D003               	goto	i2l213
  3654                           
  3655                           ;interrupts.c: 388: justTurned = 0;
  3656  001F5A  0E00               	movlw	0
  3657  001F5C  6E34               	movwf	_justTurned,c
  3658  001F5E  D000               	goto	i2l213
  3659  001F60                     i2l213:
  3660  001F60  0012               	return		;funcret
  3661  001F62                     __end_of_forward:
  3662                           	opt stack 0
  3663                           pclatu	equ	0xFFB
  3664                           pclath	equ	0xFFA
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           intcon2	equ	0xFF1
  3673                           postinc0	equ	0xFEE
  3674                           fsr0h	equ	0xFEA
  3675                           fsr0l	equ	0xFE9
  3676                           wreg	equ	0xFE8
  3677                           fsr1h	equ	0xFE2
  3678                           fsr1l	equ	0xFE1
  3679                           bsr	equ	0xFE0
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           plusw2	equ	0xFDB
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _moveMouse *****************
  3688 ;; Defined at:
  3689 ;;		line 298 in file "interrupts.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  action          1    wreg     unsigned char 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  action          1   17[COMRAM] unsigned char 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;		None               void
  3696 ;; Registers used:
  3697 ;;		wreg
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;Total ram usage:        1 bytes
  3708 ;; Hardware stack levels used:    1
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_high_isr
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text17
  3717  001FBA                     __ptext17:
  3718                           	opt stack 0
  3719  001FBA                     _moveMouse:
  3720                           	opt stack 25
  3721                           
  3722                           ;incstack = 0
  3723                           ;moveMouse@action stored from wreg
  3724  001FBA  6E47               	movwf	moveMouse@action,c
  3725                           
  3726                           ;interrupts.c: 300: LATC = action;
  3727  001FBC  C047  FF8B         	movff	moveMouse@action,3979	;volatile
  3728  001FC0  0012               	return		;funcret
  3729  001FC2                     __end_of_moveMouse:
  3730                           	opt stack 0
  3731                           pclatu	equ	0xFFB
  3732                           pclath	equ	0xFFA
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           intcon	equ	0xFF2
  3740                           intcon2	equ	0xFF1
  3741                           postinc0	equ	0xFEE
  3742                           fsr0h	equ	0xFEA
  3743                           fsr0l	equ	0xFE9
  3744                           wreg	equ	0xFE8
  3745                           fsr1h	equ	0xFE2
  3746                           fsr1l	equ	0xFE1
  3747                           bsr	equ	0xFE0
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           plusw2	equ	0xFDB
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _merge *****************
  3756 ;; Defined at:
  3757 ;;		line 291 in file "interrupts.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  left            1    wreg     unsigned char 
  3760 ;;  right           1   17[COMRAM] unsigned char 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  left            1   18[COMRAM] unsigned char 
  3763 ;;  merged          1   19[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      unsigned char 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:        3 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; This function calls:
  3780 ;;		Nothing
  3781 ;; This function is called by:
  3782 ;;		_high_isr
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text18
  3787  001FA0                     __ptext18:
  3788                           	opt stack 0
  3789  001FA0                     _merge:
  3790                           	opt stack 25
  3791                           
  3792                           ;incstack = 0
  3793                           ;merge@left stored from wreg
  3794  001FA0  6E48               	movwf	merge@left,c
  3795                           
  3796                           ;interrupts.c: 293: unsigned char merged;
  3797                           ;interrupts.c: 294: merged = left + (right << 4);
  3798  001FA2  3847               	swapf	merge@right,w,c
  3799  001FA4  0BF0               	andlw	240
  3800  001FA6  2448               	addwf	merge@left,w,c
  3801  001FA8  6E49               	movwf	merge@merged,c
  3802                           
  3803                           ;interrupts.c: 295: return merged;
  3804  001FAA  5049               	movf	merge@merged,w,c
  3805  001FAC  D000               	goto	i2l179
  3806  001FAE                     i2l179:
  3807  001FAE  0012               	return		;funcret
  3808  001FB0                     __end_of_merge:
  3809                           	opt stack 0
  3810                           pclatu	equ	0xFFB
  3811                           pclath	equ	0xFFA
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           intcon2	equ	0xFF1
  3820                           postinc0	equ	0xFEE
  3821                           fsr0h	equ	0xFEA
  3822                           fsr0l	equ	0xFE9
  3823                           wreg	equ	0xFE8
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           bsr	equ	0xFE0
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           plusw2	equ	0xFDB
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _initialRotation *****************
  3835 ;; Defined at:
  3836 ;;		line 402 in file "interrupts.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  side            1    wreg     enum E4145
  3839 ;;  isDeadEnd       2   20[COMRAM] int 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  side            1   22[COMRAM] enum E4145
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        3 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    2
  3858 ;; This function calls:
  3859 ;;		_rotate
  3860 ;; This function is called by:
  3861 ;;		_high_isr
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text19
  3866  001ED6                     __ptext19:
  3867                           	opt stack 0
  3868  001ED6                     _initialRotation:
  3869                           	opt stack 23
  3870                           
  3871                           ;incstack = 0
  3872                           ;initialRotation@side stored from wreg
  3873  001ED6  6E4C               	movwf	initialRotation@side,c
  3874                           
  3875                           ;interrupts.c: 404: if(isDeadEnd == 1)
  3876  001ED8  044A               	decf	initialRotation@isDeadEnd,w,c
  3877  001EDA  104B               	iorwf	initialRotation@isDeadEnd+1,w,c
  3878  001EDC  A4D8               	btfss	status,2,c
  3879  001EDE  D006               	goto	i2l1726
  3880                           
  3881                           ;interrupts.c: 405: {
  3882                           ;interrupts.c: 406: RotateCounter = 170*2;
  3883  001EE0  0E01               	movlw	1
  3884  001EE2  6E1E               	movwf	_RotateCounter+1,c
  3885  001EE4  0E54               	movlw	84
  3886  001EE6  6E1D               	movwf	_RotateCounter,c
  3887                           
  3888                           ;interrupts.c: 407: deadEnd = 1;
  3889  001EE8  0E01               	movlw	1
  3890  001EEA  D005               	goto	L15
  3891  001EEC                     i2l1726:
  3892                           
  3893                           ;interrupts.c: 409: else
  3894                           ;interrupts.c: 410: {
  3895                           ;interrupts.c: 411: RotateCounter = 170;
  3896  001EEC  0E00               	movlw	0
  3897  001EEE  6E1E               	movwf	_RotateCounter+1,c
  3898  001EF0  0EAA               	movlw	170
  3899  001EF2  6E1D               	movwf	_RotateCounter,c
  3900                           
  3901                           ;interrupts.c: 412: deadEnd = 0;
  3902  001EF4  0E00               	movlw	0
  3903  001EF6                     L15:
  3904  001EF6  6E33               	movwf	_deadEnd,c
  3905  001EF8  D000               	goto	i2l1728
  3906  001EFA                     i2l1728:
  3907                           
  3908                           ;interrupts.c: 413: }
  3909                           ;interrupts.c: 415: rotatingSide = side;
  3910  001EFA  C04C  F035         	movff	initialRotation@side,_rotatingSide
  3911                           
  3912                           ;interrupts.c: 416: justTurned = 1;
  3913  001EFE  0E01               	movlw	1
  3914  001F00  6E34               	movwf	_justTurned,c
  3915                           
  3916                           ;interrupts.c: 417: rotate(rotatingSide);
  3917  001F02  5035               	movf	_rotatingSide,w,c
  3918  001F04  ECE3  F00E         	call	_rotate
  3919  001F08  0012               	return		;funcret
  3920  001F0A                     __end_of_initialRotation:
  3921                           	opt stack 0
  3922                           pclatu	equ	0xFFB
  3923                           pclath	equ	0xFFA
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           intcon2	equ	0xFF1
  3932                           postinc0	equ	0xFEE
  3933                           fsr0h	equ	0xFEA
  3934                           fsr0l	equ	0xFE9
  3935                           wreg	equ	0xFE8
  3936                           fsr1h	equ	0xFE2
  3937                           fsr1l	equ	0xFE1
  3938                           bsr	equ	0xFE0
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           plusw2	equ	0xFDB
  3942                           fsr2h	equ	0xFDA
  3943                           fsr2l	equ	0xFD9
  3944                           status	equ	0xFD8
  3945                           
  3946 ;; *************** function _rotate *****************
  3947 ;; Defined at:
  3948 ;;		line 337 in file "interrupts.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  side            1    wreg     enum E4145
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  side            1   19[COMRAM] enum E4145
  3953 ;; Return value:  Size  Location     Type
  3954 ;;		None               void
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;Total ram usage:        1 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    1
  3969 ;; This function calls:
  3970 ;;		_motorCounterUpdate
  3971 ;; This function is called by:
  3972 ;;		_high_isr
  3973 ;;		_initialRotation
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text20
  3978  001DC6                     __ptext20:
  3979                           	opt stack 0
  3980  001DC6                     _rotate:
  3981                           	opt stack 24
  3982                           
  3983                           ;incstack = 0
  3984                           ;rotate@side stored from wreg
  3985  001DC6  6E49               	movwf	rotate@side,c
  3986                           
  3987                           ;interrupts.c: 339: if (side == LEFT){
  3988  001DC8  5049               	movf	rotate@side,w,c
  3989  001DCA  A4D8               	btfss	status,2,c
  3990  001DCC  D00B               	goto	i2l1668
  3991                           
  3992                           ;interrupts.c: 340: motorCounterUpdate(RIGHT,0);
  3993  001DCE  0E00               	movlw	0
  3994  001DD0  6E47               	movwf	motorCounterUpdate@reverse,c
  3995  001DD2  0E01               	movlw	1
  3996  001DD4  EC1D  F00D         	call	_motorCounterUpdate
  3997                           
  3998                           ;interrupts.c: 341: motorCounterUpdate(LEFT,1);
  3999  001DD8  0E01               	movlw	1
  4000  001DDA  6E47               	movwf	motorCounterUpdate@reverse,c
  4001  001DDC  0E00               	movlw	0
  4002  001DDE  EC1D  F00D         	call	_motorCounterUpdate
  4003                           
  4004                           ;interrupts.c: 342: } else {
  4005  001DE2  D00B               	goto	i2l1670
  4006  001DE4                     i2l1668:
  4007                           
  4008                           ;interrupts.c: 343: motorCounterUpdate(LEFT,0);
  4009  001DE4  0E00               	movlw	0
  4010  001DE6  6E47               	movwf	motorCounterUpdate@reverse,c
  4011  001DE8  0E00               	movlw	0
  4012  001DEA  EC1D  F00D         	call	_motorCounterUpdate
  4013                           
  4014                           ;interrupts.c: 344: motorCounterUpdate(RIGHT,1);
  4015  001DEE  0E01               	movlw	1
  4016  001DF0  6E47               	movwf	motorCounterUpdate@reverse,c
  4017  001DF2  0E01               	movlw	1
  4018  001DF4  EC1D  F00D         	call	_motorCounterUpdate
  4019  001DF8  D000               	goto	i2l1670
  4020  001DFA                     i2l1670:
  4021                           
  4022                           ;interrupts.c: 345: }
  4023                           ;interrupts.c: 346: RotateCounter--;
  4024  001DFA  061D               	decf	_RotateCounter,f,c
  4025  001DFC  A0D8               	btfss	status,0,c
  4026  001DFE  061E               	decf	_RotateCounter+1,f,c
  4027  001E00  0012               	return		;funcret
  4028  001E02                     __end_of_rotate:
  4029                           	opt stack 0
  4030                           pclatu	equ	0xFFB
  4031                           pclath	equ	0xFFA
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           prodh	equ	0xFF4
  4037                           prodl	equ	0xFF3
  4038                           intcon	equ	0xFF2
  4039                           intcon2	equ	0xFF1
  4040                           postinc0	equ	0xFEE
  4041                           fsr0h	equ	0xFEA
  4042                           fsr0l	equ	0xFE9
  4043                           wreg	equ	0xFE8
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           bsr	equ	0xFE0
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           plusw2	equ	0xFDB
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _motorCounterUpdate *****************
  4055 ;; Defined at:
  4056 ;;		line 246 in file "interrupts.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  side            1    wreg     enum E4145
  4059 ;;  reverse         1   17[COMRAM] unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  side            1   18[COMRAM] enum E4145
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4071 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;Total ram usage:        2 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_high_isr
  4081 ;;		_rotate
  4082 ;;		_forward
  4083 ;;		_smoothTurn
  4084 ;;		_Reversing
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           	psect	text21
  4089  001A3A                     __ptext21:
  4090                           	opt stack 0
  4091  001A3A                     _motorCounterUpdate:
  4092                           	opt stack 23
  4093                           
  4094                           ;incstack = 0
  4095                           ;motorCounterUpdate@side stored from wreg
  4096  001A3A  6E48               	movwf	motorCounterUpdate@side,c
  4097                           
  4098                           ;interrupts.c: 248: if(side == LEFT && reverse == 1)
  4099  001A3C  5048               	movf	motorCounterUpdate@side,w,c
  4100  001A3E  A4D8               	btfss	status,2,c
  4101  001A40  D01B               	goto	i2l1544
  4102  001A42  0447               	decf	motorCounterUpdate@reverse,w,c
  4103  001A44  B4D8               	btfsc	status,2,c
  4104  001A46  D00B               	goto	i2l1542
  4105  001A48  D017               	goto	i2l1544
  4106                           
  4107                           ;interrupts.c: 249: {
  4108                           ;interrupts.c: 250: switch(LMotorCounter)
  4109  001A4A  D009               	goto	i2l1542
  4110  001A4C                     i2l1532:
  4111  001A4C  0E02               	movlw	2
  4112  001A4E  D004               	goto	L18
  4113  001A50                     i2l1534:
  4114  001A50  0E04               	movlw	4
  4115  001A52  D002               	goto	L18
  4116                           
  4117                           ;interrupts.c: 254: case 0b00000100: LMotorCounter = 0b00001000; break;
  4118  001A54  D03E               	goto	i2l1576
  4119                           
  4120                           ;interrupts.c: 255: case 0b00001000: LMotorCounter = 0b00000001; break;
  4121  001A56  D039               	goto	i2l1570
  4122  001A58                     L18:
  4123  001A58  6E30               	movwf	_LMotorCounter,c
  4124  001A5A  D068               	goto	i2l176
  4125                           
  4126                           ;interrupts.c: 256: default: LMotorCounter = 0b00000001;
  4127  001A5C  D036               	goto	i2l1570
  4128  001A5E                     i2l1542:
  4129  001A5E  5030               	movf	_LMotorCounter,w,c
  4130                           
  4131                           ; Switch size 1, requested type "space"
  4132                           ; Number of cases is 4, Range of values is 1 to 8
  4133                           ; switch strategies available:
  4134                           ; Name         Instructions Cycles
  4135                           ; simple_byte           13     7 (average)
  4136                           ;	Chosen strategy is simple_byte
  4137  001A60  0A01               	xorlw	1	; case 1
  4138  001A62  B4D8               	btfsc	status,2,c
  4139  001A64  D7F3               	goto	i2l1532
  4140  001A66  0A03               	xorlw	3	; case 2
  4141  001A68  B4D8               	btfsc	status,2,c
  4142  001A6A  D7F2               	goto	i2l1534
  4143  001A6C  0A06               	xorlw	6	; case 4
  4144  001A6E  B4D8               	btfsc	status,2,c
  4145  001A70  D030               	goto	i2l1576
  4146  001A72  0A0C               	xorlw	12	; case 8
  4147  001A74  D02A               	goto	i2l1570
  4148                           
  4149                           ;interrupts.c: 258: } else if(side == RIGHT && reverse == 1)
  4150  001A76  D05A               	goto	i2l176
  4151  001A78                     i2l1544:
  4152  001A78  0448               	decf	motorCounterUpdate@side,w,c
  4153  001A7A  A4D8               	btfss	status,2,c
  4154  001A7C  D01D               	goto	i2l1562
  4155  001A7E  0447               	decf	motorCounterUpdate@reverse,w,c
  4156  001A80  B4D8               	btfsc	status,2,c
  4157  001A82  D00B               	goto	i2l1560
  4158  001A84  D019               	goto	i2l1562
  4159                           
  4160                           ;interrupts.c: 259: {
  4161                           ;interrupts.c: 260: switch(RMotorCounter)
  4162  001A86  D009               	goto	i2l1560
  4163  001A88                     i2l1550:
  4164  001A88  0E08               	movlw	8
  4165  001A8A  D040               	goto	L26
  4166  001A8C                     i2l1552:
  4167  001A8C  0E01               	movlw	1
  4168  001A8E  D03E               	goto	L26
  4169  001A90                     i2l1554:
  4170  001A90  0E02               	movlw	2
  4171  001A92  D03C               	goto	L26
  4172  001A94                     i2l1556:
  4173  001A94  0E04               	movlw	4
  4174  001A96  D03A               	goto	L26
  4175                           
  4176                           ;interrupts.c: 266: default: RMotorCounter = 0b00001000;
  4177  001A98  D7F7               	goto	i2l1550
  4178  001A9A                     i2l1560:
  4179  001A9A  5031               	movf	_RMotorCounter,w,c
  4180                           
  4181                           ; Switch size 1, requested type "space"
  4182                           ; Number of cases is 4, Range of values is 1 to 8
  4183                           ; switch strategies available:
  4184                           ; Name         Instructions Cycles
  4185                           ; simple_byte           13     7 (average)
  4186                           ;	Chosen strategy is simple_byte
  4187  001A9C  0A01               	xorlw	1	; case 1
  4188  001A9E  B4D8               	btfsc	status,2,c
  4189  001AA0  D7F3               	goto	i2l1550
  4190  001AA2  0A03               	xorlw	3	; case 2
  4191  001AA4  B4D8               	btfsc	status,2,c
  4192  001AA6  D7F2               	goto	i2l1552
  4193  001AA8  0A06               	xorlw	6	; case 4
  4194  001AAA  B4D8               	btfsc	status,2,c
  4195  001AAC  D7F1               	goto	i2l1554
  4196  001AAE  0A0C               	xorlw	12	; case 8
  4197  001AB0  B4D8               	btfsc	status,2,c
  4198  001AB2  D7F0               	goto	i2l1556
  4199  001AB4  D7E9               	goto	i2l1550
  4200                           
  4201                           ;interrupts.c: 268: } else if(side == LEFT && reverse == 0)
  4202  001AB6  D03A               	goto	i2l176
  4203  001AB8                     i2l1562:
  4204  001AB8  5048               	movf	motorCounterUpdate@side,w,c
  4205  001ABA  A4D8               	btfss	status,2,c
  4206  001ABC  D01B               	goto	i2l1580
  4207  001ABE  5047               	movf	motorCounterUpdate@reverse,w,c
  4208  001AC0  B4D8               	btfsc	status,2,c
  4209  001AC2  D009               	goto	i2l1578
  4210  001AC4  D017               	goto	i2l1580
  4211                           
  4212                           ;interrupts.c: 269: {
  4213                           ;interrupts.c: 270: switch(LMotorCounter)
  4214  001AC6  D007               	goto	i2l1578
  4215                           
  4216                           ;interrupts.c: 271: {
  4217                           ;interrupts.c: 272: case 0b00000001: LMotorCounter = 0b00001000; break;
  4218  001AC8  D004               	goto	i2l1576
  4219  001ACA                     i2l1570:
  4220  001ACA  0E01               	movlw	1
  4221  001ACC  D7C5               	goto	L18
  4222                           
  4223                           ;interrupts.c: 274: case 0b00000100: LMotorCounter = 0b00000010; break;
  4224  001ACE  D7BE               	goto	i2l1532
  4225                           
  4226                           ;interrupts.c: 275: case 0b00001000: LMotorCounter = 0b00000100; break;
  4227  001AD0  D7BF               	goto	i2l1534
  4228  001AD2                     i2l1576:
  4229  001AD2  0E08               	movlw	8
  4230  001AD4  D7C1               	goto	L18
  4231  001AD6                     i2l1578:
  4232  001AD6  5030               	movf	_LMotorCounter,w,c
  4233                           
  4234                           ; Switch size 1, requested type "space"
  4235                           ; Number of cases is 4, Range of values is 1 to 8
  4236                           ; switch strategies available:
  4237                           ; Name         Instructions Cycles
  4238                           ; simple_byte           13     7 (average)
  4239                           ;	Chosen strategy is simple_byte
  4240  001AD8  0A01               	xorlw	1	; case 1
  4241  001ADA  B4D8               	btfsc	status,2,c
  4242  001ADC  D7FA               	goto	i2l1576
  4243  001ADE  0A03               	xorlw	3	; case 2
  4244  001AE0  B4D8               	btfsc	status,2,c
  4245  001AE2  D7F3               	goto	i2l1570
  4246  001AE4  0A06               	xorlw	6	; case 4
  4247  001AE6  B4D8               	btfsc	status,2,c
  4248  001AE8  D7B1               	goto	i2l1532
  4249  001AEA  0A0C               	xorlw	12	; case 8
  4250  001AEC  B4D8               	btfsc	status,2,c
  4251  001AEE  D7B0               	goto	i2l1534
  4252  001AF0  D7F0               	goto	i2l1576
  4253                           
  4254                           ;interrupts.c: 278: } else if(side == RIGHT && reverse == 0)
  4255  001AF2  D01C               	goto	i2l176
  4256  001AF4                     i2l1580:
  4257  001AF4  0448               	decf	motorCounterUpdate@side,w,c
  4258  001AF6  A4D8               	btfss	status,2,c
  4259  001AF8  D019               	goto	i2l176
  4260  001AFA  5047               	movf	motorCounterUpdate@reverse,w,c
  4261  001AFC  B4D8               	btfsc	status,2,c
  4262  001AFE  D009               	goto	i2l1596
  4263  001B00  D015               	goto	i2l176
  4264                           
  4265                           ;interrupts.c: 279: {
  4266                           ;interrupts.c: 280: switch(RMotorCounter)
  4267  001B02  D007               	goto	i2l1596
  4268                           
  4269                           ;interrupts.c: 281: {
  4270                           ;interrupts.c: 282: case 0b00000001: RMotorCounter = 0b00000010; break;
  4271  001B04  D7C5               	goto	i2l1554
  4272                           
  4273                           ;interrupts.c: 283: case 0b00000010: RMotorCounter = 0b00000100; break;
  4274  001B06  D7C6               	goto	i2l1556
  4275                           
  4276                           ;interrupts.c: 284: case 0b00000100: RMotorCounter = 0b00001000; break;
  4277  001B08  D7BF               	goto	i2l1550
  4278                           
  4279                           ;interrupts.c: 285: case 0b00001000: RMotorCounter = 0b00000001; break;
  4280  001B0A  D7C0               	goto	i2l1552
  4281  001B0C                     L26:
  4282  001B0C  6E31               	movwf	_RMotorCounter,c
  4283  001B0E  D00E               	goto	i2l176
  4284                           
  4285                           ;interrupts.c: 286: default: RMotorCounter = 0b00000001;
  4286  001B10  D7BD               	goto	i2l1552
  4287  001B12                     i2l1596:
  4288  001B12  5031               	movf	_RMotorCounter,w,c
  4289                           
  4290                           ; Switch size 1, requested type "space"
  4291                           ; Number of cases is 4, Range of values is 1 to 8
  4292                           ; switch strategies available:
  4293                           ; Name         Instructions Cycles
  4294                           ; simple_byte           13     7 (average)
  4295                           ;	Chosen strategy is simple_byte
  4296  001B14  0A01               	xorlw	1	; case 1
  4297  001B16  B4D8               	btfsc	status,2,c
  4298  001B18  D7BB               	goto	i2l1554
  4299  001B1A  0A03               	xorlw	3	; case 2
  4300  001B1C  B4D8               	btfsc	status,2,c
  4301  001B1E  D7BA               	goto	i2l1556
  4302  001B20  0A06               	xorlw	6	; case 4
  4303  001B22  B4D8               	btfsc	status,2,c
  4304  001B24  D7B1               	goto	i2l1550
  4305  001B26  0A0C               	xorlw	12	; case 8
  4306  001B28  D7B1               	goto	i2l1552
  4307  001B2A  D000               	goto	i2l176
  4308  001B2C                     i2l176:
  4309  001B2C  0012               	return		;funcret
  4310  001B2E                     __end_of_motorCounterUpdate:
  4311                           	opt stack 0
  4312                           pclatu	equ	0xFFB
  4313                           pclath	equ	0xFFA
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           intcon2	equ	0xFF1
  4322                           postinc0	equ	0xFEE
  4323                           fsr0h	equ	0xFEA
  4324                           fsr0l	equ	0xFE9
  4325                           wreg	equ	0xFE8
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           bsr	equ	0xFE0
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _KController *****************
  4337 ;; Defined at:
  4338 ;;		line 311 in file "interrupts.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        0 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_high_isr
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text22
  4366  001CF0                     __ptext22:
  4367                           	opt stack 0
  4368  001CF0                     _KController:
  4369                           	opt stack 25
  4370                           
  4371                           ;interrupts.c: 322: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  4372                           
  4373                           ;incstack = 0
  4374  001CF0  BE0E               	btfsc	_sensorValue+5,7,c
  4375  001CF2  D00E               	goto	i2l1250
  4376  001CF4  500E               	movf	_sensorValue+5,w,c
  4377  001CF6  E104               	bnz	i2u64_40
  4378  001CF8  0E96               	movlw	150
  4379  001CFA  5C0D               	subwf	_sensorValue+4,w,c
  4380  001CFC  A0D8               	btfss	status,0,c
  4381  001CFE  D008               	goto	i2l1250
  4382  001D00                     i2u64_40:
  4383  001D00  BE10               	btfsc	_sensorValue+7,7,c
  4384  001D02  D006               	goto	i2l1250
  4385  001D04  5010               	movf	_sensorValue+7,w,c
  4386  001D06  E11E               	bnz	i2l195
  4387  001D08  0E96               	movlw	150
  4388  001D0A  5C0F               	subwf	_sensorValue+6,w,c
  4389  001D0C  B0D8               	btfsc	status,0,c
  4390  001D0E  D01A               	goto	i2l195
  4391  001D10                     i2l1250:
  4392                           
  4393                           ;interrupts.c: 323: {
  4394                           ;interrupts.c: 325: if(sensorValue[0] > 400)
  4395  001D10  BE0A               	btfsc	_sensorValue+1,7,c
  4396  001D12  D00B               	goto	i2l1254
  4397  001D14  0E91               	movlw	145
  4398  001D16  5C09               	subwf	_sensorValue,w,c
  4399  001D18  0E01               	movlw	1
  4400  001D1A  580A               	subwfb	_sensorValue+1,w,c
  4401  001D1C  A0D8               	btfss	status,0,c
  4402  001D1E  D005               	goto	i2l1254
  4403                           
  4404                           ;interrupts.c: 326: {
  4405                           ;interrupts.c: 327: controlToRight = 30;
  4406  001D20  0E00               	movlw	0
  4407  001D22  6E2A               	movwf	_controlToRight+1,c
  4408  001D24  0E1E               	movlw	30
  4409  001D26  6E29               	movwf	_controlToRight,c
  4410                           
  4411                           ;interrupts.c: 328: } else if(sensorValue[1] > 400)
  4412  001D28  D00D               	goto	i2l195
  4413  001D2A                     i2l1254:
  4414  001D2A  BE0C               	btfsc	_sensorValue+3,7,c
  4415  001D2C  D00B               	goto	i2l195
  4416  001D2E  0E91               	movlw	145
  4417  001D30  5C0B               	subwf	_sensorValue+2,w,c
  4418  001D32  0E01               	movlw	1
  4419  001D34  580C               	subwfb	_sensorValue+3,w,c
  4420  001D36  A0D8               	btfss	status,0,c
  4421  001D38  D005               	goto	i2l195
  4422                           
  4423                           ;interrupts.c: 329: {
  4424                           ;interrupts.c: 330: controlToLeft = 30;
  4425  001D3A  0E00               	movlw	0
  4426  001D3C  6E28               	movwf	_controlToLeft+1,c
  4427  001D3E  0E1E               	movlw	30
  4428  001D40  6E27               	movwf	_controlToLeft,c
  4429  001D42  D000               	goto	i2l195
  4430  001D44                     i2l195:
  4431  001D44  0012               	return		;funcret
  4432  001D46                     __end_of_KController:
  4433                           	opt stack 0
  4434                           pclatu	equ	0xFFB
  4435                           pclath	equ	0xFFA
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           intcon2	equ	0xFF1
  4444                           postinc0	equ	0xFEE
  4445                           fsr0h	equ	0xFEA
  4446                           fsr0l	equ	0xFE9
  4447                           wreg	equ	0xFE8
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           bsr	equ	0xFE0
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           plusw2	equ	0xFDB
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           pclatu	equ	0xFFB
  4458                           pclath	equ	0xFFA
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           intcon	equ	0xFF2
  4466                           intcon2	equ	0xFF1
  4467                           postinc0	equ	0xFEE
  4468                           fsr0h	equ	0xFEA
  4469                           fsr0l	equ	0xFE9
  4470                           wreg	equ	0xFE8
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           bsr	equ	0xFE0
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           plusw2	equ	0xFDB
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481                           	psect	rparam
  4482  0000                     pclatu	equ	0xFFB
  4483                           pclath	equ	0xFFA
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           intcon2	equ	0xFF1
  4492                           postinc0	equ	0xFEE
  4493                           fsr0h	equ	0xFEA
  4494                           fsr0l	equ	0xFE9
  4495                           wreg	equ	0xFE8
  4496                           fsr1h	equ	0xFE2
  4497                           fsr1l	equ	0xFE1
  4498                           bsr	equ	0xFE0
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           plusw2	equ	0xFDB
  4502                           fsr2h	equ	0xFDA
  4503                           fsr2l	equ	0xFD9
  4504                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      93
    BANK0           128    119     119
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_initialRotation
    _forward->_motorCounterUpdate
    _initialRotation->_rotate
    _rotate->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6087
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4856
                                             28 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   17    14      3    3634
                                             11 BANK0     17    14      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4919
                                             23 COMRAM    14    14      0
                        _KController
                            _forward
                    _initialRotation
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
                      _singleForward
                        _stateUpdate
 ---------------------------------------------------------------------------------
 (6) _stateUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _singleForward                                        0     0      0     812
                            _forward
 ---------------------------------------------------------------------------------
 (7) _forward                                              0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _initialRotation                                      3     1      2    1514
                                             20 COMRAM     3     1      2
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     834
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (8) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _forward
     _motorCounterUpdate
   _initialRotation
     _rotate
       _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate
   _singleForward
     _forward
       _motorCounterUpdate
   _stateUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      77       5       93.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     25      5D       1       73.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4      34        0.0%
DATA                 0      0      D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 16:19:40 2015

                   _stateUpdate 16FE                    ___awdiv@sign 0085                              bsr 000FE0  
           ___wmul@multiplicand 0082                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_LVP$ON 000000                             l320 1D74                             l334 1F9E  
                           l352 13CC                             l329 1F8A                             l370 1ED4  
                           l365 1E98                             l373 1E38                             l366 1EA0  
                           l359 197E                             l369 1ECC                             l566 1CEE  
                  __CFG_CPB$OFF 000000                             _MAX 1EA2                             _MIN 1E6E  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1FA0                    _rotatingSide 0035  
                           wreg 000FE8                            ?_MAX 0086                            ?_MIN 0086  
                          MAX@a 0086                            MAX@b 0088                            MIN@a 0086  
                          MIN@b 0088                    __CFG_WDT$OFF 000000                            l2002 1C3E  
                          l2014 1C74                            l2030 1CCE                            l2040 1D5C  
                          l2016 1C82                            l2008 1C56                            l2120 1928  
                          l2034 1CE4                            l2026 1CBE                            l2018 1C8C  
                          l2130 1966                            l2052 1F98                            l2060 102A  
                          l2140 1A1A                            l2124 1942                            l2070 10BC  
                          l2126 194C                            l2080 126C                            l2072 11DA  
                          l2144 1A24                            l2090 1334                            l2066 104E  
                          l2170 1F2C                            l2076 11F0                            l2094 13B6  
                          l2088 1330                            u2010 1028                            u2020 104C  
                          _LATC 000F8B                            u2145 198C                            u2177 1D64  
                          i2l90 16A4               ??_initialRotation 004C                            _main 1F0A  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            fsr2l 000FD9  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00A2                   __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 008B  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                 __end_of_InitApp 1DC6  
         __end_of_setCorrection 1C20                           ??_MAX 008A                           ??_MIN 008A  
    __size_of_sensorComputation 03C8                           ?_main 0036                 __end_of___awdiv 1CF0  
                         _T0CON 000FD5                 ___awdiv@divisor 0082                           i2l213 1F60  
                         i2l135 16C4                           i2l242 1918                           i2l219 1F80  
                         i2l176 1B2C                           i2l195 1D44                           i2l179 1FAE  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1FB0  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                   _controlToLeft 0027                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                         _delay 1D46                           _merge 1FA0                 __end_of_forward 1F62  
               __end_of_low_isr 00A2                           tablat 000FF5                           plusw2 000FDB  
                         status 000FD8            ?_ConfigureOscillator 0036                 __initialization 1E3A  
                  __end_of_main 1F38                          ??_main 00F7                   __activetblptr 000002  
                        ?_delay 0080                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          ?_merge 0047                          _ADRESH 000FC4  
                        _ADRESL 000FC3                ___awdiv@dividend 0080                          i2l1200 17E8  
                        i2l1202 17F8                          i2l1220 1870                          i2l1212 183C  
                        i2l1204 1808                          i2l1214 184C                          i2l1206 180C  
                        i2l1240 18F4                          i2l1208 181C                          i2l1216 1850  
                        i2l1250 1D10                          i2l1226 1892                          i2l1170 171E  
                        i2l1228 18A2                          i2l1236 18D4                          i2l1172 172E  
                        i2l1254 1D2A                          i2l1238 18E4                          i2l1182 1772  
                        i2l1174 173E                          i2l1184 1782                          i2l1168 170E  
                        i2l1176 1742                          i2l1186 1786                          i2l1532 1A4C  
                        i2l1196 17C8                          i2l1550 1A88                          i2l1534 1A50  
                        i2l1542 1A5E                          i2l1552 1A8C                          i2l1560 1A9A  
                        i2l1544 1A78                          i2l1570 1ACA                          i2l1554 1A90  
                        i2l1562 1AB8                          i2l1580 1AF4                          i2l1556 1A94  
                        i2l1820 1444                          i2l1812 1420                          i2l1670 1DFA  
                        i2l1726 1EEC                          i2l1902 15CE                          i2l1910 15FC  
                        i2l1830 146A                          i2l1822 1454                          i2l1814 1426  
                        i2l1576 1AD2                          i2l1728 1EFA                          i2l1736 1F72  
                        i2l1840 1496                          i2l1578 1AD6                          i2l1930 165E  
                        i2l1922 1638                          i2l1914 1612                          i2l1906 15E6  
                        i2l1842 14A6                          i2l1596 1B12                          i2l1668 1DE4  
                        i2l1852 14CE                          i2l1828 1460                          i2l1836 1478  
                        i2l1934 1676                          i2l1926 1650                          i2l1918 1620  
                        i2l1854 14DC                          i2l1846 14B6                          i2l1872 1540  
                        i2l1856 14EA                          i2l1944 16BC                          i2l1938 168E  
                        i2l1890 1590                          i2l1882 156A                          i2l1866 1520  
                        i2l1874 1546                          i2l1858 14FC                          i2l1894 159E  
                        i2l1886 1578                          i2l1898 15B6                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 0049                  __CFG_XINST$OFF 000000              sensorComputation@i 009A  
            sensorComputation@j 0098                  _controlToRight 0029                __end_of_high_isr 16FE  
                        _cState 005B                          ___wmul 1E02                       ??___awdiv 0084  
                __CFG_STVREN$ON 000000                          _pState 005D                          delay@x 0083  
                        clear_0 1E40                ___awdiv@quotient 0086                          _rotate 1DC6  
                  __pdataCOMRAM 005B                       ??_forward 0049                    __mediumconst 0000  
                     ??_low_isr 0036                  _ReverseCounter 001B                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1E64                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0036                  __pcstackCOMRAM 0036                   __end_of_delay 1D8A  
                  ?_stateUpdate 0036                      _TurnedLeft 0023                 moveMouse@action 0047  
                 __end_of_merge 1FB0      __end_of_motorCounterUpdate 1B2E                 _initialRotation 1ED6  
                _ignoreControll 005C                  _ForwardCounter 0013                         ??_delay 0082  
                       ??_merge 0048              _AlgorithmSelection 1F82                    _LTurnCounter 0015  
                    _delay_time 002B           __end_of_singleForward 1F82               _MotorDelayCounter 0017  
           ?_AlgorithmSelection 0036            setCorrection@sideAvg 008A                         ?___wmul 0080  
            __size_of_moveMouse 0008                         ?_rotate 0036                         _INTCON2 000FF1  
                       i2u40_40 1796                         i2u41_40 17A6                         i2u52_40 1860  
                       i2u44_40 17D8                         i2u36_40 1752                         i2u37_40 1762  
                       _OSCTUNE 000F9B                         i2u64_40 1D00                         i2u57_40 18B2  
                       i2u49_40 182C            ??_AlgorithmSelection 0080                       ?_high_isr 0036  
                       _Deadend 0011                   _LMotorCounter 0030                         _InitApp 1D8A  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 1C20  
               __size_of___wmul 0038                         _deadEnd 0033         __end_of_initialRotation 1F0A  
                  __psmallconst 1000                         __pcinit 1E3A                         __ramtop 1000  
                       __ptext0 1F0A                         __ptext1 1B2E                         __ptext2 191A  
                       __ptext3 1006                         __ptext4 1E02                         __ptext5 1C20  
                       __ptext6 1E6E                         __ptext7 1EA2                         __ptext8 1D8A  
                       __ptext9 1D46                 __size_of_rotate 003C                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1F38                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0036                      ??_high_isr 004D  
                __pintcode_body 13CE          __size_of_setCorrection 00F2            end_of_initialization 1E64  
              _sensorCorrection 0001               __end_of_moveMouse 1FC2                   __Lmediumconst 0000  
                       int_func 13CE                      _justTurned 0034            __size_of_KController 0056  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
          __size_of_stateUpdate 021C                       _TRISBbits 000F93                       _TRISEbits 000F96  
                ??_sensorUpdate 009C     __end_of_ConfigureOscillator 1FBA                    _RTurnCounter 0019  
sensorComputation@getCorrection 008D                   _setCorrection 1B2E                ?_initialRotation 004A  
                __end_of___wmul 1E3A                   __pidataCOMRAM 1FC2                     _TurnedRight 0025  
                __end_of_rotate 1E02             start_initialization 1E3A                     __end_of_MAX 1ED6  
                   __end_of_MIN 1EA2              _motorCounterUpdate 1A3A                __CFG_OSC$INTIO67 000000  
           ?_motorCounterUpdate 0047                      merge@right 0047                  ?_setCorrection 0036  
                      ??___wmul 0084                __CFG_LPT1OSC$OFF 000000                        ??_rotate 0049  
                _sensorLocation 1001            ??_motorCounterUpdate 0048                     __pbssCOMRAM 0001  
                 __pcstackBANK0 0080                       _TurnRight 0021       sensorUpdate@getCorrection 00F2  
        sensorUpdate@sensorTemp 00A2               __size_of_high_isr 16F6                        ?_InitApp 0036  
             __CFG_CCP2MX$PORTC 000000                       _algorithm 0032                       __pintcode 0008  
         setCorrection@frontAvg 008C          motorCounterUpdate@side 0048                        ?___awdiv 0080  
          __end_of_sensorUpdate 1A3A          __end_of_sensorLocation 1005                     __pintcodelo 0018  
           initialRotation@side 004C                  _ChangeRequired 002F                     __smallconst 1000  
                      ?_forward 0036                        ?_low_isr 0036                       _oldErrorP 002D  
        __size_of_singleForward 0020                  __size_of_delay 0044     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 0084                       _moveMouse 1FBA  
                      i2u161_40 1486                        i2u154_40 1410                 ??_setCorrection 0088  
                      i2u168_40 150E                        i2u169_40 152E                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0031  
                    rotate@side 0049                   ??_KController 0047                      ?_moveMouse 0036  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 0048  
          sensorComputation@max 0092                        __Lrparam 0000            sensorComputation@min 0094  
          sensorComputation@sum 0096              __CFG_BOREN$SBORDIS 000000                   _singleForward 1F62  
                 ??_stateUpdate 0047                __size_of___awdiv 00D0                        _TurnLeft 001F  
              __size_of_forward 002A                __size_of_low_isr 008A                        __ptext10 1F82  
                      __ptext11 1FB0                        __ptext20 1DC6                        __ptext21 1A3A  
                      __ptext22 1CF0                        __ptext14 16FE                        __ptext15 1F62  
                      __ptext16 1F38                        __ptext17 1FBA                        __ptext18 1FA0  
                      __ptext19 1ED6                        _high_isr 0008                   __size_of_main 002E  
                 _RotateCounter 001D           __size_of_sensorUpdate 0120    __size_of_ConfigureOscillator 000A  
                ?_singleForward 0036             __end_of_KController 1D46               _sensorComputation 1006  
           __end_of_stateUpdate 191A                      _INTCONbits 000FF2              ?_sensorComputation 008B  
      __size_of_initialRotation 0034                   sensorUpdate@i 00F3                   sensorUpdate@j 00F5  
                  _sensorUpdate 191A                        intlevel1 0000                        intlevel2 0000  
           ??_sensorComputation 008E                     ??_moveMouse 0047        initialRotation@isDeadEnd 004A  
     __end_of_sensorComputation 13CE                     _sensorValue 0009     __size_of_motorCounterUpdate 00F4  
     motorCounterUpdate@reverse 0047                 ??_singleForward 0049                     _KController 1CF0  
