

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 01 17:31:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001E3A                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _TurnLeft
    43  001E3A  00C8               	dw	200
    44                           
    45                           ;initializer for _TurnRight
    46  001E3C  00C8               	dw	200
    47                           
    48                           ;initializer for _controllerSteps
    49  001E3E  0A                 	db	10
    50                           
    51                           	psect	smallconst
    52  001000                     __psmallconst:
    53                           	opt stack 0
    54  001000  00                 	db	0
    55  001001                     _sensorLocation:
    56                           	opt stack 0
    57  001001  1B                 	db	27
    58  001002  2B                 	db	43
    59  001003  1F                 	db	31
    60  001004  33                 	db	51
    61  001005                     __end_of_sensorLocation:
    62                           	opt stack 0
    63  0000                     _ADCON0	set	4034
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON2	set	4032
    67  0000                     _ADRESH	set	4036
    68  0000                     _ADRESL	set	4035
    69  0000                     _INTCON	set	4082
    70  0000                     _INTCON2	set	4081
    71  0000                     _INTCONbits	set	4082
    72  0000                     _LATC	set	3979
    73  0000                     _OSCCON	set	4051
    74  0000                     _OSCTUNE	set	3995
    75  0000                     _T0CON	set	4053
    76  0000                     _TRISBbits	set	3987
    77  0000                     _TRISC	set	3988
    78  0000                     _TRISEbits	set	3990
    79                           
    80                           ; #config settings
    81  001005  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           	psect	cinit
    84  001CE8                     __pcinit:
    85                           	opt stack 0
    86  001CE8                     start_initialization:
    87                           	opt stack 0
    88  001CE8                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to COMRAM (49 bytes)
    92  001CE8  EE00  F001         	lfsr	0,__pbssCOMRAM
    93  001CEC  0E31               	movlw	49
    94  001CEE                     clear_0:
    95  001CEE  6AEE               	clrf	postinc0,c
    96  001CF0  06E8               	decf	wreg,f,c
    97  001CF2  E1FD               	bnz	clear_0
    98                           
    99                           ; Initialize objects allocated to COMRAM (5 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  001CF4  0E3A               	movlw	low __pidataCOMRAM
   102  001CF6  6EF6               	movwf	tblptrl,c
   103  001CF8  0E1E               	movlw	high __pidataCOMRAM
   104  001CFA  6EF7               	movwf	tblptrh,c
   105  001CFC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   106  001CFE  6EF8               	movwf	tblptru,c
   107  001D00  EE00  F059         	lfsr	0,__pdataCOMRAM
   108  001D04  EE10 F005          	lfsr	1,5
   109  001D08                     copy_data0:
   110  001D08  0009               	tblrd		*+
   111  001D0A  CFF5 FFEE          	movff	tablat,postinc0
   112  001D0E  50E5               	movf	postdec1,w,c
   113  001D10  50E1               	movf	fsr1l,w,c
   114  001D12  E1FA               	bnz	copy_data0
   115  001D14                     end_of_initialization:
   116                           	opt stack 0
   117  001D14                     __end_of__initialization:
   118                           	opt stack 0
   119  001D14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   120  001D16  6EF8               	movwf	tblptru,c
   121  001D18  0100               	movlb	0
   122  001D1A  EFC3  F00E         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           tblptrl	equ	0xFF6
   126                           tablat	equ	0xFF5
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           postdec1	equ	0xFE5
   130                           fsr1l	equ	0xFE1
   131                           
   132                           	psect	bssCOMRAM
   133  000001                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000001                     _sensorCorrection:
   136                           	opt stack 0
   137  000001                     	ds	8
   138  000009                     _sensorValue:
   139                           	opt stack 0
   140  000009                     	ds	8
   141  000011                     _Deadend:
   142                           	opt stack 0
   143  000011                     	ds	2
   144  000013                     _ForwardCounter:
   145                           	opt stack 0
   146  000013                     	ds	2
   147  000015                     _LTurnCounter:
   148                           	opt stack 0
   149  000015                     	ds	2
   150  000017                     _MotorDelayCounter:
   151                           	opt stack 0
   152  000017                     	ds	2
   153  000019                     _RTurnCounter:
   154                           	opt stack 0
   155  000019                     	ds	2
   156  00001B                     _ReverseCounter:
   157                           	opt stack 0
   158  00001B                     	ds	2
   159  00001D                     _RotateCounter:
   160                           	opt stack 0
   161  00001D                     	ds	2
   162  00001F                     _TurnedLeft:
   163                           	opt stack 0
   164  00001F                     	ds	2
   165  000021                     _TurnedRight:
   166                           	opt stack 0
   167  000021                     	ds	2
   168  000023                     _delay_time:
   169                           	opt stack 0
   170  000023                     	ds	2
   171  000025                     _errorD:
   172                           	opt stack 0
   173  000025                     	ds	2
   174  000027                     _errorP:
   175                           	opt stack 0
   176  000027                     	ds	2
   177  000029                     _oldErrorP:
   178                           	opt stack 0
   179  000029                     	ds	2
   180  00002B                     _totalError:
   181                           	opt stack 0
   182  00002B                     	ds	2
   183  00002D                     _LMotorCounter:
   184                           	opt stack 0
   185  00002D                     	ds	1
   186  00002E                     _RMotorCounter:
   187                           	opt stack 0
   188  00002E                     	ds	1
   189  00002F                     _algorithm:
   190                           	opt stack 0
   191  00002F                     	ds	1
   192  000030                     _justTurned:
   193                           	opt stack 0
   194  000030                     	ds	1
   195  000031                     _rotatingSide:
   196                           	opt stack 0
   197  000031                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	dataCOMRAM
   208  000059                     __pdataCOMRAM:
   209                           	opt stack 0
   210  000059                     _TurnLeft:
   211                           	opt stack 0
   212  000059                     	ds	2
   213  00005B                     _TurnRight:
   214                           	opt stack 0
   215  00005B                     	ds	2
   216  00005D                     _controllerSteps:
   217                           	opt stack 0
   218  00005D                     	ds	1
   219                           tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           postdec1	equ	0xFE5
   226                           fsr1l	equ	0xFE1
   227                           
   228                           	psect	cstackBANK0
   229  000080                     __pcstackBANK0:
   230                           	opt stack 0
   231  000080                     ?___wmul:
   232                           	opt stack 0
   233  000080                     ?___awdiv:
   234                           	opt stack 0
   235  000080                     delay@ms:
   236                           	opt stack 0
   237  000080                     ___wmul@multiplier:
   238                           	opt stack 0
   239  000080                     ___awdiv@dividend:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x0
   243  000080                     	ds	2
   244  000082                     ??_delay:
   245  000082                     ___wmul@multiplicand:
   246                           	opt stack 0
   247  000082                     ___awdiv@divisor:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x2
   251  000082                     	ds	1
   252  000083                     delay@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x3
   256  000083                     	ds	1
   257  000084                     ___awdiv@counter:
   258                           	opt stack 0
   259  000084                     ___wmul@product:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x4
   263  000084                     	ds	1
   264  000085                     ___awdiv@sign:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x5
   268  000085                     	ds	1
   269  000086                     ?_MIN:
   270                           	opt stack 0
   271  000086                     ?_MAX:
   272                           	opt stack 0
   273  000086                     MIN@a:
   274                           	opt stack 0
   275  000086                     MAX@a:
   276                           	opt stack 0
   277  000086                     ___awdiv@quotient:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x6
   281  000086                     	ds	2
   282  000088                     ??_setCorrection:
   283  000088                     MIN@b:
   284                           	opt stack 0
   285  000088                     MAX@b:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289  000088                     	ds	2
   290  00008A                     ??_MIN:
   291  00008A                     ??_MAX:
   292  00008A                     setCorrection@sideAvg:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0xA
   296  00008A                     	ds	1
   297  00008B                     sensorComputation@sensorTemp:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0xB
   301  00008B                     	ds	1
   302  00008C                     setCorrection@frontAvg:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0xC
   306  00008C                     	ds	1
   307  00008D                     sensorComputation@getCorrection:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0xD
   311  00008D                     	ds	1
   312  00008E                     ??_sensorComputation:
   313                           
   314                           ; 0 bytes @ 0xE
   315  00008E                     	ds	2
   316  000090                     sensorComputation@max:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x10
   320  000090                     	ds	2
   321  000092                     sensorComputation@min:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x12
   325  000092                     	ds	2
   326  000094                     sensorComputation@sum:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x14
   330  000094                     	ds	2
   331  000096                     sensorComputation@j:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x16
   335  000096                     	ds	2
   336  000098                     sensorComputation@i:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x18
   340  000098                     	ds	2
   341  00009A                     ??_sensorUpdate:
   342                           
   343                           ; 0 bytes @ 0x1A
   344  00009A                     	ds	6
   345  0000A0                     sensorUpdate@sensorTemp:
   346                           	opt stack 0
   347                           
   348                           ; 80 bytes @ 0x20
   349  0000A0                     	ds	80
   350  0000F0                     sensorUpdate@getCorrection:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x70
   354  0000F0                     	ds	1
   355  0000F1                     sensorUpdate@i:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x71
   359  0000F1                     	ds	2
   360  0000F3                     sensorUpdate@j:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x73
   364  0000F3                     	ds	2
   365  0000F5                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           ; 0 bytes @ 0x75
   375                           
   376                           	psect	cstackCOMRAM
   377  000032                     __pcstackCOMRAM:
   378                           	opt stack 0
   379  000032                     ??_low_isr:
   380  000032                     
   381                           ; 0 bytes @ 0x0
   382  000032                     	ds	17
   383  000043                     ?_ABS:
   384                           	opt stack 0
   385  000043                     motorCounterUpdate@reverse:
   386                           	opt stack 0
   387  000043                     merge@right:
   388                           	opt stack 0
   389  000043                     moveMouse@action:
   390                           	opt stack 0
   391  000043                     ABS@x:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x11
   395  000043                     	ds	1
   396  000044                     motorCounterUpdate@side:
   397                           	opt stack 0
   398  000044                     merge@left:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x12
   402  000044                     	ds	1
   403  000045                     merge@merged:
   404                           	opt stack 0
   405  000045                     rotate@side:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409  000045                     	ds	1
   410  000046                     ??_KController:
   411                           
   412                           ; 0 bytes @ 0x14
   413  000046                     	ds	2
   414  000048                     KController@correctTo:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x16
   418  000048                     	ds	1
   419  000049                     KController@diff:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x17
   423  000049                     	ds	2
   424  00004B                     ??_high_isr:
   425                           
   426                           ; 0 bytes @ 0x19
   427  00004B                     	ds	14
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 41 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;		None
   447 ;; Return value:  Size  Location     Type
   448 ;;		None               void
   449 ;; Registers used:
   450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;Total ram usage:        0 bytes
   461 ;; Hardware stack levels required when called:    7
   462 ;; This function calls:
   463 ;;		_ConfigureOscillator
   464 ;;		_InitApp
   465 ;;		_sensorUpdate
   466 ;;		_setCorrection
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           	psect	text0
   473  001D86                     __ptext0:
   474                           	opt stack 0
   475  001D86                     _main:
   476                           	opt stack 24
   477                           
   478                           ;main.c: 44: ConfigureOscillator();
   479                           
   480                           ;incstack = 0
   481  001D86  EC14  F00F         	call	_ConfigureOscillator	;wreg free
   482                           
   483                           ;main.c: 47: InitApp();
   484  001D8A  EC1C  F00E         	call	_InitApp	;wreg free
   485                           
   486                           ;main.c: 48: sensorUpdate(1);
   487  001D8E  0E01               	movlw	1
   488  001D90  EC1D  F00C         	call	_sensorUpdate
   489                           
   490                           ;main.c: 49: setCorrection();
   491  001D94  EC27  F00D         	call	_setCorrection	;wreg free
   492                           
   493                           ;main.c: 50: INTCONbits.GIE = 1;
   494  001D98  8EF2               	bsf	intcon,7,c	;volatile
   495  001D9A  D000               	goto	l2078
   496  001D9C                     l2078:
   497                           
   498                           ;main.c: 53: {
   499                           ;main.c: 54: sensorUpdate(0);
   500  001D9C  0E00               	movlw	0
   501  001D9E  EC1D  F00C         	call	_sensorUpdate
   502  001DA2  D7FC               	goto	l2078
   503  001DA4  EF51  F000         	goto	start
   504  001DA8                     __end_of_main:
   505                           	opt stack 0
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           intcon	equ	0xFF2
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516 ;; *************** function _setCorrection *****************
   517 ;; Defined at:
   518 ;;		line 125 in file "user.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  frontAvg        2   12[BANK0 ] int 
   523 ;;  sideAvg         2   10[BANK0 ] int 
   524 ;; Return value:  Size  Location     Type
   525 ;;		None               void
   526 ;; Registers used:
   527 ;;		wreg, status,2, status,0, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;Total ram usage:        6 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    5
   540 ;; This function calls:
   541 ;;		___awdiv
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text1
   548  001A4E                     __ptext1:
   549                           	opt stack 0
   550  001A4E                     _setCorrection:
   551                           	opt stack 25
   552                           
   553                           ;user.c: 127: int sideAvg,frontAvg;
   554                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   555                           
   556                           ;incstack = 0
   557  001A4E  5009               	movf	_sensorValue,w,c
   558  001A50  240B               	addwf	_sensorValue+2,w,c
   559  001A52  0100               	movlb	0	; () banked
   560  001A54  6F80               	movwf	___awdiv@dividend& (0+255),b
   561  001A56  500A               	movf	_sensorValue+1,w,c
   562  001A58  200C               	addwfc	_sensorValue+3,w,c
   563  001A5A  0100               	movlb	0	; () banked
   564  001A5C  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   565  001A5E  0E00               	movlw	0
   566  001A60  0100               	movlb	0	; () banked
   567  001A62  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   568  001A64  0E02               	movlw	2
   569  001A66  6F82               	movwf	___awdiv@divisor& (0+255),b
   570  001A68  EC92  F00D         	call	___awdiv	;wreg free
   571  001A6C  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   572  001A70  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   573                           
   574                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   575  001A74  500F               	movf	_sensorValue+6,w,c
   576  001A76  240D               	addwf	_sensorValue+4,w,c
   577  001A78  0100               	movlb	0	; () banked
   578  001A7A  6F80               	movwf	___awdiv@dividend& (0+255),b
   579  001A7C  5010               	movf	_sensorValue+7,w,c
   580  001A7E  200E               	addwfc	_sensorValue+5,w,c
   581  001A80  0100               	movlb	0	; () banked
   582  001A82  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   583  001A84  0E00               	movlw	0
   584  001A86  0100               	movlb	0	; () banked
   585  001A88  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   586  001A8A  0E02               	movlw	2
   587  001A8C  6F82               	movwf	___awdiv@divisor& (0+255),b
   588  001A8E  EC92  F00D         	call	___awdiv	;wreg free
   589  001A92  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   590  001A96  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   591                           
   592                           ;user.c: 131: sensorCorrection[0] = sensorValue[0] - sideAvg;
   593  001A9A  C08A  F088         	movff	setCorrection@sideAvg,??_setCorrection
   594  001A9E  C08B  F089         	movff	setCorrection@sideAvg+1,??_setCorrection+1
   595  001AA2  0100               	movlb	0	; () banked
   596  001AA4  1F88               	comf	??_setCorrection& (0+255),f,b
   597  001AA6  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   598  001AA8  4B88               	infsnz	??_setCorrection& (0+255),f,b
   599  001AAA  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   600  001AAC  5009               	movf	_sensorValue,w,c
   601  001AAE  0100               	movlb	0	; () banked
   602  001AB0  2588               	addwf	??_setCorrection& (0+255),w,b
   603  001AB2  6E01               	movwf	_sensorCorrection,c
   604  001AB4  500A               	movf	_sensorValue+1,w,c
   605  001AB6  0100               	movlb	0	; () banked
   606  001AB8  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   607  001ABA  6E02               	movwf	_sensorCorrection+1,c
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 132: sensorCorrection[1] = sensorValue[1] - sideAvg;
   611  001ABC  C08A  F088         	movff	setCorrection@sideAvg,??_setCorrection
   612  001AC0  C08B  F089         	movff	setCorrection@sideAvg+1,??_setCorrection+1
   613  001AC4  0100               	movlb	0	; () banked
   614  001AC6  1F88               	comf	??_setCorrection& (0+255),f,b
   615  001AC8  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   616  001ACA  4B88               	infsnz	??_setCorrection& (0+255),f,b
   617  001ACC  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   618  001ACE  500B               	movf	_sensorValue+2,w,c
   619  001AD0  0100               	movlb	0	; () banked
   620  001AD2  2588               	addwf	??_setCorrection& (0+255),w,b
   621  001AD4  6E03               	movwf	_sensorCorrection+2,c
   622  001AD6  500C               	movf	_sensorValue+3,w,c
   623  001AD8  0100               	movlb	0	; () banked
   624  001ADA  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   625  001ADC  6E04               	movwf	_sensorCorrection+3,c
   626                           
   627                           ; BSR set to: 0
   628                           ;user.c: 133: sensorCorrection[2] = sensorValue[2] - frontAvg;
   629  001ADE  C08C  F088         	movff	setCorrection@frontAvg,??_setCorrection
   630  001AE2  C08D  F089         	movff	setCorrection@frontAvg+1,??_setCorrection+1
   631  001AE6  0100               	movlb	0	; () banked
   632  001AE8  1F88               	comf	??_setCorrection& (0+255),f,b
   633  001AEA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   634  001AEC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   635  001AEE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   636  001AF0  500D               	movf	_sensorValue+4,w,c
   637  001AF2  0100               	movlb	0	; () banked
   638  001AF4  2588               	addwf	??_setCorrection& (0+255),w,b
   639  001AF6  6E05               	movwf	_sensorCorrection+4,c
   640  001AF8  500E               	movf	_sensorValue+5,w,c
   641  001AFA  0100               	movlb	0	; () banked
   642  001AFC  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   643  001AFE  6E06               	movwf	_sensorCorrection+5,c
   644                           
   645                           ; BSR set to: 0
   646                           ;user.c: 134: sensorCorrection[3] = sensorValue[3] - frontAvg;
   647  001B00  C08C  F088         	movff	setCorrection@frontAvg,??_setCorrection
   648  001B04  C08D  F089         	movff	setCorrection@frontAvg+1,??_setCorrection+1
   649  001B08  0100               	movlb	0	; () banked
   650  001B0A  1F88               	comf	??_setCorrection& (0+255),f,b
   651  001B0C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   652  001B0E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   653  001B10  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   654  001B12  500F               	movf	_sensorValue+6,w,c
   655  001B14  0100               	movlb	0	; () banked
   656  001B16  2588               	addwf	??_setCorrection& (0+255),w,b
   657  001B18  6E07               	movwf	_sensorCorrection+6,c
   658  001B1A  5010               	movf	_sensorValue+7,w,c
   659  001B1C  0100               	movlb	0	; () banked
   660  001B1E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   661  001B20  6E08               	movwf	_sensorCorrection+7,c
   662                           
   663                           ; BSR set to: 0
   664  001B22  0012               	return		;funcret
   665  001B24                     __end_of_setCorrection:
   666                           	opt stack 0
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677 ;; *************** function _sensorUpdate *****************
   678 ;; Defined at:
   679 ;;		line 161 in file "user.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  getCorrectio    1    wreg     unsigned char 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   684 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   685 ;;  j               2  115[BANK0 ] int 
   686 ;;  i               2  113[BANK0 ] int 
   687 ;; Return value:  Size  Location     Type
   688 ;;		None               void
   689 ;; Registers used:
   690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   697 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   698 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;Total ram usage:       91 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    6
   703 ;; This function calls:
   704 ;;		___wmul
   705 ;;		_sensorComputation
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text2
   712  00183A                     __ptext2:
   713                           	opt stack 0
   714  00183A                     _sensorUpdate:
   715                           	opt stack 24
   716                           
   717                           ; BSR set to: 0
   718                           ;incstack = 0
   719                           ;sensorUpdate@getCorrection stored from wreg
   720  00183A  0100               	movlb	0	; () banked
   721  00183C  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;user.c: 163: int i,j;
   725                           ;user.c: 164: int sensorTemp[4][10];
   726                           ;user.c: 167: for(i = 0; i < 10; i++)
   727  00183E  0E00               	movlw	0
   728  001840  0100               	movlb	0	; () banked
   729  001842  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   730  001844  0E00               	movlw	0
   731  001846  6FF1               	movwf	sensorUpdate@i& (0+255),b
   732  001848                     l2032:
   733                           
   734                           ; BSR set to: 0
   735  001848  0100               	movlb	0	; () banked
   736  00184A  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   737  00184C  D00A               	goto	l2036
   738  00184E  0100               	movlb	0	; () banked
   739  001850  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   740  001852  E178               	bnz	l2056
   741  001854  0E0A               	movlw	10
   742  001856  0100               	movlb	0	; () banked
   743  001858  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   744  00185A  B0D8               	btfsc	status,0,c
   745  00185C  D073               	goto	l2056
   746  00185E  D001               	goto	l2036
   747                           
   748                           ; BSR set to: 0
   749  001860  D071               	goto	l2056
   750  001862                     l2036:
   751                           
   752                           ; BSR set to: 0
   753                           ;user.c: 168: {
   754                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   755  001862  0E00               	movlw	0
   756  001864  0100               	movlb	0	; () banked
   757  001866  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   758  001868  0E00               	movlw	0
   759  00186A  6FF3               	movwf	sensorUpdate@j& (0+255),b
   760  00186C                     l2038:
   761                           
   762                           ; BSR set to: 0
   763  00186C  0100               	movlb	0	; () banked
   764  00186E  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   765  001870  D00A               	goto	l2042
   766  001872  0100               	movlb	0	; () banked
   767  001874  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   768  001876  E161               	bnz	l2052
   769  001878  0E04               	movlw	4
   770  00187A  0100               	movlb	0	; () banked
   771  00187C  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   772  00187E  B0D8               	btfsc	status,0,c
   773  001880  D05C               	goto	l2052
   774  001882  D001               	goto	l2042
   775                           
   776                           ; BSR set to: 0
   777  001884  D05A               	goto	l2052
   778  001886                     l2042:
   779                           
   780                           ; BSR set to: 0
   781                           ;user.c: 170: {
   782                           ;user.c: 171: ADCON0 = sensorLocation[j];
   783  001886  0E01               	movlw	low _sensorLocation
   784  001888  0100               	movlb	0	; () banked
   785  00188A  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   786  00188C  6EF6               	movwf	tblptrl,c
   787  00188E  0E10               	movlw	high _sensorLocation
   788  001890  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   789  001892  6EF7               	movwf	tblptrh,c
   790  001894                     	if	0	;There are less than 3 active tblptr bytes
   791  001894                     	endif
   792  001894  0008               	tblrd		*
   793  001896  CFF5 FFC2          	movff	tablat,4034	;volatile
   794                           
   795                           ; BSR set to: 0
   796                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   797  00189A  82C2               	bsf	4034,1,c	;volatile
   798                           
   799                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   800  00189C  D000               	goto	l309
   801  00189E                     l309:
   802                           
   803                           ; BSR set to: 0
   804  00189E  B2C2               	btfsc	4034,1,c	;volatile
   805  0018A0  D7FE               	goto	l309
   806                           
   807                           ; BSR set to: 0
   808                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   809                           
   810                           ; BSR set to: 0
   811  0018A2  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   812  0018A6  0E06               	movlw	6
   813  0018A8  0100               	movlb	0	; () banked
   814  0018AA  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   815  0018AC                     u1755:
   816  0018AC  0100               	movlb	0	; () banked
   817  0018AE  90D8               	bcf	status,0,c
   818  0018B0  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   819  0018B2  0100               	movlb	0	; () banked
   820  0018B4  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   821  0018B6  D7FA               	goto	u1755
   822  0018B8  0100               	movlb	0	; () banked
   823  0018BA  519A               	movf	??_sensorUpdate& (0+255),w,b
   824  0018BC  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   825  0018C0  0100               	movlb	0	; () banked
   826  0018C2  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   827  0018C4  0100               	movlb	0	; () banked
   828  0018C6  90D8               	bcf	status,0,c
   829  0018C8  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   830  0018CA  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   831  0018CC  0100               	movlb	0	; () banked
   832  0018CE  90D8               	bcf	status,0,c
   833  0018D0  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   834  0018D2  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   835  0018D4  0100               	movlb	0	; () banked
   836  0018D6  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   837  0018D8  0E00               	movlw	0
   838  0018DA  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   839  0018DC  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   840  0018E0  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   841  0018E4  0E00               	movlw	0
   842  0018E6  0100               	movlb	0	; () banked
   843  0018E8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   844  0018EA  0E14               	movlw	20
   845  0018EC  6F82               	movwf	___wmul@multiplicand& (0+255),b
   846  0018EE  EC58  F00E         	call	___wmul	;wreg free
   847  0018F2  0EA0               	movlw	low sensorUpdate@sensorTemp
   848  0018F4  0100               	movlb	0	; () banked
   849  0018F6  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   850  0018F8  0E00               	movlw	high sensorUpdate@sensorTemp
   851  0018FA  0100               	movlb	0	; () banked
   852  0018FC  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   853  0018FE  0100               	movlb	0	; () banked
   854  001900  5180               	movf	?___wmul& (0+255),w,b
   855  001902  0100               	movlb	0	; () banked
   856  001904  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   857  001906  0100               	movlb	0	; () banked
   858  001908  5181               	movf	(?___wmul+1)& (0+255),w,b
   859  00190A  0100               	movlb	0	; () banked
   860  00190C  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   861  00190E  90D8               	bcf	status,0,c
   862  001910  0100               	movlb	0	; () banked
   863  001912  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   864  001914  6ED9               	movwf	fsr2l,c
   865  001916  0100               	movlb	0	; () banked
   866  001918  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   867  00191A  6EDA               	movwf	fsr2h,c
   868  00191C  0100               	movlb	0	; () banked
   869  00191E  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   870  001920  26D9               	addwf	fsr2l,f,c
   871  001922  0100               	movlb	0	; () banked
   872  001924  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   873  001926  22DA               	addwfc	fsr2h,f,c
   874  001928  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   875  00192C  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   876                           
   877                           ; BSR set to: 0
   878  001930  0100               	movlb	0	; () banked
   879  001932  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   880  001934  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   881  001936  D79A               	goto	l2038
   882                           
   883                           ; BSR set to: 0
   884  001938  D000               	goto	l2052
   885  00193A                     l2052:
   886                           
   887                           ; BSR set to: 0
   888  00193A  0100               	movlb	0	; () banked
   889  00193C  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   890  00193E  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   891  001940  D783               	goto	l2032
   892                           
   893                           ; BSR set to: 0
   894  001942  D000               	goto	l2056
   895  001944                     l2056:
   896                           
   897                           ; BSR set to: 0
   898                           ;user.c: 177: }
   899                           ;user.c: 178: }
   900                           ;user.c: 181: sensorComputation(sensorTemp,getCorrection);
   901  001944  0EA0               	movlw	low sensorUpdate@sensorTemp
   902  001946  0100               	movlb	0	; () banked
   903  001948  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   904  00194A  0E00               	movlw	high sensorUpdate@sensorTemp
   905  00194C  0100               	movlb	0	; () banked
   906  00194E  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   907  001950  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   908  001954  ECA8  F009         	call	_sensorComputation	;wreg free
   909  001958  0012               	return		;funcret
   910  00195A                     __end_of_sensorUpdate:
   911                           	opt stack 0
   912                           tblptru	equ	0xFF8
   913                           tblptrh	equ	0xFF7
   914                           tblptrl	equ	0xFF6
   915                           tablat	equ	0xFF5
   916                           intcon	equ	0xFF2
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1l	equ	0xFE1
   921                           postinc2	equ	0xFDE
   922                           postdec2	equ	0xFDD
   923                           fsr2h	equ	0xFDA
   924                           fsr2l	equ	0xFD9
   925                           status	equ	0xFD8
   926                           
   927 ;; *************** function _sensorComputation *****************
   928 ;; Defined at:
   929 ;;		line 137 in file "user.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   932 ;;		 -> sensorUpdate@sensorTemp(80), 
   933 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  i               2   24[BANK0 ] int 
   936 ;;  j               2   22[BANK0 ] int 
   937 ;;  sum             2   20[BANK0 ] int 
   938 ;;  min             2   18[BANK0 ] int 
   939 ;;  max             2   16[BANK0 ] int 
   940 ;; Return value:  Size  Location     Type
   941 ;;		None               void
   942 ;; Registers used:
   943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   949 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;Total ram usage:       15 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    5
   956 ;; This function calls:
   957 ;;		_MAX
   958 ;;		_MIN
   959 ;;		___awdiv
   960 ;;		___wmul
   961 ;; This function is called by:
   962 ;;		_sensorUpdate
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text3
   967  001350                     __ptext3:
   968                           	opt stack 0
   969  001350                     _sensorComputation:
   970                           	opt stack 24
   971                           
   972                           ;user.c: 139: int max,min,i,j,sum;
   973                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   974                           
   975                           ;incstack = 0
   976  001350  0E00               	movlw	0
   977  001352  0100               	movlb	0	; () banked
   978  001354  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   979  001356  0E00               	movlw	0
   980  001358  6F98               	movwf	sensorComputation@i& (0+255),b
   981                           
   982                           ; BSR set to: 0
   983  00135A  0100               	movlb	0	; () banked
   984  00135C  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   985  00135E  D00A               	goto	l1984
   986  001360  0100               	movlb	0	; () banked
   987  001362  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   988  001364  E106               	bnz	u1660
   989  001366  0E04               	movlw	4
   990  001368  0100               	movlb	0	; () banked
   991  00136A  5D98               	subwf	sensorComputation@i& (0+255),w,b
   992  00136C  B0D8               	btfsc	status,0,c
   993  00136E  D151               	goto	l302
   994  001370  D001               	goto	l1984
   995  001372                     u1660:
   996                           
   997                           ; BSR set to: 0
   998  001372  D14F               	goto	l302
   999  001374                     l1984:
  1000                           
  1001                           ; BSR set to: 0
  1002                           ;user.c: 141: {
  1003                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1004  001374  0E00               	movlw	0
  1005  001376  0100               	movlb	0	; () banked
  1006  001378  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
  1007  00137A  0E00               	movlw	0
  1008  00137C  6F96               	movwf	sensorComputation@j& (0+255),b
  1009                           
  1010                           ; BSR set to: 0
  1011  00137E  0100               	movlb	0	; () banked
  1012  001380  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1013  001382  D00A               	goto	l1990
  1014  001384  0100               	movlb	0	; () banked
  1015  001386  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1016  001388  E106               	bnz	u1670
  1017  00138A  0E0A               	movlw	10
  1018  00138C  0100               	movlb	0	; () banked
  1019  00138E  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1020  001390  B0D8               	btfsc	status,0,c
  1021  001392  D0D3               	goto	l2000
  1022  001394  D001               	goto	l1990
  1023  001396                     u1670:
  1024                           
  1025                           ; BSR set to: 0
  1026  001396  D0D1               	goto	l2000
  1027  001398                     l1990:
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;user.c: 143: {
  1031                           ;user.c: 144: if(j == 0)
  1032  001398  0100               	movlb	0	; () banked
  1033  00139A  5196               	movf	sensorComputation@j& (0+255),w,b
  1034  00139C  0100               	movlb	0	; () banked
  1035  00139E  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1036  0013A0  A4D8               	btfss	status,2,c
  1037  0013A2  D031               	goto	l1994
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;user.c: 145: {
  1041                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1042  0013A4  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1043  0013A8  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1044  0013AC  0E00               	movlw	0
  1045  0013AE  0100               	movlb	0	; () banked
  1046  0013B0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1047  0013B2  0E14               	movlw	20
  1048  0013B4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1049  0013B6  EC58  F00E         	call	___wmul	;wreg free
  1050  0013BA  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1051  0013BE  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1052  0013C2  0100               	movlb	0	; () banked
  1053  0013C4  5180               	movf	?___wmul& (0+255),w,b
  1054  0013C6  0100               	movlb	0	; () banked
  1055  0013C8  278E               	addwf	??_sensorComputation& (0+255),f,b
  1056  0013CA  0100               	movlb	0	; () banked
  1057  0013CC  5181               	movf	(?___wmul+1)& (0+255),w,b
  1058  0013CE  0100               	movlb	0	; () banked
  1059  0013D0  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1060  0013D2  90D8               	bcf	status,0,c
  1061  0013D4  0100               	movlb	0	; () banked
  1062  0013D6  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1063  0013D8  6ED9               	movwf	fsr2l,c
  1064  0013DA  0100               	movlb	0	; () banked
  1065  0013DC  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1066  0013DE  6EDA               	movwf	fsr2h,c
  1067  0013E0  0100               	movlb	0	; () banked
  1068  0013E2  518E               	movf	??_sensorComputation& (0+255),w,b
  1069  0013E4  26D9               	addwf	fsr2l,f,c
  1070  0013E6  0100               	movlb	0	; () banked
  1071  0013E8  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1072  0013EA  22DA               	addwfc	fsr2h,f,c
  1073  0013EC  CFDE F090          	movff	postinc2,sensorComputation@max
  1074  0013F0  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1075  0013F4  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1076  0013F8  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1077  0013FC  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1078  001400  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1079                           
  1080                           ;user.c: 147: continue;
  1081  001404  D08F               	goto	l1996
  1082  001406                     l1994:
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;user.c: 148: }
  1086                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1087  001406  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1088  00140A  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1089  00140E  0E00               	movlw	0
  1090  001410  0100               	movlb	0	; () banked
  1091  001412  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1092  001414  0E14               	movlw	20
  1093  001416  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1094  001418  EC58  F00E         	call	___wmul	;wreg free
  1095  00141C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1096  001420  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1097  001424  0100               	movlb	0	; () banked
  1098  001426  5180               	movf	?___wmul& (0+255),w,b
  1099  001428  0100               	movlb	0	; () banked
  1100  00142A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1101  00142C  0100               	movlb	0	; () banked
  1102  00142E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1103  001430  0100               	movlb	0	; () banked
  1104  001432  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1105  001434  90D8               	bcf	status,0,c
  1106  001436  0100               	movlb	0	; () banked
  1107  001438  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1108  00143A  6ED9               	movwf	fsr2l,c
  1109  00143C  0100               	movlb	0	; () banked
  1110  00143E  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1111  001440  6EDA               	movwf	fsr2h,c
  1112  001442  0100               	movlb	0	; () banked
  1113  001444  518E               	movf	??_sensorComputation& (0+255),w,b
  1114  001446  26D9               	addwf	fsr2l,f,c
  1115  001448  0100               	movlb	0	; () banked
  1116  00144A  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1117  00144C  22DA               	addwfc	fsr2h,f,c
  1118  00144E  CFDE F086          	movff	postinc2,MIN@a
  1119  001452  CFDD F087          	movff	postdec2,MIN@a+1
  1120  001456  C092  F088         	movff	sensorComputation@min,MIN@b
  1121  00145A  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1122  00145E  EC8F  F00E         	call	_MIN	;wreg free
  1123  001462  C086  F092         	movff	?_MIN,sensorComputation@min
  1124  001466  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1125                           
  1126                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1127  00146A  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1128  00146E  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1129  001472  0E00               	movlw	0
  1130  001474  0100               	movlb	0	; () banked
  1131  001476  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1132  001478  0E14               	movlw	20
  1133  00147A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1134  00147C  EC58  F00E         	call	___wmul	;wreg free
  1135  001480  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1136  001484  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1137  001488  0100               	movlb	0	; () banked
  1138  00148A  5180               	movf	?___wmul& (0+255),w,b
  1139  00148C  0100               	movlb	0	; () banked
  1140  00148E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1141  001490  0100               	movlb	0	; () banked
  1142  001492  5181               	movf	(?___wmul+1)& (0+255),w,b
  1143  001494  0100               	movlb	0	; () banked
  1144  001496  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1145  001498  90D8               	bcf	status,0,c
  1146  00149A  0100               	movlb	0	; () banked
  1147  00149C  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1148  00149E  6ED9               	movwf	fsr2l,c
  1149  0014A0  0100               	movlb	0	; () banked
  1150  0014A2  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1151  0014A4  6EDA               	movwf	fsr2h,c
  1152  0014A6  0100               	movlb	0	; () banked
  1153  0014A8  518E               	movf	??_sensorComputation& (0+255),w,b
  1154  0014AA  26D9               	addwf	fsr2l,f,c
  1155  0014AC  0100               	movlb	0	; () banked
  1156  0014AE  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1157  0014B0  22DA               	addwfc	fsr2h,f,c
  1158  0014B2  CFDE F086          	movff	postinc2,MAX@a
  1159  0014B6  CFDD F087          	movff	postdec2,MAX@a+1
  1160  0014BA  C090  F088         	movff	sensorComputation@max,MAX@b
  1161  0014BE  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1162  0014C2  ECA9  F00E         	call	_MAX	;wreg free
  1163  0014C6  C086  F090         	movff	?_MAX,sensorComputation@max
  1164  0014CA  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1165                           
  1166                           ;user.c: 151: sum += sensorTemp[i][j];
  1167  0014CE  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1168  0014D2  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1169  0014D6  0E00               	movlw	0
  1170  0014D8  0100               	movlb	0	; () banked
  1171  0014DA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1172  0014DC  0E14               	movlw	20
  1173  0014DE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1174  0014E0  EC58  F00E         	call	___wmul	;wreg free
  1175  0014E4  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1176  0014E8  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1177  0014EC  0100               	movlb	0	; () banked
  1178  0014EE  5180               	movf	?___wmul& (0+255),w,b
  1179  0014F0  0100               	movlb	0	; () banked
  1180  0014F2  278E               	addwf	??_sensorComputation& (0+255),f,b
  1181  0014F4  0100               	movlb	0	; () banked
  1182  0014F6  5181               	movf	(?___wmul+1)& (0+255),w,b
  1183  0014F8  0100               	movlb	0	; () banked
  1184  0014FA  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1185  0014FC  90D8               	bcf	status,0,c
  1186  0014FE  0100               	movlb	0	; () banked
  1187  001500  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1188  001502  6ED9               	movwf	fsr2l,c
  1189  001504  0100               	movlb	0	; () banked
  1190  001506  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1191  001508  6EDA               	movwf	fsr2h,c
  1192  00150A  0100               	movlb	0	; () banked
  1193  00150C  518E               	movf	??_sensorComputation& (0+255),w,b
  1194  00150E  26D9               	addwf	fsr2l,f,c
  1195  001510  0100               	movlb	0	; () banked
  1196  001512  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1197  001514  22DA               	addwfc	fsr2h,f,c
  1198  001516  50DE               	movf	postinc2,w,c
  1199  001518  0100               	movlb	0	; () banked
  1200  00151A  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1201  00151C  50DD               	movf	postdec2,w,c
  1202  00151E  0100               	movlb	0	; () banked
  1203  001520  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1204  001522  D000               	goto	l1996
  1205  001524                     l1996:
  1206                           
  1207                           ; BSR set to: 0
  1208  001524  0100               	movlb	0	; () banked
  1209  001526  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1210  001528  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1211                           
  1212                           ; BSR set to: 0
  1213  00152A  0100               	movlb	0	; () banked
  1214  00152C  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1215  00152E  D734               	goto	l1990
  1216  001530  0100               	movlb	0	; () banked
  1217  001532  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1218  001534  E102               	bnz	l2000
  1219  001536  D729               	goto	L2
  1220  001538  D000               	goto	l2000
  1221  00153A                     l2000:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;user.c: 152: }
  1225                           ;user.c: 153: sum = sum - min - max;
  1226  00153A  0100               	movlb	0	; () banked
  1227  00153C  5190               	movf	sensorComputation@max& (0+255),w,b
  1228  00153E  0100               	movlb	0	; () banked
  1229  001540  2592               	addwf	sensorComputation@min& (0+255),w,b
  1230  001542  0100               	movlb	0	; () banked
  1231  001544  6F8E               	movwf	??_sensorComputation& (0+255),b
  1232  001546  0100               	movlb	0	; () banked
  1233  001548  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1234  00154A  0100               	movlb	0	; () banked
  1235  00154C  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1236  00154E  0100               	movlb	0	; () banked
  1237  001550  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1238  001552  0100               	movlb	0	; () banked
  1239  001554  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1240  001556  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1241  001558  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1242  00155A  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1243  00155C  0100               	movlb	0	; () banked
  1244  00155E  5194               	movf	sensorComputation@sum& (0+255),w,b
  1245  001560  0100               	movlb	0	; () banked
  1246  001562  258E               	addwf	??_sensorComputation& (0+255),w,b
  1247  001564  0100               	movlb	0	; () banked
  1248  001566  6F94               	movwf	sensorComputation@sum& (0+255),b
  1249  001568  0100               	movlb	0	; () banked
  1250  00156A  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1251  00156C  0100               	movlb	0	; () banked
  1252  00156E  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1253  001570  0100               	movlb	0	; () banked
  1254  001572  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1255                           
  1256                           ;user.c: 154: if(getCorrection != 1)
  1257  001574  0100               	movlb	0	; () banked
  1258  001576  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1259  001578  B4D8               	btfsc	status,2,c
  1260  00157A  D00C               	goto	l2004
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1264  00157C  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1265  001580  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1266  001584  0E00               	movlw	0
  1267  001586  0100               	movlb	0	; () banked
  1268  001588  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1269  00158A  0E08               	movlw	8
  1270  00158C  6F82               	movwf	___awdiv@divisor& (0+255),b
  1271  00158E  EC92  F00D         	call	___awdiv	;wreg free
  1272  001592  D022               	goto	L3
  1273  001594                     l2004:
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;user.c: 156: else
  1277                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1278  001594  90D8               	bcf	status,0,c
  1279  001596  0100               	movlb	0	; () banked
  1280  001598  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1281  00159A  6ED9               	movwf	fsr2l,c
  1282  00159C  0100               	movlb	0	; () banked
  1283  00159E  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1284  0015A0  6EDA               	movwf	fsr2h,c
  1285  0015A2  0E01               	movlw	low _sensorCorrection
  1286  0015A4  26D9               	addwf	fsr2l,f,c
  1287  0015A6  0E00               	movlw	high _sensorCorrection
  1288  0015A8  22DA               	addwfc	fsr2h,f,c
  1289  0015AA  CFDE F08E          	movff	postinc2,??_sensorComputation
  1290  0015AE  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1291  0015B2  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1292  0015B6  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1293  0015BA  0E00               	movlw	0
  1294  0015BC  0100               	movlb	0	; () banked
  1295  0015BE  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1296  0015C0  0E08               	movlw	8
  1297  0015C2  6F82               	movwf	___awdiv@divisor& (0+255),b
  1298  0015C4  EC92  F00D         	call	___awdiv	;wreg free
  1299  0015C8  0100               	movlb	0	; () banked
  1300  0015CA  518E               	movf	??_sensorComputation& (0+255),w,b
  1301  0015CC  0100               	movlb	0	; () banked
  1302  0015CE  2780               	addwf	?___awdiv& (0+255),f,b
  1303  0015D0  0100               	movlb	0	; () banked
  1304  0015D2  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1305  0015D4  0100               	movlb	0	; () banked
  1306  0015D6  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1307  0015D8                     L3:
  1308  0015D8  90D8               	bcf	status,0,c
  1309  0015DA  0100               	movlb	0	; () banked
  1310  0015DC  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1311  0015DE  6ED9               	movwf	fsr2l,c
  1312  0015E0  0100               	movlb	0	; () banked
  1313  0015E2  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1314  0015E4  6EDA               	movwf	fsr2h,c
  1315  0015E6  0E09               	movlw	low _sensorValue
  1316  0015E8  26D9               	addwf	fsr2l,f,c
  1317  0015EA  0E00               	movlw	high _sensorValue
  1318  0015EC  22DA               	addwfc	fsr2h,f,c
  1319  0015EE  0100               	movlb	0	; () banked
  1320  0015F0  C080  FFDE         	movff	?___awdiv,postinc2
  1321  0015F4  0100               	movlb	0	; () banked
  1322  0015F6  C081  FFDD         	movff	?___awdiv+1,postdec2
  1323  0015FA  D000               	goto	l2006
  1324  0015FC                     l2006:
  1325                           
  1326                           ; BSR set to: 0
  1327  0015FC  0100               	movlb	0	; () banked
  1328  0015FE  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1329  001600  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1330                           
  1331                           ; BSR set to: 0
  1332  001602  0100               	movlb	0	; () banked
  1333  001604  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1334  001606  D6B6               	goto	l1984
  1335  001608  0100               	movlb	0	; () banked
  1336  00160A  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1337  00160C  E102               	bnz	l302
  1338  00160E  D6AB               	goto	L4
  1339  001610  D000               	goto	l302
  1340  001612                     l302:
  1341                           
  1342                           ; BSR set to: 0
  1343  001612  0012               	return		;funcret
  1344  001614                     __end_of_sensorComputation:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           intcon	equ	0xFF2
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           postinc2	equ	0xFDE
  1356                           postdec2	equ	0xFDD
  1357                           fsr2h	equ	0xFDA
  1358                           fsr2l	equ	0xFD9
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function ___wmul *****************
  1362 ;; Defined at:
  1363 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1366 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  product         2    4[BANK0 ] unsigned int 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  2    0[BANK0 ] unsigned int 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0, prodl, prodh
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;Total ram usage:        6 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    4
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_sensorComputation
  1389 ;;		_sensorUpdate
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text4
  1394  001CB0                     __ptext4:
  1395                           	opt stack 0
  1396  001CB0                     ___wmul:
  1397                           	opt stack 24
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;incstack = 0
  1401  001CB0  0100               	movlb	0	; () banked
  1402  001CB2  5180               	movf	___wmul@multiplier& (0+255),w,b
  1403  001CB4  0100               	movlb	0	; () banked
  1404  001CB6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1405  001CB8  CFF3 F084          	movff	prodl,___wmul@product
  1406  001CBC  CFF4 F085          	movff	prodh,___wmul@product+1
  1407  001CC0  0100               	movlb	0	; () banked
  1408  001CC2  5180               	movf	___wmul@multiplier& (0+255),w,b
  1409  001CC4  0100               	movlb	0	; () banked
  1410  001CC6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1411  001CC8  50F3               	movf	prodl,w,c
  1412  001CCA  0100               	movlb	0	; () banked
  1413  001CCC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1414  001CCE  0100               	movlb	0	; () banked
  1415  001CD0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1416  001CD2  0100               	movlb	0	; () banked
  1417  001CD4  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1418  001CD6  50F3               	movf	prodl,w,c
  1419  001CD8  0100               	movlb	0	; () banked
  1420  001CDA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1421                           
  1422                           ; BSR set to: 0
  1423  001CDC  C084  F080         	movff	___wmul@product,?___wmul
  1424  001CE0  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1425  001CE4  D000               	goto	l323
  1426  001CE6                     l323:
  1427                           
  1428                           ; BSR set to: 0
  1429  001CE6  0012               	return		;funcret
  1430  001CE8                     __end_of___wmul:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           prodh	equ	0xFF4
  1437                           prodl	equ	0xFF3
  1438                           intcon	equ	0xFF2
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           postinc2	equ	0xFDE
  1444                           postdec2	equ	0xFDD
  1445                           fsr2h	equ	0xFDA
  1446                           fsr2l	equ	0xFD9
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function ___awdiv *****************
  1450 ;; Defined at:
  1451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  dividend        2    0[BANK0 ] int 
  1454 ;;  divisor         2    2[BANK0 ] int 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  quotient        2    6[BANK0 ] int 
  1457 ;;  sign            1    5[BANK0 ] unsigned char 
  1458 ;;  counter         1    4[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    0[BANK0 ] int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:        8 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    4
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_setCorrection
  1479 ;;		_sensorComputation
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text5
  1484  001B24                     __ptext5:
  1485                           	opt stack 0
  1486  001B24                     ___awdiv:
  1487                           	opt stack 25
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;incstack = 0
  1491  001B24  0E00               	movlw	0
  1492  001B26  0100               	movlb	0	; () banked
  1493  001B28  6F85               	movwf	___awdiv@sign& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496  001B2A  0100               	movlb	0	; () banked
  1497  001B2C  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1498  001B2E  D009               	goto	l1926
  1499                           
  1500                           ; BSR set to: 0
  1501  001B30  0100               	movlb	0	; () banked
  1502  001B32  6D82               	negf	___awdiv@divisor& (0+255),b
  1503  001B34  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1504  001B36  B0D8               	btfsc	status,0,c
  1505  001B38  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  001B3A  0E01               	movlw	1
  1509  001B3C  0100               	movlb	0	; () banked
  1510  001B3E  6F85               	movwf	___awdiv@sign& (0+255),b
  1511  001B40  D000               	goto	l1926
  1512  001B42                     l1926:
  1513                           
  1514                           ; BSR set to: 0
  1515  001B42  0100               	movlb	0	; () banked
  1516  001B44  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1517  001B46  D009               	goto	l1932
  1518                           
  1519                           ; BSR set to: 0
  1520  001B48  0100               	movlb	0	; () banked
  1521  001B4A  6D80               	negf	___awdiv@dividend& (0+255),b
  1522  001B4C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1523  001B4E  B0D8               	btfsc	status,0,c
  1524  001B50  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1525                           
  1526                           ; BSR set to: 0
  1527  001B52  0E01               	movlw	1
  1528  001B54  0100               	movlb	0	; () banked
  1529  001B56  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1530  001B58  D000               	goto	l1932
  1531  001B5A                     l1932:
  1532                           
  1533                           ; BSR set to: 0
  1534  001B5A  0E00               	movlw	0
  1535  001B5C  0100               	movlb	0	; () banked
  1536  001B5E  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1537  001B60  0E00               	movlw	0
  1538  001B62  6F86               	movwf	___awdiv@quotient& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541  001B64  0100               	movlb	0	; () banked
  1542  001B66  5182               	movf	___awdiv@divisor& (0+255),w,b
  1543  001B68  0100               	movlb	0	; () banked
  1544  001B6A  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1545  001B6C  B4D8               	btfsc	status,2,c
  1546  001B6E  D031               	goto	l1954
  1547                           
  1548                           ; BSR set to: 0
  1549  001B70  0E01               	movlw	1
  1550  001B72  0100               	movlb	0	; () banked
  1551  001B74  6F84               	movwf	___awdiv@counter& (0+255),b
  1552  001B76  D007               	goto	l1940
  1553  001B78                     l1938:
  1554                           
  1555                           ; BSR set to: 0
  1556  001B78  0100               	movlb	0	; () banked
  1557  001B7A  90D8               	bcf	status,0,c
  1558  001B7C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1559  001B7E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1560  001B80  0100               	movlb	0	; () banked
  1561  001B82  2B84               	incf	___awdiv@counter& (0+255),f,b
  1562  001B84  D000               	goto	l1940
  1563  001B86                     l1940:
  1564                           
  1565                           ; BSR set to: 0
  1566  001B86  0100               	movlb	0	; () banked
  1567  001B88  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1568  001B8A  D002               	goto	l1942
  1569  001B8C  D7F5               	goto	l1938
  1570                           
  1571                           ; BSR set to: 0
  1572  001B8E  D000               	goto	l1942
  1573  001B90                     l1942:
  1574                           
  1575                           ; BSR set to: 0
  1576  001B90  0100               	movlb	0	; () banked
  1577  001B92  90D8               	bcf	status,0,c
  1578  001B94  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1579  001B96  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1580                           
  1581                           ; BSR set to: 0
  1582  001B98  0100               	movlb	0	; () banked
  1583  001B9A  5182               	movf	___awdiv@divisor& (0+255),w,b
  1584  001B9C  0100               	movlb	0	; () banked
  1585  001B9E  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1586  001BA0  0100               	movlb	0	; () banked
  1587  001BA2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1588  001BA4  0100               	movlb	0	; () banked
  1589  001BA6  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1590  001BA8  A0D8               	btfss	status,0,c
  1591  001BAA  D00B               	goto	l1950
  1592                           
  1593                           ; BSR set to: 0
  1594  001BAC  0100               	movlb	0	; () banked
  1595  001BAE  5182               	movf	___awdiv@divisor& (0+255),w,b
  1596  001BB0  0100               	movlb	0	; () banked
  1597  001BB2  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1598  001BB4  0100               	movlb	0	; () banked
  1599  001BB6  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1600  001BB8  0100               	movlb	0	; () banked
  1601  001BBA  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1602                           
  1603                           ; BSR set to: 0
  1604  001BBC  0100               	movlb	0	; () banked
  1605  001BBE  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1606  001BC0  D000               	goto	l1950
  1607  001BC2                     l1950:
  1608                           
  1609                           ; BSR set to: 0
  1610  001BC2  0100               	movlb	0	; () banked
  1611  001BC4  90D8               	bcf	status,0,c
  1612  001BC6  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1613  001BC8  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 0
  1616  001BCA  0100               	movlb	0	; () banked
  1617  001BCC  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1618  001BCE  D7E0               	goto	l1942
  1619                           
  1620                           ; BSR set to: 0
  1621  001BD0  D000               	goto	l1954
  1622  001BD2                     l1954:
  1623                           
  1624                           ; BSR set to: 0
  1625  001BD2  0100               	movlb	0	; () banked
  1626  001BD4  5185               	movf	___awdiv@sign& (0+255),w,b
  1627  001BD6  0100               	movlb	0	; () banked
  1628  001BD8  B4D8               	btfsc	status,2,c
  1629  001BDA  D006               	goto	l1958
  1630                           
  1631                           ; BSR set to: 0
  1632  001BDC  0100               	movlb	0	; () banked
  1633  001BDE  6D86               	negf	___awdiv@quotient& (0+255),b
  1634  001BE0  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1635  001BE2  B0D8               	btfsc	status,0,c
  1636  001BE4  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1637  001BE6  D000               	goto	l1958
  1638  001BE8                     l1958:
  1639                           
  1640                           ; BSR set to: 0
  1641  001BE8  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1642  001BEC  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1643  001BF0  D000               	goto	l516
  1644  001BF2                     l516:
  1645                           
  1646                           ; BSR set to: 0
  1647  001BF2  0012               	return		;funcret
  1648  001BF4                     __end_of___awdiv:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           intcon	equ	0xFF2
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1l	equ	0xFE1
  1661                           postinc2	equ	0xFDE
  1662                           postdec2	equ	0xFDD
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _MIN *****************
  1668 ;; Defined at:
  1669 ;;		line 185 in file "user.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  a               2    6[BANK0 ] int 
  1672 ;;  b               2    8[BANK0 ] int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2    6[BANK0 ] int 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1684 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;Total ram usage:        5 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    4
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_sensorComputation
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text6
  1699  001D1E                     __ptext6:
  1700                           	opt stack 0
  1701  001D1E                     _MIN:
  1702                           	opt stack 24
  1703                           
  1704                           ;user.c: 187: if(a>b) return b;
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;incstack = 0
  1708  001D1E  0100               	movlb	0	; () banked
  1709  001D20  5186               	movf	MIN@a& (0+255),w,b
  1710  001D22  0100               	movlb	0	; () banked
  1711  001D24  5D88               	subwf	MIN@b& (0+255),w,b
  1712  001D26  0100               	movlb	0	; () banked
  1713  001D28  5189               	movf	(MIN@b+1)& (0+255),w,b
  1714  001D2A  0A80               	xorlw	128
  1715  001D2C  0100               	movlb	0	; () banked
  1716  001D2E  6F8A               	movwf	??_MIN& (0+255),b
  1717  001D30  0100               	movlb	0	; () banked
  1718  001D32  5187               	movf	(MIN@a+1)& (0+255),w,b
  1719  001D34  0A80               	xorlw	128
  1720  001D36  0100               	movlb	0	; () banked
  1721  001D38  598A               	subwfb	??_MIN& (0+255),w,b
  1722  001D3A  B0D8               	btfsc	status,0,c
  1723  001D3C  D005               	goto	l315
  1724                           
  1725                           ; BSR set to: 0
  1726  001D3E  C088  F086         	movff	MIN@b,?_MIN
  1727  001D42  C089  F087         	movff	MIN@b+1,?_MIN+1
  1728  001D46  D004               	goto	l316
  1729  001D48                     l315:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;user.c: 188: return a;
  1733  001D48  C086  F086         	movff	MIN@a,?_MIN
  1734  001D4C  C087  F087         	movff	MIN@a+1,?_MIN+1
  1735  001D50                     l316:
  1736                           
  1737                           ; BSR set to: 0
  1738  001D50  0012               	return		;funcret
  1739  001D52                     __end_of_MIN:
  1740                           	opt stack 0
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           prodh	equ	0xFF4
  1746                           prodl	equ	0xFF3
  1747                           intcon	equ	0xFF2
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1l	equ	0xFE1
  1752                           postinc2	equ	0xFDE
  1753                           postdec2	equ	0xFDD
  1754                           fsr2h	equ	0xFDA
  1755                           fsr2l	equ	0xFD9
  1756                           status	equ	0xFD8
  1757                           
  1758 ;; *************** function _MAX *****************
  1759 ;; Defined at:
  1760 ;;		line 191 in file "user.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;  a               2    6[BANK0 ] int 
  1763 ;;  b               2    8[BANK0 ] int 
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  2    6[BANK0 ] int 
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1778 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1779 ;;Total ram usage:        5 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; Hardware stack levels required when called:    4
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_sensorComputation
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text7
  1790  001D52                     __ptext7:
  1791                           	opt stack 0
  1792  001D52                     _MAX:
  1793                           	opt stack 24
  1794                           
  1795                           ;user.c: 193: if(a>b) return a;
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;incstack = 0
  1799  001D52  0100               	movlb	0	; () banked
  1800  001D54  5186               	movf	MAX@a& (0+255),w,b
  1801  001D56  0100               	movlb	0	; () banked
  1802  001D58  5D88               	subwf	MAX@b& (0+255),w,b
  1803  001D5A  0100               	movlb	0	; () banked
  1804  001D5C  5189               	movf	(MAX@b+1)& (0+255),w,b
  1805  001D5E  0A80               	xorlw	128
  1806  001D60  0100               	movlb	0	; () banked
  1807  001D62  6F8A               	movwf	??_MAX& (0+255),b
  1808  001D64  0100               	movlb	0	; () banked
  1809  001D66  5187               	movf	(MAX@a+1)& (0+255),w,b
  1810  001D68  0A80               	xorlw	128
  1811  001D6A  0100               	movlb	0	; () banked
  1812  001D6C  598A               	subwfb	??_MAX& (0+255),w,b
  1813  001D6E  B0D8               	btfsc	status,0,c
  1814  001D70  D005               	goto	l319
  1815                           
  1816                           ; BSR set to: 0
  1817  001D72  C086  F086         	movff	MAX@a,?_MAX
  1818  001D76  C087  F087         	movff	MAX@a+1,?_MAX+1
  1819  001D7A  D004               	goto	l320
  1820  001D7C                     l319:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;user.c: 194: return b;
  1824  001D7C  C088  F086         	movff	MAX@b,?_MAX
  1825  001D80  C089  F087         	movff	MAX@b+1,?_MAX+1
  1826  001D84                     l320:
  1827                           
  1828                           ; BSR set to: 0
  1829  001D84  0012               	return		;funcret
  1830  001D86                     __end_of_MAX:
  1831                           	opt stack 0
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           prodh	equ	0xFF4
  1837                           prodl	equ	0xFF3
  1838                           intcon	equ	0xFF2
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _InitApp *****************
  1850 ;; Defined at:
  1851 ;;		line 35 in file "user.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    5
  1872 ;; This function calls:
  1873 ;;		_AlgorithmSelection
  1874 ;;		_delay
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text8
  1881  001C38                     __ptext8:
  1882                           	opt stack 0
  1883  001C38                     _InitApp:
  1884                           	opt stack 25
  1885                           
  1886                           ;user.c: 39: TRISC = 0;
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;incstack = 0
  1890  001C38  0E00               	movlw	0
  1891  001C3A  6E94               	movwf	3988,c	;volatile
  1892                           
  1893                           ;user.c: 43: TRISEbits.TRISE1=1;
  1894  001C3C  8296               	bsf	3990,1,c	;volatile
  1895                           
  1896                           ;user.c: 45: TRISEbits.TRISE2=1;
  1897  001C3E  8496               	bsf	3990,2,c	;volatile
  1898                           
  1899                           ;user.c: 47: TRISBbits.RB1=1;
  1900  001C40  8293               	bsf	3987,1,c	;volatile
  1901                           
  1902                           ;user.c: 49: TRISBbits.RB0=1;
  1903  001C42  8093               	bsf	3987,0,c	;volatile
  1904                           
  1905                           ;user.c: 52: TRISBbits.RB3=1;
  1906  001C44  8693               	bsf	3987,3,c	;volatile
  1907                           
  1908                           ;user.c: 54: TRISBbits.RB2=1;
  1909  001C46  8493               	bsf	3987,2,c	;volatile
  1910                           
  1911                           ;user.c: 58: ADCON1 =0b00000001;
  1912  001C48  0E01               	movlw	1
  1913  001C4A  6EC1               	movwf	4033,c	;volatile
  1914                           
  1915                           ;user.c: 63: ADCON2=0b00001010;
  1916  001C4C  0E0A               	movlw	10
  1917  001C4E  6EC0               	movwf	4032,c	;volatile
  1918                           
  1919                           ;user.c: 68: ADCON0=0b00101011;
  1920  001C50  0E2B               	movlw	43
  1921  001C52  6EC2               	movwf	4034,c	;volatile
  1922                           
  1923                           ;user.c: 77: T0CON = 0b11000100;
  1924  001C54  0EC4               	movlw	196
  1925  001C56  6ED5               	movwf	4053,c	;volatile
  1926                           
  1927                           ;user.c: 85: INTCON2 = 0b11110100;
  1928  001C58  0EF4               	movlw	244
  1929  001C5A  6EF1               	movwf	intcon2,c	;volatile
  1930                           
  1931                           ;user.c: 95: INTCON = 0b00100000;
  1932  001C5C  0E20               	movlw	32
  1933  001C5E  6EF2               	movwf	intcon,c	;volatile
  1934                           
  1935                           ;user.c: 105: AlgorithmSelection();
  1936  001C60  ECD4  F00E         	call	_AlgorithmSelection	;wreg free
  1937                           
  1938                           ;user.c: 108: delay(1000);
  1939  001C64  0E03               	movlw	3
  1940  001C66  0100               	movlb	0	; () banked
  1941  001C68  6F81               	movwf	(delay@ms+1)& (0+255),b
  1942  001C6A  0EE8               	movlw	232
  1943  001C6C  6F80               	movwf	delay@ms& (0+255),b
  1944  001C6E  ECFA  F00D         	call	_delay	;wreg free
  1945  001C72  0012               	return		;funcret
  1946  001C74                     __end_of_InitApp:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           intcon2	equ	0xFF1
  1956                           postinc0	equ	0xFEE
  1957                           wreg	equ	0xFE8
  1958                           postdec1	equ	0xFE5
  1959                           fsr1l	equ	0xFE1
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _delay *****************
  1967 ;; Defined at:
  1968 ;;		line 29 in file "user.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  ms              2    0[BANK0 ] unsigned int 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  x               2    3[BANK0 ] int 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;		None               void
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:        5 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    4
  1989 ;; This function calls:
  1990 ;;		Nothing
  1991 ;; This function is called by:
  1992 ;;		_InitApp
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text9
  1997  001BF4                     __ptext9:
  1998                           	opt stack 0
  1999  001BF4                     _delay:
  2000                           	opt stack 25
  2001                           
  2002                           ;user.c: 30: int x = 0;
  2003                           
  2004                           ;incstack = 0
  2005  001BF4  0E00               	movlw	0
  2006  001BF6  0100               	movlb	0	; () banked
  2007  001BF8  6F84               	movwf	(delay@x+1)& (0+255),b
  2008  001BFA  0E00               	movlw	0
  2009  001BFC  6F83               	movwf	delay@x& (0+255),b
  2010                           
  2011                           ;user.c: 31: for (x = 0; x < ms; x++)
  2012  001BFE  0E00               	movlw	0
  2013  001C00  0100               	movlb	0	; () banked
  2014  001C02  6F84               	movwf	(delay@x+1)& (0+255),b
  2015  001C04  0E00               	movlw	0
  2016  001C06  6F83               	movwf	delay@x& (0+255),b
  2017  001C08  D00C               	goto	l274
  2018  001C0A                     l1964:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2022  001C0A  0E0B               	movlw	11
  2023  001C0C  0100               	movlb	0	; () banked
  2024  001C0E  6F82               	movwf	??_delay& (0+255),b
  2025  001C10  0E62               	movlw	98
  2026  001C12                     u1787:
  2027  001C12  2EE8               	decfsz	wreg,f,c
  2028  001C14  D7FE               	goto	u1787
  2029  001C16  2F82               	decfsz	??_delay& (0+255),f,b
  2030  001C18  D7FC               	goto	u1787
  2031  001C1A  D000               	nop2	
  2032  001C1C  0100               	movlb	0	; () banked
  2033  001C1E  4B83               	infsnz	delay@x& (0+255),f,b
  2034  001C20  2B84               	incf	(delay@x+1)& (0+255),f,b
  2035  001C22                     l274:
  2036                           
  2037                           ; BSR set to: 0
  2038  001C22  0100               	movlb	0	; () banked
  2039  001C24  5180               	movf	delay@ms& (0+255),w,b
  2040  001C26  0100               	movlb	0	; () banked
  2041  001C28  5D83               	subwf	delay@x& (0+255),w,b
  2042  001C2A  0100               	movlb	0	; () banked
  2043  001C2C  5181               	movf	(delay@ms+1)& (0+255),w,b
  2044  001C2E  0100               	movlb	0	; () banked
  2045  001C30  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2046  001C32  A0D8               	btfss	status,0,c
  2047  001C34  D7EA               	goto	l1964
  2048                           
  2049                           ; BSR set to: 0
  2050                           
  2051                           ; BSR set to: 0
  2052  001C36  0012               	return		;funcret
  2053  001C38                     __end_of_delay:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           intcon	equ	0xFF2
  2062                           intcon2	equ	0xFF1
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           postdec1	equ	0xFE5
  2066                           fsr1l	equ	0xFE1
  2067                           postinc2	equ	0xFDE
  2068                           postdec2	equ	0xFDD
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _AlgorithmSelection *****************
  2074 ;; Defined at:
  2075 ;;		line 111 in file "user.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    4
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_InitApp
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text10
  2104  001DA8                     __ptext10:
  2105                           	opt stack 0
  2106  001DA8                     _AlgorithmSelection:
  2107                           	opt stack 25
  2108                           
  2109                           ;user.c: 113: ADCON0 = 0b00100111;
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;incstack = 0
  2113  001DA8  0E27               	movlw	39
  2114  001DAA  6EC2               	movwf	4034,c	;volatile
  2115                           
  2116                           ;user.c: 115: ADCON0bits.GO_DONE = 1;
  2117  001DAC  82C2               	bsf	4034,1,c	;volatile
  2118                           
  2119                           ;user.c: 116: while(ADCON0bits.GO_DONE != 0);
  2120  001DAE  D000               	goto	l283
  2121  001DB0                     l283:
  2122  001DB0  B2C2               	btfsc	4034,1,c	;volatile
  2123  001DB2  D7FE               	goto	l283
  2124                           
  2125                           ;user.c: 118: if(ADRESL > 0b10000000)
  2126  001DB4  0E80               	movlw	128
  2127  001DB6  64C3               	cpfsgt	4035,c	;volatile
  2128  001DB8  D002               	goto	l1976
  2129                           
  2130                           ;user.c: 119: algorithm = LEFTWALL;
  2131  001DBA  0E00               	movlw	0
  2132  001DBC  D001               	goto	L5
  2133  001DBE                     l1976:
  2134                           
  2135                           ;user.c: 120: else
  2136                           ;user.c: 121: algorithm = RIGHTWALL;
  2137  001DBE  0E01               	movlw	1
  2138  001DC0                     L5:
  2139  001DC0  6E2F               	movwf	_algorithm,c
  2140  001DC2  D000               	goto	l288
  2141  001DC4                     l288:
  2142  001DC4  0012               	return		;funcret
  2143  001DC6                     __end_of_AlgorithmSelection:
  2144                           	opt stack 0
  2145                           tblptru	equ	0xFF8
  2146                           tblptrh	equ	0xFF7
  2147                           tblptrl	equ	0xFF6
  2148                           tablat	equ	0xFF5
  2149                           prodh	equ	0xFF4
  2150                           prodl	equ	0xFF3
  2151                           intcon	equ	0xFF2
  2152                           intcon2	equ	0xFF1
  2153                           postinc0	equ	0xFEE
  2154                           wreg	equ	0xFE8
  2155                           postdec1	equ	0xFE5
  2156                           fsr1l	equ	0xFE1
  2157                           postinc2	equ	0xFDE
  2158                           postdec2	equ	0xFDD
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _ConfigureOscillator *****************
  2164 ;; Defined at:
  2165 ;;		line 24 in file "system.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;		None               void
  2172 ;; Registers used:
  2173 ;;		wreg, status,2
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    4
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_main
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text11
  2194  001E28                     __ptext11:
  2195                           	opt stack 0
  2196  001E28                     _ConfigureOscillator:
  2197                           	opt stack 26
  2198                           
  2199                           ;system.c: 29: OSCCON = 0b01111100;
  2200                           
  2201                           ;incstack = 0
  2202  001E28  0E7C               	movlw	124
  2203  001E2A  6ED3               	movwf	4051,c	;volatile
  2204                           
  2205                           ;system.c: 31: OSCTUNE = 0b01001111;
  2206  001E2C  0E4F               	movlw	79
  2207  001E2E  6E9B               	movwf	3995,c	;volatile
  2208  001E30  0012               	return		;funcret
  2209  001E32                     __end_of_ConfigureOscillator:
  2210                           	opt stack 0
  2211                           tblptru	equ	0xFF8
  2212                           tblptrh	equ	0xFF7
  2213                           tblptrl	equ	0xFF6
  2214                           tablat	equ	0xFF5
  2215                           prodh	equ	0xFF4
  2216                           prodl	equ	0xFF3
  2217                           intcon	equ	0xFF2
  2218                           intcon2	equ	0xFF1
  2219                           postinc0	equ	0xFEE
  2220                           wreg	equ	0xFE8
  2221                           postdec1	equ	0xFE5
  2222                           fsr1l	equ	0xFE1
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _low_isr *****************
  2230 ;; Defined at:
  2231 ;;		line 229 in file "interrupts.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;		None               void
  2238 ;; Registers used:
  2239 ;;		None
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;Total ram usage:       17 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		Interrupt level 1
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	intcodelo
  2260  000018                     __pintcodelo:
  2261                           	opt stack 0
  2262  000018                     _low_isr:
  2263                           	opt stack 24
  2264                           
  2265                           ;incstack = 0
  2266  000018  CFD8 F032          	movff	status,??_low_isr
  2267  00001C  CFE8 F033          	movff	wreg,??_low_isr+1
  2268  000020  CFE0 F034          	movff	bsr,??_low_isr+2
  2269  000024  CFFA F035          	movff	pclath,??_low_isr+3
  2270  000028  CFFB F036          	movff	pclatu,??_low_isr+4
  2271  00002C  CFE9 F037          	movff	fsr0l,??_low_isr+5
  2272  000030  CFEA F038          	movff	fsr0h,??_low_isr+6
  2273  000034  CFE1 F039          	movff	fsr1l,??_low_isr+7
  2274  000038  CFE2 F03A          	movff	fsr1h,??_low_isr+8
  2275  00003C  CFD9 F03B          	movff	fsr2l,??_low_isr+9
  2276  000040  CFDA F03C          	movff	fsr2h,??_low_isr+10
  2277  000044  CFF3 F03D          	movff	prodl,??_low_isr+11
  2278  000048  CFF4 F03E          	movff	prodh,??_low_isr+12
  2279  00004C  CFF6 F03F          	movff	tblptrl,??_low_isr+13
  2280  000050  CFF7 F040          	movff	tblptrh,??_low_isr+14
  2281  000054  CFF8 F041          	movff	tblptru,??_low_isr+15
  2282  000058  CFF5 F042          	movff	tablat,??_low_isr+16
  2283  00005C  C042  FFF5         	movff	??_low_isr+16,tablat
  2284  000060  C041  FFF8         	movff	??_low_isr+15,tblptru
  2285  000064  C040  FFF7         	movff	??_low_isr+14,tblptrh
  2286  000068  C03F  FFF6         	movff	??_low_isr+13,tblptrl
  2287  00006C  C03E  FFF4         	movff	??_low_isr+12,prodh
  2288  000070  C03D  FFF3         	movff	??_low_isr+11,prodl
  2289  000074  C03C  FFDA         	movff	??_low_isr+10,fsr2h
  2290  000078  C03B  FFD9         	movff	??_low_isr+9,fsr2l
  2291  00007C  C03A  FFE2         	movff	??_low_isr+8,fsr1h
  2292  000080  C039  FFE1         	movff	??_low_isr+7,fsr1l
  2293  000084  C038  FFEA         	movff	??_low_isr+6,fsr0h
  2294  000088  C037  FFE9         	movff	??_low_isr+5,fsr0l
  2295  00008C  C036  FFFB         	movff	??_low_isr+4,pclatu
  2296  000090  C035  FFFA         	movff	??_low_isr+3,pclath
  2297  000094  C034  FFE0         	movff	??_low_isr+2,bsr
  2298  000098  C033  FFE8         	movff	??_low_isr+1,wreg
  2299  00009C  C032  FFD8         	movff	??_low_isr,status
  2300  0000A0  0010               	retfie	
  2301  0000A2                     __end_of_low_isr:
  2302                           	opt stack 0
  2303                           pclatu	equ	0xFFB
  2304                           pclath	equ	0xFFA
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           intcon	equ	0xFF2
  2312                           intcon2	equ	0xFF1
  2313                           postinc0	equ	0xFEE
  2314                           fsr0h	equ	0xFEA
  2315                           fsr0l	equ	0xFE9
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1h	equ	0xFE2
  2319                           fsr1l	equ	0xFE1
  2320                           bsr	equ	0xFE0
  2321                           postinc2	equ	0xFDE
  2322                           postdec2	equ	0xFDD
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _high_isr *****************
  2328 ;; Defined at:
  2329 ;;		line 98 in file "interrupts.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;		None               void
  2336 ;; Registers used:
  2337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;Total ram usage:       14 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    2
  2350 ;; This function calls:
  2351 ;;		_KController
  2352 ;;		_Reversing
  2353 ;;		_forward
  2354 ;;		_merge
  2355 ;;		_motorCounterUpdate
  2356 ;;		_moveMouse
  2357 ;;		_rotate
  2358 ;; This function is called by:
  2359 ;;		Interrupt level 2
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	intcode
  2364  000008                     __pintcode:
  2365                           	opt stack 0
  2366  000008                     _high_isr:
  2367                           	opt stack 24
  2368                           
  2369                           ;incstack = 0
  2370  000008  CFFA F04B          	movff	pclath,??_high_isr
  2371  00000C  CFFB F04C          	movff	pclatu,??_high_isr+1
  2372  000010  CFE9 F04D          	movff	fsr0l,??_high_isr+2
  2373  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2374                           pclatu	equ	0xFFB
  2375                           pclath	equ	0xFFA
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           intcon	equ	0xFF2
  2383                           intcon2	equ	0xFF1
  2384                           postinc0	equ	0xFEE
  2385                           fsr0h	equ	0xFEA
  2386                           fsr0l	equ	0xFE9
  2387                           wreg	equ	0xFE8
  2388                           postdec1	equ	0xFE5
  2389                           fsr1h	equ	0xFE2
  2390                           fsr1l	equ	0xFE1
  2391                           bsr	equ	0xFE0
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398                           	psect	intcode_body
  2399  001006                     __pintcode_body:
  2400                           	opt stack 24
  2401  001006                     int_func:
  2402                           	opt stack 24
  2403  001006  0006               	pop		; remove dummy address from shadow register refresh
  2404  001008  CFEA F04E          	movff	fsr0h,??_high_isr+3
  2405  00100C  CFE1 F04F          	movff	fsr1l,??_high_isr+4
  2406  001010  CFE2 F050          	movff	fsr1h,??_high_isr+5
  2407  001014  CFD9 F051          	movff	fsr2l,??_high_isr+6
  2408  001018  CFDA F052          	movff	fsr2h,??_high_isr+7
  2409  00101C  CFF3 F053          	movff	prodl,??_high_isr+8
  2410  001020  CFF4 F054          	movff	prodh,??_high_isr+9
  2411  001024  CFF6 F055          	movff	tblptrl,??_high_isr+10
  2412  001028  CFF7 F056          	movff	tblptrh,??_high_isr+11
  2413  00102C  CFF8 F057          	movff	tblptru,??_high_isr+12
  2414  001030  CFF5 F058          	movff	tablat,??_high_isr+13
  2415                           
  2416                           ;interrupts.c: 117: if(INTCONbits.TMR0IF == 1)
  2417  001034  A4F2               	btfss	intcon,2,c	;volatile
  2418  001036  D16F               	goto	i2l105
  2419                           
  2420                           ;interrupts.c: 118: {
  2421                           ;interrupts.c: 119: if(MotorDelayCounter > 2)
  2422  001038  BE18               	btfsc	_MotorDelayCounter+1,7,c
  2423  00103A  D169               	goto	i2l1876
  2424  00103C  5018               	movf	_MotorDelayCounter+1,w,c
  2425  00103E  E104               	bnz	i2u127_40
  2426  001040  0E03               	movlw	3
  2427  001042  5C17               	subwf	_MotorDelayCounter,w,c
  2428  001044  A0D8               	btfss	status,0,c
  2429  001046  D163               	goto	i2l1876
  2430  001048                     i2u127_40:
  2431                           
  2432                           ;interrupts.c: 120: {
  2433                           ;interrupts.c: 122: if (ForwardCounter > 0) {
  2434  001048  BE14               	btfsc	_ForwardCounter+1,7,c
  2435  00104A  D008               	goto	i2l1766
  2436  00104C  5014               	movf	_ForwardCounter+1,w,c
  2437  00104E  E103               	bnz	i2u128_40
  2438  001050  0413               	decf	_ForwardCounter,w,c
  2439  001052  A0D8               	btfss	status,0,c
  2440  001054  D003               	goto	i2l1766
  2441  001056                     i2u128_40:
  2442                           
  2443                           ;interrupts.c: 123: forward();
  2444  001056  ECE3  F00E         	call	_forward	;wreg free
  2445                           
  2446                           ;interrupts.c: 124: }
  2447  00105A  D14D               	goto	i2l1874
  2448  00105C                     i2l1766:
  2449                           
  2450                           ;interrupts.c: 125: else if (ReverseCounter > 0)
  2451  00105C  BE1C               	btfsc	_ReverseCounter+1,7,c
  2452  00105E  D008               	goto	i2l1770
  2453  001060  501C               	movf	_ReverseCounter+1,w,c
  2454  001062  E103               	bnz	i2u129_40
  2455  001064  041B               	decf	_ReverseCounter,w,c
  2456  001066  A0D8               	btfss	status,0,c
  2457  001068  D003               	goto	i2l1770
  2458  00106A                     i2u129_40:
  2459                           
  2460                           ;interrupts.c: 126: Reversing();
  2461  00106A  ECF1  F00E         	call	_Reversing	;wreg free
  2462  00106E  D143               	goto	i2l1874
  2463  001070                     i2l1770:
  2464                           
  2465                           ;interrupts.c: 127: else if(RotateCounter > 0)
  2466  001070  BE1E               	btfsc	_RotateCounter+1,7,c
  2467  001072  D020               	goto	i2l1782
  2468  001074  501E               	movf	_RotateCounter+1,w,c
  2469  001076  E103               	bnz	i2u130_40
  2470  001078  041D               	decf	_RotateCounter,w,c
  2471  00107A  A0D8               	btfss	status,0,c
  2472  00107C  D01B               	goto	i2l1782
  2473  00107E                     i2u130_40:
  2474                           
  2475                           ;interrupts.c: 128: {
  2476                           ;interrupts.c: 130: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2477  00107E  BE0E               	btfsc	_sensorValue+5,7,c
  2478  001080  D006               	goto	i2l1774
  2479  001082  0E21               	movlw	33
  2480  001084  5C0D               	subwf	_sensorValue+4,w,c
  2481  001086  0E03               	movlw	3
  2482  001088  580E               	subwfb	_sensorValue+5,w,c
  2483  00108A  B0D8               	btfsc	status,0,c
  2484  00108C  D008               	goto	i2l1776
  2485  00108E                     i2l1774:
  2486  00108E  BE10               	btfsc	_sensorValue+7,7,c
  2487  001090  D00D               	goto	i2l1780
  2488  001092  0E21               	movlw	33
  2489  001094  5C0F               	subwf	_sensorValue+6,w,c
  2490  001096  0E03               	movlw	3
  2491  001098  5810               	subwfb	_sensorValue+7,w,c
  2492  00109A  A0D8               	btfss	status,0,c
  2493  00109C  D007               	goto	i2l1780
  2494  00109E                     i2l1776:
  2495                           
  2496                           ;interrupts.c: 131: ReverseCounter = 15;
  2497  00109E  0E00               	movlw	0
  2498  0010A0  6E1C               	movwf	_ReverseCounter+1,c
  2499  0010A2  0E0F               	movlw	15
  2500  0010A4  6E1B               	movwf	_ReverseCounter,c
  2501                           
  2502                           ;interrupts.c: 132: Reversing();
  2503  0010A6  ECF1  F00E         	call	_Reversing	;wreg free
  2504                           
  2505                           ;interrupts.c: 133: } else {
  2506  0010AA  D125               	goto	i2l1874
  2507  0010AC                     i2l1780:
  2508                           
  2509                           ;interrupts.c: 134: rotate(rotatingSide);
  2510  0010AC  5031               	movf	_rotatingSide,w,c
  2511  0010AE  EC3A  F00E         	call	_rotate
  2512                           
  2513                           ;interrupts.c: 135: }
  2514                           ;interrupts.c: 136: }
  2515  0010B2  D121               	goto	i2l1874
  2516  0010B4                     i2l1782:
  2517                           
  2518                           ;interrupts.c: 137: else if (sensorValue[0] < 95 && TurnLeft > 95 && algorithm == LEFTWA
      +                          LL)
  2519  0010B4  BE0A               	btfsc	_sensorValue+1,7,c
  2520  0010B6  D006               	goto	i2l1784
  2521  0010B8  500A               	movf	_sensorValue+1,w,c
  2522  0010BA  E122               	bnz	i2l1798
  2523  0010BC  0E5F               	movlw	95
  2524  0010BE  5C09               	subwf	_sensorValue,w,c
  2525  0010C0  B0D8               	btfsc	status,0,c
  2526  0010C2  D01E               	goto	i2l1798
  2527  0010C4                     i2l1784:
  2528  0010C4  BE5A               	btfsc	_TurnLeft+1,7,c
  2529  0010C6  D01C               	goto	i2l1798
  2530  0010C8  505A               	movf	_TurnLeft+1,w,c
  2531  0010CA  E104               	bnz	i2u134_40
  2532  0010CC  0E60               	movlw	96
  2533  0010CE  5C59               	subwf	_TurnLeft,w,c
  2534  0010D0  A0D8               	btfss	status,0,c
  2535  0010D2  D016               	goto	i2l1798
  2536  0010D4                     i2u134_40:
  2537  0010D4  502F               	movf	_algorithm,w,c
  2538  0010D6  A4D8               	btfss	status,2,c
  2539  0010D8  D013               	goto	i2l1798
  2540                           
  2541                           ;interrupts.c: 138: {
  2542                           ;interrupts.c: 139: TurnLeft = sensorValue[0];
  2543  0010DA  C009  F059         	movff	_sensorValue,_TurnLeft
  2544  0010DE  C00A  F05A         	movff	_sensorValue+1,_TurnLeft+1
  2545                           
  2546                           ;interrupts.c: 140: if(justTurned == 0) {
  2547  0010E2  5030               	movf	_justTurned,w,c
  2548  0010E4  A4D8               	btfss	status,2,c
  2549  0010E6  D004               	goto	i2l1794
  2550                           
  2551                           ;interrupts.c: 141: ForwardCounter = 420;
  2552  0010E8  0E01               	movlw	1
  2553  0010EA  6E14               	movwf	_ForwardCounter+1,c
  2554  0010EC  0EA4               	movlw	164
  2555  0010EE  D003               	goto	L6
  2556  0010F0                     i2l1794:
  2557                           
  2558                           ;interrupts.c: 143: ForwardCounter = 400;
  2559  0010F0  0E01               	movlw	1
  2560  0010F2  6E14               	movwf	_ForwardCounter+1,c
  2561  0010F4  0E90               	movlw	144
  2562  0010F6                     L6:
  2563  0010F6  6E13               	movwf	_ForwardCounter,c
  2564  0010F8  D000               	goto	i2l1796
  2565  0010FA                     i2l1796:
  2566                           
  2567                           ;interrupts.c: 144: }
  2568                           ;interrupts.c: 145: forward();
  2569  0010FA  ECE3  F00E         	call	_forward	;wreg free
  2570                           
  2571                           ;interrupts.c: 146: }
  2572  0010FE  D0FB               	goto	i2l1874
  2573  001100                     i2l1798:
  2574                           
  2575                           ;interrupts.c: 147: else if (TurnLeft < 95)
  2576  001100  BE5A               	btfsc	_TurnLeft+1,7,c
  2577  001102  D006               	goto	i2l1800
  2578  001104  505A               	movf	_TurnLeft+1,w,c
  2579  001106  E119               	bnz	i2l1802
  2580  001108  0E5F               	movlw	95
  2581  00110A  5C59               	subwf	_TurnLeft,w,c
  2582  00110C  B0D8               	btfsc	status,0,c
  2583  00110E  D015               	goto	i2l1802
  2584  001110                     i2l1800:
  2585                           
  2586                           ;interrupts.c: 148: {
  2587                           ;interrupts.c: 149: RotateCounter = 167;
  2588  001110  0E00               	movlw	0
  2589  001112  6E1E               	movwf	_RotateCounter+1,c
  2590  001114  0EA7               	movlw	167
  2591  001116  6E1D               	movwf	_RotateCounter,c
  2592                           
  2593                           ;interrupts.c: 150: rotatingSide = LEFT;
  2594  001118  0E00               	movlw	0
  2595  00111A  6E31               	movwf	_rotatingSide,c
  2596                           
  2597                           ;interrupts.c: 151: justTurned = 1;
  2598  00111C  0E01               	movlw	1
  2599  00111E  6E30               	movwf	_justTurned,c
  2600                           
  2601                           ;interrupts.c: 152: TurnRight= 200;
  2602  001120  0E00               	movlw	0
  2603  001122  6E5C               	movwf	_TurnRight+1,c
  2604  001124  0EC8               	movlw	200
  2605  001126  6E5B               	movwf	_TurnRight,c
  2606                           
  2607                           ;interrupts.c: 153: TurnLeft = 300;
  2608  001128  0E01               	movlw	1
  2609  00112A  6E5A               	movwf	_TurnLeft+1,c
  2610  00112C  0E2C               	movlw	44
  2611  00112E  6E59               	movwf	_TurnLeft,c
  2612                           
  2613                           ;interrupts.c: 154: TurnedLeft = 1;
  2614  001130  0E00               	movlw	0
  2615  001132  6E20               	movwf	_TurnedLeft+1,c
  2616  001134  0E01               	movlw	1
  2617  001136  6E1F               	movwf	_TurnedLeft,c
  2618                           
  2619                           ;interrupts.c: 155: }
  2620  001138  D0DE               	goto	i2l1874
  2621  00113A                     i2l1802:
  2622                           
  2623                           ;interrupts.c: 158: else if (sensorValue[1] < 91 && algorithm == LEFTWALL)
  2624  00113A  BE0C               	btfsc	_sensorValue+3,7,c
  2625  00113C  D006               	goto	i2l1804
  2626  00113E  500C               	movf	_sensorValue+3,w,c
  2627  001140  E11A               	bnz	i2l1816
  2628  001142  0E5B               	movlw	91
  2629  001144  5C0B               	subwf	_sensorValue+2,w,c
  2630  001146  B0D8               	btfsc	status,0,c
  2631  001148  D016               	goto	i2l1816
  2632  00114A                     i2l1804:
  2633  00114A  502F               	movf	_algorithm,w,c
  2634  00114C  A4D8               	btfss	status,2,c
  2635  00114E  D013               	goto	i2l1816
  2636                           
  2637                           ;interrupts.c: 159: {
  2638                           ;interrupts.c: 160: TurnRight = sensorValue[1];
  2639  001150  C00B  F05B         	movff	_sensorValue+2,_TurnRight
  2640  001154  C00C  F05C         	movff	_sensorValue+3,_TurnRight+1
  2641                           
  2642                           ;interrupts.c: 161: if(justTurned == 0) {
  2643  001158  5030               	movf	_justTurned,w,c
  2644  00115A  A4D8               	btfss	status,2,c
  2645  00115C  D004               	goto	i2l1812
  2646                           
  2647                           ;interrupts.c: 162: ForwardCounter = 450;
  2648  00115E  0E01               	movlw	1
  2649  001160  6E14               	movwf	_ForwardCounter+1,c
  2650  001162  0EC2               	movlw	194
  2651  001164  D003               	goto	L7
  2652  001166                     i2l1812:
  2653                           
  2654                           ;interrupts.c: 164: ForwardCounter = 410;
  2655  001166  0E01               	movlw	1
  2656  001168  6E14               	movwf	_ForwardCounter+1,c
  2657  00116A  0E9A               	movlw	154
  2658  00116C                     L7:
  2659  00116C  6E13               	movwf	_ForwardCounter,c
  2660  00116E  D000               	goto	i2l1814
  2661  001170                     i2l1814:
  2662                           
  2663                           ;interrupts.c: 165: }
  2664                           ;interrupts.c: 166: forward();
  2665  001170  ECE3  F00E         	call	_forward	;wreg free
  2666                           
  2667                           ;interrupts.c: 167: }
  2668  001174  D0C0               	goto	i2l1874
  2669  001176                     i2l1816:
  2670                           
  2671                           ;interrupts.c: 171: else if (TurnRight < 91 && sensorValue[3] > 380)
  2672  001176  BE5C               	btfsc	_TurnRight+1,7,c
  2673  001178  D006               	goto	i2l1818
  2674  00117A  505C               	movf	_TurnRight+1,w,c
  2675  00117C  E121               	bnz	i2l1822
  2676  00117E  0E5B               	movlw	91
  2677  001180  5C5B               	subwf	_TurnRight,w,c
  2678  001182  B0D8               	btfsc	status,0,c
  2679  001184  D01D               	goto	i2l1822
  2680  001186                     i2l1818:
  2681  001186  BE10               	btfsc	_sensorValue+7,7,c
  2682  001188  D01B               	goto	i2l1822
  2683  00118A  0E7D               	movlw	125
  2684  00118C  5C0F               	subwf	_sensorValue+6,w,c
  2685  00118E  0E01               	movlw	1
  2686  001190  5810               	subwfb	_sensorValue+7,w,c
  2687  001192  A0D8               	btfss	status,0,c
  2688  001194  D015               	goto	i2l1822
  2689                           
  2690                           ;interrupts.c: 172: {
  2691                           ;interrupts.c: 173: RotateCounter = 167;
  2692  001196  0E00               	movlw	0
  2693  001198  6E1E               	movwf	_RotateCounter+1,c
  2694  00119A  0EA7               	movlw	167
  2695  00119C  6E1D               	movwf	_RotateCounter,c
  2696                           
  2697                           ;interrupts.c: 174: rotatingSide = RIGHT;
  2698  00119E  0E01               	movlw	1
  2699  0011A0  6E31               	movwf	_rotatingSide,c
  2700                           
  2701                           ;interrupts.c: 175: justTurned = 1;
  2702  0011A2  0E01               	movlw	1
  2703  0011A4  6E30               	movwf	_justTurned,c
  2704                           
  2705                           ;interrupts.c: 176: TurnedRight = 1;
  2706  0011A6  0E00               	movlw	0
  2707  0011A8  6E22               	movwf	_TurnedRight+1,c
  2708  0011AA  0E01               	movlw	1
  2709  0011AC  6E21               	movwf	_TurnedRight,c
  2710                           
  2711                           ;interrupts.c: 177: TurnLeft = 300;
  2712  0011AE  0E01               	movlw	1
  2713  0011B0  6E5A               	movwf	_TurnLeft+1,c
  2714  0011B2  0E2C               	movlw	44
  2715  0011B4  6E59               	movwf	_TurnLeft,c
  2716                           
  2717                           ;interrupts.c: 178: TurnRight = 300;
  2718  0011B6  0E01               	movlw	1
  2719  0011B8  6E5C               	movwf	_TurnRight+1,c
  2720  0011BA  0E2C               	movlw	44
  2721  0011BC  6E5B               	movwf	_TurnRight,c
  2722                           
  2723                           ;interrupts.c: 179: }
  2724  0011BE  D09B               	goto	i2l1874
  2725  0011C0                     i2l1822:
  2726                           
  2727                           ;interrupts.c: 180: else if (TurnRight < 91 && sensorValue[3] < 380) {
  2728  0011C0  BE5C               	btfsc	_TurnRight+1,7,c
  2729  0011C2  D006               	goto	i2l1824
  2730  0011C4  505C               	movf	_TurnRight+1,w,c
  2731  0011C6  E10F               	bnz	i2l1828
  2732  0011C8  0E5B               	movlw	91
  2733  0011CA  5C5B               	subwf	_TurnRight,w,c
  2734  0011CC  B0D8               	btfsc	status,0,c
  2735  0011CE  D00B               	goto	i2l1828
  2736  0011D0                     i2l1824:
  2737  0011D0  BE10               	btfsc	_sensorValue+7,7,c
  2738  0011D2  D006               	goto	i2l1826
  2739  0011D4  0E7C               	movlw	124
  2740  0011D6  5C0F               	subwf	_sensorValue+6,w,c
  2741  0011D8  0E01               	movlw	1
  2742  0011DA  5810               	subwfb	_sensorValue+7,w,c
  2743  0011DC  B0D8               	btfsc	status,0,c
  2744  0011DE  D003               	goto	i2l1828
  2745  0011E0                     i2l1826:
  2746                           
  2747                           ;interrupts.c: 181: KController();
  2748  0011E0  EC0A  F00B         	call	_KController	;wreg free
  2749                           
  2750                           ;interrupts.c: 182: }
  2751  0011E4  D088               	goto	i2l1874
  2752  0011E6                     i2l1828:
  2753                           
  2754                           ;interrupts.c: 183: else if ((sensorValue[0] > 95 && sensorValue[1] > 91 )
  2755                           ;interrupts.c: 184: && (sensorValue[3] > 380) && RotateCounter <= 0)
  2756  0011E6  BE0A               	btfsc	_sensorValue+1,7,c
  2757  0011E8  D03B               	goto	i2l1850
  2758  0011EA  500A               	movf	_sensorValue+1,w,c
  2759  0011EC  E104               	bnz	i2u145_40
  2760  0011EE  0E60               	movlw	96
  2761  0011F0  5C09               	subwf	_sensorValue,w,c
  2762  0011F2  A0D8               	btfss	status,0,c
  2763  0011F4  D035               	goto	i2l1850
  2764  0011F6                     i2u145_40:
  2765  0011F6  BE0C               	btfsc	_sensorValue+3,7,c
  2766  0011F8  D033               	goto	i2l1850
  2767  0011FA  500C               	movf	_sensorValue+3,w,c
  2768  0011FC  E104               	bnz	i2u146_40
  2769  0011FE  0E5C               	movlw	92
  2770  001200  5C0B               	subwf	_sensorValue+2,w,c
  2771  001202  A0D8               	btfss	status,0,c
  2772  001204  D02D               	goto	i2l1850
  2773  001206                     i2u146_40:
  2774  001206  BE10               	btfsc	_sensorValue+7,7,c
  2775  001208  D02B               	goto	i2l1850
  2776  00120A  0E7D               	movlw	125
  2777  00120C  5C0F               	subwf	_sensorValue+6,w,c
  2778  00120E  0E01               	movlw	1
  2779  001210  5810               	subwfb	_sensorValue+7,w,c
  2780  001212  A0D8               	btfss	status,0,c
  2781  001214  D025               	goto	i2l1850
  2782  001216  BE1E               	btfsc	_RotateCounter+1,7,c
  2783  001218  D005               	goto	i2l1836
  2784  00121A  501E               	movf	_RotateCounter+1,w,c
  2785  00121C  E121               	bnz	i2l1850
  2786  00121E  041D               	decf	_RotateCounter,w,c
  2787  001220  B0D8               	btfsc	status,0,c
  2788  001222  D01E               	goto	i2l1850
  2789  001224                     i2l1836:
  2790                           
  2791                           ;interrupts.c: 185: {
  2792                           ;interrupts.c: 186: Deadend = 1;
  2793  001224  0E00               	movlw	0
  2794  001226  6E12               	movwf	_Deadend+1,c
  2795  001228  0E01               	movlw	1
  2796  00122A  6E11               	movwf	_Deadend,c
  2797                           
  2798                           ;interrupts.c: 187: RotateCounter = 167*2;
  2799  00122C  0E01               	movlw	1
  2800  00122E  6E1E               	movwf	_RotateCounter+1,c
  2801  001230  0E4E               	movlw	78
  2802  001232  6E1D               	movwf	_RotateCounter,c
  2803                           
  2804                           ;interrupts.c: 188: rotate(rotatingSide);
  2805  001234  5031               	movf	_rotatingSide,w,c
  2806  001236  EC3A  F00E         	call	_rotate
  2807                           
  2808                           ;interrupts.c: 189: justTurned = 1;
  2809  00123A  0E01               	movlw	1
  2810  00123C  6E30               	movwf	_justTurned,c
  2811                           
  2812                           ;interrupts.c: 190: TurnRight= 200;
  2813  00123E  0E00               	movlw	0
  2814  001240  6E5C               	movwf	_TurnRight+1,c
  2815  001242  0EC8               	movlw	200
  2816  001244  6E5B               	movwf	_TurnRight,c
  2817                           
  2818                           ;interrupts.c: 191: TurnLeft = 300;
  2819  001246  0E01               	movlw	1
  2820  001248  6E5A               	movwf	_TurnLeft+1,c
  2821  00124A  0E2C               	movlw	44
  2822  00124C  6E59               	movwf	_TurnLeft,c
  2823                           
  2824                           ;interrupts.c: 192: TurnedLeft = 0;
  2825  00124E  0E00               	movlw	0
  2826  001250  6E20               	movwf	_TurnedLeft+1,c
  2827  001252  0E00               	movlw	0
  2828  001254  6E1F               	movwf	_TurnedLeft,c
  2829                           
  2830                           ;interrupts.c: 193: TurnedRight = 0;
  2831  001256  0E00               	movlw	0
  2832  001258  6E22               	movwf	_TurnedRight+1,c
  2833  00125A  0E00               	movlw	0
  2834  00125C  6E21               	movwf	_TurnedRight,c
  2835                           
  2836                           ;interrupts.c: 194: }
  2837  00125E  D04B               	goto	i2l1874
  2838  001260                     i2l1850:
  2839                           
  2840                           ;interrupts.c: 195: else if ((sensorValue[0] > 95 && sensorValue[1] > 91))
  2841  001260  BE0A               	btfsc	_sensorValue+1,7,c
  2842  001262  D02C               	goto	i2l1862
  2843  001264  500A               	movf	_sensorValue+1,w,c
  2844  001266  E104               	bnz	i2u149_40
  2845  001268  0E60               	movlw	96
  2846  00126A  5C09               	subwf	_sensorValue,w,c
  2847  00126C  A0D8               	btfss	status,0,c
  2848  00126E  D026               	goto	i2l1862
  2849  001270                     i2u149_40:
  2850  001270  BE0C               	btfsc	_sensorValue+3,7,c
  2851  001272  D024               	goto	i2l1862
  2852  001274  500C               	movf	_sensorValue+3,w,c
  2853  001276  E104               	bnz	i2u150_40
  2854  001278  0E5C               	movlw	92
  2855  00127A  5C0B               	subwf	_sensorValue+2,w,c
  2856  00127C  A0D8               	btfss	status,0,c
  2857  00127E  D01E               	goto	i2l1862
  2858  001280                     i2u150_40:
  2859                           
  2860                           ;interrupts.c: 196: {
  2861                           ;interrupts.c: 197: if (sensorValue[3] < 80 || sensorValue[2] < 120){
  2862  001280  BE10               	btfsc	_sensorValue+7,7,c
  2863  001282  D00E               	goto	i2l1858
  2864  001284  5010               	movf	_sensorValue+7,w,c
  2865  001286  E104               	bnz	i2u151_40
  2866  001288  0E50               	movlw	80
  2867  00128A  5C0F               	subwf	_sensorValue+6,w,c
  2868  00128C  A0D8               	btfss	status,0,c
  2869  00128E  D008               	goto	i2l1858
  2870  001290                     i2u151_40:
  2871  001290  BE0E               	btfsc	_sensorValue+5,7,c
  2872  001292  D006               	goto	i2l1858
  2873  001294  500E               	movf	_sensorValue+5,w,c
  2874  001296  E107               	bnz	i2l1860
  2875  001298  0E78               	movlw	120
  2876  00129A  5C0D               	subwf	_sensorValue+4,w,c
  2877  00129C  B0D8               	btfsc	status,0,c
  2878  00129E  D003               	goto	i2l1860
  2879  0012A0                     i2l1858:
  2880                           
  2881                           ;interrupts.c: 198: KController();
  2882  0012A0  EC0A  F00B         	call	_KController	;wreg free
  2883                           
  2884                           ;interrupts.c: 199: }
  2885  0012A4  D028               	goto	i2l1874
  2886  0012A6                     i2l1860:
  2887                           
  2888                           ;interrupts.c: 200: else {
  2889                           ;interrupts.c: 201: motorCounterUpdate(RIGHT,0);
  2890  0012A6  0E00               	movlw	0
  2891  0012A8  6E43               	movwf	motorCounterUpdate@reverse,c
  2892  0012AA  0E01               	movlw	1
  2893  0012AC  ECAD  F00C         	call	_motorCounterUpdate
  2894                           
  2895                           ;interrupts.c: 202: motorCounterUpdate(LEFT,0);
  2896  0012B0  0E00               	movlw	0
  2897  0012B2  6E43               	movwf	motorCounterUpdate@reverse,c
  2898  0012B4  0E00               	movlw	0
  2899  0012B6  ECAD  F00C         	call	_motorCounterUpdate
  2900                           
  2901                           ;interrupts.c: 203: }
  2902                           ;interrupts.c: 204: }
  2903  0012BA  D01D               	goto	i2l1874
  2904  0012BC                     i2l1862:
  2905                           
  2906                           ;interrupts.c: 205: else {
  2907                           ;interrupts.c: 206: motorCounterUpdate(RIGHT,0);
  2908  0012BC  0E00               	movlw	0
  2909  0012BE  6E43               	movwf	motorCounterUpdate@reverse,c
  2910  0012C0  0E01               	movlw	1
  2911  0012C2  ECAD  F00C         	call	_motorCounterUpdate
  2912                           
  2913                           ;interrupts.c: 207: motorCounterUpdate(LEFT,0);
  2914  0012C6  0E00               	movlw	0
  2915  0012C8  6E43               	movwf	motorCounterUpdate@reverse,c
  2916  0012CA  0E00               	movlw	0
  2917  0012CC  ECAD  F00C         	call	_motorCounterUpdate
  2918                           
  2919                           ;interrupts.c: 208: justTurned = 0;
  2920  0012D0  0E00               	movlw	0
  2921  0012D2  6E30               	movwf	_justTurned,c
  2922                           
  2923                           ;interrupts.c: 209: TurnedLeft = 0;
  2924  0012D4  0E00               	movlw	0
  2925  0012D6  6E20               	movwf	_TurnedLeft+1,c
  2926  0012D8  0E00               	movlw	0
  2927  0012DA  6E1F               	movwf	_TurnedLeft,c
  2928                           
  2929                           ;interrupts.c: 210: TurnedRight = 0;
  2930  0012DC  0E00               	movlw	0
  2931  0012DE  6E22               	movwf	_TurnedRight+1,c
  2932  0012E0  0E00               	movlw	0
  2933  0012E2  6E21               	movwf	_TurnedRight,c
  2934                           
  2935                           ;interrupts.c: 211: TurnRight = 200;
  2936  0012E4  0E00               	movlw	0
  2937  0012E6  6E5C               	movwf	_TurnRight+1,c
  2938  0012E8  0EC8               	movlw	200
  2939  0012EA  6E5B               	movwf	_TurnRight,c
  2940                           
  2941                           ;interrupts.c: 212: TurnLeft = 300;
  2942  0012EC  0E01               	movlw	1
  2943  0012EE  6E5A               	movwf	_TurnLeft+1,c
  2944  0012F0  0E2C               	movlw	44
  2945  0012F2  6E59               	movwf	_TurnLeft,c
  2946  0012F4  D000               	goto	i2l1874
  2947  0012F6                     i2l1874:
  2948                           
  2949                           ;interrupts.c: 213: }
  2950                           ;interrupts.c: 214: moveMouse(merge(LMotorCounter,RMotorCounter));
  2951  0012F6  C02E  F043         	movff	_RMotorCounter,merge@right
  2952  0012FA  502D               	movf	_LMotorCounter,w,c
  2953  0012FC  EC0C  F00F         	call	_merge
  2954  001300  EC19  F00F         	call	_moveMouse
  2955                           
  2956                           ;interrupts.c: 215: MotorDelayCounter = 0;
  2957  001304  0E00               	movlw	0
  2958  001306  6E18               	movwf	_MotorDelayCounter+1,c
  2959  001308  0E00               	movlw	0
  2960  00130A  6E17               	movwf	_MotorDelayCounter,c
  2961  00130C  D000               	goto	i2l1876
  2962  00130E                     i2l1876:
  2963                           
  2964                           ;interrupts.c: 217: }
  2965                           ;interrupts.c: 219: MotorDelayCounter++;
  2966  00130E  4A17               	infsnz	_MotorDelayCounter,f,c
  2967  001310  2A18               	incf	_MotorDelayCounter+1,f,c
  2968                           
  2969                           ;interrupts.c: 220: INTCONbits.TMR0IF = 0;
  2970  001312  94F2               	bcf	intcon,2,c	;volatile
  2971  001314  D000               	goto	i2l105
  2972  001316                     i2l105:
  2973  001316  C058  FFF5         	movff	??_high_isr+13,tablat
  2974  00131A  C057  FFF8         	movff	??_high_isr+12,tblptru
  2975  00131E  C056  FFF7         	movff	??_high_isr+11,tblptrh
  2976  001322  C055  FFF6         	movff	??_high_isr+10,tblptrl
  2977  001326  C054  FFF4         	movff	??_high_isr+9,prodh
  2978  00132A  C053  FFF3         	movff	??_high_isr+8,prodl
  2979  00132E  C052  FFDA         	movff	??_high_isr+7,fsr2h
  2980  001332  C051  FFD9         	movff	??_high_isr+6,fsr2l
  2981  001336  C050  FFE2         	movff	??_high_isr+5,fsr1h
  2982  00133A  C04F  FFE1         	movff	??_high_isr+4,fsr1l
  2983  00133E  C04E  FFEA         	movff	??_high_isr+3,fsr0h
  2984  001342  C04D  FFE9         	movff	??_high_isr+2,fsr0l
  2985  001346  C04C  FFFB         	movff	??_high_isr+1,pclatu
  2986  00134A  C04B  FFFA         	movff	??_high_isr,pclath
  2987  00134E  0011               	retfie		f
  2988  001350                     __end_of_high_isr:
  2989                           	opt stack 0
  2990                           pclatu	equ	0xFFB
  2991                           pclath	equ	0xFFA
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           intcon2	equ	0xFF1
  3000                           postinc0	equ	0xFEE
  3001                           fsr0h	equ	0xFEA
  3002                           fsr0l	equ	0xFE9
  3003                           wreg	equ	0xFE8
  3004                           postdec1	equ	0xFE5
  3005                           fsr1h	equ	0xFE2
  3006                           fsr1l	equ	0xFE1
  3007                           bsr	equ	0xFE0
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _rotate *****************
  3015 ;; Defined at:
  3016 ;;		line 418 in file "interrupts.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  side            1    wreg     enum E4145
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  side            1   19[COMRAM] enum E4145
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        1 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    1
  3037 ;; This function calls:
  3038 ;;		_motorCounterUpdate
  3039 ;; This function is called by:
  3040 ;;		_high_isr
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text14
  3045  001C74                     __ptext14:
  3046                           	opt stack 0
  3047  001C74                     _rotate:
  3048                           	opt stack 24
  3049                           
  3050                           ;incstack = 0
  3051                           ;rotate@side stored from wreg
  3052  001C74  6E45               	movwf	rotate@side,c
  3053                           
  3054                           ;interrupts.c: 420: if (side == LEFT){
  3055  001C76  5045               	movf	rotate@side,w,c
  3056  001C78  A4D8               	btfss	status,2,c
  3057  001C7A  D00B               	goto	i2l1608
  3058                           
  3059                           ;interrupts.c: 421: motorCounterUpdate(RIGHT,0);
  3060  001C7C  0E00               	movlw	0
  3061  001C7E  6E43               	movwf	motorCounterUpdate@reverse,c
  3062  001C80  0E01               	movlw	1
  3063  001C82  ECAD  F00C         	call	_motorCounterUpdate
  3064                           
  3065                           ;interrupts.c: 422: motorCounterUpdate(LEFT,1);
  3066  001C86  0E01               	movlw	1
  3067  001C88  6E43               	movwf	motorCounterUpdate@reverse,c
  3068  001C8A  0E00               	movlw	0
  3069  001C8C  ECAD  F00C         	call	_motorCounterUpdate
  3070                           
  3071                           ;interrupts.c: 423: } else {
  3072  001C90  D00B               	goto	i2l1610
  3073  001C92                     i2l1608:
  3074                           
  3075                           ;interrupts.c: 424: motorCounterUpdate(LEFT,0);
  3076  001C92  0E00               	movlw	0
  3077  001C94  6E43               	movwf	motorCounterUpdate@reverse,c
  3078  001C96  0E00               	movlw	0
  3079  001C98  ECAD  F00C         	call	_motorCounterUpdate
  3080                           
  3081                           ;interrupts.c: 425: motorCounterUpdate(RIGHT,1);
  3082  001C9C  0E01               	movlw	1
  3083  001C9E  6E43               	movwf	motorCounterUpdate@reverse,c
  3084  001CA0  0E01               	movlw	1
  3085  001CA2  ECAD  F00C         	call	_motorCounterUpdate
  3086  001CA6  D000               	goto	i2l1610
  3087  001CA8                     i2l1610:
  3088                           
  3089                           ;interrupts.c: 426: }
  3090                           ;interrupts.c: 427: RotateCounter--;
  3091  001CA8  061D               	decf	_RotateCounter,f,c
  3092  001CAA  A0D8               	btfss	status,0,c
  3093  001CAC  061E               	decf	_RotateCounter+1,f,c
  3094  001CAE  0012               	return		;funcret
  3095  001CB0                     __end_of_rotate:
  3096                           	opt stack 0
  3097                           pclatu	equ	0xFFB
  3098                           pclath	equ	0xFFA
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           intcon	equ	0xFF2
  3106                           intcon2	equ	0xFF1
  3107                           postinc0	equ	0xFEE
  3108                           fsr0h	equ	0xFEA
  3109                           fsr0l	equ	0xFE9
  3110                           wreg	equ	0xFE8
  3111                           postdec1	equ	0xFE5
  3112                           fsr1h	equ	0xFE2
  3113                           fsr1l	equ	0xFE1
  3114                           bsr	equ	0xFE0
  3115                           postinc2	equ	0xFDE
  3116                           postdec2	equ	0xFDD
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _forward *****************
  3122 ;; Defined at:
  3123 ;;		line 449 in file "interrupts.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;		None               void
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;Total ram usage:        0 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    1
  3144 ;; This function calls:
  3145 ;;		_motorCounterUpdate
  3146 ;; This function is called by:
  3147 ;;		_high_isr
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text15
  3152  001DC6                     __ptext15:
  3153                           	opt stack 0
  3154  001DC6                     _forward:
  3155                           	opt stack 24
  3156                           
  3157                           ;interrupts.c: 451: motorCounterUpdate(RIGHT,0);
  3158                           
  3159                           ;incstack = 0
  3160  001DC6  0E00               	movlw	0
  3161  001DC8  6E43               	movwf	motorCounterUpdate@reverse,c
  3162  001DCA  0E01               	movlw	1
  3163  001DCC  ECAD  F00C         	call	_motorCounterUpdate
  3164                           
  3165                           ;interrupts.c: 452: motorCounterUpdate(LEFT,0);
  3166  001DD0  0E00               	movlw	0
  3167  001DD2  6E43               	movwf	motorCounterUpdate@reverse,c
  3168  001DD4  0E00               	movlw	0
  3169  001DD6  ECAD  F00C         	call	_motorCounterUpdate
  3170                           
  3171                           ;interrupts.c: 453: ForwardCounter--;
  3172  001DDA  0613               	decf	_ForwardCounter,f,c
  3173  001DDC  A0D8               	btfss	status,0,c
  3174  001DDE  0614               	decf	_ForwardCounter+1,f,c
  3175  001DE0  0012               	return		;funcret
  3176  001DE2                     __end_of_forward:
  3177                           	opt stack 0
  3178                           pclatu	equ	0xFFB
  3179                           pclath	equ	0xFFA
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           prodh	equ	0xFF4
  3185                           prodl	equ	0xFF3
  3186                           intcon	equ	0xFF2
  3187                           intcon2	equ	0xFF1
  3188                           postinc0	equ	0xFEE
  3189                           fsr0h	equ	0xFEA
  3190                           fsr0l	equ	0xFE9
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1h	equ	0xFE2
  3194                           fsr1l	equ	0xFE1
  3195                           bsr	equ	0xFE0
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _Reversing *****************
  3203 ;; Defined at:
  3204 ;;		line 442 in file "interrupts.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;		None               void
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        0 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    1
  3225 ;; This function calls:
  3226 ;;		_motorCounterUpdate
  3227 ;; This function is called by:
  3228 ;;		_high_isr
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text16
  3233  001DE2                     __ptext16:
  3234                           	opt stack 0
  3235  001DE2                     _Reversing:
  3236                           	opt stack 24
  3237                           
  3238                           ;interrupts.c: 444: motorCounterUpdate(RIGHT,1);
  3239                           
  3240                           ;incstack = 0
  3241  001DE2  0E01               	movlw	1
  3242  001DE4  6E43               	movwf	motorCounterUpdate@reverse,c
  3243  001DE6  0E01               	movlw	1
  3244  001DE8  ECAD  F00C         	call	_motorCounterUpdate
  3245                           
  3246                           ;interrupts.c: 445: motorCounterUpdate(LEFT,1);
  3247  001DEC  0E01               	movlw	1
  3248  001DEE  6E43               	movwf	motorCounterUpdate@reverse,c
  3249  001DF0  0E00               	movlw	0
  3250  001DF2  ECAD  F00C         	call	_motorCounterUpdate
  3251                           
  3252                           ;interrupts.c: 446: ReverseCounter--;
  3253  001DF6  061B               	decf	_ReverseCounter,f,c
  3254  001DF8  A0D8               	btfss	status,0,c
  3255  001DFA  061C               	decf	_ReverseCounter+1,f,c
  3256  001DFC  0012               	return		;funcret
  3257  001DFE                     __end_of_Reversing:
  3258                           	opt stack 0
  3259                           pclatu	equ	0xFFB
  3260                           pclath	equ	0xFFA
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           intcon2	equ	0xFF1
  3269                           postinc0	equ	0xFEE
  3270                           fsr0h	equ	0xFEA
  3271                           fsr0l	equ	0xFE9
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1h	equ	0xFE2
  3275                           fsr1l	equ	0xFE1
  3276                           bsr	equ	0xFE0
  3277                           postinc2	equ	0xFDE
  3278                           postdec2	equ	0xFDD
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _KController *****************
  3284 ;; Defined at:
  3285 ;;		line 331 in file "interrupts.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  diff            2   23[COMRAM] int 
  3290 ;;  correctTo       1   22[COMRAM] enum E4145
  3291 ;; Return value:  Size  Location     Type
  3292 ;;		None               void
  3293 ;; Registers used:
  3294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;Total ram usage:        5 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    1
  3307 ;; This function calls:
  3308 ;;		_ABS
  3309 ;;		_merge
  3310 ;;		_motorCounterUpdate
  3311 ;;		_moveMouse
  3312 ;; This function is called by:
  3313 ;;		_high_isr
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text17
  3318  001614                     __ptext17:
  3319                           	opt stack 0
  3320  001614                     _KController:
  3321                           	opt stack 24
  3322                           
  3323                           ;interrupts.c: 333: Side correctTo;
  3324                           ;interrupts.c: 334: int diff = 0;
  3325                           
  3326                           ;incstack = 0
  3327  001614  0E00               	movlw	0
  3328  001616  6E4A               	movwf	KController@diff+1,c
  3329  001618  0E00               	movlw	0
  3330  00161A  6E49               	movwf	KController@diff,c
  3331                           
  3332                           ;interrupts.c: 335: if((sensorValue[0] > 95 && sensorValue[1] > 91))
  3333  00161C  BE0A               	btfsc	_sensorValue+1,7,c
  3334  00161E  D077               	goto	i2l1654
  3335  001620  500A               	movf	_sensorValue+1,w,c
  3336  001622  E104               	bnz	i2u104_40
  3337  001624  0E60               	movlw	96
  3338  001626  5C09               	subwf	_sensorValue,w,c
  3339  001628  A0D8               	btfss	status,0,c
  3340  00162A  D071               	goto	i2l1654
  3341  00162C                     i2u104_40:
  3342  00162C  BE0C               	btfsc	_sensorValue+3,7,c
  3343  00162E  D06F               	goto	i2l1654
  3344  001630  500C               	movf	_sensorValue+3,w,c
  3345  001632  E104               	bnz	i2u105_40
  3346  001634  0E5C               	movlw	92
  3347  001636  5C0B               	subwf	_sensorValue+2,w,c
  3348  001638  A0D8               	btfss	status,0,c
  3349  00163A  D069               	goto	i2l1654
  3350  00163C                     i2u105_40:
  3351                           
  3352                           ;interrupts.c: 336: {
  3353                           ;interrupts.c: 337: diff = ABS(sensorValue[1] - sensorValue[0]);
  3354  00163C  C009  F046         	movff	_sensorValue,??_KController
  3355  001640  C00A  F047         	movff	_sensorValue+1,??_KController+1
  3356  001644  1E46               	comf	??_KController,f,c
  3357  001646  1E47               	comf	??_KController+1,f,c
  3358  001648  4A46               	infsnz	??_KController,f,c
  3359  00164A  2A47               	incf	??_KController+1,f,c
  3360  00164C  500B               	movf	_sensorValue+2,w,c
  3361  00164E  2446               	addwf	??_KController,w,c
  3362  001650  6E43               	movwf	ABS@x,c
  3363  001652  500C               	movf	_sensorValue+3,w,c
  3364  001654  2047               	addwfc	??_KController+1,w,c
  3365  001656  6E44               	movwf	ABS@x+1,c
  3366  001658  ECFF  F00E         	call	_ABS	;wreg free
  3367  00165C  C043  F049         	movff	?_ABS,KController@diff
  3368  001660  C044  F04A         	movff	?_ABS+1,KController@diff+1
  3369                           
  3370                           ;interrupts.c: 339: if(controllerSteps > 0)
  3371  001664  505D               	movf	_controllerSteps,w,c
  3372  001666  B4D8               	btfsc	status,2,c
  3373  001668  D00C               	goto	i2l1628
  3374                           
  3375                           ;interrupts.c: 340: {
  3376                           ;interrupts.c: 341: motorCounterUpdate(RIGHT,0);
  3377  00166A  0E00               	movlw	0
  3378  00166C  6E43               	movwf	motorCounterUpdate@reverse,c
  3379  00166E  0E01               	movlw	1
  3380  001670  ECAD  F00C         	call	_motorCounterUpdate
  3381                           
  3382                           ;interrupts.c: 342: motorCounterUpdate(LEFT,0);
  3383  001674  0E00               	movlw	0
  3384  001676  6E43               	movwf	motorCounterUpdate@reverse,c
  3385  001678  0E00               	movlw	0
  3386  00167A  ECAD  F00C         	call	_motorCounterUpdate
  3387  00167E  D08C               	goto	i2l1670
  3388                           
  3389                           ;interrupts.c: 344: return;
  3390                           
  3391                           ;interrupts.c: 343: controllerSteps--;
  3392  001680  D0DB               	goto	i2l161
  3393  001682                     i2l1628:
  3394                           
  3395                           ;interrupts.c: 345: }
  3396                           ;interrupts.c: 347: if(sensorValue[0] > sensorValue[1])
  3397  001682  5009               	movf	_sensorValue,w,c
  3398  001684  5C0B               	subwf	_sensorValue+2,w,c
  3399  001686  500C               	movf	_sensorValue+3,w,c
  3400  001688  0A80               	xorlw	128
  3401  00168A  6E46               	movwf	??_KController& (0+255),c
  3402  00168C  500A               	movf	_sensorValue+1,w,c
  3403  00168E  0A80               	xorlw	128
  3404  001690  5846               	subwfb	??_KController& (0+255),w,c
  3405  001692  B0D8               	btfsc	status,0,c
  3406  001694  D00F               	goto	i2l1636
  3407                           
  3408                           ;interrupts.c: 348: {
  3409                           ;interrupts.c: 350: correctTo = LEFT;
  3410  001696  0E00               	movlw	0
  3411  001698  6E48               	movwf	KController@correctTo,c
  3412                           
  3413                           ;interrupts.c: 351: motorCounterUpdate(correctTo,0);
  3414  00169A  0E00               	movlw	0
  3415  00169C  6E43               	movwf	motorCounterUpdate@reverse,c
  3416  00169E  5048               	movf	KController@correctTo,w,c
  3417  0016A0  ECAD  F00C         	call	_motorCounterUpdate
  3418                           
  3419                           ;interrupts.c: 352: moveMouse(merge(LMotorCounter,RMotorCounter));
  3420  0016A4  C02E  F043         	movff	_RMotorCounter,merge@right
  3421  0016A8  502D               	movf	_LMotorCounter,w,c
  3422  0016AA  EC0C  F00F         	call	_merge
  3423  0016AE  EC19  F00F         	call	_moveMouse
  3424                           
  3425                           ;interrupts.c: 353: }
  3426  0016B2  D00F               	goto	i2l1642
  3427  0016B4                     i2l1636:
  3428                           
  3429                           ;interrupts.c: 354: else
  3430                           ;interrupts.c: 355: {
  3431                           ;interrupts.c: 357: correctTo = RIGHT;
  3432  0016B4  0E01               	movlw	1
  3433  0016B6  6E48               	movwf	KController@correctTo,c
  3434                           
  3435                           ;interrupts.c: 358: motorCounterUpdate(correctTo,0);
  3436  0016B8  0E00               	movlw	0
  3437  0016BA  6E43               	movwf	motorCounterUpdate@reverse,c
  3438  0016BC  5048               	movf	KController@correctTo,w,c
  3439  0016BE  ECAD  F00C         	call	_motorCounterUpdate
  3440                           
  3441                           ;interrupts.c: 359: moveMouse(merge(LMotorCounter,RMotorCounter));
  3442  0016C2  C02E  F043         	movff	_RMotorCounter,merge@right
  3443  0016C6  502D               	movf	_LMotorCounter,w,c
  3444  0016C8  EC0C  F00F         	call	_merge
  3445  0016CC  EC19  F00F         	call	_moveMouse
  3446  0016D0  D000               	goto	i2l1642
  3447  0016D2                     i2l1642:
  3448                           
  3449                           ;interrupts.c: 360: }
  3450                           ;interrupts.c: 362: if(diff > 80)
  3451  0016D2  BE4A               	btfsc	KController@diff+1,7,c
  3452  0016D4  D008               	goto	i2l1646
  3453  0016D6  504A               	movf	KController@diff+1,w,c
  3454  0016D8  E104               	bnz	i2u108_40
  3455  0016DA  0E51               	movlw	81
  3456  0016DC  5C49               	subwf	KController@diff,w,c
  3457  0016DE  A0D8               	btfss	status,0,c
  3458  0016E0  D002               	goto	i2l1646
  3459  0016E2                     i2u108_40:
  3460                           
  3461                           ;interrupts.c: 363: controllerSteps = 1;
  3462  0016E2  0E01               	movlw	1
  3463  0016E4  D09C               	goto	L12
  3464  0016E6                     i2l1646:
  3465                           
  3466                           ;interrupts.c: 364: else if(diff <= 80 && diff > 30)
  3467  0016E6  BE4A               	btfsc	KController@diff+1,7,c
  3468  0016E8  D006               	goto	i2l1648
  3469  0016EA  504A               	movf	KController@diff+1,w,c
  3470  0016EC  E10E               	bnz	i2l1652
  3471  0016EE  0E51               	movlw	81
  3472  0016F0  5C49               	subwf	KController@diff,w,c
  3473  0016F2  B0D8               	btfsc	status,0,c
  3474  0016F4  D093               	goto	i2l1698
  3475  0016F6                     i2l1648:
  3476  0016F6  BE4A               	btfsc	KController@diff+1,7,c
  3477  0016F8  D091               	goto	i2l1698
  3478  0016FA  504A               	movf	KController@diff+1,w,c
  3479  0016FC  E104               	bnz	i2u110_40
  3480  0016FE  0E1F               	movlw	31
  3481  001700  5C49               	subwf	KController@diff,w,c
  3482  001702  A0D8               	btfss	status,0,c
  3483  001704  D08B               	goto	i2l1698
  3484  001706                     i2u110_40:
  3485                           
  3486                           ;interrupts.c: 365: controllerSteps = 5;
  3487  001706  0E05               	movlw	5
  3488  001708  D08A               	goto	L12
  3489  00170A                     i2l1652:
  3490  00170A  D088               	goto	i2l1698
  3491                           
  3492                           ;interrupts.c: 369: }
  3493                           
  3494                           ;interrupts.c: 366: else
  3495                           ;interrupts.c: 367: controllerSteps = 10;
  3496  00170C  D095               	goto	i2l161
  3497  00170E                     i2l1654:
  3498                           
  3499                           ;interrupts.c: 370: else if((sensorValue[0] > 95))
  3500  00170E  BE0A               	btfsc	_sensorValue+1,7,c
  3501  001710  D008               	goto	i2l1658
  3502  001712  500A               	movf	_sensorValue+1,w,c
  3503  001714  E105               	bnz	i2u111_40
  3504  001716  0E60               	movlw	96
  3505  001718  5C09               	subwf	_sensorValue,w,c
  3506  00171A  B0D8               	btfsc	status,0,c
  3507  00171C  D08D               	goto	i2l161
  3508  00171E  D001               	goto	i2l1658
  3509  001720                     i2u111_40:
  3510                           
  3511                           ;interrupts.c: 371: {
  3512                           ;interrupts.c: 374: }
  3513  001720  D08B               	goto	i2l161
  3514  001722                     i2l1658:
  3515                           
  3516                           ;interrupts.c: 375: else if(((sensorValue[0] > 95 && sensorValue[1] > 91) && sensorValue
      +                          [3] > 80))
  3517  001722  BE0A               	btfsc	_sensorValue+1,7,c
  3518  001724  D07E               	goto	i2l1700
  3519  001726  500A               	movf	_sensorValue+1,w,c
  3520  001728  E104               	bnz	i2u112_40
  3521  00172A  0E60               	movlw	96
  3522  00172C  5C09               	subwf	_sensorValue,w,c
  3523  00172E  A0D8               	btfss	status,0,c
  3524  001730  D078               	goto	i2l1700
  3525  001732                     i2u112_40:
  3526  001732  BE0C               	btfsc	_sensorValue+3,7,c
  3527  001734  D076               	goto	i2l1700
  3528  001736  500C               	movf	_sensorValue+3,w,c
  3529  001738  E104               	bnz	i2u113_40
  3530  00173A  0E5C               	movlw	92
  3531  00173C  5C0B               	subwf	_sensorValue+2,w,c
  3532  00173E  A0D8               	btfss	status,0,c
  3533  001740  D070               	goto	i2l1700
  3534  001742                     i2u113_40:
  3535  001742  BE10               	btfsc	_sensorValue+7,7,c
  3536  001744  D06E               	goto	i2l1700
  3537  001746  5010               	movf	_sensorValue+7,w,c
  3538  001748  E104               	bnz	i2u114_40
  3539  00174A  0E51               	movlw	81
  3540  00174C  5C0F               	subwf	_sensorValue+6,w,c
  3541  00174E  A0D8               	btfss	status,0,c
  3542  001750  D068               	goto	i2l1700
  3543  001752                     i2u114_40:
  3544                           
  3545                           ;interrupts.c: 376: {
  3546                           ;interrupts.c: 377: diff = ABS(sensorValue[3] - sensorValue[2]);
  3547  001752  EE20  F00D         	lfsr	2,_sensorValue+4
  3548  001756  CFDE F046          	movff	postinc2,??_KController
  3549  00175A  CFDD F047          	movff	postdec2,??_KController+1
  3550  00175E  1E46               	comf	??_KController,f,c
  3551  001760  1E47               	comf	??_KController+1,f,c
  3552  001762  4A46               	infsnz	??_KController,f,c
  3553  001764  2A47               	incf	??_KController+1,f,c
  3554  001766  500F               	movf	_sensorValue+6,w,c
  3555  001768  2446               	addwf	??_KController,w,c
  3556  00176A  6E43               	movwf	ABS@x,c
  3557  00176C  5010               	movf	_sensorValue+7,w,c
  3558  00176E  2047               	addwfc	??_KController+1,w,c
  3559  001770  6E44               	movwf	ABS@x+1,c
  3560  001772  ECFF  F00E         	call	_ABS	;wreg free
  3561  001776  C043  F049         	movff	?_ABS,KController@diff
  3562  00177A  C044  F04A         	movff	?_ABS+1,KController@diff+1
  3563                           
  3564                           ;interrupts.c: 379: if(controllerSteps > 0)
  3565  00177E  505D               	movf	_controllerSteps,w,c
  3566  001780  B4D8               	btfsc	status,2,c
  3567  001782  D00C               	goto	i2l1674
  3568                           
  3569                           ;interrupts.c: 380: {
  3570                           ;interrupts.c: 381: motorCounterUpdate(RIGHT,0);
  3571  001784  0E00               	movlw	0
  3572  001786  6E43               	movwf	motorCounterUpdate@reverse,c
  3573  001788  0E01               	movlw	1
  3574  00178A  ECAD  F00C         	call	_motorCounterUpdate
  3575                           
  3576                           ;interrupts.c: 382: motorCounterUpdate(LEFT,0);
  3577  00178E  0E00               	movlw	0
  3578  001790  6E43               	movwf	motorCounterUpdate@reverse,c
  3579  001792  0E00               	movlw	0
  3580  001794  ECAD  F00C         	call	_motorCounterUpdate
  3581  001798                     i2l1670:
  3582                           
  3583                           ;interrupts.c: 383: controllerSteps--;
  3584  001798  065D               	decf	_controllerSteps,f,c
  3585                           
  3586                           ;interrupts.c: 384: return;
  3587  00179A  D04E               	goto	i2l161
  3588  00179C                     i2l1674:
  3589                           
  3590                           ;interrupts.c: 385: }
  3591                           ;interrupts.c: 387: if(sensorValue[2] > sensorValue[3])
  3592  00179C  500D               	movf	_sensorValue+4,w,c
  3593  00179E  5C0F               	subwf	_sensorValue+6,w,c
  3594  0017A0  5010               	movf	_sensorValue+7,w,c
  3595  0017A2  0A80               	xorlw	128
  3596  0017A4  6E46               	movwf	??_KController& (0+255),c
  3597  0017A6  500E               	movf	_sensorValue+5,w,c
  3598  0017A8  0A80               	xorlw	128
  3599  0017AA  5846               	subwfb	??_KController& (0+255),w,c
  3600  0017AC  B0D8               	btfsc	status,0,c
  3601  0017AE  D00F               	goto	i2l1682
  3602                           
  3603                           ;interrupts.c: 388: {
  3604                           ;interrupts.c: 390: correctTo = LEFT;
  3605  0017B0  0E00               	movlw	0
  3606  0017B2  6E48               	movwf	KController@correctTo,c
  3607                           
  3608                           ;interrupts.c: 391: motorCounterUpdate(correctTo,0);
  3609  0017B4  0E00               	movlw	0
  3610  0017B6  6E43               	movwf	motorCounterUpdate@reverse,c
  3611  0017B8  5048               	movf	KController@correctTo,w,c
  3612  0017BA  ECAD  F00C         	call	_motorCounterUpdate
  3613                           
  3614                           ;interrupts.c: 392: moveMouse(merge(LMotorCounter,RMotorCounter));
  3615  0017BE  C02E  F043         	movff	_RMotorCounter,merge@right
  3616  0017C2  502D               	movf	_LMotorCounter,w,c
  3617  0017C4  EC0C  F00F         	call	_merge
  3618  0017C8  EC19  F00F         	call	_moveMouse
  3619                           
  3620                           ;interrupts.c: 393: }
  3621  0017CC  D00F               	goto	i2l1688
  3622  0017CE                     i2l1682:
  3623                           
  3624                           ;interrupts.c: 394: else
  3625                           ;interrupts.c: 395: {
  3626                           ;interrupts.c: 397: correctTo = RIGHT;
  3627  0017CE  0E01               	movlw	1
  3628  0017D0  6E48               	movwf	KController@correctTo,c
  3629                           
  3630                           ;interrupts.c: 398: motorCounterUpdate(correctTo,0);
  3631  0017D2  0E00               	movlw	0
  3632  0017D4  6E43               	movwf	motorCounterUpdate@reverse,c
  3633  0017D6  5048               	movf	KController@correctTo,w,c
  3634  0017D8  ECAD  F00C         	call	_motorCounterUpdate
  3635                           
  3636                           ;interrupts.c: 399: moveMouse(merge(LMotorCounter,RMotorCounter));
  3637  0017DC  C02E  F043         	movff	_RMotorCounter,merge@right
  3638  0017E0  502D               	movf	_LMotorCounter,w,c
  3639  0017E2  EC0C  F00F         	call	_merge
  3640  0017E6  EC19  F00F         	call	_moveMouse
  3641  0017EA  D000               	goto	i2l1688
  3642  0017EC                     i2l1688:
  3643                           
  3644                           ;interrupts.c: 400: }
  3645                           ;interrupts.c: 402: if(diff > 80)
  3646  0017EC  BE4A               	btfsc	KController@diff+1,7,c
  3647  0017EE  D006               	goto	i2l1692
  3648  0017F0  504A               	movf	KController@diff+1,w,c
  3649  0017F2  E103               	bnz	i2u117_40
  3650  0017F4  0E51               	movlw	81
  3651  0017F6  5C49               	subwf	KController@diff,w,c
  3652  0017F8  B0D8               	btfsc	status,0,c
  3653  0017FA                     i2u117_40:
  3654  0017FA  D773               	goto	i2u108_40
  3655  0017FC                     i2l1692:
  3656                           
  3657                           ;interrupts.c: 404: else if(diff <= 80 && diff > 30)
  3658  0017FC  BE4A               	btfsc	KController@diff+1,7,c
  3659  0017FE  D006               	goto	i2l1694
  3660  001800  504A               	movf	KController@diff+1,w,c
  3661  001802  E10C               	bnz	i2l1698
  3662  001804  0E51               	movlw	81
  3663  001806  5C49               	subwf	KController@diff,w,c
  3664  001808  B0D8               	btfsc	status,0,c
  3665  00180A  D008               	goto	i2l1698
  3666  00180C                     i2l1694:
  3667  00180C  BE4A               	btfsc	KController@diff+1,7,c
  3668  00180E  D006               	goto	i2l1698
  3669  001810  504A               	movf	KController@diff+1,w,c
  3670  001812  E103               	bnz	i2u119_40
  3671  001814  0E1F               	movlw	31
  3672  001816  5C49               	subwf	KController@diff,w,c
  3673  001818  B0D8               	btfsc	status,0,c
  3674  00181A                     i2u119_40:
  3675  00181A  D775               	goto	i2u110_40
  3676  00181C                     i2l1698:
  3677                           
  3678                           ;interrupts.c: 406: else
  3679                           ;interrupts.c: 407: controllerSteps = 10;
  3680  00181C  0E0A               	movlw	10
  3681  00181E                     L12:
  3682  00181E  6E5D               	movwf	_controllerSteps,c
  3683                           
  3684                           ;interrupts.c: 410: }
  3685  001820  D00B               	goto	i2l161
  3686  001822                     i2l1700:
  3687                           
  3688                           ;interrupts.c: 411: else {
  3689                           ;interrupts.c: 412: motorCounterUpdate(RIGHT,0);
  3690  001822  0E00               	movlw	0
  3691  001824  6E43               	movwf	motorCounterUpdate@reverse,c
  3692  001826  0E01               	movlw	1
  3693  001828  ECAD  F00C         	call	_motorCounterUpdate
  3694                           
  3695                           ;interrupts.c: 413: motorCounterUpdate(LEFT,0);
  3696  00182C  0E00               	movlw	0
  3697  00182E  6E43               	movwf	motorCounterUpdate@reverse,c
  3698  001830  0E00               	movlw	0
  3699  001832  ECAD  F00C         	call	_motorCounterUpdate
  3700  001836  D000               	goto	i2l161
  3701  001838                     i2l161:
  3702  001838  0012               	return		;funcret
  3703  00183A                     __end_of_KController:
  3704                           	opt stack 0
  3705                           pclatu	equ	0xFFB
  3706                           pclath	equ	0xFFA
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           intcon2	equ	0xFF1
  3715                           postinc0	equ	0xFEE
  3716                           fsr0h	equ	0xFEA
  3717                           fsr0l	equ	0xFE9
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           bsr	equ	0xFE0
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _moveMouse *****************
  3730 ;; Defined at:
  3731 ;;		line 318 in file "interrupts.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  action          1    wreg     unsigned char 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  action          1   17[COMRAM] unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;		None               void
  3738 ;; Registers used:
  3739 ;;		wreg
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;Total ram usage:        1 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_high_isr
  3755 ;;		_KController
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text18
  3760  001E32                     __ptext18:
  3761                           	opt stack 0
  3762  001E32                     _moveMouse:
  3763                           	opt stack 25
  3764                           
  3765                           ;incstack = 0
  3766                           ;moveMouse@action stored from wreg
  3767  001E32  6E43               	movwf	moveMouse@action,c
  3768                           
  3769                           ;interrupts.c: 320: LATC = action;
  3770  001E34  C043  FF8B         	movff	moveMouse@action,3979	;volatile
  3771  001E38  0012               	return		;funcret
  3772  001E3A                     __end_of_moveMouse:
  3773                           	opt stack 0
  3774                           pclatu	equ	0xFFB
  3775                           pclath	equ	0xFFA
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           intcon	equ	0xFF2
  3783                           intcon2	equ	0xFF1
  3784                           postinc0	equ	0xFEE
  3785                           fsr0h	equ	0xFEA
  3786                           fsr0l	equ	0xFE9
  3787                           wreg	equ	0xFE8
  3788                           postdec1	equ	0xFE5
  3789                           fsr1h	equ	0xFE2
  3790                           fsr1l	equ	0xFE1
  3791                           bsr	equ	0xFE0
  3792                           postinc2	equ	0xFDE
  3793                           postdec2	equ	0xFDD
  3794                           fsr2h	equ	0xFDA
  3795                           fsr2l	equ	0xFD9
  3796                           status	equ	0xFD8
  3797                           
  3798 ;; *************** function _motorCounterUpdate *****************
  3799 ;; Defined at:
  3800 ;;		line 266 in file "interrupts.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  side            1    wreg     enum E4145
  3803 ;;  reverse         1   17[COMRAM] unsigned char 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  side            1   18[COMRAM] enum E4145
  3806 ;; Return value:  Size  Location     Type
  3807 ;;		None               void
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3815 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;Total ram usage:        2 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_high_isr
  3825 ;;		_KController
  3826 ;;		_rotate
  3827 ;;		_Reversing
  3828 ;;		_forward
  3829 ;;		_smoothTurn
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text19
  3834  00195A                     __ptext19:
  3835                           	opt stack 0
  3836  00195A                     _motorCounterUpdate:
  3837                           	opt stack 24
  3838                           
  3839                           ;incstack = 0
  3840                           ;motorCounterUpdate@side stored from wreg
  3841  00195A  6E44               	movwf	motorCounterUpdate@side,c
  3842                           
  3843                           ;interrupts.c: 268: if(side == LEFT && reverse == 1)
  3844  00195C  5044               	movf	motorCounterUpdate@side,w,c
  3845  00195E  A4D8               	btfss	status,2,c
  3846  001960  D01B               	goto	i2l1490
  3847  001962  0443               	decf	motorCounterUpdate@reverse,w,c
  3848  001964  B4D8               	btfsc	status,2,c
  3849  001966  D00B               	goto	i2l1488
  3850  001968  D017               	goto	i2l1490
  3851                           
  3852                           ;interrupts.c: 269: {
  3853                           ;interrupts.c: 270: switch(LMotorCounter)
  3854  00196A  D009               	goto	i2l1488
  3855  00196C                     i2l1478:
  3856  00196C  0E02               	movlw	2
  3857  00196E  D004               	goto	L15
  3858  001970                     i2l1480:
  3859  001970  0E04               	movlw	4
  3860  001972  D002               	goto	L15
  3861                           
  3862                           ;interrupts.c: 274: case 0b00000100: LMotorCounter = 0b00001000; break;
  3863  001974  D03E               	goto	i2l1522
  3864                           
  3865                           ;interrupts.c: 275: case 0b00001000: LMotorCounter = 0b00000001; break;
  3866  001976  D039               	goto	i2l1516
  3867  001978                     L15:
  3868  001978  6E2D               	movwf	_LMotorCounter,c
  3869  00197A  D068               	goto	i2l146
  3870                           
  3871                           ;interrupts.c: 276: default: LMotorCounter = 0b00000001;
  3872  00197C  D036               	goto	i2l1516
  3873  00197E                     i2l1488:
  3874  00197E  502D               	movf	_LMotorCounter,w,c
  3875                           
  3876                           ; Switch size 1, requested type "space"
  3877                           ; Number of cases is 4, Range of values is 1 to 8
  3878                           ; switch strategies available:
  3879                           ; Name         Instructions Cycles
  3880                           ; simple_byte           13     7 (average)
  3881                           ;	Chosen strategy is simple_byte
  3882  001980  0A01               	xorlw	1	; case 1
  3883  001982  B4D8               	btfsc	status,2,c
  3884  001984  D7F3               	goto	i2l1478
  3885  001986  0A03               	xorlw	3	; case 2
  3886  001988  B4D8               	btfsc	status,2,c
  3887  00198A  D7F2               	goto	i2l1480
  3888  00198C  0A06               	xorlw	6	; case 4
  3889  00198E  B4D8               	btfsc	status,2,c
  3890  001990  D030               	goto	i2l1522
  3891  001992  0A0C               	xorlw	12	; case 8
  3892  001994  D02A               	goto	i2l1516
  3893                           
  3894                           ;interrupts.c: 278: } else if(side == RIGHT && reverse == 1)
  3895  001996  D05A               	goto	i2l146
  3896  001998                     i2l1490:
  3897  001998  0444               	decf	motorCounterUpdate@side,w,c
  3898  00199A  A4D8               	btfss	status,2,c
  3899  00199C  D01D               	goto	i2l1508
  3900  00199E  0443               	decf	motorCounterUpdate@reverse,w,c
  3901  0019A0  B4D8               	btfsc	status,2,c
  3902  0019A2  D00B               	goto	i2l1506
  3903  0019A4  D019               	goto	i2l1508
  3904                           
  3905                           ;interrupts.c: 279: {
  3906                           ;interrupts.c: 280: switch(RMotorCounter)
  3907  0019A6  D009               	goto	i2l1506
  3908  0019A8                     i2l1496:
  3909  0019A8  0E08               	movlw	8
  3910  0019AA  D040               	goto	L23
  3911  0019AC                     i2l1498:
  3912  0019AC  0E01               	movlw	1
  3913  0019AE  D03E               	goto	L23
  3914  0019B0                     i2l1500:
  3915  0019B0  0E02               	movlw	2
  3916  0019B2  D03C               	goto	L23
  3917  0019B4                     i2l1502:
  3918  0019B4  0E04               	movlw	4
  3919  0019B6  D03A               	goto	L23
  3920                           
  3921                           ;interrupts.c: 286: default: RMotorCounter = 0b00001000;
  3922  0019B8  D7F7               	goto	i2l1496
  3923  0019BA                     i2l1506:
  3924  0019BA  502E               	movf	_RMotorCounter,w,c
  3925                           
  3926                           ; Switch size 1, requested type "space"
  3927                           ; Number of cases is 4, Range of values is 1 to 8
  3928                           ; switch strategies available:
  3929                           ; Name         Instructions Cycles
  3930                           ; simple_byte           13     7 (average)
  3931                           ;	Chosen strategy is simple_byte
  3932  0019BC  0A01               	xorlw	1	; case 1
  3933  0019BE  B4D8               	btfsc	status,2,c
  3934  0019C0  D7F3               	goto	i2l1496
  3935  0019C2  0A03               	xorlw	3	; case 2
  3936  0019C4  B4D8               	btfsc	status,2,c
  3937  0019C6  D7F2               	goto	i2l1498
  3938  0019C8  0A06               	xorlw	6	; case 4
  3939  0019CA  B4D8               	btfsc	status,2,c
  3940  0019CC  D7F1               	goto	i2l1500
  3941  0019CE  0A0C               	xorlw	12	; case 8
  3942  0019D0  B4D8               	btfsc	status,2,c
  3943  0019D2  D7F0               	goto	i2l1502
  3944  0019D4  D7E9               	goto	i2l1496
  3945                           
  3946                           ;interrupts.c: 288: } else if(side == LEFT && reverse == 0)
  3947  0019D6  D03A               	goto	i2l146
  3948  0019D8                     i2l1508:
  3949  0019D8  5044               	movf	motorCounterUpdate@side,w,c
  3950  0019DA  A4D8               	btfss	status,2,c
  3951  0019DC  D01B               	goto	i2l1526
  3952  0019DE  5043               	movf	motorCounterUpdate@reverse,w,c
  3953  0019E0  B4D8               	btfsc	status,2,c
  3954  0019E2  D009               	goto	i2l1524
  3955  0019E4  D017               	goto	i2l1526
  3956                           
  3957                           ;interrupts.c: 289: {
  3958                           ;interrupts.c: 290: switch(LMotorCounter)
  3959  0019E6  D007               	goto	i2l1524
  3960                           
  3961                           ;interrupts.c: 291: {
  3962                           ;interrupts.c: 292: case 0b00000001: LMotorCounter = 0b00001000; break;
  3963  0019E8  D004               	goto	i2l1522
  3964  0019EA                     i2l1516:
  3965  0019EA  0E01               	movlw	1
  3966  0019EC  D7C5               	goto	L15
  3967                           
  3968                           ;interrupts.c: 294: case 0b00000100: LMotorCounter = 0b00000010; break;
  3969  0019EE  D7BE               	goto	i2l1478
  3970                           
  3971                           ;interrupts.c: 295: case 0b00001000: LMotorCounter = 0b00000100; break;
  3972  0019F0  D7BF               	goto	i2l1480
  3973  0019F2                     i2l1522:
  3974  0019F2  0E08               	movlw	8
  3975  0019F4  D7C1               	goto	L15
  3976  0019F6                     i2l1524:
  3977  0019F6  502D               	movf	_LMotorCounter,w,c
  3978                           
  3979                           ; Switch size 1, requested type "space"
  3980                           ; Number of cases is 4, Range of values is 1 to 8
  3981                           ; switch strategies available:
  3982                           ; Name         Instructions Cycles
  3983                           ; simple_byte           13     7 (average)
  3984                           ;	Chosen strategy is simple_byte
  3985  0019F8  0A01               	xorlw	1	; case 1
  3986  0019FA  B4D8               	btfsc	status,2,c
  3987  0019FC  D7FA               	goto	i2l1522
  3988  0019FE  0A03               	xorlw	3	; case 2
  3989  001A00  B4D8               	btfsc	status,2,c
  3990  001A02  D7F3               	goto	i2l1516
  3991  001A04  0A06               	xorlw	6	; case 4
  3992  001A06  B4D8               	btfsc	status,2,c
  3993  001A08  D7B1               	goto	i2l1478
  3994  001A0A  0A0C               	xorlw	12	; case 8
  3995  001A0C  B4D8               	btfsc	status,2,c
  3996  001A0E  D7B0               	goto	i2l1480
  3997  001A10  D7F0               	goto	i2l1522
  3998                           
  3999                           ;interrupts.c: 298: } else if(side == RIGHT && reverse == 0)
  4000  001A12  D01C               	goto	i2l146
  4001  001A14                     i2l1526:
  4002  001A14  0444               	decf	motorCounterUpdate@side,w,c
  4003  001A16  A4D8               	btfss	status,2,c
  4004  001A18  D019               	goto	i2l146
  4005  001A1A  5043               	movf	motorCounterUpdate@reverse,w,c
  4006  001A1C  B4D8               	btfsc	status,2,c
  4007  001A1E  D009               	goto	i2l1542
  4008  001A20  D015               	goto	i2l146
  4009                           
  4010                           ;interrupts.c: 299: {
  4011                           ;interrupts.c: 300: switch(RMotorCounter)
  4012  001A22  D007               	goto	i2l1542
  4013                           
  4014                           ;interrupts.c: 301: {
  4015                           ;interrupts.c: 302: case 0b00000001: RMotorCounter = 0b00000010; break;
  4016  001A24  D7C5               	goto	i2l1500
  4017                           
  4018                           ;interrupts.c: 303: case 0b00000010: RMotorCounter = 0b00000100; break;
  4019  001A26  D7C6               	goto	i2l1502
  4020                           
  4021                           ;interrupts.c: 304: case 0b00000100: RMotorCounter = 0b00001000; break;
  4022  001A28  D7BF               	goto	i2l1496
  4023                           
  4024                           ;interrupts.c: 305: case 0b00001000: RMotorCounter = 0b00000001; break;
  4025  001A2A  D7C0               	goto	i2l1498
  4026  001A2C                     L23:
  4027  001A2C  6E2E               	movwf	_RMotorCounter,c
  4028  001A2E  D00E               	goto	i2l146
  4029                           
  4030                           ;interrupts.c: 306: default: RMotorCounter = 0b00000001;
  4031  001A30  D7BD               	goto	i2l1498
  4032  001A32                     i2l1542:
  4033  001A32  502E               	movf	_RMotorCounter,w,c
  4034                           
  4035                           ; Switch size 1, requested type "space"
  4036                           ; Number of cases is 4, Range of values is 1 to 8
  4037                           ; switch strategies available:
  4038                           ; Name         Instructions Cycles
  4039                           ; simple_byte           13     7 (average)
  4040                           ;	Chosen strategy is simple_byte
  4041  001A34  0A01               	xorlw	1	; case 1
  4042  001A36  B4D8               	btfsc	status,2,c
  4043  001A38  D7BB               	goto	i2l1500
  4044  001A3A  0A03               	xorlw	3	; case 2
  4045  001A3C  B4D8               	btfsc	status,2,c
  4046  001A3E  D7BA               	goto	i2l1502
  4047  001A40  0A06               	xorlw	6	; case 4
  4048  001A42  B4D8               	btfsc	status,2,c
  4049  001A44  D7B1               	goto	i2l1496
  4050  001A46  0A0C               	xorlw	12	; case 8
  4051  001A48  D7B1               	goto	i2l1498
  4052  001A4A  D000               	goto	i2l146
  4053  001A4C                     i2l146:
  4054  001A4C  0012               	return		;funcret
  4055  001A4E                     __end_of_motorCounterUpdate:
  4056                           	opt stack 0
  4057                           pclatu	equ	0xFFB
  4058                           pclath	equ	0xFFA
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           intcon2	equ	0xFF1
  4067                           postinc0	equ	0xFEE
  4068                           fsr0h	equ	0xFEA
  4069                           fsr0l	equ	0xFE9
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1h	equ	0xFE2
  4073                           fsr1l	equ	0xFE1
  4074                           bsr	equ	0xFE0
  4075                           postinc2	equ	0xFDE
  4076                           postdec2	equ	0xFDD
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _merge *****************
  4082 ;; Defined at:
  4083 ;;		line 311 in file "interrupts.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  left            1    wreg     unsigned char 
  4086 ;;  right           1   17[COMRAM] unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  left            1   18[COMRAM] unsigned char 
  4089 ;;  merged          1   19[COMRAM] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      unsigned char 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4099 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;Total ram usage:        3 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; This function calls:
  4106 ;;		Nothing
  4107 ;; This function is called by:
  4108 ;;		_high_isr
  4109 ;;		_KController
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text20
  4114  001E18                     __ptext20:
  4115                           	opt stack 0
  4116  001E18                     _merge:
  4117                           	opt stack 25
  4118                           
  4119                           ;incstack = 0
  4120                           ;merge@left stored from wreg
  4121  001E18  6E44               	movwf	merge@left,c
  4122                           
  4123                           ;interrupts.c: 313: unsigned char merged;
  4124                           ;interrupts.c: 314: merged = left + (right << 4);
  4125  001E1A  3843               	swapf	merge@right,w,c
  4126  001E1C  0BF0               	andlw	240
  4127  001E1E  2444               	addwf	merge@left,w,c
  4128  001E20  6E45               	movwf	merge@merged,c
  4129                           
  4130                           ;interrupts.c: 315: return merged;
  4131  001E22  5045               	movf	merge@merged,w,c
  4132  001E24  D000               	goto	i2l149
  4133  001E26                     i2l149:
  4134  001E26  0012               	return		;funcret
  4135  001E28                     __end_of_merge:
  4136                           	opt stack 0
  4137                           pclatu	equ	0xFFB
  4138                           pclath	equ	0xFFA
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           postinc0	equ	0xFEE
  4148                           fsr0h	equ	0xFEA
  4149                           fsr0l	equ	0xFE9
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           bsr	equ	0xFE0
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _ABS *****************
  4162 ;; Defined at:
  4163 ;;		line 324 in file "interrupts.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  x               2   17[COMRAM] int 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  2   17[COMRAM] int 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        2 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; This function calls:
  4184 ;;		Nothing
  4185 ;; This function is called by:
  4186 ;;		_KController
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text21
  4191  001DFE                     __ptext21:
  4192                           	opt stack 0
  4193  001DFE                     _ABS:
  4194                           	opt stack 24
  4195                           
  4196                           ;interrupts.c: 326: if(x<0) x = -x;
  4197                           
  4198                           ;incstack = 0
  4199  001DFE  AE44               	btfss	ABS@x+1,7,c
  4200  001E00  D005               	goto	i2l1554
  4201  001E02  6C43               	negf	ABS@x,c
  4202  001E04  1E44               	comf	ABS@x+1,f,c
  4203  001E06  B0D8               	btfsc	status,0,c
  4204  001E08  2A44               	incf	ABS@x+1,f,c
  4205  001E0A  D000               	goto	i2l1554
  4206  001E0C                     i2l1554:
  4207                           
  4208                           ;interrupts.c: 327: return x;
  4209  001E0C  C043  F043         	movff	ABS@x,?_ABS
  4210  001E10  C044  F044         	movff	ABS@x+1,?_ABS+1
  4211  001E14  D000               	goto	i2l156
  4212  001E16                     i2l156:
  4213  001E16  0012               	return		;funcret
  4214  001E18                     __end_of_ABS:
  4215                           	opt stack 0
  4216                           pclatu	equ	0xFFB
  4217                           pclath	equ	0xFFA
  4218                           tblptru	equ	0xFF8
  4219                           tblptrh	equ	0xFF7
  4220                           tblptrl	equ	0xFF6
  4221                           tablat	equ	0xFF5
  4222                           prodh	equ	0xFF4
  4223                           prodl	equ	0xFF3
  4224                           intcon	equ	0xFF2
  4225                           intcon2	equ	0xFF1
  4226                           postinc0	equ	0xFEE
  4227                           fsr0h	equ	0xFEA
  4228                           fsr0l	equ	0xFE9
  4229                           wreg	equ	0xFE8
  4230                           postdec1	equ	0xFE5
  4231                           fsr1h	equ	0xFE2
  4232                           fsr1l	equ	0xFE1
  4233                           bsr	equ	0xFE0
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           pclatu	equ	0xFFB
  4240                           pclath	equ	0xFFA
  4241                           tblptru	equ	0xFF8
  4242                           tblptrh	equ	0xFF7
  4243                           tblptrl	equ	0xFF6
  4244                           tablat	equ	0xFF5
  4245                           prodh	equ	0xFF4
  4246                           prodl	equ	0xFF3
  4247                           intcon	equ	0xFF2
  4248                           intcon2	equ	0xFF1
  4249                           postinc0	equ	0xFEE
  4250                           fsr0h	equ	0xFEA
  4251                           fsr0l	equ	0xFE9
  4252                           wreg	equ	0xFE8
  4253                           postdec1	equ	0xFE5
  4254                           fsr1h	equ	0xFE2
  4255                           fsr1l	equ	0xFE1
  4256                           bsr	equ	0xFE0
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263                           	psect	rparam
  4264  0000                     pclatu	equ	0xFFB
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           postinc0	equ	0xFEE
  4275                           fsr0h	equ	0xFEA
  4276                           fsr0l	equ	0xFE9
  4277                           wreg	equ	0xFE8
  4278                           postdec1	equ	0xFE5
  4279                           fsr1h	equ	0xFE2
  4280                           fsr1l	equ	0xFE1
  4281                           bsr	equ	0xFE0
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        5
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      93
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8356
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1470
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2195
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1448
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      5D       1       73.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D2      34        0.0%
DATA                 0      0      D2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 01 17:31:56 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l302 1612                             l320 1D84                             l315 1D48  
                           l323 1CE6                             l316 1D50                             l309 189E  
                           l319 1D7C                             l274 1C22                             l283 1DB0  
                           l516 1BF2                             l288 1DC4                             _ABS 1DFE  
                  __CFG_CPB$OFF 000000                             _MAX 1D52                             _MIN 1D1E  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1DC6                    _rotatingSide 0031  
                           wreg 000FE8                            ABS@x 0043                            ?_ABS 0043  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l2000 153A                            l2004 1594  
                          l2006 15FC                            l2032 1848                            l2042 1886  
                          l2052 193A                            l2036 1862                            l2038 186C  
                          l2056 1944                            l2078 1D9C                            l1940 1B86  
                          l1932 1B5A                            l1950 1BC2                            l1942 1B90  
                          l1926 1B42                            l1938 1B78                            l1954 1BD2  
                          l1964 1C0A                            l1958 1BE8                            l1990 1398  
                          l1976 1DBE                            l1984 1374                            l1994 1406  
                          l1996 1524                            _LATC 000F8B                            u1660 1372  
                          u1670 1396                            u1755 18AC                            u1787 1C12  
                          _main 1D86                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1C74           __end_of_setCorrection 1B24                           ??_ABS 0045  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0032                 __end_of___awdiv 1BF4                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l105 1316                           i2l161 1838  
                         i2l146 1A4C                           i2l156 1E16                           i2l149 1E26  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1E28  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1BF4  
                         _merge 1E18                 __end_of_forward 1DE2                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0032  
               __initialization 1CE8                    __end_of_main 1DA8                          ??_main 00F5  
                 __activetblptr 000002                          ?_delay 0080                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                          ?_merge 0043  
                        _ADRESH 000FC4                          _ADRESL 000FC3                ___awdiv@dividend 0080  
                        i2l1500 19B0                          i2l1502 19B4                          i2l1522 19F2  
                        i2l1506 19BA                          i2l1610 1CA8                          i2l1516 19EA  
                        i2l1524 19F6                          i2l1508 19D8                          i2l1700 1822  
                        i2l1542 1A32                          i2l1526 1A14                          i2l1480 1970  
                        i2l1608 1C92                          i2l1800 1110                          i2l1554 1E0C  
                        i2l1490 1998                          i2l1642 16D2                          i2l1802 113A  
                        i2l1652 170A                          i2l1636 16B4                          i2l1628 1682  
                        i2l1812 1166                          i2l1804 114A                          i2l1478 196C  
                        i2l1670 1798                          i2l1646 16E6                          i2l1654 170E  
                        i2l1822 11C0                          i2l1814 1170                          i2l1496 19A8  
                        i2l1488 197E                          i2l1648 16F6                          i2l1824 11D0  
                        i2l1816 1176                          i2l1498 19AC                          i2l1682 17CE  
                        i2l1674 179C                          i2l1658 1722                          i2l1850 1260  
                        i2l1826 11E0                          i2l1818 1186                          i2l1770 1070  
                        i2l1692 17FC                          i2l1860 12A6                          i2l1836 1224  
                        i2l1828 11E6                          i2l1780 10AC                          i2l1694 180C  
                        i2l1862 12BC                          i2l1774 108E                          i2l1782 10B4  
                        i2l1766 105C                          i2l1688 17EC                          i2l1784 10C4  
                        i2l1776 109E                          i2l1698 181C                          i2l1858 12A0  
                        i2l1794 10F0                          i2l1874 12F6                          i2l1796 10FA  
                        i2l1876 130E                          i2l1798 1100                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 0045                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 1350                          ___wmul 1CB0  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 0025  
                        _errorP 0027                          delay@x 0083                          clear_0 1CEE  
              ___awdiv@quotient 0086                          _rotate 1C74              __size_of_Reversing 001C  
                  __pdataCOMRAM 0059                       ??_forward 0045                    __mediumconst 0000  
                     ??_low_isr 0032                  _ReverseCounter 001B                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1D14                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0032                  __pcstackCOMRAM 0032                   __end_of_delay 1C38  
                    _TurnedLeft 001F                 moveMouse@action 0043                   __end_of_merge 1E28  
          KController@correctTo 0048      __end_of_motorCounterUpdate 1A4E                  _ForwardCounter 0013  
                       ??_delay 0082                         ??_merge 0044              _AlgorithmSelection 1DA8  
                  _LTurnCounter 0015               __end_of_Reversing 1DFE                      _delay_time 0023  
             _MotorDelayCounter 0017             ?_AlgorithmSelection 0032            setCorrection@sideAvg 008A  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0032  
                       _INTCON2 000FF1                         _OSCTUNE 000F9B            ??_AlgorithmSelection 0080  
                     ?_high_isr 0032                         _Deadend 0011                   _LMotorCounter 002D  
                       _InitApp 1C38                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1B24                 __size_of___wmul 0038                    __psmallconst 1000  
                       __pcinit 1CE8                         __ramtop 1000                         __ptext0 1D86  
                       __ptext1 1A4E                         __ptext2 183A                         __ptext3 1350  
                       __ptext4 1CB0                         __ptext5 1B24                         __ptext6 1D1E  
                       __ptext7 1D52                         __ptext8 1C38                         __ptext9 1BF4  
               __size_of_rotate 003C                    __size_of_ABS 001A                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1DC6                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0032                      ??_high_isr 004B  
                __pintcode_body 1006          __size_of_setCorrection 00D6            end_of_initialization 1D14  
              _sensorCorrection 0001               __end_of_moveMouse 1E3A                   __Lmediumconst 0000  
                       int_func 1006                 _controllerSteps 005D                      _justTurned 0030  
          __size_of_KController 0226                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                       _TRISBbits 000F93  
                     _TRISEbits 000F96                  ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1E32  
                    _totalError 002B                    _RTurnCounter 0019  sensorComputation@getCorrection 008D  
                 _setCorrection 1A4E                  __end_of___wmul 1CE8                   __pidataCOMRAM 1E3A  
                   _TurnedRight 0021                  __end_of_rotate 1CB0             start_initialization 1CE8  
                   __end_of_ABS 1E18                     __end_of_MAX 1D86                     __end_of_MIN 1D52  
            _motorCounterUpdate 195A                __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0043  
                    merge@right 0043                       _Reversing 1DE2                  ?_setCorrection 0032  
                      ??___wmul 0084                __CFG_LPT1OSC$OFF 000000                        ??_rotate 0045  
                _sensorLocation 1001            ??_motorCounterUpdate 0044                     __pbssCOMRAM 0001  
                 __pcstackBANK0 0080                       _TurnRight 005B       sensorUpdate@getCorrection 00F0  
        sensorUpdate@sensorTemp 00A0               __size_of_high_isr 1348                        ?_InitApp 0032  
             __CFG_CCP2MX$PORTC 000000                      ?_Reversing 0032                       _algorithm 002F  
                     __pintcode 0008           setCorrection@frontAvg 008C          motorCounterUpdate@side 0044  
                      ?___awdiv 0080            __end_of_sensorUpdate 195A          __end_of_sensorLocation 1005  
                   __pintcodelo 0018                     __smallconst 1000                        ?_forward 0032  
                      ?_low_isr 0032                       _oldErrorP 0029                  __size_of_delay 0044  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0084  
                     _moveMouse 1E32                        i2u110_40 1706                        i2u111_40 1720  
                      i2u112_40 1732                        i2u104_40 162C                        i2u113_40 1742  
                      i2u105_40 163C                        i2u114_40 1752                        i2u130_40 107E  
                      i2u108_40 16E2                        i2u117_40 17FA                        i2u150_40 1280  
                      i2u134_40 10D4                        i2u119_40 181A                        i2u151_40 1290  
                      i2u127_40 1048                        i2u128_40 1056                        i2u145_40 11F6  
                      i2u129_40 106A                        i2u146_40 1206                 ??_setCorrection 0088  
                      i2u149_40 1270                __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2  
             ___wmul@multiplier 0080                       copy_data0 1D08                   _RMotorCounter 002E  
                    rotate@side 0045                   ??_KController 0046                      ?_moveMouse 0032  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 0044  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 0045              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0059                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1DA8                        __ptext11 1E28  
                      __ptext20 1E18                        __ptext21 1DFE                        __ptext14 1C74  
                      __ptext15 1DC6                        __ptext16 1DE2                        __ptext17 1614  
                      __ptext18 1E32                        __ptext19 195A                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001D           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 183A               _sensorComputation 1350  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 183A                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0043  
               KController@diff 0049       __end_of_sensorComputation 1614                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0043                     _KController 1614  
