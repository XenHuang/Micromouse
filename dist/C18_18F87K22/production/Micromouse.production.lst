

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 14:02:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	idataCOMRAM
    40  001E16                     __pidataCOMRAM:
    41                           	opt stack 0
    42                           
    43                           ;initializer for _cState
    44  001E16  02                 	db	2
    45                           
    46                           ;initializer for _ignoreControll
    47  001E17  0A                 	db	10
    48                           
    49                           ;initializer for _pState
    50  001E18  02                 	db	2
    51                           
    52                           	psect	smallconst
    53  001000                     __psmallconst:
    54                           	opt stack 0
    55  001000  00                 	db	0
    56  001001                     _sensorLocation:
    57                           	opt stack 0
    58  001001  1B                 	db	27
    59  001002  2B                 	db	43
    60  001003  1F                 	db	31
    61  001004  33                 	db	51
    62  001005                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATC	set	3979
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCTUNE	set	3995
    76  0000                     _T0CON	set	4053
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISEbits	set	3990
    80                           
    81                           ; #config settings
    82  001005  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001C8E                     __pcinit:
    86                           	opt stack 0
    87  001C8E                     start_initialization:
    88                           	opt stack 0
    89  001C8E                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (53 bytes)
    93  001C8E  EE00  F001         	lfsr	0,__pbssCOMRAM
    94  001C92  0E35               	movlw	53
    95  001C94                     clear_0:
    96  001C94  6AEE               	clrf	postinc0,c
    97  001C96  06E8               	decf	wreg,f,c
    98  001C98  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (3 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  001C9A  0E16               	movlw	low __pidataCOMRAM
   103  001C9C  6EF6               	movwf	tblptrl,c
   104  001C9E  0E1E               	movlw	high __pidataCOMRAM
   105  001CA0  6EF7               	movwf	tblptrh,c
   106  001CA2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  001CA4  6EF8               	movwf	tblptru,c
   108  001CA6  0009               	tblrd		*+	;fetch initializer
   109  001CA8  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   110  001CAC  0009               	tblrd		*+	;fetch initializer
   111  001CAE  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
   112  001CB2  0009               	tblrd		*+	;fetch initializer
   113  001CB4  CFF5 F05D          	movff	tablat,__pdataCOMRAM+2
   114  001CB8                     end_of_initialization:
   115                           	opt stack 0
   116  001CB8                     __end_of__initialization:
   117                           	opt stack 0
   118  001CB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   119  001CBA  6EF8               	movwf	tblptru,c
   120  001CBC  0100               	movlb	0
   121  001CBE  EFAF  F00E         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           tblptrh	equ	0xFF7
   124                           tblptrl	equ	0xFF6
   125                           tablat	equ	0xFF5
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	bssCOMRAM
   130  000001                     __pbssCOMRAM:
   131                           	opt stack 0
   132  000001                     _sensorCorrection:
   133                           	opt stack 0
   134  000001                     	ds	8
   135  000009                     _sensorValue:
   136                           	opt stack 0
   137  000009                     	ds	8
   138  000011                     _Deadend:
   139                           	opt stack 0
   140  000011                     	ds	2
   141  000013                     _ForwardCounter:
   142                           	opt stack 0
   143  000013                     	ds	2
   144  000015                     _LTurnCounter:
   145                           	opt stack 0
   146  000015                     	ds	2
   147  000017                     _MotorDelayCounter:
   148                           	opt stack 0
   149  000017                     	ds	2
   150  000019                     _RTurnCounter:
   151                           	opt stack 0
   152  000019                     	ds	2
   153  00001B                     _ReverseCounter:
   154                           	opt stack 0
   155  00001B                     	ds	2
   156  00001D                     _RotateCounter:
   157                           	opt stack 0
   158  00001D                     	ds	2
   159  00001F                     _TurnLeft:
   160                           	opt stack 0
   161  00001F                     	ds	2
   162  000021                     _TurnRight:
   163                           	opt stack 0
   164  000021                     	ds	2
   165  000023                     _TurnedLeft:
   166                           	opt stack 0
   167  000023                     	ds	2
   168  000025                     _TurnedRight:
   169                           	opt stack 0
   170  000025                     	ds	2
   171  000027                     _controlToLeft:
   172                           	opt stack 0
   173  000027                     	ds	2
   174  000029                     _controlToRight:
   175                           	opt stack 0
   176  000029                     	ds	2
   177  00002B                     _delay_time:
   178                           	opt stack 0
   179  00002B                     	ds	2
   180  00002D                     _oldErrorP:
   181                           	opt stack 0
   182  00002D                     	ds	2
   183  00002F                     _ChangeRequired:
   184                           	opt stack 0
   185  00002F                     	ds	1
   186  000030                     _LMotorCounter:
   187                           	opt stack 0
   188  000030                     	ds	1
   189  000031                     _RMotorCounter:
   190                           	opt stack 0
   191  000031                     	ds	1
   192  000032                     _algorithm:
   193                           	opt stack 0
   194  000032                     	ds	1
   195  000033                     _deadEnd:
   196                           	opt stack 0
   197  000033                     	ds	1
   198  000034                     _justTurned:
   199                           	opt stack 0
   200  000034                     	ds	1
   201  000035                     _rotatingSide:
   202                           	opt stack 0
   203  000035                     	ds	1
   204                           tblptru	equ	0xFF8
   205                           tblptrh	equ	0xFF7
   206                           tblptrl	equ	0xFF6
   207                           tablat	equ	0xFF5
   208                           postinc0	equ	0xFEE
   209                           wreg	equ	0xFE8
   210                           
   211                           	psect	dataCOMRAM
   212  00005B                     __pdataCOMRAM:
   213                           	opt stack 0
   214  00005B                     _cState:
   215                           	opt stack 0
   216  00005B                     	ds	1
   217  00005C                     _ignoreControll:
   218                           	opt stack 0
   219  00005C                     	ds	1
   220  00005D                     _pState:
   221                           	opt stack 0
   222  00005D                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           
   230                           	psect	cstackBANK0
   231  000080                     __pcstackBANK0:
   232                           	opt stack 0
   233  000080                     ?___wmul:
   234                           	opt stack 0
   235  000080                     ?___awdiv:
   236                           	opt stack 0
   237  000080                     delay@ms:
   238                           	opt stack 0
   239  000080                     ___wmul@multiplier:
   240                           	opt stack 0
   241  000080                     ___awdiv@dividend:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x0
   245  000080                     	ds	2
   246  000082                     ??_delay:
   247  000082                     ___wmul@multiplicand:
   248                           	opt stack 0
   249  000082                     ___awdiv@divisor:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253  000082                     	ds	1
   254  000083                     delay@x:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x3
   258  000083                     	ds	1
   259  000084                     ___awdiv@counter:
   260                           	opt stack 0
   261  000084                     ___wmul@product:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x4
   265  000084                     	ds	1
   266  000085                     ___awdiv@sign:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x5
   270  000085                     	ds	1
   271  000086                     ?_MIN:
   272                           	opt stack 0
   273  000086                     ?_MAX:
   274                           	opt stack 0
   275  000086                     MIN@a:
   276                           	opt stack 0
   277  000086                     MAX@a:
   278                           	opt stack 0
   279  000086                     ___awdiv@quotient:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x6
   283  000086                     	ds	2
   284  000088                     ??_setCorrection:
   285  000088                     MIN@b:
   286                           	opt stack 0
   287  000088                     MAX@b:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x8
   291  000088                     	ds	2
   292  00008A                     ??_MIN:
   293  00008A                     ??_MAX:
   294  00008A                     setCorrection@sideAvg:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0xA
   298  00008A                     	ds	1
   299  00008B                     sensorComputation@sensorTemp:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0xB
   303  00008B                     	ds	1
   304  00008C                     setCorrection@frontAvg:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xC
   308  00008C                     	ds	1
   309  00008D                     sensorComputation@getCorrection:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0xD
   313  00008D                     	ds	1
   314  00008E                     ??_sensorComputation:
   315                           
   316                           ; 0 bytes @ 0xE
   317  00008E                     	ds	2
   318  000090                     sensorComputation@max:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x10
   322  000090                     	ds	2
   323  000092                     sensorComputation@min:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x12
   327  000092                     	ds	2
   328  000094                     sensorComputation@sum:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x14
   332  000094                     	ds	2
   333  000096                     sensorComputation@j:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x16
   337  000096                     	ds	2
   338  000098                     sensorComputation@i:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x18
   342  000098                     	ds	2
   343  00009A                     ??_sensorUpdate:
   344                           
   345                           ; 0 bytes @ 0x1A
   346  00009A                     	ds	6
   347  0000A0                     sensorUpdate@sensorTemp:
   348                           	opt stack 0
   349                           
   350                           ; 80 bytes @ 0x20
   351  0000A0                     	ds	80
   352  0000F0                     sensorUpdate@getCorrection:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x70
   356  0000F0                     	ds	1
   357  0000F1                     sensorUpdate@i:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x71
   361  0000F1                     	ds	2
   362  0000F3                     sensorUpdate@j:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x73
   366  0000F3                     	ds	2
   367  0000F5                     tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           ; 0 bytes @ 0x75
   375                           
   376                           	psect	cstackCOMRAM
   377  000036                     __pcstackCOMRAM:
   378                           	opt stack 0
   379  000036                     ??_low_isr:
   380  000036                     
   381                           ; 0 bytes @ 0x0
   382  000036                     	ds	17
   383  000047                     motorCounterUpdate@reverse:
   384                           	opt stack 0
   385  000047                     merge@right:
   386                           	opt stack 0
   387  000047                     moveMouse@action:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x11
   391  000047                     	ds	1
   392  000048                     motorCounterUpdate@side:
   393                           	opt stack 0
   394  000048                     merge@left:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x12
   398  000048                     	ds	1
   399  000049                     merge@merged:
   400                           	opt stack 0
   401  000049                     rotate@side:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x13
   405  000049                     	ds	1
   406  00004A                     initialRotation@isDeadEnd:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x14
   410  00004A                     	ds	2
   411  00004C                     initialRotation@side:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x16
   415  00004C                     	ds	1
   416  00004D                     ??_high_isr:
   417                           
   418                           ; 0 bytes @ 0x17
   419  00004D                     	ds	14
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           
   427 ;;
   428 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   429 ;;
   430 ;; *************** function _main *****************
   431 ;; Defined at:
   432 ;;		line 41 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;		None               void
   439 ;; Registers used:
   440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;Total ram usage:        0 bytes
   451 ;; Hardware stack levels required when called:    8
   452 ;; This function calls:
   453 ;;		_ConfigureOscillator
   454 ;;		_InitApp
   455 ;;		_sensorUpdate
   456 ;;		_setCorrection
   457 ;; This function is called by:
   458 ;;		Startup code after reset
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text0
   463  001D5E                     __ptext0:
   464                           	opt stack 0
   465  001D5E                     _main:
   466                           	opt stack 23
   467                           
   468                           ;main.c: 44: ConfigureOscillator();
   469                           
   470                           ;incstack = 0
   471  001D5E  EC02  F00F         	call	_ConfigureOscillator	;wreg free
   472                           
   473                           ;main.c: 47: InitApp();
   474  001D62  ECEF  F00D         	call	_InitApp	;wreg free
   475                           
   476                           ;main.c: 48: sensorUpdate(1);
   477  001D66  0E01               	movlw	1
   478  001D68  ECB7  F00B         	call	_sensorUpdate
   479                           
   480                           ;main.c: 49: sensorUpdate(1);
   481  001D6C  0E01               	movlw	1
   482  001D6E  ECB7  F00B         	call	_sensorUpdate
   483                           
   484                           ;main.c: 50: sensorUpdate(1);
   485  001D72  0E01               	movlw	1
   486  001D74  ECB7  F00B         	call	_sensorUpdate
   487                           
   488                           ;main.c: 51: setCorrection();
   489  001D78  ECC1  F00C         	call	_setCorrection	;wreg free
   490                           
   491                           ;main.c: 52: INTCONbits.GIE = 1;
   492  001D7C  8EF2               	bsf	intcon,7,c	;volatile
   493  001D7E  D000               	goto	l2050
   494  001D80                     l2050:
   495                           
   496                           ;main.c: 54: {
   497                           ;main.c: 55: sensorUpdate(0);
   498  001D80  0E00               	movlw	0
   499  001D82  ECB7  F00B         	call	_sensorUpdate
   500  001D86  D7FC               	goto	l2050
   501  001D88  EF51  F000         	goto	start
   502  001D8C                     __end_of_main:
   503                           	opt stack 0
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           intcon	equ	0xFF2
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           
   512 ;; *************** function _setCorrection *****************
   513 ;; Defined at:
   514 ;;		line 125 in file "user.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  frontAvg        2   12[BANK0 ] int 
   519 ;;  sideAvg         2   10[BANK0 ] int 
   520 ;; Return value:  Size  Location     Type
   521 ;;		None               void
   522 ;; Registers used:
   523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;Total ram usage:        6 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; Hardware stack levels required when called:    6
   536 ;; This function calls:
   537 ;;		___awdiv
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text1
   544  001982                     __ptext1:
   545                           	opt stack 0
   546  001982                     _setCorrection:
   547                           	opt stack 24
   548                           
   549                           ;user.c: 127: int sideAvg,frontAvg;
   550                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   551                           
   552                           ;incstack = 0
   553  001982  5009               	movf	_sensorValue,w,c
   554  001984  240B               	addwf	_sensorValue+2,w,c
   555  001986  0100               	movlb	0	; () banked
   556  001988  6F80               	movwf	___awdiv@dividend& (0+255),b
   557  00198A  500A               	movf	_sensorValue+1,w,c
   558  00198C  200C               	addwfc	_sensorValue+3,w,c
   559  00198E  0100               	movlb	0	; () banked
   560  001990  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   561  001992  0E00               	movlw	0
   562  001994  0100               	movlb	0	; () banked
   563  001996  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   564  001998  0E02               	movlw	2
   565  00199A  6F82               	movwf	___awdiv@divisor& (0+255),b
   566  00199C  EC3A  F00D         	call	___awdiv	;wreg free
   567  0019A0  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   568  0019A4  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   569                           
   570                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   571  0019A8  500F               	movf	_sensorValue+6,w,c
   572  0019AA  240D               	addwf	_sensorValue+4,w,c
   573  0019AC  0100               	movlb	0	; () banked
   574  0019AE  6F80               	movwf	___awdiv@dividend& (0+255),b
   575  0019B0  5010               	movf	_sensorValue+7,w,c
   576  0019B2  200E               	addwfc	_sensorValue+5,w,c
   577  0019B4  0100               	movlb	0	; () banked
   578  0019B6  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   579  0019B8  0E00               	movlw	0
   580  0019BA  0100               	movlb	0	; () banked
   581  0019BC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   582  0019BE  0E02               	movlw	2
   583  0019C0  6F82               	movwf	___awdiv@divisor& (0+255),b
   584  0019C2  EC3A  F00D         	call	___awdiv	;wreg free
   585  0019C6  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   586  0019CA  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   587                           
   588                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   589  0019CE  C009  F088         	movff	_sensorValue,??_setCorrection
   590  0019D2  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   591  0019D6  0100               	movlb	0	; () banked
   592  0019D8  1F88               	comf	??_setCorrection& (0+255),f,b
   593  0019DA  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   594  0019DC  4B88               	infsnz	??_setCorrection& (0+255),f,b
   595  0019DE  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   596  0019E0  0100               	movlb	0	; () banked
   597  0019E2  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   598  0019E4  0100               	movlb	0	; () banked
   599  0019E6  2588               	addwf	??_setCorrection& (0+255),w,b
   600  0019E8  6E01               	movwf	_sensorCorrection,c
   601  0019EA  0100               	movlb	0	; () banked
   602  0019EC  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   603  0019EE  0100               	movlb	0	; () banked
   604  0019F0  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   605  0019F2  6E02               	movwf	_sensorCorrection+1,c
   606                           
   607                           ; BSR set to: 0
   608                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   609  0019F4  EE20  F00B         	lfsr	2,_sensorValue+2
   610  0019F8  CFDE F088          	movff	postinc2,??_setCorrection
   611  0019FC  CFDD F089          	movff	postdec2,??_setCorrection+1
   612  001A00  0100               	movlb	0	; () banked
   613  001A02  1F88               	comf	??_setCorrection& (0+255),f,b
   614  001A04  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   615  001A06  4B88               	infsnz	??_setCorrection& (0+255),f,b
   616  001A08  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   617  001A0A  0100               	movlb	0	; () banked
   618  001A0C  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   619  001A0E  0100               	movlb	0	; () banked
   620  001A10  2588               	addwf	??_setCorrection& (0+255),w,b
   621  001A12  6E03               	movwf	_sensorCorrection+2,c
   622  001A14  0100               	movlb	0	; () banked
   623  001A16  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   624  001A18  0100               	movlb	0	; () banked
   625  001A1A  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   626  001A1C  6E04               	movwf	_sensorCorrection+3,c
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   630  001A1E  EE20  F00D         	lfsr	2,_sensorValue+4
   631  001A22  CFDE F088          	movff	postinc2,??_setCorrection
   632  001A26  CFDD F089          	movff	postdec2,??_setCorrection+1
   633  001A2A  0100               	movlb	0	; () banked
   634  001A2C  1F88               	comf	??_setCorrection& (0+255),f,b
   635  001A2E  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   636  001A30  4B88               	infsnz	??_setCorrection& (0+255),f,b
   637  001A32  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   638  001A34  0100               	movlb	0	; () banked
   639  001A36  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   640  001A38  0100               	movlb	0	; () banked
   641  001A3A  2588               	addwf	??_setCorrection& (0+255),w,b
   642  001A3C  6E05               	movwf	_sensorCorrection+4,c
   643  001A3E  0100               	movlb	0	; () banked
   644  001A40  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   645  001A42  0100               	movlb	0	; () banked
   646  001A44  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   647  001A46  6E06               	movwf	_sensorCorrection+5,c
   648                           
   649                           ; BSR set to: 0
   650                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   651  001A48  EE20  F00F         	lfsr	2,_sensorValue+6
   652  001A4C  CFDE F088          	movff	postinc2,??_setCorrection
   653  001A50  CFDD F089          	movff	postdec2,??_setCorrection+1
   654  001A54  0100               	movlb	0	; () banked
   655  001A56  1F88               	comf	??_setCorrection& (0+255),f,b
   656  001A58  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   657  001A5A  4B88               	infsnz	??_setCorrection& (0+255),f,b
   658  001A5C  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   659  001A5E  0100               	movlb	0	; () banked
   660  001A60  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   661  001A62  0100               	movlb	0	; () banked
   662  001A64  2588               	addwf	??_setCorrection& (0+255),w,b
   663  001A66  6E07               	movwf	_sensorCorrection+6,c
   664  001A68  0100               	movlb	0	; () banked
   665  001A6A  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   666  001A6C  0100               	movlb	0	; () banked
   667  001A6E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   668  001A70  6E08               	movwf	_sensorCorrection+7,c
   669                           
   670                           ; BSR set to: 0
   671  001A72  0012               	return		;funcret
   672  001A74                     __end_of_setCorrection:
   673                           	opt stack 0
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           intcon	equ	0xFF2
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postinc2	equ	0xFDE
   682                           postdec2	equ	0xFDD
   683                           
   684 ;; *************** function _sensorUpdate *****************
   685 ;; Defined at:
   686 ;;		line 161 in file "user.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  getCorrectio    1    wreg     unsigned char 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   691 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   692 ;;  j               2  115[BANK0 ] int 
   693 ;;  i               2  113[BANK0 ] int 
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;Total ram usage:       91 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    7
   710 ;; This function calls:
   711 ;;		___wmul
   712 ;;		_sensorComputation
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text2
   719  00176E                     __ptext2:
   720                           	opt stack 0
   721  00176E                     _sensorUpdate:
   722                           	opt stack 23
   723                           
   724                           ; BSR set to: 0
   725                           ;incstack = 0
   726                           ;sensorUpdate@getCorrection stored from wreg
   727  00176E  0100               	movlb	0	; () banked
   728  001770  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   729                           
   730                           ; BSR set to: 0
   731                           ;user.c: 163: int i,j;
   732                           ;user.c: 164: int sensorTemp[4][10];
   733                           ;user.c: 167: for(i = 0; i < 10; i++)
   734  001772  0E00               	movlw	0
   735  001774  0100               	movlb	0	; () banked
   736  001776  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   737  001778  0E00               	movlw	0
   738  00177A  6FF1               	movwf	sensorUpdate@i& (0+255),b
   739  00177C                     l2000:
   740                           
   741                           ; BSR set to: 0
   742  00177C  0100               	movlb	0	; () banked
   743  00177E  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   744  001780  D00A               	goto	l2004
   745  001782  0100               	movlb	0	; () banked
   746  001784  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   747  001786  E178               	bnz	l2024
   748  001788  0E0A               	movlw	10
   749  00178A  0100               	movlb	0	; () banked
   750  00178C  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   751  00178E  B0D8               	btfsc	status,0,c
   752  001790  D073               	goto	l2024
   753  001792  D001               	goto	l2004
   754                           
   755                           ; BSR set to: 0
   756  001794  D071               	goto	l2024
   757  001796                     l2004:
   758                           
   759                           ; BSR set to: 0
   760                           ;user.c: 168: {
   761                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   762  001796  0E00               	movlw	0
   763  001798  0100               	movlb	0	; () banked
   764  00179A  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   765  00179C  0E00               	movlw	0
   766  00179E  6FF3               	movwf	sensorUpdate@j& (0+255),b
   767  0017A0                     l2006:
   768                           
   769                           ; BSR set to: 0
   770  0017A0  0100               	movlb	0	; () banked
   771  0017A2  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   772  0017A4  D00A               	goto	l2010
   773  0017A6  0100               	movlb	0	; () banked
   774  0017A8  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   775  0017AA  E161               	bnz	l2020
   776  0017AC  0E04               	movlw	4
   777  0017AE  0100               	movlb	0	; () banked
   778  0017B0  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   779  0017B2  B0D8               	btfsc	status,0,c
   780  0017B4  D05C               	goto	l2020
   781  0017B6  D001               	goto	l2010
   782                           
   783                           ; BSR set to: 0
   784  0017B8  D05A               	goto	l2020
   785  0017BA                     l2010:
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 170: {
   789                           ;user.c: 171: ADCON0 = sensorLocation[j];
   790  0017BA  0E01               	movlw	low _sensorLocation
   791  0017BC  0100               	movlb	0	; () banked
   792  0017BE  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   793  0017C0  6EF6               	movwf	tblptrl,c
   794  0017C2  0E10               	movlw	high _sensorLocation
   795  0017C4  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   796  0017C6  6EF7               	movwf	tblptrh,c
   797  0017C8                     	if	0	;There are less than 3 active tblptr bytes
   798  0017C8                     	endif
   799  0017C8  0008               	tblrd		*
   800  0017CA  CFF5 FFC2          	movff	tablat,4034	;volatile
   801                           
   802                           ; BSR set to: 0
   803                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   804  0017CE  82C2               	bsf	4034,1,c	;volatile
   805                           
   806                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   807  0017D0  D000               	goto	l339
   808  0017D2                     l339:
   809                           
   810                           ; BSR set to: 0
   811  0017D2  B2C2               	btfsc	4034,1,c	;volatile
   812  0017D4  D7FE               	goto	l339
   813                           
   814                           ; BSR set to: 0
   815                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   816                           
   817                           ; BSR set to: 0
   818  0017D6  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   819  0017DA  0E06               	movlw	6
   820  0017DC  0100               	movlb	0	; () banked
   821  0017DE  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   822  0017E0                     u1865:
   823  0017E0  0100               	movlb	0	; () banked
   824  0017E2  90D8               	bcf	status,0,c
   825  0017E4  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   826  0017E6  0100               	movlb	0	; () banked
   827  0017E8  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   828  0017EA  D7FA               	goto	u1865
   829  0017EC  0100               	movlb	0	; () banked
   830  0017EE  519A               	movf	??_sensorUpdate& (0+255),w,b
   831  0017F0  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   832  0017F4  0100               	movlb	0	; () banked
   833  0017F6  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   834  0017F8  0100               	movlb	0	; () banked
   835  0017FA  90D8               	bcf	status,0,c
   836  0017FC  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   837  0017FE  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   838  001800  0100               	movlb	0	; () banked
   839  001802  90D8               	bcf	status,0,c
   840  001804  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   841  001806  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   842  001808  0100               	movlb	0	; () banked
   843  00180A  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   844  00180C  0E00               	movlw	0
   845  00180E  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   846  001810  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   847  001814  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   848  001818  0E00               	movlw	0
   849  00181A  0100               	movlb	0	; () banked
   850  00181C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   851  00181E  0E14               	movlw	20
   852  001820  6F82               	movwf	___wmul@multiplicand& (0+255),b
   853  001822  EC2B  F00E         	call	___wmul	;wreg free
   854  001826  0EA0               	movlw	low sensorUpdate@sensorTemp
   855  001828  0100               	movlb	0	; () banked
   856  00182A  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   857  00182C  0E00               	movlw	high sensorUpdate@sensorTemp
   858  00182E  0100               	movlb	0	; () banked
   859  001830  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   860  001832  0100               	movlb	0	; () banked
   861  001834  5180               	movf	?___wmul& (0+255),w,b
   862  001836  0100               	movlb	0	; () banked
   863  001838  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   864  00183A  0100               	movlb	0	; () banked
   865  00183C  5181               	movf	(?___wmul+1)& (0+255),w,b
   866  00183E  0100               	movlb	0	; () banked
   867  001840  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   868  001842  90D8               	bcf	status,0,c
   869  001844  0100               	movlb	0	; () banked
   870  001846  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   871  001848  6ED9               	movwf	fsr2l,c
   872  00184A  0100               	movlb	0	; () banked
   873  00184C  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   874  00184E  6EDA               	movwf	fsr2h,c
   875  001850  0100               	movlb	0	; () banked
   876  001852  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   877  001854  26D9               	addwf	fsr2l,f,c
   878  001856  0100               	movlb	0	; () banked
   879  001858  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   880  00185A  22DA               	addwfc	fsr2h,f,c
   881  00185C  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   882  001860  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   883                           
   884                           ; BSR set to: 0
   885  001864  0100               	movlb	0	; () banked
   886  001866  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   887  001868  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   888  00186A  D79A               	goto	l2006
   889                           
   890                           ; BSR set to: 0
   891  00186C  D000               	goto	l2020
   892  00186E                     l2020:
   893                           
   894                           ; BSR set to: 0
   895  00186E  0100               	movlb	0	; () banked
   896  001870  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   897  001872  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   898  001874  D783               	goto	l2000
   899                           
   900                           ; BSR set to: 0
   901  001876  D000               	goto	l2024
   902  001878                     l2024:
   903                           
   904                           ; BSR set to: 0
   905                           ;user.c: 176: }
   906                           ;user.c: 177: }
   907                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   908  001878  0EA0               	movlw	low sensorUpdate@sensorTemp
   909  00187A  0100               	movlb	0	; () banked
   910  00187C  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   911  00187E  0E00               	movlw	high sensorUpdate@sensorTemp
   912  001880  0100               	movlb	0	; () banked
   913  001882  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   914  001884  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   915  001888  EC03  F008         	call	_sensorComputation	;wreg free
   916  00188C  0012               	return		;funcret
   917  00188E                     __end_of_sensorUpdate:
   918                           	opt stack 0
   919                           tblptru	equ	0xFF8
   920                           tblptrh	equ	0xFF7
   921                           tblptrl	equ	0xFF6
   922                           tablat	equ	0xFF5
   923                           intcon	equ	0xFF2
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           postinc2	equ	0xFDE
   927                           postdec2	equ	0xFDD
   928                           fsr2h	equ	0xFDA
   929                           fsr2l	equ	0xFD9
   930                           status	equ	0xFD8
   931                           
   932 ;; *************** function _sensorComputation *****************
   933 ;; Defined at:
   934 ;;		line 137 in file "user.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   937 ;;		 -> sensorUpdate@sensorTemp(80), 
   938 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  i               2   24[BANK0 ] int 
   941 ;;  j               2   22[BANK0 ] int 
   942 ;;  sum             2   20[BANK0 ] int 
   943 ;;  min             2   18[BANK0 ] int 
   944 ;;  max             2   16[BANK0 ] int 
   945 ;; Return value:  Size  Location     Type
   946 ;;		None               void
   947 ;; Registers used:
   948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   954 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   955 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;Total ram usage:       15 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    6
   961 ;; This function calls:
   962 ;;		_MAX
   963 ;;		_MIN
   964 ;;		___awdiv
   965 ;;		___wmul
   966 ;; This function is called by:
   967 ;;		_sensorUpdate
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text3
   972  001006                     __ptext3:
   973                           	opt stack 0
   974  001006                     _sensorComputation:
   975                           	opt stack 23
   976                           
   977                           ;user.c: 139: int max,min,i,j,sum;
   978                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   979                           
   980                           ;incstack = 0
   981  001006  0E00               	movlw	0
   982  001008  0100               	movlb	0	; () banked
   983  00100A  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   984  00100C  0E00               	movlw	0
   985  00100E  6F98               	movwf	sensorComputation@i& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988  001010  0100               	movlb	0	; () banked
   989  001012  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   990  001014  D00A               	goto	l1952
   991  001016  0100               	movlb	0	; () banked
   992  001018  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   993  00101A  E106               	bnz	u1770
   994  00101C  0E04               	movlw	4
   995  00101E  0100               	movlb	0	; () banked
   996  001020  5D98               	subwf	sensorComputation@i& (0+255),w,b
   997  001022  B0D8               	btfsc	status,0,c
   998  001024  D151               	goto	l332
   999  001026  D001               	goto	l1952
  1000  001028                     u1770:
  1001                           
  1002                           ; BSR set to: 0
  1003  001028  D14F               	goto	l332
  1004  00102A                     l1952:
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;user.c: 141: {
  1008                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1009  00102A  0E00               	movlw	0
  1010  00102C  0100               	movlb	0	; () banked
  1011  00102E  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
  1012  001030  0E00               	movlw	0
  1013  001032  6F96               	movwf	sensorComputation@j& (0+255),b
  1014                           
  1015                           ; BSR set to: 0
  1016  001034  0100               	movlb	0	; () banked
  1017  001036  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1018  001038  D00A               	goto	l1958
  1019  00103A  0100               	movlb	0	; () banked
  1020  00103C  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1021  00103E  E106               	bnz	u1780
  1022  001040  0E0A               	movlw	10
  1023  001042  0100               	movlb	0	; () banked
  1024  001044  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1025  001046  B0D8               	btfsc	status,0,c
  1026  001048  D0D3               	goto	l1968
  1027  00104A  D001               	goto	l1958
  1028  00104C                     u1780:
  1029                           
  1030                           ; BSR set to: 0
  1031  00104C  D0D1               	goto	l1968
  1032  00104E                     l1958:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;user.c: 143: {
  1036                           ;user.c: 144: if(j == 0)
  1037  00104E  0100               	movlb	0	; () banked
  1038  001050  5196               	movf	sensorComputation@j& (0+255),w,b
  1039  001052  0100               	movlb	0	; () banked
  1040  001054  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1041  001056  A4D8               	btfss	status,2,c
  1042  001058  D031               	goto	l1962
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;user.c: 145: {
  1046                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1047  00105A  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1048  00105E  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1049  001062  0E00               	movlw	0
  1050  001064  0100               	movlb	0	; () banked
  1051  001066  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1052  001068  0E14               	movlw	20
  1053  00106A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1054  00106C  EC2B  F00E         	call	___wmul	;wreg free
  1055  001070  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1056  001074  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1057  001078  0100               	movlb	0	; () banked
  1058  00107A  5180               	movf	?___wmul& (0+255),w,b
  1059  00107C  0100               	movlb	0	; () banked
  1060  00107E  278E               	addwf	??_sensorComputation& (0+255),f,b
  1061  001080  0100               	movlb	0	; () banked
  1062  001082  5181               	movf	(?___wmul+1)& (0+255),w,b
  1063  001084  0100               	movlb	0	; () banked
  1064  001086  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1065  001088  90D8               	bcf	status,0,c
  1066  00108A  0100               	movlb	0	; () banked
  1067  00108C  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1068  00108E  6ED9               	movwf	fsr2l,c
  1069  001090  0100               	movlb	0	; () banked
  1070  001092  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1071  001094  6EDA               	movwf	fsr2h,c
  1072  001096  0100               	movlb	0	; () banked
  1073  001098  518E               	movf	??_sensorComputation& (0+255),w,b
  1074  00109A  26D9               	addwf	fsr2l,f,c
  1075  00109C  0100               	movlb	0	; () banked
  1076  00109E  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1077  0010A0  22DA               	addwfc	fsr2h,f,c
  1078  0010A2  CFDE F090          	movff	postinc2,sensorComputation@max
  1079  0010A6  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1080  0010AA  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1081  0010AE  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1082  0010B2  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1083  0010B6  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1084                           
  1085                           ;user.c: 147: continue;
  1086  0010BA  D08F               	goto	l1964
  1087  0010BC                     l1962:
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;user.c: 148: }
  1091                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1092  0010BC  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1093  0010C0  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1094  0010C4  0E00               	movlw	0
  1095  0010C6  0100               	movlb	0	; () banked
  1096  0010C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1097  0010CA  0E14               	movlw	20
  1098  0010CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1099  0010CE  EC2B  F00E         	call	___wmul	;wreg free
  1100  0010D2  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1101  0010D6  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1102  0010DA  0100               	movlb	0	; () banked
  1103  0010DC  5180               	movf	?___wmul& (0+255),w,b
  1104  0010DE  0100               	movlb	0	; () banked
  1105  0010E0  278E               	addwf	??_sensorComputation& (0+255),f,b
  1106  0010E2  0100               	movlb	0	; () banked
  1107  0010E4  5181               	movf	(?___wmul+1)& (0+255),w,b
  1108  0010E6  0100               	movlb	0	; () banked
  1109  0010E8  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1110  0010EA  90D8               	bcf	status,0,c
  1111  0010EC  0100               	movlb	0	; () banked
  1112  0010EE  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1113  0010F0  6ED9               	movwf	fsr2l,c
  1114  0010F2  0100               	movlb	0	; () banked
  1115  0010F4  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1116  0010F6  6EDA               	movwf	fsr2h,c
  1117  0010F8  0100               	movlb	0	; () banked
  1118  0010FA  518E               	movf	??_sensorComputation& (0+255),w,b
  1119  0010FC  26D9               	addwf	fsr2l,f,c
  1120  0010FE  0100               	movlb	0	; () banked
  1121  001100  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1122  001102  22DA               	addwfc	fsr2h,f,c
  1123  001104  CFDE F086          	movff	postinc2,MIN@a
  1124  001108  CFDD F087          	movff	postdec2,MIN@a+1
  1125  00110C  C092  F088         	movff	sensorComputation@min,MIN@b
  1126  001110  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1127  001114  EC61  F00E         	call	_MIN	;wreg free
  1128  001118  C086  F092         	movff	?_MIN,sensorComputation@min
  1129  00111C  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1130                           
  1131                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1132  001120  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1133  001124  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1134  001128  0E00               	movlw	0
  1135  00112A  0100               	movlb	0	; () banked
  1136  00112C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1137  00112E  0E14               	movlw	20
  1138  001130  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1139  001132  EC2B  F00E         	call	___wmul	;wreg free
  1140  001136  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1141  00113A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1142  00113E  0100               	movlb	0	; () banked
  1143  001140  5180               	movf	?___wmul& (0+255),w,b
  1144  001142  0100               	movlb	0	; () banked
  1145  001144  278E               	addwf	??_sensorComputation& (0+255),f,b
  1146  001146  0100               	movlb	0	; () banked
  1147  001148  5181               	movf	(?___wmul+1)& (0+255),w,b
  1148  00114A  0100               	movlb	0	; () banked
  1149  00114C  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1150  00114E  90D8               	bcf	status,0,c
  1151  001150  0100               	movlb	0	; () banked
  1152  001152  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1153  001154  6ED9               	movwf	fsr2l,c
  1154  001156  0100               	movlb	0	; () banked
  1155  001158  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1156  00115A  6EDA               	movwf	fsr2h,c
  1157  00115C  0100               	movlb	0	; () banked
  1158  00115E  518E               	movf	??_sensorComputation& (0+255),w,b
  1159  001160  26D9               	addwf	fsr2l,f,c
  1160  001162  0100               	movlb	0	; () banked
  1161  001164  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1162  001166  22DA               	addwfc	fsr2h,f,c
  1163  001168  CFDE F086          	movff	postinc2,MAX@a
  1164  00116C  CFDD F087          	movff	postdec2,MAX@a+1
  1165  001170  C090  F088         	movff	sensorComputation@max,MAX@b
  1166  001174  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1167  001178  EC7B  F00E         	call	_MAX	;wreg free
  1168  00117C  C086  F090         	movff	?_MAX,sensorComputation@max
  1169  001180  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1170                           
  1171                           ;user.c: 151: sum += sensorTemp[i][j];
  1172  001184  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1173  001188  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1174  00118C  0E00               	movlw	0
  1175  00118E  0100               	movlb	0	; () banked
  1176  001190  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1177  001192  0E14               	movlw	20
  1178  001194  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1179  001196  EC2B  F00E         	call	___wmul	;wreg free
  1180  00119A  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1181  00119E  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1182  0011A2  0100               	movlb	0	; () banked
  1183  0011A4  5180               	movf	?___wmul& (0+255),w,b
  1184  0011A6  0100               	movlb	0	; () banked
  1185  0011A8  278E               	addwf	??_sensorComputation& (0+255),f,b
  1186  0011AA  0100               	movlb	0	; () banked
  1187  0011AC  5181               	movf	(?___wmul+1)& (0+255),w,b
  1188  0011AE  0100               	movlb	0	; () banked
  1189  0011B0  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1190  0011B2  90D8               	bcf	status,0,c
  1191  0011B4  0100               	movlb	0	; () banked
  1192  0011B6  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1193  0011B8  6ED9               	movwf	fsr2l,c
  1194  0011BA  0100               	movlb	0	; () banked
  1195  0011BC  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1196  0011BE  6EDA               	movwf	fsr2h,c
  1197  0011C0  0100               	movlb	0	; () banked
  1198  0011C2  518E               	movf	??_sensorComputation& (0+255),w,b
  1199  0011C4  26D9               	addwf	fsr2l,f,c
  1200  0011C6  0100               	movlb	0	; () banked
  1201  0011C8  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1202  0011CA  22DA               	addwfc	fsr2h,f,c
  1203  0011CC  50DE               	movf	postinc2,w,c
  1204  0011CE  0100               	movlb	0	; () banked
  1205  0011D0  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1206  0011D2  50DD               	movf	postdec2,w,c
  1207  0011D4  0100               	movlb	0	; () banked
  1208  0011D6  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1209  0011D8  D000               	goto	l1964
  1210  0011DA                     l1964:
  1211                           
  1212                           ; BSR set to: 0
  1213  0011DA  0100               	movlb	0	; () banked
  1214  0011DC  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1215  0011DE  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 0
  1218  0011E0  0100               	movlb	0	; () banked
  1219  0011E2  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1220  0011E4  D734               	goto	l1958
  1221  0011E6  0100               	movlb	0	; () banked
  1222  0011E8  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1223  0011EA  E102               	bnz	l1968
  1224  0011EC  D729               	goto	L2
  1225  0011EE  D000               	goto	l1968
  1226  0011F0                     l1968:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;user.c: 152: }
  1230                           ;user.c: 153: sum = sum - min - max;
  1231  0011F0  0100               	movlb	0	; () banked
  1232  0011F2  5190               	movf	sensorComputation@max& (0+255),w,b
  1233  0011F4  0100               	movlb	0	; () banked
  1234  0011F6  2592               	addwf	sensorComputation@min& (0+255),w,b
  1235  0011F8  0100               	movlb	0	; () banked
  1236  0011FA  6F8E               	movwf	??_sensorComputation& (0+255),b
  1237  0011FC  0100               	movlb	0	; () banked
  1238  0011FE  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1239  001200  0100               	movlb	0	; () banked
  1240  001202  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1241  001204  0100               	movlb	0	; () banked
  1242  001206  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1243  001208  0100               	movlb	0	; () banked
  1244  00120A  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1245  00120C  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1246  00120E  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1247  001210  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1248  001212  0100               	movlb	0	; () banked
  1249  001214  5194               	movf	sensorComputation@sum& (0+255),w,b
  1250  001216  0100               	movlb	0	; () banked
  1251  001218  258E               	addwf	??_sensorComputation& (0+255),w,b
  1252  00121A  0100               	movlb	0	; () banked
  1253  00121C  6F94               	movwf	sensorComputation@sum& (0+255),b
  1254  00121E  0100               	movlb	0	; () banked
  1255  001220  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1256  001222  0100               	movlb	0	; () banked
  1257  001224  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1258  001226  0100               	movlb	0	; () banked
  1259  001228  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1260                           
  1261                           ;user.c: 154: if(getCorrection == 1)
  1262  00122A  0100               	movlb	0	; () banked
  1263  00122C  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1264  00122E  A4D8               	btfss	status,2,c
  1265  001230  D00C               	goto	l1972
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1269  001232  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1270  001236  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1271  00123A  0E00               	movlw	0
  1272  00123C  0100               	movlb	0	; () banked
  1273  00123E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1274  001240  0E08               	movlw	8
  1275  001242  6F82               	movwf	___awdiv@divisor& (0+255),b
  1276  001244  EC3A  F00D         	call	___awdiv	;wreg free
  1277  001248  D022               	goto	L3
  1278  00124A                     l1972:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;user.c: 156: else
  1282                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1283  00124A  90D8               	bcf	status,0,c
  1284  00124C  0100               	movlb	0	; () banked
  1285  00124E  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1286  001250  6ED9               	movwf	fsr2l,c
  1287  001252  0100               	movlb	0	; () banked
  1288  001254  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1289  001256  6EDA               	movwf	fsr2h,c
  1290  001258  0E01               	movlw	low _sensorCorrection
  1291  00125A  26D9               	addwf	fsr2l,f,c
  1292  00125C  0E00               	movlw	high _sensorCorrection
  1293  00125E  22DA               	addwfc	fsr2h,f,c
  1294  001260  CFDE F08E          	movff	postinc2,??_sensorComputation
  1295  001264  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1296  001268  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1297  00126C  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1298  001270  0E00               	movlw	0
  1299  001272  0100               	movlb	0	; () banked
  1300  001274  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1301  001276  0E08               	movlw	8
  1302  001278  6F82               	movwf	___awdiv@divisor& (0+255),b
  1303  00127A  EC3A  F00D         	call	___awdiv	;wreg free
  1304  00127E  0100               	movlb	0	; () banked
  1305  001280  518E               	movf	??_sensorComputation& (0+255),w,b
  1306  001282  0100               	movlb	0	; () banked
  1307  001284  2780               	addwf	?___awdiv& (0+255),f,b
  1308  001286  0100               	movlb	0	; () banked
  1309  001288  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1310  00128A  0100               	movlb	0	; () banked
  1311  00128C  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1312  00128E                     L3:
  1313  00128E  90D8               	bcf	status,0,c
  1314  001290  0100               	movlb	0	; () banked
  1315  001292  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1316  001294  6ED9               	movwf	fsr2l,c
  1317  001296  0100               	movlb	0	; () banked
  1318  001298  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1319  00129A  6EDA               	movwf	fsr2h,c
  1320  00129C  0E09               	movlw	low _sensorValue
  1321  00129E  26D9               	addwf	fsr2l,f,c
  1322  0012A0  0E00               	movlw	high _sensorValue
  1323  0012A2  22DA               	addwfc	fsr2h,f,c
  1324  0012A4  0100               	movlb	0	; () banked
  1325  0012A6  C080  FFDE         	movff	?___awdiv,postinc2
  1326  0012AA  0100               	movlb	0	; () banked
  1327  0012AC  C081  FFDD         	movff	?___awdiv+1,postdec2
  1328  0012B0  D000               	goto	l1974
  1329  0012B2                     l1974:
  1330                           
  1331                           ; BSR set to: 0
  1332  0012B2  0100               	movlb	0	; () banked
  1333  0012B4  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1334  0012B6  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1335                           
  1336                           ; BSR set to: 0
  1337  0012B8  0100               	movlb	0	; () banked
  1338  0012BA  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1339  0012BC  D6B6               	goto	l1952
  1340  0012BE  0100               	movlb	0	; () banked
  1341  0012C0  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1342  0012C2  E102               	bnz	l332
  1343  0012C4  D6AB               	goto	L4
  1344  0012C6  D000               	goto	l332
  1345  0012C8                     l332:
  1346                           
  1347                           ; BSR set to: 0
  1348  0012C8  0012               	return		;funcret
  1349  0012CA                     __end_of_sensorComputation:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           intcon	equ	0xFF2
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postinc2	equ	0xFDE
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function ___wmul *****************
  1365 ;; Defined at:
  1366 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1369 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  product         2    4[BANK0 ] unsigned int 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  2    0[BANK0 ] unsigned int 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, prodl, prodh
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;Total ram usage:        6 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    5
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_sensorComputation
  1392 ;;		_sensorUpdate
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text4
  1397  001C56                     __ptext4:
  1398                           	opt stack 0
  1399  001C56                     ___wmul:
  1400                           	opt stack 23
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;incstack = 0
  1404  001C56  0100               	movlb	0	; () banked
  1405  001C58  5180               	movf	___wmul@multiplier& (0+255),w,b
  1406  001C5A  0100               	movlb	0	; () banked
  1407  001C5C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1408  001C5E  CFF3 F084          	movff	prodl,___wmul@product
  1409  001C62  CFF4 F085          	movff	prodh,___wmul@product+1
  1410  001C66  0100               	movlb	0	; () banked
  1411  001C68  5180               	movf	___wmul@multiplier& (0+255),w,b
  1412  001C6A  0100               	movlb	0	; () banked
  1413  001C6C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1414  001C6E  50F3               	movf	prodl,w,c
  1415  001C70  0100               	movlb	0	; () banked
  1416  001C72  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1417  001C74  0100               	movlb	0	; () banked
  1418  001C76  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1419  001C78  0100               	movlb	0	; () banked
  1420  001C7A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1421  001C7C  50F3               	movf	prodl,w,c
  1422  001C7E  0100               	movlb	0	; () banked
  1423  001C80  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1424                           
  1425                           ; BSR set to: 0
  1426  001C82  C084  F080         	movff	___wmul@product,?___wmul
  1427  001C86  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1428  001C8A  D000               	goto	l353
  1429  001C8C                     l353:
  1430                           
  1431                           ; BSR set to: 0
  1432  001C8C  0012               	return		;funcret
  1433  001C8E                     __end_of___wmul:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           prodh	equ	0xFF4
  1440                           prodl	equ	0xFF3
  1441                           intcon	equ	0xFF2
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postinc2	equ	0xFDE
  1445                           postdec2	equ	0xFDD
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function ___awdiv *****************
  1451 ;; Defined at:
  1452 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  dividend        2    0[BANK0 ] int 
  1455 ;;  divisor         2    2[BANK0 ] int 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  quotient        2    6[BANK0 ] int 
  1458 ;;  sign            1    5[BANK0 ] unsigned char 
  1459 ;;  counter         1    4[BANK0 ] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  2    0[BANK0 ] int 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1469 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;Total ram usage:        8 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    5
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_setCorrection
  1480 ;;		_sensorComputation
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text5
  1485  001A74                     __ptext5:
  1486                           	opt stack 0
  1487  001A74                     ___awdiv:
  1488                           	opt stack 24
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;incstack = 0
  1492  001A74  0E00               	movlw	0
  1493  001A76  0100               	movlb	0	; () banked
  1494  001A78  6F85               	movwf	___awdiv@sign& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497  001A7A  0100               	movlb	0	; () banked
  1498  001A7C  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1499  001A7E  D009               	goto	l1894
  1500                           
  1501                           ; BSR set to: 0
  1502  001A80  0100               	movlb	0	; () banked
  1503  001A82  6D82               	negf	___awdiv@divisor& (0+255),b
  1504  001A84  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1505  001A86  B0D8               	btfsc	status,0,c
  1506  001A88  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1507                           
  1508                           ; BSR set to: 0
  1509  001A8A  0E01               	movlw	1
  1510  001A8C  0100               	movlb	0	; () banked
  1511  001A8E  6F85               	movwf	___awdiv@sign& (0+255),b
  1512  001A90  D000               	goto	l1894
  1513  001A92                     l1894:
  1514                           
  1515                           ; BSR set to: 0
  1516  001A92  0100               	movlb	0	; () banked
  1517  001A94  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1518  001A96  D009               	goto	l1900
  1519                           
  1520                           ; BSR set to: 0
  1521  001A98  0100               	movlb	0	; () banked
  1522  001A9A  6D80               	negf	___awdiv@dividend& (0+255),b
  1523  001A9C  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1524  001A9E  B0D8               	btfsc	status,0,c
  1525  001AA0  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1526                           
  1527                           ; BSR set to: 0
  1528  001AA2  0E01               	movlw	1
  1529  001AA4  0100               	movlb	0	; () banked
  1530  001AA6  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1531  001AA8  D000               	goto	l1900
  1532  001AAA                     l1900:
  1533                           
  1534                           ; BSR set to: 0
  1535  001AAA  0E00               	movlw	0
  1536  001AAC  0100               	movlb	0	; () banked
  1537  001AAE  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1538  001AB0  0E00               	movlw	0
  1539  001AB2  6F86               	movwf	___awdiv@quotient& (0+255),b
  1540                           
  1541                           ; BSR set to: 0
  1542  001AB4  0100               	movlb	0	; () banked
  1543  001AB6  5182               	movf	___awdiv@divisor& (0+255),w,b
  1544  001AB8  0100               	movlb	0	; () banked
  1545  001ABA  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1546  001ABC  B4D8               	btfsc	status,2,c
  1547  001ABE  D031               	goto	l1922
  1548                           
  1549                           ; BSR set to: 0
  1550  001AC0  0E01               	movlw	1
  1551  001AC2  0100               	movlb	0	; () banked
  1552  001AC4  6F84               	movwf	___awdiv@counter& (0+255),b
  1553  001AC6  D007               	goto	l1908
  1554  001AC8                     l1906:
  1555                           
  1556                           ; BSR set to: 0
  1557  001AC8  0100               	movlb	0	; () banked
  1558  001ACA  90D8               	bcf	status,0,c
  1559  001ACC  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1560  001ACE  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1561  001AD0  0100               	movlb	0	; () banked
  1562  001AD2  2B84               	incf	___awdiv@counter& (0+255),f,b
  1563  001AD4  D000               	goto	l1908
  1564  001AD6                     l1908:
  1565                           
  1566                           ; BSR set to: 0
  1567  001AD6  0100               	movlb	0	; () banked
  1568  001AD8  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1569  001ADA  D002               	goto	l1910
  1570  001ADC  D7F5               	goto	l1906
  1571                           
  1572                           ; BSR set to: 0
  1573  001ADE  D000               	goto	l1910
  1574  001AE0                     l1910:
  1575                           
  1576                           ; BSR set to: 0
  1577  001AE0  0100               	movlb	0	; () banked
  1578  001AE2  90D8               	bcf	status,0,c
  1579  001AE4  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1580  001AE6  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1581                           
  1582                           ; BSR set to: 0
  1583  001AE8  0100               	movlb	0	; () banked
  1584  001AEA  5182               	movf	___awdiv@divisor& (0+255),w,b
  1585  001AEC  0100               	movlb	0	; () banked
  1586  001AEE  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1587  001AF0  0100               	movlb	0	; () banked
  1588  001AF2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1589  001AF4  0100               	movlb	0	; () banked
  1590  001AF6  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1591  001AF8  A0D8               	btfss	status,0,c
  1592  001AFA  D00B               	goto	l1918
  1593                           
  1594                           ; BSR set to: 0
  1595  001AFC  0100               	movlb	0	; () banked
  1596  001AFE  5182               	movf	___awdiv@divisor& (0+255),w,b
  1597  001B00  0100               	movlb	0	; () banked
  1598  001B02  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1599  001B04  0100               	movlb	0	; () banked
  1600  001B06  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1601  001B08  0100               	movlb	0	; () banked
  1602  001B0A  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1603                           
  1604                           ; BSR set to: 0
  1605  001B0C  0100               	movlb	0	; () banked
  1606  001B0E  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1607  001B10  D000               	goto	l1918
  1608  001B12                     l1918:
  1609                           
  1610                           ; BSR set to: 0
  1611  001B12  0100               	movlb	0	; () banked
  1612  001B14  90D8               	bcf	status,0,c
  1613  001B16  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1614  001B18  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1615                           
  1616                           ; BSR set to: 0
  1617  001B1A  0100               	movlb	0	; () banked
  1618  001B1C  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1619  001B1E  D7E0               	goto	l1910
  1620                           
  1621                           ; BSR set to: 0
  1622  001B20  D000               	goto	l1922
  1623  001B22                     l1922:
  1624                           
  1625                           ; BSR set to: 0
  1626  001B22  0100               	movlb	0	; () banked
  1627  001B24  5185               	movf	___awdiv@sign& (0+255),w,b
  1628  001B26  0100               	movlb	0	; () banked
  1629  001B28  B4D8               	btfsc	status,2,c
  1630  001B2A  D006               	goto	l1926
  1631                           
  1632                           ; BSR set to: 0
  1633  001B2C  0100               	movlb	0	; () banked
  1634  001B2E  6D86               	negf	___awdiv@quotient& (0+255),b
  1635  001B30  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1636  001B32  B0D8               	btfsc	status,0,c
  1637  001B34  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1638  001B36  D000               	goto	l1926
  1639  001B38                     l1926:
  1640                           
  1641                           ; BSR set to: 0
  1642  001B38  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1643  001B3C  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1644  001B40  D000               	goto	l546
  1645  001B42                     l546:
  1646                           
  1647                           ; BSR set to: 0
  1648  001B42  0012               	return		;funcret
  1649  001B44                     __end_of___awdiv:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           intcon	equ	0xFF2
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postinc2	equ	0xFDE
  1661                           postdec2	equ	0xFDD
  1662                           fsr2h	equ	0xFDA
  1663                           fsr2l	equ	0xFD9
  1664                           status	equ	0xFD8
  1665                           
  1666 ;; *************** function _MIN *****************
  1667 ;; Defined at:
  1668 ;;		line 184 in file "user.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  a               2    6[BANK0 ] int 
  1671 ;;  b               2    8[BANK0 ] int 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  2    6[BANK0 ] int 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;Total ram usage:        5 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    5
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_sensorComputation
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text6
  1698  001CC2                     __ptext6:
  1699                           	opt stack 0
  1700  001CC2                     _MIN:
  1701                           	opt stack 23
  1702                           
  1703                           ;user.c: 186: if(a>b) return b;
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;incstack = 0
  1707  001CC2  0100               	movlb	0	; () banked
  1708  001CC4  5186               	movf	MIN@a& (0+255),w,b
  1709  001CC6  0100               	movlb	0	; () banked
  1710  001CC8  5D88               	subwf	MIN@b& (0+255),w,b
  1711  001CCA  0100               	movlb	0	; () banked
  1712  001CCC  5189               	movf	(MIN@b+1)& (0+255),w,b
  1713  001CCE  0A80               	xorlw	128
  1714  001CD0  0100               	movlb	0	; () banked
  1715  001CD2  6F8A               	movwf	??_MIN& (0+255),b
  1716  001CD4  0100               	movlb	0	; () banked
  1717  001CD6  5187               	movf	(MIN@a+1)& (0+255),w,b
  1718  001CD8  0A80               	xorlw	128
  1719  001CDA  0100               	movlb	0	; () banked
  1720  001CDC  598A               	subwfb	??_MIN& (0+255),w,b
  1721  001CDE  B0D8               	btfsc	status,0,c
  1722  001CE0  D005               	goto	l345
  1723                           
  1724                           ; BSR set to: 0
  1725  001CE2  C088  F086         	movff	MIN@b,?_MIN
  1726  001CE6  C089  F087         	movff	MIN@b+1,?_MIN+1
  1727  001CEA  D004               	goto	l346
  1728  001CEC                     l345:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;user.c: 187: return a;
  1732  001CEC  C086  F086         	movff	MIN@a,?_MIN
  1733  001CF0  C087  F087         	movff	MIN@a+1,?_MIN+1
  1734  001CF4                     l346:
  1735                           
  1736                           ; BSR set to: 0
  1737  001CF4  0012               	return		;funcret
  1738  001CF6                     __end_of_MIN:
  1739                           	opt stack 0
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           prodh	equ	0xFF4
  1745                           prodl	equ	0xFF3
  1746                           intcon	equ	0xFF2
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postinc2	equ	0xFDE
  1750                           postdec2	equ	0xFDD
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _MAX *****************
  1756 ;; Defined at:
  1757 ;;		line 190 in file "user.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  a               2    6[BANK0 ] int 
  1760 ;;  b               2    8[BANK0 ] int 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  2    6[BANK0 ] int 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, status,0
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1776 ;;Total ram usage:        5 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    5
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_sensorComputation
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text7
  1787  001CF6                     __ptext7:
  1788                           	opt stack 0
  1789  001CF6                     _MAX:
  1790                           	opt stack 23
  1791                           
  1792                           ;user.c: 192: if(a>b) return a;
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;incstack = 0
  1796  001CF6  0100               	movlb	0	; () banked
  1797  001CF8  5186               	movf	MAX@a& (0+255),w,b
  1798  001CFA  0100               	movlb	0	; () banked
  1799  001CFC  5D88               	subwf	MAX@b& (0+255),w,b
  1800  001CFE  0100               	movlb	0	; () banked
  1801  001D00  5189               	movf	(MAX@b+1)& (0+255),w,b
  1802  001D02  0A80               	xorlw	128
  1803  001D04  0100               	movlb	0	; () banked
  1804  001D06  6F8A               	movwf	??_MAX& (0+255),b
  1805  001D08  0100               	movlb	0	; () banked
  1806  001D0A  5187               	movf	(MAX@a+1)& (0+255),w,b
  1807  001D0C  0A80               	xorlw	128
  1808  001D0E  0100               	movlb	0	; () banked
  1809  001D10  598A               	subwfb	??_MAX& (0+255),w,b
  1810  001D12  B0D8               	btfsc	status,0,c
  1811  001D14  D005               	goto	l349
  1812                           
  1813                           ; BSR set to: 0
  1814  001D16  C086  F086         	movff	MAX@a,?_MAX
  1815  001D1A  C087  F087         	movff	MAX@a+1,?_MAX+1
  1816  001D1E  D004               	goto	l350
  1817  001D20                     l349:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;user.c: 193: return b;
  1821  001D20  C088  F086         	movff	MAX@b,?_MAX
  1822  001D24  C089  F087         	movff	MAX@b+1,?_MAX+1
  1823  001D28                     l350:
  1824                           
  1825                           ; BSR set to: 0
  1826  001D28  0012               	return		;funcret
  1827  001D2A                     __end_of_MAX:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           fsr2h	equ	0xFDA
  1841                           fsr2l	equ	0xFD9
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _InitApp *****************
  1845 ;; Defined at:
  1846 ;;		line 35 in file "user.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;		None               void
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;Total ram usage:        0 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    6
  1867 ;; This function calls:
  1868 ;;		_AlgorithmSelection
  1869 ;;		_delay
  1870 ;; This function is called by:
  1871 ;;		_main
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text8
  1876  001BDE                     __ptext8:
  1877                           	opt stack 0
  1878  001BDE                     _InitApp:
  1879                           	opt stack 24
  1880                           
  1881                           ;user.c: 39: TRISC = 0;
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;incstack = 0
  1885  001BDE  0E00               	movlw	0
  1886  001BE0  6E94               	movwf	3988,c	;volatile
  1887                           
  1888                           ;user.c: 43: TRISEbits.TRISE1=1;
  1889  001BE2  8296               	bsf	3990,1,c	;volatile
  1890                           
  1891                           ;user.c: 45: TRISEbits.TRISE2=1;
  1892  001BE4  8496               	bsf	3990,2,c	;volatile
  1893                           
  1894                           ;user.c: 47: TRISBbits.RB1=1;
  1895  001BE6  8293               	bsf	3987,1,c	;volatile
  1896                           
  1897                           ;user.c: 49: TRISBbits.RB0=1;
  1898  001BE8  8093               	bsf	3987,0,c	;volatile
  1899                           
  1900                           ;user.c: 52: TRISBbits.RB3=1;
  1901  001BEA  8693               	bsf	3987,3,c	;volatile
  1902                           
  1903                           ;user.c: 54: TRISBbits.RB2=1;
  1904  001BEC  8493               	bsf	3987,2,c	;volatile
  1905                           
  1906                           ;user.c: 58: ADCON1 =0b00000001;
  1907  001BEE  0E01               	movlw	1
  1908  001BF0  6EC1               	movwf	4033,c	;volatile
  1909                           
  1910                           ;user.c: 63: ADCON2=0b00001010;
  1911  001BF2  0E0A               	movlw	10
  1912  001BF4  6EC0               	movwf	4032,c	;volatile
  1913                           
  1914                           ;user.c: 68: ADCON0=0b00101011;
  1915  001BF6  0E2B               	movlw	43
  1916  001BF8  6EC2               	movwf	4034,c	;volatile
  1917                           
  1918                           ;user.c: 77: T0CON = 0b11000100;
  1919  001BFA  0EC4               	movlw	196
  1920  001BFC  6ED5               	movwf	4053,c	;volatile
  1921                           
  1922                           ;user.c: 85: INTCON2 = 0b11110100;
  1923  001BFE  0EF4               	movlw	244
  1924  001C00  6EF1               	movwf	intcon2,c	;volatile
  1925                           
  1926                           ;user.c: 95: INTCON = 0b00100000;
  1927  001C02  0E20               	movlw	32
  1928  001C04  6EF2               	movwf	intcon,c	;volatile
  1929                           
  1930                           ;user.c: 105: AlgorithmSelection();
  1931  001C06  ECEB  F00E         	call	_AlgorithmSelection	;wreg free
  1932                           
  1933                           ;user.c: 108: delay(1000);
  1934  001C0A  0E03               	movlw	3
  1935  001C0C  0100               	movlb	0	; () banked
  1936  001C0E  6F81               	movwf	(delay@ms+1)& (0+255),b
  1937  001C10  0EE8               	movlw	232
  1938  001C12  6F80               	movwf	delay@ms& (0+255),b
  1939  001C14  ECCD  F00D         	call	_delay	;wreg free
  1940  001C18  0012               	return		;funcret
  1941  001C1A                     __end_of_InitApp:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           prodh	equ	0xFF4
  1948                           prodl	equ	0xFF3
  1949                           intcon	equ	0xFF2
  1950                           intcon2	equ	0xFF1
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postinc2	equ	0xFDE
  1954                           postdec2	equ	0xFDD
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _delay *****************
  1960 ;; Defined at:
  1961 ;;		line 29 in file "user.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  ms              2    0[BANK0 ] unsigned int 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  x               2    3[BANK0 ] int 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1975 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;Total ram usage:        5 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    5
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_InitApp
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text9
  1990  001B9A                     __ptext9:
  1991                           	opt stack 0
  1992  001B9A                     _delay:
  1993                           	opt stack 24
  1994                           
  1995                           ;user.c: 30: int x = 0;
  1996                           
  1997                           ;incstack = 0
  1998  001B9A  0E00               	movlw	0
  1999  001B9C  0100               	movlb	0	; () banked
  2000  001B9E  6F84               	movwf	(delay@x+1)& (0+255),b
  2001  001BA0  0E00               	movlw	0
  2002  001BA2  6F83               	movwf	delay@x& (0+255),b
  2003                           
  2004                           ;user.c: 31: for (x = 0; x < ms; x++)
  2005  001BA4  0E00               	movlw	0
  2006  001BA6  0100               	movlb	0	; () banked
  2007  001BA8  6F84               	movwf	(delay@x+1)& (0+255),b
  2008  001BAA  0E00               	movlw	0
  2009  001BAC  6F83               	movwf	delay@x& (0+255),b
  2010  001BAE  D00C               	goto	l304
  2011  001BB0                     l1932:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2015  001BB0  0E0B               	movlw	11
  2016  001BB2  0100               	movlb	0	; () banked
  2017  001BB4  6F82               	movwf	??_delay& (0+255),b
  2018  001BB6  0E62               	movlw	98
  2019  001BB8                     u1897:
  2020  001BB8  2EE8               	decfsz	wreg,f,c
  2021  001BBA  D7FE               	goto	u1897
  2022  001BBC  2F82               	decfsz	??_delay& (0+255),f,b
  2023  001BBE  D7FC               	goto	u1897
  2024  001BC0  D000               	nop2	
  2025  001BC2  0100               	movlb	0	; () banked
  2026  001BC4  4B83               	infsnz	delay@x& (0+255),f,b
  2027  001BC6  2B84               	incf	(delay@x+1)& (0+255),f,b
  2028  001BC8                     l304:
  2029                           
  2030                           ; BSR set to: 0
  2031  001BC8  0100               	movlb	0	; () banked
  2032  001BCA  5180               	movf	delay@ms& (0+255),w,b
  2033  001BCC  0100               	movlb	0	; () banked
  2034  001BCE  5D83               	subwf	delay@x& (0+255),w,b
  2035  001BD0  0100               	movlb	0	; () banked
  2036  001BD2  5181               	movf	(delay@ms+1)& (0+255),w,b
  2037  001BD4  0100               	movlb	0	; () banked
  2038  001BD6  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2039  001BD8  A0D8               	btfss	status,0,c
  2040  001BDA  D7EA               	goto	l1932
  2041                           
  2042                           ; BSR set to: 0
  2043                           
  2044                           ; BSR set to: 0
  2045  001BDC  0012               	return		;funcret
  2046  001BDE                     __end_of_delay:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           prodh	equ	0xFF4
  2053                           prodl	equ	0xFF3
  2054                           intcon	equ	0xFF2
  2055                           intcon2	equ	0xFF1
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _AlgorithmSelection *****************
  2065 ;; Defined at:
  2066 ;;		line 112 in file "user.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;		None               void
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;Total ram usage:        0 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    5
  2087 ;; This function calls:
  2088 ;;		Nothing
  2089 ;; This function is called by:
  2090 ;;		_InitApp
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text10
  2095  001DD6                     __ptext10:
  2096                           	opt stack 0
  2097  001DD6                     _AlgorithmSelection:
  2098                           	opt stack 24
  2099                           
  2100                           ;user.c: 114: ADCON0 = 0b00100111;
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;incstack = 0
  2104  001DD6  0E27               	movlw	39
  2105  001DD8  6EC2               	movwf	4034,c	;volatile
  2106                           
  2107                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2108  001DDA  82C2               	bsf	4034,1,c	;volatile
  2109                           
  2110                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2111  001DDC  D000               	goto	l313
  2112  001DDE                     l313:
  2113  001DDE  B2C2               	btfsc	4034,1,c	;volatile
  2114  001DE0  D7FE               	goto	l313
  2115                           
  2116                           ;user.c: 119: if(ADRESL > 0b10000000)
  2117  001DE2  0E80               	movlw	128
  2118  001DE4  64C3               	cpfsgt	4035,c	;volatile
  2119  001DE6  D002               	goto	l1944
  2120                           
  2121                           ;user.c: 120: algorithm = LEFTWALL;
  2122  001DE8  0E00               	movlw	0
  2123  001DEA  D001               	goto	L5
  2124  001DEC                     l1944:
  2125                           
  2126                           ;user.c: 121: else
  2127                           ;user.c: 122: algorithm = RIGHTWALL;
  2128  001DEC  0E01               	movlw	1
  2129  001DEE                     L5:
  2130  001DEE  6E32               	movwf	_algorithm,c
  2131  001DF0  D000               	goto	l318
  2132  001DF2                     l318:
  2133  001DF2  0012               	return		;funcret
  2134  001DF4                     __end_of_AlgorithmSelection:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           intcon	equ	0xFF2
  2143                           intcon2	equ	0xFF1
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           postinc2	equ	0xFDE
  2147                           postdec2	equ	0xFDD
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _ConfigureOscillator *****************
  2153 ;; Defined at:
  2154 ;;		line 24 in file "system.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, status,2
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    5
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text11
  2183  001E04                     __ptext11:
  2184                           	opt stack 0
  2185  001E04                     _ConfigureOscillator:
  2186                           	opt stack 25
  2187                           
  2188                           ;system.c: 29: OSCCON = 0b01111100;
  2189                           
  2190                           ;incstack = 0
  2191  001E04  0E7C               	movlw	124
  2192  001E06  6ED3               	movwf	4051,c	;volatile
  2193                           
  2194                           ;system.c: 31: OSCTUNE = 0b01001111;
  2195  001E08  0E4F               	movlw	79
  2196  001E0A  6E9B               	movwf	3995,c	;volatile
  2197  001E0C  0012               	return		;funcret
  2198  001E0E                     __end_of_ConfigureOscillator:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           intcon2	equ	0xFF1
  2208                           postinc0	equ	0xFEE
  2209                           wreg	equ	0xFE8
  2210                           postinc2	equ	0xFDE
  2211                           postdec2	equ	0xFDD
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _low_isr *****************
  2217 ;; Defined at:
  2218 ;;		line 200 in file "interrupts.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		None
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;Total ram usage:       17 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    4
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		Interrupt level 1
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	intcodelo
  2247  000018                     __pintcodelo:
  2248                           	opt stack 0
  2249  000018                     _low_isr:
  2250                           	opt stack 23
  2251                           
  2252                           ;incstack = 0
  2253  000018  CFD8 F036          	movff	status,??_low_isr
  2254  00001C  CFE8 F037          	movff	wreg,??_low_isr+1
  2255  000020  CFE0 F038          	movff	bsr,??_low_isr+2
  2256  000024  CFFA F039          	movff	pclath,??_low_isr+3
  2257  000028  CFFB F03A          	movff	pclatu,??_low_isr+4
  2258  00002C  CFE9 F03B          	movff	fsr0l,??_low_isr+5
  2259  000030  CFEA F03C          	movff	fsr0h,??_low_isr+6
  2260  000034  CFE1 F03D          	movff	fsr1l,??_low_isr+7
  2261  000038  CFE2 F03E          	movff	fsr1h,??_low_isr+8
  2262  00003C  CFD9 F03F          	movff	fsr2l,??_low_isr+9
  2263  000040  CFDA F040          	movff	fsr2h,??_low_isr+10
  2264  000044  CFF3 F041          	movff	prodl,??_low_isr+11
  2265  000048  CFF4 F042          	movff	prodh,??_low_isr+12
  2266  00004C  CFF6 F043          	movff	tblptrl,??_low_isr+13
  2267  000050  CFF7 F044          	movff	tblptrh,??_low_isr+14
  2268  000054  CFF8 F045          	movff	tblptru,??_low_isr+15
  2269  000058  CFF5 F046          	movff	tablat,??_low_isr+16
  2270  00005C  C046  FFF5         	movff	??_low_isr+16,tablat
  2271  000060  C045  FFF8         	movff	??_low_isr+15,tblptru
  2272  000064  C044  FFF7         	movff	??_low_isr+14,tblptrh
  2273  000068  C043  FFF6         	movff	??_low_isr+13,tblptrl
  2274  00006C  C042  FFF4         	movff	??_low_isr+12,prodh
  2275  000070  C041  FFF3         	movff	??_low_isr+11,prodl
  2276  000074  C040  FFDA         	movff	??_low_isr+10,fsr2h
  2277  000078  C03F  FFD9         	movff	??_low_isr+9,fsr2l
  2278  00007C  C03E  FFE2         	movff	??_low_isr+8,fsr1h
  2279  000080  C03D  FFE1         	movff	??_low_isr+7,fsr1l
  2280  000084  C03C  FFEA         	movff	??_low_isr+6,fsr0h
  2281  000088  C03B  FFE9         	movff	??_low_isr+5,fsr0l
  2282  00008C  C03A  FFFB         	movff	??_low_isr+4,pclatu
  2283  000090  C039  FFFA         	movff	??_low_isr+3,pclath
  2284  000094  C038  FFE0         	movff	??_low_isr+2,bsr
  2285  000098  C037  FFE8         	movff	??_low_isr+1,wreg
  2286  00009C  C036  FFD8         	movff	??_low_isr,status
  2287  0000A0  0010               	retfie	
  2288  0000A2                     __end_of_low_isr:
  2289                           	opt stack 0
  2290                           pclatu	equ	0xFFB
  2291                           pclath	equ	0xFFA
  2292                           tblptru	equ	0xFF8
  2293                           tblptrh	equ	0xFF7
  2294                           tblptrl	equ	0xFF6
  2295                           tablat	equ	0xFF5
  2296                           prodh	equ	0xFF4
  2297                           prodl	equ	0xFF3
  2298                           intcon	equ	0xFF2
  2299                           intcon2	equ	0xFF1
  2300                           postinc0	equ	0xFEE
  2301                           fsr0h	equ	0xFEA
  2302                           fsr0l	equ	0xFE9
  2303                           wreg	equ	0xFE8
  2304                           fsr1h	equ	0xFE2
  2305                           fsr1l	equ	0xFE1
  2306                           bsr	equ	0xFE0
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _high_isr *****************
  2314 ;; Defined at:
  2315 ;;		line 106 in file "interrupts.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:       14 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    3
  2336 ;; This function calls:
  2337 ;;		_KController
  2338 ;;		_forward
  2339 ;;		_initialRotation
  2340 ;;		_merge
  2341 ;;		_motorCounterUpdate
  2342 ;;		_moveMouse
  2343 ;;		_rotate
  2344 ;;		_singleForward
  2345 ;;		_stateUpdate
  2346 ;; This function is called by:
  2347 ;;		Interrupt level 2
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	intcode
  2352  000008                     __pintcode:
  2353                           	opt stack 0
  2354  000008                     _high_isr:
  2355                           	opt stack 23
  2356                           
  2357                           ;incstack = 0
  2358  000008  CFFA F04D          	movff	pclath,??_high_isr
  2359  00000C  CFFB F04E          	movff	pclatu,??_high_isr+1
  2360  000010  CFE9 F04F          	movff	fsr0l,??_high_isr+2
  2361  000014  ED65  F009         	call	int_func,f	;refresh shadow registers
  2362                           pclatu	equ	0xFFB
  2363                           pclath	equ	0xFFA
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           prodh	equ	0xFF4
  2369                           prodl	equ	0xFF3
  2370                           intcon	equ	0xFF2
  2371                           intcon2	equ	0xFF1
  2372                           postinc0	equ	0xFEE
  2373                           fsr0h	equ	0xFEA
  2374                           fsr0l	equ	0xFE9
  2375                           wreg	equ	0xFE8
  2376                           fsr1h	equ	0xFE2
  2377                           fsr1l	equ	0xFE1
  2378                           bsr	equ	0xFE0
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385                           	psect	intcode_body
  2386  0012CA                     __pintcode_body:
  2387                           	opt stack 23
  2388  0012CA                     int_func:
  2389                           	opt stack 23
  2390  0012CA  0006               	pop		; remove dummy address from shadow register refresh
  2391  0012CC  CFEA F050          	movff	fsr0h,??_high_isr+3
  2392  0012D0  CFE1 F051          	movff	fsr1l,??_high_isr+4
  2393  0012D4  CFE2 F052          	movff	fsr1h,??_high_isr+5
  2394  0012D8  CFD9 F053          	movff	fsr2l,??_high_isr+6
  2395  0012DC  CFDA F054          	movff	fsr2h,??_high_isr+7
  2396  0012E0  CFF3 F055          	movff	prodl,??_high_isr+8
  2397  0012E4  CFF4 F056          	movff	prodh,??_high_isr+9
  2398  0012E8  CFF6 F057          	movff	tblptrl,??_high_isr+10
  2399  0012EC  CFF7 F058          	movff	tblptrh,??_high_isr+11
  2400  0012F0  CFF8 F059          	movff	tblptru,??_high_isr+12
  2401  0012F4  CFF5 F05A          	movff	tablat,??_high_isr+13
  2402                           
  2403                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2404  0012F8  A4F2               	btfss	intcon,2,c	;volatile
  2405  0012FA  D10E               	goto	i2l119
  2406                           
  2407                           ;interrupts.c: 126: {
  2408                           ;interrupts.c: 127: if(MotorDelayCounter > 2)
  2409  0012FC  BE18               	btfsc	_MotorDelayCounter+1,7,c
  2410  0012FE  D108               	goto	i2l1836
  2411  001300  5018               	movf	_MotorDelayCounter+1,w,c
  2412  001302  E104               	bnz	i2u138_40
  2413  001304  0E03               	movlw	3
  2414  001306  5C17               	subwf	_MotorDelayCounter,w,c
  2415  001308  A0D8               	btfss	status,0,c
  2416  00130A  D102               	goto	i2l1836
  2417  00130C                     i2u138_40:
  2418                           
  2419                           ;interrupts.c: 128: {
  2420                           ;interrupts.c: 129: stateUpdate();
  2421  00130C  ECA9  F00A         	call	_stateUpdate	;wreg free
  2422                           
  2423                           ;interrupts.c: 131: if(cState != pState)
  2424  001310  505D               	movf	_pState,w,c
  2425  001312  185B               	xorwf	_cState,w,c
  2426  001314  B4D8               	btfsc	status,2,c
  2427  001316  D002               	goto	i2l1736
  2428                           
  2429                           ;interrupts.c: 132: ChangeRequired = 1;
  2430  001318  0E01               	movlw	1
  2431  00131A  D001               	goto	L6
  2432  00131C                     i2l1736:
  2433                           
  2434                           ;interrupts.c: 133: else
  2435                           ;interrupts.c: 134: ChangeRequired = 0;
  2436  00131C  0E00               	movlw	0
  2437  00131E                     L6:
  2438  00131E  6E2F               	movwf	_ChangeRequired,c
  2439  001320  D000               	goto	i2l1738
  2440  001322                     i2l1738:
  2441                           
  2442                           ;interrupts.c: 136: if(ChangeRequired == 1 && RotateCounter == 0)
  2443  001322  042F               	decf	_ChangeRequired,w,c
  2444  001324  A4D8               	btfss	status,2,c
  2445  001326  D026               	goto	i2l1760
  2446  001328  501D               	movf	_RotateCounter,w,c
  2447  00132A  101E               	iorwf	_RotateCounter+1,w,c
  2448  00132C  A4D8               	btfss	status,2,c
  2449  00132E  D022               	goto	i2l1760
  2450                           
  2451                           ;interrupts.c: 137: {
  2452                           ;interrupts.c: 138: if(sensorValue[2] < 300-50 && sensorValue[3] < 300-50)
  2453  001330  BE0E               	btfsc	_sensorValue+5,7,c
  2454  001332  D006               	goto	i2l1744
  2455  001334  500E               	movf	_sensorValue+5,w,c
  2456  001336  E112               	bnz	i2l1752
  2457  001338  0EFA               	movlw	250
  2458  00133A  5C0D               	subwf	_sensorValue+4,w,c
  2459  00133C  B0D8               	btfsc	status,0,c
  2460  00133E  D00E               	goto	i2l1752
  2461  001340                     i2l1744:
  2462  001340  BE10               	btfsc	_sensorValue+7,7,c
  2463  001342  D006               	goto	i2l1746
  2464  001344  5010               	movf	_sensorValue+7,w,c
  2465  001346  E10A               	bnz	i2l1752
  2466  001348  0EFA               	movlw	250
  2467  00134A  5C0F               	subwf	_sensorValue+6,w,c
  2468  00134C  B0D8               	btfsc	status,0,c
  2469  00134E  D006               	goto	i2l1752
  2470  001350                     i2l1746:
  2471                           
  2472                           ;interrupts.c: 139: {
  2473                           ;interrupts.c: 140: if(justTurned == 1)
  2474  001350  0434               	decf	_justTurned,w,c
  2475                           
  2476                           ;interrupts.c: 142: else
  2477                           ;interrupts.c: 143: ForwardCounter = 350;
  2478                           
  2479                           ;interrupts.c: 141: ForwardCounter = 350;
  2480  001352  0E01               	movlw	1
  2481  001354  6E14               	movwf	_ForwardCounter+1,c
  2482  001356  0E5E               	movlw	94
  2483  001358  D004               	goto	L7
  2484                           
  2485                           ;interrupts.c: 144: } else
  2486  00135A  D005               	goto	i2l1754
  2487  00135C                     i2l1752:
  2488                           
  2489                           ;interrupts.c: 145: ForwardCounter = 1;
  2490  00135C  0E00               	movlw	0
  2491  00135E  6E14               	movwf	_ForwardCounter+1,c
  2492  001360  0E01               	movlw	1
  2493  001362                     L7:
  2494  001362  6E13               	movwf	_ForwardCounter,c
  2495  001364  D000               	goto	i2l1754
  2496  001366                     i2l1754:
  2497                           
  2498                           ;interrupts.c: 146: forward();
  2499  001366  ECC6  F00E         	call	_forward	;wreg free
  2500                           
  2501                           ;interrupts.c: 147: pState = cState;
  2502  00136A  C05B  F05D         	movff	_cState,_pState
  2503                           
  2504                           ;interrupts.c: 148: ChangeRequired = 0;
  2505  00136E  0E00               	movlw	0
  2506  001370  6E2F               	movwf	_ChangeRequired,c
  2507                           
  2508                           ;interrupts.c: 149: }
  2509  001372  D0C2               	goto	i2l90
  2510  001374                     i2l1760:
  2511                           
  2512                           ;interrupts.c: 150: else if(RotateCounter > 0) {
  2513  001374  BE1E               	btfsc	_RotateCounter+1,7,c
  2514  001376  D029               	goto	i2l1776
  2515  001378  501E               	movf	_RotateCounter+1,w,c
  2516  00137A  E103               	bnz	i2u145_40
  2517  00137C  041D               	decf	_RotateCounter,w,c
  2518  00137E  A0D8               	btfss	status,0,c
  2519  001380  D024               	goto	i2l1776
  2520  001382                     i2u145_40:
  2521                           
  2522                           ;interrupts.c: 151: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2523  001382  BE0E               	btfsc	_sensorValue+5,7,c
  2524  001384  D006               	goto	i2l1764
  2525  001386  500E               	movf	_sensorValue+5,w,c
  2526  001388  E114               	bnz	i2l1770
  2527  00138A  0E64               	movlw	100
  2528  00138C  5C0D               	subwf	_sensorValue+4,w,c
  2529  00138E  B0D8               	btfsc	status,0,c
  2530  001390  D010               	goto	i2l1770
  2531  001392                     i2l1764:
  2532  001392  BE10               	btfsc	_sensorValue+7,7,c
  2533  001394  D006               	goto	i2l1766
  2534  001396  5010               	movf	_sensorValue+7,w,c
  2535  001398  E10C               	bnz	i2l1770
  2536  00139A  0E64               	movlw	100
  2537  00139C  5C0F               	subwf	_sensorValue+6,w,c
  2538  00139E  B0D8               	btfsc	status,0,c
  2539  0013A0  D008               	goto	i2l1770
  2540  0013A2                     i2l1766:
  2541  0013A2  0433               	decf	_deadEnd,w,c
  2542  0013A4  A4D8               	btfss	status,2,c
  2543  0013A6  D005               	goto	i2l1770
  2544                           
  2545                           ;interrupts.c: 152: RotateCounter = 5;
  2546  0013A8  0E00               	movlw	0
  2547  0013AA  6E1E               	movwf	_RotateCounter+1,c
  2548  0013AC  0E05               	movlw	5
  2549  0013AE  6E1D               	movwf	_RotateCounter,c
  2550  0013B0  D000               	goto	i2l1770
  2551  0013B2                     i2l1770:
  2552                           
  2553                           ;interrupts.c: 153: rotate(rotatingSide);
  2554  0013B2  5035               	movf	_rotatingSide,w,c
  2555  0013B4  EC0D  F00E         	call	_rotate
  2556                           
  2557                           ;interrupts.c: 154: TurnRight = 0;
  2558  0013B8  0E00               	movlw	0
  2559  0013BA  6E22               	movwf	_TurnRight+1,c
  2560  0013BC  0E00               	movlw	0
  2561  0013BE  6E21               	movwf	_TurnRight,c
  2562                           
  2563                           ;interrupts.c: 155: TurnLeft = 0;
  2564  0013C0  0E00               	movlw	0
  2565  0013C2  6E20               	movwf	_TurnLeft+1,c
  2566  0013C4  0E00               	movlw	0
  2567  0013C6  6E1F               	movwf	_TurnLeft,c
  2568                           
  2569                           ;interrupts.c: 156: }
  2570  0013C8  D097               	goto	i2l90
  2571  0013CA                     i2l1776:
  2572                           
  2573                           ;interrupts.c: 157: else if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 
      +                          0)
  2574  0013CA  BE28               	btfsc	_controlToLeft+1,7,c
  2575  0013CC  D005               	goto	i2l1778
  2576  0013CE  5028               	movf	_controlToLeft+1,w,c
  2577  0013D0  E113               	bnz	i2l1782
  2578  0013D2  0427               	decf	_controlToLeft,w,c
  2579  0013D4  B0D8               	btfsc	status,0,c
  2580  0013D6  D010               	goto	i2l1782
  2581  0013D8                     i2l1778:
  2582  0013D8  BE2A               	btfsc	_controlToRight+1,7,c
  2583  0013DA  D005               	goto	i2l1780
  2584  0013DC  502A               	movf	_controlToRight+1,w,c
  2585  0013DE  E10C               	bnz	i2l1782
  2586  0013E0  0429               	decf	_controlToRight,w,c
  2587  0013E2  B0D8               	btfsc	status,0,c
  2588  0013E4  D009               	goto	i2l1782
  2589  0013E6                     i2l1780:
  2590  0013E6  BE14               	btfsc	_ForwardCounter+1,7,c
  2591  0013E8  D02C               	goto	i2l1798
  2592  0013EA  5014               	movf	_ForwardCounter+1,w,c
  2593  0013EC  E105               	bnz	i2l1782
  2594  0013EE  0413               	decf	_ForwardCounter,w,c
  2595  0013F0  B0D8               	btfsc	status,0,c
  2596  0013F2  D002               	goto	i2l1782
  2597  0013F4  D026               	goto	i2l1798
  2598  0013F6  D000               	goto	i2l1782
  2599  0013F8                     i2l1782:
  2600                           
  2601                           ;interrupts.c: 158: {
  2602                           ;interrupts.c: 159: KController();
  2603  0013F8  ECA2  F00D         	call	_KController	;wreg free
  2604                           
  2605                           ;interrupts.c: 161: if(controlToLeft > 0 )
  2606  0013FC  BE28               	btfsc	_controlToLeft+1,7,c
  2607  0013FE  D00E               	goto	i2l1790
  2608  001400  5028               	movf	_controlToLeft+1,w,c
  2609  001402  E103               	bnz	i2u152_40
  2610  001404  0427               	decf	_controlToLeft,w,c
  2611  001406  A0D8               	btfss	status,0,c
  2612  001408  D009               	goto	i2l1790
  2613  00140A                     i2u152_40:
  2614                           
  2615                           ;interrupts.c: 162: {
  2616                           ;interrupts.c: 163: motorCounterUpdate(RIGHT,0);
  2617  00140A  0E00               	movlw	0
  2618  00140C  6E47               	movwf	motorCounterUpdate@reverse,c
  2619  00140E  0E01               	movlw	1
  2620  001410  EC47  F00C         	call	_motorCounterUpdate
  2621                           
  2622                           ;interrupts.c: 164: controlToLeft--;
  2623  001414  0627               	decf	_controlToLeft,f,c
  2624  001416  A0D8               	btfss	status,0,c
  2625  001418  0628               	decf	_controlToLeft+1,f,c
  2626                           
  2627                           ;interrupts.c: 165: } else if(controlToRight > 0){
  2628  00141A  D06E               	goto	i2l90
  2629  00141C                     i2l1790:
  2630  00141C  BE2A               	btfsc	_controlToRight+1,7,c
  2631  00141E  D00E               	goto	i2l1796
  2632  001420  502A               	movf	_controlToRight+1,w,c
  2633  001422  E103               	bnz	i2u153_40
  2634  001424  0429               	decf	_controlToRight,w,c
  2635  001426  A0D8               	btfss	status,0,c
  2636  001428  D009               	goto	i2l1796
  2637  00142A                     i2u153_40:
  2638                           
  2639                           ;interrupts.c: 166: motorCounterUpdate(LEFT,0);
  2640  00142A  0E00               	movlw	0
  2641  00142C  6E47               	movwf	motorCounterUpdate@reverse,c
  2642  00142E  0E00               	movlw	0
  2643  001430  EC47  F00C         	call	_motorCounterUpdate
  2644                           
  2645                           ;interrupts.c: 167: controlToRight--;
  2646  001434  0629               	decf	_controlToRight,f,c
  2647  001436  A0D8               	btfss	status,0,c
  2648  001438  062A               	decf	_controlToRight+1,f,c
  2649                           
  2650                           ;interrupts.c: 168: } else {
  2651  00143A  D05E               	goto	i2l90
  2652  00143C                     i2l1796:
  2653                           
  2654                           ;interrupts.c: 169: forward();
  2655  00143C  ECC6  F00E         	call	_forward	;wreg free
  2656                           
  2657                           ;interrupts.c: 170: }
  2658                           ;interrupts.c: 172: } else if(ForwardCounter == 0)
  2659  001440  D05B               	goto	i2l90
  2660  001442                     i2l1798:
  2661  001442  5013               	movf	_ForwardCounter,w,c
  2662  001444  1014               	iorwf	_ForwardCounter+1,w,c
  2663  001446  A4D8               	btfss	status,2,c
  2664  001448  D057               	goto	i2l90
  2665                           
  2666                           ;interrupts.c: 173: {
  2667                           ;interrupts.c: 174: if(algorithm == LEFTWALL)
  2668  00144A  5032               	movf	_algorithm,w,c
  2669  00144C  A4D8               	btfss	status,2,c
  2670  00144E  D054               	goto	i2l90
  2671                           
  2672                           ;interrupts.c: 175: {
  2673                           ;interrupts.c: 176: if(cState == empty) initialRotation(LEFT,0);
  2674  001450  505B               	movf	_cState,w,c
  2675  001452  A4D8               	btfss	status,2,c
  2676  001454  D008               	goto	i2l1806
  2677  001456  0E00               	movlw	0
  2678  001458  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2679  00145A  0E00               	movlw	0
  2680  00145C  6E4A               	movwf	initialRotation@isDeadEnd,c
  2681  00145E  0E00               	movlw	0
  2682  001460  EC95  F00E         	call	_initialRotation
  2683  001464  D049               	goto	i2l90
  2684  001466                     i2l1806:
  2685                           
  2686                           ;interrupts.c: 177: else if(cState == twoside) singleForward();
  2687  001466  0E02               	movlw	2
  2688  001468  185B               	xorwf	_cState,w,c
  2689  00146A  A4D8               	btfss	status,2,c
  2690  00146C  D003               	goto	i2l1810
  2691  00146E  ECDB  F00E         	call	_singleForward	;wreg free
  2692  001472  D042               	goto	i2l90
  2693  001474                     i2l1810:
  2694                           
  2695                           ;interrupts.c: 178: else if(cState == threeside) initialRotation(LEFT,1);
  2696  001474  0E03               	movlw	3
  2697  001476  185B               	xorwf	_cState,w,c
  2698  001478  A4D8               	btfss	status,2,c
  2699  00147A  D008               	goto	i2l1814
  2700  00147C  0E00               	movlw	0
  2701  00147E  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2702  001480  0E01               	movlw	1
  2703  001482  6E4A               	movwf	initialRotation@isDeadEnd,c
  2704  001484  0E00               	movlw	0
  2705  001486  EC95  F00E         	call	_initialRotation
  2706  00148A  D036               	goto	i2l90
  2707  00148C                     i2l1814:
  2708                           
  2709                           ;interrupts.c: 179: else if(cState == leftside) singleForward();
  2710  00148C  0E04               	movlw	4
  2711  00148E  185B               	xorwf	_cState,w,c
  2712  001490  A4D8               	btfss	status,2,c
  2713  001492  D003               	goto	i2l1818
  2714  001494  ECDB  F00E         	call	_singleForward	;wreg free
  2715  001498  D02F               	goto	i2l90
  2716  00149A                     i2l1818:
  2717                           
  2718                           ;interrupts.c: 180: else if(cState == rightside) initialRotation(LEFT,0);
  2719  00149A  0E05               	movlw	5
  2720  00149C  185B               	xorwf	_cState,w,c
  2721  00149E  A4D8               	btfss	status,2,c
  2722  0014A0  D008               	goto	i2l1822
  2723  0014A2  0E00               	movlw	0
  2724  0014A4  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2725  0014A6  0E00               	movlw	0
  2726  0014A8  6E4A               	movwf	initialRotation@isDeadEnd,c
  2727  0014AA  0E00               	movlw	0
  2728  0014AC  EC95  F00E         	call	_initialRotation
  2729  0014B0  D023               	goto	i2l90
  2730  0014B2                     i2l1822:
  2731                           
  2732                           ;interrupts.c: 181: else if(cState == frontleft) initialRotation(RIGHT,0);
  2733  0014B2  0E06               	movlw	6
  2734  0014B4  185B               	xorwf	_cState,w,c
  2735  0014B6  A4D8               	btfss	status,2,c
  2736  0014B8  D008               	goto	i2l1826
  2737  0014BA  0E00               	movlw	0
  2738  0014BC  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2739  0014BE  0E00               	movlw	0
  2740  0014C0  6E4A               	movwf	initialRotation@isDeadEnd,c
  2741  0014C2  0E01               	movlw	1
  2742  0014C4  EC95  F00E         	call	_initialRotation
  2743  0014C8  D017               	goto	i2l90
  2744  0014CA                     i2l1826:
  2745                           
  2746                           ;interrupts.c: 182: else if(cState == frontright) initialRotation(LEFT,0);
  2747  0014CA  0E07               	movlw	7
  2748  0014CC  185B               	xorwf	_cState,w,c
  2749  0014CE  A4D8               	btfss	status,2,c
  2750  0014D0  D008               	goto	i2l1830
  2751  0014D2  0E00               	movlw	0
  2752  0014D4  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2753  0014D6  0E00               	movlw	0
  2754  0014D8  6E4A               	movwf	initialRotation@isDeadEnd,c
  2755  0014DA  0E00               	movlw	0
  2756  0014DC  EC95  F00E         	call	_initialRotation
  2757  0014E0  D00B               	goto	i2l90
  2758  0014E2                     i2l1830:
  2759                           
  2760                           ;interrupts.c: 183: else if(cState == front) initialRotation(LEFT,0);
  2761  0014E2  045B               	decf	_cState,w,c
  2762  0014E4  A4D8               	btfss	status,2,c
  2763  0014E6  D008               	goto	i2l90
  2764  0014E8  0E00               	movlw	0
  2765  0014EA  6E4B               	movwf	initialRotation@isDeadEnd+1,c
  2766  0014EC  0E00               	movlw	0
  2767  0014EE  6E4A               	movwf	initialRotation@isDeadEnd,c
  2768  0014F0  0E00               	movlw	0
  2769  0014F2  EC95  F00E         	call	_initialRotation
  2770  0014F6  D000               	goto	i2l90
  2771  0014F8                     i2l90:
  2772                           
  2773                           ;interrupts.c: 184: }
  2774                           ;interrupts.c: 185: }
  2775                           ;interrupts.c: 187: moveMouse(merge(LMotorCounter,RMotorCounter));
  2776  0014F8  C031  F047         	movff	_RMotorCounter,merge@right
  2777  0014FC  5030               	movf	_LMotorCounter,w,c
  2778  0014FE  ECFA  F00E         	call	_merge
  2779  001502  EC07  F00F         	call	_moveMouse
  2780                           
  2781                           ;interrupts.c: 188: MotorDelayCounter = 0;
  2782  001506  0E00               	movlw	0
  2783  001508  6E18               	movwf	_MotorDelayCounter+1,c
  2784  00150A  0E00               	movlw	0
  2785  00150C  6E17               	movwf	_MotorDelayCounter,c
  2786  00150E  D000               	goto	i2l1836
  2787  001510                     i2l1836:
  2788                           
  2789                           ;interrupts.c: 189: }
  2790                           ;interrupts.c: 191: MotorDelayCounter++;
  2791  001510  4A17               	infsnz	_MotorDelayCounter,f,c
  2792  001512  2A18               	incf	_MotorDelayCounter+1,f,c
  2793                           
  2794                           ;interrupts.c: 192: INTCONbits.TMR0IF = 0;
  2795  001514  94F2               	bcf	intcon,2,c	;volatile
  2796  001516  D000               	goto	i2l119
  2797  001518                     i2l119:
  2798  001518  C05A  FFF5         	movff	??_high_isr+13,tablat
  2799  00151C  C059  FFF8         	movff	??_high_isr+12,tblptru
  2800  001520  C058  FFF7         	movff	??_high_isr+11,tblptrh
  2801  001524  C057  FFF6         	movff	??_high_isr+10,tblptrl
  2802  001528  C056  FFF4         	movff	??_high_isr+9,prodh
  2803  00152C  C055  FFF3         	movff	??_high_isr+8,prodl
  2804  001530  C054  FFDA         	movff	??_high_isr+7,fsr2h
  2805  001534  C053  FFD9         	movff	??_high_isr+6,fsr2l
  2806  001538  C052  FFE2         	movff	??_high_isr+5,fsr1h
  2807  00153C  C051  FFE1         	movff	??_high_isr+4,fsr1l
  2808  001540  C050  FFEA         	movff	??_high_isr+3,fsr0h
  2809  001544  C04F  FFE9         	movff	??_high_isr+2,fsr0l
  2810  001548  C04E  FFFB         	movff	??_high_isr+1,pclatu
  2811  00154C  C04D  FFFA         	movff	??_high_isr,pclath
  2812  001550  0011               	retfie		f
  2813  001552                     __end_of_high_isr:
  2814                           	opt stack 0
  2815                           pclatu	equ	0xFFB
  2816                           pclath	equ	0xFFA
  2817                           tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           prodh	equ	0xFF4
  2822                           prodl	equ	0xFF3
  2823                           intcon	equ	0xFF2
  2824                           intcon2	equ	0xFF1
  2825                           postinc0	equ	0xFEE
  2826                           fsr0h	equ	0xFEA
  2827                           fsr0l	equ	0xFE9
  2828                           wreg	equ	0xFE8
  2829                           fsr1h	equ	0xFE2
  2830                           fsr1l	equ	0xFE1
  2831                           bsr	equ	0xFE0
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _stateUpdate *****************
  2839 ;; Defined at:
  2840 ;;		line 413 in file "interrupts.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;		None               void
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_high_isr
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text14
  2868  001552                     __ptext14:
  2869                           	opt stack 0
  2870  001552                     _stateUpdate:
  2871                           	opt stack 25
  2872                           
  2873                           ;interrupts.c: 415: if(sensorValue[0] < 120 && sensorValue[1] < 120 &&
  2874                           ;interrupts.c: 416: (sensorValue[2] < 300 && sensorValue[3] < 300))
  2875                           
  2876                           ;incstack = 0
  2877  001552  BE0A               	btfsc	_sensorValue+1,7,c
  2878  001554  D006               	goto	i2l1136
  2879  001556  500A               	movf	_sensorValue+1,w,c
  2880  001558  E11E               	bnz	i2l1144
  2881  00155A  0E78               	movlw	120
  2882  00155C  5C09               	subwf	_sensorValue,w,c
  2883  00155E  B0D8               	btfsc	status,0,c
  2884  001560  D01A               	goto	i2l1144
  2885  001562                     i2l1136:
  2886  001562  BE0C               	btfsc	_sensorValue+3,7,c
  2887  001564  D006               	goto	i2l1138
  2888  001566  500C               	movf	_sensorValue+3,w,c
  2889  001568  E116               	bnz	i2l1144
  2890  00156A  0E78               	movlw	120
  2891  00156C  5C0B               	subwf	_sensorValue+2,w,c
  2892  00156E  B0D8               	btfsc	status,0,c
  2893  001570  D012               	goto	i2l1144
  2894  001572                     i2l1138:
  2895  001572  BE0E               	btfsc	_sensorValue+5,7,c
  2896  001574  D006               	goto	i2l1140
  2897  001576  0E2C               	movlw	44
  2898  001578  5C0D               	subwf	_sensorValue+4,w,c
  2899  00157A  0E01               	movlw	1
  2900  00157C  580E               	subwfb	_sensorValue+5,w,c
  2901  00157E  B0D8               	btfsc	status,0,c
  2902  001580  D00A               	goto	i2l1144
  2903  001582                     i2l1140:
  2904  001582  BE10               	btfsc	_sensorValue+7,7,c
  2905  001584  D006               	goto	i2l1142
  2906  001586  0E2C               	movlw	44
  2907  001588  5C0F               	subwf	_sensorValue+6,w,c
  2908  00158A  0E01               	movlw	1
  2909  00158C  5810               	subwfb	_sensorValue+7,w,c
  2910  00158E  B0D8               	btfsc	status,0,c
  2911  001590  D002               	goto	i2l1144
  2912  001592                     i2l1142:
  2913                           
  2914                           ;interrupts.c: 417: cState = empty;
  2915  001592  0E00               	movlw	0
  2916  001594  D0E9               	goto	L14
  2917  001596                     i2l1144:
  2918                           
  2919                           ;interrupts.c: 418: else if(sensorValue[0] > 120 && sensorValue[1] > 120 &&
  2920                           ;interrupts.c: 419: (sensorValue[2] < 300 && sensorValue[3] < 300))
  2921  001596  BE0A               	btfsc	_sensorValue+1,7,c
  2922  001598  D020               	goto	i2l1154
  2923  00159A  500A               	movf	_sensorValue+1,w,c
  2924  00159C  E104               	bnz	i2u32_40
  2925  00159E  0E79               	movlw	121
  2926  0015A0  5C09               	subwf	_sensorValue,w,c
  2927  0015A2  A0D8               	btfss	status,0,c
  2928  0015A4  D01A               	goto	i2l1154
  2929  0015A6                     i2u32_40:
  2930  0015A6  BE0C               	btfsc	_sensorValue+3,7,c
  2931  0015A8  D018               	goto	i2l1154
  2932  0015AA  500C               	movf	_sensorValue+3,w,c
  2933  0015AC  E104               	bnz	i2u33_40
  2934  0015AE  0E79               	movlw	121
  2935  0015B0  5C0B               	subwf	_sensorValue+2,w,c
  2936  0015B2  A0D8               	btfss	status,0,c
  2937  0015B4  D012               	goto	i2l1154
  2938  0015B6                     i2u33_40:
  2939  0015B6  BE0E               	btfsc	_sensorValue+5,7,c
  2940  0015B8  D006               	goto	i2l1150
  2941  0015BA  0E2C               	movlw	44
  2942  0015BC  5C0D               	subwf	_sensorValue+4,w,c
  2943  0015BE  0E01               	movlw	1
  2944  0015C0  580E               	subwfb	_sensorValue+5,w,c
  2945  0015C2  B0D8               	btfsc	status,0,c
  2946  0015C4  D00A               	goto	i2l1154
  2947  0015C6                     i2l1150:
  2948  0015C6  BE10               	btfsc	_sensorValue+7,7,c
  2949  0015C8  D006               	goto	i2l1152
  2950  0015CA  0E2C               	movlw	44
  2951  0015CC  5C0F               	subwf	_sensorValue+6,w,c
  2952  0015CE  0E01               	movlw	1
  2953  0015D0  5810               	subwfb	_sensorValue+7,w,c
  2954  0015D2  B0D8               	btfsc	status,0,c
  2955  0015D4  D002               	goto	i2l1154
  2956  0015D6                     i2l1152:
  2957                           
  2958                           ;interrupts.c: 420: cState = twoside;
  2959  0015D6  0E02               	movlw	2
  2960  0015D8  D0C7               	goto	L14
  2961  0015DA                     i2l1154:
  2962                           
  2963                           ;interrupts.c: 421: else if(sensorValue[0] > 120 && sensorValue[1] > 120 &&
  2964                           ;interrupts.c: 422: (sensorValue[2] > 300 && sensorValue[3] > 300))
  2965  0015DA  BE0A               	btfsc	_sensorValue+1,7,c
  2966  0015DC  D01F               	goto	i2l1164
  2967  0015DE  500A               	movf	_sensorValue+1,w,c
  2968  0015E0  E104               	bnz	i2u36_40
  2969  0015E2  0E79               	movlw	121
  2970  0015E4  5C09               	subwf	_sensorValue,w,c
  2971  0015E6  A0D8               	btfss	status,0,c
  2972  0015E8  D019               	goto	i2l1164
  2973  0015EA                     i2u36_40:
  2974  0015EA  BE0C               	btfsc	_sensorValue+3,7,c
  2975  0015EC  D017               	goto	i2l1164
  2976  0015EE  500C               	movf	_sensorValue+3,w,c
  2977  0015F0  E104               	bnz	i2u37_40
  2978  0015F2  0E79               	movlw	121
  2979  0015F4  5C0B               	subwf	_sensorValue+2,w,c
  2980  0015F6  A0D8               	btfss	status,0,c
  2981  0015F8  D011               	goto	i2l1164
  2982  0015FA                     i2u37_40:
  2983  0015FA  BE0E               	btfsc	_sensorValue+5,7,c
  2984  0015FC  D00F               	goto	i2l1164
  2985  0015FE  0E2D               	movlw	45
  2986  001600  5C0D               	subwf	_sensorValue+4,w,c
  2987  001602  0E01               	movlw	1
  2988  001604  580E               	subwfb	_sensorValue+5,w,c
  2989  001606  B0D8               	btfsc	status,0,c
  2990  001608  BE10               	btfsc	_sensorValue+7,7,c
  2991  00160A  D008               	goto	i2l1164
  2992  00160C  0E2D               	movlw	45
  2993  00160E  5C0F               	subwf	_sensorValue+6,w,c
  2994  001610  0E01               	movlw	1
  2995  001612  5810               	subwfb	_sensorValue+7,w,c
  2996  001614  A0D8               	btfss	status,0,c
  2997  001616  D002               	goto	i2l1164
  2998                           
  2999                           ;interrupts.c: 423: cState = threeside;
  3000  001618  0E03               	movlw	3
  3001  00161A  D0A6               	goto	L14
  3002  00161C                     i2l1164:
  3003                           
  3004                           ;interrupts.c: 424: else if(sensorValue[0] > 120 && sensorValue[1] < 120 &&
  3005                           ;interrupts.c: 425: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3006  00161C  BE0A               	btfsc	_sensorValue+1,7,c
  3007  00161E  D020               	goto	i2l1174
  3008  001620  500A               	movf	_sensorValue+1,w,c
  3009  001622  E104               	bnz	i2u40_40
  3010  001624  0E79               	movlw	121
  3011  001626  5C09               	subwf	_sensorValue,w,c
  3012  001628  A0D8               	btfss	status,0,c
  3013  00162A  D01A               	goto	i2l1174
  3014  00162C                     i2u40_40:
  3015  00162C  BE0C               	btfsc	_sensorValue+3,7,c
  3016  00162E  D006               	goto	i2l1168
  3017  001630  500C               	movf	_sensorValue+3,w,c
  3018  001632  E116               	bnz	i2l1174
  3019  001634  0E78               	movlw	120
  3020  001636  5C0B               	subwf	_sensorValue+2,w,c
  3021  001638  B0D8               	btfsc	status,0,c
  3022  00163A  D012               	goto	i2l1174
  3023  00163C                     i2l1168:
  3024  00163C  BE0E               	btfsc	_sensorValue+5,7,c
  3025  00163E  D006               	goto	i2l1170
  3026  001640  0E2C               	movlw	44
  3027  001642  5C0D               	subwf	_sensorValue+4,w,c
  3028  001644  0E01               	movlw	1
  3029  001646  580E               	subwfb	_sensorValue+5,w,c
  3030  001648  B0D8               	btfsc	status,0,c
  3031  00164A  D00A               	goto	i2l1174
  3032  00164C                     i2l1170:
  3033  00164C  BE10               	btfsc	_sensorValue+7,7,c
  3034  00164E  D006               	goto	i2l1172
  3035  001650  0E2C               	movlw	44
  3036  001652  5C0F               	subwf	_sensorValue+6,w,c
  3037  001654  0E01               	movlw	1
  3038  001656  5810               	subwfb	_sensorValue+7,w,c
  3039  001658  B0D8               	btfsc	status,0,c
  3040  00165A  D002               	goto	i2l1174
  3041  00165C                     i2l1172:
  3042                           
  3043                           ;interrupts.c: 426: cState = leftside;
  3044  00165C  0E04               	movlw	4
  3045  00165E  D084               	goto	L14
  3046  001660                     i2l1174:
  3047                           
  3048                           ;interrupts.c: 427: else if(sensorValue[0] < 120 && sensorValue[1] > 120 &&
  3049                           ;interrupts.c: 428: (sensorValue[2] < 300 && sensorValue[3] < 300))
  3050  001660  BE0A               	btfsc	_sensorValue+1,7,c
  3051  001662  D006               	goto	i2l1176
  3052  001664  500A               	movf	_sensorValue+1,w,c
  3053  001666  E11E               	bnz	i2l1184
  3054  001668  0E78               	movlw	120
  3055  00166A  5C09               	subwf	_sensorValue,w,c
  3056  00166C  B0D8               	btfsc	status,0,c
  3057  00166E  D01A               	goto	i2l1184
  3058  001670                     i2l1176:
  3059  001670  BE0C               	btfsc	_sensorValue+3,7,c
  3060  001672  D018               	goto	i2l1184
  3061  001674  500C               	movf	_sensorValue+3,w,c
  3062  001676  E104               	bnz	i2u45_40
  3063  001678  0E79               	movlw	121
  3064  00167A  5C0B               	subwf	_sensorValue+2,w,c
  3065  00167C  A0D8               	btfss	status,0,c
  3066  00167E  D012               	goto	i2l1184
  3067  001680                     i2u45_40:
  3068  001680  BE0E               	btfsc	_sensorValue+5,7,c
  3069  001682  D006               	goto	i2l1180
  3070  001684  0E2C               	movlw	44
  3071  001686  5C0D               	subwf	_sensorValue+4,w,c
  3072  001688  0E01               	movlw	1
  3073  00168A  580E               	subwfb	_sensorValue+5,w,c
  3074  00168C  B0D8               	btfsc	status,0,c
  3075  00168E  D00A               	goto	i2l1184
  3076  001690                     i2l1180:
  3077  001690  BE10               	btfsc	_sensorValue+7,7,c
  3078  001692  D006               	goto	i2l1182
  3079  001694  0E2C               	movlw	44
  3080  001696  5C0F               	subwf	_sensorValue+6,w,c
  3081  001698  0E01               	movlw	1
  3082  00169A  5810               	subwfb	_sensorValue+7,w,c
  3083  00169C  B0D8               	btfsc	status,0,c
  3084  00169E  D002               	goto	i2l1184
  3085  0016A0                     i2l1182:
  3086                           
  3087                           ;interrupts.c: 429: cState = rightside;
  3088  0016A0  0E05               	movlw	5
  3089  0016A2  D062               	goto	L14
  3090  0016A4                     i2l1184:
  3091                           
  3092                           ;interrupts.c: 430: else if(sensorValue[0] > 120 && sensorValue[1] < 120 &&
  3093                           ;interrupts.c: 431: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3094  0016A4  BE0A               	btfsc	_sensorValue+1,7,c
  3095  0016A6  D01F               	goto	i2l1194
  3096  0016A8  500A               	movf	_sensorValue+1,w,c
  3097  0016AA  E104               	bnz	i2u48_40
  3098  0016AC  0E79               	movlw	121
  3099  0016AE  5C09               	subwf	_sensorValue,w,c
  3100  0016B0  A0D8               	btfss	status,0,c
  3101  0016B2  D019               	goto	i2l1194
  3102  0016B4                     i2u48_40:
  3103  0016B4  BE0C               	btfsc	_sensorValue+3,7,c
  3104  0016B6  D006               	goto	i2l1188
  3105  0016B8  500C               	movf	_sensorValue+3,w,c
  3106  0016BA  E115               	bnz	i2l1194
  3107  0016BC  0E78               	movlw	120
  3108  0016BE  5C0B               	subwf	_sensorValue+2,w,c
  3109  0016C0  B0D8               	btfsc	status,0,c
  3110  0016C2  D011               	goto	i2l1194
  3111  0016C4                     i2l1188:
  3112  0016C4  BE0E               	btfsc	_sensorValue+5,7,c
  3113  0016C6  D00F               	goto	i2l1194
  3114  0016C8  0E2D               	movlw	45
  3115  0016CA  5C0D               	subwf	_sensorValue+4,w,c
  3116  0016CC  0E01               	movlw	1
  3117  0016CE  580E               	subwfb	_sensorValue+5,w,c
  3118  0016D0  B0D8               	btfsc	status,0,c
  3119  0016D2  BE10               	btfsc	_sensorValue+7,7,c
  3120  0016D4  D008               	goto	i2l1194
  3121  0016D6  0E2D               	movlw	45
  3122  0016D8  5C0F               	subwf	_sensorValue+6,w,c
  3123  0016DA  0E01               	movlw	1
  3124  0016DC  5810               	subwfb	_sensorValue+7,w,c
  3125  0016DE  A0D8               	btfss	status,0,c
  3126  0016E0  D002               	goto	i2l1194
  3127                           
  3128                           ;interrupts.c: 432: cState = frontleft;
  3129  0016E2  0E06               	movlw	6
  3130  0016E4  D041               	goto	L14
  3131  0016E6                     i2l1194:
  3132                           
  3133                           ;interrupts.c: 433: else if(sensorValue[0] < 120 && sensorValue[1] > 120 &&
  3134                           ;interrupts.c: 434: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3135  0016E6  BE0A               	btfsc	_sensorValue+1,7,c
  3136  0016E8  D006               	goto	i2l1196
  3137  0016EA  500A               	movf	_sensorValue+1,w,c
  3138  0016EC  E11D               	bnz	i2l1204
  3139  0016EE  0E78               	movlw	120
  3140  0016F0  5C09               	subwf	_sensorValue,w,c
  3141  0016F2  B0D8               	btfsc	status,0,c
  3142  0016F4  D019               	goto	i2l1204
  3143  0016F6                     i2l1196:
  3144  0016F6  BE0C               	btfsc	_sensorValue+3,7,c
  3145  0016F8  D017               	goto	i2l1204
  3146  0016FA  500C               	movf	_sensorValue+3,w,c
  3147  0016FC  E104               	bnz	i2u53_40
  3148  0016FE  0E79               	movlw	121
  3149  001700  5C0B               	subwf	_sensorValue+2,w,c
  3150  001702  A0D8               	btfss	status,0,c
  3151  001704  D011               	goto	i2l1204
  3152  001706                     i2u53_40:
  3153  001706  BE0E               	btfsc	_sensorValue+5,7,c
  3154  001708  D00F               	goto	i2l1204
  3155  00170A  0E2D               	movlw	45
  3156  00170C  5C0D               	subwf	_sensorValue+4,w,c
  3157  00170E  0E01               	movlw	1
  3158  001710  580E               	subwfb	_sensorValue+5,w,c
  3159  001712  B0D8               	btfsc	status,0,c
  3160  001714  BE10               	btfsc	_sensorValue+7,7,c
  3161  001716  D008               	goto	i2l1204
  3162  001718  0E2D               	movlw	45
  3163  00171A  5C0F               	subwf	_sensorValue+6,w,c
  3164  00171C  0E01               	movlw	1
  3165  00171E  5810               	subwfb	_sensorValue+7,w,c
  3166  001720  A0D8               	btfss	status,0,c
  3167  001722  D002               	goto	i2l1204
  3168                           
  3169                           ;interrupts.c: 435: cState = frontright;
  3170  001724  0E07               	movlw	7
  3171  001726  D020               	goto	L14
  3172  001728                     i2l1204:
  3173                           
  3174                           ;interrupts.c: 436: else if(sensorValue[0] < 120 && sensorValue[1] < 120 &&
  3175                           ;interrupts.c: 437: (sensorValue[2] > 300 && sensorValue[3] > 300))
  3176  001728  BE0A               	btfsc	_sensorValue+1,7,c
  3177  00172A  D006               	goto	i2l1206
  3178  00172C  500A               	movf	_sensorValue+1,w,c
  3179  00172E  E11E               	bnz	i2l226
  3180  001730  0E78               	movlw	120
  3181  001732  5C09               	subwf	_sensorValue,w,c
  3182  001734  B0D8               	btfsc	status,0,c
  3183  001736  D01A               	goto	i2l226
  3184  001738                     i2l1206:
  3185  001738  BE0C               	btfsc	_sensorValue+3,7,c
  3186  00173A  D006               	goto	i2l1208
  3187  00173C  500C               	movf	_sensorValue+3,w,c
  3188  00173E  E116               	bnz	i2l226
  3189  001740  0E78               	movlw	120
  3190  001742  5C0B               	subwf	_sensorValue+2,w,c
  3191  001744  B0D8               	btfsc	status,0,c
  3192  001746  D012               	goto	i2l226
  3193  001748                     i2l1208:
  3194  001748  BE0E               	btfsc	_sensorValue+5,7,c
  3195  00174A  D010               	goto	i2l226
  3196  00174C  0E2D               	movlw	45
  3197  00174E  5C0D               	subwf	_sensorValue+4,w,c
  3198  001750  0E01               	movlw	1
  3199  001752  580E               	subwfb	_sensorValue+5,w,c
  3200  001754  B0D8               	btfsc	status,0,c
  3201  001756  BE10               	btfsc	_sensorValue+7,7,c
  3202  001758  D009               	goto	i2l226
  3203  00175A  0E2D               	movlw	45
  3204  00175C  5C0F               	subwf	_sensorValue+6,w,c
  3205  00175E  0E01               	movlw	1
  3206  001760  5810               	subwfb	_sensorValue+7,w,c
  3207  001762  A0D8               	btfss	status,0,c
  3208  001764  D003               	goto	i2l226
  3209                           
  3210                           ;interrupts.c: 438: cState = front;
  3211  001766  0E01               	movlw	1
  3212  001768                     L14:
  3213  001768  6E5B               	movwf	_cState,c
  3214  00176A  D000               	goto	i2l226
  3215  00176C                     i2l226:
  3216  00176C  0012               	return		;funcret
  3217  00176E                     __end_of_stateUpdate:
  3218                           	opt stack 0
  3219                           pclatu	equ	0xFFB
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           intcon	equ	0xFF2
  3228                           intcon2	equ	0xFF1
  3229                           postinc0	equ	0xFEE
  3230                           fsr0h	equ	0xFEA
  3231                           fsr0l	equ	0xFE9
  3232                           wreg	equ	0xFE8
  3233                           fsr1h	equ	0xFE2
  3234                           fsr1l	equ	0xFE1
  3235                           bsr	equ	0xFE0
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _singleForward *****************
  3243 ;; Defined at:
  3244 ;;		line 383 in file "interrupts.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    2
  3265 ;; This function calls:
  3266 ;;		_forward
  3267 ;; This function is called by:
  3268 ;;		_high_isr
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text15
  3273  001DB6                     __ptext15:
  3274                           	opt stack 0
  3275  001DB6                     _singleForward:
  3276                           	opt stack 23
  3277                           
  3278                           ;interrupts.c: 385: if(ForwardCounter == 0 || ForwardCounter == 1)
  3279                           
  3280                           ;incstack = 0
  3281  001DB6  5013               	movf	_ForwardCounter,w,c
  3282  001DB8  1014               	iorwf	_ForwardCounter+1,w,c
  3283  001DBA  B4D8               	btfsc	status,2,c
  3284  001DBC  D004               	goto	i2l1660
  3285  001DBE  0413               	decf	_ForwardCounter,w,c
  3286  001DC0  1014               	iorwf	_ForwardCounter+1,w,c
  3287  001DC2  A4D8               	btfss	status,2,c
  3288  001DC4  D007               	goto	i2l203
  3289  001DC6                     i2l1660:
  3290                           
  3291                           ;interrupts.c: 386: {
  3292                           ;interrupts.c: 387: ForwardCounter = 1;
  3293  001DC6  0E00               	movlw	0
  3294  001DC8  6E14               	movwf	_ForwardCounter+1,c
  3295  001DCA  0E01               	movlw	1
  3296  001DCC  6E13               	movwf	_ForwardCounter,c
  3297                           
  3298                           ;interrupts.c: 388: forward();
  3299  001DCE  ECC6  F00E         	call	_forward	;wreg free
  3300  001DD2  D000               	goto	i2l203
  3301  001DD4                     i2l203:
  3302  001DD4  0012               	return		;funcret
  3303  001DD6                     __end_of_singleForward:
  3304                           	opt stack 0
  3305                           pclatu	equ	0xFFB
  3306                           pclath	equ	0xFFA
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           intcon	equ	0xFF2
  3314                           intcon2	equ	0xFF1
  3315                           postinc0	equ	0xFEE
  3316                           fsr0h	equ	0xFEA
  3317                           fsr0l	equ	0xFE9
  3318                           wreg	equ	0xFE8
  3319                           fsr1h	equ	0xFE2
  3320                           fsr1l	equ	0xFE1
  3321                           bsr	equ	0xFE0
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _forward *****************
  3329 ;; Defined at:
  3330 ;;		line 373 in file "interrupts.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;		None               void
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:        0 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    1
  3351 ;; This function calls:
  3352 ;;		_motorCounterUpdate
  3353 ;; This function is called by:
  3354 ;;		_high_isr
  3355 ;;		_singleForward
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text16
  3360  001D8C                     __ptext16:
  3361                           	opt stack 0
  3362  001D8C                     _forward:
  3363                           	opt stack 23
  3364                           
  3365                           ;interrupts.c: 375: motorCounterUpdate(RIGHT,0);
  3366                           
  3367                           ;incstack = 0
  3368  001D8C  0E00               	movlw	0
  3369  001D8E  6E47               	movwf	motorCounterUpdate@reverse,c
  3370  001D90  0E01               	movlw	1
  3371  001D92  EC47  F00C         	call	_motorCounterUpdate
  3372                           
  3373                           ;interrupts.c: 376: motorCounterUpdate(LEFT,0);
  3374  001D96  0E00               	movlw	0
  3375  001D98  6E47               	movwf	motorCounterUpdate@reverse,c
  3376  001D9A  0E00               	movlw	0
  3377  001D9C  EC47  F00C         	call	_motorCounterUpdate
  3378                           
  3379                           ;interrupts.c: 377: ForwardCounter--;
  3380  001DA0  0613               	decf	_ForwardCounter,f,c
  3381  001DA2  A0D8               	btfss	status,0,c
  3382  001DA4  0614               	decf	_ForwardCounter+1,f,c
  3383                           
  3384                           ;interrupts.c: 378: if(ForwardCounter == 0)
  3385  001DA6  5013               	movf	_ForwardCounter,w,c
  3386  001DA8  1014               	iorwf	_ForwardCounter+1,w,c
  3387  001DAA  A4D8               	btfss	status,2,c
  3388  001DAC  D003               	goto	i2l197
  3389                           
  3390                           ;interrupts.c: 379: justTurned = 0;
  3391  001DAE  0E00               	movlw	0
  3392  001DB0  6E34               	movwf	_justTurned,c
  3393  001DB2  D000               	goto	i2l197
  3394  001DB4                     i2l197:
  3395  001DB4  0012               	return		;funcret
  3396  001DB6                     __end_of_forward:
  3397                           	opt stack 0
  3398                           pclatu	equ	0xFFB
  3399                           pclath	equ	0xFFA
  3400                           tblptru	equ	0xFF8
  3401                           tblptrh	equ	0xFF7
  3402                           tblptrl	equ	0xFF6
  3403                           tablat	equ	0xFF5
  3404                           prodh	equ	0xFF4
  3405                           prodl	equ	0xFF3
  3406                           intcon	equ	0xFF2
  3407                           intcon2	equ	0xFF1
  3408                           postinc0	equ	0xFEE
  3409                           fsr0h	equ	0xFEA
  3410                           fsr0l	equ	0xFE9
  3411                           wreg	equ	0xFE8
  3412                           fsr1h	equ	0xFE2
  3413                           fsr1l	equ	0xFE1
  3414                           bsr	equ	0xFE0
  3415                           postinc2	equ	0xFDE
  3416                           postdec2	equ	0xFDD
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421 ;; *************** function _moveMouse *****************
  3422 ;; Defined at:
  3423 ;;		line 289 in file "interrupts.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  action          1    wreg     unsigned char 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  action          1   17[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;		None               void
  3430 ;; Registers used:
  3431 ;;		wreg
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;Total ram usage:        1 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_high_isr
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text17
  3451  001E0E                     __ptext17:
  3452                           	opt stack 0
  3453  001E0E                     _moveMouse:
  3454                           	opt stack 25
  3455                           
  3456                           ;incstack = 0
  3457                           ;moveMouse@action stored from wreg
  3458  001E0E  6E47               	movwf	moveMouse@action,c
  3459                           
  3460                           ;interrupts.c: 291: LATC = action;
  3461  001E10  C047  FF8B         	movff	moveMouse@action,3979	;volatile
  3462  001E14  0012               	return		;funcret
  3463  001E16                     __end_of_moveMouse:
  3464                           	opt stack 0
  3465                           pclatu	equ	0xFFB
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           intcon2	equ	0xFF1
  3475                           postinc0	equ	0xFEE
  3476                           fsr0h	equ	0xFEA
  3477                           fsr0l	equ	0xFE9
  3478                           wreg	equ	0xFE8
  3479                           fsr1h	equ	0xFE2
  3480                           fsr1l	equ	0xFE1
  3481                           bsr	equ	0xFE0
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _merge *****************
  3489 ;; Defined at:
  3490 ;;		line 282 in file "interrupts.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  left            1    wreg     unsigned char 
  3493 ;;  right           1   17[COMRAM] unsigned char 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  left            1   18[COMRAM] unsigned char 
  3496 ;;  merged          1   19[COMRAM] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      unsigned char 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3506 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;Total ram usage:        3 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_high_isr
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text18
  3520  001DF4                     __ptext18:
  3521                           	opt stack 0
  3522  001DF4                     _merge:
  3523                           	opt stack 25
  3524                           
  3525                           ;incstack = 0
  3526                           ;merge@left stored from wreg
  3527  001DF4  6E48               	movwf	merge@left,c
  3528                           
  3529                           ;interrupts.c: 284: unsigned char merged;
  3530                           ;interrupts.c: 285: merged = left + (right << 4);
  3531  001DF6  3847               	swapf	merge@right,w,c
  3532  001DF8  0BF0               	andlw	240
  3533  001DFA  2448               	addwf	merge@left,w,c
  3534  001DFC  6E49               	movwf	merge@merged,c
  3535                           
  3536                           ;interrupts.c: 286: return merged;
  3537  001DFE  5049               	movf	merge@merged,w,c
  3538  001E00  D000               	goto	i2l163
  3539  001E02                     i2l163:
  3540  001E02  0012               	return		;funcret
  3541  001E04                     __end_of_merge:
  3542                           	opt stack 0
  3543                           pclatu	equ	0xFFB
  3544                           pclath	equ	0xFFA
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           intcon2	equ	0xFF1
  3553                           postinc0	equ	0xFEE
  3554                           fsr0h	equ	0xFEA
  3555                           fsr0l	equ	0xFE9
  3556                           wreg	equ	0xFE8
  3557                           fsr1h	equ	0xFE2
  3558                           fsr1l	equ	0xFE1
  3559                           bsr	equ	0xFE0
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _initialRotation *****************
  3567 ;; Defined at:
  3568 ;;		line 393 in file "interrupts.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  side            1    wreg     enum E4145
  3571 ;;  isDeadEnd       2   20[COMRAM] int 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  side            1   22[COMRAM] enum E4145
  3574 ;; Return value:  Size  Location     Type
  3575 ;;		None               void
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3583 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;Total ram usage:        3 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    2
  3590 ;; This function calls:
  3591 ;;		_rotate
  3592 ;; This function is called by:
  3593 ;;		_high_isr
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text19
  3598  001D2A                     __ptext19:
  3599                           	opt stack 0
  3600  001D2A                     _initialRotation:
  3601                           	opt stack 23
  3602                           
  3603                           ;incstack = 0
  3604                           ;initialRotation@side stored from wreg
  3605  001D2A  6E4C               	movwf	initialRotation@side,c
  3606                           
  3607                           ;interrupts.c: 395: if(isDeadEnd == 1)
  3608  001D2C  044A               	decf	initialRotation@isDeadEnd,w,c
  3609  001D2E  104B               	iorwf	initialRotation@isDeadEnd+1,w,c
  3610  001D30  A4D8               	btfss	status,2,c
  3611  001D32  D006               	goto	i2l1650
  3612                           
  3613                           ;interrupts.c: 396: {
  3614                           ;interrupts.c: 397: RotateCounter = 170*2;
  3615  001D34  0E01               	movlw	1
  3616  001D36  6E1E               	movwf	_RotateCounter+1,c
  3617  001D38  0E54               	movlw	84
  3618  001D3A  6E1D               	movwf	_RotateCounter,c
  3619                           
  3620                           ;interrupts.c: 398: deadEnd = 1;
  3621  001D3C  0E01               	movlw	1
  3622  001D3E  D005               	goto	L15
  3623  001D40                     i2l1650:
  3624                           
  3625                           ;interrupts.c: 400: else
  3626                           ;interrupts.c: 401: {
  3627                           ;interrupts.c: 402: RotateCounter = 170;
  3628  001D40  0E00               	movlw	0
  3629  001D42  6E1E               	movwf	_RotateCounter+1,c
  3630  001D44  0EAA               	movlw	170
  3631  001D46  6E1D               	movwf	_RotateCounter,c
  3632                           
  3633                           ;interrupts.c: 403: deadEnd = 0;
  3634  001D48  0E00               	movlw	0
  3635  001D4A                     L15:
  3636  001D4A  6E33               	movwf	_deadEnd,c
  3637  001D4C  D000               	goto	i2l1652
  3638  001D4E                     i2l1652:
  3639                           
  3640                           ;interrupts.c: 404: }
  3641                           ;interrupts.c: 406: rotatingSide = side;
  3642  001D4E  C04C  F035         	movff	initialRotation@side,_rotatingSide
  3643                           
  3644                           ;interrupts.c: 407: justTurned = 1;
  3645  001D52  0E01               	movlw	1
  3646  001D54  6E34               	movwf	_justTurned,c
  3647                           
  3648                           ;interrupts.c: 408: rotate(rotatingSide);
  3649  001D56  5035               	movf	_rotatingSide,w,c
  3650  001D58  EC0D  F00E         	call	_rotate
  3651  001D5C  0012               	return		;funcret
  3652  001D5E                     __end_of_initialRotation:
  3653                           	opt stack 0
  3654                           pclatu	equ	0xFFB
  3655                           pclath	equ	0xFFA
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           intcon2	equ	0xFF1
  3664                           postinc0	equ	0xFEE
  3665                           fsr0h	equ	0xFEA
  3666                           fsr0l	equ	0xFE9
  3667                           wreg	equ	0xFE8
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           bsr	equ	0xFE0
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _rotate *****************
  3678 ;; Defined at:
  3679 ;;		line 328 in file "interrupts.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  side            1    wreg     enum E4145
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  side            1   19[COMRAM] enum E4145
  3684 ;; Return value:  Size  Location     Type
  3685 ;;		None               void
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        1 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    1
  3700 ;; This function calls:
  3701 ;;		_motorCounterUpdate
  3702 ;; This function is called by:
  3703 ;;		_high_isr
  3704 ;;		_initialRotation
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text20
  3709  001C1A                     __ptext20:
  3710                           	opt stack 0
  3711  001C1A                     _rotate:
  3712                           	opt stack 24
  3713                           
  3714                           ;incstack = 0
  3715                           ;rotate@side stored from wreg
  3716  001C1A  6E49               	movwf	rotate@side,c
  3717                           
  3718                           ;interrupts.c: 330: if (side == LEFT){
  3719  001C1C  5049               	movf	rotate@side,w,c
  3720  001C1E  A4D8               	btfss	status,2,c
  3721  001C20  D00B               	goto	i2l1604
  3722                           
  3723                           ;interrupts.c: 331: motorCounterUpdate(RIGHT,0);
  3724  001C22  0E00               	movlw	0
  3725  001C24  6E47               	movwf	motorCounterUpdate@reverse,c
  3726  001C26  0E01               	movlw	1
  3727  001C28  EC47  F00C         	call	_motorCounterUpdate
  3728                           
  3729                           ;interrupts.c: 332: motorCounterUpdate(LEFT,1);
  3730  001C2C  0E01               	movlw	1
  3731  001C2E  6E47               	movwf	motorCounterUpdate@reverse,c
  3732  001C30  0E00               	movlw	0
  3733  001C32  EC47  F00C         	call	_motorCounterUpdate
  3734                           
  3735                           ;interrupts.c: 333: } else {
  3736  001C36  D00B               	goto	i2l1606
  3737  001C38                     i2l1604:
  3738                           
  3739                           ;interrupts.c: 334: motorCounterUpdate(LEFT,0);
  3740  001C38  0E00               	movlw	0
  3741  001C3A  6E47               	movwf	motorCounterUpdate@reverse,c
  3742  001C3C  0E00               	movlw	0
  3743  001C3E  EC47  F00C         	call	_motorCounterUpdate
  3744                           
  3745                           ;interrupts.c: 335: motorCounterUpdate(RIGHT,1);
  3746  001C42  0E01               	movlw	1
  3747  001C44  6E47               	movwf	motorCounterUpdate@reverse,c
  3748  001C46  0E01               	movlw	1
  3749  001C48  EC47  F00C         	call	_motorCounterUpdate
  3750  001C4C  D000               	goto	i2l1606
  3751  001C4E                     i2l1606:
  3752                           
  3753                           ;interrupts.c: 336: }
  3754                           ;interrupts.c: 337: RotateCounter--;
  3755  001C4E  061D               	decf	_RotateCounter,f,c
  3756  001C50  A0D8               	btfss	status,0,c
  3757  001C52  061E               	decf	_RotateCounter+1,f,c
  3758  001C54  0012               	return		;funcret
  3759  001C56                     __end_of_rotate:
  3760                           	opt stack 0
  3761                           pclatu	equ	0xFFB
  3762                           pclath	equ	0xFFA
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           intcon2	equ	0xFF1
  3771                           postinc0	equ	0xFEE
  3772                           fsr0h	equ	0xFEA
  3773                           fsr0l	equ	0xFE9
  3774                           wreg	equ	0xFE8
  3775                           fsr1h	equ	0xFE2
  3776                           fsr1l	equ	0xFE1
  3777                           bsr	equ	0xFE0
  3778                           postinc2	equ	0xFDE
  3779                           postdec2	equ	0xFDD
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _motorCounterUpdate *****************
  3785 ;; Defined at:
  3786 ;;		line 237 in file "interrupts.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  side            1    wreg     enum E4145
  3789 ;;  reverse         1   17[COMRAM] unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  side            1   18[COMRAM] enum E4145
  3792 ;; Return value:  Size  Location     Type
  3793 ;;		None               void
  3794 ;; Registers used:
  3795 ;;		wreg, status,2, status,0
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3801 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;Total ram usage:        2 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; This function calls:
  3808 ;;		Nothing
  3809 ;; This function is called by:
  3810 ;;		_high_isr
  3811 ;;		_rotate
  3812 ;;		_forward
  3813 ;;		_smoothTurn
  3814 ;;		_Reversing
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text21
  3819  00188E                     __ptext21:
  3820                           	opt stack 0
  3821  00188E                     _motorCounterUpdate:
  3822                           	opt stack 23
  3823                           
  3824                           ;incstack = 0
  3825                           ;motorCounterUpdate@side stored from wreg
  3826  00188E  6E48               	movwf	motorCounterUpdate@side,c
  3827                           
  3828                           ;interrupts.c: 239: if(side == LEFT && reverse == 1)
  3829  001890  5048               	movf	motorCounterUpdate@side,w,c
  3830  001892  A4D8               	btfss	status,2,c
  3831  001894  D01B               	goto	i2l1480
  3832  001896  0447               	decf	motorCounterUpdate@reverse,w,c
  3833  001898  B4D8               	btfsc	status,2,c
  3834  00189A  D00B               	goto	i2l1478
  3835  00189C  D017               	goto	i2l1480
  3836                           
  3837                           ;interrupts.c: 240: {
  3838                           ;interrupts.c: 241: switch(LMotorCounter)
  3839  00189E  D009               	goto	i2l1478
  3840  0018A0                     i2l1468:
  3841  0018A0  0E02               	movlw	2
  3842  0018A2  D004               	goto	L18
  3843  0018A4                     i2l1470:
  3844  0018A4  0E04               	movlw	4
  3845  0018A6  D002               	goto	L18
  3846                           
  3847                           ;interrupts.c: 245: case 0b00000100: LMotorCounter = 0b00001000; break;
  3848  0018A8  D03E               	goto	i2l1512
  3849                           
  3850                           ;interrupts.c: 246: case 0b00001000: LMotorCounter = 0b00000001; break;
  3851  0018AA  D039               	goto	i2l1506
  3852  0018AC                     L18:
  3853  0018AC  6E30               	movwf	_LMotorCounter,c
  3854  0018AE  D068               	goto	i2l160
  3855                           
  3856                           ;interrupts.c: 247: default: LMotorCounter = 0b00000001;
  3857  0018B0  D036               	goto	i2l1506
  3858  0018B2                     i2l1478:
  3859  0018B2  5030               	movf	_LMotorCounter,w,c
  3860                           
  3861                           ; Switch size 1, requested type "space"
  3862                           ; Number of cases is 4, Range of values is 1 to 8
  3863                           ; switch strategies available:
  3864                           ; Name         Instructions Cycles
  3865                           ; simple_byte           13     7 (average)
  3866                           ;	Chosen strategy is simple_byte
  3867  0018B4  0A01               	xorlw	1	; case 1
  3868  0018B6  B4D8               	btfsc	status,2,c
  3869  0018B8  D7F3               	goto	i2l1468
  3870  0018BA  0A03               	xorlw	3	; case 2
  3871  0018BC  B4D8               	btfsc	status,2,c
  3872  0018BE  D7F2               	goto	i2l1470
  3873  0018C0  0A06               	xorlw	6	; case 4
  3874  0018C2  B4D8               	btfsc	status,2,c
  3875  0018C4  D030               	goto	i2l1512
  3876  0018C6  0A0C               	xorlw	12	; case 8
  3877  0018C8  D02A               	goto	i2l1506
  3878                           
  3879                           ;interrupts.c: 249: } else if(side == RIGHT && reverse == 1)
  3880  0018CA  D05A               	goto	i2l160
  3881  0018CC                     i2l1480:
  3882  0018CC  0448               	decf	motorCounterUpdate@side,w,c
  3883  0018CE  A4D8               	btfss	status,2,c
  3884  0018D0  D01D               	goto	i2l1498
  3885  0018D2  0447               	decf	motorCounterUpdate@reverse,w,c
  3886  0018D4  B4D8               	btfsc	status,2,c
  3887  0018D6  D00B               	goto	i2l1496
  3888  0018D8  D019               	goto	i2l1498
  3889                           
  3890                           ;interrupts.c: 250: {
  3891                           ;interrupts.c: 251: switch(RMotorCounter)
  3892  0018DA  D009               	goto	i2l1496
  3893  0018DC                     i2l1486:
  3894  0018DC  0E08               	movlw	8
  3895  0018DE  D040               	goto	L26
  3896  0018E0                     i2l1488:
  3897  0018E0  0E01               	movlw	1
  3898  0018E2  D03E               	goto	L26
  3899  0018E4                     i2l1490:
  3900  0018E4  0E02               	movlw	2
  3901  0018E6  D03C               	goto	L26
  3902  0018E8                     i2l1492:
  3903  0018E8  0E04               	movlw	4
  3904  0018EA  D03A               	goto	L26
  3905                           
  3906                           ;interrupts.c: 257: default: RMotorCounter = 0b00001000;
  3907  0018EC  D7F7               	goto	i2l1486
  3908  0018EE                     i2l1496:
  3909  0018EE  5031               	movf	_RMotorCounter,w,c
  3910                           
  3911                           ; Switch size 1, requested type "space"
  3912                           ; Number of cases is 4, Range of values is 1 to 8
  3913                           ; switch strategies available:
  3914                           ; Name         Instructions Cycles
  3915                           ; simple_byte           13     7 (average)
  3916                           ;	Chosen strategy is simple_byte
  3917  0018F0  0A01               	xorlw	1	; case 1
  3918  0018F2  B4D8               	btfsc	status,2,c
  3919  0018F4  D7F3               	goto	i2l1486
  3920  0018F6  0A03               	xorlw	3	; case 2
  3921  0018F8  B4D8               	btfsc	status,2,c
  3922  0018FA  D7F2               	goto	i2l1488
  3923  0018FC  0A06               	xorlw	6	; case 4
  3924  0018FE  B4D8               	btfsc	status,2,c
  3925  001900  D7F1               	goto	i2l1490
  3926  001902  0A0C               	xorlw	12	; case 8
  3927  001904  B4D8               	btfsc	status,2,c
  3928  001906  D7F0               	goto	i2l1492
  3929  001908  D7E9               	goto	i2l1486
  3930                           
  3931                           ;interrupts.c: 259: } else if(side == LEFT && reverse == 0)
  3932  00190A  D03A               	goto	i2l160
  3933  00190C                     i2l1498:
  3934  00190C  5048               	movf	motorCounterUpdate@side,w,c
  3935  00190E  A4D8               	btfss	status,2,c
  3936  001910  D01B               	goto	i2l1516
  3937  001912  5047               	movf	motorCounterUpdate@reverse,w,c
  3938  001914  B4D8               	btfsc	status,2,c
  3939  001916  D009               	goto	i2l1514
  3940  001918  D017               	goto	i2l1516
  3941                           
  3942                           ;interrupts.c: 260: {
  3943                           ;interrupts.c: 261: switch(LMotorCounter)
  3944  00191A  D007               	goto	i2l1514
  3945                           
  3946                           ;interrupts.c: 262: {
  3947                           ;interrupts.c: 263: case 0b00000001: LMotorCounter = 0b00001000; break;
  3948  00191C  D004               	goto	i2l1512
  3949  00191E                     i2l1506:
  3950  00191E  0E01               	movlw	1
  3951  001920  D7C5               	goto	L18
  3952                           
  3953                           ;interrupts.c: 265: case 0b00000100: LMotorCounter = 0b00000010; break;
  3954  001922  D7BE               	goto	i2l1468
  3955                           
  3956                           ;interrupts.c: 266: case 0b00001000: LMotorCounter = 0b00000100; break;
  3957  001924  D7BF               	goto	i2l1470
  3958  001926                     i2l1512:
  3959  001926  0E08               	movlw	8
  3960  001928  D7C1               	goto	L18
  3961  00192A                     i2l1514:
  3962  00192A  5030               	movf	_LMotorCounter,w,c
  3963                           
  3964                           ; Switch size 1, requested type "space"
  3965                           ; Number of cases is 4, Range of values is 1 to 8
  3966                           ; switch strategies available:
  3967                           ; Name         Instructions Cycles
  3968                           ; simple_byte           13     7 (average)
  3969                           ;	Chosen strategy is simple_byte
  3970  00192C  0A01               	xorlw	1	; case 1
  3971  00192E  B4D8               	btfsc	status,2,c
  3972  001930  D7FA               	goto	i2l1512
  3973  001932  0A03               	xorlw	3	; case 2
  3974  001934  B4D8               	btfsc	status,2,c
  3975  001936  D7F3               	goto	i2l1506
  3976  001938  0A06               	xorlw	6	; case 4
  3977  00193A  B4D8               	btfsc	status,2,c
  3978  00193C  D7B1               	goto	i2l1468
  3979  00193E  0A0C               	xorlw	12	; case 8
  3980  001940  B4D8               	btfsc	status,2,c
  3981  001942  D7B0               	goto	i2l1470
  3982  001944  D7F0               	goto	i2l1512
  3983                           
  3984                           ;interrupts.c: 269: } else if(side == RIGHT && reverse == 0)
  3985  001946  D01C               	goto	i2l160
  3986  001948                     i2l1516:
  3987  001948  0448               	decf	motorCounterUpdate@side,w,c
  3988  00194A  A4D8               	btfss	status,2,c
  3989  00194C  D019               	goto	i2l160
  3990  00194E  5047               	movf	motorCounterUpdate@reverse,w,c
  3991  001950  B4D8               	btfsc	status,2,c
  3992  001952  D009               	goto	i2l1532
  3993  001954  D015               	goto	i2l160
  3994                           
  3995                           ;interrupts.c: 270: {
  3996                           ;interrupts.c: 271: switch(RMotorCounter)
  3997  001956  D007               	goto	i2l1532
  3998                           
  3999                           ;interrupts.c: 272: {
  4000                           ;interrupts.c: 273: case 0b00000001: RMotorCounter = 0b00000010; break;
  4001  001958  D7C5               	goto	i2l1490
  4002                           
  4003                           ;interrupts.c: 274: case 0b00000010: RMotorCounter = 0b00000100; break;
  4004  00195A  D7C6               	goto	i2l1492
  4005                           
  4006                           ;interrupts.c: 275: case 0b00000100: RMotorCounter = 0b00001000; break;
  4007  00195C  D7BF               	goto	i2l1486
  4008                           
  4009                           ;interrupts.c: 276: case 0b00001000: RMotorCounter = 0b00000001; break;
  4010  00195E  D7C0               	goto	i2l1488
  4011  001960                     L26:
  4012  001960  6E31               	movwf	_RMotorCounter,c
  4013  001962  D00E               	goto	i2l160
  4014                           
  4015                           ;interrupts.c: 277: default: RMotorCounter = 0b00000001;
  4016  001964  D7BD               	goto	i2l1488
  4017  001966                     i2l1532:
  4018  001966  5031               	movf	_RMotorCounter,w,c
  4019                           
  4020                           ; Switch size 1, requested type "space"
  4021                           ; Number of cases is 4, Range of values is 1 to 8
  4022                           ; switch strategies available:
  4023                           ; Name         Instructions Cycles
  4024                           ; simple_byte           13     7 (average)
  4025                           ;	Chosen strategy is simple_byte
  4026  001968  0A01               	xorlw	1	; case 1
  4027  00196A  B4D8               	btfsc	status,2,c
  4028  00196C  D7BB               	goto	i2l1490
  4029  00196E  0A03               	xorlw	3	; case 2
  4030  001970  B4D8               	btfsc	status,2,c
  4031  001972  D7BA               	goto	i2l1492
  4032  001974  0A06               	xorlw	6	; case 4
  4033  001976  B4D8               	btfsc	status,2,c
  4034  001978  D7B1               	goto	i2l1486
  4035  00197A  0A0C               	xorlw	12	; case 8
  4036  00197C  D7B1               	goto	i2l1488
  4037  00197E  D000               	goto	i2l160
  4038  001980                     i2l160:
  4039  001980  0012               	return		;funcret
  4040  001982                     __end_of_motorCounterUpdate:
  4041                           	opt stack 0
  4042                           pclatu	equ	0xFFB
  4043                           pclath	equ	0xFFA
  4044                           tblptru	equ	0xFF8
  4045                           tblptrh	equ	0xFF7
  4046                           tblptrl	equ	0xFF6
  4047                           tablat	equ	0xFF5
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           intcon	equ	0xFF2
  4051                           intcon2	equ	0xFF1
  4052                           postinc0	equ	0xFEE
  4053                           fsr0h	equ	0xFEA
  4054                           fsr0l	equ	0xFE9
  4055                           wreg	equ	0xFE8
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           bsr	equ	0xFE0
  4059                           postinc2	equ	0xFDE
  4060                           postdec2	equ	0xFDD
  4061                           fsr2h	equ	0xFDA
  4062                           fsr2l	equ	0xFD9
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function _KController *****************
  4066 ;; Defined at:
  4067 ;;		line 302 in file "interrupts.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;		None               void
  4074 ;; Registers used:
  4075 ;;		wreg, status,2, status,0
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;Total ram usage:        0 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_high_isr
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text22
  4095  001B44                     __ptext22:
  4096                           	opt stack 0
  4097  001B44                     _KController:
  4098                           	opt stack 25
  4099                           
  4100                           ;interrupts.c: 313: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  4101                           
  4102                           ;incstack = 0
  4103  001B44  BE0E               	btfsc	_sensorValue+5,7,c
  4104  001B46  D00E               	goto	i2l1218
  4105  001B48  500E               	movf	_sensorValue+5,w,c
  4106  001B4A  E104               	bnz	i2u60_40
  4107  001B4C  0E96               	movlw	150
  4108  001B4E  5C0D               	subwf	_sensorValue+4,w,c
  4109  001B50  A0D8               	btfss	status,0,c
  4110  001B52  D008               	goto	i2l1218
  4111  001B54                     i2u60_40:
  4112  001B54  BE10               	btfsc	_sensorValue+7,7,c
  4113  001B56  D006               	goto	i2l1218
  4114  001B58  5010               	movf	_sensorValue+7,w,c
  4115  001B5A  E11E               	bnz	i2l179
  4116  001B5C  0E96               	movlw	150
  4117  001B5E  5C0F               	subwf	_sensorValue+6,w,c
  4118  001B60  B0D8               	btfsc	status,0,c
  4119  001B62  D01A               	goto	i2l179
  4120  001B64                     i2l1218:
  4121                           
  4122                           ;interrupts.c: 314: {
  4123                           ;interrupts.c: 316: if(sensorValue[0] > 400)
  4124  001B64  BE0A               	btfsc	_sensorValue+1,7,c
  4125  001B66  D00B               	goto	i2l1222
  4126  001B68  0E91               	movlw	145
  4127  001B6A  5C09               	subwf	_sensorValue,w,c
  4128  001B6C  0E01               	movlw	1
  4129  001B6E  580A               	subwfb	_sensorValue+1,w,c
  4130  001B70  A0D8               	btfss	status,0,c
  4131  001B72  D005               	goto	i2l1222
  4132                           
  4133                           ;interrupts.c: 317: {
  4134                           ;interrupts.c: 318: controlToRight = 30;
  4135  001B74  0E00               	movlw	0
  4136  001B76  6E2A               	movwf	_controlToRight+1,c
  4137  001B78  0E1E               	movlw	30
  4138  001B7A  6E29               	movwf	_controlToRight,c
  4139                           
  4140                           ;interrupts.c: 319: } else if(sensorValue[1] > 400)
  4141  001B7C  D00D               	goto	i2l179
  4142  001B7E                     i2l1222:
  4143  001B7E  BE0C               	btfsc	_sensorValue+3,7,c
  4144  001B80  D00B               	goto	i2l179
  4145  001B82  0E91               	movlw	145
  4146  001B84  5C0B               	subwf	_sensorValue+2,w,c
  4147  001B86  0E01               	movlw	1
  4148  001B88  580C               	subwfb	_sensorValue+3,w,c
  4149  001B8A  A0D8               	btfss	status,0,c
  4150  001B8C  D005               	goto	i2l179
  4151                           
  4152                           ;interrupts.c: 320: {
  4153                           ;interrupts.c: 321: controlToLeft = 30;
  4154  001B8E  0E00               	movlw	0
  4155  001B90  6E28               	movwf	_controlToLeft+1,c
  4156  001B92  0E1E               	movlw	30
  4157  001B94  6E27               	movwf	_controlToLeft,c
  4158  001B96  D000               	goto	i2l179
  4159  001B98                     i2l179:
  4160  001B98  0012               	return		;funcret
  4161  001B9A                     __end_of_KController:
  4162                           	opt stack 0
  4163                           pclatu	equ	0xFFB
  4164                           pclath	equ	0xFFA
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           intcon2	equ	0xFF1
  4173                           postinc0	equ	0xFEE
  4174                           fsr0h	equ	0xFEA
  4175                           fsr0l	equ	0xFE9
  4176                           wreg	equ	0xFE8
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           bsr	equ	0xFE0
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           pclatu	equ	0xFFB
  4186                           pclath	equ	0xFFA
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           intcon2	equ	0xFF1
  4195                           postinc0	equ	0xFEE
  4196                           fsr0h	equ	0xFEA
  4197                           fsr0l	equ	0xFE9
  4198                           wreg	equ	0xFE8
  4199                           fsr1h	equ	0xFE2
  4200                           fsr1l	equ	0xFE1
  4201                           bsr	equ	0xFE0
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208                           	psect	rparam
  4209  0000                     pclatu	equ	0xFFB
  4210                           pclath	equ	0xFFA
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           intcon	equ	0xFF2
  4218                           intcon2	equ	0xFF1
  4219                           postinc0	equ	0xFEE
  4220                           fsr0h	equ	0xFEA
  4221                           fsr0l	equ	0xFE9
  4222                           wreg	equ	0xFE8
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           bsr	equ	0xFE0
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      93
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_initialRotation
    _forward->_motorCounterUpdate
    _initialRotation->_rotate
    _rotate->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4601
                                             23 COMRAM    14    14      0
                        _KController
                            _forward
                    _initialRotation
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
                      _singleForward
                        _stateUpdate
 ---------------------------------------------------------------------------------
 (6) _stateUpdate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _singleForward                                        0     0      0     812
                            _forward
 ---------------------------------------------------------------------------------
 (7) _forward                                              0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _initialRotation                                      3     1      2    1196
                                             20 COMRAM     3     1      2
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     834
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (8) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _forward
     _motorCounterUpdate
   _initialRotation
     _rotate
       _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate
   _singleForward
     _forward
       _motorCounterUpdate
   _stateUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     25      5D       1       73.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D2      34        0.0%
DATA                 0      0      D2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 14:02:59 2015

                   _stateUpdate 1552                    ___awdiv@sign 0085                              bsr 000FE0  
           ___wmul@multiplicand 0082                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_LVP$ON 000000                             l304 1BC8                             l313 1DDE  
                           l332 12C8                             l318 1DF2                             l350 1D28  
                           l345 1CEC                             l353 1C8C                             l346 1CF4  
                           l339 17D2                             l349 1D20                             l546 1B42  
                  __CFG_CPB$OFF 000000                             _MAX 1CF6                             _MIN 1CC2  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1DF4                    _rotatingSide 0035  
                           wreg 000FE8                            ?_MAX 0086                            ?_MIN 0086  
                          MAX@a 0086                            MAX@b 0088                            MIN@a 0086  
                          MIN@b 0088                    __CFG_WDT$OFF 000000                            l2000 177C  
                          l2010 17BA                            l2020 186E                            l2004 1796  
                          l2006 17A0                            l2024 1878                            l2050 1D80  
                          l1900 1AAA                            l1910 1AE0                            l1906 1AC8  
                          l1922 1B22                            l1932 1BB0                            l1908 1AD6  
                          l1926 1B38                            l1918 1B12                            l1944 1DEC  
                          l1952 102A                            l1962 10BC                            l1972 124A  
                          l1964 11DA                            l1894 1A92                            l1974 12B2  
                          l1958 104E                            l1968 11F0                            _LATC 000F8B  
                          u1770 1028                            u1780 104C                            u1865 17E0  
                          u1897 1BB8                            i2l90 14F8               ??_initialRotation 004C  
                          _main 1D5E                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1C1A           __end_of_setCorrection 1A74                           ??_MAX 008A  
                         ??_MIN 008A      __size_of_sensorComputation 02C4                           ?_main 0036  
               __end_of___awdiv 1B44                           _T0CON 000FD5                 ___awdiv@divisor 0082  
                         i2l203 1DD4                           i2l119 1518                           i2l160 1980  
                         i2l226 176C                           i2l163 1E02                           i2l179 1B98  
                         i2l197 1DB4                 ___awdiv@counter 0084                           _TRISC 000F94  
           _ConfigureOscillator 1E04                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                   _controlToLeft 0027  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                           _delay 1B9A                           _merge 1DF4  
               __end_of_forward 1DB6                 __end_of_low_isr 00A2                           tablat 000FF5  
                         status 000FD8            ?_ConfigureOscillator 0036                 __initialization 1C8E  
                  __end_of_main 1D8C                          ??_main 00F5                   __activetblptr 000002  
                        ?_delay 0080                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          ?_merge 0047                          _ADRESH 000FC4  
                        _ADRESL 000FC3                ___awdiv@dividend 0080                          i2l1204 1728  
                        i2l1140 1582                          i2l1222 1B7E                          i2l1206 1738  
                        i2l1150 15C6                          i2l1142 1592                          i2l1208 1748  
                        i2l1152 15D6                          i2l1136 1562                          i2l1144 1596  
                        i2l1218 1B64                          i2l1170 164C                          i2l1154 15DA  
                        i2l1138 1572                          i2l1180 1690                          i2l1172 165C  
                        i2l1164 161C                          i2l1182 16A0                          i2l1174 1660  
                        i2l1512 1926                          i2l1176 1670                          i2l1184 16A4  
                        i2l1168 163C                          i2l1506 191E                          i2l1514 192A  
                        i2l1194 16E6                          i2l1532 1966                          i2l1516 1948  
                        i2l1604 1C38                          i2l1196 16F6                          i2l1188 16C4  
                        i2l1470 18A4                          i2l1606 1C4E                          i2l1480 18CC  
                        i2l1490 18E4                          i2l1650 1D40                          i2l1810 1474  
                        i2l1492 18E8                          i2l1468 18A0                          i2l1652 1D4E  
                        i2l1660 1DC6                          i2l1486 18DC                          i2l1478 18B2  
                        i2l1830 14E2                          i2l1822 14B2                          i2l1814 148C  
                        i2l1806 1466                          i2l1488 18E0                          i2l1496 18EE  
                        i2l1744 1340                          i2l1752 135C                          i2l1760 1374  
                        i2l1736 131C                          i2l1498 190C                          i2l1826 14CA  
                        i2l1818 149A                          i2l1770 13B2                          i2l1754 1366  
                        i2l1746 1350                          i2l1738 1322                          i2l1780 13E6  
                        i2l1764 1392                          i2l1836 1510                          i2l1790 141C  
                        i2l1782 13F8                          i2l1766 13A2                          i2l1776 13CA  
                        i2l1778 13D8                          i2l1796 143C                          i2l1798 1442  
                        _INTCON 000FF2                          _OSCCON 000FD3                       ??_InitApp 0085  
         ??_ConfigureOscillator 0080                     merge@merged 0049                  __CFG_XINST$OFF 000000  
            sensorComputation@i 0098              sensorComputation@j 0096                  _controlToRight 0029  
              __end_of_high_isr 1552                          _cState 005B                          ___wmul 1C56  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _pState 005D  
                        delay@x 0083                          clear_0 1C94                ___awdiv@quotient 0086  
                        _rotate 1C1A                    __pdataCOMRAM 005B                       ??_forward 0049  
                  __mediumconst 0000                       ??_low_isr 0036                  _ReverseCounter 001B  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                    __accesstop 0080         __end_of__initialization 1CB8                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                    ?_KController 0036                  __pcstackCOMRAM 0036  
                 __end_of_delay 1BDE                    ?_stateUpdate 0036                      _TurnedLeft 0023  
               moveMouse@action 0047                   __end_of_merge 1E04      __end_of_motorCounterUpdate 1982  
               _initialRotation 1D2A                  _ignoreControll 005C                  _ForwardCounter 0013  
                       ??_delay 0082                         ??_merge 0048              _AlgorithmSelection 1DD6  
                  _LTurnCounter 0015                      _delay_time 002B           __end_of_singleForward 1DD6  
             _MotorDelayCounter 0017             ?_AlgorithmSelection 0036            setCorrection@sideAvg 008A  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0036  
                       _INTCON2 000FF1                         i2u40_40 162C                         i2u32_40 15A6  
                       i2u33_40 15B6                         i2u60_40 1B54                         i2u36_40 15EA  
                       i2u53_40 1706                         i2u45_40 1680                         i2u37_40 15FA  
                       _OSCTUNE 000F9B                         i2u48_40 16B4            ??_AlgorithmSelection 0080  
                     ?_high_isr 0036                         _Deadend 0011                   _LMotorCounter 0030  
                       _InitApp 1BDE                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1A74                 __size_of___wmul 0038                         _deadEnd 0033  
       __end_of_initialRotation 1D5E                    __psmallconst 1000                         __pcinit 1C8E  
                       __ramtop 1000                         __ptext0 1D5E                         __ptext1 1982  
                       __ptext2 176E                         __ptext3 1006                         __ptext4 1C56  
                       __ptext5 1A74                         __ptext6 1CC2                         __ptext7 1CF6  
                       __ptext8 1BDE                         __ptext9 1B9A                 __size_of_rotate 003C  
                  __size_of_MAX 0034                    __size_of_MIN 0034                         _forward 1D8C  
                       delay@ms 0080                         _low_isr 0018                   ?_sensorUpdate 0036  
                    ??_high_isr 004D                  __pintcode_body 12CA          __size_of_setCorrection 00F2  
          end_of_initialization 1CB8                _sensorCorrection 0001               __end_of_moveMouse 1E16  
                 __Lmediumconst 0000                         int_func 12CA                      _justTurned 0034  
          __size_of_KController 0056                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE            __size_of_stateUpdate 021C                       _TRISBbits 000F93  
                     _TRISEbits 000F96                  ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1E0E  
                  _RTurnCounter 0019  sensorComputation@getCorrection 008D                   _setCorrection 1982  
              ?_initialRotation 004A                  __end_of___wmul 1C8E                   __pidataCOMRAM 1E16  
                   _TurnedRight 0025                  __end_of_rotate 1C56             start_initialization 1C8E  
                   __end_of_MAX 1D2A                     __end_of_MIN 1CF6              _motorCounterUpdate 188E  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0047                      merge@right 0047  
                ?_setCorrection 0036                        ??___wmul 0084                __CFG_LPT1OSC$OFF 000000  
                      ??_rotate 0049                  _sensorLocation 1001            ??_motorCounterUpdate 0048  
                   __pbssCOMRAM 0001                   __pcstackBANK0 0080                       _TurnRight 0021  
     sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0               __size_of_high_isr 154A  
                      ?_InitApp 0036               __CFG_CCP2MX$PORTC 000000                       _algorithm 0032  
                     __pintcode 0008           setCorrection@frontAvg 008C          motorCounterUpdate@side 0048  
                      ?___awdiv 0080            __end_of_sensorUpdate 188E          __end_of_sensorLocation 1005  
                   __pintcodelo 0018             initialRotation@side 004C                  _ChangeRequired 002F  
                   __smallconst 1000                        ?_forward 0036                        ?_low_isr 0036  
                     _oldErrorP 002D          __size_of_singleForward 0020                  __size_of_delay 0044  
   __size_of_AlgorithmSelection 001E                  __size_of_merge 0010                  ___wmul@product 0084  
                     _moveMouse 1E0E                        i2u152_40 140A                        i2u153_40 142A  
                      i2u145_40 1382                        i2u138_40 130C                 ??_setCorrection 0088  
              __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2               ___wmul@multiplier 0080  
                 _RMotorCounter 0031                      rotate@side 0049                   ??_KController 0047  
                    ?_moveMouse 0036                __size_of_InitApp 003C                        __Hrparam 0000  
                     merge@left 0048            sensorComputation@max 0090                        __Lrparam 0000  
          sensorComputation@min 0092            sensorComputation@sum 0094              __CFG_BOREN$SBORDIS 000000  
                 _singleForward 1DB6                   ??_stateUpdate 0047                __size_of___awdiv 00D0  
                      _TurnLeft 001F                __size_of_forward 002A                __size_of_low_isr 008A  
                      __ptext10 1DD6                        __ptext11 1E04                        __ptext20 1C1A  
                      __ptext21 188E                        __ptext22 1B44                        __ptext14 1552  
                      __ptext15 1DB6                        __ptext16 1D8C                        __ptext17 1E0E  
                      __ptext18 1DF4                        __ptext19 1D2A                        _high_isr 0008  
                 __size_of_main 002E                   _RotateCounter 001D           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A                  ?_singleForward 0036             __end_of_KController 1B9A  
             _sensorComputation 1006             __end_of_stateUpdate 176E                      _INTCONbits 000FF2  
            ?_sensorComputation 008B        __size_of_initialRotation 0034                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 176E                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0047  
      initialRotation@isDeadEnd 004A       __end_of_sensorComputation 12CA                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0047                 ??_singleForward 0049  
                   _KController 1B44  
