

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Apr 18 01:26:53 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001ACC                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _controllerSteps
    42  001ACC  08                 	db	8
    43                           
    44                           	psect	smallconst
    45  001000                     __psmallconst:
    46                           	opt stack 0
    47  001000  00                 	db	0
    48  001001                     _sensorCorrection:
    49                           	opt stack 0
    50  001001  36                 	db	54
    51  001002  36                 	db	54
    52  001003  1D                 	db	29
    53  001004  1D                 	db	29
    54  001005                     __end_of_sensorCorrection:
    55                           	opt stack 0
    56  001005                     _sensorLocation:
    57                           	opt stack 0
    58  001005  1B                 	db	27
    59  001006  2B                 	db	43
    60  001007  1F                 	db	31
    61  001008  33                 	db	51
    62  001009                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATC	set	3979
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCTUNE	set	3995
    76  0000                     _T0CON	set	4053
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISEbits	set	3990
    80                           
    81                           ; #config settings
    82  001009  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001986                     __pcinit:
    86                           	opt stack 0
    87  001986                     start_initialization:
    88                           	opt stack 0
    89  001986                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (27 bytes)
    93  001986  EE00  F03D         	lfsr	0,__pbssCOMRAM
    94  00198A  0E1B               	movlw	27
    95  00198C                     clear_0:
    96  00198C  6AEE               	clrf	postinc0,c
    97  00198E  06E8               	decf	wreg,f,c
    98  001990  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (1 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  001992  0ECC               	movlw	low __pidataCOMRAM
   103  001994  6EF6               	movwf	tblptrl,c
   104  001996  0E1A               	movlw	high __pidataCOMRAM
   105  001998  6EF7               	movwf	tblptrh,c
   106  00199A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  00199C  6EF8               	movwf	tblptru,c
   108  00199E  0009               	tblrd		*+	;fetch initializer
   109  0019A0  CFF5 F058          	movff	tablat,__pdataCOMRAM
   110  0019A4                     end_of_initialization:
   111                           	opt stack 0
   112  0019A4                     __end_of__initialization:
   113                           	opt stack 0
   114  0019A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  0019A6  6EF8               	movwf	tblptru,c
   116  0019A8  0100               	movlb	0
   117  0019AA  EF4B  F00D         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _sensorValue:
   129                           	opt stack 0
   130  00003D                     	ds	8
   131  000045                     _ForwardCounter:
   132                           	opt stack 0
   133  000045                     	ds	2
   134  000047                     _LTurnCounter:
   135                           	opt stack 0
   136  000047                     	ds	2
   137  000049                     _MotorDelayCounter:
   138                           	opt stack 0
   139  000049                     	ds	2
   140  00004B                     _RTurnCounter:
   141                           	opt stack 0
   142  00004B                     	ds	2
   143  00004D                     _ReverseCounter:
   144                           	opt stack 0
   145  00004D                     	ds	2
   146  00004F                     _RotateCounter:
   147                           	opt stack 0
   148  00004F                     	ds	2
   149  000051                     _delay_time:
   150                           	opt stack 0
   151  000051                     	ds	2
   152  000053                     _LMotorCounter:
   153                           	opt stack 0
   154  000053                     	ds	1
   155  000054                     _RMotorCounter:
   156                           	opt stack 0
   157  000054                     	ds	1
   158  000055                     _algorithm:
   159                           	opt stack 0
   160  000055                     	ds	1
   161  000056                     _justTurned:
   162                           	opt stack 0
   163  000056                     	ds	1
   164  000057                     _rotatingSide:
   165                           	opt stack 0
   166  000057                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	dataCOMRAM
   175  000058                     __pdataCOMRAM:
   176                           	opt stack 0
   177  000058                     _controllerSteps:
   178                           	opt stack 0
   179  000058                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	cstackBANK0
   188  000080                     __pcstackBANK0:
   189                           	opt stack 0
   190  000080                     sensorComputation@max:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000080                     	ds	2
   195  000082                     sensorComputation@min:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000082                     	ds	2
   200  000084                     sensorComputation@sum:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000084                     	ds	2
   205  000086                     sensorComputation@i:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000086                     	ds	2
   210  000088                     sensorComputation@j:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214  000088                     	ds	2
   215  00008A                     sensorUpdate@sensorTemp:
   216                           	opt stack 0
   217                           
   218                           ; 80 bytes @ 0xA
   219  00008A                     	ds	80
   220  0000DA                     sensorUpdate@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x5A
   224  0000DA                     	ds	2
   225  0000DC                     sensorUpdate@j:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x5C
   229  0000DC                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_low_isr:
   241  000001                     
   242                           ; 0 bytes @ 0x0
   243  000001                     	ds	17
   244  000012                     ?_ABS:
   245                           	opt stack 0
   246  000012                     motorCounterUpdate@reverse:
   247                           	opt stack 0
   248  000012                     merge@right:
   249                           	opt stack 0
   250  000012                     moveMouse@action:
   251                           	opt stack 0
   252  000012                     ABS@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x11
   256  000012                     	ds	1
   257  000013                     motorCounterUpdate@side:
   258                           	opt stack 0
   259  000013                     merge@left:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	1
   264  000014                     merge@merged:
   265                           	opt stack 0
   266  000014                     rotate@side:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	1
   271  000015                     ??_KController:
   272                           
   273                           ; 0 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     KController@correctTo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000017                     	ds	1
   280  000018                     KController@diff:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     ??_high_isr:
   286                           
   287                           ; 0 bytes @ 0x19
   288  00001A                     	ds	14
   289  000028                     ?___wmul:
   290                           	opt stack 0
   291  000028                     ?___awdiv:
   292                           	opt stack 0
   293  000028                     delay@ms:
   294                           	opt stack 0
   295  000028                     ___wmul@multiplier:
   296                           	opt stack 0
   297  000028                     ___awdiv@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_delay:
   303  00002A                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  00002A                     ___awdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x29
   309  00002A                     	ds	1
   310  00002B                     delay@x:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     ___awdiv@counter:
   316                           	opt stack 0
   317  00002C                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2B
   321  00002C                     	ds	1
   322  00002D                     ___awdiv@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     ?_MIN:
   328                           	opt stack 0
   329  00002E                     ?_MAX:
   330                           	opt stack 0
   331  00002E                     MIN@a:
   332                           	opt stack 0
   333  00002E                     MAX@a:
   334                           	opt stack 0
   335  00002E                     ___awdiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2D
   339  00002E                     	ds	2
   340  000030                     MIN@b:
   341                           	opt stack 0
   342  000030                     MAX@b:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     ??_MIN:
   348  000032                     ??_MAX:
   349                           
   350                           ; 0 bytes @ 0x31
   351  000032                     	ds	1
   352  000033                     sensorComputation@sensorTemp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x32
   356  000033                     	ds	2
   357  000035                     ??_sensorComputation:
   358                           
   359                           ; 0 bytes @ 0x34
   360  000035                     	ds	2
   361  000037                     ??_sensorUpdate:
   362                           
   363                           ; 0 bytes @ 0x36
   364  000037                     	ds	6
   365  00003D                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           ; 0 bytes @ 0x3C
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 41 in file "main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    7
   398 ;; This function calls:
   399 ;;		_ConfigureOscillator
   400 ;;		_InitApp
   401 ;;		_sensorUpdate
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  001A96                     __ptext0:
   409                           	opt stack 0
   410  001A96                     _main:
   411                           	opt stack 24
   412                           
   413                           ;main.c: 44: ConfigureOscillator();
   414                           
   415                           ;incstack = 0
   416  001A96  EC5D  F00D         	call	_ConfigureOscillator	;wreg free
   417                           
   418                           ;main.c: 47: InitApp();
   419  001A9A  EC6D  F00C         	call	_InitApp	;wreg free
   420  001A9E  D000               	goto	l1822
   421  001AA0                     l1822:
   422                           
   423                           ;main.c: 50: {
   424                           ;main.c: 51: sensorUpdate();
   425  001AA0  EC55  F00A         	call	_sensorUpdate	;wreg free
   426  001AA4  D7FD               	goto	l1822
   427  001AA6  EF51  F000         	goto	start
   428  001AAA                     __end_of_main:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _sensorUpdate *****************
   438 ;; Defined at:
   439 ;;		line 146 in file "user.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   444 ;;  j               2   92[BANK0 ] int 
   445 ;;  i               2   90[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:       90 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		___wmul
   464 ;;		_sensorComputation
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  0014AA                     __ptext1:
   472                           	opt stack 0
   473  0014AA                     _sensorUpdate:
   474                           	opt stack 24
   475                           
   476                           ;user.c: 148: int i,j;
   477                           ;user.c: 149: int sensorTemp[4][10];
   478                           ;user.c: 152: for(i = 0; i < 10; i++)
   479                           
   480                           ;incstack = 0
   481  0014AA  0E00               	movlw	0
   482  0014AC  0100               	movlb	0	; () banked
   483  0014AE  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   484  0014B0  0E00               	movlw	0
   485  0014B2  6FDA               	movwf	sensorUpdate@i& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488  0014B4  0100               	movlb	0	; () banked
   489  0014B6  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   490  0014B8  D00A               	goto	l1788
   491  0014BA  0100               	movlb	0	; () banked
   492  0014BC  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   493  0014BE  E106               	bnz	u1440
   494  0014C0  0E0A               	movlw	10
   495  0014C2  0100               	movlb	0	; () banked
   496  0014C4  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   497  0014C6  B0D8               	btfsc	status,0,c
   498  0014C8  D0CF               	goto	l1816
   499  0014CA  D001               	goto	l1788
   500  0014CC                     u1440:
   501                           
   502                           ; BSR set to: 0
   503  0014CC  D0CD               	goto	l1816
   504  0014CE                     l1788:
   505                           
   506                           ; BSR set to: 0
   507                           ;user.c: 153: {
   508                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   509  0014CE  0E00               	movlw	0
   510  0014D0  0100               	movlb	0	; () banked
   511  0014D2  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   512  0014D4  0E00               	movlw	0
   513  0014D6  6FDC               	movwf	sensorUpdate@j& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516  0014D8  0100               	movlb	0	; () banked
   517  0014DA  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   518  0014DC  D00A               	goto	l1794
   519  0014DE  0100               	movlb	0	; () banked
   520  0014E0  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   521  0014E2  E106               	bnz	u1450
   522  0014E4  0E04               	movlw	4
   523  0014E6  0100               	movlb	0	; () banked
   524  0014E8  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   525  0014EA  B0D8               	btfsc	status,0,c
   526  0014EC  D0B2               	goto	l1812
   527  0014EE  D001               	goto	l1794
   528  0014F0                     u1450:
   529                           
   530                           ; BSR set to: 0
   531  0014F0  D0B0               	goto	l1812
   532  0014F2                     l1794:
   533                           
   534                           ; BSR set to: 0
   535                           ;user.c: 155: {
   536                           ;user.c: 156: ADCON0 = sensorLocation[j];
   537  0014F2  0E05               	movlw	low _sensorLocation
   538  0014F4  0100               	movlb	0	; () banked
   539  0014F6  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   540  0014F8  6EF6               	movwf	tblptrl,c
   541  0014FA  0E10               	movlw	high _sensorLocation
   542  0014FC  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   543  0014FE  6EF7               	movwf	tblptrh,c
   544  001500                     	if	0	;There are less than 3 active tblptr bytes
   545  001500                     	endif
   546  001500  0008               	tblrd		*
   547  001502  CFF5 FFC2          	movff	tablat,4034	;volatile
   548                           
   549                           ; BSR set to: 0
   550                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   551  001506  82C2               	bsf	4034,1,c	;volatile
   552                           
   553                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   554  001508  D000               	goto	l263
   555  00150A                     l263:
   556  00150A  B2C2               	btfsc	4034,1,c	;volatile
   557  00150C  D7FE               	goto	l263
   558                           
   559                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   560  00150E  CFC3 F037          	movff	4035,??_sensorUpdate	;volatile
   561  001512  0E06               	movlw	6
   562  001514  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   563  001516                     u1475:
   564  001516  90D8               	bcf	status,0,c
   565  001518  3237               	rrcf	??_sensorUpdate,f,c
   566  00151A  2E38               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   567  00151C  D7FC               	goto	u1475
   568  00151E  5037               	movf	??_sensorUpdate,w,c
   569  001520  CFC4 F039          	movff	4036,??_sensorUpdate+2	;volatile
   570  001524  6A3A               	clrf	(??_sensorUpdate+3)& (0+255),c
   571  001526  90D8               	bcf	status,0,c
   572  001528  3639               	rlcf	??_sensorUpdate+2,f,c
   573  00152A  363A               	rlcf	??_sensorUpdate+3,f,c
   574  00152C  90D8               	bcf	status,0,c
   575  00152E  3639               	rlcf	??_sensorUpdate+2,f,c
   576  001530  363A               	rlcf	??_sensorUpdate+3,f,c
   577  001532  2639               	addwf	??_sensorUpdate+2,f,c
   578  001534  0E00               	movlw	0
   579  001536  223A               	addwfc	??_sensorUpdate+3,f,c
   580  001538  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   581  00153C  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   582  001540  0E00               	movlw	0
   583  001542  6E2B               	movwf	___wmul@multiplicand+1,c
   584  001544  0E14               	movlw	20
   585  001546  6E2A               	movwf	___wmul@multiplicand,c
   586  001548  ECD7  F00C         	call	___wmul	;wreg free
   587  00154C  0E8A               	movlw	low sensorUpdate@sensorTemp
   588  00154E  6E3B               	movwf	(??_sensorUpdate+4)& (0+255),c
   589  001550  0E00               	movlw	high sensorUpdate@sensorTemp
   590  001552  6E3C               	movwf	(??_sensorUpdate+5)& (0+255),c
   591  001554  5028               	movf	?___wmul,w,c
   592  001556  263B               	addwf	??_sensorUpdate+4,f,c
   593  001558  5029               	movf	?___wmul+1,w,c
   594  00155A  223C               	addwfc	??_sensorUpdate+5,f,c
   595  00155C  90D8               	bcf	status,0,c
   596  00155E  0100               	movlb	0	; () banked
   597  001560  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   598  001562  6ED9               	movwf	fsr2l,c
   599  001564  0100               	movlb	0	; () banked
   600  001566  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  001568  6EDA               	movwf	fsr2h,c
   602  00156A  503B               	movf	??_sensorUpdate+4,w,c
   603  00156C  26D9               	addwf	fsr2l,f,c
   604  00156E  503C               	movf	??_sensorUpdate+5,w,c
   605  001570  22DA               	addwfc	fsr2h,f,c
   606  001572  C039  FFDE         	movff	??_sensorUpdate+2,postinc2
   607  001576  C03A  FFDD         	movff	??_sensorUpdate+3,postdec2
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 163: if(j == 0 || j == 3)
   611  00157A  0100               	movlb	0	; () banked
   612  00157C  51DC               	movf	sensorUpdate@j& (0+255),w,b
   613  00157E  0100               	movlb	0	; () banked
   614  001580  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   615  001582  B4D8               	btfsc	status,2,c
   616  001584  D007               	goto	l1804
   617                           
   618                           ; BSR set to: 0
   619  001586  0E03               	movlw	3
   620  001588  0100               	movlb	0	; () banked
   621  00158A  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   622  00158C  0100               	movlb	0	; () banked
   623  00158E  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   624  001590  A4D8               	btfss	status,2,c
   625  001592  D02A               	goto	l1806
   626  001594                     l1804:
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   630  001594  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   631  001598  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   632  00159C  0E00               	movlw	0
   633  00159E  6E2B               	movwf	___wmul@multiplicand+1,c
   634  0015A0  0E14               	movlw	20
   635  0015A2  6E2A               	movwf	___wmul@multiplicand,c
   636  0015A4  ECD7  F00C         	call	___wmul	;wreg free
   637  0015A8  0E8A               	movlw	low sensorUpdate@sensorTemp
   638  0015AA  6E37               	movwf	??_sensorUpdate& (0+255),c
   639  0015AC  0E00               	movlw	high sensorUpdate@sensorTemp
   640  0015AE  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   641  0015B0  5028               	movf	?___wmul,w,c
   642  0015B2  2637               	addwf	??_sensorUpdate,f,c
   643  0015B4  5029               	movf	?___wmul+1,w,c
   644  0015B6  2238               	addwfc	??_sensorUpdate+1,f,c
   645  0015B8  90D8               	bcf	status,0,c
   646  0015BA  0100               	movlb	0	; () banked
   647  0015BC  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   648  0015BE  6ED9               	movwf	fsr2l,c
   649  0015C0  0100               	movlb	0	; () banked
   650  0015C2  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   651  0015C4  6EDA               	movwf	fsr2h,c
   652  0015C6  5037               	movf	??_sensorUpdate,w,c
   653  0015C8  26D9               	addwf	fsr2l,f,c
   654  0015CA  5038               	movf	??_sensorUpdate+1,w,c
   655  0015CC  22DA               	addwfc	fsr2h,f,c
   656  0015CE  0E01               	movlw	low _sensorCorrection
   657  0015D0  0100               	movlb	0	; () banked
   658  0015D2  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   659  0015D4  6EF6               	movwf	tblptrl,c
   660  0015D6  0E10               	movlw	high _sensorCorrection
   661  0015D8  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   662  0015DA  6EF7               	movwf	tblptrh,c
   663  0015DC                     	if	0	;There are less than 3 active tblptr bytes
   664  0015DC                     	endif
   665  0015DC  0008               	tblrd		*
   666  0015DE  50F5               	movf	tablat,w,c
   667  0015E0  5EDE               	subwf	postinc2,f,c
   668  0015E2  0E00               	movlw	0
   669  0015E4  5ADD               	subwfb	postdec2,f,c
   670  0015E6  D02A               	goto	l1808
   671  0015E8                     l1806:
   672                           
   673                           ; BSR set to: 0
   674                           ;user.c: 165: else
   675                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   676  0015E8  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   677  0015EC  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   678  0015F0  0E00               	movlw	0
   679  0015F2  6E2B               	movwf	___wmul@multiplicand+1,c
   680  0015F4  0E14               	movlw	20
   681  0015F6  6E2A               	movwf	___wmul@multiplicand,c
   682  0015F8  ECD7  F00C         	call	___wmul	;wreg free
   683  0015FC  0E8A               	movlw	low sensorUpdate@sensorTemp
   684  0015FE  6E37               	movwf	??_sensorUpdate& (0+255),c
   685  001600  0E00               	movlw	high sensorUpdate@sensorTemp
   686  001602  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   687  001604  5028               	movf	?___wmul,w,c
   688  001606  2637               	addwf	??_sensorUpdate,f,c
   689  001608  5029               	movf	?___wmul+1,w,c
   690  00160A  2238               	addwfc	??_sensorUpdate+1,f,c
   691  00160C  90D8               	bcf	status,0,c
   692  00160E  0100               	movlb	0	; () banked
   693  001610  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   694  001612  6ED9               	movwf	fsr2l,c
   695  001614  0100               	movlb	0	; () banked
   696  001616  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   697  001618  6EDA               	movwf	fsr2h,c
   698  00161A  5037               	movf	??_sensorUpdate,w,c
   699  00161C  26D9               	addwf	fsr2l,f,c
   700  00161E  5038               	movf	??_sensorUpdate+1,w,c
   701  001620  22DA               	addwfc	fsr2h,f,c
   702  001622  0E01               	movlw	low _sensorCorrection
   703  001624  0100               	movlb	0	; () banked
   704  001626  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   705  001628  6EF6               	movwf	tblptrl,c
   706  00162A  0E10               	movlw	high _sensorCorrection
   707  00162C  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   708  00162E  6EF7               	movwf	tblptrh,c
   709  001630                     	if	0	;There are less than 3 active tblptr bytes
   710  001630                     	endif
   711  001630  0008               	tblrd		*
   712  001632  50F5               	movf	tablat,w,c
   713  001634  26DE               	addwf	postinc2,f,c
   714  001636  0E00               	movlw	0
   715  001638  22DD               	addwfc	postdec2,f,c
   716  00163A  D000               	goto	l1808
   717  00163C                     l1808:
   718                           
   719                           ; BSR set to: 0
   720  00163C  0100               	movlb	0	; () banked
   721  00163E  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   722  001640  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   723                           
   724                           ; BSR set to: 0
   725  001642  0100               	movlb	0	; () banked
   726  001644  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   727  001646  D755               	goto	l1794
   728  001648  0100               	movlb	0	; () banked
   729  00164A  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   730  00164C  E102               	bnz	l1812
   731  00164E  D74A               	goto	L1
   732  001650  D000               	goto	l1812
   733  001652                     l1812:
   734                           
   735                           ; BSR set to: 0
   736  001652  0100               	movlb	0	; () banked
   737  001654  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   738  001656  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741  001658  0100               	movlb	0	; () banked
   742  00165A  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  00165C  D738               	goto	l1788
   744  00165E  0100               	movlb	0	; () banked
   745  001660  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  001662  E102               	bnz	l1816
   747  001664  D72D               	goto	L2
   748  001666  D000               	goto	l1816
   749  001668                     l1816:
   750                           
   751                           ; BSR set to: 0
   752                           ;user.c: 167: }
   753                           ;user.c: 168: }
   754                           ;user.c: 171: sensorComputation(sensorTemp);
   755  001668  0E8A               	movlw	low sensorUpdate@sensorTemp
   756  00166A  6E33               	movwf	sensorComputation@sensorTemp,c
   757  00166C  0E00               	movlw	high sensorUpdate@sensorTemp
   758  00166E  6E34               	movwf	sensorComputation@sensorTemp+1,c
   759  001670  EC3F  F009         	call	_sensorComputation	;wreg free
   760  001674  0012               	return		;funcret
   761  001676                     __end_of_sensorUpdate:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postinc2	equ	0xFDE
   770                           postdec2	equ	0xFDD
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sensorComputation *****************
   776 ;; Defined at:
   777 ;;		line 125 in file "user.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   780 ;;		 -> sensorUpdate@sensorTemp(80), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  j               2    8[BANK0 ] int 
   783 ;;  i               2    6[BANK0 ] int 
   784 ;;  sum             2    4[BANK0 ] int 
   785 ;;  min             2    2[BANK0 ] int 
   786 ;;  max             2    0[BANK0 ] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       14 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    5
   803 ;; This function calls:
   804 ;;		_MAX
   805 ;;		_MIN
   806 ;;		___awdiv
   807 ;;		___wmul
   808 ;; This function is called by:
   809 ;;		_sensorUpdate
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  00127E                     __ptext2:
   815                           	opt stack 0
   816  00127E                     _sensorComputation:
   817                           	opt stack 24
   818                           
   819                           ;user.c: 127: int max,min,i,j,sum;
   820                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   821                           
   822                           ;incstack = 0
   823  00127E  0E00               	movlw	0
   824  001280  0100               	movlb	0	; () banked
   825  001282  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   826  001284  0E00               	movlw	0
   827  001286  6F86               	movwf	sensorComputation@i& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830  001288  0100               	movlb	0	; () banked
   831  00128A  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   832  00128C  D00A               	goto	l1758
   833  00128E  0100               	movlb	0	; () banked
   834  001290  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   835  001292  E106               	bnz	u1390
   836  001294  0E04               	movlw	4
   837  001296  0100               	movlb	0	; () banked
   838  001298  5D86               	subwf	sensorComputation@i& (0+255),w,b
   839  00129A  B0D8               	btfsc	status,0,c
   840  00129C  D105               	goto	l256
   841  00129E  D001               	goto	l1758
   842  0012A0                     u1390:
   843                           
   844                           ; BSR set to: 0
   845  0012A0  D103               	goto	l256
   846  0012A2                     l1758:
   847                           
   848                           ; BSR set to: 0
   849                           ;user.c: 129: {
   850                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   851  0012A2  0E00               	movlw	0
   852  0012A4  0100               	movlb	0	; () banked
   853  0012A6  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   854  0012A8  0E00               	movlw	0
   855  0012AA  6F88               	movwf	sensorComputation@j& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858  0012AC  0100               	movlb	0	; () banked
   859  0012AE  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   860  0012B0  D00A               	goto	l1764
   861  0012B2  0100               	movlb	0	; () banked
   862  0012B4  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   863  0012B6  E106               	bnz	u1400
   864  0012B8  0E0A               	movlw	10
   865  0012BA  0100               	movlb	0	; () banked
   866  0012BC  5D88               	subwf	sensorComputation@j& (0+255),w,b
   867  0012BE  B0D8               	btfsc	status,0,c
   868  0012C0  D0B7               	goto	l1774
   869  0012C2  D001               	goto	l1764
   870  0012C4                     u1400:
   871                           
   872                           ; BSR set to: 0
   873  0012C4  D0B5               	goto	l1774
   874  0012C6                     l1764:
   875                           
   876                           ; BSR set to: 0
   877                           ;user.c: 131: {
   878                           ;user.c: 132: if(j == 0)
   879  0012C6  0100               	movlb	0	; () banked
   880  0012C8  5188               	movf	sensorComputation@j& (0+255),w,b
   881  0012CA  0100               	movlb	0	; () banked
   882  0012CC  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   883  0012CE  A4D8               	btfss	status,2,c
   884  0012D0  D02A               	goto	l1768
   885                           
   886                           ; BSR set to: 0
   887                           ;user.c: 133: {
   888                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   889  0012D2  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   890  0012D6  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   891  0012DA  0E00               	movlw	0
   892  0012DC  6E2B               	movwf	___wmul@multiplicand+1,c
   893  0012DE  0E14               	movlw	20
   894  0012E0  6E2A               	movwf	___wmul@multiplicand,c
   895  0012E2  ECD7  F00C         	call	___wmul	;wreg free
   896  0012E6  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   897  0012EA  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   898  0012EE  5028               	movf	?___wmul,w,c
   899  0012F0  2635               	addwf	??_sensorComputation,f,c
   900  0012F2  5029               	movf	?___wmul+1,w,c
   901  0012F4  2236               	addwfc	??_sensorComputation+1,f,c
   902  0012F6  90D8               	bcf	status,0,c
   903  0012F8  0100               	movlb	0	; () banked
   904  0012FA  3588               	rlcf	sensorComputation@j& (0+255),w,b
   905  0012FC  6ED9               	movwf	fsr2l,c
   906  0012FE  0100               	movlb	0	; () banked
   907  001300  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   908  001302  6EDA               	movwf	fsr2h,c
   909  001304  5035               	movf	??_sensorComputation,w,c
   910  001306  26D9               	addwf	fsr2l,f,c
   911  001308  5036               	movf	??_sensorComputation+1,w,c
   912  00130A  22DA               	addwfc	fsr2h,f,c
   913  00130C  CFDE F080          	movff	postinc2,sensorComputation@max
   914  001310  CFDD F081          	movff	postdec2,sensorComputation@max+1
   915  001314  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   916  001318  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   917  00131C  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   918  001320  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   919                           
   920                           ;user.c: 135: continue;
   921  001324  D07A               	goto	l1770
   922  001326                     l1768:
   923                           
   924                           ; BSR set to: 0
   925                           ;user.c: 136: }
   926                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   927  001326  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   928  00132A  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   929  00132E  0E00               	movlw	0
   930  001330  6E2B               	movwf	___wmul@multiplicand+1,c
   931  001332  0E14               	movlw	20
   932  001334  6E2A               	movwf	___wmul@multiplicand,c
   933  001336  ECD7  F00C         	call	___wmul	;wreg free
   934  00133A  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   935  00133E  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   936  001342  5028               	movf	?___wmul,w,c
   937  001344  2635               	addwf	??_sensorComputation,f,c
   938  001346  5029               	movf	?___wmul+1,w,c
   939  001348  2236               	addwfc	??_sensorComputation+1,f,c
   940  00134A  90D8               	bcf	status,0,c
   941  00134C  0100               	movlb	0	; () banked
   942  00134E  3588               	rlcf	sensorComputation@j& (0+255),w,b
   943  001350  6ED9               	movwf	fsr2l,c
   944  001352  0100               	movlb	0	; () banked
   945  001354  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   946  001356  6EDA               	movwf	fsr2h,c
   947  001358  5035               	movf	??_sensorComputation,w,c
   948  00135A  26D9               	addwf	fsr2l,f,c
   949  00135C  5036               	movf	??_sensorComputation+1,w,c
   950  00135E  22DA               	addwfc	fsr2h,f,c
   951  001360  CFDE F02E          	movff	postinc2,MIN@a
   952  001364  CFDD F02F          	movff	postdec2,MIN@a+1
   953  001368  C082  F030         	movff	sensorComputation@min,MIN@b
   954  00136C  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   955  001370  ECEB  F00C         	call	_MIN	;wreg free
   956  001374  C02E  F082         	movff	?_MIN,sensorComputation@min
   957  001378  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   958                           
   959                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   960  00137C  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   961  001380  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   962  001384  0E00               	movlw	0
   963  001386  6E2B               	movwf	___wmul@multiplicand+1,c
   964  001388  0E14               	movlw	20
   965  00138A  6E2A               	movwf	___wmul@multiplicand,c
   966  00138C  ECD7  F00C         	call	___wmul	;wreg free
   967  001390  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   968  001394  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   969  001398  5028               	movf	?___wmul,w,c
   970  00139A  2635               	addwf	??_sensorComputation,f,c
   971  00139C  5029               	movf	?___wmul+1,w,c
   972  00139E  2236               	addwfc	??_sensorComputation+1,f,c
   973  0013A0  90D8               	bcf	status,0,c
   974  0013A2  0100               	movlb	0	; () banked
   975  0013A4  3588               	rlcf	sensorComputation@j& (0+255),w,b
   976  0013A6  6ED9               	movwf	fsr2l,c
   977  0013A8  0100               	movlb	0	; () banked
   978  0013AA  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   979  0013AC  6EDA               	movwf	fsr2h,c
   980  0013AE  5035               	movf	??_sensorComputation,w,c
   981  0013B0  26D9               	addwf	fsr2l,f,c
   982  0013B2  5036               	movf	??_sensorComputation+1,w,c
   983  0013B4  22DA               	addwfc	fsr2h,f,c
   984  0013B6  CFDE F02E          	movff	postinc2,MAX@a
   985  0013BA  CFDD F02F          	movff	postdec2,MAX@a+1
   986  0013BE  C080  F030         	movff	sensorComputation@max,MAX@b
   987  0013C2  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
   988  0013C6  ECFF  F00C         	call	_MAX	;wreg free
   989  0013CA  C02E  F080         	movff	?_MAX,sensorComputation@max
   990  0013CE  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
   991                           
   992                           ;user.c: 139: sum += sensorTemp[i][j];
   993  0013D2  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   994  0013D6  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   995  0013DA  0E00               	movlw	0
   996  0013DC  6E2B               	movwf	___wmul@multiplicand+1,c
   997  0013DE  0E14               	movlw	20
   998  0013E0  6E2A               	movwf	___wmul@multiplicand,c
   999  0013E2  ECD7  F00C         	call	___wmul	;wreg free
  1000  0013E6  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1001  0013EA  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1002  0013EE  5028               	movf	?___wmul,w,c
  1003  0013F0  2635               	addwf	??_sensorComputation,f,c
  1004  0013F2  5029               	movf	?___wmul+1,w,c
  1005  0013F4  2236               	addwfc	??_sensorComputation+1,f,c
  1006  0013F6  90D8               	bcf	status,0,c
  1007  0013F8  0100               	movlb	0	; () banked
  1008  0013FA  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1009  0013FC  6ED9               	movwf	fsr2l,c
  1010  0013FE  0100               	movlb	0	; () banked
  1011  001400  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1012  001402  6EDA               	movwf	fsr2h,c
  1013  001404  5035               	movf	??_sensorComputation,w,c
  1014  001406  26D9               	addwf	fsr2l,f,c
  1015  001408  5036               	movf	??_sensorComputation+1,w,c
  1016  00140A  22DA               	addwfc	fsr2h,f,c
  1017  00140C  50DE               	movf	postinc2,w,c
  1018  00140E  0100               	movlb	0	; () banked
  1019  001410  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1020  001412  50DD               	movf	postdec2,w,c
  1021  001414  0100               	movlb	0	; () banked
  1022  001416  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1023  001418  D000               	goto	l1770
  1024  00141A                     l1770:
  1025                           
  1026                           ; BSR set to: 0
  1027  00141A  0100               	movlb	0	; () banked
  1028  00141C  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1029  00141E  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1030                           
  1031                           ; BSR set to: 0
  1032  001420  0100               	movlb	0	; () banked
  1033  001422  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1034  001424  D750               	goto	l1764
  1035  001426  0100               	movlb	0	; () banked
  1036  001428  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1037  00142A  E102               	bnz	l1774
  1038  00142C  D745               	goto	L3
  1039  00142E  D000               	goto	l1774
  1040  001430                     l1774:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;user.c: 140: }
  1044                           ;user.c: 141: sum = sum - min - max;
  1045  001430  0100               	movlb	0	; () banked
  1046  001432  5180               	movf	sensorComputation@max& (0+255),w,b
  1047  001434  0100               	movlb	0	; () banked
  1048  001436  2582               	addwf	sensorComputation@min& (0+255),w,b
  1049  001438  6E35               	movwf	??_sensorComputation& (0+255),c
  1050  00143A  0100               	movlb	0	; () banked
  1051  00143C  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1052  00143E  0100               	movlb	0	; () banked
  1053  001440  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1054  001442  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1055  001444  1E35               	comf	??_sensorComputation,f,c
  1056  001446  1E36               	comf	??_sensorComputation+1,f,c
  1057  001448  4A35               	infsnz	??_sensorComputation,f,c
  1058  00144A  2A36               	incf	??_sensorComputation+1,f,c
  1059  00144C  0100               	movlb	0	; () banked
  1060  00144E  5184               	movf	sensorComputation@sum& (0+255),w,b
  1061  001450  2435               	addwf	??_sensorComputation,w,c
  1062  001452  0100               	movlb	0	; () banked
  1063  001454  6F84               	movwf	sensorComputation@sum& (0+255),b
  1064  001456  0100               	movlb	0	; () banked
  1065  001458  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1066  00145A  2036               	addwfc	??_sensorComputation+1,w,c
  1067  00145C  0100               	movlb	0	; () banked
  1068  00145E  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1072  001460  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1073  001464  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1074  001468  0E00               	movlw	0
  1075  00146A  6E2B               	movwf	___awdiv@divisor+1,c
  1076  00146C  0E08               	movlw	8
  1077  00146E  6E2A               	movwf	___awdiv@divisor,c
  1078  001470  EC22  F00C         	call	___awdiv	;wreg free
  1079  001474  90D8               	bcf	status,0,c
  1080  001476  0100               	movlb	0	; () banked
  1081  001478  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1082  00147A  6ED9               	movwf	fsr2l,c
  1083  00147C  0100               	movlb	0	; () banked
  1084  00147E  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1085  001480  6EDA               	movwf	fsr2h,c
  1086  001482  0E3D               	movlw	low _sensorValue
  1087  001484  26D9               	addwf	fsr2l,f,c
  1088  001486  0E00               	movlw	high _sensorValue
  1089  001488  22DA               	addwfc	fsr2h,f,c
  1090  00148A  C028  FFDE         	movff	?___awdiv,postinc2
  1091  00148E  C029  FFDD         	movff	?___awdiv+1,postdec2
  1092                           
  1093                           ; BSR set to: 0
  1094  001492  0100               	movlb	0	; () banked
  1095  001494  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1096  001496  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  001498  0100               	movlb	0	; () banked
  1100  00149A  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1101  00149C  D702               	goto	l1758
  1102  00149E  0100               	movlb	0	; () banked
  1103  0014A0  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1104  0014A2  E102               	bnz	l256
  1105  0014A4  D6F7               	goto	L4
  1106  0014A6  D000               	goto	l256
  1107  0014A8                     l256:
  1108                           
  1109                           ; BSR set to: 0
  1110  0014A8  0012               	return		;funcret
  1111  0014AA                     __end_of_sensorComputation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function ___wmul *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  multiplier      2   39[COMRAM] unsigned int 
  1130 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  product         2   43[COMRAM] unsigned int 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   39[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, prodl, prodh
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    4
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_sensorComputation
  1153 ;;		_sensorUpdate
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  0019AE                     __ptext3:
  1159                           	opt stack 0
  1160  0019AE                     ___wmul:
  1161                           	opt stack 24
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  0019AE  5028               	movf	___wmul@multiplier,w,c
  1166  0019B0  022A               	mulwf	___wmul@multiplicand,c
  1167  0019B2  CFF3 F02C          	movff	prodl,___wmul@product
  1168  0019B6  CFF4 F02D          	movff	prodh,___wmul@product+1
  1169  0019BA  5028               	movf	___wmul@multiplier,w,c
  1170  0019BC  022B               	mulwf	___wmul@multiplicand+1,c
  1171  0019BE  50F3               	movf	prodl,w,c
  1172  0019C0  262D               	addwf	___wmul@product+1,f,c
  1173  0019C2  5029               	movf	___wmul@multiplier+1,w,c
  1174  0019C4  022A               	mulwf	___wmul@multiplicand,c
  1175  0019C6  50F3               	movf	prodl,w,c
  1176  0019C8  262D               	addwf	___wmul@product+1,f,c
  1177  0019CA  C02C  F028         	movff	___wmul@product,?___wmul
  1178  0019CE  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1179  0019D2  D000               	goto	l281
  1180  0019D4                     l281:
  1181  0019D4  0012               	return		;funcret
  1182  0019D6                     __end_of___wmul:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function ___awdiv *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        2   39[COMRAM] int 
  1203 ;;  divisor         2   41[COMRAM] int 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  quotient        2   45[COMRAM] int 
  1206 ;;  sign            1   44[COMRAM] unsigned char 
  1207 ;;  counter         1   43[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        8 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sensorComputation
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  001844                     __ptext4:
  1233                           	opt stack 0
  1234  001844                     ___awdiv:
  1235                           	opt stack 24
  1236                           
  1237                           ;incstack = 0
  1238  001844  0E00               	movlw	0
  1239  001846  6E2D               	movwf	___awdiv@sign,c
  1240  001848  AE2B               	btfss	___awdiv@divisor+1,7,c
  1241  00184A  D007               	goto	l1716
  1242  00184C  6C2A               	negf	___awdiv@divisor,c
  1243  00184E  1E2B               	comf	___awdiv@divisor+1,f,c
  1244  001850  B0D8               	btfsc	status,0,c
  1245  001852  2A2B               	incf	___awdiv@divisor+1,f,c
  1246  001854  0E01               	movlw	1
  1247  001856  6E2D               	movwf	___awdiv@sign,c
  1248  001858  D000               	goto	l1716
  1249  00185A                     l1716:
  1250  00185A  AE29               	btfss	___awdiv@dividend+1,7,c
  1251  00185C  D007               	goto	l1722
  1252  00185E  6C28               	negf	___awdiv@dividend,c
  1253  001860  1E29               	comf	___awdiv@dividend+1,f,c
  1254  001862  B0D8               	btfsc	status,0,c
  1255  001864  2A29               	incf	___awdiv@dividend+1,f,c
  1256  001866  0E01               	movlw	1
  1257  001868  1A2D               	xorwf	___awdiv@sign,f,c
  1258  00186A  D000               	goto	l1722
  1259  00186C                     l1722:
  1260  00186C  0E00               	movlw	0
  1261  00186E  6E2F               	movwf	___awdiv@quotient+1,c
  1262  001870  0E00               	movlw	0
  1263  001872  6E2E               	movwf	___awdiv@quotient,c
  1264  001874  502A               	movf	___awdiv@divisor,w,c
  1265  001876  102B               	iorwf	___awdiv@divisor+1,w,c
  1266  001878  B4D8               	btfsc	status,2,c
  1267  00187A  D021               	goto	l1744
  1268  00187C  0E01               	movlw	1
  1269  00187E  6E2C               	movwf	___awdiv@counter,c
  1270  001880  D005               	goto	l1730
  1271  001882                     l1728:
  1272  001882  90D8               	bcf	status,0,c
  1273  001884  362A               	rlcf	___awdiv@divisor,f,c
  1274  001886  362B               	rlcf	___awdiv@divisor+1,f,c
  1275  001888  2A2C               	incf	___awdiv@counter,f,c
  1276  00188A  D000               	goto	l1730
  1277  00188C                     l1730:
  1278  00188C  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1279  00188E  D002               	goto	l1732
  1280  001890  D7F8               	goto	l1728
  1281  001892  D000               	goto	l1732
  1282  001894                     l1732:
  1283  001894  90D8               	bcf	status,0,c
  1284  001896  362E               	rlcf	___awdiv@quotient,f,c
  1285  001898  362F               	rlcf	___awdiv@quotient+1,f,c
  1286  00189A  502A               	movf	___awdiv@divisor,w,c
  1287  00189C  5C28               	subwf	___awdiv@dividend,w,c
  1288  00189E  502B               	movf	___awdiv@divisor+1,w,c
  1289  0018A0  5829               	subwfb	___awdiv@dividend+1,w,c
  1290  0018A2  A0D8               	btfss	status,0,c
  1291  0018A4  D006               	goto	l1740
  1292  0018A6  502A               	movf	___awdiv@divisor,w,c
  1293  0018A8  5E28               	subwf	___awdiv@dividend,f,c
  1294  0018AA  502B               	movf	___awdiv@divisor+1,w,c
  1295  0018AC  5A29               	subwfb	___awdiv@dividend+1,f,c
  1296  0018AE  802E               	bsf	___awdiv@quotient,0,c
  1297  0018B0  D000               	goto	l1740
  1298  0018B2                     l1740:
  1299  0018B2  90D8               	bcf	status,0,c
  1300  0018B4  322B               	rrcf	___awdiv@divisor+1,f,c
  1301  0018B6  322A               	rrcf	___awdiv@divisor,f,c
  1302  0018B8  2E2C               	decfsz	___awdiv@counter,f,c
  1303  0018BA  D7EC               	goto	l1732
  1304  0018BC  D000               	goto	l1744
  1305  0018BE                     l1744:
  1306  0018BE  502D               	movf	___awdiv@sign,w,c
  1307  0018C0  B4D8               	btfsc	status,2,c
  1308  0018C2  D005               	goto	l1748
  1309  0018C4  6C2E               	negf	___awdiv@quotient,c
  1310  0018C6  1E2F               	comf	___awdiv@quotient+1,f,c
  1311  0018C8  B0D8               	btfsc	status,0,c
  1312  0018CA  2A2F               	incf	___awdiv@quotient+1,f,c
  1313  0018CC  D000               	goto	l1748
  1314  0018CE                     l1748:
  1315  0018CE  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1316  0018D2  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1317  0018D6  D000               	goto	l474
  1318  0018D8                     l474:
  1319  0018D8  0012               	return		;funcret
  1320  0018DA                     __end_of___awdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _MIN *****************
  1337 ;; Defined at:
  1338 ;;		line 175 in file "user.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               2   45[COMRAM] int 
  1341 ;;  b               2   47[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   45[COMRAM] int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        5 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sensorComputation
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  0019D6                     __ptext5:
  1369                           	opt stack 0
  1370  0019D6                     _MIN:
  1371                           	opt stack 24
  1372                           
  1373                           ;user.c: 177: if(a>b) return b;
  1374                           
  1375                           ;incstack = 0
  1376  0019D6  502E               	movf	MIN@a,w,c
  1377  0019D8  5C30               	subwf	MIN@b,w,c
  1378  0019DA  5031               	movf	MIN@b+1,w,c
  1379  0019DC  0A80               	xorlw	128
  1380  0019DE  6E32               	movwf	??_MIN& (0+255),c
  1381  0019E0  502F               	movf	MIN@a+1,w,c
  1382  0019E2  0A80               	xorlw	128
  1383  0019E4  5832               	subwfb	??_MIN& (0+255),w,c
  1384  0019E6  B0D8               	btfsc	status,0,c
  1385  0019E8  D005               	goto	l273
  1386  0019EA  C030  F02E         	movff	MIN@b,?_MIN
  1387  0019EE  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1388  0019F2  D004               	goto	l274
  1389  0019F4                     l273:
  1390                           
  1391                           ;user.c: 178: return a;
  1392  0019F4  C02E  F02E         	movff	MIN@a,?_MIN
  1393  0019F8  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1394  0019FC                     l274:
  1395  0019FC  0012               	return		;funcret
  1396  0019FE                     __end_of_MIN:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postinc2	equ	0xFDE
  1407                           postdec2	equ	0xFDD
  1408                           fsr2h	equ	0xFDA
  1409                           fsr2l	equ	0xFD9
  1410                           status	equ	0xFD8
  1411                           
  1412 ;; *************** function _MAX *****************
  1413 ;; Defined at:
  1414 ;;		line 181 in file "user.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2   45[COMRAM] int 
  1417 ;;  b               2   47[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   45[COMRAM] int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;Total ram usage:        5 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    4
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_sensorComputation
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  0019FE                     __ptext6:
  1445                           	opt stack 0
  1446  0019FE                     _MAX:
  1447                           	opt stack 24
  1448                           
  1449                           ;user.c: 183: if(a>b) return a;
  1450                           
  1451                           ;incstack = 0
  1452  0019FE  502E               	movf	MAX@a,w,c
  1453  001A00  5C30               	subwf	MAX@b,w,c
  1454  001A02  5031               	movf	MAX@b+1,w,c
  1455  001A04  0A80               	xorlw	128
  1456  001A06  6E32               	movwf	??_MAX& (0+255),c
  1457  001A08  502F               	movf	MAX@a+1,w,c
  1458  001A0A  0A80               	xorlw	128
  1459  001A0C  5832               	subwfb	??_MAX& (0+255),w,c
  1460  001A0E  B0D8               	btfsc	status,0,c
  1461  001A10  D005               	goto	l277
  1462  001A12  C02E  F02E         	movff	MAX@a,?_MAX
  1463  001A16  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1464  001A1A  D004               	goto	l278
  1465  001A1C                     l277:
  1466                           
  1467                           ;user.c: 184: return b;
  1468  001A1C  C030  F02E         	movff	MAX@b,?_MAX
  1469  001A20  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1470  001A24                     l278:
  1471  001A24  0012               	return		;funcret
  1472  001A26                     __end_of_MAX:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _InitApp *****************
  1489 ;; Defined at:
  1490 ;;		line 35 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    5
  1511 ;; This function calls:
  1512 ;;		_AlgorithmSelection
  1513 ;;		_delay
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  0018DA                     __ptext7:
  1521                           	opt stack 0
  1522  0018DA                     _InitApp:
  1523                           	opt stack 25
  1524                           
  1525                           ;user.c: 39: TRISC = 0;
  1526                           
  1527                           ;incstack = 0
  1528  0018DA  0E00               	movlw	0
  1529  0018DC  6E94               	movwf	3988,c	;volatile
  1530                           
  1531                           ;user.c: 43: TRISEbits.TRISE1=1;
  1532  0018DE  8296               	bsf	3990,1,c	;volatile
  1533                           
  1534                           ;user.c: 45: TRISEbits.TRISE2=1;
  1535  0018E0  8496               	bsf	3990,2,c	;volatile
  1536                           
  1537                           ;user.c: 47: TRISBbits.RB1=1;
  1538  0018E2  8293               	bsf	3987,1,c	;volatile
  1539                           
  1540                           ;user.c: 49: TRISBbits.RB0=1;
  1541  0018E4  8093               	bsf	3987,0,c	;volatile
  1542                           
  1543                           ;user.c: 52: TRISBbits.RB3=1;
  1544  0018E6  8693               	bsf	3987,3,c	;volatile
  1545                           
  1546                           ;user.c: 54: TRISBbits.RB2=1;
  1547  0018E8  8493               	bsf	3987,2,c	;volatile
  1548                           
  1549                           ;user.c: 58: ADCON1 =0b00000001;
  1550  0018EA  0E01               	movlw	1
  1551  0018EC  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;user.c: 63: ADCON2=0b00001010;
  1554  0018EE  0E0A               	movlw	10
  1555  0018F0  6EC0               	movwf	4032,c	;volatile
  1556                           
  1557                           ;user.c: 68: ADCON0=0b00101011;
  1558  0018F2  0E2B               	movlw	43
  1559  0018F4  6EC2               	movwf	4034,c	;volatile
  1560                           
  1561                           ;user.c: 77: T0CON = 0b11000100;
  1562  0018F6  0EC4               	movlw	196
  1563  0018F8  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;user.c: 85: INTCON2 = 0b11110100;
  1566  0018FA  0EF4               	movlw	244
  1567  0018FC  6EF1               	movwf	intcon2,c	;volatile
  1568                           
  1569                           ;user.c: 95: INTCON = 0b00100000;
  1570  0018FE  0E20               	movlw	32
  1571  001900  6EF2               	movwf	intcon,c	;volatile
  1572                           
  1573                           ;user.c: 105: AlgorithmSelection();
  1574  001902  EC13  F00D         	call	_AlgorithmSelection	;wreg free
  1575                           
  1576                           ;user.c: 108: delay(1000);
  1577  001906  0E03               	movlw	3
  1578  001908  6E29               	movwf	delay@ms+1,c
  1579  00190A  0EE8               	movlw	232
  1580  00190C  6E28               	movwf	delay@ms,c
  1581  00190E  ECA9  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 109: INTCONbits.GIE = 1;
  1584  001912  8EF2               	bsf	intcon,7,c	;volatile
  1585  001914  0012               	return		;funcret
  1586  001916                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   39[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   42[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  001952                     __ptext8:
  1636                           	opt stack 0
  1637  001952                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  001952  0E00               	movlw	0
  1644  001954  6E2C               	movwf	delay@x+1,c
  1645  001956  0E00               	movlw	0
  1646  001958  6E2B               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  00195A  0E00               	movlw	0
  1650  00195C  6E2C               	movwf	delay@x+1,c
  1651  00195E  0E00               	movlw	0
  1652  001960  6E2B               	movwf	delay@x,c
  1653  001962  D00A               	goto	l233
  1654  001964                     l1434:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001964  0E0B               	movlw	11
  1658  001966  6E2A               	movwf	??_delay& (0+255),c
  1659  001968  0E62               	movlw	98
  1660  00196A                     u1527:
  1661  00196A  2EE8               	decfsz	wreg,f,c
  1662  00196C  D7FE               	goto	u1527
  1663  00196E  2E2A               	decfsz	??_delay& (0+255),f,c
  1664  001970  D7FC               	goto	u1527
  1665  001972  D000               	nop2	
  1666  001974  4A2B               	infsnz	delay@x,f,c
  1667  001976  2A2C               	incf	delay@x+1,f,c
  1668  001978                     l233:
  1669  001978  5028               	movf	delay@ms,w,c
  1670  00197A  5C2B               	subwf	delay@x,w,c
  1671  00197C  5029               	movf	delay@ms+1,w,c
  1672  00197E  582C               	subwfb	delay@x+1,w,c
  1673  001980  A0D8               	btfss	status,0,c
  1674  001982  D7F0               	goto	l1434
  1675  001984  0012               	return		;funcret
  1676  001986                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _AlgorithmSelection *****************
  1695 ;; Defined at:
  1696 ;;		line 112 in file "user.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_InitApp
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001A26                     __ptext9:
  1726                           	opt stack 0
  1727  001A26                     _AlgorithmSelection:
  1728                           	opt stack 25
  1729                           
  1730                           ;user.c: 114: ADCON0 = 0b00100111;
  1731                           
  1732                           ;incstack = 0
  1733  001A26  0E27               	movlw	39
  1734  001A28  6EC2               	movwf	4034,c	;volatile
  1735                           
  1736                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1737  001A2A  82C2               	bsf	4034,1,c	;volatile
  1738                           
  1739                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1740  001A2C  D000               	goto	l242
  1741  001A2E                     l242:
  1742  001A2E  B2C2               	btfsc	4034,1,c	;volatile
  1743  001A30  D7FE               	goto	l242
  1744                           
  1745                           ;user.c: 119: if(ADRESL > 0b10000000)
  1746  001A32  0E80               	movlw	128
  1747  001A34  64C3               	cpfsgt	4035,c	;volatile
  1748  001A36  D002               	goto	l1028
  1749                           
  1750                           ;user.c: 120: algorithm = LEFTWALL;
  1751  001A38  0E00               	movlw	0
  1752  001A3A  D001               	goto	L5
  1753  001A3C                     l1028:
  1754                           
  1755                           ;user.c: 121: else
  1756                           ;user.c: 122: algorithm = RIGHTWALL;
  1757  001A3C  0E01               	movlw	1
  1758  001A3E                     L5:
  1759  001A3E  6E55               	movwf	_algorithm,c
  1760  001A40  D000               	goto	l247
  1761  001A42                     l247:
  1762  001A42  0012               	return		;funcret
  1763  001A44                     __end_of_AlgorithmSelection:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _ConfigureOscillator *****************
  1782 ;; Defined at:
  1783 ;;		line 24 in file "system.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text10
  1812  001ABA                     __ptext10:
  1813                           	opt stack 0
  1814  001ABA                     _ConfigureOscillator:
  1815                           	opt stack 26
  1816                           
  1817                           ;system.c: 29: OSCCON = 0b01111100;
  1818                           
  1819                           ;incstack = 0
  1820  001ABA  0E7C               	movlw	124
  1821  001ABC  6ED3               	movwf	4051,c	;volatile
  1822                           
  1823                           ;system.c: 31: OSCTUNE = 0b01001111;
  1824  001ABE  0E4F               	movlw	79
  1825  001AC0  6E9B               	movwf	3995,c	;volatile
  1826  001AC2  0012               	return		;funcret
  1827  001AC4                     __end_of_ConfigureOscillator:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _low_isr *****************
  1846 ;; Defined at:
  1847 ;;		line 215 in file "interrupts.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:       17 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		Interrupt level 1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	intcodelo
  1876  000018                     __pintcodelo:
  1877                           	opt stack 0
  1878  000018                     _low_isr:
  1879                           	opt stack 24
  1880                           
  1881                           ;incstack = 0
  1882  000018  CFD8 F001          	movff	status,??_low_isr
  1883  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1884  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1885  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1886  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1887  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1888  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1889  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1890  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1891  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1892  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1893  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1894  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1895  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1896  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1897  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1898  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1899  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1900  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1901  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1902  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1903  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1904  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1905  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1906  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1907  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1908  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1909  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1910  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1911  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1912  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1913  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1914  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1915  00009C  C001  FFD8         	movff	??_low_isr,status
  1916  0000A0  0010               	retfie	
  1917  0000A2                     __end_of_low_isr:
  1918                           	opt stack 0
  1919                           pclatu	equ	0xFFB
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon2	equ	0xFF1
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           bsr	equ	0xFE0
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _high_isr *****************
  1943 ;; Defined at:
  1944 ;;		line 83 in file "interrupts.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		_KController
  1967 ;;		_Reversing
  1968 ;;		_forward
  1969 ;;		_merge
  1970 ;;		_motorCounterUpdate
  1971 ;;		_moveMouse
  1972 ;;		_rotate
  1973 ;; This function is called by:
  1974 ;;		Interrupt level 2
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	intcode
  1979  000008                     __pintcode:
  1980                           	opt stack 0
  1981  000008                     _high_isr:
  1982                           	opt stack 24
  1983                           
  1984                           ;incstack = 0
  1985  000008  CFFA F01A          	movff	pclath,??_high_isr
  1986  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1987  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1988  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  1989                           pclatu	equ	0xFFB
  1990                           pclath	equ	0xFFA
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           prodh	equ	0xFF4
  1996                           prodl	equ	0xFF3
  1997                           intcon	equ	0xFF2
  1998                           intcon2	equ	0xFF1
  1999                           postinc0	equ	0xFEE
  2000                           fsr0h	equ	0xFEA
  2001                           fsr0l	equ	0xFE9
  2002                           wreg	equ	0xFE8
  2003                           fsr1h	equ	0xFE2
  2004                           fsr1l	equ	0xFE1
  2005                           bsr	equ	0xFE0
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           fsr2h	equ	0xFDA
  2009                           fsr2l	equ	0xFD9
  2010                           status	equ	0xFD8
  2011                           
  2012                           	psect	intcode_body
  2013  00100A                     __pintcode_body:
  2014                           	opt stack 24
  2015  00100A                     int_func:
  2016                           	opt stack 24
  2017  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2018  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2019  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2020  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2021  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2022  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2023  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2024  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2025  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2026  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2027  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2028  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2029                           
  2030                           ;interrupts.c: 102: if(INTCONbits.TMR0IF == 1)
  2031  001038  A4F2               	btfss	intcon,2,c	;volatile
  2032  00103A  D104               	goto	i2l79
  2033                           
  2034                           ;interrupts.c: 103: {
  2035                           ;interrupts.c: 104: if(MotorDelayCounter > 2)
  2036  00103C  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2037  00103E  D0FE               	goto	i2l1672
  2038  001040  504A               	movf	_MotorDelayCounter+1,w,c
  2039  001042  E104               	bnz	i2u105_40
  2040  001044  0E03               	movlw	3
  2041  001046  5C49               	subwf	_MotorDelayCounter,w,c
  2042  001048  A0D8               	btfss	status,0,c
  2043  00104A  D0F8               	goto	i2l1672
  2044  00104C                     i2u105_40:
  2045                           
  2046                           ;interrupts.c: 105: {
  2047                           ;interrupts.c: 107: if (ForwardCounter > 0)
  2048  00104C  BE46               	btfsc	_ForwardCounter+1,7,c
  2049  00104E  D008               	goto	i2l1584
  2050  001050  5046               	movf	_ForwardCounter+1,w,c
  2051  001052  E103               	bnz	i2u106_40
  2052  001054  0445               	decf	_ForwardCounter,w,c
  2053  001056  A0D8               	btfss	status,0,c
  2054  001058  D003               	goto	i2l1584
  2055  00105A                     i2u106_40:
  2056                           
  2057                           ;interrupts.c: 108: forward();
  2058  00105A  EC22  F00D         	call	_forward	;wreg free
  2059  00105E  D0E2               	goto	i2l56
  2060  001060                     i2l1584:
  2061                           
  2062                           ;interrupts.c: 109: else if (ReverseCounter > 0)
  2063  001060  BE4E               	btfsc	_ReverseCounter+1,7,c
  2064  001062  D008               	goto	i2l1588
  2065  001064  504E               	movf	_ReverseCounter+1,w,c
  2066  001066  E103               	bnz	i2u107_40
  2067  001068  044D               	decf	_ReverseCounter,w,c
  2068  00106A  A0D8               	btfss	status,0,c
  2069  00106C  D003               	goto	i2l1588
  2070  00106E                     i2u107_40:
  2071                           
  2072                           ;interrupts.c: 110: Reversing();
  2073  00106E  EC30  F00D         	call	_Reversing	;wreg free
  2074  001072  D0D8               	goto	i2l56
  2075  001074                     i2l1588:
  2076                           
  2077                           ;interrupts.c: 111: else if(RotateCounter > 0)
  2078  001074  BE50               	btfsc	_RotateCounter+1,7,c
  2079  001076  D020               	goto	i2l1600
  2080  001078  5050               	movf	_RotateCounter+1,w,c
  2081  00107A  E103               	bnz	i2u108_40
  2082  00107C  044F               	decf	_RotateCounter,w,c
  2083  00107E  A0D8               	btfss	status,0,c
  2084  001080  D01B               	goto	i2l1600
  2085  001082                     i2u108_40:
  2086                           
  2087                           ;interrupts.c: 112: {
  2088                           ;interrupts.c: 114: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2089  001082  BE42               	btfsc	_sensorValue+5,7,c
  2090  001084  D006               	goto	i2l1592
  2091  001086  0E21               	movlw	33
  2092  001088  5C41               	subwf	_sensorValue+4,w,c
  2093  00108A  0E03               	movlw	3
  2094  00108C  5842               	subwfb	_sensorValue+5,w,c
  2095  00108E  B0D8               	btfsc	status,0,c
  2096  001090  D008               	goto	i2l1594
  2097  001092                     i2l1592:
  2098  001092  BE44               	btfsc	_sensorValue+7,7,c
  2099  001094  D00D               	goto	i2l1598
  2100  001096  0E21               	movlw	33
  2101  001098  5C43               	subwf	_sensorValue+6,w,c
  2102  00109A  0E03               	movlw	3
  2103  00109C  5844               	subwfb	_sensorValue+7,w,c
  2104  00109E  A0D8               	btfss	status,0,c
  2105  0010A0  D007               	goto	i2l1598
  2106  0010A2                     i2l1594:
  2107                           
  2108                           ;interrupts.c: 115: ReverseCounter = 15;
  2109  0010A2  0E00               	movlw	0
  2110  0010A4  6E4E               	movwf	_ReverseCounter+1,c
  2111  0010A6  0E0F               	movlw	15
  2112  0010A8  6E4D               	movwf	_ReverseCounter,c
  2113                           
  2114                           ;interrupts.c: 116: Reversing();
  2115  0010AA  EC30  F00D         	call	_Reversing	;wreg free
  2116                           
  2117                           ;interrupts.c: 117: } else {
  2118  0010AE  D0BA               	goto	i2l56
  2119  0010B0                     i2l1598:
  2120                           
  2121                           ;interrupts.c: 118: rotate(rotatingSide);
  2122  0010B0  5057               	movf	_rotatingSide,w,c
  2123  0010B2  EC8B  F00C         	call	_rotate
  2124                           
  2125                           ;interrupts.c: 119: }
  2126                           ;interrupts.c: 120: }
  2127  0010B6  D0B6               	goto	i2l56
  2128  0010B8                     i2l1600:
  2129                           
  2130                           ;interrupts.c: 124: else if (sensorValue[0] < 70 && algorithm == LEFTWALL)
  2131  0010B8  BE3E               	btfsc	_sensorValue+1,7,c
  2132  0010BA  D006               	goto	i2l1602
  2133  0010BC  503E               	movf	_sensorValue+1,w,c
  2134  0010BE  E11E               	bnz	i2l1618
  2135  0010C0  0E46               	movlw	70
  2136  0010C2  5C3D               	subwf	_sensorValue,w,c
  2137  0010C4  B0D8               	btfsc	status,0,c
  2138  0010C6  D01A               	goto	i2l1618
  2139  0010C8                     i2l1602:
  2140  0010C8  5055               	movf	_algorithm,w,c
  2141  0010CA  A4D8               	btfss	status,2,c
  2142  0010CC  D017               	goto	i2l1618
  2143                           
  2144                           ;interrupts.c: 125: {
  2145                           ;interrupts.c: 126: if(justTurned == 0) {
  2146  0010CE  5056               	movf	_justTurned,w,c
  2147  0010D0  A4D8               	btfss	status,2,c
  2148  0010D2  D004               	goto	i2l1608
  2149                           
  2150                           ;interrupts.c: 127: ForwardCounter = 420;
  2151  0010D4  0E01               	movlw	1
  2152  0010D6  6E46               	movwf	_ForwardCounter+1,c
  2153  0010D8  0EA4               	movlw	164
  2154  0010DA  D003               	goto	L6
  2155  0010DC                     i2l1608:
  2156                           
  2157                           ;interrupts.c: 129: ForwardCounter = 380;
  2158  0010DC  0E01               	movlw	1
  2159  0010DE  6E46               	movwf	_ForwardCounter+1,c
  2160  0010E0  0E7C               	movlw	124
  2161  0010E2                     L6:
  2162  0010E2  6E45               	movwf	_ForwardCounter,c
  2163  0010E4  D000               	goto	i2l1610
  2164  0010E6                     i2l1610:
  2165                           
  2166                           ;interrupts.c: 130: }
  2167                           ;interrupts.c: 131: forward();
  2168  0010E6  EC22  F00D         	call	_forward	;wreg free
  2169                           
  2170                           ;interrupts.c: 132: RotateCounter = 167;
  2171  0010EA  0E00               	movlw	0
  2172  0010EC  6E50               	movwf	_RotateCounter+1,c
  2173  0010EE  0EA7               	movlw	167
  2174  0010F0  6E4F               	movwf	_RotateCounter,c
  2175                           
  2176                           ;interrupts.c: 133: rotatingSide = LEFT;
  2177  0010F2  0E00               	movlw	0
  2178  0010F4  D039               	goto	L7
  2179  0010F6                     i2l1616:
  2180                           
  2181                           ;interrupts.c: 134: justTurned = 1;
  2182  0010F6  0E01               	movlw	1
  2183  0010F8  6E56               	movwf	_justTurned,c
  2184                           
  2185                           ;interrupts.c: 137: }
  2186  0010FA  D094               	goto	i2l56
  2187  0010FC                     i2l1618:
  2188                           
  2189                           ;interrupts.c: 140: else if (sensorValue[1] < 70 && (sensorValue[2] > 100 && sensorValue
      +                          [3] > 100)
  2190                           ;interrupts.c: 141: && sensorValue[0] > 70 && algorithm == LEFTWALL)
  2191  0010FC  BE40               	btfsc	_sensorValue+3,7,c
  2192  0010FE  D006               	goto	i2l1620
  2193  001100  5040               	movf	_sensorValue+3,w,c
  2194  001102  E134               	bnz	i2l1642
  2195  001104  0E46               	movlw	70
  2196  001106  5C3F               	subwf	_sensorValue+2,w,c
  2197  001108  B0D8               	btfsc	status,0,c
  2198  00110A  D030               	goto	i2l1642
  2199  00110C                     i2l1620:
  2200  00110C  BE42               	btfsc	_sensorValue+5,7,c
  2201  00110E  D02E               	goto	i2l1642
  2202  001110  5042               	movf	_sensorValue+5,w,c
  2203  001112  E104               	bnz	i2u115_40
  2204  001114  0E65               	movlw	101
  2205  001116  5C41               	subwf	_sensorValue+4,w,c
  2206  001118  A0D8               	btfss	status,0,c
  2207  00111A  D028               	goto	i2l1642
  2208  00111C                     i2u115_40:
  2209  00111C  BE44               	btfsc	_sensorValue+7,7,c
  2210  00111E  D026               	goto	i2l1642
  2211  001120  5044               	movf	_sensorValue+7,w,c
  2212  001122  E104               	bnz	i2u116_40
  2213  001124  0E65               	movlw	101
  2214  001126  5C43               	subwf	_sensorValue+6,w,c
  2215  001128  A0D8               	btfss	status,0,c
  2216  00112A  D020               	goto	i2l1642
  2217  00112C                     i2u116_40:
  2218  00112C  BE3E               	btfsc	_sensorValue+1,7,c
  2219  00112E  D01E               	goto	i2l1642
  2220  001130  503E               	movf	_sensorValue+1,w,c
  2221  001132  E104               	bnz	i2u117_40
  2222  001134  0E47               	movlw	71
  2223  001136  5C3D               	subwf	_sensorValue,w,c
  2224  001138  A0D8               	btfss	status,0,c
  2225  00113A  D018               	goto	i2l1642
  2226  00113C                     i2u117_40:
  2227  00113C  5055               	movf	_algorithm,w,c
  2228  00113E  A4D8               	btfss	status,2,c
  2229  001140  D015               	goto	i2l1642
  2230                           
  2231                           ;interrupts.c: 142: {
  2232                           ;interrupts.c: 143: if(justTurned == 0) {
  2233  001142  5056               	movf	_justTurned,w,c
  2234  001144  A4D8               	btfss	status,2,c
  2235  001146  D004               	goto	i2l1632
  2236                           
  2237                           ;interrupts.c: 144: ForwardCounter = 420;
  2238  001148  0E01               	movlw	1
  2239  00114A  6E46               	movwf	_ForwardCounter+1,c
  2240  00114C  0EA4               	movlw	164
  2241  00114E  D003               	goto	L8
  2242  001150                     i2l1632:
  2243                           
  2244                           ;interrupts.c: 146: ForwardCounter = 380;
  2245  001150  0E01               	movlw	1
  2246  001152  6E46               	movwf	_ForwardCounter+1,c
  2247  001154  0E7C               	movlw	124
  2248  001156                     L8:
  2249  001156  6E45               	movwf	_ForwardCounter,c
  2250  001158  D000               	goto	i2l1634
  2251  00115A                     i2l1634:
  2252                           
  2253                           ;interrupts.c: 147: }
  2254                           ;interrupts.c: 148: forward();
  2255  00115A  EC22  F00D         	call	_forward	;wreg free
  2256                           
  2257                           ;interrupts.c: 149: RotateCounter = 167;
  2258  00115E  0E00               	movlw	0
  2259  001160  6E50               	movwf	_RotateCounter+1,c
  2260  001162  0EA7               	movlw	167
  2261  001164  6E4F               	movwf	_RotateCounter,c
  2262                           
  2263                           ;interrupts.c: 150: rotatingSide = RIGHT;
  2264  001166  0E01               	movlw	1
  2265  001168                     L7:
  2266  001168  6E57               	movwf	_rotatingSide,c
  2267  00116A  D7C5               	goto	i2l1616
  2268  00116C                     i2l1642:
  2269                           
  2270                           ;interrupts.c: 157: else if ((sensorValue[0] > 70 && sensorValue[1] > 100 )
  2271                           ;interrupts.c: 158: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2272  00116C  BE3E               	btfsc	_sensorValue+1,7,c
  2273  00116E  D021               	goto	i2l1654
  2274  001170  503E               	movf	_sensorValue+1,w,c
  2275  001172  E104               	bnz	i2u120_40
  2276  001174  0E47               	movlw	71
  2277  001176  5C3D               	subwf	_sensorValue,w,c
  2278  001178  A0D8               	btfss	status,0,c
  2279  00117A  D01B               	goto	i2l1654
  2280  00117C                     i2u120_40:
  2281  00117C  BE40               	btfsc	_sensorValue+3,7,c
  2282  00117E  D019               	goto	i2l1654
  2283  001180  5040               	movf	_sensorValue+3,w,c
  2284  001182  E104               	bnz	i2u121_40
  2285  001184  0E65               	movlw	101
  2286  001186  5C3F               	subwf	_sensorValue+2,w,c
  2287  001188  A0D8               	btfss	status,0,c
  2288  00118A  D013               	goto	i2l1654
  2289  00118C                     i2u121_40:
  2290  00118C  BE42               	btfsc	_sensorValue+5,7,c
  2291  00118E  D00D               	goto	i2l1650
  2292  001190  0EA4               	movlw	164
  2293  001192  5C41               	subwf	_sensorValue+4,w,c
  2294  001194  0E01               	movlw	1
  2295  001196  5842               	subwfb	_sensorValue+5,w,c
  2296  001198  B0D8               	btfsc	status,0,c
  2297  00119A  BE44               	btfsc	_sensorValue+7,7,c
  2298  00119C  D006               	goto	i2l1650
  2299  00119E  0EA4               	movlw	164
  2300  0011A0  5C43               	subwf	_sensorValue+6,w,c
  2301  0011A2  0E01               	movlw	1
  2302  0011A4  5844               	subwfb	_sensorValue+7,w,c
  2303  0011A6  B0D8               	btfsc	status,0,c
  2304  0011A8  D004               	goto	i2l1654
  2305  0011AA                     i2l1650:
  2306                           
  2307                           ;interrupts.c: 159: {
  2308                           ;interrupts.c: 160: KController();
  2309  0011AA  ECB5  F00B         	call	_KController	;wreg free
  2310                           
  2311                           ;interrupts.c: 161: justTurned = 0;
  2312  0011AE  0E00               	movlw	0
  2313  0011B0  D7A3               	goto	L9
  2314  0011B2                     i2l1654:
  2315                           
  2316                           ;interrupts.c: 164: else if ((sensorValue[0] > 70 && sensorValue[1] > 70 )
  2317                           ;interrupts.c: 165: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2318  0011B2  BE3E               	btfsc	_sensorValue+1,7,c
  2319  0011B4  D02C               	goto	i2l1668
  2320  0011B6  503E               	movf	_sensorValue+1,w,c
  2321  0011B8  E104               	bnz	i2u124_40
  2322  0011BA  0E47               	movlw	71
  2323  0011BC  5C3D               	subwf	_sensorValue,w,c
  2324  0011BE  A0D8               	btfss	status,0,c
  2325  0011C0  D026               	goto	i2l1668
  2326  0011C2                     i2u124_40:
  2327  0011C2  BE40               	btfsc	_sensorValue+3,7,c
  2328  0011C4  D024               	goto	i2l1668
  2329  0011C6  5040               	movf	_sensorValue+3,w,c
  2330  0011C8  E104               	bnz	i2u125_40
  2331  0011CA  0E47               	movlw	71
  2332  0011CC  5C3F               	subwf	_sensorValue+2,w,c
  2333  0011CE  A0D8               	btfss	status,0,c
  2334  0011D0  D01E               	goto	i2l1668
  2335  0011D2                     i2u125_40:
  2336  0011D2  BE42               	btfsc	_sensorValue+5,7,c
  2337  0011D4  D01C               	goto	i2l1668
  2338  0011D6  0EA5               	movlw	165
  2339  0011D8  5C41               	subwf	_sensorValue+4,w,c
  2340  0011DA  0E01               	movlw	1
  2341  0011DC  5842               	subwfb	_sensorValue+5,w,c
  2342  0011DE  B0D8               	btfsc	status,0,c
  2343  0011E0  BE44               	btfsc	_sensorValue+7,7,c
  2344  0011E2  D015               	goto	i2l1668
  2345  0011E4  0EA5               	movlw	165
  2346  0011E6  5C43               	subwf	_sensorValue+6,w,c
  2347  0011E8  0E01               	movlw	1
  2348  0011EA  5844               	subwfb	_sensorValue+7,w,c
  2349  0011EC  A0D8               	btfss	status,0,c
  2350  0011EE  D00F               	goto	i2l1668
  2351  0011F0  BE50               	btfsc	_RotateCounter+1,7,c
  2352  0011F2  D005               	goto	i2l1664
  2353  0011F4  5050               	movf	_RotateCounter+1,w,c
  2354  0011F6  E10B               	bnz	i2l1668
  2355  0011F8  044F               	decf	_RotateCounter,w,c
  2356  0011FA  B0D8               	btfsc	status,0,c
  2357  0011FC  D008               	goto	i2l1668
  2358  0011FE                     i2l1664:
  2359                           
  2360                           ;interrupts.c: 166: {
  2361                           ;interrupts.c: 167: RotateCounter = 167*2;
  2362  0011FE  0E01               	movlw	1
  2363  001200  6E50               	movwf	_RotateCounter+1,c
  2364  001202  0E4E               	movlw	78
  2365  001204  6E4F               	movwf	_RotateCounter,c
  2366                           
  2367                           ;interrupts.c: 168: rotate(rotatingSide);
  2368  001206  5057               	movf	_rotatingSide,w,c
  2369  001208  EC8B  F00C         	call	_rotate
  2370                           
  2371                           ;interrupts.c: 169: }
  2372  00120C  D00B               	goto	i2l56
  2373  00120E                     i2l1668:
  2374                           
  2375                           ;interrupts.c: 196: else {
  2376                           ;interrupts.c: 197: motorCounterUpdate(RIGHT,0);
  2377  00120E  0E00               	movlw	0
  2378  001210  6E12               	movwf	motorCounterUpdate@reverse,c
  2379  001212  0E01               	movlw	1
  2380  001214  EC3B  F00B         	call	_motorCounterUpdate
  2381                           
  2382                           ;interrupts.c: 198: motorCounterUpdate(LEFT,0);
  2383  001218  0E00               	movlw	0
  2384  00121A  6E12               	movwf	motorCounterUpdate@reverse,c
  2385  00121C  0E00               	movlw	0
  2386  00121E  EC3B  F00B         	call	_motorCounterUpdate
  2387  001222  D000               	goto	i2l56
  2388  001224                     i2l56:
  2389                           
  2390                           ;interrupts.c: 199: }
  2391                           ;interrupts.c: 200: moveMouse(merge(LMotorCounter,RMotorCounter));
  2392  001224  C054  F012         	movff	_RMotorCounter,merge@right
  2393  001228  5053               	movf	_LMotorCounter,w,c
  2394  00122A  EC55  F00D         	call	_merge
  2395  00122E  EC62  F00D         	call	_moveMouse
  2396                           
  2397                           ;interrupts.c: 201: MotorDelayCounter = 0;
  2398  001232  0E00               	movlw	0
  2399  001234  6E4A               	movwf	_MotorDelayCounter+1,c
  2400  001236  0E00               	movlw	0
  2401  001238  6E49               	movwf	_MotorDelayCounter,c
  2402  00123A  D000               	goto	i2l1672
  2403  00123C                     i2l1672:
  2404                           
  2405                           ;interrupts.c: 203: }
  2406                           ;interrupts.c: 205: MotorDelayCounter++;
  2407  00123C  4A49               	infsnz	_MotorDelayCounter,f,c
  2408  00123E  2A4A               	incf	_MotorDelayCounter+1,f,c
  2409                           
  2410                           ;interrupts.c: 206: INTCONbits.TMR0IF = 0;
  2411  001240  94F2               	bcf	intcon,2,c	;volatile
  2412  001242  D000               	goto	i2l79
  2413  001244                     i2l79:
  2414  001244  C027  FFF5         	movff	??_high_isr+13,tablat
  2415  001248  C026  FFF8         	movff	??_high_isr+12,tblptru
  2416  00124C  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2417  001250  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2418  001254  C023  FFF4         	movff	??_high_isr+9,prodh
  2419  001258  C022  FFF3         	movff	??_high_isr+8,prodl
  2420  00125C  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2421  001260  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2422  001264  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2423  001268  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2424  00126C  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2425  001270  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2426  001274  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2427  001278  C01A  FFFA         	movff	??_high_isr,pclath
  2428  00127C  0011               	retfie		f
  2429  00127E                     __end_of_high_isr:
  2430                           	opt stack 0
  2431                           pclatu	equ	0xFFB
  2432                           pclath	equ	0xFFA
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           intcon	equ	0xFF2
  2440                           intcon2	equ	0xFF1
  2441                           postinc0	equ	0xFEE
  2442                           fsr0h	equ	0xFEA
  2443                           fsr0l	equ	0xFE9
  2444                           wreg	equ	0xFE8
  2445                           fsr1h	equ	0xFE2
  2446                           fsr1l	equ	0xFE1
  2447                           bsr	equ	0xFE0
  2448                           postinc2	equ	0xFDE
  2449                           postdec2	equ	0xFDD
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _rotate *****************
  2455 ;; Defined at:
  2456 ;;		line 352 in file "interrupts.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  side            1    wreg     enum E4082
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  side            1   19[COMRAM] enum E4082
  2461 ;; Return value:  Size  Location     Type
  2462 ;;		None               void
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;Total ram usage:        1 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    1
  2477 ;; This function calls:
  2478 ;;		_motorCounterUpdate
  2479 ;; This function is called by:
  2480 ;;		_high_isr
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text13
  2485  001916                     __ptext13:
  2486                           	opt stack 0
  2487  001916                     _rotate:
  2488                           	opt stack 24
  2489                           
  2490                           ;incstack = 0
  2491                           ;rotate@side stored from wreg
  2492  001916  6E14               	movwf	rotate@side,c
  2493                           
  2494                           ;interrupts.c: 354: if (side == LEFT){
  2495  001918  5014               	movf	rotate@side,w,c
  2496  00191A  A4D8               	btfss	status,2,c
  2497  00191C  D00B               	goto	i2l1480
  2498                           
  2499                           ;interrupts.c: 355: motorCounterUpdate(RIGHT,0);
  2500  00191E  0E00               	movlw	0
  2501  001920  6E12               	movwf	motorCounterUpdate@reverse,c
  2502  001922  0E01               	movlw	1
  2503  001924  EC3B  F00B         	call	_motorCounterUpdate
  2504                           
  2505                           ;interrupts.c: 356: motorCounterUpdate(LEFT,1);
  2506  001928  0E01               	movlw	1
  2507  00192A  6E12               	movwf	motorCounterUpdate@reverse,c
  2508  00192C  0E00               	movlw	0
  2509  00192E  EC3B  F00B         	call	_motorCounterUpdate
  2510                           
  2511                           ;interrupts.c: 357: } else {
  2512  001932  D00B               	goto	i2l1482
  2513  001934                     i2l1480:
  2514                           
  2515                           ;interrupts.c: 358: motorCounterUpdate(LEFT,0);
  2516  001934  0E00               	movlw	0
  2517  001936  6E12               	movwf	motorCounterUpdate@reverse,c
  2518  001938  0E00               	movlw	0
  2519  00193A  EC3B  F00B         	call	_motorCounterUpdate
  2520                           
  2521                           ;interrupts.c: 359: motorCounterUpdate(RIGHT,1);
  2522  00193E  0E01               	movlw	1
  2523  001940  6E12               	movwf	motorCounterUpdate@reverse,c
  2524  001942  0E01               	movlw	1
  2525  001944  EC3B  F00B         	call	_motorCounterUpdate
  2526  001948  D000               	goto	i2l1482
  2527  00194A                     i2l1482:
  2528                           
  2529                           ;interrupts.c: 360: }
  2530                           ;interrupts.c: 361: RotateCounter--;
  2531  00194A  064F               	decf	_RotateCounter,f,c
  2532  00194C  A0D8               	btfss	status,0,c
  2533  00194E  0650               	decf	_RotateCounter+1,f,c
  2534  001950  0012               	return		;funcret
  2535  001952                     __end_of_rotate:
  2536                           	opt stack 0
  2537                           pclatu	equ	0xFFB
  2538                           pclath	equ	0xFFA
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           intcon2	equ	0xFF1
  2547                           postinc0	equ	0xFEE
  2548                           fsr0h	equ	0xFEA
  2549                           fsr0l	equ	0xFE9
  2550                           wreg	equ	0xFE8
  2551                           fsr1h	equ	0xFE2
  2552                           fsr1l	equ	0xFE1
  2553                           bsr	equ	0xFE0
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560 ;; *************** function _forward *****************
  2561 ;; Defined at:
  2562 ;;		line 383 in file "interrupts.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;		None               void
  2569 ;; Registers used:
  2570 ;;		wreg, status,2, status,0, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    1
  2583 ;; This function calls:
  2584 ;;		_motorCounterUpdate
  2585 ;; This function is called by:
  2586 ;;		_high_isr
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text14
  2591  001A44                     __ptext14:
  2592                           	opt stack 0
  2593  001A44                     _forward:
  2594                           	opt stack 24
  2595                           
  2596                           ;interrupts.c: 385: motorCounterUpdate(RIGHT,0);
  2597                           
  2598                           ;incstack = 0
  2599  001A44  0E00               	movlw	0
  2600  001A46  6E12               	movwf	motorCounterUpdate@reverse,c
  2601  001A48  0E01               	movlw	1
  2602  001A4A  EC3B  F00B         	call	_motorCounterUpdate
  2603                           
  2604                           ;interrupts.c: 386: motorCounterUpdate(LEFT,0);
  2605  001A4E  0E00               	movlw	0
  2606  001A50  6E12               	movwf	motorCounterUpdate@reverse,c
  2607  001A52  0E00               	movlw	0
  2608  001A54  EC3B  F00B         	call	_motorCounterUpdate
  2609                           
  2610                           ;interrupts.c: 387: ForwardCounter--;
  2611  001A58  0645               	decf	_ForwardCounter,f,c
  2612  001A5A  A0D8               	btfss	status,0,c
  2613  001A5C  0646               	decf	_ForwardCounter+1,f,c
  2614  001A5E  0012               	return		;funcret
  2615  001A60                     __end_of_forward:
  2616                           	opt stack 0
  2617                           pclatu	equ	0xFFB
  2618                           pclath	equ	0xFFA
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           prodh	equ	0xFF4
  2624                           prodl	equ	0xFF3
  2625                           intcon	equ	0xFF2
  2626                           intcon2	equ	0xFF1
  2627                           postinc0	equ	0xFEE
  2628                           fsr0h	equ	0xFEA
  2629                           fsr0l	equ	0xFE9
  2630                           wreg	equ	0xFE8
  2631                           fsr1h	equ	0xFE2
  2632                           fsr1l	equ	0xFE1
  2633                           bsr	equ	0xFE0
  2634                           postinc2	equ	0xFDE
  2635                           postdec2	equ	0xFDD
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _Reversing *****************
  2641 ;; Defined at:
  2642 ;;		line 376 in file "interrupts.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;		None               void
  2649 ;; Registers used:
  2650 ;;		wreg, status,2, status,0, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;Total ram usage:        0 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    1
  2663 ;; This function calls:
  2664 ;;		_motorCounterUpdate
  2665 ;; This function is called by:
  2666 ;;		_high_isr
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text15
  2671  001A60                     __ptext15:
  2672                           	opt stack 0
  2673  001A60                     _Reversing:
  2674                           	opt stack 24
  2675                           
  2676                           ;interrupts.c: 378: motorCounterUpdate(RIGHT,1);
  2677                           
  2678                           ;incstack = 0
  2679  001A60  0E01               	movlw	1
  2680  001A62  6E12               	movwf	motorCounterUpdate@reverse,c
  2681  001A64  0E01               	movlw	1
  2682  001A66  EC3B  F00B         	call	_motorCounterUpdate
  2683                           
  2684                           ;interrupts.c: 379: motorCounterUpdate(LEFT,1);
  2685  001A6A  0E01               	movlw	1
  2686  001A6C  6E12               	movwf	motorCounterUpdate@reverse,c
  2687  001A6E  0E00               	movlw	0
  2688  001A70  EC3B  F00B         	call	_motorCounterUpdate
  2689                           
  2690                           ;interrupts.c: 380: ReverseCounter--;
  2691  001A74  064D               	decf	_ReverseCounter,f,c
  2692  001A76  A0D8               	btfss	status,0,c
  2693  001A78  064E               	decf	_ReverseCounter+1,f,c
  2694  001A7A  0012               	return		;funcret
  2695  001A7C                     __end_of_Reversing:
  2696                           	opt stack 0
  2697                           pclatu	equ	0xFFB
  2698                           pclath	equ	0xFFA
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           intcon2	equ	0xFF1
  2707                           postinc0	equ	0xFEE
  2708                           fsr0h	equ	0xFEA
  2709                           fsr0l	equ	0xFE9
  2710                           wreg	equ	0xFE8
  2711                           fsr1h	equ	0xFE2
  2712                           fsr1l	equ	0xFE1
  2713                           bsr	equ	0xFE0
  2714                           postinc2	equ	0xFDE
  2715                           postdec2	equ	0xFDD
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           
  2720 ;; *************** function _KController *****************
  2721 ;; Defined at:
  2722 ;;		line 317 in file "interrupts.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;  diff            2   23[COMRAM] int 
  2727 ;;  correctTo       1   22[COMRAM] enum E4082
  2728 ;; Return value:  Size  Location     Type
  2729 ;;		None               void
  2730 ;; Registers used:
  2731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        5 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    1
  2744 ;; This function calls:
  2745 ;;		_ABS
  2746 ;;		_merge
  2747 ;;		_motorCounterUpdate
  2748 ;;		_moveMouse
  2749 ;; This function is called by:
  2750 ;;		_high_isr
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text16
  2755  00176A                     __ptext16:
  2756                           	opt stack 0
  2757  00176A                     _KController:
  2758                           	opt stack 24
  2759                           
  2760                           ;interrupts.c: 319: Side correctTo;
  2761                           ;interrupts.c: 320: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2762                           
  2763                           ;incstack = 0
  2764  00176A  EE20  F03F         	lfsr	2,_sensorValue+2
  2765  00176E  CFDE F015          	movff	postinc2,??_KController
  2766  001772  CFDD F016          	movff	postdec2,??_KController+1
  2767  001776  1E15               	comf	??_KController,f,c
  2768  001778  1E16               	comf	??_KController+1,f,c
  2769  00177A  4A15               	infsnz	??_KController,f,c
  2770  00177C  2A16               	incf	??_KController+1,f,c
  2771  00177E  503D               	movf	_sensorValue,w,c
  2772  001780  2415               	addwf	??_KController,w,c
  2773  001782  6E12               	movwf	ABS@x,c
  2774  001784  503E               	movf	_sensorValue+1,w,c
  2775  001786  2016               	addwfc	??_KController+1,w,c
  2776  001788  6E13               	movwf	ABS@x+1,c
  2777  00178A  EC3E  F00D         	call	_ABS	;wreg free
  2778  00178E  C012  F018         	movff	?_ABS,KController@diff
  2779  001792  C013  F019         	movff	?_ABS+1,KController@diff+1
  2780                           
  2781                           ;interrupts.c: 323: if(controllerSteps > 0)
  2782  001796  5058               	movf	_controllerSteps,w,c
  2783  001798  B4D8               	btfsc	status,2,c
  2784  00179A  D00C               	goto	i2l1494
  2785                           
  2786                           ;interrupts.c: 324: {
  2787                           ;interrupts.c: 325: motorCounterUpdate(RIGHT,0);
  2788  00179C  0E00               	movlw	0
  2789  00179E  6E12               	movwf	motorCounterUpdate@reverse,c
  2790  0017A0  0E01               	movlw	1
  2791  0017A2  EC3B  F00B         	call	_motorCounterUpdate
  2792                           
  2793                           ;interrupts.c: 326: motorCounterUpdate(LEFT,0);
  2794  0017A6  0E00               	movlw	0
  2795  0017A8  6E12               	movwf	motorCounterUpdate@reverse,c
  2796  0017AA  0E00               	movlw	0
  2797  0017AC  EC3B  F00B         	call	_motorCounterUpdate
  2798                           
  2799                           ;interrupts.c: 327: controllerSteps--;
  2800  0017B0  0658               	decf	_controllerSteps,f,c
  2801                           
  2802                           ;interrupts.c: 328: return;
  2803  0017B2  D047               	goto	i2l134
  2804  0017B4                     i2l1494:
  2805                           
  2806                           ;interrupts.c: 329: }
  2807                           ;interrupts.c: 331: if(sensorValue[0] > sensorValue[1])
  2808  0017B4  503D               	movf	_sensorValue,w,c
  2809  0017B6  5C3F               	subwf	_sensorValue+2,w,c
  2810  0017B8  5040               	movf	_sensorValue+3,w,c
  2811  0017BA  0A80               	xorlw	128
  2812  0017BC  6E15               	movwf	??_KController& (0+255),c
  2813  0017BE  503E               	movf	_sensorValue+1,w,c
  2814  0017C0  0A80               	xorlw	128
  2815  0017C2  5815               	subwfb	??_KController& (0+255),w,c
  2816  0017C4  B0D8               	btfsc	status,0,c
  2817  0017C6  D00F               	goto	i2l1502
  2818                           
  2819                           ;interrupts.c: 332: {
  2820                           ;interrupts.c: 333: correctTo = LEFT;
  2821  0017C8  0E00               	movlw	0
  2822  0017CA  6E17               	movwf	KController@correctTo,c
  2823                           
  2824                           ;interrupts.c: 334: motorCounterUpdate(correctTo,0);
  2825  0017CC  0E00               	movlw	0
  2826  0017CE  6E12               	movwf	motorCounterUpdate@reverse,c
  2827  0017D0  5017               	movf	KController@correctTo,w,c
  2828  0017D2  EC3B  F00B         	call	_motorCounterUpdate
  2829                           
  2830                           ;interrupts.c: 335: moveMouse(merge(LMotorCounter,RMotorCounter));
  2831  0017D6  C054  F012         	movff	_RMotorCounter,merge@right
  2832  0017DA  5053               	movf	_LMotorCounter,w,c
  2833  0017DC  EC55  F00D         	call	_merge
  2834  0017E0  EC62  F00D         	call	_moveMouse
  2835                           
  2836                           ;interrupts.c: 336: }
  2837  0017E4  D00F               	goto	i2l1508
  2838  0017E6                     i2l1502:
  2839                           
  2840                           ;interrupts.c: 337: else
  2841                           ;interrupts.c: 338: {
  2842                           ;interrupts.c: 339: correctTo = RIGHT;
  2843  0017E6  0E01               	movlw	1
  2844  0017E8  6E17               	movwf	KController@correctTo,c
  2845                           
  2846                           ;interrupts.c: 340: motorCounterUpdate(correctTo,0);
  2847  0017EA  0E00               	movlw	0
  2848  0017EC  6E12               	movwf	motorCounterUpdate@reverse,c
  2849  0017EE  5017               	movf	KController@correctTo,w,c
  2850  0017F0  EC3B  F00B         	call	_motorCounterUpdate
  2851                           
  2852                           ;interrupts.c: 341: moveMouse(merge(LMotorCounter,RMotorCounter));
  2853  0017F4  C054  F012         	movff	_RMotorCounter,merge@right
  2854  0017F8  5053               	movf	_LMotorCounter,w,c
  2855  0017FA  EC55  F00D         	call	_merge
  2856  0017FE  EC62  F00D         	call	_moveMouse
  2857  001802  D000               	goto	i2l1508
  2858  001804                     i2l1508:
  2859                           
  2860                           ;interrupts.c: 342: }
  2861                           ;interrupts.c: 344: if(diff > 150)
  2862  001804  BE19               	btfsc	KController@diff+1,7,c
  2863  001806  D008               	goto	i2l1512
  2864  001808  5019               	movf	KController@diff+1,w,c
  2865  00180A  E104               	bnz	i2u93_40
  2866  00180C  0E97               	movlw	151
  2867  00180E  5C18               	subwf	KController@diff,w,c
  2868  001810  A0D8               	btfss	status,0,c
  2869  001812  D002               	goto	i2l1512
  2870  001814                     i2u93_40:
  2871                           
  2872                           ;interrupts.c: 345: controllerSteps = 1;
  2873  001814  0E01               	movlw	1
  2874  001816  D013               	goto	L11
  2875  001818                     i2l1512:
  2876                           
  2877                           ;interrupts.c: 346: else if(diff <= 150 && diff > 20)
  2878  001818  BE19               	btfsc	KController@diff+1,7,c
  2879  00181A  D006               	goto	i2l1514
  2880  00181C  5019               	movf	KController@diff+1,w,c
  2881  00181E  E10E               	bnz	i2l1518
  2882  001820  0E97               	movlw	151
  2883  001822  5C18               	subwf	KController@diff,w,c
  2884  001824  B0D8               	btfsc	status,0,c
  2885  001826  D00A               	goto	i2l1518
  2886  001828                     i2l1514:
  2887  001828  BE19               	btfsc	KController@diff+1,7,c
  2888  00182A  D008               	goto	i2l1518
  2889  00182C  5019               	movf	KController@diff+1,w,c
  2890  00182E  E104               	bnz	i2u95_40
  2891  001830  0E15               	movlw	21
  2892  001832  5C18               	subwf	KController@diff,w,c
  2893  001834  A0D8               	btfss	status,0,c
  2894  001836  D002               	goto	i2l1518
  2895  001838                     i2u95_40:
  2896                           
  2897                           ;interrupts.c: 347: controllerSteps = 4;
  2898  001838  0E04               	movlw	4
  2899  00183A  D001               	goto	L11
  2900  00183C                     i2l1518:
  2901                           
  2902                           ;interrupts.c: 348: else
  2903                           ;interrupts.c: 349: controllerSteps = 8;
  2904  00183C  0E08               	movlw	8
  2905  00183E                     L11:
  2906  00183E  6E58               	movwf	_controllerSteps,c
  2907  001840  D000               	goto	i2l134
  2908  001842                     i2l134:
  2909  001842  0012               	return		;funcret
  2910  001844                     __end_of_KController:
  2911                           	opt stack 0
  2912                           pclatu	equ	0xFFB
  2913                           pclath	equ	0xFFA
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           intcon2	equ	0xFF1
  2922                           postinc0	equ	0xFEE
  2923                           fsr0h	equ	0xFEA
  2924                           fsr0l	equ	0xFE9
  2925                           wreg	equ	0xFE8
  2926                           fsr1h	equ	0xFE2
  2927                           fsr1l	equ	0xFE1
  2928                           bsr	equ	0xFE0
  2929                           postinc2	equ	0xFDE
  2930                           postdec2	equ	0xFDD
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _moveMouse *****************
  2936 ;; Defined at:
  2937 ;;		line 304 in file "interrupts.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  action          1    wreg     unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  action          1   17[COMRAM] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;Total ram usage:        1 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_high_isr
  2961 ;;		_KController
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text17
  2966  001AC4                     __ptext17:
  2967                           	opt stack 0
  2968  001AC4                     _moveMouse:
  2969                           	opt stack 25
  2970                           
  2971                           ;incstack = 0
  2972                           ;moveMouse@action stored from wreg
  2973  001AC4  6E12               	movwf	moveMouse@action,c
  2974                           
  2975                           ;interrupts.c: 306: LATC = action;
  2976  001AC6  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2977  001ACA  0012               	return		;funcret
  2978  001ACC                     __end_of_moveMouse:
  2979                           	opt stack 0
  2980                           pclatu	equ	0xFFB
  2981                           pclath	equ	0xFFA
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           prodh	equ	0xFF4
  2987                           prodl	equ	0xFF3
  2988                           intcon	equ	0xFF2
  2989                           intcon2	equ	0xFF1
  2990                           postinc0	equ	0xFEE
  2991                           fsr0h	equ	0xFEA
  2992                           fsr0l	equ	0xFE9
  2993                           wreg	equ	0xFE8
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           bsr	equ	0xFE0
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _motorCounterUpdate *****************
  3004 ;; Defined at:
  3005 ;;		line 252 in file "interrupts.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  side            1    wreg     enum E4082
  3008 ;;  reverse         1   17[COMRAM] unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  side            1   18[COMRAM] enum E4082
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:        2 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_high_isr
  3030 ;;		_KController
  3031 ;;		_rotate
  3032 ;;		_Reversing
  3033 ;;		_forward
  3034 ;;		_smoothTurn
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text18
  3039  001676                     __ptext18:
  3040                           	opt stack 0
  3041  001676                     _motorCounterUpdate:
  3042                           	opt stack 24
  3043                           
  3044                           ;incstack = 0
  3045                           ;motorCounterUpdate@side stored from wreg
  3046  001676  6E13               	movwf	motorCounterUpdate@side,c
  3047                           
  3048                           ;interrupts.c: 254: if(side == LEFT && reverse == 1)
  3049  001678  5013               	movf	motorCounterUpdate@side,w,c
  3050  00167A  A4D8               	btfss	status,2,c
  3051  00167C  D01B               	goto	i2l1364
  3052  00167E  0412               	decf	motorCounterUpdate@reverse,w,c
  3053  001680  B4D8               	btfsc	status,2,c
  3054  001682  D00B               	goto	i2l1362
  3055  001684  D017               	goto	i2l1364
  3056                           
  3057                           ;interrupts.c: 255: {
  3058                           ;interrupts.c: 256: switch(LMotorCounter)
  3059  001686  D009               	goto	i2l1362
  3060  001688                     i2l1352:
  3061  001688  0E02               	movlw	2
  3062  00168A  D004               	goto	L14
  3063  00168C                     i2l1354:
  3064  00168C  0E04               	movlw	4
  3065  00168E  D002               	goto	L14
  3066                           
  3067                           ;interrupts.c: 260: case 0b00000100: LMotorCounter = 0b00001000; break;
  3068  001690  D03E               	goto	i2l1396
  3069                           
  3070                           ;interrupts.c: 261: case 0b00001000: LMotorCounter = 0b00000001; break;
  3071  001692  D039               	goto	i2l1390
  3072  001694                     L14:
  3073  001694  6E53               	movwf	_LMotorCounter,c
  3074  001696  D068               	goto	i2l120
  3075                           
  3076                           ;interrupts.c: 262: default: LMotorCounter = 0b00000001;
  3077  001698  D036               	goto	i2l1390
  3078  00169A                     i2l1362:
  3079  00169A  5053               	movf	_LMotorCounter,w,c
  3080                           
  3081                           ; Switch size 1, requested type "space"
  3082                           ; Number of cases is 4, Range of values is 1 to 8
  3083                           ; switch strategies available:
  3084                           ; Name         Instructions Cycles
  3085                           ; simple_byte           13     7 (average)
  3086                           ;	Chosen strategy is simple_byte
  3087  00169C  0A01               	xorlw	1	; case 1
  3088  00169E  B4D8               	btfsc	status,2,c
  3089  0016A0  D7F3               	goto	i2l1352
  3090  0016A2  0A03               	xorlw	3	; case 2
  3091  0016A4  B4D8               	btfsc	status,2,c
  3092  0016A6  D7F2               	goto	i2l1354
  3093  0016A8  0A06               	xorlw	6	; case 4
  3094  0016AA  B4D8               	btfsc	status,2,c
  3095  0016AC  D030               	goto	i2l1396
  3096  0016AE  0A0C               	xorlw	12	; case 8
  3097  0016B0  D02A               	goto	i2l1390
  3098                           
  3099                           ;interrupts.c: 264: } else if(side == RIGHT && reverse == 1)
  3100  0016B2  D05A               	goto	i2l120
  3101  0016B4                     i2l1364:
  3102  0016B4  0413               	decf	motorCounterUpdate@side,w,c
  3103  0016B6  A4D8               	btfss	status,2,c
  3104  0016B8  D01D               	goto	i2l1382
  3105  0016BA  0412               	decf	motorCounterUpdate@reverse,w,c
  3106  0016BC  B4D8               	btfsc	status,2,c
  3107  0016BE  D00B               	goto	i2l1380
  3108  0016C0  D019               	goto	i2l1382
  3109                           
  3110                           ;interrupts.c: 265: {
  3111                           ;interrupts.c: 266: switch(RMotorCounter)
  3112  0016C2  D009               	goto	i2l1380
  3113  0016C4                     i2l1370:
  3114  0016C4  0E08               	movlw	8
  3115  0016C6  D040               	goto	L22
  3116  0016C8                     i2l1372:
  3117  0016C8  0E01               	movlw	1
  3118  0016CA  D03E               	goto	L22
  3119  0016CC                     i2l1374:
  3120  0016CC  0E02               	movlw	2
  3121  0016CE  D03C               	goto	L22
  3122  0016D0                     i2l1376:
  3123  0016D0  0E04               	movlw	4
  3124  0016D2  D03A               	goto	L22
  3125                           
  3126                           ;interrupts.c: 272: default: RMotorCounter = 0b00001000;
  3127  0016D4  D7F7               	goto	i2l1370
  3128  0016D6                     i2l1380:
  3129  0016D6  5054               	movf	_RMotorCounter,w,c
  3130                           
  3131                           ; Switch size 1, requested type "space"
  3132                           ; Number of cases is 4, Range of values is 1 to 8
  3133                           ; switch strategies available:
  3134                           ; Name         Instructions Cycles
  3135                           ; simple_byte           13     7 (average)
  3136                           ;	Chosen strategy is simple_byte
  3137  0016D8  0A01               	xorlw	1	; case 1
  3138  0016DA  B4D8               	btfsc	status,2,c
  3139  0016DC  D7F3               	goto	i2l1370
  3140  0016DE  0A03               	xorlw	3	; case 2
  3141  0016E0  B4D8               	btfsc	status,2,c
  3142  0016E2  D7F2               	goto	i2l1372
  3143  0016E4  0A06               	xorlw	6	; case 4
  3144  0016E6  B4D8               	btfsc	status,2,c
  3145  0016E8  D7F1               	goto	i2l1374
  3146  0016EA  0A0C               	xorlw	12	; case 8
  3147  0016EC  B4D8               	btfsc	status,2,c
  3148  0016EE  D7F0               	goto	i2l1376
  3149  0016F0  D7E9               	goto	i2l1370
  3150                           
  3151                           ;interrupts.c: 274: } else if(side == LEFT && reverse == 0)
  3152  0016F2  D03A               	goto	i2l120
  3153  0016F4                     i2l1382:
  3154  0016F4  5013               	movf	motorCounterUpdate@side,w,c
  3155  0016F6  A4D8               	btfss	status,2,c
  3156  0016F8  D01B               	goto	i2l1400
  3157  0016FA  5012               	movf	motorCounterUpdate@reverse,w,c
  3158  0016FC  B4D8               	btfsc	status,2,c
  3159  0016FE  D009               	goto	i2l1398
  3160  001700  D017               	goto	i2l1400
  3161                           
  3162                           ;interrupts.c: 275: {
  3163                           ;interrupts.c: 276: switch(LMotorCounter)
  3164  001702  D007               	goto	i2l1398
  3165                           
  3166                           ;interrupts.c: 277: {
  3167                           ;interrupts.c: 278: case 0b00000001: LMotorCounter = 0b00001000; break;
  3168  001704  D004               	goto	i2l1396
  3169  001706                     i2l1390:
  3170  001706  0E01               	movlw	1
  3171  001708  D7C5               	goto	L14
  3172                           
  3173                           ;interrupts.c: 280: case 0b00000100: LMotorCounter = 0b00000010; break;
  3174  00170A  D7BE               	goto	i2l1352
  3175                           
  3176                           ;interrupts.c: 281: case 0b00001000: LMotorCounter = 0b00000100; break;
  3177  00170C  D7BF               	goto	i2l1354
  3178  00170E                     i2l1396:
  3179  00170E  0E08               	movlw	8
  3180  001710  D7C1               	goto	L14
  3181  001712                     i2l1398:
  3182  001712  5053               	movf	_LMotorCounter,w,c
  3183                           
  3184                           ; Switch size 1, requested type "space"
  3185                           ; Number of cases is 4, Range of values is 1 to 8
  3186                           ; switch strategies available:
  3187                           ; Name         Instructions Cycles
  3188                           ; simple_byte           13     7 (average)
  3189                           ;	Chosen strategy is simple_byte
  3190  001714  0A01               	xorlw	1	; case 1
  3191  001716  B4D8               	btfsc	status,2,c
  3192  001718  D7FA               	goto	i2l1396
  3193  00171A  0A03               	xorlw	3	; case 2
  3194  00171C  B4D8               	btfsc	status,2,c
  3195  00171E  D7F3               	goto	i2l1390
  3196  001720  0A06               	xorlw	6	; case 4
  3197  001722  B4D8               	btfsc	status,2,c
  3198  001724  D7B1               	goto	i2l1352
  3199  001726  0A0C               	xorlw	12	; case 8
  3200  001728  B4D8               	btfsc	status,2,c
  3201  00172A  D7B0               	goto	i2l1354
  3202  00172C  D7F0               	goto	i2l1396
  3203                           
  3204                           ;interrupts.c: 284: } else if(side == RIGHT && reverse == 0)
  3205  00172E  D01C               	goto	i2l120
  3206  001730                     i2l1400:
  3207  001730  0413               	decf	motorCounterUpdate@side,w,c
  3208  001732  A4D8               	btfss	status,2,c
  3209  001734  D019               	goto	i2l120
  3210  001736  5012               	movf	motorCounterUpdate@reverse,w,c
  3211  001738  B4D8               	btfsc	status,2,c
  3212  00173A  D009               	goto	i2l1416
  3213  00173C  D015               	goto	i2l120
  3214                           
  3215                           ;interrupts.c: 285: {
  3216                           ;interrupts.c: 286: switch(RMotorCounter)
  3217  00173E  D007               	goto	i2l1416
  3218                           
  3219                           ;interrupts.c: 287: {
  3220                           ;interrupts.c: 288: case 0b00000001: RMotorCounter = 0b00000010; break;
  3221  001740  D7C5               	goto	i2l1374
  3222                           
  3223                           ;interrupts.c: 289: case 0b00000010: RMotorCounter = 0b00000100; break;
  3224  001742  D7C6               	goto	i2l1376
  3225                           
  3226                           ;interrupts.c: 290: case 0b00000100: RMotorCounter = 0b00001000; break;
  3227  001744  D7BF               	goto	i2l1370
  3228                           
  3229                           ;interrupts.c: 291: case 0b00001000: RMotorCounter = 0b00000001; break;
  3230  001746  D7C0               	goto	i2l1372
  3231  001748                     L22:
  3232  001748  6E54               	movwf	_RMotorCounter,c
  3233  00174A  D00E               	goto	i2l120
  3234                           
  3235                           ;interrupts.c: 292: default: RMotorCounter = 0b00000001;
  3236  00174C  D7BD               	goto	i2l1372
  3237  00174E                     i2l1416:
  3238  00174E  5054               	movf	_RMotorCounter,w,c
  3239                           
  3240                           ; Switch size 1, requested type "space"
  3241                           ; Number of cases is 4, Range of values is 1 to 8
  3242                           ; switch strategies available:
  3243                           ; Name         Instructions Cycles
  3244                           ; simple_byte           13     7 (average)
  3245                           ;	Chosen strategy is simple_byte
  3246  001750  0A01               	xorlw	1	; case 1
  3247  001752  B4D8               	btfsc	status,2,c
  3248  001754  D7BB               	goto	i2l1374
  3249  001756  0A03               	xorlw	3	; case 2
  3250  001758  B4D8               	btfsc	status,2,c
  3251  00175A  D7BA               	goto	i2l1376
  3252  00175C  0A06               	xorlw	6	; case 4
  3253  00175E  B4D8               	btfsc	status,2,c
  3254  001760  D7B1               	goto	i2l1370
  3255  001762  0A0C               	xorlw	12	; case 8
  3256  001764  D7B1               	goto	i2l1372
  3257  001766  D000               	goto	i2l120
  3258  001768                     i2l120:
  3259  001768  0012               	return		;funcret
  3260  00176A                     __end_of_motorCounterUpdate:
  3261                           	opt stack 0
  3262                           pclatu	equ	0xFFB
  3263                           pclath	equ	0xFFA
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           intcon2	equ	0xFF1
  3272                           postinc0	equ	0xFEE
  3273                           fsr0h	equ	0xFEA
  3274                           fsr0l	equ	0xFE9
  3275                           wreg	equ	0xFE8
  3276                           fsr1h	equ	0xFE2
  3277                           fsr1l	equ	0xFE1
  3278                           bsr	equ	0xFE0
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _merge *****************
  3286 ;; Defined at:
  3287 ;;		line 297 in file "interrupts.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  left            1    wreg     unsigned char 
  3290 ;;  right           1   17[COMRAM] unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  left            1   18[COMRAM] unsigned char 
  3293 ;;  merged          1   19[COMRAM] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      unsigned char 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3303 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;Total ram usage:        3 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_high_isr
  3313 ;;		_KController
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text19
  3318  001AAA                     __ptext19:
  3319                           	opt stack 0
  3320  001AAA                     _merge:
  3321                           	opt stack 25
  3322                           
  3323                           ;incstack = 0
  3324                           ;merge@left stored from wreg
  3325  001AAA  6E13               	movwf	merge@left,c
  3326                           
  3327                           ;interrupts.c: 299: unsigned char merged;
  3328                           ;interrupts.c: 300: merged = left + (right << 4);
  3329  001AAC  3812               	swapf	merge@right,w,c
  3330  001AAE  0BF0               	andlw	240
  3331  001AB0  2413               	addwf	merge@left,w,c
  3332  001AB2  6E14               	movwf	merge@merged,c
  3333                           
  3334                           ;interrupts.c: 301: return merged;
  3335  001AB4  5014               	movf	merge@merged,w,c
  3336  001AB6  D000               	goto	i2l123
  3337  001AB8                     i2l123:
  3338  001AB8  0012               	return		;funcret
  3339  001ABA                     __end_of_merge:
  3340                           	opt stack 0
  3341                           pclatu	equ	0xFFB
  3342                           pclath	equ	0xFFA
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           intcon2	equ	0xFF1
  3351                           postinc0	equ	0xFEE
  3352                           fsr0h	equ	0xFEA
  3353                           fsr0l	equ	0xFE9
  3354                           wreg	equ	0xFE8
  3355                           fsr1h	equ	0xFE2
  3356                           fsr1l	equ	0xFE1
  3357                           bsr	equ	0xFE0
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _ABS *****************
  3365 ;; Defined at:
  3366 ;;		line 310 in file "interrupts.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  x               2   17[COMRAM] int 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  2   17[COMRAM] int 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;Total ram usage:        2 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_KController
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text20
  3394  001A7C                     __ptext20:
  3395                           	opt stack 0
  3396  001A7C                     _ABS:
  3397                           	opt stack 24
  3398                           
  3399                           ;interrupts.c: 312: if(x<0) x = -x;
  3400                           
  3401                           ;incstack = 0
  3402  001A7C  AE13               	btfss	ABS@x+1,7,c
  3403  001A7E  D005               	goto	i2l1428
  3404  001A80  6C12               	negf	ABS@x,c
  3405  001A82  1E13               	comf	ABS@x+1,f,c
  3406  001A84  B0D8               	btfsc	status,0,c
  3407  001A86  2A13               	incf	ABS@x+1,f,c
  3408  001A88  D000               	goto	i2l1428
  3409  001A8A                     i2l1428:
  3410                           
  3411                           ;interrupts.c: 313: return x;
  3412  001A8A  C012  F012         	movff	ABS@x,?_ABS
  3413  001A8E  C013  F013         	movff	ABS@x+1,?_ABS+1
  3414  001A92  D000               	goto	i2l130
  3415  001A94                     i2l130:
  3416  001A94  0012               	return		;funcret
  3417  001A96                     __end_of_ABS:
  3418                           	opt stack 0
  3419                           pclatu	equ	0xFFB
  3420                           pclath	equ	0xFFA
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           postinc0	equ	0xFEE
  3430                           fsr0h	equ	0xFEA
  3431                           fsr0l	equ	0xFE9
  3432                           wreg	equ	0xFE8
  3433                           fsr1h	equ	0xFE2
  3434                           fsr1l	equ	0xFE1
  3435                           bsr	equ	0xFE0
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           pclatu	equ	0xFFB
  3442                           pclath	equ	0xFFA
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           prodh	equ	0xFF4
  3448                           prodl	equ	0xFF3
  3449                           intcon	equ	0xFF2
  3450                           intcon2	equ	0xFF1
  3451                           postinc0	equ	0xFEE
  3452                           fsr0h	equ	0xFEA
  3453                           fsr0l	equ	0xFE9
  3454                           wreg	equ	0xFE8
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           bsr	equ	0xFE0
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464                           	psect	rparam
  3465  0000                     pclatu	equ	0xFFB
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           intcon2	equ	0xFF1
  3475                           postinc0	equ	0xFEE
  3476                           fsr0h	equ	0xFEA
  3477                           fsr0l	equ	0xFE9
  3478                           wreg	equ	0xFE8
  3479                           fsr1h	equ	0xFE2
  3480                           fsr1l	equ	0xFE1
  3481                           bsr	equ	0xFE0
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60      88
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             54 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5857
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1498
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      58       1       69.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6      34        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Apr 18 01:26:53 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l233 1978                           l242 1A2E                           l247 1A42  
                         l263 150A                           l256 14A8                           l273 19F4  
                         l281 19D4                           l274 19FC                           l277 1A1C  
                         l278 1A24                           l474 18D8                           _ABS 1A7C  
                __CFG_CPB$OFF 000000                           _MAX 19FE                           _MIN 19D6  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A44                  _rotatingSide 0057  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1028 1A3C                          l1434 1964  
                        l1730 188C                          l1722 186C                          l1740 18B2  
                        l1732 1894                          l1716 185A                          l1804 1594  
                        l1812 1652                          l1806 15E8                          l1822 1AA0  
                        l1728 1882                          l1744 18BE                          l1808 163C  
                        l1816 1668                          l1770 141A                          l1748 18CE  
                        l1764 12C6                          l1774 1430                          l1758 12A2  
                        l1768 1326                          l1794 14F2                          l1788 14CE  
                        u1400 12C4                          _LATC 000F8B                          u1440 14CC  
                        u1450 14F0                          u1390 12A0                          u1527 196A  
                        u1475 1516                          i2l56 1224                          i2l79 1244  
                        _main 1A96                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
 sensorComputation@sensorTemp 0033                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
             __end_of_InitApp 1916                         ??_ABS 0014                         ??_MAX 0032  
                       ??_MIN 0032    __size_of_sensorComputation 022C                         ?_main 0001  
             __end_of___awdiv 18DA                         _T0CON 000FD5               ___awdiv@divisor 002A  
                       i2l120 1768                         i2l130 1A94                         i2l123 1AB8  
                       i2l134 1842               ___awdiv@counter 002C                         _TRISC 000F94  
         _ConfigureOscillator 1ABA                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _delay 1952                         _merge 1AAA               __end_of_forward 1A60  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 1986                  __end_of_main 1AAA  
                      ??_main 003D                 __activetblptr 000002                        ?_delay 0028  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0028                        i2l1400 1730                        i2l1502 17E6  
                      i2l1416 174E                        i2l1352 1688                        i2l1512 1818  
                      i2l1600 10B8                        i2l1370 16C4                        i2l1354 168C  
                      i2l1362 169A                        i2l1514 1828                        i2l1610 10E6  
                      i2l1602 10C8                        i2l1428 1A8A                        i2l1372 16C8  
                      i2l1380 16D6                        i2l1364 16B4                        i2l1508 1804  
                      i2l1620 110C                        i2l1390 1706                        i2l1374 16CC  
                      i2l1382 16F4                        i2l1518 183C                        i2l1376 16D0  
                      i2l1480 1934                        i2l1632 1150                        i2l1616 10F6  
                      i2l1608 10DC                        i2l1482 194A                        i2l1650 11AA  
                      i2l1634 115A                        i2l1642 116C                        i2l1618 10FC  
                      i2l1396 170E                        i2l1398 1712                        i2l1494 17B4  
                      i2l1654 11B2                        i2l1664 11FE                        i2l1592 1092  
                      i2l1584 1060                        i2l1672 123C                        i2l1594 10A2  
                      i2l1668 120E                        i2l1588 1074                        i2l1598 10B0  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 002D  
       ??_ConfigureOscillator 0028                   merge@merged 0014                __CFG_XINST$OFF 000000  
          sensorComputation@i 0086            sensorComputation@j 0088              __end_of_high_isr 127E  
                      ___wmul 19AE                     ??___awdiv 002C                __CFG_STVREN$ON 000000  
                      delay@x 002B                        clear_0 198C              ___awdiv@quotient 002E  
                      _rotate 1916            __size_of_Reversing 001C                  __pdataCOMRAM 0058  
                   ??_forward 0014                  __mediumconst 0000                     ??_low_isr 0001  
              _ReverseCounter 004D                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 19A4  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 1986               moveMouse@action 0012  
               __end_of_merge 1ABA          KController@correctTo 0017    __end_of_motorCounterUpdate 176A  
              _ForwardCounter 0045                       ??_delay 002A                       ??_merge 0013  
          _AlgorithmSelection 1A26                  _LTurnCounter 0047             __end_of_Reversing 1A7C  
                  _delay_time 0051             _MotorDelayCounter 0049           ?_AlgorithmSelection 0001  
                     ?___wmul 0028            __size_of_moveMouse 0008                       ?_rotate 0001  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u93_40 1814  
                     i2u95_40 1838          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
               _LMotorCounter 0053                       _InitApp 18DA                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 1844               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 1986                       __ramtop 1000  
                     __ptext0 1A96                       __ptext1 14AA                       __ptext2 127E  
                     __ptext3 19AE                       __ptext4 1844                       __ptext5 19D6  
                     __ptext6 19FE                       __ptext7 18DA                       __ptext8 1952  
                     __ptext9 1A26               __size_of_rotate 003C                  __size_of_ABS 001A  
                __size_of_MAX 0028                  __size_of_MIN 0028                       _forward 1A44  
                     delay@ms 0028                       _low_isr 0018                 ?_sensorUpdate 0001  
                  ??_high_isr 001A                __pintcode_body 100A          end_of_initialization 19A4  
            _sensorCorrection 1001             __end_of_moveMouse 1ACC                 __Lmediumconst 0000  
                     int_func 100A               _controllerSteps 0058                    _justTurned 0056  
        __size_of_KController 00DA                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0037   __end_of_ConfigureOscillator 1AC4                  _RTurnCounter 004B  
              __end_of___wmul 19D6                 __pidataCOMRAM 1ACC                __end_of_rotate 1952  
         start_initialization 1986                   __end_of_ABS 1A96                   __end_of_MAX 1A26  
                 __end_of_MIN 19FE            _motorCounterUpdate 1676              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 1A60  
                    ??___wmul 002C              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 003D  
               __pcstackBANK0 0080        sensorUpdate@sensorTemp 008A             __size_of_high_isr 1276  
                    ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001  
                   _algorithm 0055                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 0028          __end_of_sensorUpdate 1676        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_forward 0001                      ?_low_isr 0001                __size_of_delay 0034  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 002C  
                   _moveMouse 1AC4                      i2u120_40 117C                      i2u121_40 118C  
                    i2u105_40 104C                      i2u106_40 105A                      i2u115_40 111C  
                    i2u107_40 106E                      i2u124_40 11C2                      i2u116_40 112C  
                    i2u108_40 1082                      i2u125_40 11D2                      i2u117_40 113C  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 0028  
               _RMotorCounter 0054                    rotate@side 0014                 ??_KController 0015  
                  ?_moveMouse 0001              __size_of_InitApp 003C                      __Hrparam 0000  
                   merge@left 0013          sensorComputation@max 0080                      __Lrparam 0000  
        sensorComputation@min 0082          sensorComputation@sum 0084                   ??_Reversing 0014  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096              __size_of_forward 001C  
            __size_of_low_isr 008A                      __ptext10 1ABA                      __ptext20 1A7C  
                    __ptext13 1916                      __ptext14 1A44                      __ptext15 1A60  
                    __ptext16 176A                      __ptext17 1AC4                      __ptext18 1676  
                    __ptext19 1AAA                      _high_isr 0008                 __size_of_main 0014  
               _RotateCounter 004F         __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A  
         __end_of_KController 1844             _sensorComputation 127E                    _INTCONbits 000FF2  
          ?_sensorComputation 0033                 sensorUpdate@i 00DA                 sensorUpdate@j 00DC  
                _sensorUpdate 14AA                      intlevel1 0000                      intlevel2 0000  
         ??_sensorComputation 0035                   ??_moveMouse 0012               KController@diff 0018  
   __end_of_sensorComputation 14AA                   _sensorValue 003D   __size_of_motorCounterUpdate 00F4  
   motorCounterUpdate@reverse 0012                   _KController 176A  
