

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 05 02:54:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001D6C                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ignoreControll
    43  001D6C  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _ADCON0	set	4034
    58  0000                     _ADCON0bits	set	4034
    59  0000                     _ADCON1	set	4033
    60  0000                     _ADCON2	set	4032
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADRESL	set	4035
    63  0000                     _INTCON	set	4082
    64  0000                     _INTCON2	set	4081
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATC	set	3979
    67  0000                     _OSCCON	set	4051
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _T0CON	set	4053
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISEbits	set	3990
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001BE8                     __pcinit:
    79                           	opt stack 0
    80  001BE8                     start_initialization:
    81                           	opt stack 0
    82  001BE8                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to BANK0 (8 bytes)
    86  001BE8  EE00  F0F3         	lfsr	0,__pbssBANK0
    87  001BEC  0E08               	movlw	8
    88  001BEE                     clear_0:
    89  001BEE  6AEE               	clrf	postinc0,c
    90  001BF0  06E8               	decf	wreg,f,c
    91  001BF2  E1FD               	bnz	clear_0
    92                           
    93                           ; Clear objects allocated to COMRAM (56 bytes)
    94  001BF4  EE00  F001         	lfsr	0,__pbssCOMRAM
    95  001BF8  0E38               	movlw	56
    96  001BFA                     clear_1:
    97  001BFA  6AEE               	clrf	postinc0,c
    98  001BFC  06E8               	decf	wreg,f,c
    99  001BFE  E1FD               	bnz	clear_1
   100                           
   101                           ; Initialize objects allocated to COMRAM (1 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  001C00  0E6C               	movlw	low __pidataCOMRAM
   104  001C02  6EF6               	movwf	tblptrl,c
   105  001C04  0E1D               	movlw	high __pidataCOMRAM
   106  001C06  6EF7               	movwf	tblptrh,c
   107  001C08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  001C0A  6EF8               	movwf	tblptru,c
   109  001C0C  0009               	tblrd		*+	;fetch initializer
   110  001C0E  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   111  001C12                     end_of_initialization:
   112                           	opt stack 0
   113  001C12                     __end_of__initialization:
   114                           	opt stack 0
   115  001C12  0E00               	movlw	low (__Lmediumconst shr (0+16))
   116  001C14  6EF8               	movwf	tblptru,c
   117  001C16  0100               	movlb	0
   118  001C18  EF5C  F00E         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	bssCOMRAM
   127  000001                     __pbssCOMRAM:
   128                           	opt stack 0
   129  000001                     _sensorValue:
   130                           	opt stack 0
   131  000001                     	ds	8
   132  000009                     _ControllerCounter:
   133                           	opt stack 0
   134  000009                     	ds	2
   135  00000B                     _Deadend:
   136                           	opt stack 0
   137  00000B                     	ds	2
   138  00000D                     _ForwardCounter:
   139                           	opt stack 0
   140  00000D                     	ds	2
   141  00000F                     _Forwarded:
   142                           	opt stack 0
   143  00000F                     	ds	2
   144  000011                     _LTurnCounter:
   145                           	opt stack 0
   146  000011                     	ds	2
   147  000013                     _MotorDelayCounter:
   148                           	opt stack 0
   149  000013                     	ds	2
   150  000015                     _RTurnCounter:
   151                           	opt stack 0
   152  000015                     	ds	2
   153  000017                     _ReverseCounter:
   154                           	opt stack 0
   155  000017                     	ds	2
   156  000019                     _RotateCounter:
   157                           	opt stack 0
   158  000019                     	ds	2
   159  00001B                     _TurnLeft:
   160                           	opt stack 0
   161  00001B                     	ds	2
   162  00001D                     _TurnLeftAgain:
   163                           	opt stack 0
   164  00001D                     	ds	2
   165  00001F                     _TurnRight:
   166                           	opt stack 0
   167  00001F                     	ds	2
   168  000021                     _TurnedLeft:
   169                           	opt stack 0
   170  000021                     	ds	2
   171  000023                     _TurnedRight:
   172                           	opt stack 0
   173  000023                     	ds	2
   174  000025                     _controlToLeft:
   175                           	opt stack 0
   176  000025                     	ds	2
   177  000027                     _controlToRight:
   178                           	opt stack 0
   179  000027                     	ds	2
   180  000029                     _delay_time:
   181                           	opt stack 0
   182  000029                     	ds	2
   183  00002B                     _errorD:
   184                           	opt stack 0
   185  00002B                     	ds	2
   186  00002D                     _errorP:
   187                           	opt stack 0
   188  00002D                     	ds	2
   189  00002F                     _oldErrorP:
   190                           	opt stack 0
   191  00002F                     	ds	2
   192  000031                     _totalError:
   193                           	opt stack 0
   194  000031                     	ds	2
   195  000033                     _LMotorCounter:
   196                           	opt stack 0
   197  000033                     	ds	1
   198  000034                     _RMotorCounter:
   199                           	opt stack 0
   200  000034                     	ds	1
   201  000035                     _algorithm:
   202                           	opt stack 0
   203  000035                     	ds	1
   204  000036                     _deadEnd:
   205                           	opt stack 0
   206  000036                     	ds	1
   207  000037                     _justTurned:
   208                           	opt stack 0
   209  000037                     	ds	1
   210  000038                     _rotatingSide:
   211                           	opt stack 0
   212  000038                     	ds	1
   213                           tblptru	equ	0xFF8
   214                           tblptrh	equ	0xFF7
   215                           tblptrl	equ	0xFF6
   216                           tablat	equ	0xFF5
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           
   220                           	psect	dataCOMRAM
   221  00005D                     __pdataCOMRAM:
   222                           	opt stack 0
   223  00005D                     _ignoreControll:
   224                           	opt stack 0
   225  00005D                     	ds	1
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           
   233                           	psect	bssBANK0
   234  0000F3                     __pbssBANK0:
   235                           	opt stack 0
   236  0000F3                     _sensorCorrection:
   237                           	opt stack 0
   238  0000F3                     	ds	8
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           
   246                           	psect	cstackBANK0
   247  000080                     __pcstackBANK0:
   248                           	opt stack 0
   249  000080                     ??_delay:
   250  000080                     ?___wmul:
   251                           	opt stack 0
   252  000080                     ?___awdiv:
   253                           	opt stack 0
   254  000080                     ___wmul@multiplier:
   255                           	opt stack 0
   256  000080                     ___awdiv@dividend:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x0
   260  000080                     	ds	1
   261  000081                     delay@x:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x1
   265  000081                     	ds	1
   266  000082                     ___wmul@multiplicand:
   267                           	opt stack 0
   268  000082                     ___awdiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x2
   272  000082                     	ds	2
   273  000084                     ?_MIN:
   274                           	opt stack 0
   275  000084                     ?_MAX:
   276                           	opt stack 0
   277  000084                     ___awdiv@counter:
   278                           	opt stack 0
   279  000084                     MIN@a:
   280                           	opt stack 0
   281  000084                     MAX@a:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x4
   285  000084                     	ds	1
   286  000085                     ___awdiv@sign:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x5
   290  000085                     	ds	1
   291  000086                     MIN@b:
   292                           	opt stack 0
   293  000086                     MAX@b:
   294                           	opt stack 0
   295  000086                     ___awdiv@quotient:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x6
   299  000086                     	ds	2
   300  000088                     ??_MIN:
   301  000088                     ??_MAX:
   302  000088                     setCorrection@sideAvg:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x8
   306  000088                     	ds	1
   307  000089                     sensorComputation@sensorTemp:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x9
   311  000089                     	ds	1
   312  00008A                     setCorrection@frontAvg:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xA
   316  00008A                     	ds	1
   317  00008B                     sensorComputation@getCorrection:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xB
   321  00008B                     	ds	1
   322  00008C                     ??_sensorComputation:
   323                           
   324                           ; 0 bytes @ 0xC
   325  00008C                     	ds	2
   326  00008E                     sensorComputation@max:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0xE
   330  00008E                     	ds	2
   331  000090                     sensorComputation@min:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x10
   335  000090                     	ds	2
   336  000092                     sensorComputation@sum:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x12
   340  000092                     	ds	2
   341  000094                     sensorComputation@j:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x14
   345  000094                     	ds	2
   346  000096                     sensorComputation@i:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x16
   350  000096                     	ds	2
   351  000098                     ??_sensorUpdate:
   352                           
   353                           ; 0 bytes @ 0x18
   354  000098                     	ds	6
   355  00009E                     sensorUpdate@sensorTemp:
   356                           	opt stack 0
   357                           
   358                           ; 80 bytes @ 0x1E
   359  00009E                     	ds	80
   360  0000EE                     sensorUpdate@getCorrection:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x6E
   364  0000EE                     	ds	1
   365  0000EF                     sensorUpdate@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x6F
   369  0000EF                     	ds	2
   370  0000F1                     sensorUpdate@j:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x71
   374  0000F1                     	ds	2
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           
   382                           	psect	cstackCOMRAM
   383  000039                     __pcstackCOMRAM:
   384                           	opt stack 0
   385  000039                     ??_low_isr:
   386  000039                     
   387                           ; 0 bytes @ 0x0
   388  000039                     	ds	17
   389  00004A                     motorCounterUpdate@reverse:
   390                           	opt stack 0
   391  00004A                     merge@right:
   392                           	opt stack 0
   393  00004A                     moveMouse@action:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x11
   397  00004A                     	ds	1
   398  00004B                     motorCounterUpdate@side:
   399                           	opt stack 0
   400  00004B                     merge@left:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  00004B                     	ds	1
   405  00004C                     merge@merged:
   406                           	opt stack 0
   407  00004C                     rotate@side:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x13
   411  00004C                     	ds	1
   412  00004D                     ??_high_isr:
   413                           
   414                           ; 0 bytes @ 0x14
   415  00004D                     	ds	14
   416  00005B                     ??_setCorrection:
   417  00005B                     delay@ms:
   418                           	opt stack 0
   419  00005B                     ___wmul@product:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x22
   423  00005B                     	ds	2
   424  00005D                     tblptru	equ	0xFF8
   425                           tblptrh	equ	0xFF7
   426                           tblptrl	equ	0xFF6
   427                           tablat	equ	0xFF5
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           
   431                           ; 0 bytes @ 0x24
   432 ;;
   433 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   434 ;;
   435 ;; *************** function _main *****************
   436 ;; Defined at:
   437 ;;		line 41 in file "main.c"
   438 ;; Parameters:    Size  Location     Type
   439 ;;		None
   440 ;; Auto vars:     Size  Location     Type
   441 ;;		None
   442 ;; Return value:  Size  Location     Type
   443 ;;		None               void
   444 ;; Registers used:
   445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   455 ;;Total ram usage:        0 bytes
   456 ;; Hardware stack levels required when called:    7
   457 ;; This function calls:
   458 ;;		_ConfigureOscillator
   459 ;;		_InitApp
   460 ;;		_sensorUpdate
   461 ;;		_setCorrection
   462 ;; This function is called by:
   463 ;;		Startup code after reset
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           	psect	text0
   468  001CB8                     __ptext0:
   469                           	opt stack 0
   470  001CB8                     _main:
   471                           	opt stack 24
   472                           
   473                           ;main.c: 44: ConfigureOscillator();
   474                           
   475                           ;incstack = 0
   476  001CB8  ECAD  F00E         	call	_ConfigureOscillator	;wreg free
   477                           
   478                           ;main.c: 47: InitApp();
   479  001CBC  ECD7  F00D         	call	_InitApp	;wreg free
   480                           
   481                           ;main.c: 48: sensorUpdate(1);
   482  001CC0  0E01               	movlw	1
   483  001CC2  EC87  F00B         	call	_sensorUpdate
   484                           
   485                           ;main.c: 49: sensorUpdate(1);
   486  001CC6  0E01               	movlw	1
   487  001CC8  EC87  F00B         	call	_sensorUpdate
   488                           
   489                           ;main.c: 50: sensorUpdate(1);
   490  001CCC  0E01               	movlw	1
   491  001CCE  EC87  F00B         	call	_sensorUpdate
   492                           
   493                           ;main.c: 51: setCorrection();
   494  001CD2  EC91  F00C         	call	_setCorrection	;wreg free
   495                           
   496                           ;main.c: 52: INTCONbits.GIE = 1;
   497  001CD6  8EF2               	bsf	intcon,7,c	;volatile
   498  001CD8  D000               	goto	l2001
   499  001CDA                     l2001:
   500                           
   501                           ;main.c: 54: {
   502                           ;main.c: 55: sensorUpdate(0);
   503  001CDA  0E00               	movlw	0
   504  001CDC  EC87  F00B         	call	_sensorUpdate
   505  001CE0  D7FC               	goto	l2001
   506  001CE2  EF51  F000         	goto	start
   507  001CE6                     __end_of_main:
   508                           	opt stack 0
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           intcon	equ	0xFF2
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           
   517 ;; *************** function _setCorrection *****************
   518 ;; Defined at:
   519 ;;		line 125 in file "user.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;  frontAvg        2   10[BANK0 ] int 
   524 ;;  sideAvg         2    8[BANK0 ] int 
   525 ;; Return value:  Size  Location     Type
   526 ;;		None               void
   527 ;; Registers used:
   528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;Total ram usage:        6 bytes
   539 ;; Hardware stack levels used:    1
   540 ;; Hardware stack levels required when called:    5
   541 ;; This function calls:
   542 ;;		___awdiv
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text1
   549  001922                     __ptext1:
   550                           	opt stack 0
   551  001922                     _setCorrection:
   552                           	opt stack 25
   553                           
   554                           ;user.c: 127: int sideAvg,frontAvg;
   555                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   556                           
   557                           ;incstack = 0
   558  001922  5001               	movf	_sensorValue,w,c
   559  001924  2403               	addwf	_sensorValue+2,w,c
   560  001926  0100               	movlb	0	; () banked
   561  001928  6F80               	movwf	___awdiv@dividend& (0+255),b
   562  00192A  5002               	movf	_sensorValue+1,w,c
   563  00192C  2004               	addwfc	_sensorValue+3,w,c
   564  00192E  0100               	movlb	0	; () banked
   565  001930  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   566  001932  0E00               	movlw	0
   567  001934  0100               	movlb	0	; () banked
   568  001936  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   569  001938  0E02               	movlw	2
   570  00193A  6F82               	movwf	___awdiv@divisor& (0+255),b
   571  00193C  EC06  F00D         	call	___awdiv	;wreg free
   572  001940  C080  F088         	movff	?___awdiv,setCorrection@sideAvg
   573  001944  C081  F089         	movff	?___awdiv+1,setCorrection@sideAvg+1
   574                           
   575                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   576  001948  5007               	movf	_sensorValue+6,w,c
   577  00194A  2405               	addwf	_sensorValue+4,w,c
   578  00194C  0100               	movlb	0	; () banked
   579  00194E  6F80               	movwf	___awdiv@dividend& (0+255),b
   580  001950  5008               	movf	_sensorValue+7,w,c
   581  001952  2006               	addwfc	_sensorValue+5,w,c
   582  001954  0100               	movlb	0	; () banked
   583  001956  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   584  001958  0E00               	movlw	0
   585  00195A  0100               	movlb	0	; () banked
   586  00195C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   587  00195E  0E02               	movlw	2
   588  001960  6F82               	movwf	___awdiv@divisor& (0+255),b
   589  001962  EC06  F00D         	call	___awdiv	;wreg free
   590  001966  C080  F08A         	movff	?___awdiv,setCorrection@frontAvg
   591  00196A  C081  F08B         	movff	?___awdiv+1,setCorrection@frontAvg+1
   592                           
   593                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   594  00196E  C001  F05B         	movff	_sensorValue,??_setCorrection
   595  001972  C002  F05C         	movff	_sensorValue+1,??_setCorrection+1
   596  001976  1E5B               	comf	??_setCorrection,f,c
   597  001978  1E5C               	comf	??_setCorrection+1,f,c
   598  00197A  4A5B               	infsnz	??_setCorrection,f,c
   599  00197C  2A5C               	incf	??_setCorrection+1,f,c
   600  00197E  0100               	movlb	0	; () banked
   601  001980  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   602  001982  245B               	addwf	??_setCorrection,w,c
   603  001984  0100               	movlb	0	; () banked
   604  001986  6FF3               	movwf	_sensorCorrection& (0+255),b
   605  001988  0100               	movlb	0	; () banked
   606  00198A  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   607  00198C  205C               	addwfc	??_setCorrection+1,w,c
   608  00198E  0100               	movlb	0	; () banked
   609  001990  6FF4               	movwf	(_sensorCorrection+1)& (0+255),b
   610                           
   611                           ; BSR set to: 0
   612                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   613  001992  EE20  F003         	lfsr	2,_sensorValue+2
   614  001996  CFDE F05B          	movff	postinc2,??_setCorrection
   615  00199A  CFDD F05C          	movff	postdec2,??_setCorrection+1
   616  00199E  1E5B               	comf	??_setCorrection,f,c
   617  0019A0  1E5C               	comf	??_setCorrection+1,f,c
   618  0019A2  4A5B               	infsnz	??_setCorrection,f,c
   619  0019A4  2A5C               	incf	??_setCorrection+1,f,c
   620  0019A6  0100               	movlb	0	; () banked
   621  0019A8  5188               	movf	setCorrection@sideAvg& (0+255),w,b
   622  0019AA  245B               	addwf	??_setCorrection,w,c
   623  0019AC  0100               	movlb	0	; () banked
   624  0019AE  6FF5               	movwf	(_sensorCorrection+2)& (0+255),b
   625  0019B0  0100               	movlb	0	; () banked
   626  0019B2  5189               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   627  0019B4  205C               	addwfc	??_setCorrection+1,w,c
   628  0019B6  0100               	movlb	0	; () banked
   629  0019B8  6FF6               	movwf	(_sensorCorrection+3)& (0+255),b
   630                           
   631                           ; BSR set to: 0
   632                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   633  0019BA  EE20  F005         	lfsr	2,_sensorValue+4
   634  0019BE  CFDE F05B          	movff	postinc2,??_setCorrection
   635  0019C2  CFDD F05C          	movff	postdec2,??_setCorrection+1
   636  0019C6  1E5B               	comf	??_setCorrection,f,c
   637  0019C8  1E5C               	comf	??_setCorrection+1,f,c
   638  0019CA  4A5B               	infsnz	??_setCorrection,f,c
   639  0019CC  2A5C               	incf	??_setCorrection+1,f,c
   640  0019CE  0100               	movlb	0	; () banked
   641  0019D0  518A               	movf	setCorrection@frontAvg& (0+255),w,b
   642  0019D2  245B               	addwf	??_setCorrection,w,c
   643  0019D4  0100               	movlb	0	; () banked
   644  0019D6  6FF7               	movwf	(_sensorCorrection+4)& (0+255),b
   645  0019D8  0100               	movlb	0	; () banked
   646  0019DA  518B               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   647  0019DC  205C               	addwfc	??_setCorrection+1,w,c
   648  0019DE  0100               	movlb	0	; () banked
   649  0019E0  6FF8               	movwf	(_sensorCorrection+5)& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   653  0019E2  EE20  F007         	lfsr	2,_sensorValue+6
   654  0019E6  CFDE F05B          	movff	postinc2,??_setCorrection
   655  0019EA  CFDD F05C          	movff	postdec2,??_setCorrection+1
   656  0019EE  1E5B               	comf	??_setCorrection,f,c
   657  0019F0  1E5C               	comf	??_setCorrection+1,f,c
   658  0019F2  4A5B               	infsnz	??_setCorrection,f,c
   659  0019F4  2A5C               	incf	??_setCorrection+1,f,c
   660  0019F6  0100               	movlb	0	; () banked
   661  0019F8  518A               	movf	setCorrection@frontAvg& (0+255),w,b
   662  0019FA  245B               	addwf	??_setCorrection,w,c
   663  0019FC  0100               	movlb	0	; () banked
   664  0019FE  6FF9               	movwf	(_sensorCorrection+6)& (0+255),b
   665  001A00  0100               	movlb	0	; () banked
   666  001A02  518B               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   667  001A04  205C               	addwfc	??_setCorrection+1,w,c
   668  001A06  0100               	movlb	0	; () banked
   669  001A08  6FFA               	movwf	(_sensorCorrection+7)& (0+255),b
   670                           
   671                           ; BSR set to: 0
   672  001A0A  0012               	return		;funcret
   673  001A0C                     __end_of_setCorrection:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           intcon	equ	0xFF2
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postinc2	equ	0xFDE
   683                           postdec2	equ	0xFDD
   684                           
   685 ;; *************** function _sensorUpdate *****************
   686 ;; Defined at:
   687 ;;		line 161 in file "user.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;  getCorrectio    1    wreg     unsigned char 
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  getCorrectio    1  110[BANK0 ] unsigned char 
   692 ;;  sensorTemp     80   30[BANK0 ] int [10][4]
   693 ;;  j               2  113[BANK0 ] int 
   694 ;;  i               2  111[BANK0 ] int 
   695 ;; Return value:  Size  Location     Type
   696 ;;		None               void
   697 ;; Registers used:
   698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;Total ram usage:       91 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    6
   711 ;; This function calls:
   712 ;;		___wmul
   713 ;;		_sensorComputation
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text2
   720  00170E                     __ptext2:
   721                           	opt stack 0
   722  00170E                     _sensorUpdate:
   723                           	opt stack 24
   724                           
   725                           ; BSR set to: 0
   726                           ;incstack = 0
   727                           ;sensorUpdate@getCorrection stored from wreg
   728  00170E  0100               	movlb	0	; () banked
   729  001710  6FEE               	movwf	sensorUpdate@getCorrection& (0+255),b
   730                           
   731                           ; BSR set to: 0
   732                           ;user.c: 163: int i,j;
   733                           ;user.c: 164: int sensorTemp[4][10];
   734                           ;user.c: 167: for(i = 0; i < 10; i++)
   735  001712  0E00               	movlw	0
   736  001714  0100               	movlb	0	; () banked
   737  001716  6FF0               	movwf	(sensorUpdate@i+1)& (0+255),b
   738  001718  0E00               	movlw	0
   739  00171A  6FEF               	movwf	sensorUpdate@i& (0+255),b
   740  00171C                     l1951:
   741                           
   742                           ; BSR set to: 0
   743  00171C  0100               	movlb	0	; () banked
   744  00171E  BFF0               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   745  001720  D00A               	goto	l1955
   746  001722  0100               	movlb	0	; () banked
   747  001724  51F0               	movf	(sensorUpdate@i+1)& (0+255),w,b
   748  001726  E178               	bnz	l1975
   749  001728  0E0A               	movlw	10
   750  00172A  0100               	movlb	0	; () banked
   751  00172C  5DEF               	subwf	sensorUpdate@i& (0+255),w,b
   752  00172E  B0D8               	btfsc	status,0,c
   753  001730  D073               	goto	l1975
   754  001732  D001               	goto	l1955
   755                           
   756                           ; BSR set to: 0
   757  001734  D071               	goto	l1975
   758  001736                     l1955:
   759                           
   760                           ; BSR set to: 0
   761                           ;user.c: 168: {
   762                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   763  001736  0E00               	movlw	0
   764  001738  0100               	movlb	0	; () banked
   765  00173A  6FF2               	movwf	(sensorUpdate@j+1)& (0+255),b
   766  00173C  0E00               	movlw	0
   767  00173E  6FF1               	movwf	sensorUpdate@j& (0+255),b
   768  001740                     l1957:
   769                           
   770                           ; BSR set to: 0
   771  001740  0100               	movlb	0	; () banked
   772  001742  BFF2               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   773  001744  D00A               	goto	l1961
   774  001746  0100               	movlb	0	; () banked
   775  001748  51F2               	movf	(sensorUpdate@j+1)& (0+255),w,b
   776  00174A  E161               	bnz	l1971
   777  00174C  0E04               	movlw	4
   778  00174E  0100               	movlb	0	; () banked
   779  001750  5DF1               	subwf	sensorUpdate@j& (0+255),w,b
   780  001752  B0D8               	btfsc	status,0,c
   781  001754  D05C               	goto	l1971
   782  001756  D001               	goto	l1961
   783                           
   784                           ; BSR set to: 0
   785  001758  D05A               	goto	l1971
   786  00175A                     l1961:
   787                           
   788                           ; BSR set to: 0
   789                           ;user.c: 170: {
   790                           ;user.c: 171: ADCON0 = sensorLocation[j];
   791  00175A  0E01               	movlw	low _sensorLocation
   792  00175C  0100               	movlb	0	; () banked
   793  00175E  25F1               	addwf	sensorUpdate@j& (0+255),w,b
   794  001760  6EF6               	movwf	tblptrl,c
   795  001762  0E10               	movlw	high _sensorLocation
   796  001764  21F2               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   797  001766  6EF7               	movwf	tblptrh,c
   798  001768                     	if	0	;There are less than 3 active tblptr bytes
   799  001768                     	endif
   800  001768  0008               	tblrd		*
   801  00176A  CFF5 FFC2          	movff	tablat,4034	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   805  00176E  82C2               	bsf	4034,1,c	;volatile
   806                           
   807                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   808  001770  D000               	goto	l322
   809  001772                     l322:
   810                           
   811                           ; BSR set to: 0
   812  001772  B2C2               	btfsc	4034,1,c	;volatile
   813  001774  D7FE               	goto	l322
   814                           
   815                           ; BSR set to: 0
   816                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   817                           
   818                           ; BSR set to: 0
   819  001776  CFC3 F098          	movff	4035,??_sensorUpdate	;volatile
   820  00177A  0E06               	movlw	6
   821  00177C  0100               	movlb	0	; () banked
   822  00177E  6F99               	movwf	(??_sensorUpdate+1)& (0+255),b
   823  001780                     u1845:
   824  001780  0100               	movlb	0	; () banked
   825  001782  90D8               	bcf	status,0,c
   826  001784  3398               	rrcf	??_sensorUpdate& (0+255),f,b
   827  001786  0100               	movlb	0	; () banked
   828  001788  2F99               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   829  00178A  D7FA               	goto	u1845
   830  00178C  0100               	movlb	0	; () banked
   831  00178E  5198               	movf	??_sensorUpdate& (0+255),w,b
   832  001790  CFC4 F09A          	movff	4036,??_sensorUpdate+2	;volatile
   833  001794  0100               	movlb	0	; () banked
   834  001796  6B9B               	clrf	(??_sensorUpdate+3)& (0+255),b
   835  001798  0100               	movlb	0	; () banked
   836  00179A  90D8               	bcf	status,0,c
   837  00179C  379A               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   838  00179E  379B               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   839  0017A0  0100               	movlb	0	; () banked
   840  0017A2  90D8               	bcf	status,0,c
   841  0017A4  379A               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   842  0017A6  379B               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   843  0017A8  0100               	movlb	0	; () banked
   844  0017AA  279A               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   845  0017AC  0E00               	movlw	0
   846  0017AE  239B               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   847  0017B0  C0F1  F080         	movff	sensorUpdate@j,___wmul@multiplier
   848  0017B4  C0F2  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   849  0017B8  0E00               	movlw	0
   850  0017BA  0100               	movlb	0	; () banked
   851  0017BC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   852  0017BE  0E14               	movlw	20
   853  0017C0  6F82               	movwf	___wmul@multiplicand& (0+255),b
   854  0017C2  EC0E  F00E         	call	___wmul	;wreg free
   855  0017C6  0E9E               	movlw	low sensorUpdate@sensorTemp
   856  0017C8  0100               	movlb	0	; () banked
   857  0017CA  6F9C               	movwf	(??_sensorUpdate+4)& (0+255),b
   858  0017CC  0E00               	movlw	high sensorUpdate@sensorTemp
   859  0017CE  0100               	movlb	0	; () banked
   860  0017D0  6F9D               	movwf	(??_sensorUpdate+5)& (0+255),b
   861  0017D2  0100               	movlb	0	; () banked
   862  0017D4  5180               	movf	?___wmul& (0+255),w,b
   863  0017D6  0100               	movlb	0	; () banked
   864  0017D8  279C               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   865  0017DA  0100               	movlb	0	; () banked
   866  0017DC  5181               	movf	(?___wmul+1)& (0+255),w,b
   867  0017DE  0100               	movlb	0	; () banked
   868  0017E0  239D               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   869  0017E2  90D8               	bcf	status,0,c
   870  0017E4  0100               	movlb	0	; () banked
   871  0017E6  35EF               	rlcf	sensorUpdate@i& (0+255),w,b
   872  0017E8  6ED9               	movwf	fsr2l,c
   873  0017EA  0100               	movlb	0	; () banked
   874  0017EC  35F0               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   875  0017EE  6EDA               	movwf	fsr2h,c
   876  0017F0  0100               	movlb	0	; () banked
   877  0017F2  519C               	movf	(??_sensorUpdate+4)& (0+255),w,b
   878  0017F4  26D9               	addwf	fsr2l,f,c
   879  0017F6  0100               	movlb	0	; () banked
   880  0017F8  519D               	movf	(??_sensorUpdate+5)& (0+255),w,b
   881  0017FA  22DA               	addwfc	fsr2h,f,c
   882  0017FC  C09A  FFDE         	movff	??_sensorUpdate+2,postinc2
   883  001800  C09B  FFDD         	movff	??_sensorUpdate+3,postdec2
   884                           
   885                           ; BSR set to: 0
   886  001804  0100               	movlb	0	; () banked
   887  001806  4BF1               	infsnz	sensorUpdate@j& (0+255),f,b
   888  001808  2BF2               	incf	(sensorUpdate@j+1)& (0+255),f,b
   889  00180A  D79A               	goto	l1957
   890                           
   891                           ; BSR set to: 0
   892  00180C  D000               	goto	l1971
   893  00180E                     l1971:
   894                           
   895                           ; BSR set to: 0
   896  00180E  0100               	movlb	0	; () banked
   897  001810  4BEF               	infsnz	sensorUpdate@i& (0+255),f,b
   898  001812  2BF0               	incf	(sensorUpdate@i+1)& (0+255),f,b
   899  001814  D783               	goto	l1951
   900                           
   901                           ; BSR set to: 0
   902  001816  D000               	goto	l1975
   903  001818                     l1975:
   904                           
   905                           ; BSR set to: 0
   906                           ;user.c: 176: }
   907                           ;user.c: 177: }
   908                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   909  001818  0E9E               	movlw	low sensorUpdate@sensorTemp
   910  00181A  0100               	movlb	0	; () banked
   911  00181C  6F89               	movwf	sensorComputation@sensorTemp& (0+255),b
   912  00181E  0E00               	movlw	high sensorUpdate@sensorTemp
   913  001820  0100               	movlb	0	; () banked
   914  001822  6F8A               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   915  001824  C0EE  F08B         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   916  001828  EC25  F00A         	call	_sensorComputation	;wreg free
   917  00182C  0012               	return		;funcret
   918  00182E                     __end_of_sensorUpdate:
   919                           	opt stack 0
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           intcon	equ	0xFF2
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postinc2	equ	0xFDE
   928                           postdec2	equ	0xFDD
   929                           fsr2h	equ	0xFDA
   930                           fsr2l	equ	0xFD9
   931                           status	equ	0xFD8
   932                           
   933 ;; *************** function _sensorComputation *****************
   934 ;; Defined at:
   935 ;;		line 137 in file "user.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  sensorTemp      2    9[BANK0 ] PTR int [10]
   938 ;;		 -> sensorUpdate@sensorTemp(80), 
   939 ;;  getCorrectio    1   11[BANK0 ] unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  i               2   22[BANK0 ] int 
   942 ;;  j               2   20[BANK0 ] int 
   943 ;;  sum             2   18[BANK0 ] int 
   944 ;;  min             2   16[BANK0 ] int 
   945 ;;  max             2   14[BANK0 ] int 
   946 ;; Return value:  Size  Location     Type
   947 ;;		None               void
   948 ;; Registers used:
   949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   955 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   956 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;Total ram usage:       15 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    5
   962 ;; This function calls:
   963 ;;		_MAX
   964 ;;		_MIN
   965 ;;		___awdiv
   966 ;;		___wmul
   967 ;; This function is called by:
   968 ;;		_sensorUpdate
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text3
   973  00144A                     __ptext3:
   974                           	opt stack 0
   975  00144A                     _sensorComputation:
   976                           	opt stack 24
   977                           
   978                           ;user.c: 139: int max,min,i,j,sum;
   979                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   980                           
   981                           ;incstack = 0
   982  00144A  0E00               	movlw	0
   983  00144C  0100               	movlb	0	; () banked
   984  00144E  6F97               	movwf	(sensorComputation@i+1)& (0+255),b
   985  001450  0E00               	movlw	0
   986  001452  6F96               	movwf	sensorComputation@i& (0+255),b
   987                           
   988                           ; BSR set to: 0
   989  001454  0100               	movlb	0	; () banked
   990  001456  BF97               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   991  001458  D00A               	goto	l1905
   992  00145A  0100               	movlb	0	; () banked
   993  00145C  5197               	movf	(sensorComputation@i+1)& (0+255),w,b
   994  00145E  E106               	bnz	u1750
   995  001460  0E04               	movlw	4
   996  001462  0100               	movlb	0	; () banked
   997  001464  5D96               	subwf	sensorComputation@i& (0+255),w,b
   998  001466  B0D8               	btfsc	status,0,c
   999  001468  D151               	goto	l315
  1000  00146A  D001               	goto	l1905
  1001  00146C                     u1750:
  1002                           
  1003                           ; BSR set to: 0
  1004  00146C  D14F               	goto	l315
  1005  00146E                     l1905:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;user.c: 141: {
  1009                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
  1010  00146E  0E00               	movlw	0
  1011  001470  0100               	movlb	0	; () banked
  1012  001472  6F95               	movwf	(sensorComputation@j+1)& (0+255),b
  1013  001474  0E00               	movlw	0
  1014  001476  6F94               	movwf	sensorComputation@j& (0+255),b
  1015                           
  1016                           ; BSR set to: 0
  1017  001478  0100               	movlb	0	; () banked
  1018  00147A  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1019  00147C  D00A               	goto	l1911
  1020  00147E  0100               	movlb	0	; () banked
  1021  001480  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
  1022  001482  E106               	bnz	u1760
  1023  001484  0E0A               	movlw	10
  1024  001486  0100               	movlb	0	; () banked
  1025  001488  5D94               	subwf	sensorComputation@j& (0+255),w,b
  1026  00148A  B0D8               	btfsc	status,0,c
  1027  00148C  D0D3               	goto	l1921
  1028  00148E  D001               	goto	l1911
  1029  001490                     u1760:
  1030                           
  1031                           ; BSR set to: 0
  1032  001490  D0D1               	goto	l1921
  1033  001492                     l1911:
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;user.c: 143: {
  1037                           ;user.c: 144: if(j == 0)
  1038  001492  0100               	movlb	0	; () banked
  1039  001494  5194               	movf	sensorComputation@j& (0+255),w,b
  1040  001496  0100               	movlb	0	; () banked
  1041  001498  1195               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1042  00149A  A4D8               	btfss	status,2,c
  1043  00149C  D031               	goto	l1915
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;user.c: 145: {
  1047                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1048  00149E  C096  F080         	movff	sensorComputation@i,___wmul@multiplier
  1049  0014A2  C097  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1050  0014A6  0E00               	movlw	0
  1051  0014A8  0100               	movlb	0	; () banked
  1052  0014AA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1053  0014AC  0E14               	movlw	20
  1054  0014AE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1055  0014B0  EC0E  F00E         	call	___wmul	;wreg free
  1056  0014B4  C089  F08C         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1057  0014B8  C08A  F08D         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1058  0014BC  0100               	movlb	0	; () banked
  1059  0014BE  5180               	movf	?___wmul& (0+255),w,b
  1060  0014C0  0100               	movlb	0	; () banked
  1061  0014C2  278C               	addwf	??_sensorComputation& (0+255),f,b
  1062  0014C4  0100               	movlb	0	; () banked
  1063  0014C6  5181               	movf	(?___wmul+1)& (0+255),w,b
  1064  0014C8  0100               	movlb	0	; () banked
  1065  0014CA  238D               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1066  0014CC  90D8               	bcf	status,0,c
  1067  0014CE  0100               	movlb	0	; () banked
  1068  0014D0  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1069  0014D2  6ED9               	movwf	fsr2l,c
  1070  0014D4  0100               	movlb	0	; () banked
  1071  0014D6  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1072  0014D8  6EDA               	movwf	fsr2h,c
  1073  0014DA  0100               	movlb	0	; () banked
  1074  0014DC  518C               	movf	??_sensorComputation& (0+255),w,b
  1075  0014DE  26D9               	addwf	fsr2l,f,c
  1076  0014E0  0100               	movlb	0	; () banked
  1077  0014E2  518D               	movf	(??_sensorComputation+1)& (0+255),w,b
  1078  0014E4  22DA               	addwfc	fsr2h,f,c
  1079  0014E6  CFDE F08E          	movff	postinc2,sensorComputation@max
  1080  0014EA  CFDD F08F          	movff	postdec2,sensorComputation@max+1
  1081  0014EE  C08E  F090         	movff	sensorComputation@max,sensorComputation@min
  1082  0014F2  C08F  F091         	movff	sensorComputation@max+1,sensorComputation@min+1
  1083  0014F6  C090  F092         	movff	sensorComputation@min,sensorComputation@sum
  1084  0014FA  C091  F093         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1085                           
  1086                           ;user.c: 147: continue;
  1087  0014FE  D08F               	goto	l1917
  1088  001500                     l1915:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;user.c: 148: }
  1092                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1093  001500  C096  F080         	movff	sensorComputation@i,___wmul@multiplier
  1094  001504  C097  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1095  001508  0E00               	movlw	0
  1096  00150A  0100               	movlb	0	; () banked
  1097  00150C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1098  00150E  0E14               	movlw	20
  1099  001510  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1100  001512  EC0E  F00E         	call	___wmul	;wreg free
  1101  001516  C089  F08C         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1102  00151A  C08A  F08D         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1103  00151E  0100               	movlb	0	; () banked
  1104  001520  5180               	movf	?___wmul& (0+255),w,b
  1105  001522  0100               	movlb	0	; () banked
  1106  001524  278C               	addwf	??_sensorComputation& (0+255),f,b
  1107  001526  0100               	movlb	0	; () banked
  1108  001528  5181               	movf	(?___wmul+1)& (0+255),w,b
  1109  00152A  0100               	movlb	0	; () banked
  1110  00152C  238D               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1111  00152E  90D8               	bcf	status,0,c
  1112  001530  0100               	movlb	0	; () banked
  1113  001532  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1114  001534  6ED9               	movwf	fsr2l,c
  1115  001536  0100               	movlb	0	; () banked
  1116  001538  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1117  00153A  6EDA               	movwf	fsr2h,c
  1118  00153C  0100               	movlb	0	; () banked
  1119  00153E  518C               	movf	??_sensorComputation& (0+255),w,b
  1120  001540  26D9               	addwf	fsr2l,f,c
  1121  001542  0100               	movlb	0	; () banked
  1122  001544  518D               	movf	(??_sensorComputation+1)& (0+255),w,b
  1123  001546  22DA               	addwfc	fsr2h,f,c
  1124  001548  CFDE F084          	movff	postinc2,MIN@a
  1125  00154C  CFDD F085          	movff	postdec2,MIN@a+1
  1126  001550  C090  F086         	movff	sensorComputation@min,MIN@b
  1127  001554  C091  F087         	movff	sensorComputation@min+1,MIN@b+1
  1128  001558  EC28  F00E         	call	_MIN	;wreg free
  1129  00155C  C084  F090         	movff	?_MIN,sensorComputation@min
  1130  001560  C085  F091         	movff	?_MIN+1,sensorComputation@min+1
  1131                           
  1132                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1133  001564  C096  F080         	movff	sensorComputation@i,___wmul@multiplier
  1134  001568  C097  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1135  00156C  0E00               	movlw	0
  1136  00156E  0100               	movlb	0	; () banked
  1137  001570  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1138  001572  0E14               	movlw	20
  1139  001574  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1140  001576  EC0E  F00E         	call	___wmul	;wreg free
  1141  00157A  C089  F08C         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1142  00157E  C08A  F08D         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1143  001582  0100               	movlb	0	; () banked
  1144  001584  5180               	movf	?___wmul& (0+255),w,b
  1145  001586  0100               	movlb	0	; () banked
  1146  001588  278C               	addwf	??_sensorComputation& (0+255),f,b
  1147  00158A  0100               	movlb	0	; () banked
  1148  00158C  5181               	movf	(?___wmul+1)& (0+255),w,b
  1149  00158E  0100               	movlb	0	; () banked
  1150  001590  238D               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1151  001592  90D8               	bcf	status,0,c
  1152  001594  0100               	movlb	0	; () banked
  1153  001596  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1154  001598  6ED9               	movwf	fsr2l,c
  1155  00159A  0100               	movlb	0	; () banked
  1156  00159C  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1157  00159E  6EDA               	movwf	fsr2h,c
  1158  0015A0  0100               	movlb	0	; () banked
  1159  0015A2  518C               	movf	??_sensorComputation& (0+255),w,b
  1160  0015A4  26D9               	addwf	fsr2l,f,c
  1161  0015A6  0100               	movlb	0	; () banked
  1162  0015A8  518D               	movf	(??_sensorComputation+1)& (0+255),w,b
  1163  0015AA  22DA               	addwfc	fsr2h,f,c
  1164  0015AC  CFDE F084          	movff	postinc2,MAX@a
  1165  0015B0  CFDD F085          	movff	postdec2,MAX@a+1
  1166  0015B4  C08E  F086         	movff	sensorComputation@max,MAX@b
  1167  0015B8  C08F  F087         	movff	sensorComputation@max+1,MAX@b+1
  1168  0015BC  EC42  F00E         	call	_MAX	;wreg free
  1169  0015C0  C084  F08E         	movff	?_MAX,sensorComputation@max
  1170  0015C4  C085  F08F         	movff	?_MAX+1,sensorComputation@max+1
  1171                           
  1172                           ;user.c: 151: sum += sensorTemp[i][j];
  1173  0015C8  C096  F080         	movff	sensorComputation@i,___wmul@multiplier
  1174  0015CC  C097  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1175  0015D0  0E00               	movlw	0
  1176  0015D2  0100               	movlb	0	; () banked
  1177  0015D4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1178  0015D6  0E14               	movlw	20
  1179  0015D8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1180  0015DA  EC0E  F00E         	call	___wmul	;wreg free
  1181  0015DE  C089  F08C         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1182  0015E2  C08A  F08D         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1183  0015E6  0100               	movlb	0	; () banked
  1184  0015E8  5180               	movf	?___wmul& (0+255),w,b
  1185  0015EA  0100               	movlb	0	; () banked
  1186  0015EC  278C               	addwf	??_sensorComputation& (0+255),f,b
  1187  0015EE  0100               	movlb	0	; () banked
  1188  0015F0  5181               	movf	(?___wmul+1)& (0+255),w,b
  1189  0015F2  0100               	movlb	0	; () banked
  1190  0015F4  238D               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1191  0015F6  90D8               	bcf	status,0,c
  1192  0015F8  0100               	movlb	0	; () banked
  1193  0015FA  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1194  0015FC  6ED9               	movwf	fsr2l,c
  1195  0015FE  0100               	movlb	0	; () banked
  1196  001600  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1197  001602  6EDA               	movwf	fsr2h,c
  1198  001604  0100               	movlb	0	; () banked
  1199  001606  518C               	movf	??_sensorComputation& (0+255),w,b
  1200  001608  26D9               	addwf	fsr2l,f,c
  1201  00160A  0100               	movlb	0	; () banked
  1202  00160C  518D               	movf	(??_sensorComputation+1)& (0+255),w,b
  1203  00160E  22DA               	addwfc	fsr2h,f,c
  1204  001610  50DE               	movf	postinc2,w,c
  1205  001612  0100               	movlb	0	; () banked
  1206  001614  2792               	addwf	sensorComputation@sum& (0+255),f,b
  1207  001616  50DD               	movf	postdec2,w,c
  1208  001618  0100               	movlb	0	; () banked
  1209  00161A  2393               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1210  00161C  D000               	goto	l1917
  1211  00161E                     l1917:
  1212                           
  1213                           ; BSR set to: 0
  1214  00161E  0100               	movlb	0	; () banked
  1215  001620  4B94               	infsnz	sensorComputation@j& (0+255),f,b
  1216  001622  2B95               	incf	(sensorComputation@j+1)& (0+255),f,b
  1217                           
  1218                           ; BSR set to: 0
  1219  001624  0100               	movlb	0	; () banked
  1220  001626  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1221  001628  D734               	goto	l1911
  1222  00162A  0100               	movlb	0	; () banked
  1223  00162C  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
  1224  00162E  E102               	bnz	l1921
  1225  001630  D729               	goto	L2
  1226  001632  D000               	goto	l1921
  1227  001634                     l1921:
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;user.c: 152: }
  1231                           ;user.c: 153: sum = sum - min - max;
  1232  001634  0100               	movlb	0	; () banked
  1233  001636  518E               	movf	sensorComputation@max& (0+255),w,b
  1234  001638  0100               	movlb	0	; () banked
  1235  00163A  2590               	addwf	sensorComputation@min& (0+255),w,b
  1236  00163C  0100               	movlb	0	; () banked
  1237  00163E  6F8C               	movwf	??_sensorComputation& (0+255),b
  1238  001640  0100               	movlb	0	; () banked
  1239  001642  518F               	movf	(sensorComputation@max+1)& (0+255),w,b
  1240  001644  0100               	movlb	0	; () banked
  1241  001646  2191               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1242  001648  0100               	movlb	0	; () banked
  1243  00164A  6F8D               	movwf	(??_sensorComputation+1)& (0+255),b
  1244  00164C  0100               	movlb	0	; () banked
  1245  00164E  1F8C               	comf	??_sensorComputation& (0+255),f,b
  1246  001650  1F8D               	comf	(??_sensorComputation+1)& (0+255),f,b
  1247  001652  4B8C               	infsnz	??_sensorComputation& (0+255),f,b
  1248  001654  2B8D               	incf	(??_sensorComputation+1)& (0+255),f,b
  1249  001656  0100               	movlb	0	; () banked
  1250  001658  5192               	movf	sensorComputation@sum& (0+255),w,b
  1251  00165A  0100               	movlb	0	; () banked
  1252  00165C  258C               	addwf	??_sensorComputation& (0+255),w,b
  1253  00165E  0100               	movlb	0	; () banked
  1254  001660  6F92               	movwf	sensorComputation@sum& (0+255),b
  1255  001662  0100               	movlb	0	; () banked
  1256  001664  5193               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1257  001666  0100               	movlb	0	; () banked
  1258  001668  218D               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1259  00166A  0100               	movlb	0	; () banked
  1260  00166C  6F93               	movwf	(sensorComputation@sum+1)& (0+255),b
  1261                           
  1262                           ;user.c: 154: if(getCorrection == 1)
  1263  00166E  0100               	movlb	0	; () banked
  1264  001670  058B               	decf	sensorComputation@getCorrection& (0+255),w,b
  1265  001672  A4D8               	btfss	status,2,c
  1266  001674  D00C               	goto	l1925
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1270  001676  C092  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1271  00167A  C093  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1272  00167E  0E00               	movlw	0
  1273  001680  0100               	movlb	0	; () banked
  1274  001682  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1275  001684  0E08               	movlw	8
  1276  001686  6F82               	movwf	___awdiv@divisor& (0+255),b
  1277  001688  EC06  F00D         	call	___awdiv	;wreg free
  1278  00168C  D022               	goto	L3
  1279  00168E                     l1925:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;user.c: 156: else
  1283                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1284  00168E  90D8               	bcf	status,0,c
  1285  001690  0100               	movlb	0	; () banked
  1286  001692  3596               	rlcf	sensorComputation@i& (0+255),w,b
  1287  001694  6ED9               	movwf	fsr2l,c
  1288  001696  0100               	movlb	0	; () banked
  1289  001698  3597               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1290  00169A  6EDA               	movwf	fsr2h,c
  1291  00169C  0EF3               	movlw	low _sensorCorrection
  1292  00169E  26D9               	addwf	fsr2l,f,c
  1293  0016A0  0E00               	movlw	high _sensorCorrection
  1294  0016A2  22DA               	addwfc	fsr2h,f,c
  1295  0016A4  CFDE F08C          	movff	postinc2,??_sensorComputation
  1296  0016A8  CFDD F08D          	movff	postdec2,??_sensorComputation+1
  1297  0016AC  C092  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1298  0016B0  C093  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1299  0016B4  0E00               	movlw	0
  1300  0016B6  0100               	movlb	0	; () banked
  1301  0016B8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1302  0016BA  0E08               	movlw	8
  1303  0016BC  6F82               	movwf	___awdiv@divisor& (0+255),b
  1304  0016BE  EC06  F00D         	call	___awdiv	;wreg free
  1305  0016C2  0100               	movlb	0	; () banked
  1306  0016C4  518C               	movf	??_sensorComputation& (0+255),w,b
  1307  0016C6  0100               	movlb	0	; () banked
  1308  0016C8  2780               	addwf	?___awdiv& (0+255),f,b
  1309  0016CA  0100               	movlb	0	; () banked
  1310  0016CC  518D               	movf	(??_sensorComputation+1)& (0+255),w,b
  1311  0016CE  0100               	movlb	0	; () banked
  1312  0016D0  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1313  0016D2                     L3:
  1314  0016D2  90D8               	bcf	status,0,c
  1315  0016D4  0100               	movlb	0	; () banked
  1316  0016D6  3596               	rlcf	sensorComputation@i& (0+255),w,b
  1317  0016D8  6ED9               	movwf	fsr2l,c
  1318  0016DA  0100               	movlb	0	; () banked
  1319  0016DC  3597               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1320  0016DE  6EDA               	movwf	fsr2h,c
  1321  0016E0  0E01               	movlw	low _sensorValue
  1322  0016E2  26D9               	addwf	fsr2l,f,c
  1323  0016E4  0E00               	movlw	high _sensorValue
  1324  0016E6  22DA               	addwfc	fsr2h,f,c
  1325  0016E8  0100               	movlb	0	; () banked
  1326  0016EA  C080  FFDE         	movff	?___awdiv,postinc2
  1327  0016EE  0100               	movlb	0	; () banked
  1328  0016F0  C081  FFDD         	movff	?___awdiv+1,postdec2
  1329  0016F4  D000               	goto	l1927
  1330  0016F6                     l1927:
  1331                           
  1332                           ; BSR set to: 0
  1333  0016F6  0100               	movlb	0	; () banked
  1334  0016F8  4B96               	infsnz	sensorComputation@i& (0+255),f,b
  1335  0016FA  2B97               	incf	(sensorComputation@i+1)& (0+255),f,b
  1336                           
  1337                           ; BSR set to: 0
  1338  0016FC  0100               	movlb	0	; () banked
  1339  0016FE  BF97               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1340  001700  D6B6               	goto	l1905
  1341  001702  0100               	movlb	0	; () banked
  1342  001704  5197               	movf	(sensorComputation@i+1)& (0+255),w,b
  1343  001706  E102               	bnz	l315
  1344  001708  D6AB               	goto	L4
  1345  00170A  D000               	goto	l315
  1346  00170C                     l315:
  1347                           
  1348                           ; BSR set to: 0
  1349  00170C  0012               	return		;funcret
  1350  00170E                     __end_of_sensorComputation:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           intcon	equ	0xFF2
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postinc2	equ	0xFDE
  1360                           postdec2	equ	0xFDD
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function ___wmul *****************
  1366 ;; Defined at:
  1367 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1370 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  product         2   34[COMRAM] unsigned int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2    0[BANK0 ] unsigned int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, prodl, prodh
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:        6 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    4
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sensorComputation
  1393 ;;		_sensorUpdate
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text4
  1398  001C1C                     __ptext4:
  1399                           	opt stack 0
  1400  001C1C                     ___wmul:
  1401                           	opt stack 24
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;incstack = 0
  1405  001C1C  0100               	movlb	0	; () banked
  1406  001C1E  5180               	movf	___wmul@multiplier& (0+255),w,b
  1407  001C20  0100               	movlb	0	; () banked
  1408  001C22  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1409  001C24  CFF3 F05B          	movff	prodl,___wmul@product
  1410  001C28  CFF4 F05C          	movff	prodh,___wmul@product+1
  1411  001C2C  0100               	movlb	0	; () banked
  1412  001C2E  5180               	movf	___wmul@multiplier& (0+255),w,b
  1413  001C30  0100               	movlb	0	; () banked
  1414  001C32  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1415  001C34  50F3               	movf	prodl,w,c
  1416  001C36  265C               	addwf	___wmul@product+1,f,c
  1417  001C38  0100               	movlb	0	; () banked
  1418  001C3A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1419  001C3C  0100               	movlb	0	; () banked
  1420  001C3E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1421  001C40  50F3               	movf	prodl,w,c
  1422  001C42  265C               	addwf	___wmul@product+1,f,c
  1423                           
  1424                           ; BSR set to: 0
  1425  001C44  C05B  F080         	movff	___wmul@product,?___wmul
  1426  001C48  C05C  F081         	movff	___wmul@product+1,?___wmul+1
  1427  001C4C  D000               	goto	l336
  1428  001C4E                     l336:
  1429                           
  1430                           ; BSR set to: 0
  1431  001C4E  0012               	return		;funcret
  1432  001C50                     __end_of___wmul:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           intcon	equ	0xFF2
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postinc2	equ	0xFDE
  1444                           postdec2	equ	0xFDD
  1445                           fsr2h	equ	0xFDA
  1446                           fsr2l	equ	0xFD9
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function ___awdiv *****************
  1450 ;; Defined at:
  1451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  dividend        2    0[BANK0 ] int 
  1454 ;;  divisor         2    2[BANK0 ] int 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  quotient        2    6[BANK0 ] int 
  1457 ;;  sign            1    5[BANK0 ] unsigned char 
  1458 ;;  counter         1    4[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    0[BANK0 ] int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:        8 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    4
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_setCorrection
  1479 ;;		_sensorComputation
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text5
  1484  001A0C                     __ptext5:
  1485                           	opt stack 0
  1486  001A0C                     ___awdiv:
  1487                           	opt stack 25
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;incstack = 0
  1491  001A0C  0E00               	movlw	0
  1492  001A0E  0100               	movlb	0	; () banked
  1493  001A10  6F85               	movwf	___awdiv@sign& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496  001A12  0100               	movlb	0	; () banked
  1497  001A14  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1498  001A16  D009               	goto	l1857
  1499                           
  1500                           ; BSR set to: 0
  1501  001A18  0100               	movlb	0	; () banked
  1502  001A1A  6D82               	negf	___awdiv@divisor& (0+255),b
  1503  001A1C  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1504  001A1E  B0D8               	btfsc	status,0,c
  1505  001A20  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  001A22  0E01               	movlw	1
  1509  001A24  0100               	movlb	0	; () banked
  1510  001A26  6F85               	movwf	___awdiv@sign& (0+255),b
  1511  001A28  D000               	goto	l1857
  1512  001A2A                     l1857:
  1513                           
  1514                           ; BSR set to: 0
  1515  001A2A  0100               	movlb	0	; () banked
  1516  001A2C  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1517  001A2E  D009               	goto	l1863
  1518                           
  1519                           ; BSR set to: 0
  1520  001A30  0100               	movlb	0	; () banked
  1521  001A32  6D80               	negf	___awdiv@dividend& (0+255),b
  1522  001A34  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1523  001A36  B0D8               	btfsc	status,0,c
  1524  001A38  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1525                           
  1526                           ; BSR set to: 0
  1527  001A3A  0E01               	movlw	1
  1528  001A3C  0100               	movlb	0	; () banked
  1529  001A3E  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1530  001A40  D000               	goto	l1863
  1531  001A42                     l1863:
  1532                           
  1533                           ; BSR set to: 0
  1534  001A42  0E00               	movlw	0
  1535  001A44  0100               	movlb	0	; () banked
  1536  001A46  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1537  001A48  0E00               	movlw	0
  1538  001A4A  6F86               	movwf	___awdiv@quotient& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541  001A4C  0100               	movlb	0	; () banked
  1542  001A4E  5182               	movf	___awdiv@divisor& (0+255),w,b
  1543  001A50  0100               	movlb	0	; () banked
  1544  001A52  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1545  001A54  B4D8               	btfsc	status,2,c
  1546  001A56  D031               	goto	l1885
  1547                           
  1548                           ; BSR set to: 0
  1549  001A58  0E01               	movlw	1
  1550  001A5A  0100               	movlb	0	; () banked
  1551  001A5C  6F84               	movwf	___awdiv@counter& (0+255),b
  1552  001A5E  D007               	goto	l1871
  1553  001A60                     l1869:
  1554                           
  1555                           ; BSR set to: 0
  1556  001A60  0100               	movlb	0	; () banked
  1557  001A62  90D8               	bcf	status,0,c
  1558  001A64  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1559  001A66  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1560  001A68  0100               	movlb	0	; () banked
  1561  001A6A  2B84               	incf	___awdiv@counter& (0+255),f,b
  1562  001A6C  D000               	goto	l1871
  1563  001A6E                     l1871:
  1564                           
  1565                           ; BSR set to: 0
  1566  001A6E  0100               	movlb	0	; () banked
  1567  001A70  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1568  001A72  D002               	goto	l1873
  1569  001A74  D7F5               	goto	l1869
  1570                           
  1571                           ; BSR set to: 0
  1572  001A76  D000               	goto	l1873
  1573  001A78                     l1873:
  1574                           
  1575                           ; BSR set to: 0
  1576  001A78  0100               	movlb	0	; () banked
  1577  001A7A  90D8               	bcf	status,0,c
  1578  001A7C  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1579  001A7E  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1580                           
  1581                           ; BSR set to: 0
  1582  001A80  0100               	movlb	0	; () banked
  1583  001A82  5182               	movf	___awdiv@divisor& (0+255),w,b
  1584  001A84  0100               	movlb	0	; () banked
  1585  001A86  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1586  001A88  0100               	movlb	0	; () banked
  1587  001A8A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1588  001A8C  0100               	movlb	0	; () banked
  1589  001A8E  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1590  001A90  A0D8               	btfss	status,0,c
  1591  001A92  D00B               	goto	l1881
  1592                           
  1593                           ; BSR set to: 0
  1594  001A94  0100               	movlb	0	; () banked
  1595  001A96  5182               	movf	___awdiv@divisor& (0+255),w,b
  1596  001A98  0100               	movlb	0	; () banked
  1597  001A9A  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1598  001A9C  0100               	movlb	0	; () banked
  1599  001A9E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1600  001AA0  0100               	movlb	0	; () banked
  1601  001AA2  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1602                           
  1603                           ; BSR set to: 0
  1604  001AA4  0100               	movlb	0	; () banked
  1605  001AA6  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1606  001AA8  D000               	goto	l1881
  1607  001AAA                     l1881:
  1608                           
  1609                           ; BSR set to: 0
  1610  001AAA  0100               	movlb	0	; () banked
  1611  001AAC  90D8               	bcf	status,0,c
  1612  001AAE  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1613  001AB0  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 0
  1616  001AB2  0100               	movlb	0	; () banked
  1617  001AB4  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1618  001AB6  D7E0               	goto	l1873
  1619                           
  1620                           ; BSR set to: 0
  1621  001AB8  D000               	goto	l1885
  1622  001ABA                     l1885:
  1623                           
  1624                           ; BSR set to: 0
  1625  001ABA  0100               	movlb	0	; () banked
  1626  001ABC  5185               	movf	___awdiv@sign& (0+255),w,b
  1627  001ABE  0100               	movlb	0	; () banked
  1628  001AC0  B4D8               	btfsc	status,2,c
  1629  001AC2  D006               	goto	l1889
  1630                           
  1631                           ; BSR set to: 0
  1632  001AC4  0100               	movlb	0	; () banked
  1633  001AC6  6D86               	negf	___awdiv@quotient& (0+255),b
  1634  001AC8  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1635  001ACA  B0D8               	btfsc	status,0,c
  1636  001ACC  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1637  001ACE  D000               	goto	l1889
  1638  001AD0                     l1889:
  1639                           
  1640                           ; BSR set to: 0
  1641  001AD0  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1642  001AD4  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1643  001AD8  D000               	goto	l529
  1644  001ADA                     l529:
  1645                           
  1646                           ; BSR set to: 0
  1647  001ADA  0012               	return		;funcret
  1648  001ADC                     __end_of___awdiv:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           intcon	equ	0xFF2
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _MIN *****************
  1666 ;; Defined at:
  1667 ;;		line 184 in file "user.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  a               2    4[BANK0 ] int 
  1670 ;;  b               2    6[BANK0 ] int 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  2    4[BANK0 ] int 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1682 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1686 ;;Total ram usage:        5 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    4
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_sensorComputation
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text6
  1697  001C50                     __ptext6:
  1698                           	opt stack 0
  1699  001C50                     _MIN:
  1700                           	opt stack 24
  1701                           
  1702                           ;user.c: 186: if(a>b) return b;
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;incstack = 0
  1706  001C50  0100               	movlb	0	; () banked
  1707  001C52  5184               	movf	MIN@a& (0+255),w,b
  1708  001C54  0100               	movlb	0	; () banked
  1709  001C56  5D86               	subwf	MIN@b& (0+255),w,b
  1710  001C58  0100               	movlb	0	; () banked
  1711  001C5A  5187               	movf	(MIN@b+1)& (0+255),w,b
  1712  001C5C  0A80               	xorlw	128
  1713  001C5E  0100               	movlb	0	; () banked
  1714  001C60  6F88               	movwf	??_MIN& (0+255),b
  1715  001C62  0100               	movlb	0	; () banked
  1716  001C64  5185               	movf	(MIN@a+1)& (0+255),w,b
  1717  001C66  0A80               	xorlw	128
  1718  001C68  0100               	movlb	0	; () banked
  1719  001C6A  5988               	subwfb	??_MIN& (0+255),w,b
  1720  001C6C  B0D8               	btfsc	status,0,c
  1721  001C6E  D005               	goto	l328
  1722                           
  1723                           ; BSR set to: 0
  1724  001C70  C086  F084         	movff	MIN@b,?_MIN
  1725  001C74  C087  F085         	movff	MIN@b+1,?_MIN+1
  1726  001C78  D004               	goto	l329
  1727  001C7A                     l328:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;user.c: 187: return a;
  1731  001C7A  C084  F084         	movff	MIN@a,?_MIN
  1732  001C7E  C085  F085         	movff	MIN@a+1,?_MIN+1
  1733  001C82                     l329:
  1734                           
  1735                           ; BSR set to: 0
  1736  001C82  0012               	return		;funcret
  1737  001C84                     __end_of_MIN:
  1738                           	opt stack 0
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           prodh	equ	0xFF4
  1744                           prodl	equ	0xFF3
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _MAX *****************
  1755 ;; Defined at:
  1756 ;;		line 190 in file "user.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  a               2    4[BANK0 ] int 
  1759 ;;  b               2    6[BANK0 ] int 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  2    4[BANK0 ] int 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        5 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    4
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_sensorComputation
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text7
  1786  001C84                     __ptext7:
  1787                           	opt stack 0
  1788  001C84                     _MAX:
  1789                           	opt stack 24
  1790                           
  1791                           ;user.c: 192: if(a>b) return a;
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;incstack = 0
  1795  001C84  0100               	movlb	0	; () banked
  1796  001C86  5184               	movf	MAX@a& (0+255),w,b
  1797  001C88  0100               	movlb	0	; () banked
  1798  001C8A  5D86               	subwf	MAX@b& (0+255),w,b
  1799  001C8C  0100               	movlb	0	; () banked
  1800  001C8E  5187               	movf	(MAX@b+1)& (0+255),w,b
  1801  001C90  0A80               	xorlw	128
  1802  001C92  0100               	movlb	0	; () banked
  1803  001C94  6F88               	movwf	??_MAX& (0+255),b
  1804  001C96  0100               	movlb	0	; () banked
  1805  001C98  5185               	movf	(MAX@a+1)& (0+255),w,b
  1806  001C9A  0A80               	xorlw	128
  1807  001C9C  0100               	movlb	0	; () banked
  1808  001C9E  5988               	subwfb	??_MAX& (0+255),w,b
  1809  001CA0  B0D8               	btfsc	status,0,c
  1810  001CA2  D005               	goto	l332
  1811                           
  1812                           ; BSR set to: 0
  1813  001CA4  C084  F084         	movff	MAX@a,?_MAX
  1814  001CA8  C085  F085         	movff	MAX@a+1,?_MAX+1
  1815  001CAC  D004               	goto	l333
  1816  001CAE                     l332:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;user.c: 193: return b;
  1820  001CAE  C086  F084         	movff	MAX@b,?_MAX
  1821  001CB2  C087  F085         	movff	MAX@b+1,?_MAX+1
  1822  001CB6                     l333:
  1823                           
  1824                           ; BSR set to: 0
  1825  001CB6  0012               	return		;funcret
  1826  001CB8                     __end_of_MAX:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postinc2	equ	0xFDE
  1838                           postdec2	equ	0xFDD
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _InitApp *****************
  1844 ;; Defined at:
  1845 ;;		line 35 in file "user.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;		None               void
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;Total ram usage:        0 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    5
  1866 ;; This function calls:
  1867 ;;		_AlgorithmSelection
  1868 ;;		_delay
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text8
  1875  001BAE                     __ptext8:
  1876                           	opt stack 0
  1877  001BAE                     _InitApp:
  1878                           	opt stack 25
  1879                           
  1880                           ;user.c: 39: TRISC = 0;
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;incstack = 0
  1884  001BAE  0E00               	movlw	0
  1885  001BB0  6E94               	movwf	3988,c	;volatile
  1886                           
  1887                           ;user.c: 43: TRISEbits.TRISE1=1;
  1888  001BB2  8296               	bsf	3990,1,c	;volatile
  1889                           
  1890                           ;user.c: 45: TRISEbits.TRISE2=1;
  1891  001BB4  8496               	bsf	3990,2,c	;volatile
  1892                           
  1893                           ;user.c: 47: TRISBbits.RB1=1;
  1894  001BB6  8293               	bsf	3987,1,c	;volatile
  1895                           
  1896                           ;user.c: 49: TRISBbits.RB0=1;
  1897  001BB8  8093               	bsf	3987,0,c	;volatile
  1898                           
  1899                           ;user.c: 52: TRISBbits.RB3=1;
  1900  001BBA  8693               	bsf	3987,3,c	;volatile
  1901                           
  1902                           ;user.c: 54: TRISBbits.RB2=1;
  1903  001BBC  8493               	bsf	3987,2,c	;volatile
  1904                           
  1905                           ;user.c: 58: ADCON1 =0b00000001;
  1906  001BBE  0E01               	movlw	1
  1907  001BC0  6EC1               	movwf	4033,c	;volatile
  1908                           
  1909                           ;user.c: 63: ADCON2=0b00001010;
  1910  001BC2  0E0A               	movlw	10
  1911  001BC4  6EC0               	movwf	4032,c	;volatile
  1912                           
  1913                           ;user.c: 68: ADCON0=0b00101011;
  1914  001BC6  0E2B               	movlw	43
  1915  001BC8  6EC2               	movwf	4034,c	;volatile
  1916                           
  1917                           ;user.c: 77: T0CON = 0b11000100;
  1918  001BCA  0EC4               	movlw	196
  1919  001BCC  6ED5               	movwf	4053,c	;volatile
  1920                           
  1921                           ;user.c: 85: INTCON2 = 0b11110100;
  1922  001BCE  0EF4               	movlw	244
  1923  001BD0  6EF1               	movwf	intcon2,c	;volatile
  1924                           
  1925                           ;user.c: 95: INTCON = 0b00100000;
  1926  001BD2  0E20               	movlw	32
  1927  001BD4  6EF2               	movwf	intcon,c	;volatile
  1928                           
  1929                           ;user.c: 105: AlgorithmSelection();
  1930  001BD6  EC88  F00E         	call	_AlgorithmSelection	;wreg free
  1931                           
  1932                           ;user.c: 108: delay(1000);
  1933  001BDA  0E03               	movlw	3
  1934  001BDC  6E5C               	movwf	delay@ms+1,c
  1935  001BDE  0EE8               	movlw	232
  1936  001BE0  6E5B               	movwf	delay@ms,c
  1937  001BE2  EC99  F00D         	call	_delay	;wreg free
  1938  001BE6  0012               	return		;funcret
  1939  001BE8                     __end_of_InitApp:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           prodh	equ	0xFF4
  1946                           prodl	equ	0xFF3
  1947                           intcon	equ	0xFF2
  1948                           intcon2	equ	0xFF1
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postinc2	equ	0xFDE
  1952                           postdec2	equ	0xFDD
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _delay *****************
  1958 ;; Defined at:
  1959 ;;		line 29 in file "user.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  ms              2   34[COMRAM] unsigned int 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  x               2    1[BANK0 ] int 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        5 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    4
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_InitApp
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text9
  1988  001B32                     __ptext9:
  1989                           	opt stack 0
  1990  001B32                     _delay:
  1991                           	opt stack 25
  1992                           
  1993                           ;user.c: 30: int x = 0;
  1994                           
  1995                           ;incstack = 0
  1996  001B32  0E00               	movlw	0
  1997  001B34  0100               	movlb	0	; () banked
  1998  001B36  6F82               	movwf	(delay@x+1)& (0+255),b
  1999  001B38  0E00               	movlw	0
  2000  001B3A  6F81               	movwf	delay@x& (0+255),b
  2001                           
  2002                           ;user.c: 31: for (x = 0; x < ms; x++)
  2003  001B3C  0E00               	movlw	0
  2004  001B3E  0100               	movlb	0	; () banked
  2005  001B40  6F82               	movwf	(delay@x+1)& (0+255),b
  2006  001B42  0E00               	movlw	0
  2007  001B44  6F81               	movwf	delay@x& (0+255),b
  2008  001B46  D00C               	goto	l287
  2009  001B48                     l1895:
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  2013  001B48  0E0B               	movlw	11
  2014  001B4A  0100               	movlb	0	; () banked
  2015  001B4C  6F80               	movwf	??_delay& (0+255),b
  2016  001B4E  0E62               	movlw	98
  2017  001B50                     u1877:
  2018  001B50  2EE8               	decfsz	wreg,f,c
  2019  001B52  D7FE               	goto	u1877
  2020  001B54  2F80               	decfsz	??_delay& (0+255),f,b
  2021  001B56  D7FC               	goto	u1877
  2022  001B58  D000               	nop2	
  2023  001B5A  0100               	movlb	0	; () banked
  2024  001B5C  4B81               	infsnz	delay@x& (0+255),f,b
  2025  001B5E  2B82               	incf	(delay@x+1)& (0+255),f,b
  2026  001B60                     l287:
  2027                           
  2028                           ; BSR set to: 0
  2029  001B60  505B               	movf	delay@ms,w,c
  2030  001B62  0100               	movlb	0	; () banked
  2031  001B64  5D81               	subwf	delay@x& (0+255),w,b
  2032  001B66  505C               	movf	delay@ms+1,w,c
  2033  001B68  0100               	movlb	0	; () banked
  2034  001B6A  5982               	subwfb	(delay@x+1)& (0+255),w,b
  2035  001B6C  A0D8               	btfss	status,0,c
  2036  001B6E  D7EC               	goto	l1895
  2037                           
  2038                           ; BSR set to: 0
  2039                           
  2040                           ; BSR set to: 0
  2041  001B70  0012               	return		;funcret
  2042  001B72                     __end_of_delay:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _AlgorithmSelection *****************
  2061 ;; Defined at:
  2062 ;;		line 112 in file "user.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;		None               void
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;Total ram usage:        0 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    4
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_InitApp
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text10
  2091  001D10                     __ptext10:
  2092                           	opt stack 0
  2093  001D10                     _AlgorithmSelection:
  2094                           	opt stack 25
  2095                           
  2096                           ;user.c: 114: ADCON0 = 0b00100111;
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;incstack = 0
  2100  001D10  0E27               	movlw	39
  2101  001D12  6EC2               	movwf	4034,c	;volatile
  2102                           
  2103                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2104  001D14  82C2               	bsf	4034,1,c	;volatile
  2105                           
  2106                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2107  001D16  D000               	goto	l296
  2108  001D18                     l296:
  2109  001D18  B2C2               	btfsc	4034,1,c	;volatile
  2110  001D1A  D7FE               	goto	l296
  2111                           
  2112                           ;user.c: 119: if(ADRESL > 0b10000000)
  2113  001D1C  0E80               	movlw	128
  2114  001D1E  64C3               	cpfsgt	4035,c	;volatile
  2115  001D20  D002               	goto	l1067
  2116                           
  2117                           ;user.c: 120: algorithm = LEFTWALL;
  2118  001D22  0E00               	movlw	0
  2119  001D24  D001               	goto	L5
  2120  001D26                     l1067:
  2121                           
  2122                           ;user.c: 121: else
  2123                           ;user.c: 122: algorithm = RIGHTWALL;
  2124  001D26  0E01               	movlw	1
  2125  001D28                     L5:
  2126  001D28  6E35               	movwf	_algorithm,c
  2127  001D2A  D000               	goto	l301
  2128  001D2C                     l301:
  2129  001D2C  0012               	return		;funcret
  2130  001D2E                     __end_of_AlgorithmSelection:
  2131                           	opt stack 0
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           prodh	equ	0xFF4
  2137                           prodl	equ	0xFF3
  2138                           intcon	equ	0xFF2
  2139                           intcon2	equ	0xFF1
  2140                           postinc0	equ	0xFEE
  2141                           wreg	equ	0xFE8
  2142                           postinc2	equ	0xFDE
  2143                           postdec2	equ	0xFDD
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _ConfigureOscillator *****************
  2149 ;; Defined at:
  2150 ;;		line 24 in file "system.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;		None
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;		None               void
  2157 ;; Registers used:
  2158 ;;		wreg, status,2
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;Total ram usage:        0 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    4
  2171 ;; This function calls:
  2172 ;;		Nothing
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text11
  2179  001D5A                     __ptext11:
  2180                           	opt stack 0
  2181  001D5A                     _ConfigureOscillator:
  2182                           	opt stack 26
  2183                           
  2184                           ;system.c: 29: OSCCON = 0b01111100;
  2185                           
  2186                           ;incstack = 0
  2187  001D5A  0E7C               	movlw	124
  2188  001D5C  6ED3               	movwf	4051,c	;volatile
  2189                           
  2190                           ;system.c: 31: OSCTUNE = 0b01001111;
  2191  001D5E  0E4F               	movlw	79
  2192  001D60  6E9B               	movwf	3995,c	;volatile
  2193  001D62  0012               	return		;funcret
  2194  001D64                     __end_of_ConfigureOscillator:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           intcon2	equ	0xFF1
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           postinc2	equ	0xFDE
  2207                           postdec2	equ	0xFDD
  2208                           fsr2h	equ	0xFDA
  2209                           fsr2l	equ	0xFD9
  2210                           status	equ	0xFD8
  2211                           
  2212 ;; *************** function _low_isr *****************
  2213 ;; Defined at:
  2214 ;;		line 294 in file "interrupts.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;		None               void
  2221 ;; Registers used:
  2222 ;;		None
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;Total ram usage:       17 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    3
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		Interrupt level 1
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	intcodelo
  2243  000018                     __pintcodelo:
  2244                           	opt stack 0
  2245  000018                     _low_isr:
  2246                           	opt stack 24
  2247                           
  2248                           ;incstack = 0
  2249  000018  CFD8 F039          	movff	status,??_low_isr
  2250  00001C  CFE8 F03A          	movff	wreg,??_low_isr+1
  2251  000020  CFE0 F03B          	movff	bsr,??_low_isr+2
  2252  000024  CFFA F03C          	movff	pclath,??_low_isr+3
  2253  000028  CFFB F03D          	movff	pclatu,??_low_isr+4
  2254  00002C  CFE9 F03E          	movff	fsr0l,??_low_isr+5
  2255  000030  CFEA F03F          	movff	fsr0h,??_low_isr+6
  2256  000034  CFE1 F040          	movff	fsr1l,??_low_isr+7
  2257  000038  CFE2 F041          	movff	fsr1h,??_low_isr+8
  2258  00003C  CFD9 F042          	movff	fsr2l,??_low_isr+9
  2259  000040  CFDA F043          	movff	fsr2h,??_low_isr+10
  2260  000044  CFF3 F044          	movff	prodl,??_low_isr+11
  2261  000048  CFF4 F045          	movff	prodh,??_low_isr+12
  2262  00004C  CFF6 F046          	movff	tblptrl,??_low_isr+13
  2263  000050  CFF7 F047          	movff	tblptrh,??_low_isr+14
  2264  000054  CFF8 F048          	movff	tblptru,??_low_isr+15
  2265  000058  CFF5 F049          	movff	tablat,??_low_isr+16
  2266  00005C  C049  FFF5         	movff	??_low_isr+16,tablat
  2267  000060  C048  FFF8         	movff	??_low_isr+15,tblptru
  2268  000064  C047  FFF7         	movff	??_low_isr+14,tblptrh
  2269  000068  C046  FFF6         	movff	??_low_isr+13,tblptrl
  2270  00006C  C045  FFF4         	movff	??_low_isr+12,prodh
  2271  000070  C044  FFF3         	movff	??_low_isr+11,prodl
  2272  000074  C043  FFDA         	movff	??_low_isr+10,fsr2h
  2273  000078  C042  FFD9         	movff	??_low_isr+9,fsr2l
  2274  00007C  C041  FFE2         	movff	??_low_isr+8,fsr1h
  2275  000080  C040  FFE1         	movff	??_low_isr+7,fsr1l
  2276  000084  C03F  FFEA         	movff	??_low_isr+6,fsr0h
  2277  000088  C03E  FFE9         	movff	??_low_isr+5,fsr0l
  2278  00008C  C03D  FFFB         	movff	??_low_isr+4,pclatu
  2279  000090  C03C  FFFA         	movff	??_low_isr+3,pclath
  2280  000094  C03B  FFE0         	movff	??_low_isr+2,bsr
  2281  000098  C03A  FFE8         	movff	??_low_isr+1,wreg
  2282  00009C  C039  FFD8         	movff	??_low_isr,status
  2283  0000A0  0010               	retfie	
  2284  0000A2                     __end_of_low_isr:
  2285                           	opt stack 0
  2286                           pclatu	equ	0xFFB
  2287                           pclath	equ	0xFFA
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           intcon	equ	0xFF2
  2295                           intcon2	equ	0xFF1
  2296                           postinc0	equ	0xFEE
  2297                           fsr0h	equ	0xFEA
  2298                           fsr0l	equ	0xFE9
  2299                           wreg	equ	0xFE8
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           bsr	equ	0xFE0
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _high_isr *****************
  2310 ;; Defined at:
  2311 ;;		line 106 in file "interrupts.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;		None               void
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;Total ram usage:       14 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    2
  2332 ;; This function calls:
  2333 ;;		_KController
  2334 ;;		_Reversing
  2335 ;;		_forward
  2336 ;;		_merge
  2337 ;;		_motorCounterUpdate
  2338 ;;		_moveMouse
  2339 ;;		_rotate
  2340 ;; This function is called by:
  2341 ;;		Interrupt level 2
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	intcode
  2346  000008                     __pintcode:
  2347                           	opt stack 0
  2348  000008                     _high_isr:
  2349                           	opt stack 24
  2350                           
  2351                           ;incstack = 0
  2352  000008  CFFA F04D          	movff	pclath,??_high_isr
  2353  00000C  CFFB F04E          	movff	pclatu,??_high_isr+1
  2354  000010  CFE9 F04F          	movff	fsr0l,??_high_isr+2
  2355  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2356                           pclatu	equ	0xFFB
  2357                           pclath	equ	0xFFA
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           intcon2	equ	0xFF1
  2366                           postinc0	equ	0xFEE
  2367                           fsr0h	equ	0xFEA
  2368                           fsr0l	equ	0xFE9
  2369                           wreg	equ	0xFE8
  2370                           fsr1h	equ	0xFE2
  2371                           fsr1l	equ	0xFE1
  2372                           bsr	equ	0xFE0
  2373                           postinc2	equ	0xFDE
  2374                           postdec2	equ	0xFDD
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379                           	psect	intcode_body
  2380  001006                     __pintcode_body:
  2381                           	opt stack 24
  2382  001006                     int_func:
  2383                           	opt stack 24
  2384  001006  0006               	pop		; remove dummy address from shadow register refresh
  2385  001008  CFEA F050          	movff	fsr0h,??_high_isr+3
  2386  00100C  CFE1 F051          	movff	fsr1l,??_high_isr+4
  2387  001010  CFE2 F052          	movff	fsr1h,??_high_isr+5
  2388  001014  CFD9 F053          	movff	fsr2l,??_high_isr+6
  2389  001018  CFDA F054          	movff	fsr2h,??_high_isr+7
  2390  00101C  CFF3 F055          	movff	prodl,??_high_isr+8
  2391  001020  CFF4 F056          	movff	prodh,??_high_isr+9
  2392  001024  CFF6 F057          	movff	tblptrl,??_high_isr+10
  2393  001028  CFF7 F058          	movff	tblptrh,??_high_isr+11
  2394  00102C  CFF8 F059          	movff	tblptru,??_high_isr+12
  2395  001030  CFF5 F05A          	movff	tablat,??_high_isr+13
  2396                           
  2397                           ;interrupts.c: 125: if(INTCONbits.TMR0IF == 1)
  2398  001034  A4F2               	btfss	intcon,2,c	;volatile
  2399  001036  D1EC               	goto	i2l131
  2400                           
  2401                           ;interrupts.c: 126: {
  2402                           ;interrupts.c: 127: if(MotorDelayCounter > 2)
  2403  001038  BE14               	btfsc	_MotorDelayCounter+1,7,c
  2404  00103A  D1E6               	goto	i2l1803
  2405  00103C  5014               	movf	_MotorDelayCounter+1,w,c
  2406  00103E  E104               	bnz	i2u119_40
  2407  001040  0E03               	movlw	3
  2408  001042  5C13               	subwf	_MotorDelayCounter,w,c
  2409  001044  A0D8               	btfss	status,0,c
  2410  001046  D1E0               	goto	i2l1803
  2411  001048                     i2u119_40:
  2412                           
  2413                           ;interrupts.c: 128: {
  2414                           ;interrupts.c: 132: if(controlToLeft > 0 || controlToRight > 0 || ForwardCounter > 0)
  2415  001048  BE26               	btfsc	_controlToLeft+1,7,c
  2416  00104A  D005               	goto	i2l1651
  2417  00104C  5026               	movf	_controlToLeft+1,w,c
  2418  00104E  E113               	bnz	i2l1655
  2419  001050  0425               	decf	_controlToLeft,w,c
  2420  001052  B0D8               	btfsc	status,0,c
  2421  001054  D010               	goto	i2l1655
  2422  001056                     i2l1651:
  2423  001056  BE28               	btfsc	_controlToRight+1,7,c
  2424  001058  D005               	goto	i2l1653
  2425  00105A  5028               	movf	_controlToRight+1,w,c
  2426  00105C  E10C               	bnz	i2l1655
  2427  00105E  0427               	decf	_controlToRight,w,c
  2428  001060  B0D8               	btfsc	status,0,c
  2429  001062  D009               	goto	i2l1655
  2430  001064                     i2l1653:
  2431  001064  BE0E               	btfsc	_ForwardCounter+1,7,c
  2432  001066  D02C               	goto	i2l1671
  2433  001068  500E               	movf	_ForwardCounter+1,w,c
  2434  00106A  E105               	bnz	i2l1655
  2435  00106C  040D               	decf	_ForwardCounter,w,c
  2436  00106E  B0D8               	btfsc	status,0,c
  2437  001070  D002               	goto	i2l1655
  2438  001072  D026               	goto	i2l1671
  2439  001074  D000               	goto	i2l1655
  2440  001076                     i2l1655:
  2441                           
  2442                           ;interrupts.c: 133: {
  2443                           ;interrupts.c: 134: KController();
  2444  001076  EC6E  F00D         	call	_KController	;wreg free
  2445                           
  2446                           ;interrupts.c: 136: if(controlToLeft > 0 )
  2447  00107A  BE26               	btfsc	_controlToLeft+1,7,c
  2448  00107C  D00E               	goto	i2l1663
  2449  00107E  5026               	movf	_controlToLeft+1,w,c
  2450  001080  E103               	bnz	i2u123_40
  2451  001082  0425               	decf	_controlToLeft,w,c
  2452  001084  A0D8               	btfss	status,0,c
  2453  001086  D009               	goto	i2l1663
  2454  001088                     i2u123_40:
  2455                           
  2456                           ;interrupts.c: 137: {
  2457                           ;interrupts.c: 138: motorCounterUpdate(RIGHT,0);
  2458  001088  0E00               	movlw	0
  2459  00108A  6E4A               	movwf	motorCounterUpdate@reverse,c
  2460  00108C  0E01               	movlw	1
  2461  00108E  EC17  F00C         	call	_motorCounterUpdate
  2462                           
  2463                           ;interrupts.c: 139: controlToLeft--;
  2464  001092  0625               	decf	_controlToLeft,f,c
  2465  001094  A0D8               	btfss	status,0,c
  2466  001096  0626               	decf	_controlToLeft+1,f,c
  2467                           
  2468                           ;interrupts.c: 140: } else if(controlToRight > 0){
  2469  001098  D1AB               	goto	i2l92
  2470  00109A                     i2l1663:
  2471  00109A  BE28               	btfsc	_controlToRight+1,7,c
  2472  00109C  D00E               	goto	i2l1669
  2473  00109E  5028               	movf	_controlToRight+1,w,c
  2474  0010A0  E103               	bnz	i2u124_40
  2475  0010A2  0427               	decf	_controlToRight,w,c
  2476  0010A4  A0D8               	btfss	status,0,c
  2477  0010A6  D009               	goto	i2l1669
  2478  0010A8                     i2u124_40:
  2479                           
  2480                           ;interrupts.c: 141: motorCounterUpdate(LEFT,0);
  2481  0010A8  0E00               	movlw	0
  2482  0010AA  6E4A               	movwf	motorCounterUpdate@reverse,c
  2483  0010AC  0E00               	movlw	0
  2484  0010AE  EC17  F00C         	call	_motorCounterUpdate
  2485                           
  2486                           ;interrupts.c: 142: controlToRight--;
  2487  0010B2  0627               	decf	_controlToRight,f,c
  2488  0010B4  A0D8               	btfss	status,0,c
  2489  0010B6  0628               	decf	_controlToRight+1,f,c
  2490                           
  2491                           ;interrupts.c: 143: } else {
  2492  0010B8  D19B               	goto	i2l92
  2493  0010BA                     i2l1669:
  2494                           
  2495                           ;interrupts.c: 144: forward();
  2496  0010BA  EC73  F00E         	call	_forward	;wreg free
  2497                           
  2498                           ;interrupts.c: 145: }
  2499                           ;interrupts.c: 146: }
  2500  0010BE  D198               	goto	i2l92
  2501  0010C0                     i2l1671:
  2502                           
  2503                           ;interrupts.c: 148: else if (ReverseCounter > 0) {
  2504  0010C0  BE18               	btfsc	_ReverseCounter+1,7,c
  2505  0010C2  D008               	goto	i2l1675
  2506  0010C4  5018               	movf	_ReverseCounter+1,w,c
  2507  0010C6  E103               	bnz	i2u125_40
  2508  0010C8  0417               	decf	_ReverseCounter,w,c
  2509  0010CA  A0D8               	btfss	status,0,c
  2510  0010CC  D003               	goto	i2l1675
  2511  0010CE                     i2u125_40:
  2512                           
  2513                           ;interrupts.c: 149: Reversing();
  2514  0010CE  EC97  F00E         	call	_Reversing	;wreg free
  2515                           
  2516                           ;interrupts.c: 150: }
  2517  0010D2  D18E               	goto	i2l92
  2518  0010D4                     i2l1675:
  2519                           
  2520                           ;interrupts.c: 152: else if(RotateCounter > 0) {
  2521  0010D4  BE1A               	btfsc	_RotateCounter+1,7,c
  2522  0010D6  D031               	goto	i2l1691
  2523  0010D8  501A               	movf	_RotateCounter+1,w,c
  2524  0010DA  E103               	bnz	i2u126_40
  2525  0010DC  0419               	decf	_RotateCounter,w,c
  2526  0010DE  A0D8               	btfss	status,0,c
  2527  0010E0  D02C               	goto	i2l1691
  2528  0010E2                     i2u126_40:
  2529                           
  2530                           ;interrupts.c: 158: if(sensorValue[2] < 100 && sensorValue[3] < 100 && deadEnd == 1)
  2531  0010E2  BE06               	btfsc	_sensorValue+5,7,c
  2532  0010E4  D006               	goto	i2l1679
  2533  0010E6  5006               	movf	_sensorValue+5,w,c
  2534  0010E8  E114               	bnz	i2l1685
  2535  0010EA  0E64               	movlw	100
  2536  0010EC  5C05               	subwf	_sensorValue+4,w,c
  2537  0010EE  B0D8               	btfsc	status,0,c
  2538  0010F0  D010               	goto	i2l1685
  2539  0010F2                     i2l1679:
  2540  0010F2  BE08               	btfsc	_sensorValue+7,7,c
  2541  0010F4  D006               	goto	i2l1681
  2542  0010F6  5008               	movf	_sensorValue+7,w,c
  2543  0010F8  E10C               	bnz	i2l1685
  2544  0010FA  0E64               	movlw	100
  2545  0010FC  5C07               	subwf	_sensorValue+6,w,c
  2546  0010FE  B0D8               	btfsc	status,0,c
  2547  001100  D008               	goto	i2l1685
  2548  001102                     i2l1681:
  2549  001102  0436               	decf	_deadEnd,w,c
  2550  001104  A4D8               	btfss	status,2,c
  2551  001106  D005               	goto	i2l1685
  2552                           
  2553                           ;interrupts.c: 159: RotateCounter = 3;
  2554  001108  0E00               	movlw	0
  2555  00110A  6E1A               	movwf	_RotateCounter+1,c
  2556  00110C  0E03               	movlw	3
  2557  00110E  6E19               	movwf	_RotateCounter,c
  2558  001110  D000               	goto	i2l1685
  2559  001112                     i2l1685:
  2560                           
  2561                           ;interrupts.c: 160: rotate(rotatingSide);
  2562  001112  5038               	movf	_rotatingSide,w,c
  2563  001114  ECB9  F00D         	call	_rotate
  2564                           
  2565                           ;interrupts.c: 161: if(RotateCounter == 0)
  2566  001118  5019               	movf	_RotateCounter,w,c
  2567  00111A  101A               	iorwf	_RotateCounter+1,w,c
  2568  00111C  A4D8               	btfss	status,2,c
  2569  00111E  D004               	goto	i2l97
  2570                           
  2571                           ;interrupts.c: 162: ForwardCounter = 50;
  2572  001120  0E00               	movlw	0
  2573  001122  6E0E               	movwf	_ForwardCounter+1,c
  2574  001124  0E32               	movlw	50
  2575  001126  6E0D               	movwf	_ForwardCounter,c
  2576  001128                     i2l97:
  2577                           
  2578                           ;interrupts.c: 163: TurnRight = 0;
  2579  001128  0E00               	movlw	0
  2580  00112A  6E20               	movwf	_TurnRight+1,c
  2581  00112C  0E00               	movlw	0
  2582  00112E  6E1F               	movwf	_TurnRight,c
  2583                           
  2584                           ;interrupts.c: 164: TurnLeft = 0;
  2585  001130  0E00               	movlw	0
  2586  001132  6E1C               	movwf	_TurnLeft+1,c
  2587  001134  0E00               	movlw	0
  2588  001136  6E1B               	movwf	_TurnLeft,c
  2589                           
  2590                           ;interrupts.c: 166: }
  2591  001138  D15B               	goto	i2l92
  2592  00113A                     i2l1691:
  2593                           
  2594                           ;interrupts.c: 167: else if (TurnLeft == 1 && sensorValue[0] < 100) {
  2595  00113A  041B               	decf	_TurnLeft,w,c
  2596  00113C  101C               	iorwf	_TurnLeft+1,w,c
  2597  00113E  A4D8               	btfss	status,2,c
  2598  001140  D015               	goto	i2l1697
  2599  001142  BE02               	btfsc	_sensorValue+1,7,c
  2600  001144  D006               	goto	i2l1695
  2601  001146  5002               	movf	_sensorValue+1,w,c
  2602  001148  E111               	bnz	i2l1697
  2603  00114A  0E64               	movlw	100
  2604  00114C  5C01               	subwf	_sensorValue,w,c
  2605  00114E  B0D8               	btfsc	status,0,c
  2606  001150  D00D               	goto	i2l1697
  2607  001152                     i2l1695:
  2608                           
  2609                           ;interrupts.c: 168: RotateCounter = 170;
  2610  001152  0E00               	movlw	0
  2611  001154  6E1A               	movwf	_RotateCounter+1,c
  2612  001156  0EAA               	movlw	170
  2613  001158  6E19               	movwf	_RotateCounter,c
  2614                           
  2615                           ;interrupts.c: 169: rotatingSide = LEFT;
  2616  00115A  0E00               	movlw	0
  2617  00115C  6E38               	movwf	_rotatingSide,c
  2618                           
  2619                           ;interrupts.c: 170: justTurned = 1;
  2620  00115E  0E01               	movlw	1
  2621  001160  6E37               	movwf	_justTurned,c
  2622                           
  2623                           ;interrupts.c: 171: TurnLeft = 0;
  2624  001162  0E00               	movlw	0
  2625  001164  6E1C               	movwf	_TurnLeft+1,c
  2626  001166  0E00               	movlw	0
  2627  001168  6E1B               	movwf	_TurnLeft,c
  2628  00116A  D078               	goto	L6
  2629  00116C                     i2l1697:
  2630                           
  2631                           ;interrupts.c: 175: else if (TurnLeftAgain == 1 && sensorValue[0] < 100 && (TurnRight ==
      +                           0 || TurnRight != 0) ) {
  2632  00116C  041D               	decf	_TurnLeftAgain,w,c
  2633  00116E  101E               	iorwf	_TurnLeftAgain+1,w,c
  2634  001170  A4D8               	btfss	status,2,c
  2635  001172  D010               	goto	i2l1707
  2636  001174  BE02               	btfsc	_sensorValue+1,7,c
  2637  001176  D006               	goto	i2l1701
  2638  001178  5002               	movf	_sensorValue+1,w,c
  2639  00117A  E10C               	bnz	i2l1707
  2640  00117C  0E64               	movlw	100
  2641  00117E  5C01               	subwf	_sensorValue,w,c
  2642  001180  B0D8               	btfsc	status,0,c
  2643  001182  D008               	goto	i2l1707
  2644  001184                     i2l1701:
  2645  001184  501F               	movf	_TurnRight,w,c
  2646  001186  1020               	iorwf	_TurnRight+1,w,c
  2647  001188  B4D8               	btfsc	status,2,c
  2648  00118A  D010               	goto	i2l1711
  2649  00118C  501F               	movf	_TurnRight,w,c
  2650  00118E  1020               	iorwf	_TurnRight+1,w,c
  2651  001190  A4D8               	btfss	status,2,c
  2652  001192  D00C               	goto	i2l1711
  2653  001194                     i2l1707:
  2654                           
  2655                           ;interrupts.c: 183: else if (sensorValue[0] < 100 && TurnRight == 1) {
  2656  001194  BE02               	btfsc	_sensorValue+1,7,c
  2657  001196  D006               	goto	i2l1709
  2658  001198  5002               	movf	_sensorValue+1,w,c
  2659  00119A  E116               	bnz	i2l1713
  2660  00119C  0E64               	movlw	100
  2661  00119E  5C01               	subwf	_sensorValue,w,c
  2662  0011A0  B0D8               	btfsc	status,0,c
  2663  0011A2  D012               	goto	i2l1713
  2664  0011A4                     i2l1709:
  2665  0011A4  041F               	decf	_TurnRight,w,c
  2666  0011A6  1020               	iorwf	_TurnRight+1,w,c
  2667  0011A8  A4D8               	btfss	status,2,c
  2668  0011AA  D00E               	goto	i2l1713
  2669  0011AC                     i2l1711:
  2670                           
  2671                           ;interrupts.c: 184: RotateCounter = 170;
  2672  0011AC  0E00               	movlw	0
  2673  0011AE  6E1A               	movwf	_RotateCounter+1,c
  2674  0011B0  0EAA               	movlw	170
  2675  0011B2  6E19               	movwf	_RotateCounter,c
  2676                           
  2677                           ;interrupts.c: 185: rotatingSide = LEFT;
  2678  0011B4  0E00               	movlw	0
  2679  0011B6  6E38               	movwf	_rotatingSide,c
  2680                           
  2681                           ;interrupts.c: 186: justTurned = 1;
  2682  0011B8  0E01               	movlw	1
  2683  0011BA  6E37               	movwf	_justTurned,c
  2684                           
  2685                           ;interrupts.c: 187: TurnLeft = 0;
  2686  0011BC  0E00               	movlw	0
  2687  0011BE  6E1C               	movwf	_TurnLeft+1,c
  2688  0011C0  0E00               	movlw	0
  2689  0011C2  6E1B               	movwf	_TurnLeft,c
  2690                           
  2691                           ;interrupts.c: 188: deadEnd = 0;
  2692  0011C4  0E00               	movlw	0
  2693  0011C6  D0D4               	goto	L7
  2694  0011C8                     i2l1713:
  2695                           
  2696                           ;interrupts.c: 191: else if (TurnRight == 1 && sensorValue[0] < 100 && TurnLeftAgain != 
      +                          1){
  2697  0011C8  041F               	decf	_TurnRight,w,c
  2698  0011CA  1020               	iorwf	_TurnRight+1,w,c
  2699  0011CC  A4D8               	btfss	status,2,c
  2700  0011CE  D01F               	goto	i2l1727
  2701  0011D0  BE02               	btfsc	_sensorValue+1,7,c
  2702  0011D2  D006               	goto	i2l1717
  2703  0011D4  5002               	movf	_sensorValue+1,w,c
  2704  0011D6  E11B               	bnz	i2l1727
  2705  0011D8  0E64               	movlw	100
  2706  0011DA  5C01               	subwf	_sensorValue,w,c
  2707  0011DC  B0D8               	btfsc	status,0,c
  2708  0011DE  D017               	goto	i2l1727
  2709  0011E0                     i2l1717:
  2710  0011E0  041D               	decf	_TurnLeftAgain,w,c
  2711  0011E2  101E               	iorwf	_TurnLeftAgain+1,w,c
  2712  0011E4  B4D8               	btfsc	status,2,c
  2713  0011E6  D013               	goto	i2l1727
  2714                           
  2715                           ;interrupts.c: 192: TurnLeftAgain = 1;
  2716  0011E8  0E00               	movlw	0
  2717  0011EA  6E1E               	movwf	_TurnLeftAgain+1,c
  2718  0011EC  0E01               	movlw	1
  2719  0011EE  6E1D               	movwf	_TurnLeftAgain,c
  2720                           
  2721                           ;interrupts.c: 193: if(justTurned == 0) {
  2722  0011F0  5037               	movf	_justTurned,w,c
  2723  0011F2  A4D8               	btfss	status,2,c
  2724  0011F4  D004               	goto	i2l1723
  2725                           
  2726                           ;interrupts.c: 194: ForwardCounter = 50 + 40;
  2727  0011F6  0E00               	movlw	0
  2728  0011F8  6E0E               	movwf	_ForwardCounter+1,c
  2729  0011FA  0E5A               	movlw	90
  2730  0011FC  D003               	goto	L8
  2731  0011FE                     i2l1723:
  2732                           
  2733                           ;interrupts.c: 196: ForwardCounter = 50;
  2734  0011FE  0E00               	movlw	0
  2735  001200  6E0E               	movwf	_ForwardCounter+1,c
  2736  001202  0E32               	movlw	50
  2737  001204                     L8:
  2738  001204  6E0D               	movwf	_ForwardCounter,c
  2739  001206  D000               	goto	i2l1725
  2740  001208                     i2l1725:
  2741                           
  2742                           ;interrupts.c: 197: }
  2743                           ;interrupts.c: 198: forward();
  2744  001208  EC73  F00E         	call	_forward	;wreg free
  2745                           
  2746                           ;interrupts.c: 199: }
  2747  00120C  D0F1               	goto	i2l92
  2748  00120E                     i2l1727:
  2749                           
  2750                           ;interrupts.c: 202: else if (TurnRight == 1
  2751                           ;interrupts.c: 203: && (sensorValue[3] > 250 && sensorValue[2] > 250) && sensorValue[0] 
      +                          > 100) {
  2752  00120E  041F               	decf	_TurnRight,w,c
  2753  001210  1020               	iorwf	_TurnRight+1,w,c
  2754  001212  B4D8               	btfsc	status,2,c
  2755  001214  BE08               	btfsc	_sensorValue+7,7,c
  2756  001216  D025               	goto	i2l1737
  2757  001218  5008               	movf	_sensorValue+7,w,c
  2758  00121A  E104               	bnz	i2u144_40
  2759  00121C  0EFB               	movlw	251
  2760  00121E  5C07               	subwf	_sensorValue+6,w,c
  2761  001220  A0D8               	btfss	status,0,c
  2762  001222  D01F               	goto	i2l1737
  2763  001224                     i2u144_40:
  2764  001224  BE06               	btfsc	_sensorValue+5,7,c
  2765  001226  D01D               	goto	i2l1737
  2766  001228  5006               	movf	_sensorValue+5,w,c
  2767  00122A  E104               	bnz	i2u145_40
  2768  00122C  0EFB               	movlw	251
  2769  00122E  5C05               	subwf	_sensorValue+4,w,c
  2770  001230  A0D8               	btfss	status,0,c
  2771  001232  D017               	goto	i2l1737
  2772  001234                     i2u145_40:
  2773  001234  BE02               	btfsc	_sensorValue+1,7,c
  2774  001236  D015               	goto	i2l1737
  2775  001238  5002               	movf	_sensorValue+1,w,c
  2776  00123A  E104               	bnz	i2u146_40
  2777  00123C  0E65               	movlw	101
  2778  00123E  5C01               	subwf	_sensorValue,w,c
  2779  001240  A0D8               	btfss	status,0,c
  2780  001242  D00F               	goto	i2l1737
  2781  001244                     i2u146_40:
  2782                           
  2783                           ;interrupts.c: 204: RotateCounter = 170;
  2784  001244  0E00               	movlw	0
  2785  001246  6E1A               	movwf	_RotateCounter+1,c
  2786  001248  0EAA               	movlw	170
  2787  00124A  6E19               	movwf	_RotateCounter,c
  2788                           
  2789                           ;interrupts.c: 205: rotatingSide = RIGHT;
  2790  00124C  0E01               	movlw	1
  2791  00124E  6E38               	movwf	_rotatingSide,c
  2792                           
  2793                           ;interrupts.c: 206: justTurned = 1;
  2794  001250  0E01               	movlw	1
  2795  001252  6E37               	movwf	_justTurned,c
  2796                           
  2797                           ;interrupts.c: 207: TurnRight = 0;
  2798  001254  0E00               	movlw	0
  2799  001256  6E20               	movwf	_TurnRight+1,c
  2800  001258  0E00               	movlw	0
  2801  00125A  6E1F               	movwf	_TurnRight,c
  2802  00125C                     L6:
  2803                           
  2804                           ;interrupts.c: 208: deadEnd = 0;
  2805  00125C  0E00               	movlw	0
  2806  00125E  6E36               	movwf	_deadEnd,c
  2807                           
  2808                           ;interrupts.c: 209: }
  2809  001260  D0C7               	goto	i2l92
  2810  001262                     i2l1737:
  2811                           
  2812                           ;interrupts.c: 231: else if (sensorValue[0] < 100 && TurnRight != 1) {
  2813  001262  BE02               	btfsc	_sensorValue+1,7,c
  2814  001264  D006               	goto	i2l1739
  2815  001266  5002               	movf	_sensorValue+1,w,c
  2816  001268  E11B               	bnz	i2l1749
  2817  00126A  0E64               	movlw	100
  2818  00126C  5C01               	subwf	_sensorValue,w,c
  2819  00126E  B0D8               	btfsc	status,0,c
  2820  001270  D017               	goto	i2l1749
  2821  001272                     i2l1739:
  2822  001272  041F               	decf	_TurnRight,w,c
  2823  001274  1020               	iorwf	_TurnRight+1,w,c
  2824  001276  B4D8               	btfsc	status,2,c
  2825  001278  D013               	goto	i2l1749
  2826                           
  2827                           ;interrupts.c: 232: TurnLeft = 1;
  2828  00127A  0E00               	movlw	0
  2829  00127C  6E1C               	movwf	_TurnLeft+1,c
  2830  00127E  0E01               	movlw	1
  2831  001280  6E1B               	movwf	_TurnLeft,c
  2832                           
  2833                           ;interrupts.c: 233: if(justTurned == 0) {
  2834  001282  5037               	movf	_justTurned,w,c
  2835  001284  A4D8               	btfss	status,2,c
  2836  001286  D004               	goto	i2l1745
  2837                           
  2838                           ;interrupts.c: 234: ForwardCounter = 320;
  2839  001288  0E01               	movlw	1
  2840  00128A  6E0E               	movwf	_ForwardCounter+1,c
  2841  00128C  0E40               	movlw	64
  2842  00128E  D003               	goto	L9
  2843  001290                     i2l1745:
  2844                           
  2845                           ;interrupts.c: 236: ForwardCounter = 50;
  2846  001290  0E00               	movlw	0
  2847  001292  6E0E               	movwf	_ForwardCounter+1,c
  2848  001294  0E32               	movlw	50
  2849  001296                     L9:
  2850  001296  6E0D               	movwf	_ForwardCounter,c
  2851  001298  D000               	goto	i2l1747
  2852  00129A                     i2l1747:
  2853                           
  2854                           ;interrupts.c: 237: }
  2855                           ;interrupts.c: 238: forward();
  2856  00129A  EC73  F00E         	call	_forward	;wreg free
  2857                           
  2858                           ;interrupts.c: 239: }
  2859  00129E  D0A8               	goto	i2l92
  2860  0012A0                     i2l1749:
  2861                           
  2862                           ;interrupts.c: 241: else if (sensorValue[1] < 100 && sensorValue[0] > 100 && TurnRight =
      +                          = 0) {
  2863  0012A0  BE04               	btfsc	_sensorValue+3,7,c
  2864  0012A2  D006               	goto	i2l1751
  2865  0012A4  5004               	movf	_sensorValue+3,w,c
  2866  0012A6  E134               	bnz	i2l1767
  2867  0012A8  0E64               	movlw	100
  2868  0012AA  5C03               	subwf	_sensorValue+2,w,c
  2869  0012AC  B0D8               	btfsc	status,0,c
  2870  0012AE  D030               	goto	i2l1767
  2871  0012B0                     i2l1751:
  2872  0012B0  BE02               	btfsc	_sensorValue+1,7,c
  2873  0012B2  D02E               	goto	i2l1767
  2874  0012B4  5002               	movf	_sensorValue+1,w,c
  2875  0012B6  E104               	bnz	i2u151_40
  2876  0012B8  0E65               	movlw	101
  2877  0012BA  5C01               	subwf	_sensorValue,w,c
  2878  0012BC  A0D8               	btfss	status,0,c
  2879  0012BE  D028               	goto	i2l1767
  2880  0012C0                     i2u151_40:
  2881  0012C0  501F               	movf	_TurnRight,w,c
  2882  0012C2  1020               	iorwf	_TurnRight+1,w,c
  2883  0012C4  A4D8               	btfss	status,2,c
  2884  0012C6  D024               	goto	i2l1767
  2885                           
  2886                           ;interrupts.c: 242: TurnRight = 1;;
  2887  0012C8  0E00               	movlw	0
  2888  0012CA  6E20               	movwf	_TurnRight+1,c
  2889  0012CC  0E01               	movlw	1
  2890  0012CE  6E1F               	movwf	_TurnRight,c
  2891                           
  2892                           ;interrupts.c: 243: if(justTurned == 0 && Forwarded != 1) {
  2893  0012D0  5037               	movf	_justTurned,w,c
  2894  0012D2  A4D8               	btfss	status,2,c
  2895  0012D4  D00D               	goto	i2l1761
  2896  0012D6  040F               	decf	_Forwarded,w,c
  2897  0012D8  1010               	iorwf	_Forwarded+1,w,c
  2898  0012DA  B4D8               	btfsc	status,2,c
  2899  0012DC  D009               	goto	i2l1761
  2900                           
  2901                           ;interrupts.c: 244: ForwardCounter = 320;
  2902  0012DE  0E01               	movlw	1
  2903  0012E0  6E0E               	movwf	_ForwardCounter+1,c
  2904  0012E2  0E40               	movlw	64
  2905  0012E4  6E0D               	movwf	_ForwardCounter,c
  2906                           
  2907                           ;interrupts.c: 245: Forwarded = 1;
  2908  0012E6  0E00               	movlw	0
  2909  0012E8  6E10               	movwf	_Forwarded+1,c
  2910  0012EA  0E01               	movlw	1
  2911  0012EC  6E0F               	movwf	_Forwarded,c
  2912                           
  2913                           ;interrupts.c: 246: } else if (Forwarded = 1){
  2914  0012EE  D00D               	goto	i2l1765
  2915  0012F0                     i2l1761:
  2916  0012F0  0E00               	movlw	0
  2917  0012F2  6E10               	movwf	_Forwarded+1,c
  2918  0012F4  0E01               	movlw	1
  2919  0012F6  6E0F               	movwf	_Forwarded,c
  2920                           
  2921                           ;interrupts.c: 247: ForwardCounter = 320 + 90;
  2922  0012F8  0E01               	movlw	1
  2923  0012FA  6E0E               	movwf	_ForwardCounter+1,c
  2924  0012FC  0E9A               	movlw	154
  2925  0012FE  D003               	goto	L10
  2926                           
  2927                           ;interrupts.c: 249: else {
  2928                           ;interrupts.c: 250: ForwardCounter = 50;
  2929                           
  2930                           ;interrupts.c: 248: }
  2931  001300  0E00               	movlw	0
  2932  001302  6E0E               	movwf	_ForwardCounter+1,c
  2933  001304  0E32               	movlw	50
  2934  001306                     L10:
  2935  001306  6E0D               	movwf	_ForwardCounter,c
  2936  001308  D000               	goto	i2l1765
  2937  00130A                     i2l1765:
  2938                           
  2939                           ;interrupts.c: 251: }
  2940                           ;interrupts.c: 252: forward();
  2941  00130A  EC73  F00E         	call	_forward	;wreg free
  2942                           
  2943                           ;interrupts.c: 253: }
  2944  00130E  D070               	goto	i2l92
  2945  001310                     i2l1767:
  2946                           
  2947                           ;interrupts.c: 255: else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2948                           ;interrupts.c: 256: && (sensorValue[3] > 450 || sensorValue[2] > 450) && RotateCounter <
      +                          = 0)
  2949  001310  BE02               	btfsc	_sensorValue+1,7,c
  2950  001312  D030               	goto	i2l1779
  2951  001314  5002               	movf	_sensorValue+1,w,c
  2952  001316  E104               	bnz	i2u155_40
  2953  001318  0E65               	movlw	101
  2954  00131A  5C01               	subwf	_sensorValue,w,c
  2955  00131C  A0D8               	btfss	status,0,c
  2956  00131E  D02A               	goto	i2l1779
  2957  001320                     i2u155_40:
  2958  001320  BE04               	btfsc	_sensorValue+3,7,c
  2959  001322  D028               	goto	i2l1779
  2960  001324  5004               	movf	_sensorValue+3,w,c
  2961  001326  E104               	bnz	i2u156_40
  2962  001328  0E65               	movlw	101
  2963  00132A  5C03               	subwf	_sensorValue+2,w,c
  2964  00132C  A0D8               	btfss	status,0,c
  2965  00132E  D022               	goto	i2l1779
  2966  001330                     i2u156_40:
  2967  001330  BE08               	btfsc	_sensorValue+7,7,c
  2968  001332  D006               	goto	i2l1773
  2969  001334  0EC3               	movlw	195
  2970  001336  5C07               	subwf	_sensorValue+6,w,c
  2971  001338  0E01               	movlw	1
  2972  00133A  5808               	subwfb	_sensorValue+7,w,c
  2973  00133C  B0D8               	btfsc	status,0,c
  2974  00133E  D008               	goto	i2l1775
  2975  001340                     i2l1773:
  2976  001340  BE06               	btfsc	_sensorValue+5,7,c
  2977  001342  D018               	goto	i2l1779
  2978  001344  0EC3               	movlw	195
  2979  001346  5C05               	subwf	_sensorValue+4,w,c
  2980  001348  0E01               	movlw	1
  2981  00134A  5806               	subwfb	_sensorValue+5,w,c
  2982  00134C  A0D8               	btfss	status,0,c
  2983  00134E  D012               	goto	i2l1779
  2984  001350                     i2l1775:
  2985  001350  BE1A               	btfsc	_RotateCounter+1,7,c
  2986  001352  D005               	goto	i2l1777
  2987  001354  501A               	movf	_RotateCounter+1,w,c
  2988  001356  E10E               	bnz	i2l1779
  2989  001358  0419               	decf	_RotateCounter,w,c
  2990  00135A  B0D8               	btfsc	status,0,c
  2991  00135C  D00B               	goto	i2l1779
  2992  00135E                     i2l1777:
  2993                           
  2994                           ;interrupts.c: 257: {
  2995                           ;interrupts.c: 258: RotateCounter = 170*2;
  2996  00135E  0E01               	movlw	1
  2997  001360  6E1A               	movwf	_RotateCounter+1,c
  2998  001362  0E54               	movlw	84
  2999  001364  6E19               	movwf	_RotateCounter,c
  3000                           
  3001                           ;interrupts.c: 259: rotatingSide = LEFT;
  3002  001366  0E00               	movlw	0
  3003  001368  6E38               	movwf	_rotatingSide,c
  3004                           
  3005                           ;interrupts.c: 260: justTurned = 1;
  3006  00136A  0E01               	movlw	1
  3007  00136C  6E37               	movwf	_justTurned,c
  3008                           
  3009                           ;interrupts.c: 261: deadEnd = 1;
  3010  00136E  0E01               	movlw	1
  3011  001370                     L7:
  3012  001370  6E36               	movwf	_deadEnd,c
  3013  001372  D039               	goto	i2l1799
  3014  001374                     i2l1779:
  3015                           
  3016                           ;interrupts.c: 265: else if ((sensorValue[0] > 400 || sensorValue[1] > 400)
  3017                           ;interrupts.c: 266: && (sensorValue[3] < 200 && sensorValue[2] < 200))
  3018  001374  BE02               	btfsc	_sensorValue+1,7,c
  3019  001376  D006               	goto	i2l1781
  3020  001378  0E91               	movlw	145
  3021  00137A  5C01               	subwf	_sensorValue,w,c
  3022  00137C  0E01               	movlw	1
  3023  00137E  5802               	subwfb	_sensorValue+1,w,c
  3024  001380  B0D8               	btfsc	status,0,c
  3025  001382  D008               	goto	i2l1783
  3026  001384                     i2l1781:
  3027  001384  BE04               	btfsc	_sensorValue+3,7,c
  3028  001386  D01B               	goto	i2l1791
  3029  001388  0E91               	movlw	145
  3030  00138A  5C03               	subwf	_sensorValue+2,w,c
  3031  00138C  0E01               	movlw	1
  3032  00138E  5804               	subwfb	_sensorValue+3,w,c
  3033  001390  A0D8               	btfss	status,0,c
  3034  001392  D015               	goto	i2l1791
  3035  001394                     i2l1783:
  3036  001394  BE08               	btfsc	_sensorValue+7,7,c
  3037  001396  D006               	goto	i2l1785
  3038  001398  5008               	movf	_sensorValue+7,w,c
  3039  00139A  E111               	bnz	i2l1791
  3040  00139C  0EC8               	movlw	200
  3041  00139E  5C07               	subwf	_sensorValue+6,w,c
  3042  0013A0  B0D8               	btfsc	status,0,c
  3043  0013A2  D00D               	goto	i2l1791
  3044  0013A4                     i2l1785:
  3045  0013A4  BE06               	btfsc	_sensorValue+5,7,c
  3046  0013A6  D006               	goto	i2l1787
  3047  0013A8  5006               	movf	_sensorValue+5,w,c
  3048  0013AA  E109               	bnz	i2l1791
  3049  0013AC  0EC8               	movlw	200
  3050  0013AE  5C05               	subwf	_sensorValue+4,w,c
  3051  0013B0  B0D8               	btfsc	status,0,c
  3052  0013B2  D005               	goto	i2l1791
  3053  0013B4                     i2l1787:
  3054                           
  3055                           ;interrupts.c: 267: {
  3056                           ;interrupts.c: 269: KController();
  3057  0013B4  EC6E  F00D         	call	_KController	;wreg free
  3058                           
  3059                           ;interrupts.c: 270: justTurned = 0;
  3060  0013B8  0E00               	movlw	0
  3061  0013BA  6E37               	movwf	_justTurned,c
  3062                           
  3063                           ;interrupts.c: 272: }
  3064  0013BC  D019               	goto	i2l92
  3065  0013BE                     i2l1791:
  3066                           
  3067                           ;interrupts.c: 273: else {
  3068                           ;interrupts.c: 274: motorCounterUpdate(RIGHT,0);
  3069  0013BE  0E00               	movlw	0
  3070  0013C0  6E4A               	movwf	motorCounterUpdate@reverse,c
  3071  0013C2  0E01               	movlw	1
  3072  0013C4  EC17  F00C         	call	_motorCounterUpdate
  3073                           
  3074                           ;interrupts.c: 275: motorCounterUpdate(LEFT,0);
  3075  0013C8  0E00               	movlw	0
  3076  0013CA  6E4A               	movwf	motorCounterUpdate@reverse,c
  3077  0013CC  0E00               	movlw	0
  3078  0013CE  EC17  F00C         	call	_motorCounterUpdate
  3079                           
  3080                           ;interrupts.c: 276: justTurned = 0;
  3081  0013D2  0E00               	movlw	0
  3082  0013D4  6E37               	movwf	_justTurned,c
  3083                           
  3084                           ;interrupts.c: 277: TurnLeft = 0;
  3085  0013D6  0E00               	movlw	0
  3086  0013D8  6E1C               	movwf	_TurnLeft+1,c
  3087  0013DA  0E00               	movlw	0
  3088  0013DC  6E1B               	movwf	_TurnLeft,c
  3089                           
  3090                           ;interrupts.c: 278: TurnRight = 0;
  3091  0013DE  0E00               	movlw	0
  3092  0013E0  6E20               	movwf	_TurnRight+1,c
  3093  0013E2  0E00               	movlw	0
  3094  0013E4  6E1F               	movwf	_TurnRight,c
  3095  0013E6                     i2l1799:
  3096                           
  3097                           ;interrupts.c: 279: TurnLeftAgain = 0;
  3098  0013E6  0E00               	movlw	0
  3099  0013E8  6E1E               	movwf	_TurnLeftAgain+1,c
  3100  0013EA  0E00               	movlw	0
  3101  0013EC  6E1D               	movwf	_TurnLeftAgain,c
  3102  0013EE  D000               	goto	i2l92
  3103  0013F0                     i2l92:
  3104                           
  3105                           ;interrupts.c: 280: }
  3106                           ;interrupts.c: 281: moveMouse(merge(LMotorCounter,RMotorCounter));
  3107  0013F0  C034  F04A         	movff	_RMotorCounter,merge@right
  3108  0013F4  5033               	movf	_LMotorCounter,w,c
  3109  0013F6  ECA5  F00E         	call	_merge
  3110  0013FA  ECB2  F00E         	call	_moveMouse
  3111                           
  3112                           ;interrupts.c: 282: MotorDelayCounter = 0;
  3113  0013FE  0E00               	movlw	0
  3114  001400  6E14               	movwf	_MotorDelayCounter+1,c
  3115  001402  0E00               	movlw	0
  3116  001404  6E13               	movwf	_MotorDelayCounter,c
  3117  001406  D000               	goto	i2l1803
  3118  001408                     i2l1803:
  3119                           
  3120                           ;interrupts.c: 283: }
  3121                           ;interrupts.c: 285: MotorDelayCounter++;
  3122  001408  4A13               	infsnz	_MotorDelayCounter,f,c
  3123  00140A  2A14               	incf	_MotorDelayCounter+1,f,c
  3124                           
  3125                           ;interrupts.c: 286: INTCONbits.TMR0IF = 0;
  3126  00140C  94F2               	bcf	intcon,2,c	;volatile
  3127  00140E  D000               	goto	i2l131
  3128  001410                     i2l131:
  3129  001410  C05A  FFF5         	movff	??_high_isr+13,tablat
  3130  001414  C059  FFF8         	movff	??_high_isr+12,tblptru
  3131  001418  C058  FFF7         	movff	??_high_isr+11,tblptrh
  3132  00141C  C057  FFF6         	movff	??_high_isr+10,tblptrl
  3133  001420  C056  FFF4         	movff	??_high_isr+9,prodh
  3134  001424  C055  FFF3         	movff	??_high_isr+8,prodl
  3135  001428  C054  FFDA         	movff	??_high_isr+7,fsr2h
  3136  00142C  C053  FFD9         	movff	??_high_isr+6,fsr2l
  3137  001430  C052  FFE2         	movff	??_high_isr+5,fsr1h
  3138  001434  C051  FFE1         	movff	??_high_isr+4,fsr1l
  3139  001438  C050  FFEA         	movff	??_high_isr+3,fsr0h
  3140  00143C  C04F  FFE9         	movff	??_high_isr+2,fsr0l
  3141  001440  C04E  FFFB         	movff	??_high_isr+1,pclatu
  3142  001444  C04D  FFFA         	movff	??_high_isr,pclath
  3143  001448  0011               	retfie		f
  3144  00144A                     __end_of_high_isr:
  3145                           	opt stack 0
  3146                           pclatu	equ	0xFFB
  3147                           pclath	equ	0xFFA
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           intcon2	equ	0xFF1
  3156                           postinc0	equ	0xFEE
  3157                           fsr0h	equ	0xFEA
  3158                           fsr0l	equ	0xFE9
  3159                           wreg	equ	0xFE8
  3160                           fsr1h	equ	0xFE2
  3161                           fsr1l	equ	0xFE1
  3162                           bsr	equ	0xFE0
  3163                           postinc2	equ	0xFDE
  3164                           postdec2	equ	0xFDD
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function _rotate *****************
  3170 ;; Defined at:
  3171 ;;		line 422 in file "interrupts.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  side            1    wreg     enum E4145
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  side            1   19[COMRAM] enum E4145
  3176 ;; Return value:  Size  Location     Type
  3177 ;;		None               void
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;Total ram usage:        1 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    1
  3192 ;; This function calls:
  3193 ;;		_motorCounterUpdate
  3194 ;; This function is called by:
  3195 ;;		_high_isr
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text14
  3200  001B72                     __ptext14:
  3201                           	opt stack 0
  3202  001B72                     _rotate:
  3203                           	opt stack 24
  3204                           
  3205                           ;incstack = 0
  3206                           ;rotate@side stored from wreg
  3207  001B72  6E4C               	movwf	rotate@side,c
  3208                           
  3209                           ;interrupts.c: 424: if (side == LEFT){
  3210  001B74  504C               	movf	rotate@side,w,c
  3211  001B76  A4D8               	btfss	status,2,c
  3212  001B78  D00B               	goto	i2l1579
  3213                           
  3214                           ;interrupts.c: 425: motorCounterUpdate(RIGHT,0);
  3215  001B7A  0E00               	movlw	0
  3216  001B7C  6E4A               	movwf	motorCounterUpdate@reverse,c
  3217  001B7E  0E01               	movlw	1
  3218  001B80  EC17  F00C         	call	_motorCounterUpdate
  3219                           
  3220                           ;interrupts.c: 426: motorCounterUpdate(LEFT,1);
  3221  001B84  0E01               	movlw	1
  3222  001B86  6E4A               	movwf	motorCounterUpdate@reverse,c
  3223  001B88  0E00               	movlw	0
  3224  001B8A  EC17  F00C         	call	_motorCounterUpdate
  3225                           
  3226                           ;interrupts.c: 427: } else {
  3227  001B8E  D00B               	goto	i2l1581
  3228  001B90                     i2l1579:
  3229                           
  3230                           ;interrupts.c: 428: motorCounterUpdate(LEFT,0);
  3231  001B90  0E00               	movlw	0
  3232  001B92  6E4A               	movwf	motorCounterUpdate@reverse,c
  3233  001B94  0E00               	movlw	0
  3234  001B96  EC17  F00C         	call	_motorCounterUpdate
  3235                           
  3236                           ;interrupts.c: 429: motorCounterUpdate(RIGHT,1);
  3237  001B9A  0E01               	movlw	1
  3238  001B9C  6E4A               	movwf	motorCounterUpdate@reverse,c
  3239  001B9E  0E01               	movlw	1
  3240  001BA0  EC17  F00C         	call	_motorCounterUpdate
  3241  001BA4  D000               	goto	i2l1581
  3242  001BA6                     i2l1581:
  3243                           
  3244                           ;interrupts.c: 430: }
  3245                           ;interrupts.c: 431: RotateCounter--;
  3246  001BA6  0619               	decf	_RotateCounter,f,c
  3247  001BA8  A0D8               	btfss	status,0,c
  3248  001BAA  061A               	decf	_RotateCounter+1,f,c
  3249  001BAC  0012               	return		;funcret
  3250  001BAE                     __end_of_rotate:
  3251                           	opt stack 0
  3252                           pclatu	equ	0xFFB
  3253                           pclath	equ	0xFFA
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           intcon2	equ	0xFF1
  3262                           postinc0	equ	0xFEE
  3263                           fsr0h	equ	0xFEA
  3264                           fsr0l	equ	0xFE9
  3265                           wreg	equ	0xFE8
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           bsr	equ	0xFE0
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _moveMouse *****************
  3276 ;; Defined at:
  3277 ;;		line 383 in file "interrupts.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  action          1    wreg     unsigned char 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  action          1   17[COMRAM] unsigned char 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;		None               void
  3284 ;; Registers used:
  3285 ;;		wreg
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;Total ram usage:        1 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_high_isr
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text15
  3305  001D64                     __ptext15:
  3306                           	opt stack 0
  3307  001D64                     _moveMouse:
  3308                           	opt stack 25
  3309                           
  3310                           ;incstack = 0
  3311                           ;moveMouse@action stored from wreg
  3312  001D64  6E4A               	movwf	moveMouse@action,c
  3313                           
  3314                           ;interrupts.c: 385: LATC = action;
  3315  001D66  C04A  FF8B         	movff	moveMouse@action,3979	;volatile
  3316  001D6A  0012               	return		;funcret
  3317  001D6C                     __end_of_moveMouse:
  3318                           	opt stack 0
  3319                           pclatu	equ	0xFFB
  3320                           pclath	equ	0xFFA
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           intcon	equ	0xFF2
  3328                           intcon2	equ	0xFF1
  3329                           postinc0	equ	0xFEE
  3330                           fsr0h	equ	0xFEA
  3331                           fsr0l	equ	0xFE9
  3332                           wreg	equ	0xFE8
  3333                           fsr1h	equ	0xFE2
  3334                           fsr1l	equ	0xFE1
  3335                           bsr	equ	0xFE0
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _merge *****************
  3343 ;; Defined at:
  3344 ;;		line 376 in file "interrupts.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  left            1    wreg     unsigned char 
  3347 ;;  right           1   17[COMRAM] unsigned char 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  left            1   18[COMRAM] unsigned char 
  3350 ;;  merged          1   19[COMRAM] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      unsigned char 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:        3 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_high_isr
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text16
  3374  001D4A                     __ptext16:
  3375                           	opt stack 0
  3376  001D4A                     _merge:
  3377                           	opt stack 25
  3378                           
  3379                           ;incstack = 0
  3380                           ;merge@left stored from wreg
  3381  001D4A  6E4B               	movwf	merge@left,c
  3382                           
  3383                           ;interrupts.c: 378: unsigned char merged;
  3384                           ;interrupts.c: 379: merged = left + (right << 4);
  3385  001D4C  384A               	swapf	merge@right,w,c
  3386  001D4E  0BF0               	andlw	240
  3387  001D50  244B               	addwf	merge@left,w,c
  3388  001D52  6E4C               	movwf	merge@merged,c
  3389                           
  3390                           ;interrupts.c: 380: return merged;
  3391  001D54  504C               	movf	merge@merged,w,c
  3392  001D56  D000               	goto	i2l175
  3393  001D58                     i2l175:
  3394  001D58  0012               	return		;funcret
  3395  001D5A                     __end_of_merge:
  3396                           	opt stack 0
  3397                           pclatu	equ	0xFFB
  3398                           pclath	equ	0xFFA
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           intcon	equ	0xFF2
  3406                           intcon2	equ	0xFF1
  3407                           postinc0	equ	0xFEE
  3408                           fsr0h	equ	0xFEA
  3409                           fsr0l	equ	0xFE9
  3410                           wreg	equ	0xFE8
  3411                           fsr1h	equ	0xFE2
  3412                           fsr1l	equ	0xFE1
  3413                           bsr	equ	0xFE0
  3414                           postinc2	equ	0xFDE
  3415                           postdec2	equ	0xFDD
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _forward *****************
  3421 ;; Defined at:
  3422 ;;		line 467 in file "interrupts.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    1
  3443 ;; This function calls:
  3444 ;;		_motorCounterUpdate
  3445 ;; This function is called by:
  3446 ;;		_high_isr
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text17
  3451  001CE6                     __ptext17:
  3452                           	opt stack 0
  3453  001CE6                     _forward:
  3454                           	opt stack 24
  3455                           
  3456                           ;interrupts.c: 469: motorCounterUpdate(RIGHT,0);
  3457                           
  3458                           ;incstack = 0
  3459  001CE6  0E00               	movlw	0
  3460  001CE8  6E4A               	movwf	motorCounterUpdate@reverse,c
  3461  001CEA  0E01               	movlw	1
  3462  001CEC  EC17  F00C         	call	_motorCounterUpdate
  3463                           
  3464                           ;interrupts.c: 470: motorCounterUpdate(LEFT,0);
  3465  001CF0  0E00               	movlw	0
  3466  001CF2  6E4A               	movwf	motorCounterUpdate@reverse,c
  3467  001CF4  0E00               	movlw	0
  3468  001CF6  EC17  F00C         	call	_motorCounterUpdate
  3469                           
  3470                           ;interrupts.c: 471: ForwardCounter--;
  3471  001CFA  060D               	decf	_ForwardCounter,f,c
  3472  001CFC  A0D8               	btfss	status,0,c
  3473  001CFE  060E               	decf	_ForwardCounter+1,f,c
  3474                           
  3475                           ;interrupts.c: 472: if(ForwardCounter == 0)
  3476  001D00  500D               	movf	_ForwardCounter,w,c
  3477  001D02  100E               	iorwf	_ForwardCounter+1,w,c
  3478  001D04  A4D8               	btfss	status,2,c
  3479  001D06  D003               	goto	i2l209
  3480                           
  3481                           ;interrupts.c: 473: justTurned = 0;
  3482  001D08  0E00               	movlw	0
  3483  001D0A  6E37               	movwf	_justTurned,c
  3484  001D0C  D000               	goto	i2l209
  3485  001D0E                     i2l209:
  3486  001D0E  0012               	return		;funcret
  3487  001D10                     __end_of_forward:
  3488                           	opt stack 0
  3489                           pclatu	equ	0xFFB
  3490                           pclath	equ	0xFFA
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           intcon	equ	0xFF2
  3498                           intcon2	equ	0xFF1
  3499                           postinc0	equ	0xFEE
  3500                           fsr0h	equ	0xFEA
  3501                           fsr0l	equ	0xFE9
  3502                           wreg	equ	0xFE8
  3503                           fsr1h	equ	0xFE2
  3504                           fsr1l	equ	0xFE1
  3505                           bsr	equ	0xFE0
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _Reversing *****************
  3513 ;; Defined at:
  3514 ;;		line 446 in file "interrupts.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;Total ram usage:        0 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    1
  3535 ;; This function calls:
  3536 ;;		_motorCounterUpdate
  3537 ;; This function is called by:
  3538 ;;		_high_isr
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text18
  3543  001D2E                     __ptext18:
  3544                           	opt stack 0
  3545  001D2E                     _Reversing:
  3546                           	opt stack 24
  3547                           
  3548                           ;interrupts.c: 448: motorCounterUpdate(RIGHT,1);
  3549                           
  3550                           ;incstack = 0
  3551  001D2E  0E01               	movlw	1
  3552  001D30  6E4A               	movwf	motorCounterUpdate@reverse,c
  3553  001D32  0E01               	movlw	1
  3554  001D34  EC17  F00C         	call	_motorCounterUpdate
  3555                           
  3556                           ;interrupts.c: 449: motorCounterUpdate(LEFT,1);
  3557  001D38  0E01               	movlw	1
  3558  001D3A  6E4A               	movwf	motorCounterUpdate@reverse,c
  3559  001D3C  0E00               	movlw	0
  3560  001D3E  EC17  F00C         	call	_motorCounterUpdate
  3561                           
  3562                           ;interrupts.c: 450: ReverseCounter--;
  3563  001D42  0617               	decf	_ReverseCounter,f,c
  3564  001D44  A0D8               	btfss	status,0,c
  3565  001D46  0618               	decf	_ReverseCounter+1,f,c
  3566  001D48  0012               	return		;funcret
  3567  001D4A                     __end_of_Reversing:
  3568                           	opt stack 0
  3569                           pclatu	equ	0xFFB
  3570                           pclath	equ	0xFFA
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon2	equ	0xFF1
  3579                           postinc0	equ	0xFEE
  3580                           fsr0h	equ	0xFEA
  3581                           fsr0l	equ	0xFE9
  3582                           wreg	equ	0xFE8
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           bsr	equ	0xFE0
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _motorCounterUpdate *****************
  3593 ;; Defined at:
  3594 ;;		line 331 in file "interrupts.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  side            1    wreg     enum E4145
  3597 ;;  reverse         1   17[COMRAM] unsigned char 
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;  side            1   18[COMRAM] enum E4145
  3600 ;; Return value:  Size  Location     Type
  3601 ;;		None               void
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:        2 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_high_isr
  3619 ;;		_rotate
  3620 ;;		_Reversing
  3621 ;;		_forward
  3622 ;;		_smoothTurn
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text19
  3627  00182E                     __ptext19:
  3628                           	opt stack 0
  3629  00182E                     _motorCounterUpdate:
  3630                           	opt stack 24
  3631                           
  3632                           ;incstack = 0
  3633                           ;motorCounterUpdate@side stored from wreg
  3634  00182E  6E4B               	movwf	motorCounterUpdate@side,c
  3635                           
  3636                           ;interrupts.c: 333: if(side == LEFT && reverse == 1)
  3637  001830  504B               	movf	motorCounterUpdate@side,w,c
  3638  001832  A4D8               	btfss	status,2,c
  3639  001834  D01B               	goto	i2l1471
  3640  001836  044A               	decf	motorCounterUpdate@reverse,w,c
  3641  001838  B4D8               	btfsc	status,2,c
  3642  00183A  D00B               	goto	i2l1469
  3643  00183C  D017               	goto	i2l1471
  3644                           
  3645                           ;interrupts.c: 334: {
  3646                           ;interrupts.c: 335: switch(LMotorCounter)
  3647  00183E  D009               	goto	i2l1469
  3648  001840                     i2l1459:
  3649  001840  0E02               	movlw	2
  3650  001842  D004               	goto	L13
  3651  001844                     i2l1461:
  3652  001844  0E04               	movlw	4
  3653  001846  D002               	goto	L13
  3654                           
  3655                           ;interrupts.c: 339: case 0b00000100: LMotorCounter = 0b00001000; break;
  3656  001848  D03E               	goto	i2l1503
  3657                           
  3658                           ;interrupts.c: 340: case 0b00001000: LMotorCounter = 0b00000001; break;
  3659  00184A  D039               	goto	i2l1497
  3660  00184C                     L13:
  3661  00184C  6E33               	movwf	_LMotorCounter,c
  3662  00184E  D068               	goto	i2l172
  3663                           
  3664                           ;interrupts.c: 341: default: LMotorCounter = 0b00000001;
  3665  001850  D036               	goto	i2l1497
  3666  001852                     i2l1469:
  3667  001852  5033               	movf	_LMotorCounter,w,c
  3668                           
  3669                           ; Switch size 1, requested type "space"
  3670                           ; Number of cases is 4, Range of values is 1 to 8
  3671                           ; switch strategies available:
  3672                           ; Name         Instructions Cycles
  3673                           ; simple_byte           13     7 (average)
  3674                           ;	Chosen strategy is simple_byte
  3675  001854  0A01               	xorlw	1	; case 1
  3676  001856  B4D8               	btfsc	status,2,c
  3677  001858  D7F3               	goto	i2l1459
  3678  00185A  0A03               	xorlw	3	; case 2
  3679  00185C  B4D8               	btfsc	status,2,c
  3680  00185E  D7F2               	goto	i2l1461
  3681  001860  0A06               	xorlw	6	; case 4
  3682  001862  B4D8               	btfsc	status,2,c
  3683  001864  D030               	goto	i2l1503
  3684  001866  0A0C               	xorlw	12	; case 8
  3685  001868  D02A               	goto	i2l1497
  3686                           
  3687                           ;interrupts.c: 343: } else if(side == RIGHT && reverse == 1)
  3688  00186A  D05A               	goto	i2l172
  3689  00186C                     i2l1471:
  3690  00186C  044B               	decf	motorCounterUpdate@side,w,c
  3691  00186E  A4D8               	btfss	status,2,c
  3692  001870  D01D               	goto	i2l1489
  3693  001872  044A               	decf	motorCounterUpdate@reverse,w,c
  3694  001874  B4D8               	btfsc	status,2,c
  3695  001876  D00B               	goto	i2l1487
  3696  001878  D019               	goto	i2l1489
  3697                           
  3698                           ;interrupts.c: 344: {
  3699                           ;interrupts.c: 345: switch(RMotorCounter)
  3700  00187A  D009               	goto	i2l1487
  3701  00187C                     i2l1477:
  3702  00187C  0E08               	movlw	8
  3703  00187E  D040               	goto	L21
  3704  001880                     i2l1479:
  3705  001880  0E01               	movlw	1
  3706  001882  D03E               	goto	L21
  3707  001884                     i2l1481:
  3708  001884  0E02               	movlw	2
  3709  001886  D03C               	goto	L21
  3710  001888                     i2l1483:
  3711  001888  0E04               	movlw	4
  3712  00188A  D03A               	goto	L21
  3713                           
  3714                           ;interrupts.c: 351: default: RMotorCounter = 0b00001000;
  3715  00188C  D7F7               	goto	i2l1477
  3716  00188E                     i2l1487:
  3717  00188E  5034               	movf	_RMotorCounter,w,c
  3718                           
  3719                           ; Switch size 1, requested type "space"
  3720                           ; Number of cases is 4, Range of values is 1 to 8
  3721                           ; switch strategies available:
  3722                           ; Name         Instructions Cycles
  3723                           ; simple_byte           13     7 (average)
  3724                           ;	Chosen strategy is simple_byte
  3725  001890  0A01               	xorlw	1	; case 1
  3726  001892  B4D8               	btfsc	status,2,c
  3727  001894  D7F3               	goto	i2l1477
  3728  001896  0A03               	xorlw	3	; case 2
  3729  001898  B4D8               	btfsc	status,2,c
  3730  00189A  D7F2               	goto	i2l1479
  3731  00189C  0A06               	xorlw	6	; case 4
  3732  00189E  B4D8               	btfsc	status,2,c
  3733  0018A0  D7F1               	goto	i2l1481
  3734  0018A2  0A0C               	xorlw	12	; case 8
  3735  0018A4  B4D8               	btfsc	status,2,c
  3736  0018A6  D7F0               	goto	i2l1483
  3737  0018A8  D7E9               	goto	i2l1477
  3738                           
  3739                           ;interrupts.c: 353: } else if(side == LEFT && reverse == 0)
  3740  0018AA  D03A               	goto	i2l172
  3741  0018AC                     i2l1489:
  3742  0018AC  504B               	movf	motorCounterUpdate@side,w,c
  3743  0018AE  A4D8               	btfss	status,2,c
  3744  0018B0  D01B               	goto	i2l1507
  3745  0018B2  504A               	movf	motorCounterUpdate@reverse,w,c
  3746  0018B4  B4D8               	btfsc	status,2,c
  3747  0018B6  D009               	goto	i2l1505
  3748  0018B8  D017               	goto	i2l1507
  3749                           
  3750                           ;interrupts.c: 354: {
  3751                           ;interrupts.c: 355: switch(LMotorCounter)
  3752  0018BA  D007               	goto	i2l1505
  3753                           
  3754                           ;interrupts.c: 356: {
  3755                           ;interrupts.c: 357: case 0b00000001: LMotorCounter = 0b00001000; break;
  3756  0018BC  D004               	goto	i2l1503
  3757  0018BE                     i2l1497:
  3758  0018BE  0E01               	movlw	1
  3759  0018C0  D7C5               	goto	L13
  3760                           
  3761                           ;interrupts.c: 359: case 0b00000100: LMotorCounter = 0b00000010; break;
  3762  0018C2  D7BE               	goto	i2l1459
  3763                           
  3764                           ;interrupts.c: 360: case 0b00001000: LMotorCounter = 0b00000100; break;
  3765  0018C4  D7BF               	goto	i2l1461
  3766  0018C6                     i2l1503:
  3767  0018C6  0E08               	movlw	8
  3768  0018C8  D7C1               	goto	L13
  3769  0018CA                     i2l1505:
  3770  0018CA  5033               	movf	_LMotorCounter,w,c
  3771                           
  3772                           ; Switch size 1, requested type "space"
  3773                           ; Number of cases is 4, Range of values is 1 to 8
  3774                           ; switch strategies available:
  3775                           ; Name         Instructions Cycles
  3776                           ; simple_byte           13     7 (average)
  3777                           ;	Chosen strategy is simple_byte
  3778  0018CC  0A01               	xorlw	1	; case 1
  3779  0018CE  B4D8               	btfsc	status,2,c
  3780  0018D0  D7FA               	goto	i2l1503
  3781  0018D2  0A03               	xorlw	3	; case 2
  3782  0018D4  B4D8               	btfsc	status,2,c
  3783  0018D6  D7F3               	goto	i2l1497
  3784  0018D8  0A06               	xorlw	6	; case 4
  3785  0018DA  B4D8               	btfsc	status,2,c
  3786  0018DC  D7B1               	goto	i2l1459
  3787  0018DE  0A0C               	xorlw	12	; case 8
  3788  0018E0  B4D8               	btfsc	status,2,c
  3789  0018E2  D7B0               	goto	i2l1461
  3790  0018E4  D7F0               	goto	i2l1503
  3791                           
  3792                           ;interrupts.c: 363: } else if(side == RIGHT && reverse == 0)
  3793  0018E6  D01C               	goto	i2l172
  3794  0018E8                     i2l1507:
  3795  0018E8  044B               	decf	motorCounterUpdate@side,w,c
  3796  0018EA  A4D8               	btfss	status,2,c
  3797  0018EC  D019               	goto	i2l172
  3798  0018EE  504A               	movf	motorCounterUpdate@reverse,w,c
  3799  0018F0  B4D8               	btfsc	status,2,c
  3800  0018F2  D009               	goto	i2l1523
  3801  0018F4  D015               	goto	i2l172
  3802                           
  3803                           ;interrupts.c: 364: {
  3804                           ;interrupts.c: 365: switch(RMotorCounter)
  3805  0018F6  D007               	goto	i2l1523
  3806                           
  3807                           ;interrupts.c: 366: {
  3808                           ;interrupts.c: 367: case 0b00000001: RMotorCounter = 0b00000010; break;
  3809  0018F8  D7C5               	goto	i2l1481
  3810                           
  3811                           ;interrupts.c: 368: case 0b00000010: RMotorCounter = 0b00000100; break;
  3812  0018FA  D7C6               	goto	i2l1483
  3813                           
  3814                           ;interrupts.c: 369: case 0b00000100: RMotorCounter = 0b00001000; break;
  3815  0018FC  D7BF               	goto	i2l1477
  3816                           
  3817                           ;interrupts.c: 370: case 0b00001000: RMotorCounter = 0b00000001; break;
  3818  0018FE  D7C0               	goto	i2l1479
  3819  001900                     L21:
  3820  001900  6E34               	movwf	_RMotorCounter,c
  3821  001902  D00E               	goto	i2l172
  3822                           
  3823                           ;interrupts.c: 371: default: RMotorCounter = 0b00000001;
  3824  001904  D7BD               	goto	i2l1479
  3825  001906                     i2l1523:
  3826  001906  5034               	movf	_RMotorCounter,w,c
  3827                           
  3828                           ; Switch size 1, requested type "space"
  3829                           ; Number of cases is 4, Range of values is 1 to 8
  3830                           ; switch strategies available:
  3831                           ; Name         Instructions Cycles
  3832                           ; simple_byte           13     7 (average)
  3833                           ;	Chosen strategy is simple_byte
  3834  001908  0A01               	xorlw	1	; case 1
  3835  00190A  B4D8               	btfsc	status,2,c
  3836  00190C  D7BB               	goto	i2l1481
  3837  00190E  0A03               	xorlw	3	; case 2
  3838  001910  B4D8               	btfsc	status,2,c
  3839  001912  D7BA               	goto	i2l1483
  3840  001914  0A06               	xorlw	6	; case 4
  3841  001916  B4D8               	btfsc	status,2,c
  3842  001918  D7B1               	goto	i2l1477
  3843  00191A  0A0C               	xorlw	12	; case 8
  3844  00191C  D7B1               	goto	i2l1479
  3845  00191E  D000               	goto	i2l172
  3846  001920                     i2l172:
  3847  001920  0012               	return		;funcret
  3848  001922                     __end_of_motorCounterUpdate:
  3849                           	opt stack 0
  3850                           pclatu	equ	0xFFB
  3851                           pclath	equ	0xFFA
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           intcon	equ	0xFF2
  3859                           intcon2	equ	0xFF1
  3860                           postinc0	equ	0xFEE
  3861                           fsr0h	equ	0xFEA
  3862                           fsr0l	equ	0xFE9
  3863                           wreg	equ	0xFE8
  3864                           fsr1h	equ	0xFE2
  3865                           fsr1l	equ	0xFE1
  3866                           bsr	equ	0xFE0
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _KController *****************
  3874 ;; Defined at:
  3875 ;;		line 396 in file "interrupts.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;Total ram usage:        0 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_high_isr
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text20
  3903  001ADC                     __ptext20:
  3904                           	opt stack 0
  3905  001ADC                     _KController:
  3906                           	opt stack 25
  3907                           
  3908                           ;interrupts.c: 407: if(sensorValue[2] < 150 || sensorValue[3] < 150 )
  3909                           
  3910                           ;incstack = 0
  3911  001ADC  BE06               	btfsc	_sensorValue+5,7,c
  3912  001ADE  D00E               	goto	i2l1105
  3913  001AE0  5006               	movf	_sensorValue+5,w,c
  3914  001AE2  E104               	bnz	i2u26_40
  3915  001AE4  0E96               	movlw	150
  3916  001AE6  5C05               	subwf	_sensorValue+4,w,c
  3917  001AE8  A0D8               	btfss	status,0,c
  3918  001AEA  D008               	goto	i2l1105
  3919  001AEC                     i2u26_40:
  3920  001AEC  BE08               	btfsc	_sensorValue+7,7,c
  3921  001AEE  D006               	goto	i2l1105
  3922  001AF0  5008               	movf	_sensorValue+7,w,c
  3923  001AF2  E11E               	bnz	i2l191
  3924  001AF4  0E96               	movlw	150
  3925  001AF6  5C07               	subwf	_sensorValue+6,w,c
  3926  001AF8  B0D8               	btfsc	status,0,c
  3927  001AFA  D01A               	goto	i2l191
  3928  001AFC                     i2l1105:
  3929                           
  3930                           ;interrupts.c: 408: {
  3931                           ;interrupts.c: 410: if(sensorValue[0] > 400)
  3932  001AFC  BE02               	btfsc	_sensorValue+1,7,c
  3933  001AFE  D00B               	goto	i2l1109
  3934  001B00  0E91               	movlw	145
  3935  001B02  5C01               	subwf	_sensorValue,w,c
  3936  001B04  0E01               	movlw	1
  3937  001B06  5802               	subwfb	_sensorValue+1,w,c
  3938  001B08  A0D8               	btfss	status,0,c
  3939  001B0A  D005               	goto	i2l1109
  3940                           
  3941                           ;interrupts.c: 411: {
  3942                           ;interrupts.c: 412: controlToRight = 30;
  3943  001B0C  0E00               	movlw	0
  3944  001B0E  6E28               	movwf	_controlToRight+1,c
  3945  001B10  0E1E               	movlw	30
  3946  001B12  6E27               	movwf	_controlToRight,c
  3947                           
  3948                           ;interrupts.c: 413: } else if(sensorValue[1] > 400)
  3949  001B14  D00D               	goto	i2l191
  3950  001B16                     i2l1109:
  3951  001B16  BE04               	btfsc	_sensorValue+3,7,c
  3952  001B18  D00B               	goto	i2l191
  3953  001B1A  0E91               	movlw	145
  3954  001B1C  5C03               	subwf	_sensorValue+2,w,c
  3955  001B1E  0E01               	movlw	1
  3956  001B20  5804               	subwfb	_sensorValue+3,w,c
  3957  001B22  A0D8               	btfss	status,0,c
  3958  001B24  D005               	goto	i2l191
  3959                           
  3960                           ;interrupts.c: 414: {
  3961                           ;interrupts.c: 415: controlToLeft = 30;
  3962  001B26  0E00               	movlw	0
  3963  001B28  6E26               	movwf	_controlToLeft+1,c
  3964  001B2A  0E1E               	movlw	30
  3965  001B2C  6E25               	movwf	_controlToLeft,c
  3966  001B2E  D000               	goto	i2l191
  3967  001B30                     i2l191:
  3968  001B30  0012               	return		;funcret
  3969  001B32                     __end_of_KController:
  3970                           	opt stack 0
  3971                           pclatu	equ	0xFFB
  3972                           pclath	equ	0xFFA
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           intcon	equ	0xFF2
  3980                           intcon2	equ	0xFF1
  3981                           postinc0	equ	0xFEE
  3982                           fsr0h	equ	0xFEA
  3983                           fsr0l	equ	0xFE9
  3984                           wreg	equ	0xFE8
  3985                           fsr1h	equ	0xFE2
  3986                           fsr1l	equ	0xFE1
  3987                           bsr	equ	0xFE0
  3988                           postinc2	equ	0xFDE
  3989                           postdec2	equ	0xFDD
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           pclatu	equ	0xFFB
  3994                           pclath	equ	0xFFA
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           intcon	equ	0xFF2
  4002                           intcon2	equ	0xFF1
  4003                           postinc0	equ	0xFEE
  4004                           fsr0h	equ	0xFEA
  4005                           fsr0l	equ	0xFE9
  4006                           wreg	equ	0xFE8
  4007                           fsr1h	equ	0xFE2
  4008                           fsr1l	equ	0xFE1
  4009                           bsr	equ	0xFE0
  4010                           postinc2	equ	0xFDE
  4011                           postdec2	equ	0xFDD
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016                           	psect	rparam
  4017  0000                     pclatu	equ	0xFFB
  4018                           pclath	equ	0xFFA
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           intcon	equ	0xFF2
  4026                           intcon2	equ	0xFF1
  4027                           postinc0	equ	0xFEE
  4028                           fsr0h	equ	0xFEA
  4029                           fsr0l	equ	0xFE9
  4030                           wreg	equ	0xFE8
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           bsr	equ	0xFE0
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           fsr2h	equ	0xFDA
  4037                           fsr2l	equ	0xFD9
  4038                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     36      93
    BANK0           128    115     123
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_setCorrection
    _sensorUpdate->___wmul
    _sensorComputation->___wmul
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_merge
    _high_isr->_rotate
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                             34 COMRAM     2     2      0
                                              8 BANK0      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             24 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                              9 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                             34 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              4 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              4 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                             34 COMRAM     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    3829
                                             20 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     940
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     918
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _KController                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     73      7B       5       96.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     24      5D       1       73.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D8      34        0.0%
DATA                 0      0      D8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 05 02:54:28 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l301 1D2C                             l322 1772                             l315 170C  
                           l332 1CAE                             l333 1CB6                             l328 1C7A  
                           l336 1C4E                             l329 1C82                             l287 1B60  
                           l296 1D18                             l529 1ADA                    __CFG_CPB$OFF 000000  
                           _MAX 1C84                             _MIN 1C50                    __CFG_CPD$OFF 000000  
    __end_of_AlgorithmSelection 1D2E                    _rotatingSide 0038                             wreg 000FE8  
                          ?_MAX 0084                            ?_MIN 0084                            MAX@a 0084  
                          MAX@b 0086                            MIN@a 0084                            MIN@b 0086  
                  __CFG_WDT$OFF 000000                            l2001 1CDA                            l1067 1D26  
                          l1911 1492                            l1921 1634                            l1905 146E  
                          l1915 1500                            l1925 168E                            l1917 161E  
                          l1871 1A6E                            l1863 1A42                            l1927 16F6  
                          l1951 171C                            l1881 1AAA                            l1873 1A78  
                          l1857 1A2A                            l1961 175A                            l1971 180E  
                          l1955 1736                            l1869 1A60                            l1885 1ABA  
                          l1957 1740                            l1895 1B48                            l1975 1818  
                          l1889 1AD0                            _LATC 000F8B                            u1750 146C  
                          u1760 1490                            u1845 1780                            u1877 1B50  
                          i2l92 13F0                            i2l97 1128                            _main 1CB8  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            fsr2l 000FD9  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00A2                   __CFG_IESO$OFF 000000     sensorComputation@sensorTemp 0089  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000010                 __end_of_InitApp 1BE8  
         __end_of_setCorrection 1A0C                           ??_MAX 0088                           ??_MIN 0088  
    __size_of_sensorComputation 02C4                           ?_main 0039                 __end_of___awdiv 1ADC  
                         _T0CON 000FD5                 ___awdiv@divisor 0082                           i2l131 1410  
                         i2l209 1D0E                           i2l172 1920                           i2l191 1B30  
                         i2l175 1D58                 ___awdiv@counter 0084                           _TRISC 000F94  
           _ConfigureOscillator 1D5A                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                   _controlToLeft 0025  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                           _delay 1B32                           _merge 1D4A  
               __end_of_forward 1D10                 __end_of_low_isr 00A2                           tablat 000FF5  
                         status 000FD8                   _TurnLeftAgain 001D            ?_ConfigureOscillator 0039  
             _ControllerCounter 0009                 __initialization 1BE8                    __end_of_main 1CE6  
                        ??_main 005D                   __activetblptr 000002                          ?_delay 005B  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 004A                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1105 1AFC                          i2l1109 1B16  
                        i2l1503 18C6                          i2l1505 18CA                          i2l1523 1906  
                        i2l1507 18E8                          i2l1461 1844                          i2l1701 1184  
                        i2l1471 186C                          i2l1711 11AC                          i2l1481 1884  
                        i2l1713 11C8                          i2l1483 1888                          i2l1459 1840  
                        i2l1723 11FE                          i2l1707 1194                          i2l1651 1056  
                        i2l1803 1408                          i2l1477 187C                          i2l1469 1852  
                        i2l1581 1BA6                          i2l1725 1208                          i2l1717 11E0  
                        i2l1709 11A4                          i2l1653 1064                          i2l1479 1880  
                        i2l1487 188E                          i2l1751 12B0                          i2l1727 120E  
                        i2l1663 109A                          i2l1671 10C0                          i2l1655 1076  
                        i2l1497 18BE                          i2l1489 18AC                          i2l1761 12F0  
                        i2l1745 1290                          i2l1737 1262                          i2l1681 1102  
                        i2l1579 1B90                          i2l1747 129A                          i2l1739 1272  
                        i2l1691 113A                          i2l1675 10D4                          i2l1781 1384  
                        i2l1773 1340                          i2l1765 130A                          i2l1749 12A0  
                        i2l1685 1112                          i2l1669 10BA                          i2l1791 13BE  
                        i2l1783 1394                          i2l1775 1350                          i2l1767 1310  
                        i2l1695 1152                          i2l1679 10F2                          i2l1785 13A4  
                        i2l1777 135E                          i2l1697 116C                          i2l1787 13B4  
                        i2l1779 1374                          i2l1799 13E6                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 005D           ??_ConfigureOscillator 005B  
                   merge@merged 004C                  __CFG_XINST$OFF 000000              sensorComputation@i 0096  
            sensorComputation@j 0094                  _controlToRight 0027                __end_of_high_isr 144A  
                        ___wmul 1C1C                       ??___awdiv 005B                  __CFG_STVREN$ON 000000  
                        _errorD 002B                          _errorP 002D                          delay@x 0081  
                        clear_0 1BEE                          clear_1 1BFA                ___awdiv@quotient 0086  
                        _rotate 1B72              __size_of_Reversing 001C                    __pdataCOMRAM 005D  
                     ??_forward 004C                    __mediumconst 0000                       ??_low_isr 0039  
                _ReverseCounter 0017                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                      __accesstop 0080         __end_of__initialization 1C12  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                    ?_KController 0039  
                __pcstackCOMRAM 0039                   __end_of_delay 1B72                      _TurnedLeft 0021  
               moveMouse@action 004A                   __end_of_merge 1D5A      __end_of_motorCounterUpdate 1922  
                _ignoreControll 005D                  _ForwardCounter 000D                         ??_delay 0080  
                       ??_merge 004B                      __pbssBANK0 00F3              _AlgorithmSelection 1D10  
                  _LTurnCounter 0011               __end_of_Reversing 1D4A                      _delay_time 0029  
             _MotorDelayCounter 0013             ?_AlgorithmSelection 0039            setCorrection@sideAvg 0088  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0039  
                       _INTCON2 000FF1                         i2u26_40 1AEC                         _OSCTUNE 000F9B  
          ??_AlgorithmSelection 005B                       ?_high_isr 0039                         _Deadend 000B  
                 _LMotorCounter 0033                         _InitApp 1BAE                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 1A0C                 __size_of___wmul 0034  
                       _deadEnd 0036                    __psmallconst 1000                         __pcinit 1BE8  
                       __ramtop 1000                         __ptext0 1CB8                         __ptext1 1922  
                       __ptext2 170E                         __ptext3 144A                         __ptext4 1C1C  
                       __ptext5 1A0C                         __ptext6 1C50                         __ptext7 1C84  
                       __ptext8 1BAE                         __ptext9 1B32                 __size_of_rotate 003C  
                  __size_of_MAX 0034                    __size_of_MIN 0034                         _forward 1CE6  
                       delay@ms 005B                         _low_isr 0018                   ?_sensorUpdate 0039  
                    ??_high_isr 004D                  __pintcode_body 1006          __size_of_setCorrection 00EA  
          end_of_initialization 1C12                _sensorCorrection 00F3               __end_of_moveMouse 1D6C  
                 __Lmediumconst 0000                         int_func 1006                      _justTurned 0037  
          __size_of_KController 0056                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _TRISBbits 000F93                       _TRISEbits 000F96  
                ??_sensorUpdate 0098     __end_of_ConfigureOscillator 1D64                      _totalError 0031  
                  _RTurnCounter 0015  sensorComputation@getCorrection 008B                   _setCorrection 1922  
                __end_of___wmul 1C50                   __pidataCOMRAM 1D6C                     _TurnedRight 0023  
                __end_of_rotate 1BAE             start_initialization 1BE8                     __end_of_MAX 1CB8  
                   __end_of_MIN 1C84                       _Forwarded 000F              _motorCounterUpdate 182E  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 004A                      merge@right 004A  
                     _Reversing 1D2E                  ?_setCorrection 0039                        ??___wmul 005B  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 004C                  _sensorLocation 1001  
          ??_motorCounterUpdate 004B                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 001F       sensorUpdate@getCorrection 00EE          sensorUpdate@sensorTemp 009E  
             __size_of_high_isr 1442                        ?_InitApp 0039               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 0039                       _algorithm 0035                       __pintcode 0008  
         setCorrection@frontAvg 008A          motorCounterUpdate@side 004B                        ?___awdiv 0080  
          __end_of_sensorUpdate 182E          __end_of_sensorLocation 1005                     __pintcodelo 0018  
                   __smallconst 1000                        ?_forward 0039                        ?_low_isr 0039  
                     _oldErrorP 002F                  __size_of_delay 0040     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 005B                       _moveMouse 1D64  
                      i2u123_40 1088                        i2u124_40 10A8                        i2u125_40 10CE  
                      i2u126_40 10E2                        i2u151_40 12C0                        i2u119_40 1048  
                      i2u144_40 1224                        i2u145_40 1234                        i2u146_40 1244  
               ??_setCorrection 005B                        i2u155_40 1320                        i2u156_40 1330  
              __CFG_WDTPS$32768 000000                      _ADCON0bits 000FC2               ___wmul@multiplier 0080  
                 _RMotorCounter 0034                      rotate@side 004C                   ??_KController 004A  
                    ?_moveMouse 0039                __size_of_InitApp 003A                        __Hrparam 0000  
                     merge@left 004B            sensorComputation@max 008E                        __Lrparam 0000  
          sensorComputation@min 0090            sensorComputation@sum 0092                     ??_Reversing 004C  
            __CFG_BOREN$SBORDIS 000000                __size_of___awdiv 00D0                        _TurnLeft 001B  
              __size_of_forward 002A                __size_of_low_isr 008A                        __ptext10 1D10  
                      __ptext11 1D5A                        __ptext20 1ADC                        __ptext14 1B72  
                      __ptext15 1D64                        __ptext16 1D4A                        __ptext17 1CE6  
                      __ptext18 1D2E                        __ptext19 182E                        _high_isr 0008  
                 __size_of_main 002E                   _RotateCounter 0019           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1B32               _sensorComputation 144A  
                    _INTCONbits 000FF2              ?_sensorComputation 0089                   sensorUpdate@i 00EF  
                 sensorUpdate@j 00F1                    _sensorUpdate 170E                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008C                     ??_moveMouse 004A  
     __end_of_sensorComputation 170E                     _sensorValue 0001     __size_of_motorCounterUpdate 00F4  
     motorCounterUpdate@reverse 004A                     _KController 1ADC  
