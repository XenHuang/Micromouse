

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Apr 13 17:31:47 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           	psect	smallconst
    32  001000                     __psmallconst:
    33                           	opt stack 0
    34  001000  00                 	db	0
    35  001001                     _sensorCorrection:
    36                           	opt stack 0
    37  001001  1E                 	db	30
    38  001002  1E                 	db	30
    39  001003  07                 	db	7
    40  001004  07                 	db	7
    41  001005                     __end_of_sensorCorrection:
    42                           	opt stack 0
    43  001005                     _sensorLocation:
    44                           	opt stack 0
    45  001005  1B                 	db	27
    46  001006  2B                 	db	43
    47  001007  1F                 	db	31
    48  001008  33                 	db	51
    49  001009                     __end_of_sensorLocation:
    50                           	opt stack 0
    51  0000                     _ADCON0	set	4034
    52  0000                     _ADCON0bits	set	4034
    53  0000                     _ADCON1	set	4033
    54  0000                     _ADCON2	set	4032
    55  0000                     _ADRESH	set	4036
    56  0000                     _ADRESL	set	4035
    57  0000                     _INTCON	set	4082
    58  0000                     _INTCON2	set	4081
    59  0000                     _INTCONbits	set	4082
    60  0000                     _LATC	set	3979
    61  0000                     _OSCCON	set	4051
    62  0000                     _OSCTUNE	set	3995
    63  0000                     _PORTBbits	set	3969
    64  0000                     _T0CON	set	4053
    65  0000                     _TRISBbits	set	3987
    66  0000                     _TRISC	set	3988
    67  0000                     _TRISEbits	set	3990
    68                           
    69                           ; #config settings
    70  001009  00                 	db	0	; dummy byte at the end
    71  0000                     
    72                           	psect	cinit
    73  001880                     __pcinit:
    74                           	opt stack 0
    75  001880                     start_initialization:
    76                           	opt stack 0
    77  001880                     __initialization:
    78                           	opt stack 0
    79                           
    80                           ; Clear objects allocated to COMRAM (19 bytes)
    81  001880  EE00  F043         	lfsr	0,__pbssCOMRAM
    82  001884  0E13               	movlw	19
    83  001886                     clear_0:
    84  001886  6AEE               	clrf	postinc0,c
    85  001888  06E8               	decf	wreg,f,c
    86  00188A  E1FD               	bnz	clear_0
    87  00188C                     end_of_initialization:
    88                           	opt stack 0
    89  00188C                     __end_of__initialization:
    90                           	opt stack 0
    91  00188C  0E00               	movlw	low (__Lmediumconst shr (0+16))
    92  00188E  6EF8               	movwf	tblptru,c
    93  001890  0100               	movlb	0
    94  001892  EF4B  F00C         	goto	_main	;jump to C main() function
    95                           tblptru	equ	0xFF8
    96                           postinc0	equ	0xFEE
    97                           wreg	equ	0xFE8
    98                           
    99                           	psect	bssCOMRAM
   100  000043                     __pbssCOMRAM:
   101                           	opt stack 0
   102  000043                     _sensorValue:
   103                           	opt stack 0
   104  000043                     	ds	8
   105  00004B                     _LMotorDelayCounter:
   106                           	opt stack 0
   107  00004B                     	ds	2
   108  00004D                     _MotorDelayCounter:
   109                           	opt stack 0
   110  00004D                     	ds	2
   111  00004F                     _RMotorDelayCounter:
   112                           	opt stack 0
   113  00004F                     	ds	2
   114  000051                     _delay_time:
   115                           	opt stack 0
   116  000051                     	ds	2
   117  000053                     _LMotorCounter:
   118                           	opt stack 0
   119  000053                     	ds	1
   120  000054                     _RMotorCounter:
   121                           	opt stack 0
   122  000054                     	ds	1
   123  000055                     _algorithm:
   124                           	opt stack 0
   125  000055                     	ds	1
   126                           tblptru	equ	0xFF8
   127                           postinc0	equ	0xFEE
   128                           wreg	equ	0xFE8
   129                           
   130                           	psect	cstackBANK0
   131  000080                     __pcstackBANK0:
   132                           	opt stack 0
   133  000080                     ??_sensorUpdate:
   134                           
   135                           ; 0 bytes @ 0x0
   136  000080                     	ds	6
   137  000086                     sensorUpdate@sensorTemp:
   138                           	opt stack 0
   139                           
   140                           ; 80 bytes @ 0x6
   141  000086                     	ds	80
   142  0000D6                     sensorUpdate@i:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x56
   146  0000D6                     	ds	2
   147  0000D8                     sensorUpdate@j:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x58
   151  0000D8                     	ds	2
   152                           tblptru	equ	0xFF8
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	cstackCOMRAM
   157  000001                     __pcstackCOMRAM:
   158                           	opt stack 0
   159  000001                     ??_low_isr:
   160  000001                     
   161                           ; 0 bytes @ 0x0
   162  000001                     	ds	17
   163  000012                     ?_ABS:
   164                           	opt stack 0
   165  000012                     motorCounterUpdate@reverse:
   166                           	opt stack 0
   167  000012                     merge@right:
   168                           	opt stack 0
   169  000012                     moveMouse@action:
   170                           	opt stack 0
   171  000012                     ABS@x:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x11
   175  000012                     	ds	1
   176  000013                     motorCounterUpdate@side:
   177                           	opt stack 0
   178  000013                     merge@left:
   179                           	opt stack 0
   180                           
   181                           ; 1 bytes @ 0x12
   182  000013                     	ds	1
   183  000014                     merge@merged:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x13
   187  000014                     	ds	1
   188  000015                     ??_KController:
   189                           
   190                           ; 0 bytes @ 0x14
   191  000015                     	ds	2
   192  000017                     KController@correctTo:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x16
   196  000017                     	ds	1
   197  000018                     KController@diff:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x17
   201  000018                     	ds	2
   202  00001A                     KController@steps:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x19
   206  00001A                     	ds	2
   207  00001C                     ??_high_isr:
   208                           
   209                           ; 0 bytes @ 0x1B
   210  00001C                     	ds	14
   211  00002A                     ?___wmul:
   212                           	opt stack 0
   213  00002A                     ?___awdiv:
   214                           	opt stack 0
   215  00002A                     delay@ms:
   216                           	opt stack 0
   217  00002A                     ___wmul@multiplier:
   218                           	opt stack 0
   219  00002A                     ___awdiv@dividend:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x29
   223  00002A                     	ds	2
   224  00002C                     ??_delay:
   225  00002C                     ___wmul@multiplicand:
   226                           	opt stack 0
   227  00002C                     ___awdiv@divisor:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x2B
   231  00002C                     	ds	1
   232  00002D                     delay@x:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2C
   236  00002D                     	ds	1
   237  00002E                     ___awdiv@counter:
   238                           	opt stack 0
   239  00002E                     ___wmul@product:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x2D
   243  00002E                     	ds	1
   244  00002F                     ___awdiv@sign:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x2E
   248  00002F                     	ds	1
   249  000030                     ?_MIN:
   250                           	opt stack 0
   251  000030                     ?_MAX:
   252                           	opt stack 0
   253  000030                     MIN@a:
   254                           	opt stack 0
   255  000030                     MAX@a:
   256                           	opt stack 0
   257  000030                     ___awdiv@quotient:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x2F
   261  000030                     	ds	2
   262  000032                     MIN@b:
   263                           	opt stack 0
   264  000032                     MAX@b:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x31
   268  000032                     	ds	2
   269  000034                     ??_MIN:
   270  000034                     ??_MAX:
   271                           
   272                           ; 0 bytes @ 0x33
   273  000034                     	ds	1
   274  000035                     sensorComputation@sensorTemp:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x34
   278  000035                     	ds	2
   279  000037                     ??_sensorComputation:
   280                           
   281                           ; 0 bytes @ 0x36
   282  000037                     	ds	2
   283  000039                     sensorComputation@max:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x38
   287  000039                     	ds	2
   288  00003B                     sensorComputation@min:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x3A
   292  00003B                     	ds	2
   293  00003D                     sensorComputation@sum:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x3C
   297  00003D                     	ds	2
   298  00003F                     sensorComputation@i:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x3E
   302  00003F                     	ds	2
   303  000041                     sensorComputation@j:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x40
   307  000041                     	ds	2
   308  000043                     tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           ; 0 bytes @ 0x42
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 41 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;		None               void
   325 ;; Registers used:
   326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;Total ram usage:        0 bytes
   337 ;; Hardware stack levels required when called:    7
   338 ;; This function calls:
   339 ;;		_ConfigureOscillator
   340 ;;		_InitApp
   341 ;;		_sensorUpdate
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348  001896                     __ptext0:
   349                           	opt stack 0
   350  001896                     _main:
   351                           	opt stack 24
   352                           
   353                           ;main.c: 44: ConfigureOscillator();
   354                           
   355                           ;incstack = 0
   356  001896  EC5D  F00C         	call	_ConfigureOscillator	;wreg free
   357                           
   358                           ;main.c: 47: InitApp();
   359  00189A  ECBB  F00B         	call	_InitApp	;wreg free
   360  00189E  D000               	goto	l1480
   361  0018A0                     l1480:
   362                           
   363                           ;main.c: 50: {
   364                           ;main.c: 51: sensorUpdate();
   365  0018A0  EC05  F008         	call	_sensorUpdate	;wreg free
   366  0018A4  D7FD               	goto	l1480
   367  0018A6  EF51  F000         	goto	start
   368  0018AA                     __end_of_main:
   369                           	opt stack 0
   370                           tblptru	equ	0xFF8
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374 ;; *************** function _sensorUpdate *****************
   375 ;; Defined at:
   376 ;;		line 136 in file "user.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;  sensorTemp     80    6[BANK0 ] int [10][4]
   381 ;;  j               2   88[BANK0 ] int 
   382 ;;  i               2   86[BANK0 ] int 
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:       90 bytes
   397 ;; Hardware stack levels used:    1
   398 ;; Hardware stack levels required when called:    6
   399 ;; This function calls:
   400 ;;		___wmul
   401 ;;		_sensorComputation
   402 ;; This function is called by:
   403 ;;		_main
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text1
   408  00100A                     __ptext1:
   409                           	opt stack 0
   410  00100A                     _sensorUpdate:
   411                           	opt stack 24
   412                           
   413                           ;user.c: 138: int i,j;
   414                           ;user.c: 139: int sensorTemp[4][10];
   415                           ;user.c: 142: for(i = 0; i < 10; i++)
   416                           
   417                           ;incstack = 0
   418  00100A  0E00               	movlw	0
   419  00100C  0100               	movlb	0	; () banked
   420  00100E  6FD7               	movwf	(sensorUpdate@i+1)& (0+255),b
   421  001010  0E00               	movlw	0
   422  001012  6FD6               	movwf	sensorUpdate@i& (0+255),b
   423                           
   424                           ; BSR set to: 0
   425  001014  0100               	movlb	0	; () banked
   426  001016  BFD7               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   427  001018  D00A               	goto	l1446
   428  00101A  0100               	movlb	0	; () banked
   429  00101C  51D7               	movf	(sensorUpdate@i+1)& (0+255),w,b
   430  00101E  E106               	bnz	u930
   431  001020  0E0A               	movlw	10
   432  001022  0100               	movlb	0	; () banked
   433  001024  5DD6               	subwf	sensorUpdate@i& (0+255),w,b
   434  001026  B0D8               	btfsc	status,0,c
   435  001028  D0E9               	goto	l1474
   436  00102A  D001               	goto	l1446
   437  00102C                     u930:
   438                           
   439                           ; BSR set to: 0
   440  00102C  D0E7               	goto	l1474
   441  00102E                     l1446:
   442                           
   443                           ; BSR set to: 0
   444                           ;user.c: 143: {
   445                           ;user.c: 144: for(j = 0 ; j < 4 ; j++)
   446  00102E  0E00               	movlw	0
   447  001030  0100               	movlb	0	; () banked
   448  001032  6FD9               	movwf	(sensorUpdate@j+1)& (0+255),b
   449  001034  0E00               	movlw	0
   450  001036  6FD8               	movwf	sensorUpdate@j& (0+255),b
   451                           
   452                           ; BSR set to: 0
   453  001038  0100               	movlb	0	; () banked
   454  00103A  BFD9               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   455  00103C  D00A               	goto	l1452
   456  00103E  0100               	movlb	0	; () banked
   457  001040  51D9               	movf	(sensorUpdate@j+1)& (0+255),w,b
   458  001042  E106               	bnz	u940
   459  001044  0E04               	movlw	4
   460  001046  0100               	movlb	0	; () banked
   461  001048  5DD8               	subwf	sensorUpdate@j& (0+255),w,b
   462  00104A  B0D8               	btfsc	status,0,c
   463  00104C  D0CC               	goto	l1470
   464  00104E  D001               	goto	l1452
   465  001050                     u940:
   466                           
   467                           ; BSR set to: 0
   468  001050  D0CA               	goto	l1470
   469  001052                     l1452:
   470                           
   471                           ; BSR set to: 0
   472                           ;user.c: 145: {
   473                           ;user.c: 146: ADCON0 = sensorLocation[j];
   474  001052  0E05               	movlw	low _sensorLocation
   475  001054  0100               	movlb	0	; () banked
   476  001056  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   477  001058  6EF6               	movwf	tblptrl,c
   478  00105A  0E10               	movlw	high _sensorLocation
   479  00105C  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   480  00105E  6EF7               	movwf	tblptrh,c
   481  001060                     	if	0	;There are less than 3 active tblptr bytes
   482  001060                     	endif
   483  001060  0008               	tblrd		*
   484  001062  CFF5 FFC2          	movff	tablat,4034	;volatile
   485                           
   486                           ; BSR set to: 0
   487                           ;user.c: 148: ADCON0bits.GO_DONE = 1;
   488  001066  82C2               	bsf	4034,1,c	;volatile
   489                           
   490                           ;user.c: 149: while(ADCON0bits.GO_DONE != 0);
   491  001068  D000               	goto	l203
   492  00106A                     l203:
   493  00106A  B2C2               	btfsc	4034,1,c	;volatile
   494  00106C  D7FE               	goto	l203
   495                           
   496                           ;user.c: 150: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   497  00106E  CFC3 F080          	movff	4035,??_sensorUpdate	;volatile
   498  001072  0E06               	movlw	6
   499  001074  0100               	movlb	0	; () banked
   500  001076  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   501  001078                     u965:
   502  001078  0100               	movlb	0	; () banked
   503  00107A  90D8               	bcf	status,0,c
   504  00107C  3380               	rrcf	??_sensorUpdate& (0+255),f,b
   505  00107E  0100               	movlb	0	; () banked
   506  001080  2F81               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   507  001082  D7FA               	goto	u965
   508  001084  0100               	movlb	0	; () banked
   509  001086  5180               	movf	??_sensorUpdate& (0+255),w,b
   510  001088  CFC4 F082          	movff	4036,??_sensorUpdate+2	;volatile
   511  00108C  0100               	movlb	0	; () banked
   512  00108E  6B83               	clrf	(??_sensorUpdate+3)& (0+255),b
   513  001090  0100               	movlb	0	; () banked
   514  001092  90D8               	bcf	status,0,c
   515  001094  3782               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   516  001096  3783               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   517  001098  0100               	movlb	0	; () banked
   518  00109A  90D8               	bcf	status,0,c
   519  00109C  3782               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   520  00109E  3783               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   521  0010A0  0100               	movlb	0	; () banked
   522  0010A2  2782               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   523  0010A4  0E00               	movlw	0
   524  0010A6  2383               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   525  0010A8  C0D8  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   526  0010AC  C0D9  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   527  0010B0  0E00               	movlw	0
   528  0010B2  6E2D               	movwf	___wmul@multiplicand+1,c
   529  0010B4  0E14               	movlw	20
   530  0010B6  6E2C               	movwf	___wmul@multiplicand,c
   531  0010B8  ECF7  F00B         	call	___wmul	;wreg free
   532  0010BC  0E86               	movlw	low sensorUpdate@sensorTemp
   533  0010BE  0100               	movlb	0	; () banked
   534  0010C0  6F84               	movwf	(??_sensorUpdate+4)& (0+255),b
   535  0010C2  0E00               	movlw	high sensorUpdate@sensorTemp
   536  0010C4  0100               	movlb	0	; () banked
   537  0010C6  6F85               	movwf	(??_sensorUpdate+5)& (0+255),b
   538  0010C8  502A               	movf	?___wmul,w,c
   539  0010CA  0100               	movlb	0	; () banked
   540  0010CC  2784               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   541  0010CE  502B               	movf	?___wmul+1,w,c
   542  0010D0  0100               	movlb	0	; () banked
   543  0010D2  2385               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   544  0010D4  90D8               	bcf	status,0,c
   545  0010D6  0100               	movlb	0	; () banked
   546  0010D8  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   547  0010DA  6ED9               	movwf	fsr2l,c
   548  0010DC  0100               	movlb	0	; () banked
   549  0010DE  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   550  0010E0  6EDA               	movwf	fsr2h,c
   551  0010E2  0100               	movlb	0	; () banked
   552  0010E4  5184               	movf	(??_sensorUpdate+4)& (0+255),w,b
   553  0010E6  26D9               	addwf	fsr2l,f,c
   554  0010E8  0100               	movlb	0	; () banked
   555  0010EA  5185               	movf	(??_sensorUpdate+5)& (0+255),w,b
   556  0010EC  22DA               	addwfc	fsr2h,f,c
   557  0010EE  C082  FFDE         	movff	??_sensorUpdate+2,postinc2
   558  0010F2  C083  FFDD         	movff	??_sensorUpdate+3,postdec2
   559                           
   560                           ; BSR set to: 0
   561                           ;user.c: 153: if(j == 0 || j == 3)
   562  0010F6  0100               	movlb	0	; () banked
   563  0010F8  51D8               	movf	sensorUpdate@j& (0+255),w,b
   564  0010FA  0100               	movlb	0	; () banked
   565  0010FC  11D9               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   566  0010FE  B4D8               	btfsc	status,2,c
   567  001100  D007               	goto	l1462
   568                           
   569                           ; BSR set to: 0
   570  001102  0E03               	movlw	3
   571  001104  0100               	movlb	0	; () banked
   572  001106  19D8               	xorwf	sensorUpdate@j& (0+255),w,b
   573  001108  0100               	movlb	0	; () banked
   574  00110A  11D9               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   575  00110C  A4D8               	btfss	status,2,c
   576  00110E  D030               	goto	l1464
   577  001110                     l1462:
   578                           
   579                           ; BSR set to: 0
   580                           ;user.c: 154: sensorTemp[j][i] -= sensorCorrection[j];
   581  001110  C0D8  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   582  001114  C0D9  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   583  001118  0E00               	movlw	0
   584  00111A  6E2D               	movwf	___wmul@multiplicand+1,c
   585  00111C  0E14               	movlw	20
   586  00111E  6E2C               	movwf	___wmul@multiplicand,c
   587  001120  ECF7  F00B         	call	___wmul	;wreg free
   588  001124  0E86               	movlw	low sensorUpdate@sensorTemp
   589  001126  0100               	movlb	0	; () banked
   590  001128  6F80               	movwf	??_sensorUpdate& (0+255),b
   591  00112A  0E00               	movlw	high sensorUpdate@sensorTemp
   592  00112C  0100               	movlb	0	; () banked
   593  00112E  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   594  001130  502A               	movf	?___wmul,w,c
   595  001132  0100               	movlb	0	; () banked
   596  001134  2780               	addwf	??_sensorUpdate& (0+255),f,b
   597  001136  502B               	movf	?___wmul+1,w,c
   598  001138  0100               	movlb	0	; () banked
   599  00113A  2381               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   600  00113C  90D8               	bcf	status,0,c
   601  00113E  0100               	movlb	0	; () banked
   602  001140  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   603  001142  6ED9               	movwf	fsr2l,c
   604  001144  0100               	movlb	0	; () banked
   605  001146  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   606  001148  6EDA               	movwf	fsr2h,c
   607  00114A  0100               	movlb	0	; () banked
   608  00114C  5180               	movf	??_sensorUpdate& (0+255),w,b
   609  00114E  26D9               	addwf	fsr2l,f,c
   610  001150  0100               	movlb	0	; () banked
   611  001152  5181               	movf	(??_sensorUpdate+1)& (0+255),w,b
   612  001154  22DA               	addwfc	fsr2h,f,c
   613  001156  0E01               	movlw	low _sensorCorrection
   614  001158  0100               	movlb	0	; () banked
   615  00115A  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   616  00115C  6EF6               	movwf	tblptrl,c
   617  00115E  0E10               	movlw	high _sensorCorrection
   618  001160  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   619  001162  6EF7               	movwf	tblptrh,c
   620  001164                     	if	0	;There are less than 3 active tblptr bytes
   621  001164                     	endif
   622  001164  0008               	tblrd		*
   623  001166  50F5               	movf	tablat,w,c
   624  001168  5EDE               	subwf	postinc2,f,c
   625  00116A  0E00               	movlw	0
   626  00116C  5ADD               	subwfb	postdec2,f,c
   627  00116E  D030               	goto	l1466
   628  001170                     l1464:
   629                           
   630                           ; BSR set to: 0
   631                           ;user.c: 155: else
   632                           ;user.c: 156: sensorTemp[j][i] += sensorCorrection[j];
   633  001170  C0D8  F02A         	movff	sensorUpdate@j,___wmul@multiplier
   634  001174  C0D9  F02B         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   635  001178  0E00               	movlw	0
   636  00117A  6E2D               	movwf	___wmul@multiplicand+1,c
   637  00117C  0E14               	movlw	20
   638  00117E  6E2C               	movwf	___wmul@multiplicand,c
   639  001180  ECF7  F00B         	call	___wmul	;wreg free
   640  001184  0E86               	movlw	low sensorUpdate@sensorTemp
   641  001186  0100               	movlb	0	; () banked
   642  001188  6F80               	movwf	??_sensorUpdate& (0+255),b
   643  00118A  0E00               	movlw	high sensorUpdate@sensorTemp
   644  00118C  0100               	movlb	0	; () banked
   645  00118E  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   646  001190  502A               	movf	?___wmul,w,c
   647  001192  0100               	movlb	0	; () banked
   648  001194  2780               	addwf	??_sensorUpdate& (0+255),f,b
   649  001196  502B               	movf	?___wmul+1,w,c
   650  001198  0100               	movlb	0	; () banked
   651  00119A  2381               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   652  00119C  90D8               	bcf	status,0,c
   653  00119E  0100               	movlb	0	; () banked
   654  0011A0  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   655  0011A2  6ED9               	movwf	fsr2l,c
   656  0011A4  0100               	movlb	0	; () banked
   657  0011A6  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   658  0011A8  6EDA               	movwf	fsr2h,c
   659  0011AA  0100               	movlb	0	; () banked
   660  0011AC  5180               	movf	??_sensorUpdate& (0+255),w,b
   661  0011AE  26D9               	addwf	fsr2l,f,c
   662  0011B0  0100               	movlb	0	; () banked
   663  0011B2  5181               	movf	(??_sensorUpdate+1)& (0+255),w,b
   664  0011B4  22DA               	addwfc	fsr2h,f,c
   665  0011B6  0E01               	movlw	low _sensorCorrection
   666  0011B8  0100               	movlb	0	; () banked
   667  0011BA  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   668  0011BC  6EF6               	movwf	tblptrl,c
   669  0011BE  0E10               	movlw	high _sensorCorrection
   670  0011C0  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   671  0011C2  6EF7               	movwf	tblptrh,c
   672  0011C4                     	if	0	;There are less than 3 active tblptr bytes
   673  0011C4                     	endif
   674  0011C4  0008               	tblrd		*
   675  0011C6  50F5               	movf	tablat,w,c
   676  0011C8  26DE               	addwf	postinc2,f,c
   677  0011CA  0E00               	movlw	0
   678  0011CC  22DD               	addwfc	postdec2,f,c
   679  0011CE  D000               	goto	l1466
   680  0011D0                     l1466:
   681                           
   682                           ; BSR set to: 0
   683  0011D0  0100               	movlb	0	; () banked
   684  0011D2  4BD8               	infsnz	sensorUpdate@j& (0+255),f,b
   685  0011D4  2BD9               	incf	(sensorUpdate@j+1)& (0+255),f,b
   686                           
   687                           ; BSR set to: 0
   688  0011D6  0100               	movlb	0	; () banked
   689  0011D8  BFD9               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   690  0011DA  D73B               	goto	l1452
   691  0011DC  0100               	movlb	0	; () banked
   692  0011DE  51D9               	movf	(sensorUpdate@j+1)& (0+255),w,b
   693  0011E0  E102               	bnz	l1470
   694  0011E2  D730               	goto	L1
   695  0011E4  D000               	goto	l1470
   696  0011E6                     l1470:
   697                           
   698                           ; BSR set to: 0
   699  0011E6  0100               	movlb	0	; () banked
   700  0011E8  4BD6               	infsnz	sensorUpdate@i& (0+255),f,b
   701  0011EA  2BD7               	incf	(sensorUpdate@i+1)& (0+255),f,b
   702                           
   703                           ; BSR set to: 0
   704  0011EC  0100               	movlb	0	; () banked
   705  0011EE  BFD7               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   706  0011F0  D71E               	goto	l1446
   707  0011F2  0100               	movlb	0	; () banked
   708  0011F4  51D7               	movf	(sensorUpdate@i+1)& (0+255),w,b
   709  0011F6  E102               	bnz	l1474
   710  0011F8  D713               	goto	L2
   711  0011FA  D000               	goto	l1474
   712  0011FC                     l1474:
   713                           
   714                           ; BSR set to: 0
   715                           ;user.c: 157: }
   716                           ;user.c: 158: }
   717                           ;user.c: 161: sensorComputation(sensorTemp);
   718  0011FC  0E86               	movlw	low sensorUpdate@sensorTemp
   719  0011FE  6E35               	movwf	sensorComputation@sensorTemp,c
   720  001200  0E00               	movlw	high sensorUpdate@sensorTemp
   721  001202  6E36               	movwf	sensorComputation@sensorTemp+1,c
   722  001204  EC05  F009         	call	_sensorComputation	;wreg free
   723  001208  0012               	return		;funcret
   724  00120A                     __end_of_sensorUpdate:
   725                           	opt stack 0
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           postinc2	equ	0xFDE
   733                           postdec2	equ	0xFDD
   734                           fsr2h	equ	0xFDA
   735                           fsr2l	equ	0xFD9
   736                           status	equ	0xFD8
   737                           
   738 ;; *************** function _sensorComputation *****************
   739 ;; Defined at:
   740 ;;		line 115 in file "user.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;  sensorTemp      2   52[COMRAM] PTR int [10]
   743 ;;		 -> sensorUpdate@sensorTemp(80), 
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  j               2   64[COMRAM] int 
   746 ;;  i               2   62[COMRAM] int 
   747 ;;  sum             2   60[COMRAM] int 
   748 ;;  min             2   58[COMRAM] int 
   749 ;;  max             2   56[COMRAM] int 
   750 ;; Return value:  Size  Location     Type
   751 ;;		None               void
   752 ;; Registers used:
   753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;Total ram usage:       14 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    5
   766 ;; This function calls:
   767 ;;		_MAX
   768 ;;		_MIN
   769 ;;		___awdiv
   770 ;;		___wmul
   771 ;; This function is called by:
   772 ;;		_sensorUpdate
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text2
   777  00120A                     __ptext2:
   778                           	opt stack 0
   779  00120A                     _sensorComputation:
   780                           	opt stack 24
   781                           
   782                           ;user.c: 117: int max,min,i,j,sum;
   783                           ;user.c: 118: for(i = 0; i < 4 ; i++)
   784                           
   785                           ;incstack = 0
   786  00120A  0E00               	movlw	0
   787  00120C  6E40               	movwf	sensorComputation@i+1,c
   788  00120E  0E00               	movlw	0
   789  001210  6E3F               	movwf	sensorComputation@i,c
   790  001212  BE40               	btfsc	sensorComputation@i+1,7,c
   791  001214  D008               	goto	l1282
   792  001216  5040               	movf	sensorComputation@i+1,w,c
   793  001218  E105               	bnz	u650
   794  00121A  0E04               	movlw	4
   795  00121C  5C3F               	subwf	sensorComputation@i,w,c
   796  00121E  B0D8               	btfsc	status,0,c
   797  001220  D0E5               	goto	l196
   798  001222  D001               	goto	l1282
   799  001224                     u650:
   800  001224  D0E3               	goto	l196
   801  001226                     l1282:
   802                           
   803                           ;user.c: 119: {
   804                           ;user.c: 120: for(j = 0 ; j < 10 ; j++)
   805  001226  0E00               	movlw	0
   806  001228  6E42               	movwf	sensorComputation@j+1,c
   807  00122A  0E00               	movlw	0
   808  00122C  6E41               	movwf	sensorComputation@j,c
   809  00122E  BE42               	btfsc	sensorComputation@j+1,7,c
   810  001230  D008               	goto	l1288
   811  001232  5042               	movf	sensorComputation@j+1,w,c
   812  001234  E105               	bnz	u660
   813  001236  0E0A               	movlw	10
   814  001238  5C41               	subwf	sensorComputation@j,w,c
   815  00123A  B0D8               	btfsc	status,0,c
   816  00123C  D0A8               	goto	l1298
   817  00123E  D001               	goto	l1288
   818  001240                     u660:
   819  001240  D0A6               	goto	l1298
   820  001242                     l1288:
   821                           
   822                           ;user.c: 121: {
   823                           ;user.c: 122: if(j == 0)
   824  001242  5041               	movf	sensorComputation@j,w,c
   825  001244  1042               	iorwf	sensorComputation@j+1,w,c
   826  001246  A4D8               	btfss	status,2,c
   827  001248  D028               	goto	l1292
   828                           
   829                           ;user.c: 123: {
   830                           ;user.c: 124: sum = min = max = sensorTemp[i][j];
   831  00124A  C03F  F02A         	movff	sensorComputation@i,___wmul@multiplier
   832  00124E  C040  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   833  001252  0E00               	movlw	0
   834  001254  6E2D               	movwf	___wmul@multiplicand+1,c
   835  001256  0E14               	movlw	20
   836  001258  6E2C               	movwf	___wmul@multiplicand,c
   837  00125A  ECF7  F00B         	call	___wmul	;wreg free
   838  00125E  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   839  001262  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   840  001266  502A               	movf	?___wmul,w,c
   841  001268  2637               	addwf	??_sensorComputation,f,c
   842  00126A  502B               	movf	?___wmul+1,w,c
   843  00126C  2238               	addwfc	??_sensorComputation+1,f,c
   844  00126E  90D8               	bcf	status,0,c
   845  001270  3441               	rlcf	sensorComputation@j,w,c
   846  001272  6ED9               	movwf	fsr2l,c
   847  001274  3442               	rlcf	sensorComputation@j+1,w,c
   848  001276  6EDA               	movwf	fsr2h,c
   849  001278  5037               	movf	??_sensorComputation,w,c
   850  00127A  26D9               	addwf	fsr2l,f,c
   851  00127C  5038               	movf	??_sensorComputation+1,w,c
   852  00127E  22DA               	addwfc	fsr2h,f,c
   853  001280  CFDE F039          	movff	postinc2,sensorComputation@max
   854  001284  CFDD F03A          	movff	postdec2,sensorComputation@max+1
   855  001288  C039  F03B         	movff	sensorComputation@max,sensorComputation@min
   856  00128C  C03A  F03C         	movff	sensorComputation@max+1,sensorComputation@min+1
   857  001290  C03B  F03D         	movff	sensorComputation@min,sensorComputation@sum
   858  001294  C03C  F03E         	movff	sensorComputation@min+1,sensorComputation@sum+1
   859                           
   860                           ;user.c: 125: continue;
   861  001298  D072               	goto	l1294
   862  00129A                     l1292:
   863                           
   864                           ;user.c: 126: }
   865                           ;user.c: 127: min = MIN(sensorTemp[i][j],min);
   866  00129A  C03F  F02A         	movff	sensorComputation@i,___wmul@multiplier
   867  00129E  C040  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   868  0012A2  0E00               	movlw	0
   869  0012A4  6E2D               	movwf	___wmul@multiplicand+1,c
   870  0012A6  0E14               	movlw	20
   871  0012A8  6E2C               	movwf	___wmul@multiplicand,c
   872  0012AA  ECF7  F00B         	call	___wmul	;wreg free
   873  0012AE  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   874  0012B2  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   875  0012B6  502A               	movf	?___wmul,w,c
   876  0012B8  2637               	addwf	??_sensorComputation,f,c
   877  0012BA  502B               	movf	?___wmul+1,w,c
   878  0012BC  2238               	addwfc	??_sensorComputation+1,f,c
   879  0012BE  90D8               	bcf	status,0,c
   880  0012C0  3441               	rlcf	sensorComputation@j,w,c
   881  0012C2  6ED9               	movwf	fsr2l,c
   882  0012C4  3442               	rlcf	sensorComputation@j+1,w,c
   883  0012C6  6EDA               	movwf	fsr2h,c
   884  0012C8  5037               	movf	??_sensorComputation,w,c
   885  0012CA  26D9               	addwf	fsr2l,f,c
   886  0012CC  5038               	movf	??_sensorComputation+1,w,c
   887  0012CE  22DA               	addwfc	fsr2h,f,c
   888  0012D0  CFDE F030          	movff	postinc2,MIN@a
   889  0012D4  CFDD F031          	movff	postdec2,MIN@a+1
   890  0012D8  C03B  F032         	movff	sensorComputation@min,MIN@b
   891  0012DC  C03C  F033         	movff	sensorComputation@min+1,MIN@b+1
   892  0012E0  EC0B  F00C         	call	_MIN	;wreg free
   893  0012E4  C030  F03B         	movff	?_MIN,sensorComputation@min
   894  0012E8  C031  F03C         	movff	?_MIN+1,sensorComputation@min+1
   895                           
   896                           ;user.c: 128: max = MAX(sensorTemp[i][j],max);
   897  0012EC  C03F  F02A         	movff	sensorComputation@i,___wmul@multiplier
   898  0012F0  C040  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   899  0012F4  0E00               	movlw	0
   900  0012F6  6E2D               	movwf	___wmul@multiplicand+1,c
   901  0012F8  0E14               	movlw	20
   902  0012FA  6E2C               	movwf	___wmul@multiplicand,c
   903  0012FC  ECF7  F00B         	call	___wmul	;wreg free
   904  001300  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   905  001304  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   906  001308  502A               	movf	?___wmul,w,c
   907  00130A  2637               	addwf	??_sensorComputation,f,c
   908  00130C  502B               	movf	?___wmul+1,w,c
   909  00130E  2238               	addwfc	??_sensorComputation+1,f,c
   910  001310  90D8               	bcf	status,0,c
   911  001312  3441               	rlcf	sensorComputation@j,w,c
   912  001314  6ED9               	movwf	fsr2l,c
   913  001316  3442               	rlcf	sensorComputation@j+1,w,c
   914  001318  6EDA               	movwf	fsr2h,c
   915  00131A  5037               	movf	??_sensorComputation,w,c
   916  00131C  26D9               	addwf	fsr2l,f,c
   917  00131E  5038               	movf	??_sensorComputation+1,w,c
   918  001320  22DA               	addwfc	fsr2h,f,c
   919  001322  CFDE F030          	movff	postinc2,MAX@a
   920  001326  CFDD F031          	movff	postdec2,MAX@a+1
   921  00132A  C039  F032         	movff	sensorComputation@max,MAX@b
   922  00132E  C03A  F033         	movff	sensorComputation@max+1,MAX@b+1
   923  001332  EC1F  F00C         	call	_MAX	;wreg free
   924  001336  C030  F039         	movff	?_MAX,sensorComputation@max
   925  00133A  C031  F03A         	movff	?_MAX+1,sensorComputation@max+1
   926                           
   927                           ;user.c: 129: sum += sensorTemp[i][j];
   928  00133E  C03F  F02A         	movff	sensorComputation@i,___wmul@multiplier
   929  001342  C040  F02B         	movff	sensorComputation@i+1,___wmul@multiplier+1
   930  001346  0E00               	movlw	0
   931  001348  6E2D               	movwf	___wmul@multiplicand+1,c
   932  00134A  0E14               	movlw	20
   933  00134C  6E2C               	movwf	___wmul@multiplicand,c
   934  00134E  ECF7  F00B         	call	___wmul	;wreg free
   935  001352  C035  F037         	movff	sensorComputation@sensorTemp,??_sensorComputation
   936  001356  C036  F038         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   937  00135A  502A               	movf	?___wmul,w,c
   938  00135C  2637               	addwf	??_sensorComputation,f,c
   939  00135E  502B               	movf	?___wmul+1,w,c
   940  001360  2238               	addwfc	??_sensorComputation+1,f,c
   941  001362  90D8               	bcf	status,0,c
   942  001364  3441               	rlcf	sensorComputation@j,w,c
   943  001366  6ED9               	movwf	fsr2l,c
   944  001368  3442               	rlcf	sensorComputation@j+1,w,c
   945  00136A  6EDA               	movwf	fsr2h,c
   946  00136C  5037               	movf	??_sensorComputation,w,c
   947  00136E  26D9               	addwf	fsr2l,f,c
   948  001370  5038               	movf	??_sensorComputation+1,w,c
   949  001372  22DA               	addwfc	fsr2h,f,c
   950  001374  50DE               	movf	postinc2,w,c
   951  001376  263D               	addwf	sensorComputation@sum,f,c
   952  001378  50DD               	movf	postdec2,w,c
   953  00137A  223E               	addwfc	sensorComputation@sum+1,f,c
   954  00137C  D000               	goto	l1294
   955  00137E                     l1294:
   956  00137E  4A41               	infsnz	sensorComputation@j,f,c
   957  001380  2A42               	incf	sensorComputation@j+1,f,c
   958  001382  BE42               	btfsc	sensorComputation@j+1,7,c
   959  001384  D75E               	goto	l1288
   960  001386  5042               	movf	sensorComputation@j+1,w,c
   961  001388  E102               	bnz	l1298
   962  00138A  D755               	goto	L3
   963  00138C  D000               	goto	l1298
   964  00138E                     l1298:
   965                           
   966                           ;user.c: 130: }
   967                           ;user.c: 131: sum = sum - min - max;
   968  00138E  5039               	movf	sensorComputation@max,w,c
   969  001390  243B               	addwf	sensorComputation@min,w,c
   970  001392  6E37               	movwf	??_sensorComputation& (0+255),c
   971  001394  503A               	movf	sensorComputation@max+1,w,c
   972  001396  203C               	addwfc	sensorComputation@min+1,w,c
   973  001398  6E38               	movwf	(??_sensorComputation+1)& (0+255),c
   974  00139A  1E37               	comf	??_sensorComputation,f,c
   975  00139C  1E38               	comf	??_sensorComputation+1,f,c
   976  00139E  4A37               	infsnz	??_sensorComputation,f,c
   977  0013A0  2A38               	incf	??_sensorComputation+1,f,c
   978  0013A2  503D               	movf	sensorComputation@sum,w,c
   979  0013A4  2437               	addwf	??_sensorComputation,w,c
   980  0013A6  6E3D               	movwf	sensorComputation@sum,c
   981  0013A8  503E               	movf	sensorComputation@sum+1,w,c
   982  0013AA  2038               	addwfc	??_sensorComputation+1,w,c
   983  0013AC  6E3E               	movwf	sensorComputation@sum+1,c
   984                           
   985                           ;user.c: 132: sensorValue[i] = sum/(10-2);
   986  0013AE  C03D  F02A         	movff	sensorComputation@sum,___awdiv@dividend
   987  0013B2  C03E  F02B         	movff	sensorComputation@sum+1,___awdiv@dividend+1
   988  0013B6  0E00               	movlw	0
   989  0013B8  6E2D               	movwf	___awdiv@divisor+1,c
   990  0013BA  0E08               	movlw	8
   991  0013BC  6E2C               	movwf	___awdiv@divisor,c
   992  0013BE  EC70  F00B         	call	___awdiv	;wreg free
   993  0013C2  90D8               	bcf	status,0,c
   994  0013C4  343F               	rlcf	sensorComputation@i,w,c
   995  0013C6  6ED9               	movwf	fsr2l,c
   996  0013C8  3440               	rlcf	sensorComputation@i+1,w,c
   997  0013CA  6EDA               	movwf	fsr2h,c
   998  0013CC  0E43               	movlw	low _sensorValue
   999  0013CE  26D9               	addwf	fsr2l,f,c
  1000  0013D0  0E00               	movlw	high _sensorValue
  1001  0013D2  22DA               	addwfc	fsr2h,f,c
  1002  0013D4  C02A  FFDE         	movff	?___awdiv,postinc2
  1003  0013D8  C02B  FFDD         	movff	?___awdiv+1,postdec2
  1004  0013DC  4A3F               	infsnz	sensorComputation@i,f,c
  1005  0013DE  2A40               	incf	sensorComputation@i+1,f,c
  1006  0013E0  BE40               	btfsc	sensorComputation@i+1,7,c
  1007  0013E2  D721               	goto	l1282
  1008  0013E4  5040               	movf	sensorComputation@i+1,w,c
  1009  0013E6  E102               	bnz	l196
  1010  0013E8  D718               	goto	L4
  1011  0013EA  D000               	goto	l196
  1012  0013EC                     l196:
  1013  0013EC  0012               	return		;funcret
  1014  0013EE                     __end_of_sensorComputation:
  1015                           	opt stack 0
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postinc2	equ	0xFDE
  1023                           postdec2	equ	0xFDD
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function ___wmul *****************
  1029 ;; Defined at:
  1030 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  multiplier      2   41[COMRAM] unsigned int 
  1033 ;;  multiplicand    2   43[COMRAM] unsigned int 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  product         2   45[COMRAM] unsigned int 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  2   41[COMRAM] unsigned int 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, status,0, prodl, prodh
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;Total ram usage:        6 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    4
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_sensorComputation
  1056 ;;		_sensorUpdate
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text3
  1061  0017EE                     __ptext3:
  1062                           	opt stack 0
  1063  0017EE                     ___wmul:
  1064                           	opt stack 24
  1065                           
  1066                           ;incstack = 0
  1067  0017EE  502A               	movf	___wmul@multiplier,w,c
  1068  0017F0  022C               	mulwf	___wmul@multiplicand,c
  1069  0017F2  CFF3 F02E          	movff	prodl,___wmul@product
  1070  0017F6  CFF4 F02F          	movff	prodh,___wmul@product+1
  1071  0017FA  502A               	movf	___wmul@multiplier,w,c
  1072  0017FC  022D               	mulwf	___wmul@multiplicand+1,c
  1073  0017FE  50F3               	movf	prodl,w,c
  1074  001800  262F               	addwf	___wmul@product+1,f,c
  1075  001802  502B               	movf	___wmul@multiplier+1,w,c
  1076  001804  022C               	mulwf	___wmul@multiplicand,c
  1077  001806  50F3               	movf	prodl,w,c
  1078  001808  262F               	addwf	___wmul@product+1,f,c
  1079  00180A  C02E  F02A         	movff	___wmul@product,?___wmul
  1080  00180E  C02F  F02B         	movff	___wmul@product+1,?___wmul+1
  1081  001812  D000               	goto	l221
  1082  001814                     l221:
  1083  001814  0012               	return		;funcret
  1084  001816                     __end_of___wmul:
  1085                           	opt stack 0
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           prodh	equ	0xFF4
  1091                           prodl	equ	0xFF3
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           postinc2	equ	0xFDE
  1095                           postdec2	equ	0xFDD
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function ___awdiv *****************
  1101 ;; Defined at:
  1102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  dividend        2   41[COMRAM] int 
  1105 ;;  divisor         2   43[COMRAM] int 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  quotient        2   47[COMRAM] int 
  1108 ;;  sign            1   46[COMRAM] unsigned char 
  1109 ;;  counter         1   45[COMRAM] unsigned char 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  2   41[COMRAM] int 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2, status,0
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;Total ram usage:        8 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    4
  1126 ;; This function calls:
  1127 ;;		Nothing
  1128 ;; This function is called by:
  1129 ;;		_sensorComputation
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text4
  1134  0016E0                     __ptext4:
  1135                           	opt stack 0
  1136  0016E0                     ___awdiv:
  1137                           	opt stack 24
  1138                           
  1139                           ;incstack = 0
  1140  0016E0  0E00               	movlw	0
  1141  0016E2  6E2F               	movwf	___awdiv@sign,c
  1142  0016E4  AE2D               	btfss	___awdiv@divisor+1,7,c
  1143  0016E6  D007               	goto	l1148
  1144  0016E8  6C2C               	negf	___awdiv@divisor,c
  1145  0016EA  1E2D               	comf	___awdiv@divisor+1,f,c
  1146  0016EC  B0D8               	btfsc	status,0,c
  1147  0016EE  2A2D               	incf	___awdiv@divisor+1,f,c
  1148  0016F0  0E01               	movlw	1
  1149  0016F2  6E2F               	movwf	___awdiv@sign,c
  1150  0016F4  D000               	goto	l1148
  1151  0016F6                     l1148:
  1152  0016F6  AE2B               	btfss	___awdiv@dividend+1,7,c
  1153  0016F8  D007               	goto	l1154
  1154  0016FA  6C2A               	negf	___awdiv@dividend,c
  1155  0016FC  1E2B               	comf	___awdiv@dividend+1,f,c
  1156  0016FE  B0D8               	btfsc	status,0,c
  1157  001700  2A2B               	incf	___awdiv@dividend+1,f,c
  1158  001702  0E01               	movlw	1
  1159  001704  1A2F               	xorwf	___awdiv@sign,f,c
  1160  001706  D000               	goto	l1154
  1161  001708                     l1154:
  1162  001708  0E00               	movlw	0
  1163  00170A  6E31               	movwf	___awdiv@quotient+1,c
  1164  00170C  0E00               	movlw	0
  1165  00170E  6E30               	movwf	___awdiv@quotient,c
  1166  001710  502C               	movf	___awdiv@divisor,w,c
  1167  001712  102D               	iorwf	___awdiv@divisor+1,w,c
  1168  001714  B4D8               	btfsc	status,2,c
  1169  001716  D021               	goto	l1176
  1170  001718  0E01               	movlw	1
  1171  00171A  6E2E               	movwf	___awdiv@counter,c
  1172  00171C  D005               	goto	l1162
  1173  00171E                     l1160:
  1174  00171E  90D8               	bcf	status,0,c
  1175  001720  362C               	rlcf	___awdiv@divisor,f,c
  1176  001722  362D               	rlcf	___awdiv@divisor+1,f,c
  1177  001724  2A2E               	incf	___awdiv@counter,f,c
  1178  001726  D000               	goto	l1162
  1179  001728                     l1162:
  1180  001728  BE2D               	btfsc	___awdiv@divisor+1,7,c
  1181  00172A  D002               	goto	l1164
  1182  00172C  D7F8               	goto	l1160
  1183  00172E  D000               	goto	l1164
  1184  001730                     l1164:
  1185  001730  90D8               	bcf	status,0,c
  1186  001732  3630               	rlcf	___awdiv@quotient,f,c
  1187  001734  3631               	rlcf	___awdiv@quotient+1,f,c
  1188  001736  502C               	movf	___awdiv@divisor,w,c
  1189  001738  5C2A               	subwf	___awdiv@dividend,w,c
  1190  00173A  502D               	movf	___awdiv@divisor+1,w,c
  1191  00173C  582B               	subwfb	___awdiv@dividend+1,w,c
  1192  00173E  A0D8               	btfss	status,0,c
  1193  001740  D006               	goto	l1172
  1194  001742  502C               	movf	___awdiv@divisor,w,c
  1195  001744  5E2A               	subwf	___awdiv@dividend,f,c
  1196  001746  502D               	movf	___awdiv@divisor+1,w,c
  1197  001748  5A2B               	subwfb	___awdiv@dividend+1,f,c
  1198  00174A  8030               	bsf	___awdiv@quotient,0,c
  1199  00174C  D000               	goto	l1172
  1200  00174E                     l1172:
  1201  00174E  90D8               	bcf	status,0,c
  1202  001750  322D               	rrcf	___awdiv@divisor+1,f,c
  1203  001752  322C               	rrcf	___awdiv@divisor,f,c
  1204  001754  2E2E               	decfsz	___awdiv@counter,f,c
  1205  001756  D7EC               	goto	l1164
  1206  001758  D000               	goto	l1176
  1207  00175A                     l1176:
  1208  00175A  502F               	movf	___awdiv@sign,w,c
  1209  00175C  B4D8               	btfsc	status,2,c
  1210  00175E  D005               	goto	l1180
  1211  001760  6C30               	negf	___awdiv@quotient,c
  1212  001762  1E31               	comf	___awdiv@quotient+1,f,c
  1213  001764  B0D8               	btfsc	status,0,c
  1214  001766  2A31               	incf	___awdiv@quotient+1,f,c
  1215  001768  D000               	goto	l1180
  1216  00176A                     l1180:
  1217  00176A  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  1218  00176E  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  1219  001772  D000               	goto	l414
  1220  001774                     l414:
  1221  001774  0012               	return		;funcret
  1222  001776                     __end_of___awdiv:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           prodh	equ	0xFF4
  1229                           prodl	equ	0xFF3
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           postinc2	equ	0xFDE
  1233                           postdec2	equ	0xFDD
  1234                           fsr2h	equ	0xFDA
  1235                           fsr2l	equ	0xFD9
  1236                           status	equ	0xFD8
  1237                           
  1238 ;; *************** function _MIN *****************
  1239 ;; Defined at:
  1240 ;;		line 165 in file "user.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  a               2   47[COMRAM] int 
  1243 ;;  b               2   49[COMRAM] int 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  2   47[COMRAM] int 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;Total ram usage:        5 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    4
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_sensorComputation
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text5
  1270  001816                     __ptext5:
  1271                           	opt stack 0
  1272  001816                     _MIN:
  1273                           	opt stack 24
  1274                           
  1275                           ;user.c: 167: if(a>b) return b;
  1276                           
  1277                           ;incstack = 0
  1278  001816  5030               	movf	MIN@a,w,c
  1279  001818  5C32               	subwf	MIN@b,w,c
  1280  00181A  5033               	movf	MIN@b+1,w,c
  1281  00181C  0A80               	xorlw	128
  1282  00181E  6E34               	movwf	??_MIN& (0+255),c
  1283  001820  5031               	movf	MIN@a+1,w,c
  1284  001822  0A80               	xorlw	128
  1285  001824  5834               	subwfb	??_MIN& (0+255),w,c
  1286  001826  B0D8               	btfsc	status,0,c
  1287  001828  D005               	goto	l213
  1288  00182A  C032  F030         	movff	MIN@b,?_MIN
  1289  00182E  C033  F031         	movff	MIN@b+1,?_MIN+1
  1290  001832  D004               	goto	l214
  1291  001834                     l213:
  1292                           
  1293                           ;user.c: 168: return a;
  1294  001834  C030  F030         	movff	MIN@a,?_MIN
  1295  001838  C031  F031         	movff	MIN@a+1,?_MIN+1
  1296  00183C                     l214:
  1297  00183C  0012               	return		;funcret
  1298  00183E                     __end_of_MIN:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           prodh	equ	0xFF4
  1305                           prodl	equ	0xFF3
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postinc2	equ	0xFDE
  1309                           postdec2	equ	0xFDD
  1310                           fsr2h	equ	0xFDA
  1311                           fsr2l	equ	0xFD9
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _MAX *****************
  1315 ;; Defined at:
  1316 ;;		line 171 in file "user.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  a               2   47[COMRAM] int 
  1319 ;;  b               2   49[COMRAM] int 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  2   47[COMRAM] int 
  1324 ;; Registers used:
  1325 ;;		wreg, status,2, status,0
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;Total ram usage:        5 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    4
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_sensorComputation
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text6
  1346  00183E                     __ptext6:
  1347                           	opt stack 0
  1348  00183E                     _MAX:
  1349                           	opt stack 24
  1350                           
  1351                           ;user.c: 173: if(a>b) return a;
  1352                           
  1353                           ;incstack = 0
  1354  00183E  5030               	movf	MAX@a,w,c
  1355  001840  5C32               	subwf	MAX@b,w,c
  1356  001842  5033               	movf	MAX@b+1,w,c
  1357  001844  0A80               	xorlw	128
  1358  001846  6E34               	movwf	??_MAX& (0+255),c
  1359  001848  5031               	movf	MAX@a+1,w,c
  1360  00184A  0A80               	xorlw	128
  1361  00184C  5834               	subwfb	??_MAX& (0+255),w,c
  1362  00184E  B0D8               	btfsc	status,0,c
  1363  001850  D005               	goto	l217
  1364  001852  C030  F030         	movff	MAX@a,?_MAX
  1365  001856  C031  F031         	movff	MAX@a+1,?_MAX+1
  1366  00185A  D004               	goto	l218
  1367  00185C                     l217:
  1368                           
  1369                           ;user.c: 174: return b;
  1370  00185C  C032  F030         	movff	MAX@b,?_MAX
  1371  001860  C033  F031         	movff	MAX@b+1,?_MAX+1
  1372  001864                     l218:
  1373  001864  0012               	return		;funcret
  1374  001866                     __end_of_MAX:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postinc2	equ	0xFDE
  1385                           postdec2	equ	0xFDD
  1386                           fsr2h	equ	0xFDA
  1387                           fsr2l	equ	0xFD9
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _InitApp *****************
  1391 ;; Defined at:
  1392 ;;		line 35 in file "user.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;		None               void
  1399 ;; Registers used:
  1400 ;;		wreg, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;Total ram usage:        0 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    5
  1413 ;; This function calls:
  1414 ;;		_delay
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text7
  1421  001776                     __ptext7:
  1422                           	opt stack 0
  1423  001776                     _InitApp:
  1424                           	opt stack 25
  1425                           
  1426                           ;user.c: 39: TRISC = 0;
  1427                           
  1428                           ;incstack = 0
  1429  001776  0E00               	movlw	0
  1430  001778  6E94               	movwf	3988,c	;volatile
  1431                           
  1432                           ;user.c: 43: TRISEbits.TRISE1=1;
  1433  00177A  8296               	bsf	3990,1,c	;volatile
  1434                           
  1435                           ;user.c: 45: TRISEbits.TRISE2=1;
  1436  00177C  8496               	bsf	3990,2,c	;volatile
  1437                           
  1438                           ;user.c: 47: TRISBbits.RB1=1;
  1439  00177E  8293               	bsf	3987,1,c	;volatile
  1440                           
  1441                           ;user.c: 49: TRISBbits.RB0=1;
  1442  001780  8093               	bsf	3987,0,c	;volatile
  1443                           
  1444                           ;user.c: 52: TRISBbits.RB3=1;
  1445  001782  8693               	bsf	3987,3,c	;volatile
  1446                           
  1447                           ;user.c: 54: TRISBbits.RB2=1;
  1448  001784  8493               	bsf	3987,2,c	;volatile
  1449                           
  1450                           ;user.c: 57: if(PORTBbits.RB3 == TRUE)
  1451  001786  A681               	btfss	3969,3,c	;volatile
  1452  001788  D002               	goto	l1370
  1453                           
  1454                           ;user.c: 58: algorithm = LEFTWALL;
  1455  00178A  0E00               	movlw	0
  1456  00178C  D001               	goto	L5
  1457  00178E                     l1370:
  1458                           
  1459                           ;user.c: 59: else
  1460                           ;user.c: 60: algorithm = RIGHTWALL;
  1461  00178E  0E01               	movlw	1
  1462  001790                     L5:
  1463  001790  6E55               	movwf	_algorithm,c
  1464                           
  1465                           ;user.c: 63: ADCON1 =0b00000001;
  1466  001792  0E01               	movlw	1
  1467  001794  6EC1               	movwf	4033,c	;volatile
  1468                           
  1469                           ;user.c: 68: ADCON2=0b00001010;
  1470  001796  0E0A               	movlw	10
  1471  001798  6EC0               	movwf	4032,c	;volatile
  1472                           
  1473                           ;user.c: 73: ADCON0=0b00101011;
  1474  00179A  0E2B               	movlw	43
  1475  00179C  6EC2               	movwf	4034,c	;volatile
  1476                           
  1477                           ;user.c: 82: T0CON = 0b11000100;
  1478  00179E  0EC4               	movlw	196
  1479  0017A0  6ED5               	movwf	4053,c	;volatile
  1480                           
  1481                           ;user.c: 90: INTCON2 = 0b11110100;
  1482  0017A2  0EF4               	movlw	244
  1483  0017A4  6EF1               	movwf	intcon2,c	;volatile
  1484                           
  1485                           ;user.c: 100: INTCON = 0b00100000;
  1486  0017A6  0E20               	movlw	32
  1487  0017A8  6EF2               	movwf	intcon,c	;volatile
  1488                           
  1489                           ;user.c: 111: delay(1000);
  1490  0017AA  0E03               	movlw	3
  1491  0017AC  6E2B               	movwf	delay@ms+1,c
  1492  0017AE  0EE8               	movlw	232
  1493  0017B0  6E2A               	movwf	delay@ms,c
  1494  0017B2  ECDD  F00B         	call	_delay	;wreg free
  1495                           
  1496                           ;user.c: 112: INTCONbits.GIE = 1;
  1497  0017B6  8EF2               	bsf	intcon,7,c	;volatile
  1498  0017B8  0012               	return		;funcret
  1499  0017BA                     __end_of_InitApp:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           prodh	equ	0xFF4
  1506                           prodl	equ	0xFF3
  1507                           intcon	equ	0xFF2
  1508                           intcon2	equ	0xFF1
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           postinc2	equ	0xFDE
  1512                           postdec2	equ	0xFDD
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _delay *****************
  1518 ;; Defined at:
  1519 ;;		line 29 in file "user.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  ms              2   41[COMRAM] unsigned int 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  x               2   44[COMRAM] int 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;		None               void
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;Total ram usage:        5 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    4
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_InitApp
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text8
  1548  0017BA                     __ptext8:
  1549                           	opt stack 0
  1550  0017BA                     _delay:
  1551                           	opt stack 25
  1552                           
  1553                           ;user.c: 30: int x = 0;
  1554                           
  1555                           ;incstack = 0
  1556  0017BA  0E00               	movlw	0
  1557  0017BC  6E2E               	movwf	delay@x+1,c
  1558  0017BE  0E00               	movlw	0
  1559  0017C0  6E2D               	movwf	delay@x,c
  1560                           
  1561                           ;user.c: 31: for (x = 0; x < ms; x++)
  1562  0017C2  0E00               	movlw	0
  1563  0017C4  6E2E               	movwf	delay@x+1,c
  1564  0017C6  0E00               	movlw	0
  1565  0017C8  6E2D               	movwf	delay@x,c
  1566  0017CA  D00A               	goto	l179
  1567  0017CC                     l1272:
  1568                           
  1569                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1570  0017CC  0E0B               	movlw	11
  1571  0017CE  6E2C               	movwf	??_delay& (0+255),c
  1572  0017D0  0E62               	movlw	98
  1573  0017D2                     u1017:
  1574  0017D2  2EE8               	decfsz	wreg,f,c
  1575  0017D4  D7FE               	goto	u1017
  1576  0017D6  2E2C               	decfsz	??_delay& (0+255),f,c
  1577  0017D8  D7FC               	goto	u1017
  1578  0017DA  D000               	nop2	
  1579  0017DC  4A2D               	infsnz	delay@x,f,c
  1580  0017DE  2A2E               	incf	delay@x+1,f,c
  1581  0017E0                     l179:
  1582  0017E0  502A               	movf	delay@ms,w,c
  1583  0017E2  5C2D               	subwf	delay@x,w,c
  1584  0017E4  502B               	movf	delay@ms+1,w,c
  1585  0017E6  582E               	subwfb	delay@x+1,w,c
  1586  0017E8  A0D8               	btfss	status,0,c
  1587  0017EA  D7F0               	goto	l1272
  1588  0017EC  0012               	return		;funcret
  1589  0017EE                     __end_of_delay:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           prodh	equ	0xFF4
  1596                           prodl	equ	0xFF3
  1597                           intcon	equ	0xFF2
  1598                           intcon2	equ	0xFF1
  1599                           postinc0	equ	0xFEE
  1600                           wreg	equ	0xFE8
  1601                           postinc2	equ	0xFDE
  1602                           postdec2	equ	0xFDD
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _ConfigureOscillator *****************
  1608 ;; Defined at:
  1609 ;;		line 24 in file "system.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;		None               void
  1616 ;; Registers used:
  1617 ;;		wreg, status,2
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    4
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text9
  1638  0018BA                     __ptext9:
  1639                           	opt stack 0
  1640  0018BA                     _ConfigureOscillator:
  1641                           	opt stack 26
  1642                           
  1643                           ;system.c: 29: OSCCON = 0b01111100;
  1644                           
  1645                           ;incstack = 0
  1646  0018BA  0E7C               	movlw	124
  1647  0018BC  6ED3               	movwf	4051,c	;volatile
  1648                           
  1649                           ;system.c: 31: OSCTUNE = 0b01001111;
  1650  0018BE  0E4F               	movlw	79
  1651  0018C0  6E9B               	movwf	3995,c	;volatile
  1652  0018C2  0012               	return		;funcret
  1653  0018C4                     __end_of_ConfigureOscillator:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           intcon	equ	0xFF2
  1662                           intcon2	equ	0xFF1
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postinc2	equ	0xFDE
  1666                           postdec2	equ	0xFDD
  1667                           fsr2h	equ	0xFDA
  1668                           fsr2l	equ	0xFD9
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _low_isr *****************
  1672 ;; Defined at:
  1673 ;;		line 113 in file "interrupts.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;		None               void
  1680 ;; Registers used:
  1681 ;;		None
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;Total ram usage:       17 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    3
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		Interrupt level 1
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	intcodelo
  1702  000018                     __pintcodelo:
  1703                           	opt stack 0
  1704  000018                     _low_isr:
  1705                           	opt stack 24
  1706                           
  1707                           ;incstack = 0
  1708  000018  CFD8 F001          	movff	status,??_low_isr
  1709  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1710  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1711  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1712  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1713  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1714  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1715  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1716  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1717  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1718  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1719  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1720  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1721  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1722  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1723  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1724  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1725  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1726  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1727  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1728  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1729  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1730  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1731  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1732  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1733  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1734  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1735  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1736  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1737  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1738  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1739  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1740  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1741  00009C  C001  FFD8         	movff	??_low_isr,status
  1742  0000A0  0010               	retfie	
  1743  0000A2                     __end_of_low_isr:
  1744                           	opt stack 0
  1745                           pclatu	equ	0xFFB
  1746                           pclath	equ	0xFFA
  1747                           tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           intcon	equ	0xFF2
  1754                           intcon2	equ	0xFF1
  1755                           postinc0	equ	0xFEE
  1756                           fsr0h	equ	0xFEA
  1757                           fsr0l	equ	0xFE9
  1758                           wreg	equ	0xFE8
  1759                           fsr1h	equ	0xFE2
  1760                           fsr1l	equ	0xFE1
  1761                           bsr	equ	0xFE0
  1762                           postinc2	equ	0xFDE
  1763                           postdec2	equ	0xFDD
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _high_isr *****************
  1769 ;; Defined at:
  1770 ;;		line 65 in file "interrupts.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;		None               void
  1777 ;; Registers used:
  1778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;Total ram usage:       14 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    2
  1791 ;; This function calls:
  1792 ;;		_KController
  1793 ;;		_merge
  1794 ;;		_motorCounterUpdate
  1795 ;;		_moveMouse
  1796 ;; This function is called by:
  1797 ;;		Interrupt level 2
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	intcode
  1802  000008                     __pintcode:
  1803                           	opt stack 0
  1804  000008                     _high_isr:
  1805                           	opt stack 24
  1806                           
  1807                           ;incstack = 0
  1808  000008  CFFA F01C          	movff	pclath,??_high_isr
  1809  00000C  CFFB F01D          	movff	pclatu,??_high_isr+1
  1810  000010  CFE9 F01E          	movff	fsr0l,??_high_isr+2
  1811  000014  ED05  F00B         	call	int_func,f	;refresh shadow registers
  1812                           pclatu	equ	0xFFB
  1813                           pclath	equ	0xFFA
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           intcon2	equ	0xFF1
  1822                           postinc0	equ	0xFEE
  1823                           fsr0h	equ	0xFEA
  1824                           fsr0l	equ	0xFE9
  1825                           wreg	equ	0xFE8
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           bsr	equ	0xFE0
  1829                           postinc2	equ	0xFDE
  1830                           postdec2	equ	0xFDD
  1831                           fsr2h	equ	0xFDA
  1832                           fsr2l	equ	0xFD9
  1833                           status	equ	0xFD8
  1834                           
  1835                           	psect	intcode_body
  1836  00160A                     __pintcode_body:
  1837                           	opt stack 24
  1838  00160A                     int_func:
  1839                           	opt stack 24
  1840  00160A  0006               	pop		; remove dummy address from shadow register refresh
  1841  00160C  CFEA F01F          	movff	fsr0h,??_high_isr+3
  1842  001610  CFE1 F020          	movff	fsr1l,??_high_isr+4
  1843  001614  CFE2 F021          	movff	fsr1h,??_high_isr+5
  1844  001618  CFD9 F022          	movff	fsr2l,??_high_isr+6
  1845  00161C  CFDA F023          	movff	fsr2h,??_high_isr+7
  1846  001620  CFF3 F024          	movff	prodl,??_high_isr+8
  1847  001624  CFF4 F025          	movff	prodh,??_high_isr+9
  1848  001628  CFF6 F026          	movff	tblptrl,??_high_isr+10
  1849  00162C  CFF7 F027          	movff	tblptrh,??_high_isr+11
  1850  001630  CFF8 F028          	movff	tblptru,??_high_isr+12
  1851  001634  CFF5 F029          	movff	tablat,??_high_isr+13
  1852                           
  1853                           ;interrupts.c: 84: if(INTCONbits.TMR0IF == 1)
  1854  001638  A4F2               	btfss	intcon,2,c	;volatile
  1855  00163A  D035               	goto	i2l38
  1856                           
  1857                           ;interrupts.c: 85: {
  1858                           ;interrupts.c: 86: if(MotorDelayCounter > 3)
  1859  00163C  BE4E               	btfsc	_MotorDelayCounter+1,7,c
  1860  00163E  D02F               	goto	i2l1430
  1861  001640  504E               	movf	_MotorDelayCounter+1,w,c
  1862  001642  E104               	bnz	i2u90_40
  1863  001644  0E04               	movlw	4
  1864  001646  5C4D               	subwf	_MotorDelayCounter,w,c
  1865  001648  A0D8               	btfss	status,0,c
  1866  00164A  D029               	goto	i2l1430
  1867  00164C                     i2u90_40:
  1868                           
  1869                           ;interrupts.c: 87: {
  1870                           ;interrupts.c: 90: if(sensorValue[0] > 100 && sensorValue[1] > 100)
  1871  00164C  BE44               	btfsc	_sensorValue+1,7,c
  1872  00164E  D011               	goto	i2l1422
  1873  001650  5044               	movf	_sensorValue+1,w,c
  1874  001652  E104               	bnz	i2u91_40
  1875  001654  0E65               	movlw	101
  1876  001656  5C43               	subwf	_sensorValue,w,c
  1877  001658  A0D8               	btfss	status,0,c
  1878  00165A  D00B               	goto	i2l1422
  1879  00165C                     i2u91_40:
  1880  00165C  BE46               	btfsc	_sensorValue+3,7,c
  1881  00165E  D009               	goto	i2l1422
  1882  001660  5046               	movf	_sensorValue+3,w,c
  1883  001662  E104               	bnz	i2u92_40
  1884  001664  0E65               	movlw	101
  1885  001666  5C45               	subwf	_sensorValue+2,w,c
  1886  001668  A0D8               	btfss	status,0,c
  1887  00166A  D003               	goto	i2l1422
  1888  00166C                     i2u92_40:
  1889                           
  1890                           ;interrupts.c: 91: {
  1891                           ;interrupts.c: 92: KController();
  1892  00166C  ECF7  F009         	call	_KController	;wreg free
  1893  001670  D000               	goto	i2l1422
  1894  001672                     i2l1422:
  1895                           
  1896                           ;interrupts.c: 93: }
  1897                           ;interrupts.c: 96: motorCounterUpdate(RIGHT,0);
  1898  001672  0E00               	movlw	0
  1899  001674  6E12               	movwf	motorCounterUpdate@reverse,c
  1900  001676  0E01               	movlw	1
  1901  001678  EC8B  F00A         	call	_motorCounterUpdate
  1902                           
  1903                           ;interrupts.c: 97: motorCounterUpdate(LEFT,0);
  1904  00167C  0E00               	movlw	0
  1905  00167E  6E12               	movwf	motorCounterUpdate@reverse,c
  1906  001680  0E00               	movlw	0
  1907  001682  EC8B  F00A         	call	_motorCounterUpdate
  1908                           
  1909                           ;interrupts.c: 98: moveMouse(merge(LMotorCounter,RMotorCounter));
  1910  001686  C054  F012         	movff	_RMotorCounter,merge@right
  1911  00168A  5053               	movf	_LMotorCounter,w,c
  1912  00168C  EC55  F00C         	call	_merge
  1913  001690  EC62  F00C         	call	_moveMouse
  1914                           
  1915                           ;interrupts.c: 100: MotorDelayCounter = 0;
  1916  001694  0E00               	movlw	0
  1917  001696  6E4E               	movwf	_MotorDelayCounter+1,c
  1918  001698  0E00               	movlw	0
  1919  00169A  6E4D               	movwf	_MotorDelayCounter,c
  1920  00169C  D000               	goto	i2l1430
  1921  00169E                     i2l1430:
  1922                           
  1923                           ;interrupts.c: 101: }
  1924                           ;interrupts.c: 103: MotorDelayCounter++;
  1925  00169E  4A4D               	infsnz	_MotorDelayCounter,f,c
  1926  0016A0  2A4E               	incf	_MotorDelayCounter+1,f,c
  1927                           
  1928                           ;interrupts.c: 104: INTCONbits.TMR0IF = 0;
  1929  0016A2  94F2               	bcf	intcon,2,c	;volatile
  1930  0016A4  D000               	goto	i2l38
  1931  0016A6                     i2l38:
  1932  0016A6  C029  FFF5         	movff	??_high_isr+13,tablat
  1933  0016AA  C028  FFF8         	movff	??_high_isr+12,tblptru
  1934  0016AE  C027  FFF7         	movff	??_high_isr+11,tblptrh
  1935  0016B2  C026  FFF6         	movff	??_high_isr+10,tblptrl
  1936  0016B6  C025  FFF4         	movff	??_high_isr+9,prodh
  1937  0016BA  C024  FFF3         	movff	??_high_isr+8,prodl
  1938  0016BE  C023  FFDA         	movff	??_high_isr+7,fsr2h
  1939  0016C2  C022  FFD9         	movff	??_high_isr+6,fsr2l
  1940  0016C6  C021  FFE2         	movff	??_high_isr+5,fsr1h
  1941  0016CA  C020  FFE1         	movff	??_high_isr+4,fsr1l
  1942  0016CE  C01F  FFEA         	movff	??_high_isr+3,fsr0h
  1943  0016D2  C01E  FFE9         	movff	??_high_isr+2,fsr0l
  1944  0016D6  C01D  FFFB         	movff	??_high_isr+1,pclatu
  1945  0016DA  C01C  FFFA         	movff	??_high_isr,pclath
  1946  0016DE  0011               	retfie		f
  1947  0016E0                     __end_of_high_isr:
  1948                           	opt stack 0
  1949                           pclatu	equ	0xFFB
  1950                           pclath	equ	0xFFA
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           prodh	equ	0xFF4
  1956                           prodl	equ	0xFF3
  1957                           intcon	equ	0xFF2
  1958                           intcon2	equ	0xFF1
  1959                           postinc0	equ	0xFEE
  1960                           fsr0h	equ	0xFEA
  1961                           fsr0l	equ	0xFE9
  1962                           wreg	equ	0xFE8
  1963                           fsr1h	equ	0xFE2
  1964                           fsr1l	equ	0xFE1
  1965                           bsr	equ	0xFE0
  1966                           postinc2	equ	0xFDE
  1967                           postdec2	equ	0xFDD
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _KController *****************
  1973 ;; Defined at:
  1974 ;;		line 215 in file "interrupts.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;		None
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  steps           2   25[COMRAM] int 
  1979 ;;  diff            2   23[COMRAM] int 
  1980 ;;  correctTo       1   22[COMRAM] enum E4081
  1981 ;; Return value:  Size  Location     Type
  1982 ;;		None               void
  1983 ;; Registers used:
  1984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        7 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    1
  1997 ;; This function calls:
  1998 ;;		_ABS
  1999 ;;		_merge
  2000 ;;		_motorCounterUpdate
  2001 ;;		_moveMouse
  2002 ;; This function is called by:
  2003 ;;		_high_isr
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text12
  2008  0013EE                     __ptext12:
  2009                           	opt stack 0
  2010  0013EE                     _KController:
  2011                           	opt stack 24
  2012                           
  2013                           ;interrupts.c: 217: Side correctTo;
  2014                           ;interrupts.c: 218: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2015                           
  2016                           ;incstack = 0
  2017  0013EE  EE20  F045         	lfsr	2,_sensorValue+2
  2018  0013F2  CFDE F015          	movff	postinc2,??_KController
  2019  0013F6  CFDD F016          	movff	postdec2,??_KController+1
  2020  0013FA  1E15               	comf	??_KController,f,c
  2021  0013FC  1E16               	comf	??_KController+1,f,c
  2022  0013FE  4A15               	infsnz	??_KController,f,c
  2023  001400  2A16               	incf	??_KController+1,f,c
  2024  001402  5043               	movf	_sensorValue,w,c
  2025  001404  2415               	addwf	??_KController,w,c
  2026  001406  6E12               	movwf	ABS@x,c
  2027  001408  5044               	movf	_sensorValue+1,w,c
  2028  00140A  2016               	addwfc	??_KController+1,w,c
  2029  00140C  6E13               	movwf	ABS@x+1,c
  2030  00140E  EC33  F00C         	call	_ABS	;wreg free
  2031  001412  C012  F018         	movff	?_ABS,KController@diff
  2032  001416  C013  F019         	movff	?_ABS+1,KController@diff+1
  2033                           
  2034                           ;interrupts.c: 220: int steps = 0;
  2035  00141A  0E00               	movlw	0
  2036  00141C  6E1B               	movwf	KController@steps+1,c
  2037  00141E  0E00               	movlw	0
  2038  001420  6E1A               	movwf	KController@steps,c
  2039                           
  2040                           ;interrupts.c: 221: if(diff <= 10)
  2041  001422  BE19               	btfsc	KController@diff+1,7,c
  2042  001424  D006               	goto	i2l1312
  2043  001426  5019               	movf	KController@diff+1,w,c
  2044  001428  E108               	bnz	i2l1314
  2045  00142A  0E0B               	movlw	11
  2046  00142C  5C18               	subwf	KController@diff,w,c
  2047  00142E  B0D8               	btfsc	status,0,c
  2048  001430  D004               	goto	i2l1314
  2049  001432                     i2l1312:
  2050                           
  2051                           ;interrupts.c: 222: steps = 0;
  2052  001432  0E00               	movlw	0
  2053  001434  6E1B               	movwf	KController@steps+1,c
  2054  001436  0E00               	movlw	0
  2055  001438  D027               	goto	L7
  2056  00143A                     i2l1314:
  2057                           
  2058                           ;interrupts.c: 223: else if(diff > 10 && diff <= 60)
  2059  00143A  BE19               	btfsc	KController@diff+1,7,c
  2060  00143C  D012               	goto	i2l1320
  2061  00143E  5019               	movf	KController@diff+1,w,c
  2062  001440  E104               	bnz	i2u71_40
  2063  001442  0E0B               	movlw	11
  2064  001444  5C18               	subwf	KController@diff,w,c
  2065  001446  A0D8               	btfss	status,0,c
  2066  001448  D00C               	goto	i2l1320
  2067  00144A                     i2u71_40:
  2068  00144A  BE19               	btfsc	KController@diff+1,7,c
  2069  00144C  D006               	goto	i2l1318
  2070  00144E  5019               	movf	KController@diff+1,w,c
  2071  001450  E108               	bnz	i2l1320
  2072  001452  0E3D               	movlw	61
  2073  001454  5C18               	subwf	KController@diff,w,c
  2074  001456  B0D8               	btfsc	status,0,c
  2075  001458  D004               	goto	i2l1320
  2076  00145A                     i2l1318:
  2077                           
  2078                           ;interrupts.c: 224: steps = 10;
  2079  00145A  0E00               	movlw	0
  2080  00145C  6E1B               	movwf	KController@steps+1,c
  2081  00145E  0E0A               	movlw	10
  2082  001460  D013               	goto	L7
  2083  001462                     i2l1320:
  2084                           
  2085                           ;interrupts.c: 225: else if(diff > 60 && diff >= 120)
  2086  001462  BE19               	btfsc	KController@diff+1,7,c
  2087  001464  D013               	goto	i2l1326
  2088  001466  5019               	movf	KController@diff+1,w,c
  2089  001468  E104               	bnz	i2u73_40
  2090  00146A  0E3D               	movlw	61
  2091  00146C  5C18               	subwf	KController@diff,w,c
  2092  00146E  A0D8               	btfss	status,0,c
  2093  001470  D00D               	goto	i2l1326
  2094  001472                     i2u73_40:
  2095  001472  BE19               	btfsc	KController@diff+1,7,c
  2096  001474  D00B               	goto	i2l1326
  2097  001476  5019               	movf	KController@diff+1,w,c
  2098  001478  E104               	bnz	i2u74_40
  2099  00147A  0E78               	movlw	120
  2100  00147C  5C18               	subwf	KController@diff,w,c
  2101  00147E  A0D8               	btfss	status,0,c
  2102  001480  D005               	goto	i2l1326
  2103  001482                     i2u74_40:
  2104                           
  2105                           ;interrupts.c: 226: steps = 40;
  2106  001482  0E00               	movlw	0
  2107  001484  6E1B               	movwf	KController@steps+1,c
  2108  001486  0E28               	movlw	40
  2109  001488                     L7:
  2110  001488  6E1A               	movwf	KController@steps,c
  2111  00148A  D000               	goto	i2l1326
  2112  00148C                     i2l1326:
  2113                           
  2114                           ;interrupts.c: 229: if(sensorValue[0] > sensorValue[1])
  2115  00148C  5043               	movf	_sensorValue,w,c
  2116  00148E  5C45               	subwf	_sensorValue+2,w,c
  2117  001490  5046               	movf	_sensorValue+3,w,c
  2118  001492  0A80               	xorlw	128
  2119  001494  6E15               	movwf	??_KController& (0+255),c
  2120  001496  5044               	movf	_sensorValue+1,w,c
  2121  001498  0A80               	xorlw	128
  2122  00149A  5815               	subwfb	??_KController& (0+255),w,c
  2123  00149C  B0D8               	btfsc	status,0,c
  2124  00149E  D01D               	goto	i2l1340
  2125                           
  2126                           ;interrupts.c: 230: {
  2127                           ;interrupts.c: 231: correctTo = LEFT;
  2128  0014A0  0E00               	movlw	0
  2129  0014A2  6E17               	movwf	KController@correctTo,c
  2130  0014A4                     i2l1330:
  2131                           
  2132                           ;interrupts.c: 232: for(;steps > 0; steps--)
  2133  0014A4  BE1B               	btfsc	KController@steps+1,7,c
  2134  0014A6  D036               	goto	i2l103
  2135  0014A8  501B               	movf	KController@steps+1,w,c
  2136  0014AA  E105               	bnz	i2l1334
  2137  0014AC  041A               	decf	KController@steps,w,c
  2138  0014AE  A0D8               	btfss	status,0,c
  2139  0014B0  D031               	goto	i2l103
  2140  0014B2  D001               	goto	i2l1334
  2141  0014B4  D02F               	goto	i2l103
  2142  0014B6                     i2l1334:
  2143                           
  2144                           ;interrupts.c: 233: {
  2145                           ;interrupts.c: 234: motorCounterUpdate(correctTo,0);
  2146  0014B6  0E00               	movlw	0
  2147  0014B8  6E12               	movwf	motorCounterUpdate@reverse,c
  2148  0014BA  5017               	movf	KController@correctTo,w,c
  2149  0014BC  EC8B  F00A         	call	_motorCounterUpdate
  2150                           
  2151                           ;interrupts.c: 235: moveMouse(merge(LMotorCounter,RMotorCounter));
  2152  0014C0  C054  F012         	movff	_RMotorCounter,merge@right
  2153  0014C4  5053               	movf	_LMotorCounter,w,c
  2154  0014C6  EC55  F00C         	call	_merge
  2155  0014CA  EC62  F00C         	call	_moveMouse
  2156  0014CE  061A               	decf	KController@steps,f,c
  2157  0014D0  A0D8               	btfss	status,0,c
  2158  0014D2  061B               	decf	KController@steps+1,f,c
  2159  0014D4  D7E7               	goto	i2l1330
  2160  0014D6  D7EF               	goto	i2l1334
  2161                           
  2162                           ;interrupts.c: 236: }
  2163                           ;interrupts.c: 237: }
  2164  0014D8  D01D               	goto	i2l103
  2165  0014DA                     i2l1340:
  2166                           
  2167                           ;interrupts.c: 238: else
  2168                           ;interrupts.c: 239: {
  2169                           ;interrupts.c: 240: correctTo = RIGHT;
  2170  0014DA  0E01               	movlw	1
  2171  0014DC  6E17               	movwf	KController@correctTo,c
  2172  0014DE                     i2l1342:
  2173                           
  2174                           ;interrupts.c: 241: for(;steps > 0; steps--)
  2175  0014DE  BE1B               	btfsc	KController@steps+1,7,c
  2176  0014E0  D019               	goto	i2l103
  2177  0014E2  501B               	movf	KController@steps+1,w,c
  2178  0014E4  E105               	bnz	i2l1346
  2179  0014E6  041A               	decf	KController@steps,w,c
  2180  0014E8  A0D8               	btfss	status,0,c
  2181  0014EA  D014               	goto	i2l103
  2182  0014EC  D001               	goto	i2l1346
  2183  0014EE  D012               	goto	i2l103
  2184  0014F0                     i2l1346:
  2185                           
  2186                           ;interrupts.c: 242: {
  2187                           ;interrupts.c: 243: motorCounterUpdate(correctTo,0);
  2188  0014F0  0E00               	movlw	0
  2189  0014F2  6E12               	movwf	motorCounterUpdate@reverse,c
  2190  0014F4  5017               	movf	KController@correctTo,w,c
  2191  0014F6  EC8B  F00A         	call	_motorCounterUpdate
  2192                           
  2193                           ;interrupts.c: 244: moveMouse(merge(LMotorCounter,RMotorCounter));
  2194  0014FA  C054  F012         	movff	_RMotorCounter,merge@right
  2195  0014FE  5053               	movf	_LMotorCounter,w,c
  2196  001500  EC55  F00C         	call	_merge
  2197  001504  EC62  F00C         	call	_moveMouse
  2198  001508  061A               	decf	KController@steps,f,c
  2199  00150A  A0D8               	btfss	status,0,c
  2200  00150C  061B               	decf	KController@steps+1,f,c
  2201  00150E  D7E7               	goto	i2l1342
  2202  001510  D7EF               	goto	i2l1346
  2203  001512  D000               	goto	i2l103
  2204  001514                     i2l103:
  2205  001514  0012               	return		;funcret
  2206  001516                     __end_of_KController:
  2207                           	opt stack 0
  2208                           pclatu	equ	0xFFB
  2209                           pclath	equ	0xFFA
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           prodh	equ	0xFF4
  2215                           prodl	equ	0xFF3
  2216                           intcon	equ	0xFF2
  2217                           intcon2	equ	0xFF1
  2218                           postinc0	equ	0xFEE
  2219                           fsr0h	equ	0xFEA
  2220                           fsr0l	equ	0xFE9
  2221                           wreg	equ	0xFE8
  2222                           fsr1h	equ	0xFE2
  2223                           fsr1l	equ	0xFE1
  2224                           bsr	equ	0xFE0
  2225                           postinc2	equ	0xFDE
  2226                           postdec2	equ	0xFDD
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _moveMouse *****************
  2232 ;; Defined at:
  2233 ;;		line 202 in file "interrupts.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  action          1    wreg     unsigned char 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  action          1   17[COMRAM] unsigned char 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:        1 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_high_isr
  2257 ;;		_KController
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text13
  2262  0018C4                     __ptext13:
  2263                           	opt stack 0
  2264  0018C4                     _moveMouse:
  2265                           	opt stack 25
  2266                           
  2267                           ;incstack = 0
  2268                           ;moveMouse@action stored from wreg
  2269  0018C4  6E12               	movwf	moveMouse@action,c
  2270                           
  2271                           ;interrupts.c: 204: LATC = action;
  2272  0018C6  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2273  0018CA  0012               	return		;funcret
  2274  0018CC                     __end_of_moveMouse:
  2275                           	opt stack 0
  2276                           pclatu	equ	0xFFB
  2277                           pclath	equ	0xFFA
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           intcon2	equ	0xFF1
  2286                           postinc0	equ	0xFEE
  2287                           fsr0h	equ	0xFEA
  2288                           fsr0l	equ	0xFE9
  2289                           wreg	equ	0xFE8
  2290                           fsr1h	equ	0xFE2
  2291                           fsr1l	equ	0xFE1
  2292                           bsr	equ	0xFE0
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _motorCounterUpdate *****************
  2300 ;; Defined at:
  2301 ;;		line 150 in file "interrupts.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  side            1    wreg     enum E4081
  2304 ;;  reverse         1   17[COMRAM] unsigned char 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  side            1   18[COMRAM] enum E4081
  2307 ;; Return value:  Size  Location     Type
  2308 ;;		None               void
  2309 ;; Registers used:
  2310 ;;		wreg, status,2, status,0
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        2 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_high_isr
  2326 ;;		_KController
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text14
  2331  001516                     __ptext14:
  2332                           	opt stack 0
  2333  001516                     _motorCounterUpdate:
  2334                           	opt stack 25
  2335                           
  2336                           ;incstack = 0
  2337                           ;motorCounterUpdate@side stored from wreg
  2338  001516  6E13               	movwf	motorCounterUpdate@side,c
  2339                           
  2340                           ;interrupts.c: 152: if(side == LEFT && reverse == 0)
  2341  001518  5013               	movf	motorCounterUpdate@side,w,c
  2342  00151A  A4D8               	btfss	status,2,c
  2343  00151C  D01B               	goto	i2l1202
  2344  00151E  5012               	movf	motorCounterUpdate@reverse,w,c
  2345  001520  B4D8               	btfsc	status,2,c
  2346  001522  D00B               	goto	i2l1200
  2347  001524  D017               	goto	i2l1202
  2348                           
  2349                           ;interrupts.c: 153: {
  2350                           ;interrupts.c: 154: switch(LMotorCounter)
  2351  001526  D009               	goto	i2l1200
  2352  001528                     i2l1190:
  2353  001528  0E02               	movlw	2
  2354  00152A  D004               	goto	L10
  2355  00152C                     i2l1192:
  2356  00152C  0E04               	movlw	4
  2357  00152E  D002               	goto	L10
  2358                           
  2359                           ;interrupts.c: 158: case 0b00000100: LMotorCounter = 0b00001000; break;
  2360  001530  D03E               	goto	i2l1234
  2361                           
  2362                           ;interrupts.c: 159: case 0b00001000: LMotorCounter = 0b00000001; break;
  2363  001532  D039               	goto	i2l1228
  2364  001534                     L10:
  2365  001534  6E53               	movwf	_LMotorCounter,c
  2366  001536  D068               	goto	i2l79
  2367                           
  2368                           ;interrupts.c: 160: default: LMotorCounter = 0b00000001;
  2369  001538  D036               	goto	i2l1228
  2370  00153A                     i2l1200:
  2371  00153A  5053               	movf	_LMotorCounter,w,c
  2372                           
  2373                           ; Switch size 1, requested type "space"
  2374                           ; Number of cases is 4, Range of values is 1 to 8
  2375                           ; switch strategies available:
  2376                           ; Name         Instructions Cycles
  2377                           ; simple_byte           13     7 (average)
  2378                           ;	Chosen strategy is simple_byte
  2379  00153C  0A01               	xorlw	1	; case 1
  2380  00153E  B4D8               	btfsc	status,2,c
  2381  001540  D7F3               	goto	i2l1190
  2382  001542  0A03               	xorlw	3	; case 2
  2383  001544  B4D8               	btfsc	status,2,c
  2384  001546  D7F2               	goto	i2l1192
  2385  001548  0A06               	xorlw	6	; case 4
  2386  00154A  B4D8               	btfsc	status,2,c
  2387  00154C  D030               	goto	i2l1234
  2388  00154E  0A0C               	xorlw	12	; case 8
  2389  001550  D02A               	goto	i2l1228
  2390                           
  2391                           ;interrupts.c: 162: } else if(side == RIGHT && reverse == 0)
  2392  001552  D05A               	goto	i2l79
  2393  001554                     i2l1202:
  2394  001554  0413               	decf	motorCounterUpdate@side,w,c
  2395  001556  A4D8               	btfss	status,2,c
  2396  001558  D01D               	goto	i2l1220
  2397  00155A  5012               	movf	motorCounterUpdate@reverse,w,c
  2398  00155C  B4D8               	btfsc	status,2,c
  2399  00155E  D00B               	goto	i2l1218
  2400  001560  D019               	goto	i2l1220
  2401                           
  2402                           ;interrupts.c: 163: {
  2403                           ;interrupts.c: 164: switch(RMotorCounter)
  2404  001562  D009               	goto	i2l1218
  2405  001564                     i2l1208:
  2406  001564  0E08               	movlw	8
  2407  001566  D040               	goto	L18
  2408  001568                     i2l1210:
  2409  001568  0E01               	movlw	1
  2410  00156A  D03E               	goto	L18
  2411  00156C                     i2l1212:
  2412  00156C  0E02               	movlw	2
  2413  00156E  D03C               	goto	L18
  2414  001570                     i2l1214:
  2415  001570  0E04               	movlw	4
  2416  001572  D03A               	goto	L18
  2417                           
  2418                           ;interrupts.c: 170: default: RMotorCounter = 0b00001000;
  2419  001574  D7F7               	goto	i2l1208
  2420  001576                     i2l1218:
  2421  001576  5054               	movf	_RMotorCounter,w,c
  2422                           
  2423                           ; Switch size 1, requested type "space"
  2424                           ; Number of cases is 4, Range of values is 1 to 8
  2425                           ; switch strategies available:
  2426                           ; Name         Instructions Cycles
  2427                           ; simple_byte           13     7 (average)
  2428                           ;	Chosen strategy is simple_byte
  2429  001578  0A01               	xorlw	1	; case 1
  2430  00157A  B4D8               	btfsc	status,2,c
  2431  00157C  D7F3               	goto	i2l1208
  2432  00157E  0A03               	xorlw	3	; case 2
  2433  001580  B4D8               	btfsc	status,2,c
  2434  001582  D7F2               	goto	i2l1210
  2435  001584  0A06               	xorlw	6	; case 4
  2436  001586  B4D8               	btfsc	status,2,c
  2437  001588  D7F1               	goto	i2l1212
  2438  00158A  0A0C               	xorlw	12	; case 8
  2439  00158C  B4D8               	btfsc	status,2,c
  2440  00158E  D7F0               	goto	i2l1214
  2441  001590  D7E9               	goto	i2l1208
  2442                           
  2443                           ;interrupts.c: 172: } else if(side == LEFT && reverse == 1)
  2444  001592  D03A               	goto	i2l79
  2445  001594                     i2l1220:
  2446  001594  5013               	movf	motorCounterUpdate@side,w,c
  2447  001596  A4D8               	btfss	status,2,c
  2448  001598  D01B               	goto	i2l1238
  2449  00159A  0412               	decf	motorCounterUpdate@reverse,w,c
  2450  00159C  B4D8               	btfsc	status,2,c
  2451  00159E  D009               	goto	i2l1236
  2452  0015A0  D017               	goto	i2l1238
  2453                           
  2454                           ;interrupts.c: 173: {
  2455                           ;interrupts.c: 174: switch(LMotorCounter)
  2456  0015A2  D007               	goto	i2l1236
  2457                           
  2458                           ;interrupts.c: 175: {
  2459                           ;interrupts.c: 176: case 0b00000001: LMotorCounter = 0b00001000; break;
  2460  0015A4  D004               	goto	i2l1234
  2461  0015A6                     i2l1228:
  2462  0015A6  0E01               	movlw	1
  2463  0015A8  D7C5               	goto	L10
  2464                           
  2465                           ;interrupts.c: 178: case 0b00000100: LMotorCounter = 0b00000010; break;
  2466  0015AA  D7BE               	goto	i2l1190
  2467                           
  2468                           ;interrupts.c: 179: case 0b00001000: LMotorCounter = 0b00000100; break;
  2469  0015AC  D7BF               	goto	i2l1192
  2470  0015AE                     i2l1234:
  2471  0015AE  0E08               	movlw	8
  2472  0015B0  D7C1               	goto	L10
  2473  0015B2                     i2l1236:
  2474  0015B2  5053               	movf	_LMotorCounter,w,c
  2475                           
  2476                           ; Switch size 1, requested type "space"
  2477                           ; Number of cases is 4, Range of values is 1 to 8
  2478                           ; switch strategies available:
  2479                           ; Name         Instructions Cycles
  2480                           ; simple_byte           13     7 (average)
  2481                           ;	Chosen strategy is simple_byte
  2482  0015B4  0A01               	xorlw	1	; case 1
  2483  0015B6  B4D8               	btfsc	status,2,c
  2484  0015B8  D7FA               	goto	i2l1234
  2485  0015BA  0A03               	xorlw	3	; case 2
  2486  0015BC  B4D8               	btfsc	status,2,c
  2487  0015BE  D7F3               	goto	i2l1228
  2488  0015C0  0A06               	xorlw	6	; case 4
  2489  0015C2  B4D8               	btfsc	status,2,c
  2490  0015C4  D7B1               	goto	i2l1190
  2491  0015C6  0A0C               	xorlw	12	; case 8
  2492  0015C8  B4D8               	btfsc	status,2,c
  2493  0015CA  D7B0               	goto	i2l1192
  2494  0015CC  D7F0               	goto	i2l1234
  2495                           
  2496                           ;interrupts.c: 182: } else if(side == RIGHT && reverse == 1)
  2497  0015CE  D01C               	goto	i2l79
  2498  0015D0                     i2l1238:
  2499  0015D0  0413               	decf	motorCounterUpdate@side,w,c
  2500  0015D2  A4D8               	btfss	status,2,c
  2501  0015D4  D019               	goto	i2l79
  2502  0015D6  0412               	decf	motorCounterUpdate@reverse,w,c
  2503  0015D8  B4D8               	btfsc	status,2,c
  2504  0015DA  D009               	goto	i2l1254
  2505  0015DC  D015               	goto	i2l79
  2506                           
  2507                           ;interrupts.c: 183: {
  2508                           ;interrupts.c: 184: switch(RMotorCounter)
  2509  0015DE  D007               	goto	i2l1254
  2510                           
  2511                           ;interrupts.c: 185: {
  2512                           ;interrupts.c: 186: case 0b00000001: RMotorCounter = 0b00000010; break;
  2513  0015E0  D7C5               	goto	i2l1212
  2514                           
  2515                           ;interrupts.c: 187: case 0b00000010: RMotorCounter = 0b00000100; break;
  2516  0015E2  D7C6               	goto	i2l1214
  2517                           
  2518                           ;interrupts.c: 188: case 0b00000100: RMotorCounter = 0b00001000; break;
  2519  0015E4  D7BF               	goto	i2l1208
  2520                           
  2521                           ;interrupts.c: 189: case 0b00001000: RMotorCounter = 0b00000001; break;
  2522  0015E6  D7C0               	goto	i2l1210
  2523  0015E8                     L18:
  2524  0015E8  6E54               	movwf	_RMotorCounter,c
  2525  0015EA  D00E               	goto	i2l79
  2526                           
  2527                           ;interrupts.c: 190: default: RMotorCounter = 0b00000001;
  2528  0015EC  D7BD               	goto	i2l1210
  2529  0015EE                     i2l1254:
  2530  0015EE  5054               	movf	_RMotorCounter,w,c
  2531                           
  2532                           ; Switch size 1, requested type "space"
  2533                           ; Number of cases is 4, Range of values is 1 to 8
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte           13     7 (average)
  2537                           ;	Chosen strategy is simple_byte
  2538  0015F0  0A01               	xorlw	1	; case 1
  2539  0015F2  B4D8               	btfsc	status,2,c
  2540  0015F4  D7BB               	goto	i2l1212
  2541  0015F6  0A03               	xorlw	3	; case 2
  2542  0015F8  B4D8               	btfsc	status,2,c
  2543  0015FA  D7BA               	goto	i2l1214
  2544  0015FC  0A06               	xorlw	6	; case 4
  2545  0015FE  B4D8               	btfsc	status,2,c
  2546  001600  D7B1               	goto	i2l1208
  2547  001602  0A0C               	xorlw	12	; case 8
  2548  001604  D7B1               	goto	i2l1210
  2549  001606  D000               	goto	i2l79
  2550  001608                     i2l79:
  2551  001608  0012               	return		;funcret
  2552  00160A                     __end_of_motorCounterUpdate:
  2553                           	opt stack 0
  2554                           pclatu	equ	0xFFB
  2555                           pclath	equ	0xFFA
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           intcon2	equ	0xFF1
  2564                           postinc0	equ	0xFEE
  2565                           fsr0h	equ	0xFEA
  2566                           fsr0l	equ	0xFE9
  2567                           wreg	equ	0xFE8
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           bsr	equ	0xFE0
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _merge *****************
  2578 ;; Defined at:
  2579 ;;		line 195 in file "interrupts.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  left            1    wreg     unsigned char 
  2582 ;;  right           1   17[COMRAM] unsigned char 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  left            1   18[COMRAM] unsigned char 
  2585 ;;  merged          1   19[COMRAM] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      unsigned char 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2595 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;Total ram usage:        3 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_high_isr
  2605 ;;		_KController
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  0018AA                     __ptext15:
  2611                           	opt stack 0
  2612  0018AA                     _merge:
  2613                           	opt stack 25
  2614                           
  2615                           ;incstack = 0
  2616                           ;merge@left stored from wreg
  2617  0018AA  6E13               	movwf	merge@left,c
  2618                           
  2619                           ;interrupts.c: 197: unsigned char merged;
  2620                           ;interrupts.c: 198: merged = (left << 4) + right;
  2621  0018AC  3813               	swapf	merge@left,w,c
  2622  0018AE  0BF0               	andlw	240
  2623  0018B0  2412               	addwf	merge@right,w,c
  2624  0018B2  6E14               	movwf	merge@merged,c
  2625                           
  2626                           ;interrupts.c: 199: return merged;
  2627  0018B4  5014               	movf	merge@merged,w,c
  2628  0018B6  D000               	goto	i2l82
  2629  0018B8                     i2l82:
  2630  0018B8  0012               	return		;funcret
  2631  0018BA                     __end_of_merge:
  2632                           	opt stack 0
  2633                           pclatu	equ	0xFFB
  2634                           pclath	equ	0xFFA
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           postinc0	equ	0xFEE
  2644                           fsr0h	equ	0xFEA
  2645                           fsr0l	equ	0xFE9
  2646                           wreg	equ	0xFE8
  2647                           fsr1h	equ	0xFE2
  2648                           fsr1l	equ	0xFE1
  2649                           bsr	equ	0xFE0
  2650                           postinc2	equ	0xFDE
  2651                           postdec2	equ	0xFDD
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _ABS *****************
  2657 ;; Defined at:
  2658 ;;		line 208 in file "interrupts.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  x               2   17[COMRAM] int 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  2   17[COMRAM] int 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;Total ram usage:        2 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_KController
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text16
  2686  001866                     __ptext16:
  2687                           	opt stack 0
  2688  001866                     _ABS:
  2689                           	opt stack 24
  2690                           
  2691                           ;interrupts.c: 210: if(x<0) x = -x;
  2692                           
  2693                           ;incstack = 0
  2694  001866  AE13               	btfss	ABS@x+1,7,c
  2695  001868  D005               	goto	i2l1266
  2696  00186A  6C12               	negf	ABS@x,c
  2697  00186C  1E13               	comf	ABS@x+1,f,c
  2698  00186E  B0D8               	btfsc	status,0,c
  2699  001870  2A13               	incf	ABS@x+1,f,c
  2700  001872  D000               	goto	i2l1266
  2701  001874                     i2l1266:
  2702                           
  2703                           ;interrupts.c: 211: return x;
  2704  001874  C012  F012         	movff	ABS@x,?_ABS
  2705  001878  C013  F013         	movff	ABS@x+1,?_ABS+1
  2706  00187C  D000               	goto	i2l89
  2707  00187E                     i2l89:
  2708  00187E  0012               	return		;funcret
  2709  001880                     __end_of_ABS:
  2710                           	opt stack 0
  2711                           pclatu	equ	0xFFB
  2712                           pclath	equ	0xFFA
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           intcon	equ	0xFF2
  2720                           intcon2	equ	0xFF1
  2721                           postinc0	equ	0xFEE
  2722                           fsr0h	equ	0xFEA
  2723                           fsr0l	equ	0xFE9
  2724                           wreg	equ	0xFE8
  2725                           fsr1h	equ	0xFE2
  2726                           fsr1l	equ	0xFE1
  2727                           bsr	equ	0xFE0
  2728                           postinc2	equ	0xFDE
  2729                           postdec2	equ	0xFDD
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           pclatu	equ	0xFFB
  2734                           pclath	equ	0xFFA
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           intcon	equ	0xFF2
  2742                           intcon2	equ	0xFF1
  2743                           postinc0	equ	0xFEE
  2744                           fsr0h	equ	0xFEA
  2745                           fsr0l	equ	0xFE9
  2746                           wreg	equ	0xFE8
  2747                           fsr1h	equ	0xFE2
  2748                           fsr1l	equ	0xFE1
  2749                           bsr	equ	0xFE0
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756                           	psect	rparam
  2757  0000                     pclatu	equ	0xFFB
  2758                           pclath	equ	0xFFA
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           intcon2	equ	0xFF1
  2767                           postinc0	equ	0xFEE
  2768                           fsr0h	equ	0xFEA
  2769                           fsr0l	equ	0xFE9
  2770                           wreg	equ	0xFE8
  2771                           fsr1h	equ	0xFE2
  2772                           fsr1l	equ	0xFE1
  2773                           bsr	equ	0xFE0
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66      85
    BANK0           128     90      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3919
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    3819
                                              0 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    2287
                                             52 COMRAM    14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     901
                                             41 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                             41 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     194
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     194
                                             47 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             41 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    1629
                                             27 COMRAM    14    14      0
                        _KController
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _KController                                          7     7      0    1000
                                             20 COMRAM     7     7      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _motorCounterUpdate                                   2     1      1     388
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _merge
   _motorCounterUpdate
   _moveMouse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      5A       5       70.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      55       1       66.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      34        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Apr 13 17:31:47 2015

                ___awdiv@sign 002F                            bsr 000FE0           ___wmul@multiplicand 002C  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l203 106A                           l213 1834                           l221 1814  
                         l214 183C                           l217 185C                           l218 1864  
                         l414 1774                           l179 17E0                           l196 13EC  
                         _ABS 1866                  __CFG_CPB$OFF 000000                           _MAX 183E  
                         _MIN 1816                  __CFG_CPD$OFF 000000                           u650 1224  
                         u660 1240                           u930 102C                           u940 1050  
                         u965 1078                           wreg 000FE8                          ABS@x 0012  
                        ?_ABS 0012                          ?_MAX 0030                          ?_MIN 0030  
                        MAX@a 0030                          MAX@b 0032                          MIN@a 0030  
                        MIN@b 0032                  __CFG_WDT$OFF 000000                          l1160 171E  
                        l1162 1728                          l1154 1708                          l1180 176A  
                        l1172 174E                          l1164 1730                          l1148 16F6  
                        l1272 17CC                          l1176 175A                          l1370 178E  
                        l1282 1226                          l1292 129A                          l1452 1052  
                        l1294 137E                          l1462 1110                          l1470 11E6  
                        l1446 102E                          l1288 1242                          l1464 1170  
                        l1480 18A0                          l1298 138E                          l1466 11D0  
                        l1474 11FC                          u1017 17D2                          _LATC 000F8B  
                        i2l38 16A6                          i2l82 18B8                          i2l79 1608  
                        i2l89 187E                          _main 1896                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0035                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 17BA                         ??_ABS 0014  
                       ??_MAX 0034                         ??_MIN 0034    __size_of_sensorComputation 01E4  
                       ?_main 0001               __end_of___awdiv 1776                         _T0CON 000FD5  
             ___awdiv@divisor 002C                         i2l103 1514               ___awdiv@counter 002E  
                       _TRISC 000F94           _ConfigureOscillator 18BA                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _delay 17BA                         _merge 18AA  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 1880                  __end_of_main 18AA  
                      ??_main 0043                 __activetblptr 000002                        ?_delay 002A  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 002A                        i2l1200 153A                        i2l1210 1568  
                      i2l1202 1554                        i2l1212 156C                        i2l1220 1594  
                      i2l1214 1570                        i2l1208 1564                        i2l1320 1462  
                      i2l1312 1432                        i2l1234 15AE                        i2l1218 1576  
                      i2l1330 14A4                        i2l1314 143A                        i2l1228 15A6  
                      i2l1236 15B2                        i2l1340 14DA                        i2l1254 15EE  
                      i2l1238 15D0                        i2l1190 1528                        i2l1342 14DE  
                      i2l1334 14B6                        i2l1318 145A                        i2l1326 148C  
                      i2l1422 1672                        i2l1430 169E                        i2l1192 152C  
                      i2l1266 1874                        i2l1346 14F0                        _INTCON 000FF2  
                      _OSCCON 000FD3                     ??_InitApp 002F         ??_ConfigureOscillator 002A  
                 merge@merged 0014                __CFG_XINST$OFF 000000            sensorComputation@i 003F  
          sensorComputation@j 0041              __end_of_high_isr 16E0                        ___wmul 17EE  
                   ??___awdiv 002E                __CFG_STVREN$ON 000000                        delay@x 002D  
                      clear_0 1886              ___awdiv@quotient 0030                  __mediumconst 0000  
                   ??_low_isr 0001                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 188C  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 17EE               moveMouse@action 0012  
               __end_of_merge 18BA          KController@correctTo 0017    __end_of_motorCounterUpdate 160A  
                     ??_delay 002C                       ??_merge 0013                    _delay_time 0051  
           _MotorDelayCounter 004D                       ?___wmul 002A            __size_of_moveMouse 0008  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u71_40 144A  
                     i2u73_40 1472                       i2u74_40 1482                       i2u90_40 164C  
                     i2u91_40 165C                       i2u92_40 166C                     ?_high_isr 0001  
               _LMotorCounter 0053                       _InitApp 1776                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 16E0               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 1880                       __ramtop 1000  
                     __ptext0 1896                       __ptext1 100A                       __ptext2 120A  
                     __ptext3 17EE                       __ptext4 16E0                       __ptext5 1816  
                     __ptext6 183E                       __ptext7 1776                       __ptext8 17BA  
                     __ptext9 18BA                  __size_of_ABS 001A                  __size_of_MAX 0028  
                __size_of_MIN 0028                       delay@ms 002A                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001C                __pintcode_body 160A  
        end_of_initialization 188C              _sensorCorrection 1001             __end_of_moveMouse 18CC  
               __Lmediumconst 0000                       int_func 160A          __size_of_KController 0128  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _PORTBbits 000F81                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0080   __end_of_ConfigureOscillator 18C4                __end_of___wmul 1816  
         start_initialization 1880                   __end_of_ABS 1880                   __end_of_MAX 1866  
                 __end_of_MIN 183E            _motorCounterUpdate 1516              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                      ??___wmul 002E  
            __CFG_LPT1OSC$OFF 000000                _sensorLocation 1005          ??_motorCounterUpdate 0013  
                 __pbssCOMRAM 0043                 __pcstackBANK0 0080        sensorUpdate@sensorTemp 0086  
           __size_of_high_isr 16D8                      ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000  
                   _algorithm 0055                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 002A          __end_of_sensorUpdate 120A        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_low_isr 0001                __size_of_delay 0034                __size_of_merge 0010  
              ___wmul@product 002E                     _moveMouse 18C4              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 002A                 _RMotorCounter 0054  
               ??_KController 0015                    ?_moveMouse 0001              __size_of_InitApp 0044  
                    __Hrparam 0000                     merge@left 0013          sensorComputation@max 0039  
                    __Lrparam 0000          sensorComputation@min 003B          sensorComputation@sum 003D  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096              __size_of_low_isr 008A  
                    __ptext12 13EE                      __ptext13 18C4                      __ptext14 1516  
                    __ptext15 18AA                      __ptext16 1866                      _high_isr 0008  
          _LMotorDelayCounter 004B            _RMotorDelayCounter 004F                 __size_of_main 0014  
       __size_of_sensorUpdate 0200  __size_of_ConfigureOscillator 000A           __end_of_KController 1516  
           _sensorComputation 120A                    _INTCONbits 000FF2              KController@steps 001A  
          ?_sensorComputation 0035                 sensorUpdate@i 00D6                 sensorUpdate@j 00D8  
                _sensorUpdate 100A                      intlevel1 0000                      intlevel2 0000  
         ??_sensorComputation 0037                   ??_moveMouse 0012               KController@diff 0018  
   __end_of_sensorComputation 13EE                   _sensorValue 0043   __size_of_motorCounterUpdate 00F4  
   motorCounterUpdate@reverse 0012                   _KController 13EE  
