

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat May 02 16:11:21 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001C8C                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ignoreControll
    43  001C8C  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _ADCON0	set	4034
    58  0000                     _ADCON0bits	set	4034
    59  0000                     _ADCON1	set	4033
    60  0000                     _ADCON2	set	4032
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADRESL	set	4035
    63  0000                     _INTCON	set	4082
    64  0000                     _INTCON2	set	4081
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATC	set	3979
    67  0000                     _OSCCON	set	4051
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _T0CON	set	4053
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISEbits	set	3990
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001BB0                     __pcinit:
    79                           	opt stack 0
    80  001BB0                     start_initialization:
    81                           	opt stack 0
    82  001BB0                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (55 bytes)
    86  001BB0  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  001BB4  0E37               	movlw	55
    88  001BB6                     clear_0:
    89  001BB6  6AEE               	clrf	postinc0,c
    90  001BB8  06E8               	decf	wreg,f,c
    91  001BBA  E1FD               	bnz	clear_0
    92                           
    93                           ; Initialize objects allocated to COMRAM (1 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  001BBC  0E8C               	movlw	low __pidataCOMRAM
    96  001BBE  6EF6               	movwf	tblptrl,c
    97  001BC0  0E1C               	movlw	high __pidataCOMRAM
    98  001BC2  6EF7               	movwf	tblptrh,c
    99  001BC4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  001BC6  6EF8               	movwf	tblptru,c
   101  001BC8  0009               	tblrd		*+	;fetch initializer
   102  001BCA  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   103  001BCE                     end_of_initialization:
   104                           	opt stack 0
   105  001BCE                     __end_of__initialization:
   106                           	opt stack 0
   107  001BCE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  001BD0  6EF8               	movwf	tblptru,c
   109  001BD2  0100               	movlb	0
   110  001BD4  EFEC  F00D         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000001                     _sensorCorrection:
   122                           	opt stack 0
   123  000001                     	ds	8
   124  000009                     _sensorValue:
   125                           	opt stack 0
   126  000009                     	ds	8
   127  000011                     _ControllerCounter:
   128                           	opt stack 0
   129  000011                     	ds	2
   130  000013                     _Deadend:
   131                           	opt stack 0
   132  000013                     	ds	2
   133  000015                     _ForwardCounter:
   134                           	opt stack 0
   135  000015                     	ds	2
   136  000017                     _LTurnCounter:
   137                           	opt stack 0
   138  000017                     	ds	2
   139  000019                     _MotorDelayCounter:
   140                           	opt stack 0
   141  000019                     	ds	2
   142  00001B                     _RTurnCounter:
   143                           	opt stack 0
   144  00001B                     	ds	2
   145  00001D                     _ReverseCounter:
   146                           	opt stack 0
   147  00001D                     	ds	2
   148  00001F                     _RotateCounter:
   149                           	opt stack 0
   150  00001F                     	ds	2
   151  000021                     _TurnLeft:
   152                           	opt stack 0
   153  000021                     	ds	2
   154  000023                     _TurnRight:
   155                           	opt stack 0
   156  000023                     	ds	2
   157  000025                     _TurnedLeft:
   158                           	opt stack 0
   159  000025                     	ds	2
   160  000027                     _TurnedRight:
   161                           	opt stack 0
   162  000027                     	ds	2
   163  000029                     _delay_time:
   164                           	opt stack 0
   165  000029                     	ds	2
   166  00002B                     _errorD:
   167                           	opt stack 0
   168  00002B                     	ds	2
   169  00002D                     _errorP:
   170                           	opt stack 0
   171  00002D                     	ds	2
   172  00002F                     _oldErrorP:
   173                           	opt stack 0
   174  00002F                     	ds	2
   175  000031                     _totalError:
   176                           	opt stack 0
   177  000031                     	ds	2
   178  000033                     _LMotorCounter:
   179                           	opt stack 0
   180  000033                     	ds	1
   181  000034                     _RMotorCounter:
   182                           	opt stack 0
   183  000034                     	ds	1
   184  000035                     _algorithm:
   185                           	opt stack 0
   186  000035                     	ds	1
   187  000036                     _justTurned:
   188                           	opt stack 0
   189  000036                     	ds	1
   190  000037                     _rotatingSide:
   191                           	opt stack 0
   192  000037                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00005E                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00005E                     _ignoreControll:
   204                           	opt stack 0
   205  00005E                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000080                     __pcstackBANK0:
   215                           	opt stack 0
   216  000080                     ?___wmul:
   217                           	opt stack 0
   218  000080                     ?___awdiv:
   219                           	opt stack 0
   220  000080                     delay@ms:
   221                           	opt stack 0
   222  000080                     ___wmul@multiplier:
   223                           	opt stack 0
   224  000080                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_delay:
   230  000082                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000082                     ___awdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000082                     	ds	1
   237  000083                     delay@x:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000083                     	ds	1
   242  000084                     ___awdiv@counter:
   243                           	opt stack 0
   244  000084                     ___wmul@product:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000084                     	ds	1
   249  000085                     ___awdiv@sign:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  000085                     	ds	1
   254  000086                     ?_MIN:
   255                           	opt stack 0
   256  000086                     ?_MAX:
   257                           	opt stack 0
   258  000086                     MIN@a:
   259                           	opt stack 0
   260  000086                     MAX@a:
   261                           	opt stack 0
   262  000086                     ___awdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000086                     	ds	2
   267  000088                     ??_setCorrection:
   268  000088                     MIN@b:
   269                           	opt stack 0
   270  000088                     MAX@b:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  000088                     	ds	2
   275  00008A                     ??_MIN:
   276  00008A                     ??_MAX:
   277  00008A                     setCorrection@sideAvg:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00008A                     	ds	1
   282  00008B                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00008B                     	ds	1
   287  00008C                     setCorrection@frontAvg:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00008C                     	ds	1
   292  00008D                     sensorComputation@getCorrection:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00008D                     	ds	1
   297  00008E                     ??_sensorComputation:
   298                           
   299                           ; 0 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@max:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@min:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@sum:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     sensorComputation@j:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000096                     	ds	2
   321  000098                     sensorComputation@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x18
   325  000098                     	ds	2
   326  00009A                     ??_sensorUpdate:
   327                           
   328                           ; 0 bytes @ 0x1A
   329  00009A                     	ds	6
   330  0000A0                     sensorUpdate@sensorTemp:
   331                           	opt stack 0
   332                           
   333                           ; 80 bytes @ 0x20
   334  0000A0                     	ds	80
   335  0000F0                     sensorUpdate@getCorrection:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x70
   339  0000F0                     	ds	1
   340  0000F1                     sensorUpdate@i:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x71
   344  0000F1                     	ds	2
   345  0000F3                     sensorUpdate@j:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x73
   349  0000F3                     	ds	2
   350  0000F5                     tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           ; 0 bytes @ 0x75
   358                           
   359                           	psect	cstackCOMRAM
   360  000038                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000038                     ??_low_isr:
   363  000038                     
   364                           ; 0 bytes @ 0x0
   365  000038                     	ds	17
   366  000049                     ?_ABS:
   367                           	opt stack 0
   368  000049                     motorCounterUpdate@reverse:
   369                           	opt stack 0
   370  000049                     merge@right:
   371                           	opt stack 0
   372  000049                     moveMouse@action:
   373                           	opt stack 0
   374  000049                     ABS@x:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000049                     	ds	1
   379  00004A                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  00004A                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  00004A                     	ds	1
   386  00004B                     ??_KController:
   387  00004B                     merge@merged:
   388                           	opt stack 0
   389  00004B                     rotate@side:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x13
   393  00004B                     	ds	2
   394  00004D                     KController@correctTo:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x15
   398  00004D                     	ds	1
   399  00004E                     KController@diff:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x16
   403  00004E                     	ds	2
   404  000050                     ??_high_isr:
   405                           
   406                           ; 0 bytes @ 0x18
   407  000050                     	ds	14
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415 ;;
   416 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   417 ;;
   418 ;; *************** function _main *****************
   419 ;; Defined at:
   420 ;;		line 41 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;		None               void
   427 ;; Registers used:
   428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;Total ram usage:        0 bytes
   439 ;; Hardware stack levels required when called:    7
   440 ;; This function calls:
   441 ;;		_ConfigureOscillator
   442 ;;		_InitApp
   443 ;;		_sensorUpdate
   444 ;;		_setCorrection
   445 ;; This function is called by:
   446 ;;		Startup code after reset
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           	psect	text0
   451  001BD8                     __ptext0:
   452                           	opt stack 0
   453  001BD8                     _main:
   454                           	opt stack 24
   455                           
   456                           ;main.c: 44: ConfigureOscillator();
   457                           
   458                           ;incstack = 0
   459  001BD8  EC3D  F00E         	call	_ConfigureOscillator	;wreg free
   460                           
   461                           ;main.c: 47: InitApp();
   462  001BDC  EC4C  F00D         	call	_InitApp	;wreg free
   463                           
   464                           ;main.c: 48: sensorUpdate(1);
   465  001BE0  0E01               	movlw	1
   466  001BE2  ECDE  F00A         	call	_sensorUpdate
   467                           
   468                           ;main.c: 49: setCorrection();
   469  001BE6  ECE8  F00B         	call	_setCorrection	;wreg free
   470                           
   471                           ;main.c: 50: INTCONbits.GIE = 1;
   472  001BEA  8EF2               	bsf	intcon,7,c	;volatile
   473  001BEC  D000               	goto	l1932
   474  001BEE                     l1932:
   475                           
   476                           ;main.c: 52: {
   477                           ;main.c: 53: sensorUpdate(0);
   478  001BEE  0E00               	movlw	0
   479  001BF0  ECDE  F00A         	call	_sensorUpdate
   480  001BF4  D7FC               	goto	l1932
   481  001BF6  EF51  F000         	goto	start
   482  001BFA                     __end_of_main:
   483                           	opt stack 0
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           intcon	equ	0xFF2
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492 ;; *************** function _setCorrection *****************
   493 ;; Defined at:
   494 ;;		line 125 in file "user.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  frontAvg        2   12[BANK0 ] int 
   499 ;;  sideAvg         2   10[BANK0 ] int 
   500 ;; Return value:  Size  Location     Type
   501 ;;		None               void
   502 ;; Registers used:
   503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;Total ram usage:        6 bytes
   514 ;; Hardware stack levels used:    1
   515 ;; Hardware stack levels required when called:    5
   516 ;; This function calls:
   517 ;;		___awdiv
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524  0017D0                     __ptext1:
   525                           	opt stack 0
   526  0017D0                     _setCorrection:
   527                           	opt stack 25
   528                           
   529                           ;user.c: 127: int sideAvg,frontAvg;
   530                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   531                           
   532                           ;incstack = 0
   533  0017D0  5009               	movf	_sensorValue,w,c
   534  0017D2  240B               	addwf	_sensorValue+2,w,c
   535  0017D4  0100               	movlb	0	; () banked
   536  0017D6  6F80               	movwf	___awdiv@dividend& (0+255),b
   537  0017D8  500A               	movf	_sensorValue+1,w,c
   538  0017DA  200C               	addwfc	_sensorValue+3,w,c
   539  0017DC  0100               	movlb	0	; () banked
   540  0017DE  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   541  0017E0  0E00               	movlw	0
   542  0017E2  0100               	movlb	0	; () banked
   543  0017E4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   544  0017E6  0E02               	movlw	2
   545  0017E8  6F82               	movwf	___awdiv@divisor& (0+255),b
   546  0017EA  EC61  F00C         	call	___awdiv	;wreg free
   547  0017EE  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   548  0017F2  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   549                           
   550                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   551  0017F6  500F               	movf	_sensorValue+6,w,c
   552  0017F8  240D               	addwf	_sensorValue+4,w,c
   553  0017FA  0100               	movlb	0	; () banked
   554  0017FC  6F80               	movwf	___awdiv@dividend& (0+255),b
   555  0017FE  5010               	movf	_sensorValue+7,w,c
   556  001800  200E               	addwfc	_sensorValue+5,w,c
   557  001802  0100               	movlb	0	; () banked
   558  001804  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   559  001806  0E00               	movlw	0
   560  001808  0100               	movlb	0	; () banked
   561  00180A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   562  00180C  0E02               	movlw	2
   563  00180E  6F82               	movwf	___awdiv@divisor& (0+255),b
   564  001810  EC61  F00C         	call	___awdiv	;wreg free
   565  001814  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   566  001818  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   567                           
   568                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   569  00181C  C009  F088         	movff	_sensorValue,??_setCorrection
   570  001820  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   571  001824  0100               	movlb	0	; () banked
   572  001826  1F88               	comf	??_setCorrection& (0+255),f,b
   573  001828  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   574  00182A  4B88               	infsnz	??_setCorrection& (0+255),f,b
   575  00182C  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   576  00182E  0100               	movlb	0	; () banked
   577  001830  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   578  001832  0100               	movlb	0	; () banked
   579  001834  2588               	addwf	??_setCorrection& (0+255),w,b
   580  001836  6E01               	movwf	_sensorCorrection,c
   581  001838  0100               	movlb	0	; () banked
   582  00183A  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   583  00183C  0100               	movlb	0	; () banked
   584  00183E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   585  001840  6E02               	movwf	_sensorCorrection+1,c
   586                           
   587                           ; BSR set to: 0
   588                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   589  001842  EE20  F00B         	lfsr	2,_sensorValue+2
   590  001846  CFDE F088          	movff	postinc2,??_setCorrection
   591  00184A  CFDD F089          	movff	postdec2,??_setCorrection+1
   592  00184E  0100               	movlb	0	; () banked
   593  001850  1F88               	comf	??_setCorrection& (0+255),f,b
   594  001852  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   595  001854  4B88               	infsnz	??_setCorrection& (0+255),f,b
   596  001856  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   597  001858  0100               	movlb	0	; () banked
   598  00185A  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   599  00185C  0100               	movlb	0	; () banked
   600  00185E  2588               	addwf	??_setCorrection& (0+255),w,b
   601  001860  6E03               	movwf	_sensorCorrection+2,c
   602  001862  0100               	movlb	0	; () banked
   603  001864  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   604  001866  0100               	movlb	0	; () banked
   605  001868  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   606  00186A  6E04               	movwf	_sensorCorrection+3,c
   607                           
   608                           ; BSR set to: 0
   609                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   610  00186C  EE20  F00D         	lfsr	2,_sensorValue+4
   611  001870  CFDE F088          	movff	postinc2,??_setCorrection
   612  001874  CFDD F089          	movff	postdec2,??_setCorrection+1
   613  001878  0100               	movlb	0	; () banked
   614  00187A  1F88               	comf	??_setCorrection& (0+255),f,b
   615  00187C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   616  00187E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   617  001880  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   618  001882  0100               	movlb	0	; () banked
   619  001884  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   620  001886  0100               	movlb	0	; () banked
   621  001888  2588               	addwf	??_setCorrection& (0+255),w,b
   622  00188A  6E05               	movwf	_sensorCorrection+4,c
   623  00188C  0100               	movlb	0	; () banked
   624  00188E  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   625  001890  0100               	movlb	0	; () banked
   626  001892  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   627  001894  6E06               	movwf	_sensorCorrection+5,c
   628                           
   629                           ; BSR set to: 0
   630                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   631  001896  EE20  F00F         	lfsr	2,_sensorValue+6
   632  00189A  CFDE F088          	movff	postinc2,??_setCorrection
   633  00189E  CFDD F089          	movff	postdec2,??_setCorrection+1
   634  0018A2  0100               	movlb	0	; () banked
   635  0018A4  1F88               	comf	??_setCorrection& (0+255),f,b
   636  0018A6  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   637  0018A8  4B88               	infsnz	??_setCorrection& (0+255),f,b
   638  0018AA  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   639  0018AC  0100               	movlb	0	; () banked
   640  0018AE  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   641  0018B0  0100               	movlb	0	; () banked
   642  0018B2  2588               	addwf	??_setCorrection& (0+255),w,b
   643  0018B4  6E07               	movwf	_sensorCorrection+6,c
   644  0018B6  0100               	movlb	0	; () banked
   645  0018B8  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   646  0018BA  0100               	movlb	0	; () banked
   647  0018BC  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   648  0018BE  6E08               	movwf	_sensorCorrection+7,c
   649                           
   650                           ; BSR set to: 0
   651  0018C0  0012               	return		;funcret
   652  0018C2                     __end_of_setCorrection:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           intcon	equ	0xFF2
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postinc2	equ	0xFDE
   662                           postdec2	equ	0xFDD
   663                           
   664 ;; *************** function _sensorUpdate *****************
   665 ;; Defined at:
   666 ;;		line 161 in file "user.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  getCorrectio    1    wreg     unsigned char 
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   671 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   672 ;;  j               2  115[BANK0 ] int 
   673 ;;  i               2  113[BANK0 ] int 
   674 ;; Return value:  Size  Location     Type
   675 ;;		None               void
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;Total ram usage:       91 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    6
   690 ;; This function calls:
   691 ;;		___wmul
   692 ;;		_sensorComputation
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text2
   699  0015BC                     __ptext2:
   700                           	opt stack 0
   701  0015BC                     _sensorUpdate:
   702                           	opt stack 24
   703                           
   704                           ; BSR set to: 0
   705                           ;incstack = 0
   706                           ;sensorUpdate@getCorrection stored from wreg
   707  0015BC  0100               	movlb	0	; () banked
   708  0015BE  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   709                           
   710                           ; BSR set to: 0
   711                           ;user.c: 163: int i,j;
   712                           ;user.c: 164: int sensorTemp[4][10];
   713                           ;user.c: 167: for(i = 0; i < 10; i++)
   714  0015C0  0E00               	movlw	0
   715  0015C2  0100               	movlb	0	; () banked
   716  0015C4  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   717  0015C6  0E00               	movlw	0
   718  0015C8  6FF1               	movwf	sensorUpdate@i& (0+255),b
   719  0015CA                     l1886:
   720                           
   721                           ; BSR set to: 0
   722  0015CA  0100               	movlb	0	; () banked
   723  0015CC  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   724  0015CE  D00A               	goto	l1890
   725  0015D0  0100               	movlb	0	; () banked
   726  0015D2  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   727  0015D4  E178               	bnz	l1910
   728  0015D6  0E0A               	movlw	10
   729  0015D8  0100               	movlb	0	; () banked
   730  0015DA  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   731  0015DC  B0D8               	btfsc	status,0,c
   732  0015DE  D073               	goto	l1910
   733  0015E0  D001               	goto	l1890
   734                           
   735                           ; BSR set to: 0
   736  0015E2  D071               	goto	l1910
   737  0015E4                     l1890:
   738                           
   739                           ; BSR set to: 0
   740                           ;user.c: 168: {
   741                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   742  0015E4  0E00               	movlw	0
   743  0015E6  0100               	movlb	0	; () banked
   744  0015E8  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   745  0015EA  0E00               	movlw	0
   746  0015EC  6FF3               	movwf	sensorUpdate@j& (0+255),b
   747  0015EE                     l1892:
   748                           
   749                           ; BSR set to: 0
   750  0015EE  0100               	movlb	0	; () banked
   751  0015F0  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   752  0015F2  D00A               	goto	l1896
   753  0015F4  0100               	movlb	0	; () banked
   754  0015F6  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   755  0015F8  E161               	bnz	l1906
   756  0015FA  0E04               	movlw	4
   757  0015FC  0100               	movlb	0	; () banked
   758  0015FE  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   759  001600  B0D8               	btfsc	status,0,c
   760  001602  D05C               	goto	l1906
   761  001604  D001               	goto	l1896
   762                           
   763                           ; BSR set to: 0
   764  001606  D05A               	goto	l1906
   765  001608                     l1896:
   766                           
   767                           ; BSR set to: 0
   768                           ;user.c: 170: {
   769                           ;user.c: 171: ADCON0 = sensorLocation[j];
   770  001608  0E01               	movlw	low _sensorLocation
   771  00160A  0100               	movlb	0	; () banked
   772  00160C  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   773  00160E  6EF6               	movwf	tblptrl,c
   774  001610  0E10               	movlw	high _sensorLocation
   775  001612  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   776  001614  6EF7               	movwf	tblptrh,c
   777  001616                     	if	0	;There are less than 3 active tblptr bytes
   778  001616                     	endif
   779  001616  0008               	tblrd		*
   780  001618  CFF5 FFC2          	movff	tablat,4034	;volatile
   781                           
   782                           ; BSR set to: 0
   783                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   784  00161C  82C2               	bsf	4034,1,c	;volatile
   785                           
   786                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   787  00161E  D000               	goto	l295
   788  001620                     l295:
   789                           
   790                           ; BSR set to: 0
   791  001620  B2C2               	btfsc	4034,1,c	;volatile
   792  001622  D7FE               	goto	l295
   793                           
   794                           ; BSR set to: 0
   795                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   796                           
   797                           ; BSR set to: 0
   798  001624  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   799  001628  0E06               	movlw	6
   800  00162A  0100               	movlb	0	; () banked
   801  00162C  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   802  00162E                     u1595:
   803  00162E  0100               	movlb	0	; () banked
   804  001630  90D8               	bcf	status,0,c
   805  001632  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   806  001634  0100               	movlb	0	; () banked
   807  001636  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   808  001638  D7FA               	goto	u1595
   809  00163A  0100               	movlb	0	; () banked
   810  00163C  519A               	movf	??_sensorUpdate& (0+255),w,b
   811  00163E  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   812  001642  0100               	movlb	0	; () banked
   813  001644  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   814  001646  0100               	movlb	0	; () banked
   815  001648  90D8               	bcf	status,0,c
   816  00164A  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   817  00164C  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   818  00164E  0100               	movlb	0	; () banked
   819  001650  90D8               	bcf	status,0,c
   820  001652  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   821  001654  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   822  001656  0100               	movlb	0	; () banked
   823  001658  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   824  00165A  0E00               	movlw	0
   825  00165C  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   826  00165E  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   827  001662  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   828  001666  0E00               	movlw	0
   829  001668  0100               	movlb	0	; () banked
   830  00166A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   831  00166C  0E14               	movlw	20
   832  00166E  6F82               	movwf	___wmul@multiplicand& (0+255),b
   833  001670  EC88  F00D         	call	___wmul	;wreg free
   834  001674  0EA0               	movlw	low sensorUpdate@sensorTemp
   835  001676  0100               	movlb	0	; () banked
   836  001678  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   837  00167A  0E00               	movlw	high sensorUpdate@sensorTemp
   838  00167C  0100               	movlb	0	; () banked
   839  00167E  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   840  001680  0100               	movlb	0	; () banked
   841  001682  5180               	movf	?___wmul& (0+255),w,b
   842  001684  0100               	movlb	0	; () banked
   843  001686  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   844  001688  0100               	movlb	0	; () banked
   845  00168A  5181               	movf	(?___wmul+1)& (0+255),w,b
   846  00168C  0100               	movlb	0	; () banked
   847  00168E  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   848  001690  90D8               	bcf	status,0,c
   849  001692  0100               	movlb	0	; () banked
   850  001694  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   851  001696  6ED9               	movwf	fsr2l,c
   852  001698  0100               	movlb	0	; () banked
   853  00169A  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   854  00169C  6EDA               	movwf	fsr2h,c
   855  00169E  0100               	movlb	0	; () banked
   856  0016A0  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   857  0016A2  26D9               	addwf	fsr2l,f,c
   858  0016A4  0100               	movlb	0	; () banked
   859  0016A6  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   860  0016A8  22DA               	addwfc	fsr2h,f,c
   861  0016AA  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   862  0016AE  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   863                           
   864                           ; BSR set to: 0
   865  0016B2  0100               	movlb	0	; () banked
   866  0016B4  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   867  0016B6  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   868  0016B8  D79A               	goto	l1892
   869                           
   870                           ; BSR set to: 0
   871  0016BA  D000               	goto	l1906
   872  0016BC                     l1906:
   873                           
   874                           ; BSR set to: 0
   875  0016BC  0100               	movlb	0	; () banked
   876  0016BE  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   877  0016C0  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   878  0016C2  D783               	goto	l1886
   879                           
   880                           ; BSR set to: 0
   881  0016C4  D000               	goto	l1910
   882  0016C6                     l1910:
   883                           
   884                           ; BSR set to: 0
   885                           ;user.c: 176: }
   886                           ;user.c: 177: }
   887                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   888  0016C6  0EA0               	movlw	low sensorUpdate@sensorTemp
   889  0016C8  0100               	movlb	0	; () banked
   890  0016CA  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   891  0016CC  0E00               	movlw	high sensorUpdate@sensorTemp
   892  0016CE  0100               	movlb	0	; () banked
   893  0016D0  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   894  0016D2  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   895  0016D6  EC7C  F009         	call	_sensorComputation	;wreg free
   896  0016DA  0012               	return		;funcret
   897  0016DC                     __end_of_sensorUpdate:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           intcon	equ	0xFF2
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           postinc2	equ	0xFDE
   907                           postdec2	equ	0xFDD
   908                           fsr2h	equ	0xFDA
   909                           fsr2l	equ	0xFD9
   910                           status	equ	0xFD8
   911                           
   912 ;; *************** function _sensorComputation *****************
   913 ;; Defined at:
   914 ;;		line 137 in file "user.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   917 ;;		 -> sensorUpdate@sensorTemp(80), 
   918 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  i               2   24[BANK0 ] int 
   921 ;;  j               2   22[BANK0 ] int 
   922 ;;  sum             2   20[BANK0 ] int 
   923 ;;  min             2   18[BANK0 ] int 
   924 ;;  max             2   16[BANK0 ] int 
   925 ;; Return value:  Size  Location     Type
   926 ;;		None               void
   927 ;; Registers used:
   928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   937 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;Total ram usage:       15 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    5
   941 ;; This function calls:
   942 ;;		_MAX
   943 ;;		_MIN
   944 ;;		___awdiv
   945 ;;		___wmul
   946 ;; This function is called by:
   947 ;;		_sensorUpdate
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text3
   952  0012F8                     __ptext3:
   953                           	opt stack 0
   954  0012F8                     _sensorComputation:
   955                           	opt stack 24
   956                           
   957                           ;user.c: 139: int max,min,i,j,sum;
   958                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   959                           
   960                           ;incstack = 0
   961  0012F8  0E00               	movlw	0
   962  0012FA  0100               	movlb	0	; () banked
   963  0012FC  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   964  0012FE  0E00               	movlw	0
   965  001300  6F98               	movwf	sensorComputation@i& (0+255),b
   966                           
   967                           ; BSR set to: 0
   968  001302  0100               	movlb	0	; () banked
   969  001304  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   970  001306  D00A               	goto	l1838
   971  001308  0100               	movlb	0	; () banked
   972  00130A  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   973  00130C  E106               	bnz	u1500
   974  00130E  0E04               	movlw	4
   975  001310  0100               	movlb	0	; () banked
   976  001312  5D98               	subwf	sensorComputation@i& (0+255),w,b
   977  001314  B0D8               	btfsc	status,0,c
   978  001316  D151               	goto	l288
   979  001318  D001               	goto	l1838
   980  00131A                     u1500:
   981                           
   982                           ; BSR set to: 0
   983  00131A  D14F               	goto	l288
   984  00131C                     l1838:
   985                           
   986                           ; BSR set to: 0
   987                           ;user.c: 141: {
   988                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
   989  00131C  0E00               	movlw	0
   990  00131E  0100               	movlb	0	; () banked
   991  001320  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
   992  001322  0E00               	movlw	0
   993  001324  6F96               	movwf	sensorComputation@j& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996  001326  0100               	movlb	0	; () banked
   997  001328  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   998  00132A  D00A               	goto	l1844
   999  00132C  0100               	movlb	0	; () banked
  1000  00132E  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1001  001330  E106               	bnz	u1510
  1002  001332  0E0A               	movlw	10
  1003  001334  0100               	movlb	0	; () banked
  1004  001336  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1005  001338  B0D8               	btfsc	status,0,c
  1006  00133A  D0D3               	goto	l1854
  1007  00133C  D001               	goto	l1844
  1008  00133E                     u1510:
  1009                           
  1010                           ; BSR set to: 0
  1011  00133E  D0D1               	goto	l1854
  1012  001340                     l1844:
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;user.c: 143: {
  1016                           ;user.c: 144: if(j == 0)
  1017  001340  0100               	movlb	0	; () banked
  1018  001342  5196               	movf	sensorComputation@j& (0+255),w,b
  1019  001344  0100               	movlb	0	; () banked
  1020  001346  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1021  001348  A4D8               	btfss	status,2,c
  1022  00134A  D031               	goto	l1848
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;user.c: 145: {
  1026                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1027  00134C  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1028  001350  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1029  001354  0E00               	movlw	0
  1030  001356  0100               	movlb	0	; () banked
  1031  001358  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1032  00135A  0E14               	movlw	20
  1033  00135C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1034  00135E  EC88  F00D         	call	___wmul	;wreg free
  1035  001362  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1036  001366  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1037  00136A  0100               	movlb	0	; () banked
  1038  00136C  5180               	movf	?___wmul& (0+255),w,b
  1039  00136E  0100               	movlb	0	; () banked
  1040  001370  278E               	addwf	??_sensorComputation& (0+255),f,b
  1041  001372  0100               	movlb	0	; () banked
  1042  001374  5181               	movf	(?___wmul+1)& (0+255),w,b
  1043  001376  0100               	movlb	0	; () banked
  1044  001378  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1045  00137A  90D8               	bcf	status,0,c
  1046  00137C  0100               	movlb	0	; () banked
  1047  00137E  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1048  001380  6ED9               	movwf	fsr2l,c
  1049  001382  0100               	movlb	0	; () banked
  1050  001384  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1051  001386  6EDA               	movwf	fsr2h,c
  1052  001388  0100               	movlb	0	; () banked
  1053  00138A  518E               	movf	??_sensorComputation& (0+255),w,b
  1054  00138C  26D9               	addwf	fsr2l,f,c
  1055  00138E  0100               	movlb	0	; () banked
  1056  001390  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1057  001392  22DA               	addwfc	fsr2h,f,c
  1058  001394  CFDE F090          	movff	postinc2,sensorComputation@max
  1059  001398  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1060  00139C  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1061  0013A0  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1062  0013A4  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1063  0013A8  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1064                           
  1065                           ;user.c: 147: continue;
  1066  0013AC  D08F               	goto	l1850
  1067  0013AE                     l1848:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;user.c: 148: }
  1071                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1072  0013AE  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1073  0013B2  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1074  0013B6  0E00               	movlw	0
  1075  0013B8  0100               	movlb	0	; () banked
  1076  0013BA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1077  0013BC  0E14               	movlw	20
  1078  0013BE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1079  0013C0  EC88  F00D         	call	___wmul	;wreg free
  1080  0013C4  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1081  0013C8  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1082  0013CC  0100               	movlb	0	; () banked
  1083  0013CE  5180               	movf	?___wmul& (0+255),w,b
  1084  0013D0  0100               	movlb	0	; () banked
  1085  0013D2  278E               	addwf	??_sensorComputation& (0+255),f,b
  1086  0013D4  0100               	movlb	0	; () banked
  1087  0013D6  5181               	movf	(?___wmul+1)& (0+255),w,b
  1088  0013D8  0100               	movlb	0	; () banked
  1089  0013DA  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1090  0013DC  90D8               	bcf	status,0,c
  1091  0013DE  0100               	movlb	0	; () banked
  1092  0013E0  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1093  0013E2  6ED9               	movwf	fsr2l,c
  1094  0013E4  0100               	movlb	0	; () banked
  1095  0013E6  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1096  0013E8  6EDA               	movwf	fsr2h,c
  1097  0013EA  0100               	movlb	0	; () banked
  1098  0013EC  518E               	movf	??_sensorComputation& (0+255),w,b
  1099  0013EE  26D9               	addwf	fsr2l,f,c
  1100  0013F0  0100               	movlb	0	; () banked
  1101  0013F2  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1102  0013F4  22DA               	addwfc	fsr2h,f,c
  1103  0013F6  CFDE F086          	movff	postinc2,MIN@a
  1104  0013FA  CFDD F087          	movff	postdec2,MIN@a+1
  1105  0013FE  C092  F088         	movff	sensorComputation@min,MIN@b
  1106  001402  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1107  001406  ECA4  F00D         	call	_MIN	;wreg free
  1108  00140A  C086  F092         	movff	?_MIN,sensorComputation@min
  1109  00140E  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1110                           
  1111                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1112  001412  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1113  001416  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1114  00141A  0E00               	movlw	0
  1115  00141C  0100               	movlb	0	; () banked
  1116  00141E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1117  001420  0E14               	movlw	20
  1118  001422  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1119  001424  EC88  F00D         	call	___wmul	;wreg free
  1120  001428  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1121  00142C  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1122  001430  0100               	movlb	0	; () banked
  1123  001432  5180               	movf	?___wmul& (0+255),w,b
  1124  001434  0100               	movlb	0	; () banked
  1125  001436  278E               	addwf	??_sensorComputation& (0+255),f,b
  1126  001438  0100               	movlb	0	; () banked
  1127  00143A  5181               	movf	(?___wmul+1)& (0+255),w,b
  1128  00143C  0100               	movlb	0	; () banked
  1129  00143E  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1130  001440  90D8               	bcf	status,0,c
  1131  001442  0100               	movlb	0	; () banked
  1132  001444  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1133  001446  6ED9               	movwf	fsr2l,c
  1134  001448  0100               	movlb	0	; () banked
  1135  00144A  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1136  00144C  6EDA               	movwf	fsr2h,c
  1137  00144E  0100               	movlb	0	; () banked
  1138  001450  518E               	movf	??_sensorComputation& (0+255),w,b
  1139  001452  26D9               	addwf	fsr2l,f,c
  1140  001454  0100               	movlb	0	; () banked
  1141  001456  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1142  001458  22DA               	addwfc	fsr2h,f,c
  1143  00145A  CFDE F086          	movff	postinc2,MAX@a
  1144  00145E  CFDD F087          	movff	postdec2,MAX@a+1
  1145  001462  C090  F088         	movff	sensorComputation@max,MAX@b
  1146  001466  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1147  00146A  ECBE  F00D         	call	_MAX	;wreg free
  1148  00146E  C086  F090         	movff	?_MAX,sensorComputation@max
  1149  001472  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1150                           
  1151                           ;user.c: 151: sum += sensorTemp[i][j];
  1152  001476  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1153  00147A  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1154  00147E  0E00               	movlw	0
  1155  001480  0100               	movlb	0	; () banked
  1156  001482  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1157  001484  0E14               	movlw	20
  1158  001486  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1159  001488  EC88  F00D         	call	___wmul	;wreg free
  1160  00148C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1161  001490  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1162  001494  0100               	movlb	0	; () banked
  1163  001496  5180               	movf	?___wmul& (0+255),w,b
  1164  001498  0100               	movlb	0	; () banked
  1165  00149A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1166  00149C  0100               	movlb	0	; () banked
  1167  00149E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1168  0014A0  0100               	movlb	0	; () banked
  1169  0014A2  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1170  0014A4  90D8               	bcf	status,0,c
  1171  0014A6  0100               	movlb	0	; () banked
  1172  0014A8  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1173  0014AA  6ED9               	movwf	fsr2l,c
  1174  0014AC  0100               	movlb	0	; () banked
  1175  0014AE  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1176  0014B0  6EDA               	movwf	fsr2h,c
  1177  0014B2  0100               	movlb	0	; () banked
  1178  0014B4  518E               	movf	??_sensorComputation& (0+255),w,b
  1179  0014B6  26D9               	addwf	fsr2l,f,c
  1180  0014B8  0100               	movlb	0	; () banked
  1181  0014BA  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1182  0014BC  22DA               	addwfc	fsr2h,f,c
  1183  0014BE  50DE               	movf	postinc2,w,c
  1184  0014C0  0100               	movlb	0	; () banked
  1185  0014C2  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1186  0014C4  50DD               	movf	postdec2,w,c
  1187  0014C6  0100               	movlb	0	; () banked
  1188  0014C8  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1189  0014CA  D000               	goto	l1850
  1190  0014CC                     l1850:
  1191                           
  1192                           ; BSR set to: 0
  1193  0014CC  0100               	movlb	0	; () banked
  1194  0014CE  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1195  0014D0  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1196                           
  1197                           ; BSR set to: 0
  1198  0014D2  0100               	movlb	0	; () banked
  1199  0014D4  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1200  0014D6  D734               	goto	l1844
  1201  0014D8  0100               	movlb	0	; () banked
  1202  0014DA  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1203  0014DC  E102               	bnz	l1854
  1204  0014DE  D729               	goto	L2
  1205  0014E0  D000               	goto	l1854
  1206  0014E2                     l1854:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;user.c: 152: }
  1210                           ;user.c: 153: sum = sum - min - max;
  1211  0014E2  0100               	movlb	0	; () banked
  1212  0014E4  5190               	movf	sensorComputation@max& (0+255),w,b
  1213  0014E6  0100               	movlb	0	; () banked
  1214  0014E8  2592               	addwf	sensorComputation@min& (0+255),w,b
  1215  0014EA  0100               	movlb	0	; () banked
  1216  0014EC  6F8E               	movwf	??_sensorComputation& (0+255),b
  1217  0014EE  0100               	movlb	0	; () banked
  1218  0014F0  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1219  0014F2  0100               	movlb	0	; () banked
  1220  0014F4  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1221  0014F6  0100               	movlb	0	; () banked
  1222  0014F8  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1223  0014FA  0100               	movlb	0	; () banked
  1224  0014FC  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1225  0014FE  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1226  001500  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1227  001502  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1228  001504  0100               	movlb	0	; () banked
  1229  001506  5194               	movf	sensorComputation@sum& (0+255),w,b
  1230  001508  0100               	movlb	0	; () banked
  1231  00150A  258E               	addwf	??_sensorComputation& (0+255),w,b
  1232  00150C  0100               	movlb	0	; () banked
  1233  00150E  6F94               	movwf	sensorComputation@sum& (0+255),b
  1234  001510  0100               	movlb	0	; () banked
  1235  001512  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1236  001514  0100               	movlb	0	; () banked
  1237  001516  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1238  001518  0100               	movlb	0	; () banked
  1239  00151A  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1240                           
  1241                           ;user.c: 154: if(getCorrection == 1)
  1242  00151C  0100               	movlb	0	; () banked
  1243  00151E  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1244  001520  A4D8               	btfss	status,2,c
  1245  001522  D00C               	goto	l1858
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1249  001524  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1250  001528  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1251  00152C  0E00               	movlw	0
  1252  00152E  0100               	movlb	0	; () banked
  1253  001530  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1254  001532  0E08               	movlw	8
  1255  001534  6F82               	movwf	___awdiv@divisor& (0+255),b
  1256  001536  EC61  F00C         	call	___awdiv	;wreg free
  1257  00153A  D022               	goto	L3
  1258  00153C                     l1858:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;user.c: 156: else
  1262                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1263  00153C  90D8               	bcf	status,0,c
  1264  00153E  0100               	movlb	0	; () banked
  1265  001540  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1266  001542  6ED9               	movwf	fsr2l,c
  1267  001544  0100               	movlb	0	; () banked
  1268  001546  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1269  001548  6EDA               	movwf	fsr2h,c
  1270  00154A  0E01               	movlw	low _sensorCorrection
  1271  00154C  26D9               	addwf	fsr2l,f,c
  1272  00154E  0E00               	movlw	high _sensorCorrection
  1273  001550  22DA               	addwfc	fsr2h,f,c
  1274  001552  CFDE F08E          	movff	postinc2,??_sensorComputation
  1275  001556  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1276  00155A  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1277  00155E  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1278  001562  0E00               	movlw	0
  1279  001564  0100               	movlb	0	; () banked
  1280  001566  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1281  001568  0E08               	movlw	8
  1282  00156A  6F82               	movwf	___awdiv@divisor& (0+255),b
  1283  00156C  EC61  F00C         	call	___awdiv	;wreg free
  1284  001570  0100               	movlb	0	; () banked
  1285  001572  518E               	movf	??_sensorComputation& (0+255),w,b
  1286  001574  0100               	movlb	0	; () banked
  1287  001576  2780               	addwf	?___awdiv& (0+255),f,b
  1288  001578  0100               	movlb	0	; () banked
  1289  00157A  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1290  00157C  0100               	movlb	0	; () banked
  1291  00157E  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1292  001580                     L3:
  1293  001580  90D8               	bcf	status,0,c
  1294  001582  0100               	movlb	0	; () banked
  1295  001584  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1296  001586  6ED9               	movwf	fsr2l,c
  1297  001588  0100               	movlb	0	; () banked
  1298  00158A  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1299  00158C  6EDA               	movwf	fsr2h,c
  1300  00158E  0E09               	movlw	low _sensorValue
  1301  001590  26D9               	addwf	fsr2l,f,c
  1302  001592  0E00               	movlw	high _sensorValue
  1303  001594  22DA               	addwfc	fsr2h,f,c
  1304  001596  0100               	movlb	0	; () banked
  1305  001598  C080  FFDE         	movff	?___awdiv,postinc2
  1306  00159C  0100               	movlb	0	; () banked
  1307  00159E  C081  FFDD         	movff	?___awdiv+1,postdec2
  1308  0015A2  D000               	goto	l1860
  1309  0015A4                     l1860:
  1310                           
  1311                           ; BSR set to: 0
  1312  0015A4  0100               	movlb	0	; () banked
  1313  0015A6  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1314  0015A8  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1315                           
  1316                           ; BSR set to: 0
  1317  0015AA  0100               	movlb	0	; () banked
  1318  0015AC  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1319  0015AE  D6B6               	goto	l1838
  1320  0015B0  0100               	movlb	0	; () banked
  1321  0015B2  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1322  0015B4  E102               	bnz	l288
  1323  0015B6  D6AB               	goto	L4
  1324  0015B8  D000               	goto	l288
  1325  0015BA                     l288:
  1326                           
  1327                           ; BSR set to: 0
  1328  0015BA  0012               	return		;funcret
  1329  0015BC                     __end_of_sensorComputation:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           intcon	equ	0xFF2
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postinc2	equ	0xFDE
  1339                           postdec2	equ	0xFDD
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function ___wmul *****************
  1345 ;; Defined at:
  1346 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1349 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  product         2    4[BANK0 ] unsigned int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2    0[BANK0 ] unsigned int 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, prodl, prodh
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;Total ram usage:        6 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_sensorComputation
  1372 ;;		_sensorUpdate
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text4
  1377  001B10                     __ptext4:
  1378                           	opt stack 0
  1379  001B10                     ___wmul:
  1380                           	opt stack 24
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;incstack = 0
  1384  001B10  0100               	movlb	0	; () banked
  1385  001B12  5180               	movf	___wmul@multiplier& (0+255),w,b
  1386  001B14  0100               	movlb	0	; () banked
  1387  001B16  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1388  001B18  CFF3 F084          	movff	prodl,___wmul@product
  1389  001B1C  CFF4 F085          	movff	prodh,___wmul@product+1
  1390  001B20  0100               	movlb	0	; () banked
  1391  001B22  5180               	movf	___wmul@multiplier& (0+255),w,b
  1392  001B24  0100               	movlb	0	; () banked
  1393  001B26  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1394  001B28  50F3               	movf	prodl,w,c
  1395  001B2A  0100               	movlb	0	; () banked
  1396  001B2C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1397  001B2E  0100               	movlb	0	; () banked
  1398  001B30  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1399  001B32  0100               	movlb	0	; () banked
  1400  001B34  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1401  001B36  50F3               	movf	prodl,w,c
  1402  001B38  0100               	movlb	0	; () banked
  1403  001B3A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1404                           
  1405                           ; BSR set to: 0
  1406  001B3C  C084  F080         	movff	___wmul@product,?___wmul
  1407  001B40  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1408  001B44  D000               	goto	l309
  1409  001B46                     l309:
  1410                           
  1411                           ; BSR set to: 0
  1412  001B46  0012               	return		;funcret
  1413  001B48                     __end_of___wmul:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           intcon	equ	0xFF2
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postinc2	equ	0xFDE
  1425                           postdec2	equ	0xFDD
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function ___awdiv *****************
  1431 ;; Defined at:
  1432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  dividend        2    0[BANK0 ] int 
  1435 ;;  divisor         2    2[BANK0 ] int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  quotient        2    6[BANK0 ] int 
  1438 ;;  sign            1    5[BANK0 ] unsigned char 
  1439 ;;  counter         1    4[BANK0 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2    0[BANK0 ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;Total ram usage:        8 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    4
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_setCorrection
  1460 ;;		_sensorComputation
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text5
  1465  0018C2                     __ptext5:
  1466                           	opt stack 0
  1467  0018C2                     ___awdiv:
  1468                           	opt stack 25
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;incstack = 0
  1472  0018C2  0E00               	movlw	0
  1473  0018C4  0100               	movlb	0	; () banked
  1474  0018C6  6F85               	movwf	___awdiv@sign& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477  0018C8  0100               	movlb	0	; () banked
  1478  0018CA  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1479  0018CC  D009               	goto	l1780
  1480                           
  1481                           ; BSR set to: 0
  1482  0018CE  0100               	movlb	0	; () banked
  1483  0018D0  6D82               	negf	___awdiv@divisor& (0+255),b
  1484  0018D2  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1485  0018D4  B0D8               	btfsc	status,0,c
  1486  0018D6  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489  0018D8  0E01               	movlw	1
  1490  0018DA  0100               	movlb	0	; () banked
  1491  0018DC  6F85               	movwf	___awdiv@sign& (0+255),b
  1492  0018DE  D000               	goto	l1780
  1493  0018E0                     l1780:
  1494                           
  1495                           ; BSR set to: 0
  1496  0018E0  0100               	movlb	0	; () banked
  1497  0018E2  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1498  0018E4  D009               	goto	l1786
  1499                           
  1500                           ; BSR set to: 0
  1501  0018E6  0100               	movlb	0	; () banked
  1502  0018E8  6D80               	negf	___awdiv@dividend& (0+255),b
  1503  0018EA  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1504  0018EC  B0D8               	btfsc	status,0,c
  1505  0018EE  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  0018F0  0E01               	movlw	1
  1509  0018F2  0100               	movlb	0	; () banked
  1510  0018F4  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1511  0018F6  D000               	goto	l1786
  1512  0018F8                     l1786:
  1513                           
  1514                           ; BSR set to: 0
  1515  0018F8  0E00               	movlw	0
  1516  0018FA  0100               	movlb	0	; () banked
  1517  0018FC  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1518  0018FE  0E00               	movlw	0
  1519  001900  6F86               	movwf	___awdiv@quotient& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522  001902  0100               	movlb	0	; () banked
  1523  001904  5182               	movf	___awdiv@divisor& (0+255),w,b
  1524  001906  0100               	movlb	0	; () banked
  1525  001908  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1526  00190A  B4D8               	btfsc	status,2,c
  1527  00190C  D031               	goto	l1808
  1528                           
  1529                           ; BSR set to: 0
  1530  00190E  0E01               	movlw	1
  1531  001910  0100               	movlb	0	; () banked
  1532  001912  6F84               	movwf	___awdiv@counter& (0+255),b
  1533  001914  D007               	goto	l1794
  1534  001916                     l1792:
  1535                           
  1536                           ; BSR set to: 0
  1537  001916  0100               	movlb	0	; () banked
  1538  001918  90D8               	bcf	status,0,c
  1539  00191A  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1540  00191C  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1541  00191E  0100               	movlb	0	; () banked
  1542  001920  2B84               	incf	___awdiv@counter& (0+255),f,b
  1543  001922  D000               	goto	l1794
  1544  001924                     l1794:
  1545                           
  1546                           ; BSR set to: 0
  1547  001924  0100               	movlb	0	; () banked
  1548  001926  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1549  001928  D002               	goto	l1796
  1550  00192A  D7F5               	goto	l1792
  1551                           
  1552                           ; BSR set to: 0
  1553  00192C  D000               	goto	l1796
  1554  00192E                     l1796:
  1555                           
  1556                           ; BSR set to: 0
  1557  00192E  0100               	movlb	0	; () banked
  1558  001930  90D8               	bcf	status,0,c
  1559  001932  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1560  001934  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563  001936  0100               	movlb	0	; () banked
  1564  001938  5182               	movf	___awdiv@divisor& (0+255),w,b
  1565  00193A  0100               	movlb	0	; () banked
  1566  00193C  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1567  00193E  0100               	movlb	0	; () banked
  1568  001940  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1569  001942  0100               	movlb	0	; () banked
  1570  001944  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1571  001946  A0D8               	btfss	status,0,c
  1572  001948  D00B               	goto	l1804
  1573                           
  1574                           ; BSR set to: 0
  1575  00194A  0100               	movlb	0	; () banked
  1576  00194C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1577  00194E  0100               	movlb	0	; () banked
  1578  001950  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1579  001952  0100               	movlb	0	; () banked
  1580  001954  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1581  001956  0100               	movlb	0	; () banked
  1582  001958  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1583                           
  1584                           ; BSR set to: 0
  1585  00195A  0100               	movlb	0	; () banked
  1586  00195C  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1587  00195E  D000               	goto	l1804
  1588  001960                     l1804:
  1589                           
  1590                           ; BSR set to: 0
  1591  001960  0100               	movlb	0	; () banked
  1592  001962  90D8               	bcf	status,0,c
  1593  001964  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1594  001966  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1595                           
  1596                           ; BSR set to: 0
  1597  001968  0100               	movlb	0	; () banked
  1598  00196A  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1599  00196C  D7E0               	goto	l1796
  1600                           
  1601                           ; BSR set to: 0
  1602  00196E  D000               	goto	l1808
  1603  001970                     l1808:
  1604                           
  1605                           ; BSR set to: 0
  1606  001970  0100               	movlb	0	; () banked
  1607  001972  5185               	movf	___awdiv@sign& (0+255),w,b
  1608  001974  0100               	movlb	0	; () banked
  1609  001976  B4D8               	btfsc	status,2,c
  1610  001978  D006               	goto	l1812
  1611                           
  1612                           ; BSR set to: 0
  1613  00197A  0100               	movlb	0	; () banked
  1614  00197C  6D86               	negf	___awdiv@quotient& (0+255),b
  1615  00197E  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1616  001980  B0D8               	btfsc	status,0,c
  1617  001982  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1618  001984  D000               	goto	l1812
  1619  001986                     l1812:
  1620                           
  1621                           ; BSR set to: 0
  1622  001986  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1623  00198A  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1624  00198E  D000               	goto	l502
  1625  001990                     l502:
  1626                           
  1627                           ; BSR set to: 0
  1628  001990  0012               	return		;funcret
  1629  001992                     __end_of___awdiv:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           prodh	equ	0xFF4
  1636                           prodl	equ	0xFF3
  1637                           intcon	equ	0xFF2
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postinc2	equ	0xFDE
  1641                           postdec2	equ	0xFDD
  1642                           fsr2h	equ	0xFDA
  1643                           fsr2l	equ	0xFD9
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _MIN *****************
  1647 ;; Defined at:
  1648 ;;		line 184 in file "user.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  a               2    6[BANK0 ] int 
  1651 ;;  b               2    8[BANK0 ] int 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  2    6[BANK0 ] int 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_sensorComputation
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text6
  1678  001B48                     __ptext6:
  1679                           	opt stack 0
  1680  001B48                     _MIN:
  1681                           	opt stack 24
  1682                           
  1683                           ;user.c: 186: if(a>b) return b;
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;incstack = 0
  1687  001B48  0100               	movlb	0	; () banked
  1688  001B4A  5186               	movf	MIN@a& (0+255),w,b
  1689  001B4C  0100               	movlb	0	; () banked
  1690  001B4E  5D88               	subwf	MIN@b& (0+255),w,b
  1691  001B50  0100               	movlb	0	; () banked
  1692  001B52  5189               	movf	(MIN@b+1)& (0+255),w,b
  1693  001B54  0A80               	xorlw	128
  1694  001B56  0100               	movlb	0	; () banked
  1695  001B58  6F8A               	movwf	??_MIN& (0+255),b
  1696  001B5A  0100               	movlb	0	; () banked
  1697  001B5C  5187               	movf	(MIN@a+1)& (0+255),w,b
  1698  001B5E  0A80               	xorlw	128
  1699  001B60  0100               	movlb	0	; () banked
  1700  001B62  598A               	subwfb	??_MIN& (0+255),w,b
  1701  001B64  B0D8               	btfsc	status,0,c
  1702  001B66  D005               	goto	l301
  1703                           
  1704                           ; BSR set to: 0
  1705  001B68  C088  F086         	movff	MIN@b,?_MIN
  1706  001B6C  C089  F087         	movff	MIN@b+1,?_MIN+1
  1707  001B70  D004               	goto	l302
  1708  001B72                     l301:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;user.c: 187: return a;
  1712  001B72  C086  F086         	movff	MIN@a,?_MIN
  1713  001B76  C087  F087         	movff	MIN@a+1,?_MIN+1
  1714  001B7A                     l302:
  1715                           
  1716                           ; BSR set to: 0
  1717  001B7A  0012               	return		;funcret
  1718  001B7C                     __end_of_MIN:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postinc2	equ	0xFDE
  1730                           postdec2	equ	0xFDD
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _MAX *****************
  1736 ;; Defined at:
  1737 ;;		line 190 in file "user.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  a               2    6[BANK0 ] int 
  1740 ;;  b               2    8[BANK0 ] int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    6[BANK0 ] int 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;Total ram usage:        5 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    4
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_sensorComputation
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text7
  1767  001B7C                     __ptext7:
  1768                           	opt stack 0
  1769  001B7C                     _MAX:
  1770                           	opt stack 24
  1771                           
  1772                           ;user.c: 192: if(a>b) return a;
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;incstack = 0
  1776  001B7C  0100               	movlb	0	; () banked
  1777  001B7E  5186               	movf	MAX@a& (0+255),w,b
  1778  001B80  0100               	movlb	0	; () banked
  1779  001B82  5D88               	subwf	MAX@b& (0+255),w,b
  1780  001B84  0100               	movlb	0	; () banked
  1781  001B86  5189               	movf	(MAX@b+1)& (0+255),w,b
  1782  001B88  0A80               	xorlw	128
  1783  001B8A  0100               	movlb	0	; () banked
  1784  001B8C  6F8A               	movwf	??_MAX& (0+255),b
  1785  001B8E  0100               	movlb	0	; () banked
  1786  001B90  5187               	movf	(MAX@a+1)& (0+255),w,b
  1787  001B92  0A80               	xorlw	128
  1788  001B94  0100               	movlb	0	; () banked
  1789  001B96  598A               	subwfb	??_MAX& (0+255),w,b
  1790  001B98  B0D8               	btfsc	status,0,c
  1791  001B9A  D005               	goto	l305
  1792                           
  1793                           ; BSR set to: 0
  1794  001B9C  C086  F086         	movff	MAX@a,?_MAX
  1795  001BA0  C087  F087         	movff	MAX@a+1,?_MAX+1
  1796  001BA4  D004               	goto	l306
  1797  001BA6                     l305:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;user.c: 193: return b;
  1801  001BA6  C088  F086         	movff	MAX@b,?_MAX
  1802  001BAA  C089  F087         	movff	MAX@b+1,?_MAX+1
  1803  001BAE                     l306:
  1804                           
  1805                           ; BSR set to: 0
  1806  001BAE  0012               	return		;funcret
  1807  001BB0                     __end_of_MAX:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           intcon	equ	0xFF2
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _InitApp *****************
  1825 ;; Defined at:
  1826 ;;		line 35 in file "user.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    5
  1847 ;; This function calls:
  1848 ;;		_AlgorithmSelection
  1849 ;;		_delay
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text8
  1856  001A98                     __ptext8:
  1857                           	opt stack 0
  1858  001A98                     _InitApp:
  1859                           	opt stack 25
  1860                           
  1861                           ;user.c: 39: TRISC = 0;
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  001A98  0E00               	movlw	0
  1866  001A9A  6E94               	movwf	3988,c	;volatile
  1867                           
  1868                           ;user.c: 43: TRISEbits.TRISE1=1;
  1869  001A9C  8296               	bsf	3990,1,c	;volatile
  1870                           
  1871                           ;user.c: 45: TRISEbits.TRISE2=1;
  1872  001A9E  8496               	bsf	3990,2,c	;volatile
  1873                           
  1874                           ;user.c: 47: TRISBbits.RB1=1;
  1875  001AA0  8293               	bsf	3987,1,c	;volatile
  1876                           
  1877                           ;user.c: 49: TRISBbits.RB0=1;
  1878  001AA2  8093               	bsf	3987,0,c	;volatile
  1879                           
  1880                           ;user.c: 52: TRISBbits.RB3=1;
  1881  001AA4  8693               	bsf	3987,3,c	;volatile
  1882                           
  1883                           ;user.c: 54: TRISBbits.RB2=1;
  1884  001AA6  8493               	bsf	3987,2,c	;volatile
  1885                           
  1886                           ;user.c: 58: ADCON1 =0b00000001;
  1887  001AA8  0E01               	movlw	1
  1888  001AAA  6EC1               	movwf	4033,c	;volatile
  1889                           
  1890                           ;user.c: 63: ADCON2=0b00001010;
  1891  001AAC  0E0A               	movlw	10
  1892  001AAE  6EC0               	movwf	4032,c	;volatile
  1893                           
  1894                           ;user.c: 68: ADCON0=0b00101011;
  1895  001AB0  0E2B               	movlw	43
  1896  001AB2  6EC2               	movwf	4034,c	;volatile
  1897                           
  1898                           ;user.c: 77: T0CON = 0b11000100;
  1899  001AB4  0EC4               	movlw	196
  1900  001AB6  6ED5               	movwf	4053,c	;volatile
  1901                           
  1902                           ;user.c: 85: INTCON2 = 0b11110100;
  1903  001AB8  0EF4               	movlw	244
  1904  001ABA  6EF1               	movwf	intcon2,c	;volatile
  1905                           
  1906                           ;user.c: 95: INTCON = 0b00100000;
  1907  001ABC  0E20               	movlw	32
  1908  001ABE  6EF2               	movwf	intcon,c	;volatile
  1909                           
  1910                           ;user.c: 105: AlgorithmSelection();
  1911  001AC0  ECFD  F00D         	call	_AlgorithmSelection	;wreg free
  1912                           
  1913                           ;user.c: 108: delay(1000);
  1914  001AC4  0E03               	movlw	3
  1915  001AC6  0100               	movlb	0	; () banked
  1916  001AC8  6F81               	movwf	(delay@ms+1)& (0+255),b
  1917  001ACA  0EE8               	movlw	232
  1918  001ACC  6F80               	movwf	delay@ms& (0+255),b
  1919  001ACE  EC2A  F00D         	call	_delay	;wreg free
  1920  001AD2  0012               	return		;funcret
  1921  001AD4                     __end_of_InitApp:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon	equ	0xFF2
  1930                           intcon2	equ	0xFF1
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _delay *****************
  1940 ;; Defined at:
  1941 ;;		line 29 in file "user.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  ms              2    0[BANK0 ] unsigned int 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  x               2    3[BANK0 ] int 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;Total ram usage:        5 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    4
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_InitApp
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text9
  1970  001A54                     __ptext9:
  1971                           	opt stack 0
  1972  001A54                     _delay:
  1973                           	opt stack 25
  1974                           
  1975                           ;user.c: 30: int x = 0;
  1976                           
  1977                           ;incstack = 0
  1978  001A54  0E00               	movlw	0
  1979  001A56  0100               	movlb	0	; () banked
  1980  001A58  6F84               	movwf	(delay@x+1)& (0+255),b
  1981  001A5A  0E00               	movlw	0
  1982  001A5C  6F83               	movwf	delay@x& (0+255),b
  1983                           
  1984                           ;user.c: 31: for (x = 0; x < ms; x++)
  1985  001A5E  0E00               	movlw	0
  1986  001A60  0100               	movlb	0	; () banked
  1987  001A62  6F84               	movwf	(delay@x+1)& (0+255),b
  1988  001A64  0E00               	movlw	0
  1989  001A66  6F83               	movwf	delay@x& (0+255),b
  1990  001A68  D00C               	goto	l260
  1991  001A6A                     l1818:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1995  001A6A  0E0B               	movlw	11
  1996  001A6C  0100               	movlb	0	; () banked
  1997  001A6E  6F82               	movwf	??_delay& (0+255),b
  1998  001A70  0E62               	movlw	98
  1999  001A72                     u1627:
  2000  001A72  2EE8               	decfsz	wreg,f,c
  2001  001A74  D7FE               	goto	u1627
  2002  001A76  2F82               	decfsz	??_delay& (0+255),f,b
  2003  001A78  D7FC               	goto	u1627
  2004  001A7A  D000               	nop2	
  2005  001A7C  0100               	movlb	0	; () banked
  2006  001A7E  4B83               	infsnz	delay@x& (0+255),f,b
  2007  001A80  2B84               	incf	(delay@x+1)& (0+255),f,b
  2008  001A82                     l260:
  2009                           
  2010                           ; BSR set to: 0
  2011  001A82  0100               	movlb	0	; () banked
  2012  001A84  5180               	movf	delay@ms& (0+255),w,b
  2013  001A86  0100               	movlb	0	; () banked
  2014  001A88  5D83               	subwf	delay@x& (0+255),w,b
  2015  001A8A  0100               	movlb	0	; () banked
  2016  001A8C  5181               	movf	(delay@ms+1)& (0+255),w,b
  2017  001A8E  0100               	movlb	0	; () banked
  2018  001A90  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2019  001A92  A0D8               	btfss	status,0,c
  2020  001A94  D7EA               	goto	l1818
  2021                           
  2022                           ; BSR set to: 0
  2023                           
  2024                           ; BSR set to: 0
  2025  001A96  0012               	return		;funcret
  2026  001A98                     __end_of_delay:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           intcon	equ	0xFF2
  2035                           intcon2	equ	0xFF1
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _AlgorithmSelection *****************
  2045 ;; Defined at:
  2046 ;;		line 112 in file "user.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    4
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_InitApp
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text10
  2075  001BFA                     __ptext10:
  2076                           	opt stack 0
  2077  001BFA                     _AlgorithmSelection:
  2078                           	opt stack 25
  2079                           
  2080                           ;user.c: 114: ADCON0 = 0b00100111;
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;incstack = 0
  2084  001BFA  0E27               	movlw	39
  2085  001BFC  6EC2               	movwf	4034,c	;volatile
  2086                           
  2087                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2088  001BFE  82C2               	bsf	4034,1,c	;volatile
  2089                           
  2090                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2091  001C00  D000               	goto	l269
  2092  001C02                     l269:
  2093  001C02  B2C2               	btfsc	4034,1,c	;volatile
  2094  001C04  D7FE               	goto	l269
  2095                           
  2096                           ;user.c: 119: if(ADRESL > 0b10000000)
  2097  001C06  0E80               	movlw	128
  2098  001C08  64C3               	cpfsgt	4035,c	;volatile
  2099  001C0A  D002               	goto	l1830
  2100                           
  2101                           ;user.c: 120: algorithm = LEFTWALL;
  2102  001C0C  0E00               	movlw	0
  2103  001C0E  D001               	goto	L5
  2104  001C10                     l1830:
  2105                           
  2106                           ;user.c: 121: else
  2107                           ;user.c: 122: algorithm = RIGHTWALL;
  2108  001C10  0E01               	movlw	1
  2109  001C12                     L5:
  2110  001C12  6E35               	movwf	_algorithm,c
  2111  001C14  D000               	goto	l274
  2112  001C16                     l274:
  2113  001C16  0012               	return		;funcret
  2114  001C18                     __end_of_AlgorithmSelection:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           prodh	equ	0xFF4
  2121                           prodl	equ	0xFF3
  2122                           intcon	equ	0xFF2
  2123                           intcon2	equ	0xFF1
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _ConfigureOscillator *****************
  2133 ;; Defined at:
  2134 ;;		line 24 in file "system.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		wreg, status,2
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    4
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text11
  2163  001C7A                     __ptext11:
  2164                           	opt stack 0
  2165  001C7A                     _ConfigureOscillator:
  2166                           	opt stack 26
  2167                           
  2168                           ;system.c: 29: OSCCON = 0b01111100;
  2169                           
  2170                           ;incstack = 0
  2171  001C7A  0E7C               	movlw	124
  2172  001C7C  6ED3               	movwf	4051,c	;volatile
  2173                           
  2174                           ;system.c: 31: OSCTUNE = 0b01001111;
  2175  001C7E  0E4F               	movlw	79
  2176  001C80  6E9B               	movwf	3995,c	;volatile
  2177  001C82  0012               	return		;funcret
  2178  001C84                     __end_of_ConfigureOscillator:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           intcon	equ	0xFF2
  2187                           intcon2	equ	0xFF1
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _low_isr *****************
  2197 ;; Defined at:
  2198 ;;		line 230 in file "interrupts.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;		None               void
  2205 ;; Registers used:
  2206 ;;		None
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:       17 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    3
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		Interrupt level 1
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	intcodelo
  2227  000018                     __pintcodelo:
  2228                           	opt stack 0
  2229  000018                     _low_isr:
  2230                           	opt stack 24
  2231                           
  2232                           ;incstack = 0
  2233  000018  CFD8 F038          	movff	status,??_low_isr
  2234  00001C  CFE8 F039          	movff	wreg,??_low_isr+1
  2235  000020  CFE0 F03A          	movff	bsr,??_low_isr+2
  2236  000024  CFFA F03B          	movff	pclath,??_low_isr+3
  2237  000028  CFFB F03C          	movff	pclatu,??_low_isr+4
  2238  00002C  CFE9 F03D          	movff	fsr0l,??_low_isr+5
  2239  000030  CFEA F03E          	movff	fsr0h,??_low_isr+6
  2240  000034  CFE1 F03F          	movff	fsr1l,??_low_isr+7
  2241  000038  CFE2 F040          	movff	fsr1h,??_low_isr+8
  2242  00003C  CFD9 F041          	movff	fsr2l,??_low_isr+9
  2243  000040  CFDA F042          	movff	fsr2h,??_low_isr+10
  2244  000044  CFF3 F043          	movff	prodl,??_low_isr+11
  2245  000048  CFF4 F044          	movff	prodh,??_low_isr+12
  2246  00004C  CFF6 F045          	movff	tblptrl,??_low_isr+13
  2247  000050  CFF7 F046          	movff	tblptrh,??_low_isr+14
  2248  000054  CFF8 F047          	movff	tblptru,??_low_isr+15
  2249  000058  CFF5 F048          	movff	tablat,??_low_isr+16
  2250  00005C  C048  FFF5         	movff	??_low_isr+16,tablat
  2251  000060  C047  FFF8         	movff	??_low_isr+15,tblptru
  2252  000064  C046  FFF7         	movff	??_low_isr+14,tblptrh
  2253  000068  C045  FFF6         	movff	??_low_isr+13,tblptrl
  2254  00006C  C044  FFF4         	movff	??_low_isr+12,prodh
  2255  000070  C043  FFF3         	movff	??_low_isr+11,prodl
  2256  000074  C042  FFDA         	movff	??_low_isr+10,fsr2h
  2257  000078  C041  FFD9         	movff	??_low_isr+9,fsr2l
  2258  00007C  C040  FFE2         	movff	??_low_isr+8,fsr1h
  2259  000080  C03F  FFE1         	movff	??_low_isr+7,fsr1l
  2260  000084  C03E  FFEA         	movff	??_low_isr+6,fsr0h
  2261  000088  C03D  FFE9         	movff	??_low_isr+5,fsr0l
  2262  00008C  C03C  FFFB         	movff	??_low_isr+4,pclatu
  2263  000090  C03B  FFFA         	movff	??_low_isr+3,pclath
  2264  000094  C03A  FFE0         	movff	??_low_isr+2,bsr
  2265  000098  C039  FFE8         	movff	??_low_isr+1,wreg
  2266  00009C  C038  FFD8         	movff	??_low_isr,status
  2267  0000A0  0010               	retfie	
  2268  0000A2                     __end_of_low_isr:
  2269                           	opt stack 0
  2270                           pclatu	equ	0xFFB
  2271                           pclath	equ	0xFFA
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           intcon2	equ	0xFF1
  2280                           postinc0	equ	0xFEE
  2281                           fsr0h	equ	0xFEA
  2282                           fsr0l	equ	0xFE9
  2283                           wreg	equ	0xFE8
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           bsr	equ	0xFE0
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _high_isr *****************
  2294 ;; Defined at:
  2295 ;;		line 99 in file "interrupts.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:       14 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    2
  2316 ;; This function calls:
  2317 ;;		_KController
  2318 ;;		_Reversing
  2319 ;;		_forward
  2320 ;;		_merge
  2321 ;;		_motorCounterUpdate
  2322 ;;		_moveMouse
  2323 ;;		_rotate
  2324 ;; This function is called by:
  2325 ;;		Interrupt level 2
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	intcode
  2330  000008                     __pintcode:
  2331                           	opt stack 0
  2332  000008                     _high_isr:
  2333                           	opt stack 24
  2334                           
  2335                           ;incstack = 0
  2336  000008  CFFA F050          	movff	pclath,??_high_isr
  2337  00000C  CFFB F051          	movff	pclatu,??_high_isr+1
  2338  000010  CFE9 F052          	movff	fsr0l,??_high_isr+2
  2339  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2340                           pclatu	equ	0xFFB
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           intcon2	equ	0xFF1
  2350                           postinc0	equ	0xFEE
  2351                           fsr0h	equ	0xFEA
  2352                           fsr0l	equ	0xFE9
  2353                           wreg	equ	0xFE8
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           bsr	equ	0xFE0
  2357                           postinc2	equ	0xFDE
  2358                           postdec2	equ	0xFDD
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363                           	psect	intcode_body
  2364  001006                     __pintcode_body:
  2365                           	opt stack 24
  2366  001006                     int_func:
  2367                           	opt stack 24
  2368  001006  0006               	pop		; remove dummy address from shadow register refresh
  2369  001008  CFEA F053          	movff	fsr0h,??_high_isr+3
  2370  00100C  CFE1 F054          	movff	fsr1l,??_high_isr+4
  2371  001010  CFE2 F055          	movff	fsr1h,??_high_isr+5
  2372  001014  CFD9 F056          	movff	fsr2l,??_high_isr+6
  2373  001018  CFDA F057          	movff	fsr2h,??_high_isr+7
  2374  00101C  CFF3 F058          	movff	prodl,??_high_isr+8
  2375  001020  CFF4 F059          	movff	prodh,??_high_isr+9
  2376  001024  CFF6 F05A          	movff	tblptrl,??_high_isr+10
  2377  001028  CFF7 F05B          	movff	tblptrh,??_high_isr+11
  2378  00102C  CFF8 F05C          	movff	tblptru,??_high_isr+12
  2379  001030  CFF5 F05D          	movff	tablat,??_high_isr+13
  2380                           
  2381                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2382  001034  A4F2               	btfss	intcon,2,c	;volatile
  2383  001036  D143               	goto	i2l104
  2384                           
  2385                           ;interrupts.c: 119: {
  2386                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2387  001038  BE1A               	btfsc	_MotorDelayCounter+1,7,c
  2388  00103A  D13D               	goto	i2l1730
  2389  00103C  501A               	movf	_MotorDelayCounter+1,w,c
  2390  00103E  E104               	bnz	i2u108_40
  2391  001040  0E03               	movlw	3
  2392  001042  5C19               	subwf	_MotorDelayCounter,w,c
  2393  001044  A0D8               	btfss	status,0,c
  2394  001046  D137               	goto	i2l1730
  2395  001048                     i2u108_40:
  2396                           
  2397                           ;interrupts.c: 121: {
  2398                           ;interrupts.c: 123: if(ignoreControll > 0){
  2399  001048  505E               	movf	_ignoreControll,w,c
  2400  00104A  B4D8               	btfsc	status,2,c
  2401  00104C  D015               	goto	i2l1634
  2402                           
  2403                           ;interrupts.c: 124: KController();
  2404  00104E  ECC9  F00C         	call	_KController	;wreg free
  2405                           
  2406                           ;interrupts.c: 125: if (sensorValue[3] > 100 && sensorValue[2] > 100){
  2407  001052  BE10               	btfsc	_sensorValue+7,7,c
  2408  001054  D124               	goto	i2l1728
  2409  001056  5010               	movf	_sensorValue+7,w,c
  2410  001058  E104               	bnz	i2u110_40
  2411  00105A  0E65               	movlw	101
  2412  00105C  5C0F               	subwf	_sensorValue+6,w,c
  2413  00105E  A0D8               	btfss	status,0,c
  2414  001060  D11E               	goto	i2l1728
  2415  001062                     i2u110_40:
  2416  001062  BE0E               	btfsc	_sensorValue+5,7,c
  2417  001064  D11C               	goto	i2l1728
  2418  001066  500E               	movf	_sensorValue+5,w,c
  2419  001068  E104               	bnz	i2u111_40
  2420  00106A  0E65               	movlw	101
  2421  00106C  5C0D               	subwf	_sensorValue+4,w,c
  2422  00106E  A0D8               	btfss	status,0,c
  2423  001070  D116               	goto	i2l1728
  2424  001072                     i2u111_40:
  2425                           
  2426                           ;interrupts.c: 126: ignoreControll = 0;
  2427  001072  0E00               	movlw	0
  2428  001074  6E5E               	movwf	_ignoreControll,c
  2429                           
  2430                           ;interrupts.c: 127: }
  2431                           ;interrupts.c: 129: }
  2432  001076  D113               	goto	i2l1728
  2433  001078                     i2l1634:
  2434                           
  2435                           ;interrupts.c: 131: else if (ForwardCounter > 0) {
  2436  001078  BE16               	btfsc	_ForwardCounter+1,7,c
  2437  00107A  D008               	goto	i2l1638
  2438  00107C  5016               	movf	_ForwardCounter+1,w,c
  2439  00107E  E103               	bnz	i2u112_40
  2440  001080  0415               	decf	_ForwardCounter,w,c
  2441  001082  A0D8               	btfss	status,0,c
  2442  001084  D003               	goto	i2l1638
  2443  001086                     i2u112_40:
  2444                           
  2445                           ;interrupts.c: 132: forward();
  2446  001086  EC0C  F00E         	call	_forward	;wreg free
  2447                           
  2448                           ;interrupts.c: 139: }
  2449  00108A  D109               	goto	i2l1728
  2450  00108C                     i2l1638:
  2451                           
  2452                           ;interrupts.c: 141: else if (ReverseCounter > 0) {
  2453  00108C  BE1E               	btfsc	_ReverseCounter+1,7,c
  2454  00108E  D008               	goto	i2l1642
  2455  001090  501E               	movf	_ReverseCounter+1,w,c
  2456  001092  E103               	bnz	i2u113_40
  2457  001094  041D               	decf	_ReverseCounter,w,c
  2458  001096  A0D8               	btfss	status,0,c
  2459  001098  D003               	goto	i2l1642
  2460  00109A                     i2u113_40:
  2461                           
  2462                           ;interrupts.c: 142: Reversing();
  2463  00109A  EC1A  F00E         	call	_Reversing	;wreg free
  2464                           
  2465                           ;interrupts.c: 143: }
  2466  00109E  D0FF               	goto	i2l1728
  2467  0010A0                     i2l1642:
  2468                           
  2469                           ;interrupts.c: 145: else if(RotateCounter > 0) {
  2470  0010A0  BE20               	btfsc	_RotateCounter+1,7,c
  2471  0010A2  D025               	goto	i2l1658
  2472  0010A4  5020               	movf	_RotateCounter+1,w,c
  2473  0010A6  E103               	bnz	i2u114_40
  2474  0010A8  041F               	decf	_RotateCounter,w,c
  2475  0010AA  A0D8               	btfss	status,0,c
  2476  0010AC  D020               	goto	i2l1658
  2477  0010AE                     i2u114_40:
  2478                           
  2479                           ;interrupts.c: 147: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2480  0010AE  BE0E               	btfsc	_sensorValue+5,7,c
  2481  0010B0  D006               	goto	i2l1646
  2482  0010B2  0E21               	movlw	33
  2483  0010B4  5C0D               	subwf	_sensorValue+4,w,c
  2484  0010B6  0E03               	movlw	3
  2485  0010B8  580E               	subwfb	_sensorValue+5,w,c
  2486  0010BA  B0D8               	btfsc	status,0,c
  2487  0010BC  D008               	goto	i2l1648
  2488  0010BE                     i2l1646:
  2489  0010BE  BE10               	btfsc	_sensorValue+7,7,c
  2490  0010C0  D00D               	goto	i2l1652
  2491  0010C2  0E21               	movlw	33
  2492  0010C4  5C0F               	subwf	_sensorValue+6,w,c
  2493  0010C6  0E03               	movlw	3
  2494  0010C8  5810               	subwfb	_sensorValue+7,w,c
  2495  0010CA  A0D8               	btfss	status,0,c
  2496  0010CC  D007               	goto	i2l1652
  2497  0010CE                     i2l1648:
  2498                           
  2499                           ;interrupts.c: 148: ReverseCounter = 15;
  2500  0010CE  0E00               	movlw	0
  2501  0010D0  6E1E               	movwf	_ReverseCounter+1,c
  2502  0010D2  0E0F               	movlw	15
  2503  0010D4  6E1D               	movwf	_ReverseCounter,c
  2504                           
  2505                           ;interrupts.c: 149: Reversing();
  2506  0010D6  EC1A  F00E         	call	_Reversing	;wreg free
  2507                           
  2508                           ;interrupts.c: 150: } else {
  2509  0010DA  D0E1               	goto	i2l1728
  2510  0010DC                     i2l1652:
  2511                           
  2512                           ;interrupts.c: 151: rotate(rotatingSide);
  2513  0010DC  5037               	movf	_rotatingSide,w,c
  2514  0010DE  EC6A  F00D         	call	_rotate
  2515                           
  2516                           ;interrupts.c: 152: TurnRight = 0;
  2517  0010E2  0E00               	movlw	0
  2518  0010E4  6E24               	movwf	_TurnRight+1,c
  2519  0010E6  0E00               	movlw	0
  2520  0010E8  6E23               	movwf	_TurnRight,c
  2521  0010EA  D00D               	goto	L6
  2522                           
  2523                           ;interrupts.c: 154: }
  2524                           ;interrupts.c: 155: }
  2525                           
  2526                           ;interrupts.c: 153: TurnLeft = 0;
  2527  0010EC  D0D8               	goto	i2l1728
  2528  0010EE                     i2l1658:
  2529                           
  2530                           ;interrupts.c: 157: else if (TurnLeft == 1){
  2531  0010EE  0421               	decf	_TurnLeft,w,c
  2532  0010F0  1022               	iorwf	_TurnLeft+1,w,c
  2533  0010F2  A4D8               	btfss	status,2,c
  2534  0010F4  D00D               	goto	i2l1662
  2535                           
  2536                           ;interrupts.c: 158: RotateCounter = 170;
  2537  0010F6  0E00               	movlw	0
  2538  0010F8  6E20               	movwf	_RotateCounter+1,c
  2539  0010FA  0EAA               	movlw	170
  2540  0010FC  6E1F               	movwf	_RotateCounter,c
  2541                           
  2542                           ;interrupts.c: 159: rotatingSide = LEFT;
  2543  0010FE  0E00               	movlw	0
  2544  001100  6E37               	movwf	_rotatingSide,c
  2545                           
  2546                           ;interrupts.c: 160: justTurned = 1;
  2547  001102  0E01               	movlw	1
  2548  001104  6E36               	movwf	_justTurned,c
  2549  001106                     L6:
  2550                           
  2551                           ;interrupts.c: 161: TurnLeft = 0;
  2552  001106  0E00               	movlw	0
  2553  001108  6E22               	movwf	_TurnLeft+1,c
  2554  00110A  0E00               	movlw	0
  2555  00110C  6E21               	movwf	_TurnLeft,c
  2556                           
  2557                           ;interrupts.c: 162: }
  2558  00110E  D0C7               	goto	i2l1728
  2559  001110                     i2l1662:
  2560                           
  2561                           ;interrupts.c: 164: else if (TurnRight == 1 && sensorValue[3] > 480 - 40 && sensorValue[
      +                          2] > 480 - 40) {
  2562  001110  0423               	decf	_TurnRight,w,c
  2563  001112  1024               	iorwf	_TurnRight+1,w,c
  2564  001114  B4D8               	btfsc	status,2,c
  2565  001116  BE10               	btfsc	_sensorValue+7,7,c
  2566  001118  D016               	goto	i2l1670
  2567  00111A  0EB9               	movlw	185
  2568  00111C  5C0F               	subwf	_sensorValue+6,w,c
  2569  00111E  0E01               	movlw	1
  2570  001120  5810               	subwfb	_sensorValue+7,w,c
  2571  001122  B0D8               	btfsc	status,0,c
  2572  001124  BE0E               	btfsc	_sensorValue+5,7,c
  2573  001126  D00F               	goto	i2l1670
  2574  001128  0EB9               	movlw	185
  2575  00112A  5C0D               	subwf	_sensorValue+4,w,c
  2576  00112C  0E01               	movlw	1
  2577  00112E  580E               	subwfb	_sensorValue+5,w,c
  2578  001130  A0D8               	btfss	status,0,c
  2579  001132  D009               	goto	i2l1670
  2580                           
  2581                           ;interrupts.c: 165: RotateCounter = 170;
  2582  001134  0E00               	movlw	0
  2583  001136  6E20               	movwf	_RotateCounter+1,c
  2584  001138  0EAA               	movlw	170
  2585  00113A  6E1F               	movwf	_RotateCounter,c
  2586                           
  2587                           ;interrupts.c: 166: rotatingSide = RIGHT;
  2588  00113C  0E01               	movlw	1
  2589  00113E  6E37               	movwf	_rotatingSide,c
  2590                           
  2591                           ;interrupts.c: 167: justTurned = 1;
  2592  001140  0E01               	movlw	1
  2593  001142  6E36               	movwf	_justTurned,c
  2594  001144  D0A7               	goto	i2l1726
  2595  001146                     i2l1670:
  2596                           
  2597                           ;interrupts.c: 171: else if (sensorValue[0] < 95 && algorithm == LEFTWALL) {
  2598  001146  BE0A               	btfsc	_sensorValue+1,7,c
  2599  001148  D006               	goto	i2l1672
  2600  00114A  500A               	movf	_sensorValue+1,w,c
  2601  00114C  E11A               	bnz	i2l1682
  2602  00114E  0E5F               	movlw	95
  2603  001150  5C09               	subwf	_sensorValue,w,c
  2604  001152  B0D8               	btfsc	status,0,c
  2605  001154  D016               	goto	i2l1682
  2606  001156                     i2l1672:
  2607  001156  5035               	movf	_algorithm,w,c
  2608  001158  A4D8               	btfss	status,2,c
  2609  00115A  D013               	goto	i2l1682
  2610                           
  2611                           ;interrupts.c: 172: TurnLeft = 1;
  2612  00115C  0E00               	movlw	0
  2613  00115E  6E22               	movwf	_TurnLeft+1,c
  2614  001160  0E01               	movlw	1
  2615  001162  6E21               	movwf	_TurnLeft,c
  2616                           
  2617                           ;interrupts.c: 173: if(justTurned == 0) {
  2618  001164  5036               	movf	_justTurned,w,c
  2619  001166  A4D8               	btfss	status,2,c
  2620  001168  D004               	goto	i2l1678
  2621                           
  2622                           ;interrupts.c: 174: ForwardCounter = 450;
  2623  00116A  0E01               	movlw	1
  2624  00116C  6E16               	movwf	_ForwardCounter+1,c
  2625  00116E  0EC2               	movlw	194
  2626  001170  D003               	goto	L7
  2627  001172                     i2l1678:
  2628                           
  2629                           ;interrupts.c: 176: ForwardCounter = 410;
  2630  001172  0E01               	movlw	1
  2631  001174  6E16               	movwf	_ForwardCounter+1,c
  2632  001176  0E9A               	movlw	154
  2633  001178                     L7:
  2634  001178  6E15               	movwf	_ForwardCounter,c
  2635  00117A  D000               	goto	i2l1680
  2636  00117C                     i2l1680:
  2637                           
  2638                           ;interrupts.c: 177: }
  2639                           ;interrupts.c: 178: forward();
  2640  00117C  EC0C  F00E         	call	_forward	;wreg free
  2641                           
  2642                           ;interrupts.c: 179: }
  2643  001180  D08E               	goto	i2l1728
  2644  001182                     i2l1682:
  2645                           
  2646                           ;interrupts.c: 181: else if (sensorValue[1] < 95 && sensorValue[0] > 95 && algorithm == 
      +                          LEFTWALL) {
  2647  001182  BE0C               	btfsc	_sensorValue+3,7,c
  2648  001184  D006               	goto	i2l1684
  2649  001186  500C               	movf	_sensorValue+3,w,c
  2650  001188  E122               	bnz	i2l1696
  2651  00118A  0E5F               	movlw	95
  2652  00118C  5C0B               	subwf	_sensorValue+2,w,c
  2653  00118E  B0D8               	btfsc	status,0,c
  2654  001190  D01E               	goto	i2l1696
  2655  001192                     i2l1684:
  2656  001192  BE0A               	btfsc	_sensorValue+1,7,c
  2657  001194  D01C               	goto	i2l1696
  2658  001196  500A               	movf	_sensorValue+1,w,c
  2659  001198  E104               	bnz	i2u125_40
  2660  00119A  0E60               	movlw	96
  2661  00119C  5C09               	subwf	_sensorValue,w,c
  2662  00119E  A0D8               	btfss	status,0,c
  2663  0011A0  D016               	goto	i2l1696
  2664  0011A2                     i2u125_40:
  2665  0011A2  5035               	movf	_algorithm,w,c
  2666  0011A4  A4D8               	btfss	status,2,c
  2667  0011A6  D013               	goto	i2l1696
  2668                           
  2669                           ;interrupts.c: 182: TurnRight = 1;
  2670  0011A8  0E00               	movlw	0
  2671  0011AA  6E24               	movwf	_TurnRight+1,c
  2672  0011AC  0E01               	movlw	1
  2673  0011AE  6E23               	movwf	_TurnRight,c
  2674                           
  2675                           ;interrupts.c: 183: if(justTurned == 0) {
  2676  0011B0  5036               	movf	_justTurned,w,c
  2677  0011B2  A4D8               	btfss	status,2,c
  2678  0011B4  D004               	goto	i2l1692
  2679                           
  2680                           ;interrupts.c: 184: ForwardCounter = 430;
  2681  0011B6  0E01               	movlw	1
  2682  0011B8  6E16               	movwf	_ForwardCounter+1,c
  2683  0011BA  0EAE               	movlw	174
  2684  0011BC  D003               	goto	L8
  2685  0011BE                     i2l1692:
  2686                           
  2687                           ;interrupts.c: 186: ForwardCounter = 390;
  2688  0011BE  0E01               	movlw	1
  2689  0011C0  6E16               	movwf	_ForwardCounter+1,c
  2690  0011C2  0E86               	movlw	134
  2691  0011C4                     L8:
  2692  0011C4  6E15               	movwf	_ForwardCounter,c
  2693  0011C6  D000               	goto	i2l1694
  2694  0011C8                     i2l1694:
  2695                           
  2696                           ;interrupts.c: 187: }
  2697                           ;interrupts.c: 188: forward();
  2698  0011C8  EC0C  F00E         	call	_forward	;wreg free
  2699                           
  2700                           ;interrupts.c: 189: }
  2701  0011CC  D068               	goto	i2l1728
  2702  0011CE                     i2l1696:
  2703                           
  2704                           ;interrupts.c: 191: else if ((sensorValue[0] > 95 && sensorValue[1] > 95 )
  2705                           ;interrupts.c: 192: && (sensorValue[3] > 480 && sensorValue[2] > 480) && RotateCounter <
      +                          = 0)
  2706  0011CE  BE0A               	btfsc	_sensorValue+1,7,c
  2707  0011D0  D02C               	goto	i2l1708
  2708  0011D2  500A               	movf	_sensorValue+1,w,c
  2709  0011D4  E104               	bnz	i2u128_40
  2710  0011D6  0E60               	movlw	96
  2711  0011D8  5C09               	subwf	_sensorValue,w,c
  2712  0011DA  A0D8               	btfss	status,0,c
  2713  0011DC  D026               	goto	i2l1708
  2714  0011DE                     i2u128_40:
  2715  0011DE  BE0C               	btfsc	_sensorValue+3,7,c
  2716  0011E0  D024               	goto	i2l1708
  2717  0011E2  500C               	movf	_sensorValue+3,w,c
  2718  0011E4  E104               	bnz	i2u129_40
  2719  0011E6  0E60               	movlw	96
  2720  0011E8  5C0B               	subwf	_sensorValue+2,w,c
  2721  0011EA  A0D8               	btfss	status,0,c
  2722  0011EC  D01E               	goto	i2l1708
  2723  0011EE                     i2u129_40:
  2724  0011EE  BE10               	btfsc	_sensorValue+7,7,c
  2725  0011F0  D01C               	goto	i2l1708
  2726  0011F2  0EE1               	movlw	225
  2727  0011F4  5C0F               	subwf	_sensorValue+6,w,c
  2728  0011F6  0E01               	movlw	1
  2729  0011F8  5810               	subwfb	_sensorValue+7,w,c
  2730  0011FA  B0D8               	btfsc	status,0,c
  2731  0011FC  BE0E               	btfsc	_sensorValue+5,7,c
  2732  0011FE  D015               	goto	i2l1708
  2733  001200  0EE1               	movlw	225
  2734  001202  5C0D               	subwf	_sensorValue+4,w,c
  2735  001204  0E01               	movlw	1
  2736  001206  580E               	subwfb	_sensorValue+5,w,c
  2737  001208  A0D8               	btfss	status,0,c
  2738  00120A  D00F               	goto	i2l1708
  2739  00120C  BE20               	btfsc	_RotateCounter+1,7,c
  2740  00120E  D005               	goto	i2l1706
  2741  001210  5020               	movf	_RotateCounter+1,w,c
  2742  001212  E10B               	bnz	i2l1708
  2743  001214  041F               	decf	_RotateCounter,w,c
  2744  001216  B0D8               	btfsc	status,0,c
  2745  001218  D008               	goto	i2l1708
  2746  00121A                     i2l1706:
  2747                           
  2748                           ;interrupts.c: 193: {
  2749                           ;interrupts.c: 194: RotateCounter = 170*2;
  2750  00121A  0E01               	movlw	1
  2751  00121C  6E20               	movwf	_RotateCounter+1,c
  2752  00121E  0E54               	movlw	84
  2753  001220  6E1F               	movwf	_RotateCounter,c
  2754                           
  2755                           ;interrupts.c: 195: rotatingSide = LEFT;
  2756  001222  0E00               	movlw	0
  2757  001224  6E37               	movwf	_rotatingSide,c
  2758                           
  2759                           ;interrupts.c: 196: justTurned = 1;
  2760  001226  0E01               	movlw	1
  2761  001228  D023               	goto	L9
  2762  00122A                     i2l1708:
  2763                           
  2764                           ;interrupts.c: 199: else if ((sensorValue[0] > 95 && sensorValue[1] > 95) && sensorValue
      +                          [3] < 100 && sensorValue[2] < 100 ) {
  2765  00122A  BE0A               	btfsc	_sensorValue+1,7,c
  2766  00122C  D023               	goto	i2l1720
  2767  00122E  500A               	movf	_sensorValue+1,w,c
  2768  001230  E104               	bnz	i2u133_40
  2769  001232  0E60               	movlw	96
  2770  001234  5C09               	subwf	_sensorValue,w,c
  2771  001236  A0D8               	btfss	status,0,c
  2772  001238  D01D               	goto	i2l1720
  2773  00123A                     i2u133_40:
  2774  00123A  BE0C               	btfsc	_sensorValue+3,7,c
  2775  00123C  D01B               	goto	i2l1720
  2776  00123E  500C               	movf	_sensorValue+3,w,c
  2777  001240  E104               	bnz	i2u134_40
  2778  001242  0E60               	movlw	96
  2779  001244  5C0B               	subwf	_sensorValue+2,w,c
  2780  001246  A0D8               	btfss	status,0,c
  2781  001248  D015               	goto	i2l1720
  2782  00124A                     i2u134_40:
  2783  00124A  BE10               	btfsc	_sensorValue+7,7,c
  2784  00124C  D006               	goto	i2l1714
  2785  00124E  5010               	movf	_sensorValue+7,w,c
  2786  001250  E111               	bnz	i2l1720
  2787  001252  0E64               	movlw	100
  2788  001254  5C0F               	subwf	_sensorValue+6,w,c
  2789  001256  B0D8               	btfsc	status,0,c
  2790  001258  D00D               	goto	i2l1720
  2791  00125A                     i2l1714:
  2792  00125A  BE0E               	btfsc	_sensorValue+5,7,c
  2793  00125C  D006               	goto	i2l1716
  2794  00125E  500E               	movf	_sensorValue+5,w,c
  2795  001260  E109               	bnz	i2l1720
  2796  001262  0E64               	movlw	100
  2797  001264  5C0D               	subwf	_sensorValue+4,w,c
  2798  001266  B0D8               	btfsc	status,0,c
  2799  001268  D005               	goto	i2l1720
  2800  00126A                     i2l1716:
  2801                           
  2802                           ;interrupts.c: 201: KController();
  2803  00126A  ECC9  F00C         	call	_KController	;wreg free
  2804                           
  2805                           ;interrupts.c: 202: justTurned = 0;
  2806  00126E  0E00               	movlw	0
  2807  001270                     L9:
  2808  001270  6E36               	movwf	_justTurned,c
  2809                           
  2810                           ;interrupts.c: 204: }
  2811  001272  D015               	goto	i2l1728
  2812  001274                     i2l1720:
  2813                           
  2814                           ;interrupts.c: 210: else {
  2815                           ;interrupts.c: 211: motorCounterUpdate(RIGHT,0);
  2816  001274  0E00               	movlw	0
  2817  001276  6E49               	movwf	motorCounterUpdate@reverse,c
  2818  001278  0E01               	movlw	1
  2819  00127A  EC6E  F00B         	call	_motorCounterUpdate
  2820                           
  2821                           ;interrupts.c: 212: motorCounterUpdate(LEFT,0);
  2822  00127E  0E00               	movlw	0
  2823  001280  6E49               	movwf	motorCounterUpdate@reverse,c
  2824  001282  0E00               	movlw	0
  2825  001284  EC6E  F00B         	call	_motorCounterUpdate
  2826                           
  2827                           ;interrupts.c: 213: justTurned = 0;
  2828  001288  0E00               	movlw	0
  2829  00128A  6E36               	movwf	_justTurned,c
  2830                           
  2831                           ;interrupts.c: 214: TurnLeft = 0;
  2832  00128C  0E00               	movlw	0
  2833  00128E  6E22               	movwf	_TurnLeft+1,c
  2834  001290  0E00               	movlw	0
  2835  001292  6E21               	movwf	_TurnLeft,c
  2836  001294                     i2l1726:
  2837                           
  2838                           ;interrupts.c: 215: TurnRight = 0;
  2839  001294  0E00               	movlw	0
  2840  001296  6E24               	movwf	_TurnRight+1,c
  2841  001298  0E00               	movlw	0
  2842  00129A  6E23               	movwf	_TurnRight,c
  2843  00129C  D000               	goto	i2l1728
  2844  00129E                     i2l1728:
  2845                           
  2846                           ;interrupts.c: 216: }
  2847                           ;interrupts.c: 217: moveMouse(merge(LMotorCounter,RMotorCounter));
  2848  00129E  C034  F049         	movff	_RMotorCounter,merge@right
  2849  0012A2  5033               	movf	_LMotorCounter,w,c
  2850  0012A4  EC35  F00E         	call	_merge
  2851  0012A8  EC42  F00E         	call	_moveMouse
  2852                           
  2853                           ;interrupts.c: 218: MotorDelayCounter = 0;
  2854  0012AC  0E00               	movlw	0
  2855  0012AE  6E1A               	movwf	_MotorDelayCounter+1,c
  2856  0012B0  0E00               	movlw	0
  2857  0012B2  6E19               	movwf	_MotorDelayCounter,c
  2858  0012B4  D000               	goto	i2l1730
  2859  0012B6                     i2l1730:
  2860                           
  2861                           ;interrupts.c: 219: }
  2862                           ;interrupts.c: 221: MotorDelayCounter++;
  2863  0012B6  4A19               	infsnz	_MotorDelayCounter,f,c
  2864  0012B8  2A1A               	incf	_MotorDelayCounter+1,f,c
  2865                           
  2866                           ;interrupts.c: 222: INTCONbits.TMR0IF = 0;
  2867  0012BA  94F2               	bcf	intcon,2,c	;volatile
  2868  0012BC  D000               	goto	i2l104
  2869  0012BE                     i2l104:
  2870  0012BE  C05D  FFF5         	movff	??_high_isr+13,tablat
  2871  0012C2  C05C  FFF8         	movff	??_high_isr+12,tblptru
  2872  0012C6  C05B  FFF7         	movff	??_high_isr+11,tblptrh
  2873  0012CA  C05A  FFF6         	movff	??_high_isr+10,tblptrl
  2874  0012CE  C059  FFF4         	movff	??_high_isr+9,prodh
  2875  0012D2  C058  FFF3         	movff	??_high_isr+8,prodl
  2876  0012D6  C057  FFDA         	movff	??_high_isr+7,fsr2h
  2877  0012DA  C056  FFD9         	movff	??_high_isr+6,fsr2l
  2878  0012DE  C055  FFE2         	movff	??_high_isr+5,fsr1h
  2879  0012E2  C054  FFE1         	movff	??_high_isr+4,fsr1l
  2880  0012E6  C053  FFEA         	movff	??_high_isr+3,fsr0h
  2881  0012EA  C052  FFE9         	movff	??_high_isr+2,fsr0l
  2882  0012EE  C051  FFFB         	movff	??_high_isr+1,pclatu
  2883  0012F2  C050  FFFA         	movff	??_high_isr,pclath
  2884  0012F6  0011               	retfie		f
  2885  0012F8                     __end_of_high_isr:
  2886                           	opt stack 0
  2887                           pclatu	equ	0xFFB
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           intcon2	equ	0xFF1
  2897                           postinc0	equ	0xFEE
  2898                           fsr0h	equ	0xFEA
  2899                           fsr0l	equ	0xFE9
  2900                           wreg	equ	0xFE8
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           bsr	equ	0xFE0
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _rotate *****************
  2911 ;; Defined at:
  2912 ;;		line 366 in file "interrupts.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  side            1    wreg     enum E4145
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  side            1   19[COMRAM] enum E4145
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;Total ram usage:        1 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    1
  2933 ;; This function calls:
  2934 ;;		_motorCounterUpdate
  2935 ;; This function is called by:
  2936 ;;		_high_isr
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text14
  2941  001AD4                     __ptext14:
  2942                           	opt stack 0
  2943  001AD4                     _rotate:
  2944                           	opt stack 24
  2945                           
  2946                           ;incstack = 0
  2947                           ;rotate@side stored from wreg
  2948  001AD4  6E4B               	movwf	rotate@side,c
  2949                           
  2950                           ;interrupts.c: 368: if (side == LEFT){
  2951  001AD6  504B               	movf	rotate@side,w,c
  2952  001AD8  A4D8               	btfss	status,2,c
  2953  001ADA  D00B               	goto	i2l1554
  2954                           
  2955                           ;interrupts.c: 369: motorCounterUpdate(RIGHT,0);
  2956  001ADC  0E00               	movlw	0
  2957  001ADE  6E49               	movwf	motorCounterUpdate@reverse,c
  2958  001AE0  0E01               	movlw	1
  2959  001AE2  EC6E  F00B         	call	_motorCounterUpdate
  2960                           
  2961                           ;interrupts.c: 370: motorCounterUpdate(LEFT,1);
  2962  001AE6  0E01               	movlw	1
  2963  001AE8  6E49               	movwf	motorCounterUpdate@reverse,c
  2964  001AEA  0E00               	movlw	0
  2965  001AEC  EC6E  F00B         	call	_motorCounterUpdate
  2966                           
  2967                           ;interrupts.c: 371: } else {
  2968  001AF0  D00B               	goto	i2l1556
  2969  001AF2                     i2l1554:
  2970                           
  2971                           ;interrupts.c: 372: motorCounterUpdate(LEFT,0);
  2972  001AF2  0E00               	movlw	0
  2973  001AF4  6E49               	movwf	motorCounterUpdate@reverse,c
  2974  001AF6  0E00               	movlw	0
  2975  001AF8  EC6E  F00B         	call	_motorCounterUpdate
  2976                           
  2977                           ;interrupts.c: 373: motorCounterUpdate(RIGHT,1);
  2978  001AFC  0E01               	movlw	1
  2979  001AFE  6E49               	movwf	motorCounterUpdate@reverse,c
  2980  001B00  0E01               	movlw	1
  2981  001B02  EC6E  F00B         	call	_motorCounterUpdate
  2982  001B06  D000               	goto	i2l1556
  2983  001B08                     i2l1556:
  2984                           
  2985                           ;interrupts.c: 374: }
  2986                           ;interrupts.c: 375: RotateCounter--;
  2987  001B08  061F               	decf	_RotateCounter,f,c
  2988  001B0A  A0D8               	btfss	status,0,c
  2989  001B0C  0620               	decf	_RotateCounter+1,f,c
  2990  001B0E  0012               	return		;funcret
  2991  001B10                     __end_of_rotate:
  2992                           	opt stack 0
  2993                           pclatu	equ	0xFFB
  2994                           pclath	equ	0xFFA
  2995                           tblptru	equ	0xFF8
  2996                           tblptrh	equ	0xFF7
  2997                           tblptrl	equ	0xFF6
  2998                           tablat	equ	0xFF5
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           intcon	equ	0xFF2
  3002                           intcon2	equ	0xFF1
  3003                           postinc0	equ	0xFEE
  3004                           fsr0h	equ	0xFEA
  3005                           fsr0l	equ	0xFE9
  3006                           wreg	equ	0xFE8
  3007                           fsr1h	equ	0xFE2
  3008                           fsr1l	equ	0xFE1
  3009                           bsr	equ	0xFE0
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _moveMouse *****************
  3017 ;; Defined at:
  3018 ;;		line 319 in file "interrupts.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  action          1    wreg     unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  action          1   17[COMRAM] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;		None               void
  3025 ;; Registers used:
  3026 ;;		wreg
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        1 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_high_isr
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text15
  3046  001C84                     __ptext15:
  3047                           	opt stack 0
  3048  001C84                     _moveMouse:
  3049                           	opt stack 25
  3050                           
  3051                           ;incstack = 0
  3052                           ;moveMouse@action stored from wreg
  3053  001C84  6E49               	movwf	moveMouse@action,c
  3054                           
  3055                           ;interrupts.c: 321: LATC = action;
  3056  001C86  C049  FF8B         	movff	moveMouse@action,3979	;volatile
  3057  001C8A  0012               	return		;funcret
  3058  001C8C                     __end_of_moveMouse:
  3059                           	opt stack 0
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           postinc0	equ	0xFEE
  3071                           fsr0h	equ	0xFEA
  3072                           fsr0l	equ	0xFE9
  3073                           wreg	equ	0xFE8
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           bsr	equ	0xFE0
  3077                           postinc2	equ	0xFDE
  3078                           postdec2	equ	0xFDD
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _merge *****************
  3084 ;; Defined at:
  3085 ;;		line 312 in file "interrupts.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  left            1    wreg     unsigned char 
  3088 ;;  right           1   17[COMRAM] unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  left            1   18[COMRAM] unsigned char 
  3091 ;;  merged          1   19[COMRAM] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      unsigned char 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_high_isr
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text16
  3115  001C6A                     __ptext16:
  3116                           	opt stack 0
  3117  001C6A                     _merge:
  3118                           	opt stack 25
  3119                           
  3120                           ;incstack = 0
  3121                           ;merge@left stored from wreg
  3122  001C6A  6E4A               	movwf	merge@left,c
  3123                           
  3124                           ;interrupts.c: 314: unsigned char merged;
  3125                           ;interrupts.c: 315: merged = left + (right << 4);
  3126  001C6C  3849               	swapf	merge@right,w,c
  3127  001C6E  0BF0               	andlw	240
  3128  001C70  244A               	addwf	merge@left,w,c
  3129  001C72  6E4B               	movwf	merge@merged,c
  3130                           
  3131                           ;interrupts.c: 316: return merged;
  3132  001C74  504B               	movf	merge@merged,w,c
  3133  001C76  D000               	goto	i2l148
  3134  001C78                     i2l148:
  3135  001C78  0012               	return		;funcret
  3136  001C7A                     __end_of_merge:
  3137                           	opt stack 0
  3138                           pclatu	equ	0xFFB
  3139                           pclath	equ	0xFFA
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           intcon	equ	0xFF2
  3147                           intcon2	equ	0xFF1
  3148                           postinc0	equ	0xFEE
  3149                           fsr0h	equ	0xFEA
  3150                           fsr0l	equ	0xFE9
  3151                           wreg	equ	0xFE8
  3152                           fsr1h	equ	0xFE2
  3153                           fsr1l	equ	0xFE1
  3154                           bsr	equ	0xFE0
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _forward *****************
  3162 ;; Defined at:
  3163 ;;		line 411 in file "interrupts.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;		None               void
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;Total ram usage:        0 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    1
  3184 ;; This function calls:
  3185 ;;		_motorCounterUpdate
  3186 ;; This function is called by:
  3187 ;;		_high_isr
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text17
  3192  001C18                     __ptext17:
  3193                           	opt stack 0
  3194  001C18                     _forward:
  3195                           	opt stack 24
  3196                           
  3197                           ;interrupts.c: 413: motorCounterUpdate(RIGHT,0);
  3198                           
  3199                           ;incstack = 0
  3200  001C18  0E00               	movlw	0
  3201  001C1A  6E49               	movwf	motorCounterUpdate@reverse,c
  3202  001C1C  0E01               	movlw	1
  3203  001C1E  EC6E  F00B         	call	_motorCounterUpdate
  3204                           
  3205                           ;interrupts.c: 414: motorCounterUpdate(LEFT,0);
  3206  001C22  0E00               	movlw	0
  3207  001C24  6E49               	movwf	motorCounterUpdate@reverse,c
  3208  001C26  0E00               	movlw	0
  3209  001C28  EC6E  F00B         	call	_motorCounterUpdate
  3210                           
  3211                           ;interrupts.c: 415: ForwardCounter--;
  3212  001C2C  0615               	decf	_ForwardCounter,f,c
  3213  001C2E  A0D8               	btfss	status,0,c
  3214  001C30  0616               	decf	_ForwardCounter+1,f,c
  3215  001C32  0012               	return		;funcret
  3216  001C34                     __end_of_forward:
  3217                           	opt stack 0
  3218                           pclatu	equ	0xFFB
  3219                           pclath	equ	0xFFA
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           intcon	equ	0xFF2
  3227                           intcon2	equ	0xFF1
  3228                           postinc0	equ	0xFEE
  3229                           fsr0h	equ	0xFEA
  3230                           fsr0l	equ	0xFE9
  3231                           wreg	equ	0xFE8
  3232                           fsr1h	equ	0xFE2
  3233                           fsr1l	equ	0xFE1
  3234                           bsr	equ	0xFE0
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _Reversing *****************
  3242 ;; Defined at:
  3243 ;;		line 390 in file "interrupts.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;		None
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;		None               void
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:        0 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    1
  3264 ;; This function calls:
  3265 ;;		_motorCounterUpdate
  3266 ;; This function is called by:
  3267 ;;		_high_isr
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text18
  3272  001C34                     __ptext18:
  3273                           	opt stack 0
  3274  001C34                     _Reversing:
  3275                           	opt stack 24
  3276                           
  3277                           ;interrupts.c: 392: motorCounterUpdate(RIGHT,1);
  3278                           
  3279                           ;incstack = 0
  3280  001C34  0E01               	movlw	1
  3281  001C36  6E49               	movwf	motorCounterUpdate@reverse,c
  3282  001C38  0E01               	movlw	1
  3283  001C3A  EC6E  F00B         	call	_motorCounterUpdate
  3284                           
  3285                           ;interrupts.c: 393: motorCounterUpdate(LEFT,1);
  3286  001C3E  0E01               	movlw	1
  3287  001C40  6E49               	movwf	motorCounterUpdate@reverse,c
  3288  001C42  0E00               	movlw	0
  3289  001C44  EC6E  F00B         	call	_motorCounterUpdate
  3290                           
  3291                           ;interrupts.c: 394: ReverseCounter--;
  3292  001C48  061D               	decf	_ReverseCounter,f,c
  3293  001C4A  A0D8               	btfss	status,0,c
  3294  001C4C  061E               	decf	_ReverseCounter+1,f,c
  3295  001C4E  0012               	return		;funcret
  3296  001C50                     __end_of_Reversing:
  3297                           	opt stack 0
  3298                           pclatu	equ	0xFFB
  3299                           pclath	equ	0xFFA
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           intcon2	equ	0xFF1
  3308                           postinc0	equ	0xFEE
  3309                           fsr0h	equ	0xFEA
  3310                           fsr0l	equ	0xFE9
  3311                           wreg	equ	0xFE8
  3312                           fsr1h	equ	0xFE2
  3313                           fsr1l	equ	0xFE1
  3314                           bsr	equ	0xFE0
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _KController *****************
  3322 ;; Defined at:
  3323 ;;		line 332 in file "interrupts.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  diff            2   22[COMRAM] int 
  3328 ;;  correctTo       1   21[COMRAM] enum E4145
  3329 ;; Return value:  Size  Location     Type
  3330 ;;		None               void
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;Total ram usage:        5 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    1
  3345 ;; This function calls:
  3346 ;;		_ABS
  3347 ;;		_motorCounterUpdate
  3348 ;; This function is called by:
  3349 ;;		_high_isr
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text19
  3354  001992                     __ptext19:
  3355                           	opt stack 0
  3356  001992                     _KController:
  3357                           	opt stack 24
  3358                           
  3359                           ;interrupts.c: 334: Side correctTo;
  3360                           ;interrupts.c: 335: int diff = 0;
  3361                           
  3362                           ;incstack = 0
  3363  001992  0E00               	movlw	0
  3364  001994  6E4F               	movwf	KController@diff+1,c
  3365  001996  0E00               	movlw	0
  3366  001998  6E4E               	movwf	KController@diff,c
  3367                           
  3368                           ;interrupts.c: 336: if(ignoreControll > 0){
  3369  00199A  505E               	movf	_ignoreControll,w,c
  3370  00199C  B4D8               	btfsc	status,2,c
  3371  00199E  D00C               	goto	i2l1518
  3372                           
  3373                           ;interrupts.c: 337: motorCounterUpdate(RIGHT,0);
  3374  0019A0  0E00               	movlw	0
  3375  0019A2  6E49               	movwf	motorCounterUpdate@reverse,c
  3376  0019A4  0E01               	movlw	1
  3377  0019A6  EC6E  F00B         	call	_motorCounterUpdate
  3378                           
  3379                           ;interrupts.c: 338: motorCounterUpdate(LEFT,0);
  3380  0019AA  0E00               	movlw	0
  3381  0019AC  6E49               	movwf	motorCounterUpdate@reverse,c
  3382  0019AE  0E00               	movlw	0
  3383  0019B0  EC6E  F00B         	call	_motorCounterUpdate
  3384                           
  3385                           ;interrupts.c: 339: ignoreControll--;
  3386  0019B4  065E               	decf	_ignoreControll,f,c
  3387                           
  3388                           ;interrupts.c: 340: return;
  3389  0019B6  D04D               	goto	i2l159
  3390  0019B8                     i2l1518:
  3391                           
  3392                           ;interrupts.c: 341: }
  3393                           ;interrupts.c: 343: diff = ABS(sensorValue[1] - sensorValue[0]);
  3394  0019B8  C009  F04B         	movff	_sensorValue,??_KController
  3395  0019BC  C00A  F04C         	movff	_sensorValue+1,??_KController+1
  3396  0019C0  1E4B               	comf	??_KController,f,c
  3397  0019C2  1E4C               	comf	??_KController+1,f,c
  3398  0019C4  4A4B               	infsnz	??_KController,f,c
  3399  0019C6  2A4C               	incf	??_KController+1,f,c
  3400  0019C8  500B               	movf	_sensorValue+2,w,c
  3401  0019CA  244B               	addwf	??_KController,w,c
  3402  0019CC  6E49               	movwf	ABS@x,c
  3403  0019CE  500C               	movf	_sensorValue+3,w,c
  3404  0019D0  204C               	addwfc	??_KController+1,w,c
  3405  0019D2  6E4A               	movwf	ABS@x+1,c
  3406  0019D4  EC28  F00E         	call	_ABS	;wreg free
  3407  0019D8  C049  F04E         	movff	?_ABS,KController@diff
  3408  0019DC  C04A  F04F         	movff	?_ABS+1,KController@diff+1
  3409                           
  3410                           ;interrupts.c: 345: if(sensorValue[0] > sensorValue[1])
  3411  0019E0  5009               	movf	_sensorValue,w,c
  3412  0019E2  5C0B               	subwf	_sensorValue+2,w,c
  3413  0019E4  500C               	movf	_sensorValue+3,w,c
  3414  0019E6  0A80               	xorlw	128
  3415  0019E8  6E4B               	movwf	??_KController& (0+255),c
  3416  0019EA  500A               	movf	_sensorValue+1,w,c
  3417  0019EC  0A80               	xorlw	128
  3418  0019EE  584B               	subwfb	??_KController& (0+255),w,c
  3419  0019F0  B0D8               	btfsc	status,0,c
  3420  0019F2  D008               	goto	i2l1526
  3421                           
  3422                           ;interrupts.c: 346: {
  3423                           ;interrupts.c: 347: correctTo = LEFT;
  3424  0019F4  0E00               	movlw	0
  3425  0019F6  6E4D               	movwf	KController@correctTo,c
  3426                           
  3427                           ;interrupts.c: 348: motorCounterUpdate(correctTo,0);
  3428  0019F8  0E00               	movlw	0
  3429  0019FA  6E49               	movwf	motorCounterUpdate@reverse,c
  3430  0019FC  504D               	movf	KController@correctTo,w,c
  3431  0019FE  EC6E  F00B         	call	_motorCounterUpdate
  3432                           
  3433                           ;interrupts.c: 349: }
  3434  001A02  D008               	goto	i2l1530
  3435  001A04                     i2l1526:
  3436                           
  3437                           ;interrupts.c: 350: else
  3438                           ;interrupts.c: 351: {
  3439                           ;interrupts.c: 352: correctTo = RIGHT;
  3440  001A04  0E01               	movlw	1
  3441  001A06  6E4D               	movwf	KController@correctTo,c
  3442                           
  3443                           ;interrupts.c: 353: motorCounterUpdate(correctTo,0);
  3444  001A08  0E00               	movlw	0
  3445  001A0A  6E49               	movwf	motorCounterUpdate@reverse,c
  3446  001A0C  504D               	movf	KController@correctTo,w,c
  3447  001A0E  EC6E  F00B         	call	_motorCounterUpdate
  3448  001A12  D000               	goto	i2l1530
  3449  001A14                     i2l1530:
  3450                           
  3451                           ;interrupts.c: 354: }
  3452                           ;interrupts.c: 356: if(diff > 60)
  3453  001A14  BE4F               	btfsc	KController@diff+1,7,c
  3454  001A16  D008               	goto	i2l1534
  3455  001A18  504F               	movf	KController@diff+1,w,c
  3456  001A1A  E104               	bnz	i2u97_40
  3457  001A1C  0E3D               	movlw	61
  3458  001A1E  5C4E               	subwf	KController@diff,w,c
  3459  001A20  A0D8               	btfss	status,0,c
  3460  001A22  D002               	goto	i2l1534
  3461  001A24                     i2u97_40:
  3462                           
  3463                           ;interrupts.c: 357: ignoreControll = 1;
  3464  001A24  0E01               	movlw	1
  3465  001A26  D013               	goto	L11
  3466  001A28                     i2l1534:
  3467                           
  3468                           ;interrupts.c: 358: else if(diff <= 60 && diff > 20)
  3469  001A28  BE4F               	btfsc	KController@diff+1,7,c
  3470  001A2A  D006               	goto	i2l1536
  3471  001A2C  504F               	movf	KController@diff+1,w,c
  3472  001A2E  E10E               	bnz	i2l1540
  3473  001A30  0E3D               	movlw	61
  3474  001A32  5C4E               	subwf	KController@diff,w,c
  3475  001A34  B0D8               	btfsc	status,0,c
  3476  001A36  D00A               	goto	i2l1540
  3477  001A38                     i2l1536:
  3478  001A38  BE4F               	btfsc	KController@diff+1,7,c
  3479  001A3A  D008               	goto	i2l1540
  3480  001A3C  504F               	movf	KController@diff+1,w,c
  3481  001A3E  E104               	bnz	i2u99_40
  3482  001A40  0E15               	movlw	21
  3483  001A42  5C4E               	subwf	KController@diff,w,c
  3484  001A44  A0D8               	btfss	status,0,c
  3485  001A46  D002               	goto	i2l1540
  3486  001A48                     i2u99_40:
  3487                           
  3488                           ;interrupts.c: 359: ignoreControll = 3;
  3489  001A48  0E03               	movlw	3
  3490  001A4A  D001               	goto	L11
  3491  001A4C                     i2l1540:
  3492                           
  3493                           ;interrupts.c: 360: else
  3494                           ;interrupts.c: 361: ignoreControll = 10;
  3495  001A4C  0E0A               	movlw	10
  3496  001A4E                     L11:
  3497  001A4E  6E5E               	movwf	_ignoreControll,c
  3498  001A50  D000               	goto	i2l159
  3499  001A52                     i2l159:
  3500  001A52  0012               	return		;funcret
  3501  001A54                     __end_of_KController:
  3502                           	opt stack 0
  3503                           pclatu	equ	0xFFB
  3504                           pclath	equ	0xFFA
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           intcon2	equ	0xFF1
  3513                           postinc0	equ	0xFEE
  3514                           fsr0h	equ	0xFEA
  3515                           fsr0l	equ	0xFE9
  3516                           wreg	equ	0xFE8
  3517                           fsr1h	equ	0xFE2
  3518                           fsr1l	equ	0xFE1
  3519                           bsr	equ	0xFE0
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _motorCounterUpdate *****************
  3527 ;; Defined at:
  3528 ;;		line 267 in file "interrupts.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  side            1    wreg     enum E4145
  3531 ;;  reverse         1   17[COMRAM] unsigned char 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  side            1   18[COMRAM] enum E4145
  3534 ;; Return value:  Size  Location     Type
  3535 ;;		None               void
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:        2 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_high_isr
  3553 ;;		_KController
  3554 ;;		_rotate
  3555 ;;		_Reversing
  3556 ;;		_forward
  3557 ;;		_smoothTurn
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text20
  3562  0016DC                     __ptext20:
  3563                           	opt stack 0
  3564  0016DC                     _motorCounterUpdate:
  3565                           	opt stack 24
  3566                           
  3567                           ;incstack = 0
  3568                           ;motorCounterUpdate@side stored from wreg
  3569  0016DC  6E4A               	movwf	motorCounterUpdate@side,c
  3570                           
  3571                           ;interrupts.c: 269: if(side == LEFT && reverse == 1)
  3572  0016DE  504A               	movf	motorCounterUpdate@side,w,c
  3573  0016E0  A4D8               	btfss	status,2,c
  3574  0016E2  D01B               	goto	i2l1410
  3575  0016E4  0449               	decf	motorCounterUpdate@reverse,w,c
  3576  0016E6  B4D8               	btfsc	status,2,c
  3577  0016E8  D00B               	goto	i2l1408
  3578  0016EA  D017               	goto	i2l1410
  3579                           
  3580                           ;interrupts.c: 270: {
  3581                           ;interrupts.c: 271: switch(LMotorCounter)
  3582  0016EC  D009               	goto	i2l1408
  3583  0016EE                     i2l1398:
  3584  0016EE  0E02               	movlw	2
  3585  0016F0  D004               	goto	L14
  3586  0016F2                     i2l1400:
  3587  0016F2  0E04               	movlw	4
  3588  0016F4  D002               	goto	L14
  3589                           
  3590                           ;interrupts.c: 275: case 0b00000100: LMotorCounter = 0b00001000; break;
  3591  0016F6  D03E               	goto	i2l1442
  3592                           
  3593                           ;interrupts.c: 276: case 0b00001000: LMotorCounter = 0b00000001; break;
  3594  0016F8  D039               	goto	i2l1436
  3595  0016FA                     L14:
  3596  0016FA  6E33               	movwf	_LMotorCounter,c
  3597  0016FC  D068               	goto	i2l145
  3598                           
  3599                           ;interrupts.c: 277: default: LMotorCounter = 0b00000001;
  3600  0016FE  D036               	goto	i2l1436
  3601  001700                     i2l1408:
  3602  001700  5033               	movf	_LMotorCounter,w,c
  3603                           
  3604                           ; Switch size 1, requested type "space"
  3605                           ; Number of cases is 4, Range of values is 1 to 8
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte           13     7 (average)
  3609                           ;	Chosen strategy is simple_byte
  3610  001702  0A01               	xorlw	1	; case 1
  3611  001704  B4D8               	btfsc	status,2,c
  3612  001706  D7F3               	goto	i2l1398
  3613  001708  0A03               	xorlw	3	; case 2
  3614  00170A  B4D8               	btfsc	status,2,c
  3615  00170C  D7F2               	goto	i2l1400
  3616  00170E  0A06               	xorlw	6	; case 4
  3617  001710  B4D8               	btfsc	status,2,c
  3618  001712  D030               	goto	i2l1442
  3619  001714  0A0C               	xorlw	12	; case 8
  3620  001716  D02A               	goto	i2l1436
  3621                           
  3622                           ;interrupts.c: 279: } else if(side == RIGHT && reverse == 1)
  3623  001718  D05A               	goto	i2l145
  3624  00171A                     i2l1410:
  3625  00171A  044A               	decf	motorCounterUpdate@side,w,c
  3626  00171C  A4D8               	btfss	status,2,c
  3627  00171E  D01D               	goto	i2l1428
  3628  001720  0449               	decf	motorCounterUpdate@reverse,w,c
  3629  001722  B4D8               	btfsc	status,2,c
  3630  001724  D00B               	goto	i2l1426
  3631  001726  D019               	goto	i2l1428
  3632                           
  3633                           ;interrupts.c: 280: {
  3634                           ;interrupts.c: 281: switch(RMotorCounter)
  3635  001728  D009               	goto	i2l1426
  3636  00172A                     i2l1416:
  3637  00172A  0E08               	movlw	8
  3638  00172C  D040               	goto	L22
  3639  00172E                     i2l1418:
  3640  00172E  0E01               	movlw	1
  3641  001730  D03E               	goto	L22
  3642  001732                     i2l1420:
  3643  001732  0E02               	movlw	2
  3644  001734  D03C               	goto	L22
  3645  001736                     i2l1422:
  3646  001736  0E04               	movlw	4
  3647  001738  D03A               	goto	L22
  3648                           
  3649                           ;interrupts.c: 287: default: RMotorCounter = 0b00001000;
  3650  00173A  D7F7               	goto	i2l1416
  3651  00173C                     i2l1426:
  3652  00173C  5034               	movf	_RMotorCounter,w,c
  3653                           
  3654                           ; Switch size 1, requested type "space"
  3655                           ; Number of cases is 4, Range of values is 1 to 8
  3656                           ; switch strategies available:
  3657                           ; Name         Instructions Cycles
  3658                           ; simple_byte           13     7 (average)
  3659                           ;	Chosen strategy is simple_byte
  3660  00173E  0A01               	xorlw	1	; case 1
  3661  001740  B4D8               	btfsc	status,2,c
  3662  001742  D7F3               	goto	i2l1416
  3663  001744  0A03               	xorlw	3	; case 2
  3664  001746  B4D8               	btfsc	status,2,c
  3665  001748  D7F2               	goto	i2l1418
  3666  00174A  0A06               	xorlw	6	; case 4
  3667  00174C  B4D8               	btfsc	status,2,c
  3668  00174E  D7F1               	goto	i2l1420
  3669  001750  0A0C               	xorlw	12	; case 8
  3670  001752  B4D8               	btfsc	status,2,c
  3671  001754  D7F0               	goto	i2l1422
  3672  001756  D7E9               	goto	i2l1416
  3673                           
  3674                           ;interrupts.c: 289: } else if(side == LEFT && reverse == 0)
  3675  001758  D03A               	goto	i2l145
  3676  00175A                     i2l1428:
  3677  00175A  504A               	movf	motorCounterUpdate@side,w,c
  3678  00175C  A4D8               	btfss	status,2,c
  3679  00175E  D01B               	goto	i2l1446
  3680  001760  5049               	movf	motorCounterUpdate@reverse,w,c
  3681  001762  B4D8               	btfsc	status,2,c
  3682  001764  D009               	goto	i2l1444
  3683  001766  D017               	goto	i2l1446
  3684                           
  3685                           ;interrupts.c: 290: {
  3686                           ;interrupts.c: 291: switch(LMotorCounter)
  3687  001768  D007               	goto	i2l1444
  3688                           
  3689                           ;interrupts.c: 292: {
  3690                           ;interrupts.c: 293: case 0b00000001: LMotorCounter = 0b00001000; break;
  3691  00176A  D004               	goto	i2l1442
  3692  00176C                     i2l1436:
  3693  00176C  0E01               	movlw	1
  3694  00176E  D7C5               	goto	L14
  3695                           
  3696                           ;interrupts.c: 295: case 0b00000100: LMotorCounter = 0b00000010; break;
  3697  001770  D7BE               	goto	i2l1398
  3698                           
  3699                           ;interrupts.c: 296: case 0b00001000: LMotorCounter = 0b00000100; break;
  3700  001772  D7BF               	goto	i2l1400
  3701  001774                     i2l1442:
  3702  001774  0E08               	movlw	8
  3703  001776  D7C1               	goto	L14
  3704  001778                     i2l1444:
  3705  001778  5033               	movf	_LMotorCounter,w,c
  3706                           
  3707                           ; Switch size 1, requested type "space"
  3708                           ; Number of cases is 4, Range of values is 1 to 8
  3709                           ; switch strategies available:
  3710                           ; Name         Instructions Cycles
  3711                           ; simple_byte           13     7 (average)
  3712                           ;	Chosen strategy is simple_byte
  3713  00177A  0A01               	xorlw	1	; case 1
  3714  00177C  B4D8               	btfsc	status,2,c
  3715  00177E  D7FA               	goto	i2l1442
  3716  001780  0A03               	xorlw	3	; case 2
  3717  001782  B4D8               	btfsc	status,2,c
  3718  001784  D7F3               	goto	i2l1436
  3719  001786  0A06               	xorlw	6	; case 4
  3720  001788  B4D8               	btfsc	status,2,c
  3721  00178A  D7B1               	goto	i2l1398
  3722  00178C  0A0C               	xorlw	12	; case 8
  3723  00178E  B4D8               	btfsc	status,2,c
  3724  001790  D7B0               	goto	i2l1400
  3725  001792  D7F0               	goto	i2l1442
  3726                           
  3727                           ;interrupts.c: 299: } else if(side == RIGHT && reverse == 0)
  3728  001794  D01C               	goto	i2l145
  3729  001796                     i2l1446:
  3730  001796  044A               	decf	motorCounterUpdate@side,w,c
  3731  001798  A4D8               	btfss	status,2,c
  3732  00179A  D019               	goto	i2l145
  3733  00179C  5049               	movf	motorCounterUpdate@reverse,w,c
  3734  00179E  B4D8               	btfsc	status,2,c
  3735  0017A0  D009               	goto	i2l1462
  3736  0017A2  D015               	goto	i2l145
  3737                           
  3738                           ;interrupts.c: 300: {
  3739                           ;interrupts.c: 301: switch(RMotorCounter)
  3740  0017A4  D007               	goto	i2l1462
  3741                           
  3742                           ;interrupts.c: 302: {
  3743                           ;interrupts.c: 303: case 0b00000001: RMotorCounter = 0b00000010; break;
  3744  0017A6  D7C5               	goto	i2l1420
  3745                           
  3746                           ;interrupts.c: 304: case 0b00000010: RMotorCounter = 0b00000100; break;
  3747  0017A8  D7C6               	goto	i2l1422
  3748                           
  3749                           ;interrupts.c: 305: case 0b00000100: RMotorCounter = 0b00001000; break;
  3750  0017AA  D7BF               	goto	i2l1416
  3751                           
  3752                           ;interrupts.c: 306: case 0b00001000: RMotorCounter = 0b00000001; break;
  3753  0017AC  D7C0               	goto	i2l1418
  3754  0017AE                     L22:
  3755  0017AE  6E34               	movwf	_RMotorCounter,c
  3756  0017B0  D00E               	goto	i2l145
  3757                           
  3758                           ;interrupts.c: 307: default: RMotorCounter = 0b00000001;
  3759  0017B2  D7BD               	goto	i2l1418
  3760  0017B4                     i2l1462:
  3761  0017B4  5034               	movf	_RMotorCounter,w,c
  3762                           
  3763                           ; Switch size 1, requested type "space"
  3764                           ; Number of cases is 4, Range of values is 1 to 8
  3765                           ; switch strategies available:
  3766                           ; Name         Instructions Cycles
  3767                           ; simple_byte           13     7 (average)
  3768                           ;	Chosen strategy is simple_byte
  3769  0017B6  0A01               	xorlw	1	; case 1
  3770  0017B8  B4D8               	btfsc	status,2,c
  3771  0017BA  D7BB               	goto	i2l1420
  3772  0017BC  0A03               	xorlw	3	; case 2
  3773  0017BE  B4D8               	btfsc	status,2,c
  3774  0017C0  D7BA               	goto	i2l1422
  3775  0017C2  0A06               	xorlw	6	; case 4
  3776  0017C4  B4D8               	btfsc	status,2,c
  3777  0017C6  D7B1               	goto	i2l1416
  3778  0017C8  0A0C               	xorlw	12	; case 8
  3779  0017CA  D7B1               	goto	i2l1418
  3780  0017CC  D000               	goto	i2l145
  3781  0017CE                     i2l145:
  3782  0017CE  0012               	return		;funcret
  3783  0017D0                     __end_of_motorCounterUpdate:
  3784                           	opt stack 0
  3785                           pclatu	equ	0xFFB
  3786                           pclath	equ	0xFFA
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           intcon2	equ	0xFF1
  3795                           postinc0	equ	0xFEE
  3796                           fsr0h	equ	0xFEA
  3797                           fsr0l	equ	0xFE9
  3798                           wreg	equ	0xFE8
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           bsr	equ	0xFE0
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _ABS *****************
  3809 ;; Defined at:
  3810 ;;		line 325 in file "interrupts.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  x               2   17[COMRAM] int 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  2   17[COMRAM] int 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;Total ram usage:        2 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_KController
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text21
  3838  001C50                     __ptext21:
  3839                           	opt stack 0
  3840  001C50                     _ABS:
  3841                           	opt stack 24
  3842                           
  3843                           ;interrupts.c: 327: if(x<0) x = -x;
  3844                           
  3845                           ;incstack = 0
  3846  001C50  AE4A               	btfss	ABS@x+1,7,c
  3847  001C52  D005               	goto	i2l1468
  3848  001C54  6C49               	negf	ABS@x,c
  3849  001C56  1E4A               	comf	ABS@x+1,f,c
  3850  001C58  B0D8               	btfsc	status,0,c
  3851  001C5A  2A4A               	incf	ABS@x+1,f,c
  3852  001C5C  D000               	goto	i2l1468
  3853  001C5E                     i2l1468:
  3854                           
  3855                           ;interrupts.c: 328: return x;
  3856  001C5E  C049  F049         	movff	ABS@x,?_ABS
  3857  001C62  C04A  F04A         	movff	ABS@x+1,?_ABS+1
  3858  001C66  D000               	goto	i2l155
  3859  001C68                     i2l155:
  3860  001C68  0012               	return		;funcret
  3861  001C6A                     __end_of_ABS:
  3862                           	opt stack 0
  3863                           pclatu	equ	0xFFB
  3864                           pclath	equ	0xFFA
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           prodh	equ	0xFF4
  3870                           prodl	equ	0xFF3
  3871                           intcon	equ	0xFF2
  3872                           intcon2	equ	0xFF1
  3873                           postinc0	equ	0xFEE
  3874                           fsr0h	equ	0xFEA
  3875                           fsr0l	equ	0xFE9
  3876                           wreg	equ	0xFE8
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           bsr	equ	0xFE0
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8
  3885                           pclatu	equ	0xFFB
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           intcon2	equ	0xFF1
  3895                           postinc0	equ	0xFEE
  3896                           fsr0h	equ	0xFEA
  3897                           fsr0l	equ	0xFE9
  3898                           wreg	equ	0xFE8
  3899                           fsr1h	equ	0xFE2
  3900                           fsr1l	equ	0xFE1
  3901                           bsr	equ	0xFE0
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908                           	psect	rparam
  3909  0000                     pclatu	equ	0xFFB
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           intcon2	equ	0xFF1
  3919                           postinc0	equ	0xFEE
  3920                           fsr0h	equ	0xFEA
  3921                           fsr0l	equ	0xFE9
  3922                           wreg	equ	0xFE8
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           bsr	equ	0xFE0
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      94
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_ABS
    _KController->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5511
                                             24 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     120
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1258
                                             19 COMRAM     5     5      0
                                _ABS
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _motorCounterUpdate
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      5E       1       74.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3      34        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat May 02 16:11:21 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l301 1B72                             l302 1B7A                             l305 1BA6  
                           l306 1BAE                             l260 1A82                             l309 1B46  
                           l502 1990                             l274 1C16                             l269 1C02  
                           l295 1620                             l288 15BA                             _ABS 1C50  
                  __CFG_CPB$OFF 000000                             _MAX 1B7C                             _MIN 1B48  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1C18                    _rotatingSide 0037  
                           wreg 000FE8                            ABS@x 0049                            ?_ABS 0049  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l1812 1986                            l1804 1960  
                          l1830 1C10                            l1910 16C6                            l1808 1970  
                          l1818 1A6A                            l1850 14CC                            l1906 16BC  
                          l1780 18E0                            l1860 15A4                            l1844 1340  
                          l1932 1BEE                            l1854 14E2                            l1838 131C  
                          l1792 1916                            l1848 13AE                            l1794 1924  
                          l1786 18F8                            l1858 153C                            l1890 15E4  
                          l1796 192E                            l1892 15EE                            l1886 15CA  
                          l1896 1608                            u1500 131A                            u1510 133E  
                          _LATC 000F8B                            u1627 1A72                            u1595 162E  
                          _main 1BD8                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1AD4           __end_of_setCorrection 18C2                           ??_ABS 004B  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0038                 __end_of___awdiv 1992                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l104 12BE                           i2l145 17CE  
                         i2l155 1C68                           i2l148 1C78                           i2l159 1A52  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1C7A  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1A54  
                         _merge 1C6A                 __end_of_forward 1C34                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0038  
             _ControllerCounter 0011                 __initialization 1BB0                    __end_of_main 1BFA  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0049                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1400 16F2                          i2l1410 171A  
                        i2l1420 1732                          i2l1422 1736                          i2l1416 172A  
                        i2l1408 1700                          i2l1442 1774                          i2l1418 172E  
                        i2l1426 173C                          i2l1530 1A14                          i2l1436 176C  
                        i2l1444 1778                          i2l1428 175A                          i2l1540 1A4C  
                        i2l1462 17B4                          i2l1446 1796                          i2l1534 1A28  
                        i2l1526 1A04                          i2l1518 19B8                          i2l1536 1A38  
                        i2l1720 1274                          i2l1554 1AF2                          i2l1714 125A  
                        i2l1706 121A                          i2l1642 10A0                          i2l1634 1078  
                        i2l1730 12B6                          i2l1468 1C5E                          i2l1556 1B08  
                        i2l1716 126A                          i2l1708 122A                          i2l1652 10DC  
                        i2l1398 16EE                          i2l1726 1294                          i2l1670 1146  
                        i2l1662 1110                          i2l1646 10BE                          i2l1638 108C  
                        i2l1680 117C                          i2l1672 1156                          i2l1648 10CE  
                        i2l1728 129E                          i2l1682 1182                          i2l1658 10EE  
                        i2l1692 11BE                          i2l1684 1192                          i2l1694 11C8  
                        i2l1678 1172                          i2l1696 11CE                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 004B                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 12F8                          ___wmul 1B10  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 002B  
                        _errorP 002D                          delay@x 0083                          clear_0 1BB6  
              ___awdiv@quotient 0086                          _rotate 1AD4              __size_of_Reversing 001C  
                  __pdataCOMRAM 005E                       ??_forward 004B                    __mediumconst 0000  
                     ??_low_isr 0038                  _ReverseCounter 001D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1BCE                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0038                  __pcstackCOMRAM 0038                   __end_of_delay 1A98  
                    _TurnedLeft 0025                 moveMouse@action 0049                   __end_of_merge 1C7A  
          KController@correctTo 004D      __end_of_motorCounterUpdate 17D0                  _ignoreControll 005E  
                _ForwardCounter 0015                         ??_delay 0082                         ??_merge 004A  
            _AlgorithmSelection 1BFA                    _LTurnCounter 0017               __end_of_Reversing 1C50  
                    _delay_time 0029               _MotorDelayCounter 0019             ?_AlgorithmSelection 0038  
          setCorrection@sideAvg 008A                         ?___wmul 0080              __size_of_moveMouse 0008  
                       ?_rotate 0038                         _INTCON2 000FF1                         _OSCTUNE 000F9B  
                       i2u97_40 1A24                         i2u99_40 1A48            ??_AlgorithmSelection 0080  
                     ?_high_isr 0038                         _Deadend 0013                   _LMotorCounter 0033  
                       _InitApp 1A98                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 18C2                 __size_of___wmul 0038                    __psmallconst 1000  
                       __pcinit 1BB0                         __ramtop 1000                         __ptext0 1BD8  
                       __ptext1 17D0                         __ptext2 15BC                         __ptext3 12F8  
                       __ptext4 1B10                         __ptext5 18C2                         __ptext6 1B48  
                       __ptext7 1B7C                         __ptext8 1A98                         __ptext9 1A54  
               __size_of_rotate 003C                    __size_of_ABS 001A                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1C18                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0038                      ??_high_isr 0050  
                __pintcode_body 1006          __size_of_setCorrection 00F2            end_of_initialization 1BCE  
              _sensorCorrection 0001               __end_of_moveMouse 1C8C                   __Lmediumconst 0000  
                       int_func 1006                      _justTurned 0036            __size_of_KController 00C2  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                     _TRISBbits 000F93                       _TRISEbits 000F96                  ??_sensorUpdate 009A  
   __end_of_ConfigureOscillator 1C84                      _totalError 0031                    _RTurnCounter 001B  
sensorComputation@getCorrection 008D                   _setCorrection 17D0                  __end_of___wmul 1B48  
                 __pidataCOMRAM 1C8C                     _TurnedRight 0027                  __end_of_rotate 1B10  
           start_initialization 1BB0                     __end_of_ABS 1C6A                     __end_of_MAX 1BB0  
                   __end_of_MIN 1B7C              _motorCounterUpdate 16DC                __CFG_OSC$INTIO67 000000  
           ?_motorCounterUpdate 0049                      merge@right 0049                       _Reversing 1C34  
                ?_setCorrection 0038                        ??___wmul 0084                __CFG_LPT1OSC$OFF 000000  
                      ??_rotate 004B                  _sensorLocation 1001            ??_motorCounterUpdate 004A  
                   __pbssCOMRAM 0001                   __pcstackBANK0 0080                       _TurnRight 0023  
     sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0               __size_of_high_isr 12F0  
                      ?_InitApp 0038               __CFG_CCP2MX$PORTC 000000                      ?_Reversing 0038  
                     _algorithm 0035                       __pintcode 0008           setCorrection@frontAvg 008C  
        motorCounterUpdate@side 004A                        ?___awdiv 0080            __end_of_sensorUpdate 16DC  
        __end_of_sensorLocation 1005                     __pintcodelo 0018                     __smallconst 1000  
                      ?_forward 0038                        ?_low_isr 0038                       _oldErrorP 002F  
                __size_of_delay 0044     __size_of_AlgorithmSelection 001E                  __size_of_merge 0010  
                ___wmul@product 0084                       _moveMouse 1C84                        i2u110_40 1062  
                      i2u111_40 1072                        i2u112_40 1086                        i2u113_40 109A  
                      i2u114_40 10AE                        i2u108_40 1048                        i2u133_40 123A  
                      i2u125_40 11A2                        i2u134_40 124A                        i2u128_40 11DE  
                      i2u129_40 11EE                 ??_setCorrection 0088                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0034  
                    rotate@side 004B                   ??_KController 004B                      ?_moveMouse 0038  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 004A  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 004B              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0021                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1BFA                        __ptext11 1C7A  
                      __ptext20 16DC                        __ptext21 1C50                        __ptext14 1AD4  
                      __ptext15 1C84                        __ptext16 1C6A                        __ptext17 1C18  
                      __ptext18 1C34                        __ptext19 1992                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001F           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1A54               _sensorComputation 12F8  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 15BC                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0049  
               KController@diff 004E       __end_of_sensorComputation 15BC                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0049                     _KController 1992  
