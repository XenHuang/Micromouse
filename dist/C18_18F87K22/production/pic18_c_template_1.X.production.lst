

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 17 17:34:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001AAE                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _controllerSteps
    42  001AAE  08                 	db	8
    43                           
    44                           	psect	smallconst
    45  001000                     __psmallconst:
    46                           	opt stack 0
    47  001000  00                 	db	0
    48  001001                     _sensorCorrection:
    49                           	opt stack 0
    50  001001  18                 	db	24
    51  001002  18                 	db	24
    52  001003  06                 	db	6
    53  001004  06                 	db	6
    54  001005                     __end_of_sensorCorrection:
    55                           	opt stack 0
    56  001005                     _sensorLocation:
    57                           	opt stack 0
    58  001005  1B                 	db	27
    59  001006  2B                 	db	43
    60  001007  1F                 	db	31
    61  001008  33                 	db	51
    62  001009                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATC	set	3979
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCTUNE	set	3995
    76  0000                     _T0CON	set	4053
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISEbits	set	3990
    80                           
    81                           ; #config settings
    82  001009  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001968                     __pcinit:
    86                           	opt stack 0
    87  001968                     start_initialization:
    88                           	opt stack 0
    89  001968                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (27 bytes)
    93  001968  EE00  F03D         	lfsr	0,__pbssCOMRAM
    94  00196C  0E1B               	movlw	27
    95  00196E                     clear_0:
    96  00196E  6AEE               	clrf	postinc0,c
    97  001970  06E8               	decf	wreg,f,c
    98  001972  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (1 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  001974  0EAE               	movlw	low __pidataCOMRAM
   103  001976  6EF6               	movwf	tblptrl,c
   104  001978  0E1A               	movlw	high __pidataCOMRAM
   105  00197A  6EF7               	movwf	tblptrh,c
   106  00197C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  00197E  6EF8               	movwf	tblptru,c
   108  001980  0009               	tblrd		*+	;fetch initializer
   109  001982  CFF5 F058          	movff	tablat,__pdataCOMRAM
   110  001986                     end_of_initialization:
   111                           	opt stack 0
   112  001986                     __end_of__initialization:
   113                           	opt stack 0
   114  001986  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  001988  6EF8               	movwf	tblptru,c
   116  00198A  0100               	movlb	0
   117  00198C  EF3C  F00D         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _sensorValue:
   129                           	opt stack 0
   130  00003D                     	ds	8
   131  000045                     _ForwardCounter:
   132                           	opt stack 0
   133  000045                     	ds	2
   134  000047                     _LTurnCounter:
   135                           	opt stack 0
   136  000047                     	ds	2
   137  000049                     _MotorDelayCounter:
   138                           	opt stack 0
   139  000049                     	ds	2
   140  00004B                     _RTurnCounter:
   141                           	opt stack 0
   142  00004B                     	ds	2
   143  00004D                     _ReverseCounter:
   144                           	opt stack 0
   145  00004D                     	ds	2
   146  00004F                     _RotateCounter:
   147                           	opt stack 0
   148  00004F                     	ds	2
   149  000051                     _delay_time:
   150                           	opt stack 0
   151  000051                     	ds	2
   152  000053                     _LMotorCounter:
   153                           	opt stack 0
   154  000053                     	ds	1
   155  000054                     _RMotorCounter:
   156                           	opt stack 0
   157  000054                     	ds	1
   158  000055                     _algorithm:
   159                           	opt stack 0
   160  000055                     	ds	1
   161  000056                     _justTurned:
   162                           	opt stack 0
   163  000056                     	ds	1
   164  000057                     _rotatingSide:
   165                           	opt stack 0
   166  000057                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	dataCOMRAM
   175  000058                     __pdataCOMRAM:
   176                           	opt stack 0
   177  000058                     _controllerSteps:
   178                           	opt stack 0
   179  000058                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	cstackBANK0
   188  000080                     __pcstackBANK0:
   189                           	opt stack 0
   190  000080                     sensorComputation@max:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000080                     	ds	2
   195  000082                     sensorComputation@min:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000082                     	ds	2
   200  000084                     sensorComputation@sum:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000084                     	ds	2
   205  000086                     sensorComputation@i:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000086                     	ds	2
   210  000088                     sensorComputation@j:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214  000088                     	ds	2
   215  00008A                     sensorUpdate@sensorTemp:
   216                           	opt stack 0
   217                           
   218                           ; 80 bytes @ 0xA
   219  00008A                     	ds	80
   220  0000DA                     sensorUpdate@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x5A
   224  0000DA                     	ds	2
   225  0000DC                     sensorUpdate@j:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x5C
   229  0000DC                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_low_isr:
   241  000001                     
   242                           ; 0 bytes @ 0x0
   243  000001                     	ds	17
   244  000012                     ?_ABS:
   245                           	opt stack 0
   246  000012                     motorCounterUpdate@reverse:
   247                           	opt stack 0
   248  000012                     merge@right:
   249                           	opt stack 0
   250  000012                     moveMouse@action:
   251                           	opt stack 0
   252  000012                     ABS@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x11
   256  000012                     	ds	1
   257  000013                     motorCounterUpdate@side:
   258                           	opt stack 0
   259  000013                     merge@left:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	1
   264  000014                     merge@merged:
   265                           	opt stack 0
   266  000014                     rotate@side:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	1
   271  000015                     ??_KController:
   272                           
   273                           ; 0 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     KController@correctTo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000017                     	ds	1
   280  000018                     KController@diff:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     ??_high_isr:
   286                           
   287                           ; 0 bytes @ 0x19
   288  00001A                     	ds	14
   289  000028                     ?___wmul:
   290                           	opt stack 0
   291  000028                     ?___awdiv:
   292                           	opt stack 0
   293  000028                     delay@ms:
   294                           	opt stack 0
   295  000028                     ___wmul@multiplier:
   296                           	opt stack 0
   297  000028                     ___awdiv@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_delay:
   303  00002A                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  00002A                     ___awdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x29
   309  00002A                     	ds	1
   310  00002B                     delay@x:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     ___awdiv@counter:
   316                           	opt stack 0
   317  00002C                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2B
   321  00002C                     	ds	1
   322  00002D                     ___awdiv@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     ?_MIN:
   328                           	opt stack 0
   329  00002E                     ?_MAX:
   330                           	opt stack 0
   331  00002E                     MIN@a:
   332                           	opt stack 0
   333  00002E                     MAX@a:
   334                           	opt stack 0
   335  00002E                     ___awdiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2D
   339  00002E                     	ds	2
   340  000030                     MIN@b:
   341                           	opt stack 0
   342  000030                     MAX@b:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     ??_MIN:
   348  000032                     ??_MAX:
   349                           
   350                           ; 0 bytes @ 0x31
   351  000032                     	ds	1
   352  000033                     sensorComputation@sensorTemp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x32
   356  000033                     	ds	2
   357  000035                     ??_sensorComputation:
   358                           
   359                           ; 0 bytes @ 0x34
   360  000035                     	ds	2
   361  000037                     ??_sensorUpdate:
   362                           
   363                           ; 0 bytes @ 0x36
   364  000037                     	ds	6
   365  00003D                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           ; 0 bytes @ 0x3C
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 41 in file "main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    7
   398 ;; This function calls:
   399 ;;		_ConfigureOscillator
   400 ;;		_InitApp
   401 ;;		_sensorUpdate
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  001A78                     __ptext0:
   409                           	opt stack 0
   410  001A78                     _main:
   411                           	opt stack 24
   412                           
   413                           ;main.c: 44: ConfigureOscillator();
   414                           
   415                           ;incstack = 0
   416  001A78  EC4E  F00D         	call	_ConfigureOscillator	;wreg free
   417                           
   418                           ;main.c: 47: InitApp();
   419  001A7C  EC5E  F00C         	call	_InitApp	;wreg free
   420  001A80  D000               	goto	l1797
   421  001A82                     l1797:
   422                           
   423                           ;main.c: 50: {
   424                           ;main.c: 51: sensorUpdate();
   425  001A82  EC46  F00A         	call	_sensorUpdate	;wreg free
   426  001A86  D7FD               	goto	l1797
   427  001A88  EF51  F000         	goto	start
   428  001A8C                     __end_of_main:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _sensorUpdate *****************
   438 ;; Defined at:
   439 ;;		line 146 in file "user.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   444 ;;  j               2   92[BANK0 ] int 
   445 ;;  i               2   90[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:       90 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		___wmul
   464 ;;		_sensorComputation
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  00148C                     __ptext1:
   472                           	opt stack 0
   473  00148C                     _sensorUpdate:
   474                           	opt stack 24
   475                           
   476                           ;user.c: 148: int i,j;
   477                           ;user.c: 149: int sensorTemp[4][10];
   478                           ;user.c: 152: for(i = 0; i < 10; i++)
   479                           
   480                           ;incstack = 0
   481  00148C  0E00               	movlw	0
   482  00148E  0100               	movlb	0	; () banked
   483  001490  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   484  001492  0E00               	movlw	0
   485  001494  6FDA               	movwf	sensorUpdate@i& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488  001496  0100               	movlb	0	; () banked
   489  001498  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   490  00149A  D00A               	goto	l1763
   491  00149C  0100               	movlb	0	; () banked
   492  00149E  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   493  0014A0  E106               	bnz	u1440
   494  0014A2  0E0A               	movlw	10
   495  0014A4  0100               	movlb	0	; () banked
   496  0014A6  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   497  0014A8  B0D8               	btfsc	status,0,c
   498  0014AA  D0CF               	goto	l1791
   499  0014AC  D001               	goto	l1763
   500  0014AE                     u1440:
   501                           
   502                           ; BSR set to: 0
   503  0014AE  D0CD               	goto	l1791
   504  0014B0                     l1763:
   505                           
   506                           ; BSR set to: 0
   507                           ;user.c: 153: {
   508                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   509  0014B0  0E00               	movlw	0
   510  0014B2  0100               	movlb	0	; () banked
   511  0014B4  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   512  0014B6  0E00               	movlw	0
   513  0014B8  6FDC               	movwf	sensorUpdate@j& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516  0014BA  0100               	movlb	0	; () banked
   517  0014BC  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   518  0014BE  D00A               	goto	l1769
   519  0014C0  0100               	movlb	0	; () banked
   520  0014C2  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   521  0014C4  E106               	bnz	u1450
   522  0014C6  0E04               	movlw	4
   523  0014C8  0100               	movlb	0	; () banked
   524  0014CA  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   525  0014CC  B0D8               	btfsc	status,0,c
   526  0014CE  D0B2               	goto	l1787
   527  0014D0  D001               	goto	l1769
   528  0014D2                     u1450:
   529                           
   530                           ; BSR set to: 0
   531  0014D2  D0B0               	goto	l1787
   532  0014D4                     l1769:
   533                           
   534                           ; BSR set to: 0
   535                           ;user.c: 155: {
   536                           ;user.c: 156: ADCON0 = sensorLocation[j];
   537  0014D4  0E05               	movlw	low _sensorLocation
   538  0014D6  0100               	movlb	0	; () banked
   539  0014D8  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   540  0014DA  6EF6               	movwf	tblptrl,c
   541  0014DC  0E10               	movlw	high _sensorLocation
   542  0014DE  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   543  0014E0  6EF7               	movwf	tblptrh,c
   544  0014E2                     	if	0	;There are less than 3 active tblptr bytes
   545  0014E2                     	endif
   546  0014E2  0008               	tblrd		*
   547  0014E4  CFF5 FFC2          	movff	tablat,4034	;volatile
   548                           
   549                           ; BSR set to: 0
   550                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   551  0014E8  82C2               	bsf	4034,1,c	;volatile
   552                           
   553                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   554  0014EA  D000               	goto	l262
   555  0014EC                     l262:
   556  0014EC  B2C2               	btfsc	4034,1,c	;volatile
   557  0014EE  D7FE               	goto	l262
   558                           
   559                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   560  0014F0  CFC3 F037          	movff	4035,??_sensorUpdate	;volatile
   561  0014F4  0E06               	movlw	6
   562  0014F6  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   563  0014F8                     u1475:
   564  0014F8  90D8               	bcf	status,0,c
   565  0014FA  3237               	rrcf	??_sensorUpdate,f,c
   566  0014FC  2E38               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   567  0014FE  D7FC               	goto	u1475
   568  001500  5037               	movf	??_sensorUpdate,w,c
   569  001502  CFC4 F039          	movff	4036,??_sensorUpdate+2	;volatile
   570  001506  6A3A               	clrf	(??_sensorUpdate+3)& (0+255),c
   571  001508  90D8               	bcf	status,0,c
   572  00150A  3639               	rlcf	??_sensorUpdate+2,f,c
   573  00150C  363A               	rlcf	??_sensorUpdate+3,f,c
   574  00150E  90D8               	bcf	status,0,c
   575  001510  3639               	rlcf	??_sensorUpdate+2,f,c
   576  001512  363A               	rlcf	??_sensorUpdate+3,f,c
   577  001514  2639               	addwf	??_sensorUpdate+2,f,c
   578  001516  0E00               	movlw	0
   579  001518  223A               	addwfc	??_sensorUpdate+3,f,c
   580  00151A  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   581  00151E  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   582  001522  0E00               	movlw	0
   583  001524  6E2B               	movwf	___wmul@multiplicand+1,c
   584  001526  0E14               	movlw	20
   585  001528  6E2A               	movwf	___wmul@multiplicand,c
   586  00152A  ECC8  F00C         	call	___wmul	;wreg free
   587  00152E  0E8A               	movlw	low sensorUpdate@sensorTemp
   588  001530  6E3B               	movwf	(??_sensorUpdate+4)& (0+255),c
   589  001532  0E00               	movlw	high sensorUpdate@sensorTemp
   590  001534  6E3C               	movwf	(??_sensorUpdate+5)& (0+255),c
   591  001536  5028               	movf	?___wmul,w,c
   592  001538  263B               	addwf	??_sensorUpdate+4,f,c
   593  00153A  5029               	movf	?___wmul+1,w,c
   594  00153C  223C               	addwfc	??_sensorUpdate+5,f,c
   595  00153E  90D8               	bcf	status,0,c
   596  001540  0100               	movlb	0	; () banked
   597  001542  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   598  001544  6ED9               	movwf	fsr2l,c
   599  001546  0100               	movlb	0	; () banked
   600  001548  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  00154A  6EDA               	movwf	fsr2h,c
   602  00154C  503B               	movf	??_sensorUpdate+4,w,c
   603  00154E  26D9               	addwf	fsr2l,f,c
   604  001550  503C               	movf	??_sensorUpdate+5,w,c
   605  001552  22DA               	addwfc	fsr2h,f,c
   606  001554  C039  FFDE         	movff	??_sensorUpdate+2,postinc2
   607  001558  C03A  FFDD         	movff	??_sensorUpdate+3,postdec2
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 163: if(j == 0 || j == 3)
   611  00155C  0100               	movlb	0	; () banked
   612  00155E  51DC               	movf	sensorUpdate@j& (0+255),w,b
   613  001560  0100               	movlb	0	; () banked
   614  001562  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   615  001564  B4D8               	btfsc	status,2,c
   616  001566  D007               	goto	l1779
   617                           
   618                           ; BSR set to: 0
   619  001568  0E03               	movlw	3
   620  00156A  0100               	movlb	0	; () banked
   621  00156C  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   622  00156E  0100               	movlb	0	; () banked
   623  001570  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   624  001572  A4D8               	btfss	status,2,c
   625  001574  D02A               	goto	l1781
   626  001576                     l1779:
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   630  001576  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   631  00157A  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   632  00157E  0E00               	movlw	0
   633  001580  6E2B               	movwf	___wmul@multiplicand+1,c
   634  001582  0E14               	movlw	20
   635  001584  6E2A               	movwf	___wmul@multiplicand,c
   636  001586  ECC8  F00C         	call	___wmul	;wreg free
   637  00158A  0E8A               	movlw	low sensorUpdate@sensorTemp
   638  00158C  6E37               	movwf	??_sensorUpdate& (0+255),c
   639  00158E  0E00               	movlw	high sensorUpdate@sensorTemp
   640  001590  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   641  001592  5028               	movf	?___wmul,w,c
   642  001594  2637               	addwf	??_sensorUpdate,f,c
   643  001596  5029               	movf	?___wmul+1,w,c
   644  001598  2238               	addwfc	??_sensorUpdate+1,f,c
   645  00159A  90D8               	bcf	status,0,c
   646  00159C  0100               	movlb	0	; () banked
   647  00159E  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   648  0015A0  6ED9               	movwf	fsr2l,c
   649  0015A2  0100               	movlb	0	; () banked
   650  0015A4  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   651  0015A6  6EDA               	movwf	fsr2h,c
   652  0015A8  5037               	movf	??_sensorUpdate,w,c
   653  0015AA  26D9               	addwf	fsr2l,f,c
   654  0015AC  5038               	movf	??_sensorUpdate+1,w,c
   655  0015AE  22DA               	addwfc	fsr2h,f,c
   656  0015B0  0E01               	movlw	low _sensorCorrection
   657  0015B2  0100               	movlb	0	; () banked
   658  0015B4  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   659  0015B6  6EF6               	movwf	tblptrl,c
   660  0015B8  0E10               	movlw	high _sensorCorrection
   661  0015BA  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   662  0015BC  6EF7               	movwf	tblptrh,c
   663  0015BE                     	if	0	;There are less than 3 active tblptr bytes
   664  0015BE                     	endif
   665  0015BE  0008               	tblrd		*
   666  0015C0  50F5               	movf	tablat,w,c
   667  0015C2  5EDE               	subwf	postinc2,f,c
   668  0015C4  0E00               	movlw	0
   669  0015C6  5ADD               	subwfb	postdec2,f,c
   670  0015C8  D02A               	goto	l1783
   671  0015CA                     l1781:
   672                           
   673                           ; BSR set to: 0
   674                           ;user.c: 165: else
   675                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   676  0015CA  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   677  0015CE  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   678  0015D2  0E00               	movlw	0
   679  0015D4  6E2B               	movwf	___wmul@multiplicand+1,c
   680  0015D6  0E14               	movlw	20
   681  0015D8  6E2A               	movwf	___wmul@multiplicand,c
   682  0015DA  ECC8  F00C         	call	___wmul	;wreg free
   683  0015DE  0E8A               	movlw	low sensorUpdate@sensorTemp
   684  0015E0  6E37               	movwf	??_sensorUpdate& (0+255),c
   685  0015E2  0E00               	movlw	high sensorUpdate@sensorTemp
   686  0015E4  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   687  0015E6  5028               	movf	?___wmul,w,c
   688  0015E8  2637               	addwf	??_sensorUpdate,f,c
   689  0015EA  5029               	movf	?___wmul+1,w,c
   690  0015EC  2238               	addwfc	??_sensorUpdate+1,f,c
   691  0015EE  90D8               	bcf	status,0,c
   692  0015F0  0100               	movlb	0	; () banked
   693  0015F2  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   694  0015F4  6ED9               	movwf	fsr2l,c
   695  0015F6  0100               	movlb	0	; () banked
   696  0015F8  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   697  0015FA  6EDA               	movwf	fsr2h,c
   698  0015FC  5037               	movf	??_sensorUpdate,w,c
   699  0015FE  26D9               	addwf	fsr2l,f,c
   700  001600  5038               	movf	??_sensorUpdate+1,w,c
   701  001602  22DA               	addwfc	fsr2h,f,c
   702  001604  0E01               	movlw	low _sensorCorrection
   703  001606  0100               	movlb	0	; () banked
   704  001608  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   705  00160A  6EF6               	movwf	tblptrl,c
   706  00160C  0E10               	movlw	high _sensorCorrection
   707  00160E  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   708  001610  6EF7               	movwf	tblptrh,c
   709  001612                     	if	0	;There are less than 3 active tblptr bytes
   710  001612                     	endif
   711  001612  0008               	tblrd		*
   712  001614  50F5               	movf	tablat,w,c
   713  001616  26DE               	addwf	postinc2,f,c
   714  001618  0E00               	movlw	0
   715  00161A  22DD               	addwfc	postdec2,f,c
   716  00161C  D000               	goto	l1783
   717  00161E                     l1783:
   718                           
   719                           ; BSR set to: 0
   720  00161E  0100               	movlb	0	; () banked
   721  001620  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   722  001622  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   723                           
   724                           ; BSR set to: 0
   725  001624  0100               	movlb	0	; () banked
   726  001626  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   727  001628  D755               	goto	l1769
   728  00162A  0100               	movlb	0	; () banked
   729  00162C  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   730  00162E  E102               	bnz	l1787
   731  001630  D74A               	goto	L1
   732  001632  D000               	goto	l1787
   733  001634                     l1787:
   734                           
   735                           ; BSR set to: 0
   736  001634  0100               	movlb	0	; () banked
   737  001636  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   738  001638  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741  00163A  0100               	movlb	0	; () banked
   742  00163C  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  00163E  D738               	goto	l1763
   744  001640  0100               	movlb	0	; () banked
   745  001642  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  001644  E102               	bnz	l1791
   747  001646  D72D               	goto	L2
   748  001648  D000               	goto	l1791
   749  00164A                     l1791:
   750                           
   751                           ; BSR set to: 0
   752                           ;user.c: 167: }
   753                           ;user.c: 168: }
   754                           ;user.c: 171: sensorComputation(sensorTemp);
   755  00164A  0E8A               	movlw	low sensorUpdate@sensorTemp
   756  00164C  6E33               	movwf	sensorComputation@sensorTemp,c
   757  00164E  0E00               	movlw	high sensorUpdate@sensorTemp
   758  001650  6E34               	movwf	sensorComputation@sensorTemp+1,c
   759  001652  EC30  F009         	call	_sensorComputation	;wreg free
   760  001656  0012               	return		;funcret
   761  001658                     __end_of_sensorUpdate:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postinc2	equ	0xFDE
   770                           postdec2	equ	0xFDD
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sensorComputation *****************
   776 ;; Defined at:
   777 ;;		line 125 in file "user.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   780 ;;		 -> sensorUpdate@sensorTemp(80), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  j               2    8[BANK0 ] int 
   783 ;;  i               2    6[BANK0 ] int 
   784 ;;  sum             2    4[BANK0 ] int 
   785 ;;  min             2    2[BANK0 ] int 
   786 ;;  max             2    0[BANK0 ] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       14 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    5
   803 ;; This function calls:
   804 ;;		_MAX
   805 ;;		_MIN
   806 ;;		___awdiv
   807 ;;		___wmul
   808 ;; This function is called by:
   809 ;;		_sensorUpdate
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  001260                     __ptext2:
   815                           	opt stack 0
   816  001260                     _sensorComputation:
   817                           	opt stack 24
   818                           
   819                           ;user.c: 127: int max,min,i,j,sum;
   820                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   821                           
   822                           ;incstack = 0
   823  001260  0E00               	movlw	0
   824  001262  0100               	movlb	0	; () banked
   825  001264  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   826  001266  0E00               	movlw	0
   827  001268  6F86               	movwf	sensorComputation@i& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830  00126A  0100               	movlb	0	; () banked
   831  00126C  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   832  00126E  D00A               	goto	l1733
   833  001270  0100               	movlb	0	; () banked
   834  001272  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   835  001274  E106               	bnz	u1390
   836  001276  0E04               	movlw	4
   837  001278  0100               	movlb	0	; () banked
   838  00127A  5D86               	subwf	sensorComputation@i& (0+255),w,b
   839  00127C  B0D8               	btfsc	status,0,c
   840  00127E  D105               	goto	l255
   841  001280  D001               	goto	l1733
   842  001282                     u1390:
   843                           
   844                           ; BSR set to: 0
   845  001282  D103               	goto	l255
   846  001284                     l1733:
   847                           
   848                           ; BSR set to: 0
   849                           ;user.c: 129: {
   850                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   851  001284  0E00               	movlw	0
   852  001286  0100               	movlb	0	; () banked
   853  001288  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   854  00128A  0E00               	movlw	0
   855  00128C  6F88               	movwf	sensorComputation@j& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858  00128E  0100               	movlb	0	; () banked
   859  001290  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   860  001292  D00A               	goto	l1739
   861  001294  0100               	movlb	0	; () banked
   862  001296  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   863  001298  E106               	bnz	u1400
   864  00129A  0E0A               	movlw	10
   865  00129C  0100               	movlb	0	; () banked
   866  00129E  5D88               	subwf	sensorComputation@j& (0+255),w,b
   867  0012A0  B0D8               	btfsc	status,0,c
   868  0012A2  D0B7               	goto	l1749
   869  0012A4  D001               	goto	l1739
   870  0012A6                     u1400:
   871                           
   872                           ; BSR set to: 0
   873  0012A6  D0B5               	goto	l1749
   874  0012A8                     l1739:
   875                           
   876                           ; BSR set to: 0
   877                           ;user.c: 131: {
   878                           ;user.c: 132: if(j == 0)
   879  0012A8  0100               	movlb	0	; () banked
   880  0012AA  5188               	movf	sensorComputation@j& (0+255),w,b
   881  0012AC  0100               	movlb	0	; () banked
   882  0012AE  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   883  0012B0  A4D8               	btfss	status,2,c
   884  0012B2  D02A               	goto	l1743
   885                           
   886                           ; BSR set to: 0
   887                           ;user.c: 133: {
   888                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   889  0012B4  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   890  0012B8  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   891  0012BC  0E00               	movlw	0
   892  0012BE  6E2B               	movwf	___wmul@multiplicand+1,c
   893  0012C0  0E14               	movlw	20
   894  0012C2  6E2A               	movwf	___wmul@multiplicand,c
   895  0012C4  ECC8  F00C         	call	___wmul	;wreg free
   896  0012C8  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   897  0012CC  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   898  0012D0  5028               	movf	?___wmul,w,c
   899  0012D2  2635               	addwf	??_sensorComputation,f,c
   900  0012D4  5029               	movf	?___wmul+1,w,c
   901  0012D6  2236               	addwfc	??_sensorComputation+1,f,c
   902  0012D8  90D8               	bcf	status,0,c
   903  0012DA  0100               	movlb	0	; () banked
   904  0012DC  3588               	rlcf	sensorComputation@j& (0+255),w,b
   905  0012DE  6ED9               	movwf	fsr2l,c
   906  0012E0  0100               	movlb	0	; () banked
   907  0012E2  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   908  0012E4  6EDA               	movwf	fsr2h,c
   909  0012E6  5035               	movf	??_sensorComputation,w,c
   910  0012E8  26D9               	addwf	fsr2l,f,c
   911  0012EA  5036               	movf	??_sensorComputation+1,w,c
   912  0012EC  22DA               	addwfc	fsr2h,f,c
   913  0012EE  CFDE F080          	movff	postinc2,sensorComputation@max
   914  0012F2  CFDD F081          	movff	postdec2,sensorComputation@max+1
   915  0012F6  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   916  0012FA  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   917  0012FE  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   918  001302  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   919                           
   920                           ;user.c: 135: continue;
   921  001306  D07A               	goto	l1745
   922  001308                     l1743:
   923                           
   924                           ; BSR set to: 0
   925                           ;user.c: 136: }
   926                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   927  001308  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   928  00130C  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   929  001310  0E00               	movlw	0
   930  001312  6E2B               	movwf	___wmul@multiplicand+1,c
   931  001314  0E14               	movlw	20
   932  001316  6E2A               	movwf	___wmul@multiplicand,c
   933  001318  ECC8  F00C         	call	___wmul	;wreg free
   934  00131C  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   935  001320  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   936  001324  5028               	movf	?___wmul,w,c
   937  001326  2635               	addwf	??_sensorComputation,f,c
   938  001328  5029               	movf	?___wmul+1,w,c
   939  00132A  2236               	addwfc	??_sensorComputation+1,f,c
   940  00132C  90D8               	bcf	status,0,c
   941  00132E  0100               	movlb	0	; () banked
   942  001330  3588               	rlcf	sensorComputation@j& (0+255),w,b
   943  001332  6ED9               	movwf	fsr2l,c
   944  001334  0100               	movlb	0	; () banked
   945  001336  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   946  001338  6EDA               	movwf	fsr2h,c
   947  00133A  5035               	movf	??_sensorComputation,w,c
   948  00133C  26D9               	addwf	fsr2l,f,c
   949  00133E  5036               	movf	??_sensorComputation+1,w,c
   950  001340  22DA               	addwfc	fsr2h,f,c
   951  001342  CFDE F02E          	movff	postinc2,MIN@a
   952  001346  CFDD F02F          	movff	postdec2,MIN@a+1
   953  00134A  C082  F030         	movff	sensorComputation@min,MIN@b
   954  00134E  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   955  001352  ECDC  F00C         	call	_MIN	;wreg free
   956  001356  C02E  F082         	movff	?_MIN,sensorComputation@min
   957  00135A  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   958                           
   959                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   960  00135E  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   961  001362  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   962  001366  0E00               	movlw	0
   963  001368  6E2B               	movwf	___wmul@multiplicand+1,c
   964  00136A  0E14               	movlw	20
   965  00136C  6E2A               	movwf	___wmul@multiplicand,c
   966  00136E  ECC8  F00C         	call	___wmul	;wreg free
   967  001372  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   968  001376  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   969  00137A  5028               	movf	?___wmul,w,c
   970  00137C  2635               	addwf	??_sensorComputation,f,c
   971  00137E  5029               	movf	?___wmul+1,w,c
   972  001380  2236               	addwfc	??_sensorComputation+1,f,c
   973  001382  90D8               	bcf	status,0,c
   974  001384  0100               	movlb	0	; () banked
   975  001386  3588               	rlcf	sensorComputation@j& (0+255),w,b
   976  001388  6ED9               	movwf	fsr2l,c
   977  00138A  0100               	movlb	0	; () banked
   978  00138C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   979  00138E  6EDA               	movwf	fsr2h,c
   980  001390  5035               	movf	??_sensorComputation,w,c
   981  001392  26D9               	addwf	fsr2l,f,c
   982  001394  5036               	movf	??_sensorComputation+1,w,c
   983  001396  22DA               	addwfc	fsr2h,f,c
   984  001398  CFDE F02E          	movff	postinc2,MAX@a
   985  00139C  CFDD F02F          	movff	postdec2,MAX@a+1
   986  0013A0  C080  F030         	movff	sensorComputation@max,MAX@b
   987  0013A4  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
   988  0013A8  ECF0  F00C         	call	_MAX	;wreg free
   989  0013AC  C02E  F080         	movff	?_MAX,sensorComputation@max
   990  0013B0  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
   991                           
   992                           ;user.c: 139: sum += sensorTemp[i][j];
   993  0013B4  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   994  0013B8  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   995  0013BC  0E00               	movlw	0
   996  0013BE  6E2B               	movwf	___wmul@multiplicand+1,c
   997  0013C0  0E14               	movlw	20
   998  0013C2  6E2A               	movwf	___wmul@multiplicand,c
   999  0013C4  ECC8  F00C         	call	___wmul	;wreg free
  1000  0013C8  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1001  0013CC  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1002  0013D0  5028               	movf	?___wmul,w,c
  1003  0013D2  2635               	addwf	??_sensorComputation,f,c
  1004  0013D4  5029               	movf	?___wmul+1,w,c
  1005  0013D6  2236               	addwfc	??_sensorComputation+1,f,c
  1006  0013D8  90D8               	bcf	status,0,c
  1007  0013DA  0100               	movlb	0	; () banked
  1008  0013DC  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1009  0013DE  6ED9               	movwf	fsr2l,c
  1010  0013E0  0100               	movlb	0	; () banked
  1011  0013E2  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1012  0013E4  6EDA               	movwf	fsr2h,c
  1013  0013E6  5035               	movf	??_sensorComputation,w,c
  1014  0013E8  26D9               	addwf	fsr2l,f,c
  1015  0013EA  5036               	movf	??_sensorComputation+1,w,c
  1016  0013EC  22DA               	addwfc	fsr2h,f,c
  1017  0013EE  50DE               	movf	postinc2,w,c
  1018  0013F0  0100               	movlb	0	; () banked
  1019  0013F2  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1020  0013F4  50DD               	movf	postdec2,w,c
  1021  0013F6  0100               	movlb	0	; () banked
  1022  0013F8  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1023  0013FA  D000               	goto	l1745
  1024  0013FC                     l1745:
  1025                           
  1026                           ; BSR set to: 0
  1027  0013FC  0100               	movlb	0	; () banked
  1028  0013FE  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1029  001400  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1030                           
  1031                           ; BSR set to: 0
  1032  001402  0100               	movlb	0	; () banked
  1033  001404  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1034  001406  D750               	goto	l1739
  1035  001408  0100               	movlb	0	; () banked
  1036  00140A  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1037  00140C  E102               	bnz	l1749
  1038  00140E  D745               	goto	L3
  1039  001410  D000               	goto	l1749
  1040  001412                     l1749:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;user.c: 140: }
  1044                           ;user.c: 141: sum = sum - min - max;
  1045  001412  0100               	movlb	0	; () banked
  1046  001414  5180               	movf	sensorComputation@max& (0+255),w,b
  1047  001416  0100               	movlb	0	; () banked
  1048  001418  2582               	addwf	sensorComputation@min& (0+255),w,b
  1049  00141A  6E35               	movwf	??_sensorComputation& (0+255),c
  1050  00141C  0100               	movlb	0	; () banked
  1051  00141E  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1052  001420  0100               	movlb	0	; () banked
  1053  001422  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1054  001424  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1055  001426  1E35               	comf	??_sensorComputation,f,c
  1056  001428  1E36               	comf	??_sensorComputation+1,f,c
  1057  00142A  4A35               	infsnz	??_sensorComputation,f,c
  1058  00142C  2A36               	incf	??_sensorComputation+1,f,c
  1059  00142E  0100               	movlb	0	; () banked
  1060  001430  5184               	movf	sensorComputation@sum& (0+255),w,b
  1061  001432  2435               	addwf	??_sensorComputation,w,c
  1062  001434  0100               	movlb	0	; () banked
  1063  001436  6F84               	movwf	sensorComputation@sum& (0+255),b
  1064  001438  0100               	movlb	0	; () banked
  1065  00143A  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1066  00143C  2036               	addwfc	??_sensorComputation+1,w,c
  1067  00143E  0100               	movlb	0	; () banked
  1068  001440  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1072  001442  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1073  001446  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1074  00144A  0E00               	movlw	0
  1075  00144C  6E2B               	movwf	___awdiv@divisor+1,c
  1076  00144E  0E08               	movlw	8
  1077  001450  6E2A               	movwf	___awdiv@divisor,c
  1078  001452  EC13  F00C         	call	___awdiv	;wreg free
  1079  001456  90D8               	bcf	status,0,c
  1080  001458  0100               	movlb	0	; () banked
  1081  00145A  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1082  00145C  6ED9               	movwf	fsr2l,c
  1083  00145E  0100               	movlb	0	; () banked
  1084  001460  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1085  001462  6EDA               	movwf	fsr2h,c
  1086  001464  0E3D               	movlw	low _sensorValue
  1087  001466  26D9               	addwf	fsr2l,f,c
  1088  001468  0E00               	movlw	high _sensorValue
  1089  00146A  22DA               	addwfc	fsr2h,f,c
  1090  00146C  C028  FFDE         	movff	?___awdiv,postinc2
  1091  001470  C029  FFDD         	movff	?___awdiv+1,postdec2
  1092                           
  1093                           ; BSR set to: 0
  1094  001474  0100               	movlb	0	; () banked
  1095  001476  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1096  001478  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  00147A  0100               	movlb	0	; () banked
  1100  00147C  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1101  00147E  D702               	goto	l1733
  1102  001480  0100               	movlb	0	; () banked
  1103  001482  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1104  001484  E102               	bnz	l255
  1105  001486  D6F7               	goto	L4
  1106  001488  D000               	goto	l255
  1107  00148A                     l255:
  1108                           
  1109                           ; BSR set to: 0
  1110  00148A  0012               	return		;funcret
  1111  00148C                     __end_of_sensorComputation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function ___wmul *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  multiplier      2   39[COMRAM] unsigned int 
  1130 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  product         2   43[COMRAM] unsigned int 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   39[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, prodl, prodh
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    4
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_sensorComputation
  1153 ;;		_sensorUpdate
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  001990                     __ptext3:
  1159                           	opt stack 0
  1160  001990                     ___wmul:
  1161                           	opt stack 24
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  001990  5028               	movf	___wmul@multiplier,w,c
  1166  001992  022A               	mulwf	___wmul@multiplicand,c
  1167  001994  CFF3 F02C          	movff	prodl,___wmul@product
  1168  001998  CFF4 F02D          	movff	prodh,___wmul@product+1
  1169  00199C  5028               	movf	___wmul@multiplier,w,c
  1170  00199E  022B               	mulwf	___wmul@multiplicand+1,c
  1171  0019A0  50F3               	movf	prodl,w,c
  1172  0019A2  262D               	addwf	___wmul@product+1,f,c
  1173  0019A4  5029               	movf	___wmul@multiplier+1,w,c
  1174  0019A6  022A               	mulwf	___wmul@multiplicand,c
  1175  0019A8  50F3               	movf	prodl,w,c
  1176  0019AA  262D               	addwf	___wmul@product+1,f,c
  1177  0019AC  C02C  F028         	movff	___wmul@product,?___wmul
  1178  0019B0  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1179  0019B4  D000               	goto	l280
  1180  0019B6                     l280:
  1181  0019B6  0012               	return		;funcret
  1182  0019B8                     __end_of___wmul:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function ___awdiv *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        2   39[COMRAM] int 
  1203 ;;  divisor         2   41[COMRAM] int 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  quotient        2   45[COMRAM] int 
  1206 ;;  sign            1   44[COMRAM] unsigned char 
  1207 ;;  counter         1   43[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        8 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sensorComputation
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  001826                     __ptext4:
  1233                           	opt stack 0
  1234  001826                     ___awdiv:
  1235                           	opt stack 24
  1236                           
  1237                           ;incstack = 0
  1238  001826  0E00               	movlw	0
  1239  001828  6E2D               	movwf	___awdiv@sign,c
  1240  00182A  AE2B               	btfss	___awdiv@divisor+1,7,c
  1241  00182C  D007               	goto	l1691
  1242  00182E  6C2A               	negf	___awdiv@divisor,c
  1243  001830  1E2B               	comf	___awdiv@divisor+1,f,c
  1244  001832  B0D8               	btfsc	status,0,c
  1245  001834  2A2B               	incf	___awdiv@divisor+1,f,c
  1246  001836  0E01               	movlw	1
  1247  001838  6E2D               	movwf	___awdiv@sign,c
  1248  00183A  D000               	goto	l1691
  1249  00183C                     l1691:
  1250  00183C  AE29               	btfss	___awdiv@dividend+1,7,c
  1251  00183E  D007               	goto	l1697
  1252  001840  6C28               	negf	___awdiv@dividend,c
  1253  001842  1E29               	comf	___awdiv@dividend+1,f,c
  1254  001844  B0D8               	btfsc	status,0,c
  1255  001846  2A29               	incf	___awdiv@dividend+1,f,c
  1256  001848  0E01               	movlw	1
  1257  00184A  1A2D               	xorwf	___awdiv@sign,f,c
  1258  00184C  D000               	goto	l1697
  1259  00184E                     l1697:
  1260  00184E  0E00               	movlw	0
  1261  001850  6E2F               	movwf	___awdiv@quotient+1,c
  1262  001852  0E00               	movlw	0
  1263  001854  6E2E               	movwf	___awdiv@quotient,c
  1264  001856  502A               	movf	___awdiv@divisor,w,c
  1265  001858  102B               	iorwf	___awdiv@divisor+1,w,c
  1266  00185A  B4D8               	btfsc	status,2,c
  1267  00185C  D021               	goto	l1719
  1268  00185E  0E01               	movlw	1
  1269  001860  6E2C               	movwf	___awdiv@counter,c
  1270  001862  D005               	goto	l1705
  1271  001864                     l1703:
  1272  001864  90D8               	bcf	status,0,c
  1273  001866  362A               	rlcf	___awdiv@divisor,f,c
  1274  001868  362B               	rlcf	___awdiv@divisor+1,f,c
  1275  00186A  2A2C               	incf	___awdiv@counter,f,c
  1276  00186C  D000               	goto	l1705
  1277  00186E                     l1705:
  1278  00186E  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1279  001870  D002               	goto	l1707
  1280  001872  D7F8               	goto	l1703
  1281  001874  D000               	goto	l1707
  1282  001876                     l1707:
  1283  001876  90D8               	bcf	status,0,c
  1284  001878  362E               	rlcf	___awdiv@quotient,f,c
  1285  00187A  362F               	rlcf	___awdiv@quotient+1,f,c
  1286  00187C  502A               	movf	___awdiv@divisor,w,c
  1287  00187E  5C28               	subwf	___awdiv@dividend,w,c
  1288  001880  502B               	movf	___awdiv@divisor+1,w,c
  1289  001882  5829               	subwfb	___awdiv@dividend+1,w,c
  1290  001884  A0D8               	btfss	status,0,c
  1291  001886  D006               	goto	l1715
  1292  001888  502A               	movf	___awdiv@divisor,w,c
  1293  00188A  5E28               	subwf	___awdiv@dividend,f,c
  1294  00188C  502B               	movf	___awdiv@divisor+1,w,c
  1295  00188E  5A29               	subwfb	___awdiv@dividend+1,f,c
  1296  001890  802E               	bsf	___awdiv@quotient,0,c
  1297  001892  D000               	goto	l1715
  1298  001894                     l1715:
  1299  001894  90D8               	bcf	status,0,c
  1300  001896  322B               	rrcf	___awdiv@divisor+1,f,c
  1301  001898  322A               	rrcf	___awdiv@divisor,f,c
  1302  00189A  2E2C               	decfsz	___awdiv@counter,f,c
  1303  00189C  D7EC               	goto	l1707
  1304  00189E  D000               	goto	l1719
  1305  0018A0                     l1719:
  1306  0018A0  502D               	movf	___awdiv@sign,w,c
  1307  0018A2  B4D8               	btfsc	status,2,c
  1308  0018A4  D005               	goto	l1723
  1309  0018A6  6C2E               	negf	___awdiv@quotient,c
  1310  0018A8  1E2F               	comf	___awdiv@quotient+1,f,c
  1311  0018AA  B0D8               	btfsc	status,0,c
  1312  0018AC  2A2F               	incf	___awdiv@quotient+1,f,c
  1313  0018AE  D000               	goto	l1723
  1314  0018B0                     l1723:
  1315  0018B0  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1316  0018B4  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1317  0018B8  D000               	goto	l473
  1318  0018BA                     l473:
  1319  0018BA  0012               	return		;funcret
  1320  0018BC                     __end_of___awdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _MIN *****************
  1337 ;; Defined at:
  1338 ;;		line 175 in file "user.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               2   45[COMRAM] int 
  1341 ;;  b               2   47[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   45[COMRAM] int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        5 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sensorComputation
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  0019B8                     __ptext5:
  1369                           	opt stack 0
  1370  0019B8                     _MIN:
  1371                           	opt stack 24
  1372                           
  1373                           ;user.c: 177: if(a>b) return b;
  1374                           
  1375                           ;incstack = 0
  1376  0019B8  502E               	movf	MIN@a,w,c
  1377  0019BA  5C30               	subwf	MIN@b,w,c
  1378  0019BC  5031               	movf	MIN@b+1,w,c
  1379  0019BE  0A80               	xorlw	128
  1380  0019C0  6E32               	movwf	??_MIN& (0+255),c
  1381  0019C2  502F               	movf	MIN@a+1,w,c
  1382  0019C4  0A80               	xorlw	128
  1383  0019C6  5832               	subwfb	??_MIN& (0+255),w,c
  1384  0019C8  B0D8               	btfsc	status,0,c
  1385  0019CA  D005               	goto	l272
  1386  0019CC  C030  F02E         	movff	MIN@b,?_MIN
  1387  0019D0  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1388  0019D4  D004               	goto	l273
  1389  0019D6                     l272:
  1390                           
  1391                           ;user.c: 178: return a;
  1392  0019D6  C02E  F02E         	movff	MIN@a,?_MIN
  1393  0019DA  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1394  0019DE                     l273:
  1395  0019DE  0012               	return		;funcret
  1396  0019E0                     __end_of_MIN:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postinc2	equ	0xFDE
  1407                           postdec2	equ	0xFDD
  1408                           fsr2h	equ	0xFDA
  1409                           fsr2l	equ	0xFD9
  1410                           status	equ	0xFD8
  1411                           
  1412 ;; *************** function _MAX *****************
  1413 ;; Defined at:
  1414 ;;		line 181 in file "user.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2   45[COMRAM] int 
  1417 ;;  b               2   47[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   45[COMRAM] int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;Total ram usage:        5 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    4
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_sensorComputation
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  0019E0                     __ptext6:
  1445                           	opt stack 0
  1446  0019E0                     _MAX:
  1447                           	opt stack 24
  1448                           
  1449                           ;user.c: 183: if(a>b) return a;
  1450                           
  1451                           ;incstack = 0
  1452  0019E0  502E               	movf	MAX@a,w,c
  1453  0019E2  5C30               	subwf	MAX@b,w,c
  1454  0019E4  5031               	movf	MAX@b+1,w,c
  1455  0019E6  0A80               	xorlw	128
  1456  0019E8  6E32               	movwf	??_MAX& (0+255),c
  1457  0019EA  502F               	movf	MAX@a+1,w,c
  1458  0019EC  0A80               	xorlw	128
  1459  0019EE  5832               	subwfb	??_MAX& (0+255),w,c
  1460  0019F0  B0D8               	btfsc	status,0,c
  1461  0019F2  D005               	goto	l276
  1462  0019F4  C02E  F02E         	movff	MAX@a,?_MAX
  1463  0019F8  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1464  0019FC  D004               	goto	l277
  1465  0019FE                     l276:
  1466                           
  1467                           ;user.c: 184: return b;
  1468  0019FE  C030  F02E         	movff	MAX@b,?_MAX
  1469  001A02  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1470  001A06                     l277:
  1471  001A06  0012               	return		;funcret
  1472  001A08                     __end_of_MAX:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _InitApp *****************
  1489 ;; Defined at:
  1490 ;;		line 35 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    5
  1511 ;; This function calls:
  1512 ;;		_AlgorithmSelection
  1513 ;;		_delay
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  0018BC                     __ptext7:
  1521                           	opt stack 0
  1522  0018BC                     _InitApp:
  1523                           	opt stack 25
  1524                           
  1525                           ;user.c: 39: TRISC = 0;
  1526                           
  1527                           ;incstack = 0
  1528  0018BC  0E00               	movlw	0
  1529  0018BE  6E94               	movwf	3988,c	;volatile
  1530                           
  1531                           ;user.c: 43: TRISEbits.TRISE1=1;
  1532  0018C0  8296               	bsf	3990,1,c	;volatile
  1533                           
  1534                           ;user.c: 45: TRISEbits.TRISE2=1;
  1535  0018C2  8496               	bsf	3990,2,c	;volatile
  1536                           
  1537                           ;user.c: 47: TRISBbits.RB1=1;
  1538  0018C4  8293               	bsf	3987,1,c	;volatile
  1539                           
  1540                           ;user.c: 49: TRISBbits.RB0=1;
  1541  0018C6  8093               	bsf	3987,0,c	;volatile
  1542                           
  1543                           ;user.c: 52: TRISBbits.RB3=1;
  1544  0018C8  8693               	bsf	3987,3,c	;volatile
  1545                           
  1546                           ;user.c: 54: TRISBbits.RB2=1;
  1547  0018CA  8493               	bsf	3987,2,c	;volatile
  1548                           
  1549                           ;user.c: 58: ADCON1 =0b00000001;
  1550  0018CC  0E01               	movlw	1
  1551  0018CE  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;user.c: 63: ADCON2=0b00001010;
  1554  0018D0  0E0A               	movlw	10
  1555  0018D2  6EC0               	movwf	4032,c	;volatile
  1556                           
  1557                           ;user.c: 68: ADCON0=0b00101011;
  1558  0018D4  0E2B               	movlw	43
  1559  0018D6  6EC2               	movwf	4034,c	;volatile
  1560                           
  1561                           ;user.c: 77: T0CON = 0b11000100;
  1562  0018D8  0EC4               	movlw	196
  1563  0018DA  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;user.c: 85: INTCON2 = 0b11110100;
  1566  0018DC  0EF4               	movlw	244
  1567  0018DE  6EF1               	movwf	intcon2,c	;volatile
  1568                           
  1569                           ;user.c: 95: INTCON = 0b00100000;
  1570  0018E0  0E20               	movlw	32
  1571  0018E2  6EF2               	movwf	intcon,c	;volatile
  1572                           
  1573                           ;user.c: 105: AlgorithmSelection();
  1574  0018E4  EC04  F00D         	call	_AlgorithmSelection	;wreg free
  1575                           
  1576                           ;user.c: 108: delay(1000);
  1577  0018E8  0E03               	movlw	3
  1578  0018EA  6E29               	movwf	delay@ms+1,c
  1579  0018EC  0EE8               	movlw	232
  1580  0018EE  6E28               	movwf	delay@ms,c
  1581  0018F0  EC9A  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 109: INTCONbits.GIE = 1;
  1584  0018F4  8EF2               	bsf	intcon,7,c	;volatile
  1585  0018F6  0012               	return		;funcret
  1586  0018F8                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   39[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   42[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  001934                     __ptext8:
  1636                           	opt stack 0
  1637  001934                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  001934  0E00               	movlw	0
  1644  001936  6E2C               	movwf	delay@x+1,c
  1645  001938  0E00               	movlw	0
  1646  00193A  6E2B               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  00193C  0E00               	movlw	0
  1650  00193E  6E2C               	movwf	delay@x+1,c
  1651  001940  0E00               	movlw	0
  1652  001942  6E2B               	movwf	delay@x,c
  1653  001944  D00A               	goto	l232
  1654  001946                     l1421:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001946  0E0B               	movlw	11
  1658  001948  6E2A               	movwf	??_delay& (0+255),c
  1659  00194A  0E62               	movlw	98
  1660  00194C                     u1527:
  1661  00194C  2EE8               	decfsz	wreg,f,c
  1662  00194E  D7FE               	goto	u1527
  1663  001950  2E2A               	decfsz	??_delay& (0+255),f,c
  1664  001952  D7FC               	goto	u1527
  1665  001954  D000               	nop2	
  1666  001956  4A2B               	infsnz	delay@x,f,c
  1667  001958  2A2C               	incf	delay@x+1,f,c
  1668  00195A                     l232:
  1669  00195A  5028               	movf	delay@ms,w,c
  1670  00195C  5C2B               	subwf	delay@x,w,c
  1671  00195E  5029               	movf	delay@ms+1,w,c
  1672  001960  582C               	subwfb	delay@x+1,w,c
  1673  001962  A0D8               	btfss	status,0,c
  1674  001964  D7F0               	goto	l1421
  1675  001966  0012               	return		;funcret
  1676  001968                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _AlgorithmSelection *****************
  1695 ;; Defined at:
  1696 ;;		line 112 in file "user.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_InitApp
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001A08                     __ptext9:
  1726                           	opt stack 0
  1727  001A08                     _AlgorithmSelection:
  1728                           	opt stack 25
  1729                           
  1730                           ;user.c: 114: ADCON0 = 0b00100111;
  1731                           
  1732                           ;incstack = 0
  1733  001A08  0E27               	movlw	39
  1734  001A0A  6EC2               	movwf	4034,c	;volatile
  1735                           
  1736                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1737  001A0C  82C2               	bsf	4034,1,c	;volatile
  1738                           
  1739                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1740  001A0E  D000               	goto	l241
  1741  001A10                     l241:
  1742  001A10  B2C2               	btfsc	4034,1,c	;volatile
  1743  001A12  D7FE               	goto	l241
  1744                           
  1745                           ;user.c: 119: if(ADRESL > 0b10000000)
  1746  001A14  0E80               	movlw	128
  1747  001A16  64C3               	cpfsgt	4035,c	;volatile
  1748  001A18  D002               	goto	l1027
  1749                           
  1750                           ;user.c: 120: algorithm = LEFTWALL;
  1751  001A1A  0E00               	movlw	0
  1752  001A1C  D001               	goto	L5
  1753  001A1E                     l1027:
  1754                           
  1755                           ;user.c: 121: else
  1756                           ;user.c: 122: algorithm = RIGHTWALL;
  1757  001A1E  0E01               	movlw	1
  1758  001A20                     L5:
  1759  001A20  6E55               	movwf	_algorithm,c
  1760  001A22  D000               	goto	l246
  1761  001A24                     l246:
  1762  001A24  0012               	return		;funcret
  1763  001A26                     __end_of_AlgorithmSelection:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _ConfigureOscillator *****************
  1782 ;; Defined at:
  1783 ;;		line 24 in file "system.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text10
  1812  001A9C                     __ptext10:
  1813                           	opt stack 0
  1814  001A9C                     _ConfigureOscillator:
  1815                           	opt stack 26
  1816                           
  1817                           ;system.c: 29: OSCCON = 0b01111100;
  1818                           
  1819                           ;incstack = 0
  1820  001A9C  0E7C               	movlw	124
  1821  001A9E  6ED3               	movwf	4051,c	;volatile
  1822                           
  1823                           ;system.c: 31: OSCTUNE = 0b01001111;
  1824  001AA0  0E4F               	movlw	79
  1825  001AA2  6E9B               	movwf	3995,c	;volatile
  1826  001AA4  0012               	return		;funcret
  1827  001AA6                     __end_of_ConfigureOscillator:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _low_isr *****************
  1846 ;; Defined at:
  1847 ;;		line 206 in file "interrupts.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:       17 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		Interrupt level 1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	intcodelo
  1876  000018                     __pintcodelo:
  1877                           	opt stack 0
  1878  000018                     _low_isr:
  1879                           	opt stack 24
  1880                           
  1881                           ;incstack = 0
  1882  000018  CFD8 F001          	movff	status,??_low_isr
  1883  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1884  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1885  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1886  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1887  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1888  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1889  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1890  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1891  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1892  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1893  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1894  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1895  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1896  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1897  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1898  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1899  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1900  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1901  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1902  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1903  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1904  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1905  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1906  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1907  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1908  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1909  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1910  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1911  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1912  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1913  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1914  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1915  00009C  C001  FFD8         	movff	??_low_isr,status
  1916  0000A0  0010               	retfie	
  1917  0000A2                     __end_of_low_isr:
  1918                           	opt stack 0
  1919                           pclatu	equ	0xFFB
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon2	equ	0xFF1
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           bsr	equ	0xFE0
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _high_isr *****************
  1943 ;; Defined at:
  1944 ;;		line 82 in file "interrupts.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		_KController
  1967 ;;		_Reversing
  1968 ;;		_forward
  1969 ;;		_merge
  1970 ;;		_moveMouse
  1971 ;;		_rotate
  1972 ;; This function is called by:
  1973 ;;		Interrupt level 2
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	intcode
  1978  000008                     __pintcode:
  1979                           	opt stack 0
  1980  000008                     _high_isr:
  1981                           	opt stack 24
  1982                           
  1983                           ;incstack = 0
  1984  000008  CFFA F01A          	movff	pclath,??_high_isr
  1985  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1986  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1987  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  1988                           pclatu	equ	0xFFB
  1989                           pclath	equ	0xFFA
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           intcon	equ	0xFF2
  1997                           intcon2	equ	0xFF1
  1998                           postinc0	equ	0xFEE
  1999                           fsr0h	equ	0xFEA
  2000                           fsr0l	equ	0xFE9
  2001                           wreg	equ	0xFE8
  2002                           fsr1h	equ	0xFE2
  2003                           fsr1l	equ	0xFE1
  2004                           bsr	equ	0xFE0
  2005                           postinc2	equ	0xFDE
  2006                           postdec2	equ	0xFDD
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011                           	psect	intcode_body
  2012  00100A                     __pintcode_body:
  2013                           	opt stack 24
  2014  00100A                     int_func:
  2015                           	opt stack 24
  2016  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2017  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2018  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2019  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2020  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2021  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2022  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2023  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2024  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2025  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2026  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2027  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2028                           
  2029                           ;interrupts.c: 101: if(INTCONbits.TMR0IF == 1)
  2030  001038  A4F2               	btfss	intcon,2,c	;volatile
  2031  00103A  D0F5               	goto	i2l78
  2032                           
  2033                           ;interrupts.c: 102: {
  2034                           ;interrupts.c: 103: if(MotorDelayCounter > 2)
  2035  00103C  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2036  00103E  D0EF               	goto	i2l1647
  2037  001040  504A               	movf	_MotorDelayCounter+1,w,c
  2038  001042  E104               	bnz	i2u105_40
  2039  001044  0E03               	movlw	3
  2040  001046  5C49               	subwf	_MotorDelayCounter,w,c
  2041  001048  A0D8               	btfss	status,0,c
  2042  00104A  D0E9               	goto	i2l1647
  2043  00104C                     i2u105_40:
  2044                           
  2045                           ;interrupts.c: 104: {
  2046                           ;interrupts.c: 106: if (ForwardCounter > 0)
  2047  00104C  BE46               	btfsc	_ForwardCounter+1,7,c
  2048  00104E  D008               	goto	i2l1571
  2049  001050  5046               	movf	_ForwardCounter+1,w,c
  2050  001052  E103               	bnz	i2u106_40
  2051  001054  0445               	decf	_ForwardCounter,w,c
  2052  001056  A0D8               	btfss	status,0,c
  2053  001058  D003               	goto	i2l1571
  2054  00105A                     i2u106_40:
  2055                           
  2056                           ;interrupts.c: 107: forward();
  2057  00105A  EC13  F00D         	call	_forward	;wreg free
  2058  00105E  D0D3               	goto	i2l1645
  2059  001060                     i2l1571:
  2060                           
  2061                           ;interrupts.c: 108: else if (ReverseCounter > 0)
  2062  001060  BE4E               	btfsc	_ReverseCounter+1,7,c
  2063  001062  D008               	goto	i2l1575
  2064  001064  504E               	movf	_ReverseCounter+1,w,c
  2065  001066  E103               	bnz	i2u107_40
  2066  001068  044D               	decf	_ReverseCounter,w,c
  2067  00106A  A0D8               	btfss	status,0,c
  2068  00106C  D003               	goto	i2l1575
  2069  00106E                     i2u107_40:
  2070                           
  2071                           ;interrupts.c: 109: Reversing();
  2072  00106E  EC21  F00D         	call	_Reversing	;wreg free
  2073  001072  D0C9               	goto	i2l1645
  2074  001074                     i2l1575:
  2075                           
  2076                           ;interrupts.c: 110: else if(RotateCounter > 0)
  2077  001074  BE50               	btfsc	_RotateCounter+1,7,c
  2078  001076  D020               	goto	i2l1587
  2079  001078  5050               	movf	_RotateCounter+1,w,c
  2080  00107A  E103               	bnz	i2u108_40
  2081  00107C  044F               	decf	_RotateCounter,w,c
  2082  00107E  A0D8               	btfss	status,0,c
  2083  001080  D01B               	goto	i2l1587
  2084  001082                     i2u108_40:
  2085                           
  2086                           ;interrupts.c: 111: {
  2087                           ;interrupts.c: 112: if ((sensorValue[2] > 850 || sensorValue[3] > 850)) {
  2088  001082  BE42               	btfsc	_sensorValue+5,7,c
  2089  001084  D006               	goto	i2l1579
  2090  001086  0E53               	movlw	83
  2091  001088  5C41               	subwf	_sensorValue+4,w,c
  2092  00108A  0E03               	movlw	3
  2093  00108C  5842               	subwfb	_sensorValue+5,w,c
  2094  00108E  B0D8               	btfsc	status,0,c
  2095  001090  D008               	goto	i2l1581
  2096  001092                     i2l1579:
  2097  001092  BE44               	btfsc	_sensorValue+7,7,c
  2098  001094  D00D               	goto	i2l1585
  2099  001096  0E53               	movlw	83
  2100  001098  5C43               	subwf	_sensorValue+6,w,c
  2101  00109A  0E03               	movlw	3
  2102  00109C  5844               	subwfb	_sensorValue+7,w,c
  2103  00109E  A0D8               	btfss	status,0,c
  2104  0010A0  D007               	goto	i2l1585
  2105  0010A2                     i2l1581:
  2106                           
  2107                           ;interrupts.c: 114: ReverseCounter = 15;
  2108  0010A2  0E00               	movlw	0
  2109  0010A4  6E4E               	movwf	_ReverseCounter+1,c
  2110  0010A6  0E0F               	movlw	15
  2111  0010A8  6E4D               	movwf	_ReverseCounter,c
  2112                           
  2113                           ;interrupts.c: 115: Reversing();
  2114  0010AA  EC21  F00D         	call	_Reversing	;wreg free
  2115                           
  2116                           ;interrupts.c: 116: } else {
  2117  0010AE  D0AB               	goto	i2l1645
  2118  0010B0                     i2l1585:
  2119                           
  2120                           ;interrupts.c: 117: rotate(rotatingSide);
  2121  0010B0  5057               	movf	_rotatingSide,w,c
  2122  0010B2  EC7C  F00C         	call	_rotate
  2123                           
  2124                           ;interrupts.c: 118: }
  2125                           ;interrupts.c: 119: }
  2126  0010B6  D0A7               	goto	i2l1645
  2127  0010B8                     i2l1587:
  2128                           
  2129                           ;interrupts.c: 120: else if (LTurnCounter > 0 || RTurnCounter > 0) {
  2130  0010B8  BE48               	btfsc	_LTurnCounter+1,7,c
  2131  0010BA  D005               	goto	i2l1589
  2132  0010BC  5048               	movf	_LTurnCounter+1,w,c
  2133  0010BE  E102               	bnz	i2u111_41
  2134  0010C0  0447               	decf	_LTurnCounter,w,c
  2135  0010C2  B0D8               	btfsc	status,0,c
  2136  0010C4                     i2u111_41:
  2137  0010C4  D0A0               	goto	i2l1645
  2138  0010C6                     i2l1589:
  2139  0010C6  BE4C               	btfsc	_RTurnCounter+1,7,c
  2140  0010C8  D007               	goto	i2l1591
  2141  0010CA  504C               	movf	_RTurnCounter+1,w,c
  2142  0010CC  E104               	bnz	i2u112_40
  2143  0010CE  044B               	decf	_RTurnCounter,w,c
  2144  0010D0  B0D8               	btfsc	status,0,c
  2145  0010D2  D099               	goto	i2l1645
  2146  0010D4  D001               	goto	i2l1591
  2147  0010D6                     i2u112_40:
  2148                           
  2149                           ;interrupts.c: 122: }
  2150  0010D6  D097               	goto	i2l1645
  2151  0010D8                     i2l1591:
  2152                           
  2153                           ;interrupts.c: 123: else if (sensorValue[0] < 90 && algorithm == LEFTWALL)
  2154  0010D8  BE3E               	btfsc	_sensorValue+1,7,c
  2155  0010DA  D006               	goto	i2l1593
  2156  0010DC  503E               	movf	_sensorValue+1,w,c
  2157  0010DE  E113               	bnz	i2l1603
  2158  0010E0  0E5A               	movlw	90
  2159  0010E2  5C3D               	subwf	_sensorValue,w,c
  2160  0010E4  B0D8               	btfsc	status,0,c
  2161  0010E6  D00F               	goto	i2l1603
  2162  0010E8                     i2l1593:
  2163  0010E8  5055               	movf	_algorithm,w,c
  2164  0010EA  A4D8               	btfss	status,2,c
  2165  0010EC  D00C               	goto	i2l1603
  2166                           
  2167                           ;interrupts.c: 126: {
  2168                           ;interrupts.c: 128: ForwardCounter = 420;
  2169  0010EE  0E01               	movlw	1
  2170  0010F0  6E46               	movwf	_ForwardCounter+1,c
  2171  0010F2  0EA4               	movlw	164
  2172  0010F4  6E45               	movwf	_ForwardCounter,c
  2173                           
  2174                           ;interrupts.c: 132: forward();
  2175  0010F6  EC13  F00D         	call	_forward	;wreg free
  2176                           
  2177                           ;interrupts.c: 133: RotateCounter = 167;
  2178  0010FA  0E00               	movlw	0
  2179  0010FC  6E50               	movwf	_RotateCounter+1,c
  2180  0010FE  0EA7               	movlw	167
  2181  001100  6E4F               	movwf	_RotateCounter,c
  2182                           
  2183                           ;interrupts.c: 134: rotatingSide = LEFT;
  2184  001102  0E00               	movlw	0
  2185  001104  D02E               	goto	L6
  2186  001106                     i2l1603:
  2187                           
  2188                           ;interrupts.c: 139: else if (sensorValue[1] < 90 && (sensorValue[2] < 140 || sensorValue
      +                          [3] < 140)
  2189                           ;interrupts.c: 140: && sensorValue[0] > 90 && algorithm == LEFTWALL)
  2190  001106  BE40               	btfsc	_sensorValue+3,7,c
  2191  001108  D006               	goto	i2l1605
  2192  00110A  5040               	movf	_sensorValue+3,w,c
  2193  00110C  E12C               	bnz	i2l1621
  2194  00110E  0E5A               	movlw	90
  2195  001110  5C3F               	subwf	_sensorValue+2,w,c
  2196  001112  B0D8               	btfsc	status,0,c
  2197  001114  D028               	goto	i2l1621
  2198  001116                     i2l1605:
  2199  001116  BE42               	btfsc	_sensorValue+5,7,c
  2200  001118  D00E               	goto	i2l1609
  2201  00111A  5042               	movf	_sensorValue+5,w,c
  2202  00111C  E104               	bnz	i2u116_40
  2203  00111E  0E8C               	movlw	140
  2204  001120  5C41               	subwf	_sensorValue+4,w,c
  2205  001122  A0D8               	btfss	status,0,c
  2206  001124  D008               	goto	i2l1609
  2207  001126                     i2u116_40:
  2208  001126  BE44               	btfsc	_sensorValue+7,7,c
  2209  001128  D006               	goto	i2l1609
  2210  00112A  5044               	movf	_sensorValue+7,w,c
  2211  00112C  E11C               	bnz	i2l1621
  2212  00112E  0E8C               	movlw	140
  2213  001130  5C43               	subwf	_sensorValue+6,w,c
  2214  001132  B0D8               	btfsc	status,0,c
  2215  001134  D018               	goto	i2l1621
  2216  001136                     i2l1609:
  2217  001136  BE3E               	btfsc	_sensorValue+1,7,c
  2218  001138  D016               	goto	i2l1621
  2219  00113A  503E               	movf	_sensorValue+1,w,c
  2220  00113C  E104               	bnz	i2u118_40
  2221  00113E  0E5B               	movlw	91
  2222  001140  5C3D               	subwf	_sensorValue,w,c
  2223  001142  A0D8               	btfss	status,0,c
  2224  001144  D010               	goto	i2l1621
  2225  001146                     i2u118_40:
  2226  001146  5055               	movf	_algorithm,w,c
  2227  001148  A4D8               	btfss	status,2,c
  2228  00114A  D00D               	goto	i2l1621
  2229                           
  2230                           ;interrupts.c: 141: {
  2231                           ;interrupts.c: 143: ForwardCounter = 420;
  2232  00114C  0E01               	movlw	1
  2233  00114E  6E46               	movwf	_ForwardCounter+1,c
  2234  001150  0EA4               	movlw	164
  2235  001152  6E45               	movwf	_ForwardCounter,c
  2236                           
  2237                           ;interrupts.c: 146: forward();
  2238  001154  EC13  F00D         	call	_forward	;wreg free
  2239                           
  2240                           ;interrupts.c: 147: RotateCounter = 167;
  2241  001158  0E00               	movlw	0
  2242  00115A  6E50               	movwf	_RotateCounter+1,c
  2243  00115C  0EA7               	movlw	167
  2244  00115E  6E4F               	movwf	_RotateCounter,c
  2245                           
  2246                           ;interrupts.c: 148: rotatingSide = RIGHT;
  2247  001160  0E01               	movlw	1
  2248  001162                     L6:
  2249  001162  6E57               	movwf	_rotatingSide,c
  2250                           
  2251                           ;interrupts.c: 152: }
  2252  001164  D050               	goto	i2l1645
  2253  001166                     i2l1621:
  2254                           
  2255                           ;interrupts.c: 153: else if ((sensorValue[0] > 90 && sensorValue[1] > 100 )
  2256                           ;interrupts.c: 154: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2257  001166  BE3E               	btfsc	_sensorValue+1,7,c
  2258  001168  D020               	goto	i2l1631
  2259  00116A  503E               	movf	_sensorValue+1,w,c
  2260  00116C  E104               	bnz	i2u120_40
  2261  00116E  0E5B               	movlw	91
  2262  001170  5C3D               	subwf	_sensorValue,w,c
  2263  001172  A0D8               	btfss	status,0,c
  2264  001174  D01A               	goto	i2l1631
  2265  001176                     i2u120_40:
  2266  001176  BE40               	btfsc	_sensorValue+3,7,c
  2267  001178  D018               	goto	i2l1631
  2268  00117A  5040               	movf	_sensorValue+3,w,c
  2269  00117C  E104               	bnz	i2u121_40
  2270  00117E  0E65               	movlw	101
  2271  001180  5C3F               	subwf	_sensorValue+2,w,c
  2272  001182  A0D8               	btfss	status,0,c
  2273  001184  D012               	goto	i2l1631
  2274  001186                     i2u121_40:
  2275  001186  BE42               	btfsc	_sensorValue+5,7,c
  2276  001188  D00D               	goto	i2l1629
  2277  00118A  0EA4               	movlw	164
  2278  00118C  5C41               	subwf	_sensorValue+4,w,c
  2279  00118E  0E01               	movlw	1
  2280  001190  5842               	subwfb	_sensorValue+5,w,c
  2281  001192  B0D8               	btfsc	status,0,c
  2282  001194  BE44               	btfsc	_sensorValue+7,7,c
  2283  001196  D006               	goto	i2l1629
  2284  001198  0EA4               	movlw	164
  2285  00119A  5C43               	subwf	_sensorValue+6,w,c
  2286  00119C  0E01               	movlw	1
  2287  00119E  5844               	subwfb	_sensorValue+7,w,c
  2288  0011A0  B0D8               	btfsc	status,0,c
  2289  0011A2  D003               	goto	i2l1631
  2290  0011A4                     i2l1629:
  2291                           
  2292                           ;interrupts.c: 155: {
  2293                           ;interrupts.c: 156: KController();
  2294  0011A4  ECA6  F00B         	call	_KController	;wreg free
  2295                           
  2296                           ;interrupts.c: 158: }else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2297  0011A8  D02E               	goto	i2l1645
  2298  0011AA                     i2l1631:
  2299                           
  2300                           ;interrupts.c: 159: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2301  0011AA  BE3E               	btfsc	_sensorValue+1,7,c
  2302  0011AC  D02C               	goto	i2l1645
  2303  0011AE  503E               	movf	_sensorValue+1,w,c
  2304  0011B0  E104               	bnz	i2u124_40
  2305  0011B2  0E5B               	movlw	91
  2306  0011B4  5C3D               	subwf	_sensorValue,w,c
  2307  0011B6  A0D8               	btfss	status,0,c
  2308  0011B8  D026               	goto	i2l1645
  2309  0011BA                     i2u124_40:
  2310  0011BA  BE40               	btfsc	_sensorValue+3,7,c
  2311  0011BC  D024               	goto	i2l1645
  2312  0011BE  5040               	movf	_sensorValue+3,w,c
  2313  0011C0  E104               	bnz	i2u125_40
  2314  0011C2  0E5B               	movlw	91
  2315  0011C4  5C3F               	subwf	_sensorValue+2,w,c
  2316  0011C6  A0D8               	btfss	status,0,c
  2317  0011C8  D01E               	goto	i2l1645
  2318  0011CA                     i2u125_40:
  2319  0011CA  BE42               	btfsc	_sensorValue+5,7,c
  2320  0011CC  D01C               	goto	i2l1645
  2321  0011CE  0EA5               	movlw	165
  2322  0011D0  5C41               	subwf	_sensorValue+4,w,c
  2323  0011D2  0E01               	movlw	1
  2324  0011D4  5842               	subwfb	_sensorValue+5,w,c
  2325  0011D6  B0D8               	btfsc	status,0,c
  2326  0011D8  BE44               	btfsc	_sensorValue+7,7,c
  2327  0011DA  D015               	goto	i2l1645
  2328  0011DC  0EA5               	movlw	165
  2329  0011DE  5C43               	subwf	_sensorValue+6,w,c
  2330  0011E0  0E01               	movlw	1
  2331  0011E2  5844               	subwfb	_sensorValue+7,w,c
  2332  0011E4  A0D8               	btfss	status,0,c
  2333  0011E6  D00F               	goto	i2l1645
  2334  0011E8  BE50               	btfsc	_RotateCounter+1,7,c
  2335  0011EA  D005               	goto	i2l1641
  2336  0011EC  5050               	movf	_RotateCounter+1,w,c
  2337  0011EE  E10B               	bnz	i2l1645
  2338  0011F0  044F               	decf	_RotateCounter,w,c
  2339  0011F2  B0D8               	btfsc	status,0,c
  2340  0011F4  D008               	goto	i2l1645
  2341  0011F6                     i2l1641:
  2342                           
  2343                           ;interrupts.c: 160: {
  2344                           ;interrupts.c: 161: RotateCounter = 167*2;
  2345  0011F6  0E01               	movlw	1
  2346  0011F8  6E50               	movwf	_RotateCounter+1,c
  2347  0011FA  0E4E               	movlw	78
  2348  0011FC  6E4F               	movwf	_RotateCounter,c
  2349                           
  2350                           ;interrupts.c: 162: rotate(rotatingSide);
  2351  0011FE  5057               	movf	_rotatingSide,w,c
  2352  001200  EC7C  F00C         	call	_rotate
  2353  001204  D000               	goto	i2l1645
  2354  001206                     i2l1645:
  2355                           
  2356                           ;interrupts.c: 163: }
  2357                           ;interrupts.c: 191: moveMouse(merge(LMotorCounter,RMotorCounter));
  2358  001206  C054  F012         	movff	_RMotorCounter,merge@right
  2359  00120A  5053               	movf	_LMotorCounter,w,c
  2360  00120C  EC46  F00D         	call	_merge
  2361  001210  EC53  F00D         	call	_moveMouse
  2362                           
  2363                           ;interrupts.c: 192: MotorDelayCounter = 0;
  2364  001214  0E00               	movlw	0
  2365  001216  6E4A               	movwf	_MotorDelayCounter+1,c
  2366  001218  0E00               	movlw	0
  2367  00121A  6E49               	movwf	_MotorDelayCounter,c
  2368  00121C  D000               	goto	i2l1647
  2369  00121E                     i2l1647:
  2370                           
  2371                           ;interrupts.c: 194: }
  2372                           ;interrupts.c: 196: MotorDelayCounter++;
  2373  00121E  4A49               	infsnz	_MotorDelayCounter,f,c
  2374  001220  2A4A               	incf	_MotorDelayCounter+1,f,c
  2375                           
  2376                           ;interrupts.c: 197: INTCONbits.TMR0IF = 0;
  2377  001222  94F2               	bcf	intcon,2,c	;volatile
  2378  001224  D000               	goto	i2l78
  2379  001226                     i2l78:
  2380  001226  C027  FFF5         	movff	??_high_isr+13,tablat
  2381  00122A  C026  FFF8         	movff	??_high_isr+12,tblptru
  2382  00122E  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2383  001232  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2384  001236  C023  FFF4         	movff	??_high_isr+9,prodh
  2385  00123A  C022  FFF3         	movff	??_high_isr+8,prodl
  2386  00123E  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2387  001242  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2388  001246  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2389  00124A  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2390  00124E  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2391  001252  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2392  001256  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2393  00125A  C01A  FFFA         	movff	??_high_isr,pclath
  2394  00125E  0011               	retfie		f
  2395  001260                     __end_of_high_isr:
  2396                           	opt stack 0
  2397                           pclatu	equ	0xFFB
  2398                           pclath	equ	0xFFA
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           intcon2	equ	0xFF1
  2407                           postinc0	equ	0xFEE
  2408                           fsr0h	equ	0xFEA
  2409                           fsr0l	equ	0xFE9
  2410                           wreg	equ	0xFE8
  2411                           fsr1h	equ	0xFE2
  2412                           fsr1l	equ	0xFE1
  2413                           bsr	equ	0xFE0
  2414                           postinc2	equ	0xFDE
  2415                           postdec2	equ	0xFDD
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _rotate *****************
  2421 ;; Defined at:
  2422 ;;		line 343 in file "interrupts.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  side            1    wreg     enum E4082
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  side            1   19[COMRAM] enum E4082
  2427 ;; Return value:  Size  Location     Type
  2428 ;;		None               void
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    1
  2443 ;; This function calls:
  2444 ;;		_motorCounterUpdate
  2445 ;; This function is called by:
  2446 ;;		_high_isr
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text13
  2451  0018F8                     __ptext13:
  2452                           	opt stack 0
  2453  0018F8                     _rotate:
  2454                           	opt stack 24
  2455                           
  2456                           ;incstack = 0
  2457                           ;rotate@side stored from wreg
  2458  0018F8  6E14               	movwf	rotate@side,c
  2459                           
  2460                           ;interrupts.c: 345: if (side == LEFT){
  2461  0018FA  5014               	movf	rotate@side,w,c
  2462  0018FC  A4D8               	btfss	status,2,c
  2463  0018FE  D00B               	goto	i2l1467
  2464                           
  2465                           ;interrupts.c: 346: motorCounterUpdate(RIGHT,0);
  2466  001900  0E00               	movlw	0
  2467  001902  6E12               	movwf	motorCounterUpdate@reverse,c
  2468  001904  0E01               	movlw	1
  2469  001906  EC2C  F00B         	call	_motorCounterUpdate
  2470                           
  2471                           ;interrupts.c: 347: motorCounterUpdate(LEFT,1);
  2472  00190A  0E01               	movlw	1
  2473  00190C  6E12               	movwf	motorCounterUpdate@reverse,c
  2474  00190E  0E00               	movlw	0
  2475  001910  EC2C  F00B         	call	_motorCounterUpdate
  2476                           
  2477                           ;interrupts.c: 348: } else {
  2478  001914  D00B               	goto	i2l1469
  2479  001916                     i2l1467:
  2480                           
  2481                           ;interrupts.c: 349: motorCounterUpdate(LEFT,0);
  2482  001916  0E00               	movlw	0
  2483  001918  6E12               	movwf	motorCounterUpdate@reverse,c
  2484  00191A  0E00               	movlw	0
  2485  00191C  EC2C  F00B         	call	_motorCounterUpdate
  2486                           
  2487                           ;interrupts.c: 350: motorCounterUpdate(RIGHT,1);
  2488  001920  0E01               	movlw	1
  2489  001922  6E12               	movwf	motorCounterUpdate@reverse,c
  2490  001924  0E01               	movlw	1
  2491  001926  EC2C  F00B         	call	_motorCounterUpdate
  2492  00192A  D000               	goto	i2l1469
  2493  00192C                     i2l1469:
  2494                           
  2495                           ;interrupts.c: 351: }
  2496                           ;interrupts.c: 352: RotateCounter--;
  2497  00192C  064F               	decf	_RotateCounter,f,c
  2498  00192E  A0D8               	btfss	status,0,c
  2499  001930  0650               	decf	_RotateCounter+1,f,c
  2500  001932  0012               	return		;funcret
  2501  001934                     __end_of_rotate:
  2502                           	opt stack 0
  2503                           pclatu	equ	0xFFB
  2504                           pclath	equ	0xFFA
  2505                           tblptru	equ	0xFF8
  2506                           tblptrh	equ	0xFF7
  2507                           tblptrl	equ	0xFF6
  2508                           tablat	equ	0xFF5
  2509                           prodh	equ	0xFF4
  2510                           prodl	equ	0xFF3
  2511                           intcon	equ	0xFF2
  2512                           intcon2	equ	0xFF1
  2513                           postinc0	equ	0xFEE
  2514                           fsr0h	equ	0xFEA
  2515                           fsr0l	equ	0xFE9
  2516                           wreg	equ	0xFE8
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           bsr	equ	0xFE0
  2520                           postinc2	equ	0xFDE
  2521                           postdec2	equ	0xFDD
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _forward *****************
  2527 ;; Defined at:
  2528 ;;		line 374 in file "interrupts.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;		None               void
  2535 ;; Registers used:
  2536 ;;		wreg, status,2, status,0, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;Total ram usage:        0 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    1
  2549 ;; This function calls:
  2550 ;;		_motorCounterUpdate
  2551 ;; This function is called by:
  2552 ;;		_high_isr
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text14
  2557  001A26                     __ptext14:
  2558                           	opt stack 0
  2559  001A26                     _forward:
  2560                           	opt stack 24
  2561                           
  2562                           ;interrupts.c: 376: motorCounterUpdate(RIGHT,0);
  2563                           
  2564                           ;incstack = 0
  2565  001A26  0E00               	movlw	0
  2566  001A28  6E12               	movwf	motorCounterUpdate@reverse,c
  2567  001A2A  0E01               	movlw	1
  2568  001A2C  EC2C  F00B         	call	_motorCounterUpdate
  2569                           
  2570                           ;interrupts.c: 377: motorCounterUpdate(LEFT,0);
  2571  001A30  0E00               	movlw	0
  2572  001A32  6E12               	movwf	motorCounterUpdate@reverse,c
  2573  001A34  0E00               	movlw	0
  2574  001A36  EC2C  F00B         	call	_motorCounterUpdate
  2575                           
  2576                           ;interrupts.c: 378: ForwardCounter--;
  2577  001A3A  0645               	decf	_ForwardCounter,f,c
  2578  001A3C  A0D8               	btfss	status,0,c
  2579  001A3E  0646               	decf	_ForwardCounter+1,f,c
  2580  001A40  0012               	return		;funcret
  2581  001A42                     __end_of_forward:
  2582                           	opt stack 0
  2583                           pclatu	equ	0xFFB
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           intcon	equ	0xFF2
  2592                           intcon2	equ	0xFF1
  2593                           postinc0	equ	0xFEE
  2594                           fsr0h	equ	0xFEA
  2595                           fsr0l	equ	0xFE9
  2596                           wreg	equ	0xFE8
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           bsr	equ	0xFE0
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _Reversing *****************
  2607 ;; Defined at:
  2608 ;;		line 367 in file "interrupts.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;		None               void
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    1
  2629 ;; This function calls:
  2630 ;;		_motorCounterUpdate
  2631 ;; This function is called by:
  2632 ;;		_high_isr
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text15
  2637  001A42                     __ptext15:
  2638                           	opt stack 0
  2639  001A42                     _Reversing:
  2640                           	opt stack 24
  2641                           
  2642                           ;interrupts.c: 369: motorCounterUpdate(RIGHT,1);
  2643                           
  2644                           ;incstack = 0
  2645  001A42  0E01               	movlw	1
  2646  001A44  6E12               	movwf	motorCounterUpdate@reverse,c
  2647  001A46  0E01               	movlw	1
  2648  001A48  EC2C  F00B         	call	_motorCounterUpdate
  2649                           
  2650                           ;interrupts.c: 370: motorCounterUpdate(LEFT,1);
  2651  001A4C  0E01               	movlw	1
  2652  001A4E  6E12               	movwf	motorCounterUpdate@reverse,c
  2653  001A50  0E00               	movlw	0
  2654  001A52  EC2C  F00B         	call	_motorCounterUpdate
  2655                           
  2656                           ;interrupts.c: 371: ReverseCounter--;
  2657  001A56  064D               	decf	_ReverseCounter,f,c
  2658  001A58  A0D8               	btfss	status,0,c
  2659  001A5A  064E               	decf	_ReverseCounter+1,f,c
  2660  001A5C  0012               	return		;funcret
  2661  001A5E                     __end_of_Reversing:
  2662                           	opt stack 0
  2663                           pclatu	equ	0xFFB
  2664                           pclath	equ	0xFFA
  2665                           tblptru	equ	0xFF8
  2666                           tblptrh	equ	0xFF7
  2667                           tblptrl	equ	0xFF6
  2668                           tablat	equ	0xFF5
  2669                           prodh	equ	0xFF4
  2670                           prodl	equ	0xFF3
  2671                           intcon	equ	0xFF2
  2672                           intcon2	equ	0xFF1
  2673                           postinc0	equ	0xFEE
  2674                           fsr0h	equ	0xFEA
  2675                           fsr0l	equ	0xFE9
  2676                           wreg	equ	0xFE8
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           bsr	equ	0xFE0
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _KController *****************
  2687 ;; Defined at:
  2688 ;;		line 308 in file "interrupts.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  diff            2   23[COMRAM] int 
  2693 ;;  correctTo       1   22[COMRAM] enum E4082
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;Total ram usage:        5 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    1
  2710 ;; This function calls:
  2711 ;;		_ABS
  2712 ;;		_merge
  2713 ;;		_motorCounterUpdate
  2714 ;;		_moveMouse
  2715 ;; This function is called by:
  2716 ;;		_high_isr
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text16
  2721  00174C                     __ptext16:
  2722                           	opt stack 0
  2723  00174C                     _KController:
  2724                           	opt stack 24
  2725                           
  2726                           ;interrupts.c: 310: Side correctTo;
  2727                           ;interrupts.c: 311: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2728                           
  2729                           ;incstack = 0
  2730  00174C  EE20  F03F         	lfsr	2,_sensorValue+2
  2731  001750  CFDE F015          	movff	postinc2,??_KController
  2732  001754  CFDD F016          	movff	postdec2,??_KController+1
  2733  001758  1E15               	comf	??_KController,f,c
  2734  00175A  1E16               	comf	??_KController+1,f,c
  2735  00175C  4A15               	infsnz	??_KController,f,c
  2736  00175E  2A16               	incf	??_KController+1,f,c
  2737  001760  503D               	movf	_sensorValue,w,c
  2738  001762  2415               	addwf	??_KController,w,c
  2739  001764  6E12               	movwf	ABS@x,c
  2740  001766  503E               	movf	_sensorValue+1,w,c
  2741  001768  2016               	addwfc	??_KController+1,w,c
  2742  00176A  6E13               	movwf	ABS@x+1,c
  2743  00176C  EC2F  F00D         	call	_ABS	;wreg free
  2744  001770  C012  F018         	movff	?_ABS,KController@diff
  2745  001774  C013  F019         	movff	?_ABS+1,KController@diff+1
  2746                           
  2747                           ;interrupts.c: 314: if(controllerSteps > 0)
  2748  001778  5058               	movf	_controllerSteps,w,c
  2749  00177A  B4D8               	btfsc	status,2,c
  2750  00177C  D00C               	goto	i2l1481
  2751                           
  2752                           ;interrupts.c: 315: {
  2753                           ;interrupts.c: 316: motorCounterUpdate(RIGHT,0);
  2754  00177E  0E00               	movlw	0
  2755  001780  6E12               	movwf	motorCounterUpdate@reverse,c
  2756  001782  0E01               	movlw	1
  2757  001784  EC2C  F00B         	call	_motorCounterUpdate
  2758                           
  2759                           ;interrupts.c: 317: motorCounterUpdate(LEFT,0);
  2760  001788  0E00               	movlw	0
  2761  00178A  6E12               	movwf	motorCounterUpdate@reverse,c
  2762  00178C  0E00               	movlw	0
  2763  00178E  EC2C  F00B         	call	_motorCounterUpdate
  2764                           
  2765                           ;interrupts.c: 318: controllerSteps--;
  2766  001792  0658               	decf	_controllerSteps,f,c
  2767                           
  2768                           ;interrupts.c: 319: return;
  2769  001794  D047               	goto	i2l133
  2770  001796                     i2l1481:
  2771                           
  2772                           ;interrupts.c: 320: }
  2773                           ;interrupts.c: 322: if(sensorValue[0] > sensorValue[1])
  2774  001796  503D               	movf	_sensorValue,w,c
  2775  001798  5C3F               	subwf	_sensorValue+2,w,c
  2776  00179A  5040               	movf	_sensorValue+3,w,c
  2777  00179C  0A80               	xorlw	128
  2778  00179E  6E15               	movwf	??_KController& (0+255),c
  2779  0017A0  503E               	movf	_sensorValue+1,w,c
  2780  0017A2  0A80               	xorlw	128
  2781  0017A4  5815               	subwfb	??_KController& (0+255),w,c
  2782  0017A6  B0D8               	btfsc	status,0,c
  2783  0017A8  D00F               	goto	i2l1489
  2784                           
  2785                           ;interrupts.c: 323: {
  2786                           ;interrupts.c: 324: correctTo = LEFT;
  2787  0017AA  0E00               	movlw	0
  2788  0017AC  6E17               	movwf	KController@correctTo,c
  2789                           
  2790                           ;interrupts.c: 325: motorCounterUpdate(correctTo,0);
  2791  0017AE  0E00               	movlw	0
  2792  0017B0  6E12               	movwf	motorCounterUpdate@reverse,c
  2793  0017B2  5017               	movf	KController@correctTo,w,c
  2794  0017B4  EC2C  F00B         	call	_motorCounterUpdate
  2795                           
  2796                           ;interrupts.c: 326: moveMouse(merge(LMotorCounter,RMotorCounter));
  2797  0017B8  C054  F012         	movff	_RMotorCounter,merge@right
  2798  0017BC  5053               	movf	_LMotorCounter,w,c
  2799  0017BE  EC46  F00D         	call	_merge
  2800  0017C2  EC53  F00D         	call	_moveMouse
  2801                           
  2802                           ;interrupts.c: 327: }
  2803  0017C6  D00F               	goto	i2l1495
  2804  0017C8                     i2l1489:
  2805                           
  2806                           ;interrupts.c: 328: else
  2807                           ;interrupts.c: 329: {
  2808                           ;interrupts.c: 330: correctTo = RIGHT;
  2809  0017C8  0E01               	movlw	1
  2810  0017CA  6E17               	movwf	KController@correctTo,c
  2811                           
  2812                           ;interrupts.c: 331: motorCounterUpdate(correctTo,0);
  2813  0017CC  0E00               	movlw	0
  2814  0017CE  6E12               	movwf	motorCounterUpdate@reverse,c
  2815  0017D0  5017               	movf	KController@correctTo,w,c
  2816  0017D2  EC2C  F00B         	call	_motorCounterUpdate
  2817                           
  2818                           ;interrupts.c: 332: moveMouse(merge(LMotorCounter,RMotorCounter));
  2819  0017D6  C054  F012         	movff	_RMotorCounter,merge@right
  2820  0017DA  5053               	movf	_LMotorCounter,w,c
  2821  0017DC  EC46  F00D         	call	_merge
  2822  0017E0  EC53  F00D         	call	_moveMouse
  2823  0017E4  D000               	goto	i2l1495
  2824  0017E6                     i2l1495:
  2825                           
  2826                           ;interrupts.c: 333: }
  2827                           ;interrupts.c: 335: if(diff > 150)
  2828  0017E6  BE19               	btfsc	KController@diff+1,7,c
  2829  0017E8  D008               	goto	i2l1499
  2830  0017EA  5019               	movf	KController@diff+1,w,c
  2831  0017EC  E104               	bnz	i2u93_40
  2832  0017EE  0E97               	movlw	151
  2833  0017F0  5C18               	subwf	KController@diff,w,c
  2834  0017F2  A0D8               	btfss	status,0,c
  2835  0017F4  D002               	goto	i2l1499
  2836  0017F6                     i2u93_40:
  2837                           
  2838                           ;interrupts.c: 336: controllerSteps = 1;
  2839  0017F6  0E01               	movlw	1
  2840  0017F8  D013               	goto	L8
  2841  0017FA                     i2l1499:
  2842                           
  2843                           ;interrupts.c: 337: else if(diff <= 150 && diff > 20)
  2844  0017FA  BE19               	btfsc	KController@diff+1,7,c
  2845  0017FC  D006               	goto	i2l1501
  2846  0017FE  5019               	movf	KController@diff+1,w,c
  2847  001800  E10E               	bnz	i2l1505
  2848  001802  0E97               	movlw	151
  2849  001804  5C18               	subwf	KController@diff,w,c
  2850  001806  B0D8               	btfsc	status,0,c
  2851  001808  D00A               	goto	i2l1505
  2852  00180A                     i2l1501:
  2853  00180A  BE19               	btfsc	KController@diff+1,7,c
  2854  00180C  D008               	goto	i2l1505
  2855  00180E  5019               	movf	KController@diff+1,w,c
  2856  001810  E104               	bnz	i2u95_40
  2857  001812  0E15               	movlw	21
  2858  001814  5C18               	subwf	KController@diff,w,c
  2859  001816  A0D8               	btfss	status,0,c
  2860  001818  D002               	goto	i2l1505
  2861  00181A                     i2u95_40:
  2862                           
  2863                           ;interrupts.c: 338: controllerSteps = 4;
  2864  00181A  0E04               	movlw	4
  2865  00181C  D001               	goto	L8
  2866  00181E                     i2l1505:
  2867                           
  2868                           ;interrupts.c: 339: else
  2869                           ;interrupts.c: 340: controllerSteps = 8;
  2870  00181E  0E08               	movlw	8
  2871  001820                     L8:
  2872  001820  6E58               	movwf	_controllerSteps,c
  2873  001822  D000               	goto	i2l133
  2874  001824                     i2l133:
  2875  001824  0012               	return		;funcret
  2876  001826                     __end_of_KController:
  2877                           	opt stack 0
  2878                           pclatu	equ	0xFFB
  2879                           pclath	equ	0xFFA
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           intcon	equ	0xFF2
  2887                           intcon2	equ	0xFF1
  2888                           postinc0	equ	0xFEE
  2889                           fsr0h	equ	0xFEA
  2890                           fsr0l	equ	0xFE9
  2891                           wreg	equ	0xFE8
  2892                           fsr1h	equ	0xFE2
  2893                           fsr1l	equ	0xFE1
  2894                           bsr	equ	0xFE0
  2895                           postinc2	equ	0xFDE
  2896                           postdec2	equ	0xFDD
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _moveMouse *****************
  2902 ;; Defined at:
  2903 ;;		line 295 in file "interrupts.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  action          1    wreg     unsigned char 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  action          1   17[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;		None               void
  2910 ;; Registers used:
  2911 ;;		wreg
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        1 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_high_isr
  2927 ;;		_KController
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text17
  2932  001AA6                     __ptext17:
  2933                           	opt stack 0
  2934  001AA6                     _moveMouse:
  2935                           	opt stack 25
  2936                           
  2937                           ;incstack = 0
  2938                           ;moveMouse@action stored from wreg
  2939  001AA6  6E12               	movwf	moveMouse@action,c
  2940                           
  2941                           ;interrupts.c: 297: LATC = action;
  2942  001AA8  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2943  001AAC  0012               	return		;funcret
  2944  001AAE                     __end_of_moveMouse:
  2945                           	opt stack 0
  2946                           pclatu	equ	0xFFB
  2947                           pclath	equ	0xFFA
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           intcon2	equ	0xFF1
  2956                           postinc0	equ	0xFEE
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           fsr1h	equ	0xFE2
  2961                           fsr1l	equ	0xFE1
  2962                           bsr	equ	0xFE0
  2963                           postinc2	equ	0xFDE
  2964                           postdec2	equ	0xFDD
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _motorCounterUpdate *****************
  2970 ;; Defined at:
  2971 ;;		line 243 in file "interrupts.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  side            1    wreg     enum E4082
  2974 ;;  reverse         1   17[COMRAM] unsigned char 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  side            1   18[COMRAM] enum E4082
  2977 ;; Return value:  Size  Location     Type
  2978 ;;		None               void
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2986 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;Total ram usage:        2 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_KController
  2996 ;;		_rotate
  2997 ;;		_Reversing
  2998 ;;		_forward
  2999 ;;		_smoothTurn
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text18
  3004  001658                     __ptext18:
  3005                           	opt stack 0
  3006  001658                     _motorCounterUpdate:
  3007                           	opt stack 24
  3008                           
  3009                           ;incstack = 0
  3010                           ;motorCounterUpdate@side stored from wreg
  3011  001658  6E13               	movwf	motorCounterUpdate@side,c
  3012                           
  3013                           ;interrupts.c: 245: if(side == LEFT && reverse == 1)
  3014  00165A  5013               	movf	motorCounterUpdate@side,w,c
  3015  00165C  A4D8               	btfss	status,2,c
  3016  00165E  D01B               	goto	i2l1357
  3017  001660  0412               	decf	motorCounterUpdate@reverse,w,c
  3018  001662  B4D8               	btfsc	status,2,c
  3019  001664  D00B               	goto	i2l1355
  3020  001666  D017               	goto	i2l1357
  3021                           
  3022                           ;interrupts.c: 246: {
  3023                           ;interrupts.c: 247: switch(LMotorCounter)
  3024  001668  D009               	goto	i2l1355
  3025  00166A                     i2l1345:
  3026  00166A  0E02               	movlw	2
  3027  00166C  D004               	goto	L11
  3028  00166E                     i2l1347:
  3029  00166E  0E04               	movlw	4
  3030  001670  D002               	goto	L11
  3031                           
  3032                           ;interrupts.c: 251: case 0b00000100: LMotorCounter = 0b00001000; break;
  3033  001672  D03E               	goto	i2l1389
  3034                           
  3035                           ;interrupts.c: 252: case 0b00001000: LMotorCounter = 0b00000001; break;
  3036  001674  D039               	goto	i2l1383
  3037  001676                     L11:
  3038  001676  6E53               	movwf	_LMotorCounter,c
  3039  001678  D068               	goto	i2l119
  3040                           
  3041                           ;interrupts.c: 253: default: LMotorCounter = 0b00000001;
  3042  00167A  D036               	goto	i2l1383
  3043  00167C                     i2l1355:
  3044  00167C  5053               	movf	_LMotorCounter,w,c
  3045                           
  3046                           ; Switch size 1, requested type "space"
  3047                           ; Number of cases is 4, Range of values is 1 to 8
  3048                           ; switch strategies available:
  3049                           ; Name         Instructions Cycles
  3050                           ; simple_byte           13     7 (average)
  3051                           ;	Chosen strategy is simple_byte
  3052  00167E  0A01               	xorlw	1	; case 1
  3053  001680  B4D8               	btfsc	status,2,c
  3054  001682  D7F3               	goto	i2l1345
  3055  001684  0A03               	xorlw	3	; case 2
  3056  001686  B4D8               	btfsc	status,2,c
  3057  001688  D7F2               	goto	i2l1347
  3058  00168A  0A06               	xorlw	6	; case 4
  3059  00168C  B4D8               	btfsc	status,2,c
  3060  00168E  D030               	goto	i2l1389
  3061  001690  0A0C               	xorlw	12	; case 8
  3062  001692  D02A               	goto	i2l1383
  3063                           
  3064                           ;interrupts.c: 255: } else if(side == RIGHT && reverse == 1)
  3065  001694  D05A               	goto	i2l119
  3066  001696                     i2l1357:
  3067  001696  0413               	decf	motorCounterUpdate@side,w,c
  3068  001698  A4D8               	btfss	status,2,c
  3069  00169A  D01D               	goto	i2l1375
  3070  00169C  0412               	decf	motorCounterUpdate@reverse,w,c
  3071  00169E  B4D8               	btfsc	status,2,c
  3072  0016A0  D00B               	goto	i2l1373
  3073  0016A2  D019               	goto	i2l1375
  3074                           
  3075                           ;interrupts.c: 256: {
  3076                           ;interrupts.c: 257: switch(RMotorCounter)
  3077  0016A4  D009               	goto	i2l1373
  3078  0016A6                     i2l1363:
  3079  0016A6  0E08               	movlw	8
  3080  0016A8  D040               	goto	L19
  3081  0016AA                     i2l1365:
  3082  0016AA  0E01               	movlw	1
  3083  0016AC  D03E               	goto	L19
  3084  0016AE                     i2l1367:
  3085  0016AE  0E02               	movlw	2
  3086  0016B0  D03C               	goto	L19
  3087  0016B2                     i2l1369:
  3088  0016B2  0E04               	movlw	4
  3089  0016B4  D03A               	goto	L19
  3090                           
  3091                           ;interrupts.c: 263: default: RMotorCounter = 0b00001000;
  3092  0016B6  D7F7               	goto	i2l1363
  3093  0016B8                     i2l1373:
  3094  0016B8  5054               	movf	_RMotorCounter,w,c
  3095                           
  3096                           ; Switch size 1, requested type "space"
  3097                           ; Number of cases is 4, Range of values is 1 to 8
  3098                           ; switch strategies available:
  3099                           ; Name         Instructions Cycles
  3100                           ; simple_byte           13     7 (average)
  3101                           ;	Chosen strategy is simple_byte
  3102  0016BA  0A01               	xorlw	1	; case 1
  3103  0016BC  B4D8               	btfsc	status,2,c
  3104  0016BE  D7F3               	goto	i2l1363
  3105  0016C0  0A03               	xorlw	3	; case 2
  3106  0016C2  B4D8               	btfsc	status,2,c
  3107  0016C4  D7F2               	goto	i2l1365
  3108  0016C6  0A06               	xorlw	6	; case 4
  3109  0016C8  B4D8               	btfsc	status,2,c
  3110  0016CA  D7F1               	goto	i2l1367
  3111  0016CC  0A0C               	xorlw	12	; case 8
  3112  0016CE  B4D8               	btfsc	status,2,c
  3113  0016D0  D7F0               	goto	i2l1369
  3114  0016D2  D7E9               	goto	i2l1363
  3115                           
  3116                           ;interrupts.c: 265: } else if(side == LEFT && reverse == 0)
  3117  0016D4  D03A               	goto	i2l119
  3118  0016D6                     i2l1375:
  3119  0016D6  5013               	movf	motorCounterUpdate@side,w,c
  3120  0016D8  A4D8               	btfss	status,2,c
  3121  0016DA  D01B               	goto	i2l1393
  3122  0016DC  5012               	movf	motorCounterUpdate@reverse,w,c
  3123  0016DE  B4D8               	btfsc	status,2,c
  3124  0016E0  D009               	goto	i2l1391
  3125  0016E2  D017               	goto	i2l1393
  3126                           
  3127                           ;interrupts.c: 266: {
  3128                           ;interrupts.c: 267: switch(LMotorCounter)
  3129  0016E4  D007               	goto	i2l1391
  3130                           
  3131                           ;interrupts.c: 268: {
  3132                           ;interrupts.c: 269: case 0b00000001: LMotorCounter = 0b00001000; break;
  3133  0016E6  D004               	goto	i2l1389
  3134  0016E8                     i2l1383:
  3135  0016E8  0E01               	movlw	1
  3136  0016EA  D7C5               	goto	L11
  3137                           
  3138                           ;interrupts.c: 271: case 0b00000100: LMotorCounter = 0b00000010; break;
  3139  0016EC  D7BE               	goto	i2l1345
  3140                           
  3141                           ;interrupts.c: 272: case 0b00001000: LMotorCounter = 0b00000100; break;
  3142  0016EE  D7BF               	goto	i2l1347
  3143  0016F0                     i2l1389:
  3144  0016F0  0E08               	movlw	8
  3145  0016F2  D7C1               	goto	L11
  3146  0016F4                     i2l1391:
  3147  0016F4  5053               	movf	_LMotorCounter,w,c
  3148                           
  3149                           ; Switch size 1, requested type "space"
  3150                           ; Number of cases is 4, Range of values is 1 to 8
  3151                           ; switch strategies available:
  3152                           ; Name         Instructions Cycles
  3153                           ; simple_byte           13     7 (average)
  3154                           ;	Chosen strategy is simple_byte
  3155  0016F6  0A01               	xorlw	1	; case 1
  3156  0016F8  B4D8               	btfsc	status,2,c
  3157  0016FA  D7FA               	goto	i2l1389
  3158  0016FC  0A03               	xorlw	3	; case 2
  3159  0016FE  B4D8               	btfsc	status,2,c
  3160  001700  D7F3               	goto	i2l1383
  3161  001702  0A06               	xorlw	6	; case 4
  3162  001704  B4D8               	btfsc	status,2,c
  3163  001706  D7B1               	goto	i2l1345
  3164  001708  0A0C               	xorlw	12	; case 8
  3165  00170A  B4D8               	btfsc	status,2,c
  3166  00170C  D7B0               	goto	i2l1347
  3167  00170E  D7F0               	goto	i2l1389
  3168                           
  3169                           ;interrupts.c: 275: } else if(side == RIGHT && reverse == 0)
  3170  001710  D01C               	goto	i2l119
  3171  001712                     i2l1393:
  3172  001712  0413               	decf	motorCounterUpdate@side,w,c
  3173  001714  A4D8               	btfss	status,2,c
  3174  001716  D019               	goto	i2l119
  3175  001718  5012               	movf	motorCounterUpdate@reverse,w,c
  3176  00171A  B4D8               	btfsc	status,2,c
  3177  00171C  D009               	goto	i2l1409
  3178  00171E  D015               	goto	i2l119
  3179                           
  3180                           ;interrupts.c: 276: {
  3181                           ;interrupts.c: 277: switch(RMotorCounter)
  3182  001720  D007               	goto	i2l1409
  3183                           
  3184                           ;interrupts.c: 278: {
  3185                           ;interrupts.c: 279: case 0b00000001: RMotorCounter = 0b00000010; break;
  3186  001722  D7C5               	goto	i2l1367
  3187                           
  3188                           ;interrupts.c: 280: case 0b00000010: RMotorCounter = 0b00000100; break;
  3189  001724  D7C6               	goto	i2l1369
  3190                           
  3191                           ;interrupts.c: 281: case 0b00000100: RMotorCounter = 0b00001000; break;
  3192  001726  D7BF               	goto	i2l1363
  3193                           
  3194                           ;interrupts.c: 282: case 0b00001000: RMotorCounter = 0b00000001; break;
  3195  001728  D7C0               	goto	i2l1365
  3196  00172A                     L19:
  3197  00172A  6E54               	movwf	_RMotorCounter,c
  3198  00172C  D00E               	goto	i2l119
  3199                           
  3200                           ;interrupts.c: 283: default: RMotorCounter = 0b00000001;
  3201  00172E  D7BD               	goto	i2l1365
  3202  001730                     i2l1409:
  3203  001730  5054               	movf	_RMotorCounter,w,c
  3204                           
  3205                           ; Switch size 1, requested type "space"
  3206                           ; Number of cases is 4, Range of values is 1 to 8
  3207                           ; switch strategies available:
  3208                           ; Name         Instructions Cycles
  3209                           ; simple_byte           13     7 (average)
  3210                           ;	Chosen strategy is simple_byte
  3211  001732  0A01               	xorlw	1	; case 1
  3212  001734  B4D8               	btfsc	status,2,c
  3213  001736  D7BB               	goto	i2l1367
  3214  001738  0A03               	xorlw	3	; case 2
  3215  00173A  B4D8               	btfsc	status,2,c
  3216  00173C  D7BA               	goto	i2l1369
  3217  00173E  0A06               	xorlw	6	; case 4
  3218  001740  B4D8               	btfsc	status,2,c
  3219  001742  D7B1               	goto	i2l1363
  3220  001744  0A0C               	xorlw	12	; case 8
  3221  001746  D7B1               	goto	i2l1365
  3222  001748  D000               	goto	i2l119
  3223  00174A                     i2l119:
  3224  00174A  0012               	return		;funcret
  3225  00174C                     __end_of_motorCounterUpdate:
  3226                           	opt stack 0
  3227                           pclatu	equ	0xFFB
  3228                           pclath	equ	0xFFA
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon	equ	0xFF2
  3236                           intcon2	equ	0xFF1
  3237                           postinc0	equ	0xFEE
  3238                           fsr0h	equ	0xFEA
  3239                           fsr0l	equ	0xFE9
  3240                           wreg	equ	0xFE8
  3241                           fsr1h	equ	0xFE2
  3242                           fsr1l	equ	0xFE1
  3243                           bsr	equ	0xFE0
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           fsr2h	equ	0xFDA
  3247                           fsr2l	equ	0xFD9
  3248                           status	equ	0xFD8
  3249                           
  3250 ;; *************** function _merge *****************
  3251 ;; Defined at:
  3252 ;;		line 288 in file "interrupts.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  left            1    wreg     unsigned char 
  3255 ;;  right           1   17[COMRAM] unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  left            1   18[COMRAM] unsigned char 
  3258 ;;  merged          1   19[COMRAM] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      unsigned char 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3268 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;Total ram usage:        3 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_high_isr
  3278 ;;		_KController
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text19
  3283  001A8C                     __ptext19:
  3284                           	opt stack 0
  3285  001A8C                     _merge:
  3286                           	opt stack 25
  3287                           
  3288                           ;incstack = 0
  3289                           ;merge@left stored from wreg
  3290  001A8C  6E13               	movwf	merge@left,c
  3291                           
  3292                           ;interrupts.c: 290: unsigned char merged;
  3293                           ;interrupts.c: 291: merged = left + (right << 4);
  3294  001A8E  3812               	swapf	merge@right,w,c
  3295  001A90  0BF0               	andlw	240
  3296  001A92  2413               	addwf	merge@left,w,c
  3297  001A94  6E14               	movwf	merge@merged,c
  3298                           
  3299                           ;interrupts.c: 292: return merged;
  3300  001A96  5014               	movf	merge@merged,w,c
  3301  001A98  D000               	goto	i2l122
  3302  001A9A                     i2l122:
  3303  001A9A  0012               	return		;funcret
  3304  001A9C                     __end_of_merge:
  3305                           	opt stack 0
  3306                           pclatu	equ	0xFFB
  3307                           pclath	equ	0xFFA
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           intcon2	equ	0xFF1
  3316                           postinc0	equ	0xFEE
  3317                           fsr0h	equ	0xFEA
  3318                           fsr0l	equ	0xFE9
  3319                           wreg	equ	0xFE8
  3320                           fsr1h	equ	0xFE2
  3321                           fsr1l	equ	0xFE1
  3322                           bsr	equ	0xFE0
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function _ABS *****************
  3330 ;; Defined at:
  3331 ;;		line 301 in file "interrupts.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  x               2   17[COMRAM] int 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  2   17[COMRAM] int 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;Total ram usage:        2 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_KController
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text20
  3359  001A5E                     __ptext20:
  3360                           	opt stack 0
  3361  001A5E                     _ABS:
  3362                           	opt stack 24
  3363                           
  3364                           ;interrupts.c: 303: if(x<0) x = -x;
  3365                           
  3366                           ;incstack = 0
  3367  001A5E  AE13               	btfss	ABS@x+1,7,c
  3368  001A60  D005               	goto	i2l1415
  3369  001A62  6C12               	negf	ABS@x,c
  3370  001A64  1E13               	comf	ABS@x+1,f,c
  3371  001A66  B0D8               	btfsc	status,0,c
  3372  001A68  2A13               	incf	ABS@x+1,f,c
  3373  001A6A  D000               	goto	i2l1415
  3374  001A6C                     i2l1415:
  3375                           
  3376                           ;interrupts.c: 304: return x;
  3377  001A6C  C012  F012         	movff	ABS@x,?_ABS
  3378  001A70  C013  F013         	movff	ABS@x+1,?_ABS+1
  3379  001A74  D000               	goto	i2l129
  3380  001A76                     i2l129:
  3381  001A76  0012               	return		;funcret
  3382  001A78                     __end_of_ABS:
  3383                           	opt stack 0
  3384                           pclatu	equ	0xFFB
  3385                           pclath	equ	0xFFA
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           intcon2	equ	0xFF1
  3394                           postinc0	equ	0xFEE
  3395                           fsr0h	equ	0xFEA
  3396                           fsr0l	equ	0xFE9
  3397                           wreg	equ	0xFE8
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           bsr	equ	0xFE0
  3401                           postinc2	equ	0xFDE
  3402                           postdec2	equ	0xFDD
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           pclatu	equ	0xFFB
  3407                           pclath	equ	0xFFA
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           intcon2	equ	0xFF1
  3416                           postinc0	equ	0xFEE
  3417                           fsr0h	equ	0xFEA
  3418                           fsr0l	equ	0xFE9
  3419                           wreg	equ	0xFE8
  3420                           fsr1h	equ	0xFE2
  3421                           fsr1l	equ	0xFE1
  3422                           bsr	equ	0xFE0
  3423                           postinc2	equ	0xFDE
  3424                           postdec2	equ	0xFDD
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429                           	psect	rparam
  3430  0000                     pclatu	equ	0xFFB
  3431                           pclath	equ	0xFFA
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           intcon2	equ	0xFF1
  3440                           postinc0	equ	0xFEE
  3441                           fsr0h	equ	0xFEA
  3442                           fsr0l	equ	0xFE9
  3443                           wreg	equ	0xFE8
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           bsr	equ	0xFE0
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60      88
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             54 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4409
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     940
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1392
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     918
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      58       1       69.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6      34        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 17 17:34:01 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l232 195A                           l241 1A10                           l246 1A24  
                         l262 14EC                           l255 148A                           l272 19D6  
                         l280 19B6                           l273 19DE                           l276 19FE  
                         l277 1A06                           l473 18BA                           _ABS 1A5E  
                __CFG_CPB$OFF 000000                           _MAX 19E0                           _MIN 19B8  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A26                  _rotatingSide 0057  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1027 1A1E                          l1421 1946  
                        l1703 1864                          l1705 186E                          l1723 18B0  
                        l1715 1894                          l1707 1876                          l1733 1284  
                        l1719 18A0                          l1743 1308                          l1745 13FC  
                        l1691 183C                          l1739 12A8                          l1763 14B0  
                        l1749 1412                          l1781 15CA                          l1783 161E  
                        l1791 164A                          l1697 184E                          l1769 14D4  
                        l1779 1576                          l1787 1634                          l1797 1A82  
                        u1400 12A6                          _LATC 000F8B                          u1440 14AE  
                        u1450 14D2                          u1390 1282                          u1527 194C  
                        u1475 14F8                          i2l78 1226                          _main 1A78  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          fsr1l 000FE1                          fsr2l 000FD9  
                        pclat 000FFA                          prodh 000FF4                          prodl 000FF3  
                        start 00A2                 __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0033  
               __CFG_MCLRE$ON 000000                  ___param_bank 000010               __end_of_InitApp 18F8  
                       ??_ABS 0014                         ??_MAX 0032                         ??_MIN 0032  
  __size_of_sensorComputation 022C                         ?_main 0001               __end_of___awdiv 18BC  
                       _T0CON 000FD5               ___awdiv@divisor 002A                         i2l122 1A9A  
                       i2l133 1824                         i2l119 174A                         i2l129 1A76  
             ___awdiv@counter 002C                         _TRISC 000F94           _ConfigureOscillator 1A9C  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1934  
                       _merge 1A8C               __end_of_forward 1A42               __end_of_low_isr 00A2  
                       tablat 000FF5                         status 000FD8          ?_ConfigureOscillator 0001  
             __initialization 1968                  __end_of_main 1A8C                        ??_main 003D  
               __activetblptr 000002                        ?_delay 0028                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0028  
                      i2l1501 180A                        i2l1415 1A6C                        i2l1409 1730  
                      i2l1345 166A                        i2l1505 181E                        i2l1363 16A6  
                      i2l1347 166E                        i2l1355 167C                        i2l1603 1106  
                      i2l1365 16AA                        i2l1373 16B8                        i2l1357 1696  
                      i2l1605 1116                        i2l1621 1166                        i2l1383 16E8  
                      i2l1391 16F4                        i2l1367 16AE                        i2l1375 16D6  
                      i2l1631 11AA                        i2l1393 1712                        i2l1369 16B2  
                      i2l1481 1796                        i2l1641 11F6                        i2l1609 1136  
                      i2l1467 1916                        i2l1571 1060                        i2l1389 16F0  
                      i2l1469 192C                        i2l1629 11A4                        i2l1581 10A2  
                      i2l1645 1206                        i2l1495 17E6                        i2l1591 10D8  
                      i2l1575 1074                        i2l1647 121E                        i2l1489 17C8  
                      i2l1593 10E8                        i2l1585 10B0                        i2l1499 17FA  
                      i2l1579 1092                        i2l1587 10B8                        i2l1589 10C6  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 002D  
       ??_ConfigureOscillator 0028                   merge@merged 0014                __CFG_XINST$OFF 000000  
          sensorComputation@i 0086            sensorComputation@j 0088              __end_of_high_isr 1260  
                      ___wmul 1990                     ??___awdiv 002C                __CFG_STVREN$ON 000000  
                      delay@x 002B                        clear_0 196E              ___awdiv@quotient 002E  
                      _rotate 18F8            __size_of_Reversing 001C                  __pdataCOMRAM 0058  
                   ??_forward 0014                  __mediumconst 0000                     ??_low_isr 0001  
              _ReverseCounter 004D                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 1986  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 1968               moveMouse@action 0012  
               __end_of_merge 1A9C          KController@correctTo 0017    __end_of_motorCounterUpdate 174C  
              _ForwardCounter 0045                       ??_delay 002A                       ??_merge 0013  
          _AlgorithmSelection 1A08                  _LTurnCounter 0047             __end_of_Reversing 1A5E  
                  _delay_time 0051             _MotorDelayCounter 0049           ?_AlgorithmSelection 0001  
                     ?___wmul 0028            __size_of_moveMouse 0008                       ?_rotate 0001  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u93_40 17F6  
                     i2u95_40 181A          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
               _LMotorCounter 0053                       _InitApp 18BC                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 1826               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 1968                       __ramtop 1000  
                     __ptext0 1A78                       __ptext1 148C                       __ptext2 1260  
                     __ptext3 1990                       __ptext4 1826                       __ptext5 19B8  
                     __ptext6 19E0                       __ptext7 18BC                       __ptext8 1934  
                     __ptext9 1A08               __size_of_rotate 003C                  __size_of_ABS 001A  
                __size_of_MAX 0028                  __size_of_MIN 0028                       _forward 1A26  
                     delay@ms 0028                       _low_isr 0018                 ?_sensorUpdate 0001  
                  ??_high_isr 001A                __pintcode_body 100A          end_of_initialization 1986  
            _sensorCorrection 1001             __end_of_moveMouse 1AAE                 __Lmediumconst 0000  
                     int_func 100A               _controllerSteps 0058                    _justTurned 0056  
        __size_of_KController 00DA                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0037   __end_of_ConfigureOscillator 1AA6                  _RTurnCounter 004B  
              __end_of___wmul 19B8                 __pidataCOMRAM 1AAE                __end_of_rotate 1934  
         start_initialization 1968                   __end_of_ABS 1A78                   __end_of_MAX 1A08  
                 __end_of_MIN 19E0            _motorCounterUpdate 1658              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 1A42  
                    ??___wmul 002C              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 003D  
               __pcstackBANK0 0080        sensorUpdate@sensorTemp 008A             __size_of_high_isr 1258  
                    ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001  
                   _algorithm 0055                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 0028          __end_of_sensorUpdate 1658        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_forward 0001                      ?_low_isr 0001                __size_of_delay 0034  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 002C  
                   _moveMouse 1AA6                      i2u111_41 10C4                      i2u120_40 1176  
                    i2u112_40 10D6                      i2u121_40 1186                      i2u105_40 104C  
                    i2u106_40 105A                      i2u107_40 106E                      i2u124_40 11BA  
                    i2u116_40 1126                      i2u108_40 1082                      i2u125_40 11CA  
                    i2u118_40 1146              __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0028                 _RMotorCounter 0054                    rotate@side 0014  
               ??_KController 0015                    ?_moveMouse 0001              __size_of_InitApp 003C  
                    __Hrparam 0000                     merge@left 0013          sensorComputation@max 0080  
                    __Lrparam 0000          sensorComputation@min 0082          sensorComputation@sum 0084  
                 ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096  
            __size_of_forward 001C              __size_of_low_isr 008A                      __ptext10 1A9C  
                    __ptext20 1A5E                      __ptext13 18F8                      __ptext14 1A26  
                    __ptext15 1A42                      __ptext16 174C                      __ptext17 1AA6  
                    __ptext18 1658                      __ptext19 1A8C                      _high_isr 0008  
               __size_of_main 0014                 _RotateCounter 004F         __size_of_sensorUpdate 01CC  
__size_of_ConfigureOscillator 000A           __end_of_KController 1826             _sensorComputation 1260  
                  _INTCONbits 000FF2            ?_sensorComputation 0033                 sensorUpdate@i 00DA  
               sensorUpdate@j 00DC                  _sensorUpdate 148C                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 0035                   ??_moveMouse 0012  
             KController@diff 0018     __end_of_sensorComputation 148C                   _sensorValue 003D  
 __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012                   _KController 174C  
