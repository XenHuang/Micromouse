

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 15 21:50:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001AD8                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _controllerSteps
    42  001AD8  08                 	db	8
    43                           
    44                           	psect	smallconst
    45  001000                     __psmallconst:
    46                           	opt stack 0
    47  001000  00                 	db	0
    48  001001                     _sensorCorrection:
    49                           	opt stack 0
    50  001001  16                 	db	22
    51  001002  16                 	db	22
    52  001003  23                 	db	35
    53  001004  23                 	db	35
    54  001005                     __end_of_sensorCorrection:
    55                           	opt stack 0
    56  001005                     _sensorLocation:
    57                           	opt stack 0
    58  001005  1B                 	db	27
    59  001006  2B                 	db	43
    60  001007  1F                 	db	31
    61  001008  33                 	db	51
    62  001009                     __end_of_sensorLocation:
    63                           	opt stack 0
    64  0000                     _ADCON0	set	4034
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADRESH	set	4036
    69  0000                     _ADRESL	set	4035
    70  0000                     _INTCON	set	4082
    71  0000                     _INTCON2	set	4081
    72  0000                     _INTCONbits	set	4082
    73  0000                     _LATC	set	3979
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCTUNE	set	3995
    76  0000                     _T0CON	set	4053
    77  0000                     _TRISBbits	set	3987
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISEbits	set	3990
    80                           
    81                           ; #config settings
    82  001009  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  001992                     __pcinit:
    86                           	opt stack 0
    87  001992                     start_initialization:
    88                           	opt stack 0
    89  001992                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (27 bytes)
    93  001992  EE00  F03D         	lfsr	0,__pbssCOMRAM
    94  001996  0E1B               	movlw	27
    95  001998                     clear_0:
    96  001998  6AEE               	clrf	postinc0,c
    97  00199A  06E8               	decf	wreg,f,c
    98  00199C  E1FD               	bnz	clear_0
    99                           
   100                           ; Initialize objects allocated to COMRAM (1 bytes)
   101                           ; load TBLPTR registers with __pidataCOMRAM
   102  00199E  0ED8               	movlw	low __pidataCOMRAM
   103  0019A0  6EF6               	movwf	tblptrl,c
   104  0019A2  0E1A               	movlw	high __pidataCOMRAM
   105  0019A4  6EF7               	movwf	tblptrh,c
   106  0019A6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   107  0019A8  6EF8               	movwf	tblptru,c
   108  0019AA  0009               	tblrd		*+	;fetch initializer
   109  0019AC  CFF5 F058          	movff	tablat,__pdataCOMRAM
   110  0019B0                     end_of_initialization:
   111                           	opt stack 0
   112  0019B0                     __end_of__initialization:
   113                           	opt stack 0
   114  0019B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  0019B2  6EF8               	movwf	tblptru,c
   116  0019B4  0100               	movlb	0
   117  0019B6  EF51  F00D         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _sensorValue:
   129                           	opt stack 0
   130  00003D                     	ds	8
   131  000045                     _ForwardCounter:
   132                           	opt stack 0
   133  000045                     	ds	2
   134  000047                     _LTurnCounter:
   135                           	opt stack 0
   136  000047                     	ds	2
   137  000049                     _MotorDelayCounter:
   138                           	opt stack 0
   139  000049                     	ds	2
   140  00004B                     _RTurnCounter:
   141                           	opt stack 0
   142  00004B                     	ds	2
   143  00004D                     _ReverseCounter:
   144                           	opt stack 0
   145  00004D                     	ds	2
   146  00004F                     _RotateCounter:
   147                           	opt stack 0
   148  00004F                     	ds	2
   149  000051                     _delay_time:
   150                           	opt stack 0
   151  000051                     	ds	2
   152  000053                     _LMotorCounter:
   153                           	opt stack 0
   154  000053                     	ds	1
   155  000054                     _RMotorCounter:
   156                           	opt stack 0
   157  000054                     	ds	1
   158  000055                     _algorithm:
   159                           	opt stack 0
   160  000055                     	ds	1
   161  000056                     _justTurned:
   162                           	opt stack 0
   163  000056                     	ds	1
   164  000057                     _rotatingSide:
   165                           	opt stack 0
   166  000057                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           tblptrh	equ	0xFF7
   169                           tblptrl	equ	0xFF6
   170                           tablat	equ	0xFF5
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           
   174                           	psect	dataCOMRAM
   175  000058                     __pdataCOMRAM:
   176                           	opt stack 0
   177  000058                     _controllerSteps:
   178                           	opt stack 0
   179  000058                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           
   187                           	psect	cstackBANK0
   188  000080                     __pcstackBANK0:
   189                           	opt stack 0
   190  000080                     sensorComputation@max:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x0
   194  000080                     	ds	2
   195  000082                     sensorComputation@min:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000082                     	ds	2
   200  000084                     sensorComputation@sum:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000084                     	ds	2
   205  000086                     sensorComputation@i:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000086                     	ds	2
   210  000088                     sensorComputation@j:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x8
   214  000088                     	ds	2
   215  00008A                     sensorUpdate@sensorTemp:
   216                           	opt stack 0
   217                           
   218                           ; 80 bytes @ 0xA
   219  00008A                     	ds	80
   220  0000DA                     sensorUpdate@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x5A
   224  0000DA                     	ds	2
   225  0000DC                     sensorUpdate@j:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x5C
   229  0000DC                     	ds	2
   230                           tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	cstackCOMRAM
   238  000001                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000001                     ??_low_isr:
   241  000001                     
   242                           ; 0 bytes @ 0x0
   243  000001                     	ds	17
   244  000012                     ?_ABS:
   245                           	opt stack 0
   246  000012                     motorCounterUpdate@reverse:
   247                           	opt stack 0
   248  000012                     merge@right:
   249                           	opt stack 0
   250  000012                     moveMouse@action:
   251                           	opt stack 0
   252  000012                     ABS@x:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x11
   256  000012                     	ds	1
   257  000013                     motorCounterUpdate@side:
   258                           	opt stack 0
   259  000013                     merge@left:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x12
   263  000013                     	ds	1
   264  000014                     merge@merged:
   265                           	opt stack 0
   266  000014                     rotate@side:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x13
   270  000014                     	ds	1
   271  000015                     ??_KController:
   272                           
   273                           ; 0 bytes @ 0x14
   274  000015                     	ds	2
   275  000017                     KController@correctTo:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000017                     	ds	1
   280  000018                     KController@diff:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     ??_high_isr:
   286                           
   287                           ; 0 bytes @ 0x19
   288  00001A                     	ds	14
   289  000028                     ?___wmul:
   290                           	opt stack 0
   291  000028                     ?___awdiv:
   292                           	opt stack 0
   293  000028                     delay@ms:
   294                           	opt stack 0
   295  000028                     ___wmul@multiplier:
   296                           	opt stack 0
   297  000028                     ___awdiv@dividend:
   298                           	opt stack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_delay:
   303  00002A                     ___wmul@multiplicand:
   304                           	opt stack 0
   305  00002A                     ___awdiv@divisor:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x29
   309  00002A                     	ds	1
   310  00002B                     delay@x:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2A
   314  00002B                     	ds	1
   315  00002C                     ___awdiv@counter:
   316                           	opt stack 0
   317  00002C                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x2B
   321  00002C                     	ds	1
   322  00002D                     ___awdiv@sign:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x2C
   326  00002D                     	ds	1
   327  00002E                     ?_MIN:
   328                           	opt stack 0
   329  00002E                     ?_MAX:
   330                           	opt stack 0
   331  00002E                     MIN@a:
   332                           	opt stack 0
   333  00002E                     MAX@a:
   334                           	opt stack 0
   335  00002E                     ___awdiv@quotient:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x2D
   339  00002E                     	ds	2
   340  000030                     MIN@b:
   341                           	opt stack 0
   342  000030                     MAX@b:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2F
   346  000030                     	ds	2
   347  000032                     ??_MIN:
   348  000032                     ??_MAX:
   349                           
   350                           ; 0 bytes @ 0x31
   351  000032                     	ds	1
   352  000033                     sensorComputation@sensorTemp:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x32
   356  000033                     	ds	2
   357  000035                     ??_sensorComputation:
   358                           
   359                           ; 0 bytes @ 0x34
   360  000035                     	ds	2
   361  000037                     ??_sensorUpdate:
   362                           
   363                           ; 0 bytes @ 0x36
   364  000037                     	ds	6
   365  00003D                     tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           ; 0 bytes @ 0x3C
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 41 in file "main.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;		None               void
   385 ;; Registers used:
   386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    7
   398 ;; This function calls:
   399 ;;		_ConfigureOscillator
   400 ;;		_InitApp
   401 ;;		_sensorUpdate
   402 ;; This function is called by:
   403 ;;		Startup code after reset
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text0
   408  001AA2                     __ptext0:
   409                           	opt stack 0
   410  001AA2                     _main:
   411                           	opt stack 24
   412                           
   413                           ;main.c: 44: ConfigureOscillator();
   414                           
   415                           ;incstack = 0
   416  001AA2  EC63  F00D         	call	_ConfigureOscillator	;wreg free
   417                           
   418                           ;main.c: 47: InitApp();
   419  001AA6  EC73  F00C         	call	_InitApp	;wreg free
   420  001AAA  D000               	goto	l1811
   421  001AAC                     l1811:
   422                           
   423                           ;main.c: 50: {
   424                           ;main.c: 51: sensorUpdate();
   425  001AAC  EC5B  F00A         	call	_sensorUpdate	;wreg free
   426  001AB0  D7FD               	goto	l1811
   427  001AB2  EF51  F000         	goto	start
   428  001AB6                     __end_of_main:
   429                           	opt stack 0
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437 ;; *************** function _sensorUpdate *****************
   438 ;; Defined at:
   439 ;;		line 146 in file "user.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  sensorTemp     80   10[BANK0 ] int [10][4]
   444 ;;  j               2   92[BANK0 ] int 
   445 ;;  i               2   90[BANK0 ] int 
   446 ;; Return value:  Size  Location     Type
   447 ;;		None               void
   448 ;; Registers used:
   449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   456 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   457 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;Total ram usage:       90 bytes
   460 ;; Hardware stack levels used:    1
   461 ;; Hardware stack levels required when called:    6
   462 ;; This function calls:
   463 ;;		___wmul
   464 ;;		_sensorComputation
   465 ;; This function is called by:
   466 ;;		_main
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           	psect	text1
   471  0014B6                     __ptext1:
   472                           	opt stack 0
   473  0014B6                     _sensorUpdate:
   474                           	opt stack 24
   475                           
   476                           ;user.c: 148: int i,j;
   477                           ;user.c: 149: int sensorTemp[4][10];
   478                           ;user.c: 152: for(i = 0; i < 10; i++)
   479                           
   480                           ;incstack = 0
   481  0014B6  0E00               	movlw	0
   482  0014B8  0100               	movlb	0	; () banked
   483  0014BA  6FDB               	movwf	(sensorUpdate@i+1)& (0+255),b
   484  0014BC  0E00               	movlw	0
   485  0014BE  6FDA               	movwf	sensorUpdate@i& (0+255),b
   486                           
   487                           ; BSR set to: 0
   488  0014C0  0100               	movlb	0	; () banked
   489  0014C2  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   490  0014C4  D00A               	goto	l1777
   491  0014C6  0100               	movlb	0	; () banked
   492  0014C8  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   493  0014CA  E106               	bnz	u1500
   494  0014CC  0E0A               	movlw	10
   495  0014CE  0100               	movlb	0	; () banked
   496  0014D0  5DDA               	subwf	sensorUpdate@i& (0+255),w,b
   497  0014D2  B0D8               	btfsc	status,0,c
   498  0014D4  D0CF               	goto	l1805
   499  0014D6  D001               	goto	l1777
   500  0014D8                     u1500:
   501                           
   502                           ; BSR set to: 0
   503  0014D8  D0CD               	goto	l1805
   504  0014DA                     l1777:
   505                           
   506                           ; BSR set to: 0
   507                           ;user.c: 153: {
   508                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   509  0014DA  0E00               	movlw	0
   510  0014DC  0100               	movlb	0	; () banked
   511  0014DE  6FDD               	movwf	(sensorUpdate@j+1)& (0+255),b
   512  0014E0  0E00               	movlw	0
   513  0014E2  6FDC               	movwf	sensorUpdate@j& (0+255),b
   514                           
   515                           ; BSR set to: 0
   516  0014E4  0100               	movlb	0	; () banked
   517  0014E6  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   518  0014E8  D00A               	goto	l1783
   519  0014EA  0100               	movlb	0	; () banked
   520  0014EC  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   521  0014EE  E106               	bnz	u1510
   522  0014F0  0E04               	movlw	4
   523  0014F2  0100               	movlb	0	; () banked
   524  0014F4  5DDC               	subwf	sensorUpdate@j& (0+255),w,b
   525  0014F6  B0D8               	btfsc	status,0,c
   526  0014F8  D0B2               	goto	l1801
   527  0014FA  D001               	goto	l1783
   528  0014FC                     u1510:
   529                           
   530                           ; BSR set to: 0
   531  0014FC  D0B0               	goto	l1801
   532  0014FE                     l1783:
   533                           
   534                           ; BSR set to: 0
   535                           ;user.c: 155: {
   536                           ;user.c: 156: ADCON0 = sensorLocation[j];
   537  0014FE  0E05               	movlw	low _sensorLocation
   538  001500  0100               	movlb	0	; () banked
   539  001502  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   540  001504  6EF6               	movwf	tblptrl,c
   541  001506  0E10               	movlw	high _sensorLocation
   542  001508  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   543  00150A  6EF7               	movwf	tblptrh,c
   544  00150C                     	if	0	;There are less than 3 active tblptr bytes
   545  00150C                     	endif
   546  00150C  0008               	tblrd		*
   547  00150E  CFF5 FFC2          	movff	tablat,4034	;volatile
   548                           
   549                           ; BSR set to: 0
   550                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   551  001512  82C2               	bsf	4034,1,c	;volatile
   552                           
   553                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   554  001514  D000               	goto	l264
   555  001516                     l264:
   556  001516  B2C2               	btfsc	4034,1,c	;volatile
   557  001518  D7FE               	goto	l264
   558                           
   559                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   560  00151A  CFC3 F037          	movff	4035,??_sensorUpdate	;volatile
   561  00151E  0E06               	movlw	6
   562  001520  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   563  001522                     u1535:
   564  001522  90D8               	bcf	status,0,c
   565  001524  3237               	rrcf	??_sensorUpdate,f,c
   566  001526  2E38               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   567  001528  D7FC               	goto	u1535
   568  00152A  5037               	movf	??_sensorUpdate,w,c
   569  00152C  CFC4 F039          	movff	4036,??_sensorUpdate+2	;volatile
   570  001530  6A3A               	clrf	(??_sensorUpdate+3)& (0+255),c
   571  001532  90D8               	bcf	status,0,c
   572  001534  3639               	rlcf	??_sensorUpdate+2,f,c
   573  001536  363A               	rlcf	??_sensorUpdate+3,f,c
   574  001538  90D8               	bcf	status,0,c
   575  00153A  3639               	rlcf	??_sensorUpdate+2,f,c
   576  00153C  363A               	rlcf	??_sensorUpdate+3,f,c
   577  00153E  2639               	addwf	??_sensorUpdate+2,f,c
   578  001540  0E00               	movlw	0
   579  001542  223A               	addwfc	??_sensorUpdate+3,f,c
   580  001544  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   581  001548  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   582  00154C  0E00               	movlw	0
   583  00154E  6E2B               	movwf	___wmul@multiplicand+1,c
   584  001550  0E14               	movlw	20
   585  001552  6E2A               	movwf	___wmul@multiplicand,c
   586  001554  ECDD  F00C         	call	___wmul	;wreg free
   587  001558  0E8A               	movlw	low sensorUpdate@sensorTemp
   588  00155A  6E3B               	movwf	(??_sensorUpdate+4)& (0+255),c
   589  00155C  0E00               	movlw	high sensorUpdate@sensorTemp
   590  00155E  6E3C               	movwf	(??_sensorUpdate+5)& (0+255),c
   591  001560  5028               	movf	?___wmul,w,c
   592  001562  263B               	addwf	??_sensorUpdate+4,f,c
   593  001564  5029               	movf	?___wmul+1,w,c
   594  001566  223C               	addwfc	??_sensorUpdate+5,f,c
   595  001568  90D8               	bcf	status,0,c
   596  00156A  0100               	movlb	0	; () banked
   597  00156C  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   598  00156E  6ED9               	movwf	fsr2l,c
   599  001570  0100               	movlb	0	; () banked
   600  001572  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  001574  6EDA               	movwf	fsr2h,c
   602  001576  503B               	movf	??_sensorUpdate+4,w,c
   603  001578  26D9               	addwf	fsr2l,f,c
   604  00157A  503C               	movf	??_sensorUpdate+5,w,c
   605  00157C  22DA               	addwfc	fsr2h,f,c
   606  00157E  C039  FFDE         	movff	??_sensorUpdate+2,postinc2
   607  001582  C03A  FFDD         	movff	??_sensorUpdate+3,postdec2
   608                           
   609                           ; BSR set to: 0
   610                           ;user.c: 163: if(j == 0 || j == 3)
   611  001586  0100               	movlb	0	; () banked
   612  001588  51DC               	movf	sensorUpdate@j& (0+255),w,b
   613  00158A  0100               	movlb	0	; () banked
   614  00158C  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   615  00158E  B4D8               	btfsc	status,2,c
   616  001590  D007               	goto	l1793
   617                           
   618                           ; BSR set to: 0
   619  001592  0E03               	movlw	3
   620  001594  0100               	movlb	0	; () banked
   621  001596  19DC               	xorwf	sensorUpdate@j& (0+255),w,b
   622  001598  0100               	movlb	0	; () banked
   623  00159A  11DD               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   624  00159C  A4D8               	btfss	status,2,c
   625  00159E  D02A               	goto	l1795
   626  0015A0                     l1793:
   627                           
   628                           ; BSR set to: 0
   629                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   630  0015A0  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   631  0015A4  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   632  0015A8  0E00               	movlw	0
   633  0015AA  6E2B               	movwf	___wmul@multiplicand+1,c
   634  0015AC  0E14               	movlw	20
   635  0015AE  6E2A               	movwf	___wmul@multiplicand,c
   636  0015B0  ECDD  F00C         	call	___wmul	;wreg free
   637  0015B4  0E8A               	movlw	low sensorUpdate@sensorTemp
   638  0015B6  6E37               	movwf	??_sensorUpdate& (0+255),c
   639  0015B8  0E00               	movlw	high sensorUpdate@sensorTemp
   640  0015BA  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   641  0015BC  5028               	movf	?___wmul,w,c
   642  0015BE  2637               	addwf	??_sensorUpdate,f,c
   643  0015C0  5029               	movf	?___wmul+1,w,c
   644  0015C2  2238               	addwfc	??_sensorUpdate+1,f,c
   645  0015C4  90D8               	bcf	status,0,c
   646  0015C6  0100               	movlb	0	; () banked
   647  0015C8  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   648  0015CA  6ED9               	movwf	fsr2l,c
   649  0015CC  0100               	movlb	0	; () banked
   650  0015CE  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   651  0015D0  6EDA               	movwf	fsr2h,c
   652  0015D2  5037               	movf	??_sensorUpdate,w,c
   653  0015D4  26D9               	addwf	fsr2l,f,c
   654  0015D6  5038               	movf	??_sensorUpdate+1,w,c
   655  0015D8  22DA               	addwfc	fsr2h,f,c
   656  0015DA  0E01               	movlw	low _sensorCorrection
   657  0015DC  0100               	movlb	0	; () banked
   658  0015DE  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   659  0015E0  6EF6               	movwf	tblptrl,c
   660  0015E2  0E10               	movlw	high _sensorCorrection
   661  0015E4  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   662  0015E6  6EF7               	movwf	tblptrh,c
   663  0015E8                     	if	0	;There are less than 3 active tblptr bytes
   664  0015E8                     	endif
   665  0015E8  0008               	tblrd		*
   666  0015EA  50F5               	movf	tablat,w,c
   667  0015EC  5EDE               	subwf	postinc2,f,c
   668  0015EE  0E00               	movlw	0
   669  0015F0  5ADD               	subwfb	postdec2,f,c
   670  0015F2  D02A               	goto	l1797
   671  0015F4                     l1795:
   672                           
   673                           ; BSR set to: 0
   674                           ;user.c: 165: else
   675                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   676  0015F4  C0DC  F028         	movff	sensorUpdate@j,___wmul@multiplier
   677  0015F8  C0DD  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   678  0015FC  0E00               	movlw	0
   679  0015FE  6E2B               	movwf	___wmul@multiplicand+1,c
   680  001600  0E14               	movlw	20
   681  001602  6E2A               	movwf	___wmul@multiplicand,c
   682  001604  ECDD  F00C         	call	___wmul	;wreg free
   683  001608  0E8A               	movlw	low sensorUpdate@sensorTemp
   684  00160A  6E37               	movwf	??_sensorUpdate& (0+255),c
   685  00160C  0E00               	movlw	high sensorUpdate@sensorTemp
   686  00160E  6E38               	movwf	(??_sensorUpdate+1)& (0+255),c
   687  001610  5028               	movf	?___wmul,w,c
   688  001612  2637               	addwf	??_sensorUpdate,f,c
   689  001614  5029               	movf	?___wmul+1,w,c
   690  001616  2238               	addwfc	??_sensorUpdate+1,f,c
   691  001618  90D8               	bcf	status,0,c
   692  00161A  0100               	movlb	0	; () banked
   693  00161C  35DA               	rlcf	sensorUpdate@i& (0+255),w,b
   694  00161E  6ED9               	movwf	fsr2l,c
   695  001620  0100               	movlb	0	; () banked
   696  001622  35DB               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   697  001624  6EDA               	movwf	fsr2h,c
   698  001626  5037               	movf	??_sensorUpdate,w,c
   699  001628  26D9               	addwf	fsr2l,f,c
   700  00162A  5038               	movf	??_sensorUpdate+1,w,c
   701  00162C  22DA               	addwfc	fsr2h,f,c
   702  00162E  0E01               	movlw	low _sensorCorrection
   703  001630  0100               	movlb	0	; () banked
   704  001632  25DC               	addwf	sensorUpdate@j& (0+255),w,b
   705  001634  6EF6               	movwf	tblptrl,c
   706  001636  0E10               	movlw	high _sensorCorrection
   707  001638  21DD               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   708  00163A  6EF7               	movwf	tblptrh,c
   709  00163C                     	if	0	;There are less than 3 active tblptr bytes
   710  00163C                     	endif
   711  00163C  0008               	tblrd		*
   712  00163E  50F5               	movf	tablat,w,c
   713  001640  26DE               	addwf	postinc2,f,c
   714  001642  0E00               	movlw	0
   715  001644  22DD               	addwfc	postdec2,f,c
   716  001646  D000               	goto	l1797
   717  001648                     l1797:
   718                           
   719                           ; BSR set to: 0
   720  001648  0100               	movlb	0	; () banked
   721  00164A  4BDC               	infsnz	sensorUpdate@j& (0+255),f,b
   722  00164C  2BDD               	incf	(sensorUpdate@j+1)& (0+255),f,b
   723                           
   724                           ; BSR set to: 0
   725  00164E  0100               	movlb	0	; () banked
   726  001650  BFDD               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   727  001652  D755               	goto	l1783
   728  001654  0100               	movlb	0	; () banked
   729  001656  51DD               	movf	(sensorUpdate@j+1)& (0+255),w,b
   730  001658  E102               	bnz	l1801
   731  00165A  D74A               	goto	L1
   732  00165C  D000               	goto	l1801
   733  00165E                     l1801:
   734                           
   735                           ; BSR set to: 0
   736  00165E  0100               	movlb	0	; () banked
   737  001660  4BDA               	infsnz	sensorUpdate@i& (0+255),f,b
   738  001662  2BDB               	incf	(sensorUpdate@i+1)& (0+255),f,b
   739                           
   740                           ; BSR set to: 0
   741  001664  0100               	movlb	0	; () banked
   742  001666  BFDB               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   743  001668  D738               	goto	l1777
   744  00166A  0100               	movlb	0	; () banked
   745  00166C  51DB               	movf	(sensorUpdate@i+1)& (0+255),w,b
   746  00166E  E102               	bnz	l1805
   747  001670  D72D               	goto	L2
   748  001672  D000               	goto	l1805
   749  001674                     l1805:
   750                           
   751                           ; BSR set to: 0
   752                           ;user.c: 167: }
   753                           ;user.c: 168: }
   754                           ;user.c: 171: sensorComputation(sensorTemp);
   755  001674  0E8A               	movlw	low sensorUpdate@sensorTemp
   756  001676  6E33               	movwf	sensorComputation@sensorTemp,c
   757  001678  0E00               	movlw	high sensorUpdate@sensorTemp
   758  00167A  6E34               	movwf	sensorComputation@sensorTemp+1,c
   759  00167C  EC45  F009         	call	_sensorComputation	;wreg free
   760  001680  0012               	return		;funcret
   761  001682                     __end_of_sensorUpdate:
   762                           	opt stack 0
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postinc2	equ	0xFDE
   770                           postdec2	equ	0xFDD
   771                           fsr2h	equ	0xFDA
   772                           fsr2l	equ	0xFD9
   773                           status	equ	0xFD8
   774                           
   775 ;; *************** function _sensorComputation *****************
   776 ;; Defined at:
   777 ;;		line 125 in file "user.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   780 ;;		 -> sensorUpdate@sensorTemp(80), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  j               2    8[BANK0 ] int 
   783 ;;  i               2    6[BANK0 ] int 
   784 ;;  sum             2    4[BANK0 ] int 
   785 ;;  min             2    2[BANK0 ] int 
   786 ;;  max             2    0[BANK0 ] int 
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       14 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    5
   803 ;; This function calls:
   804 ;;		_MAX
   805 ;;		_MIN
   806 ;;		___awdiv
   807 ;;		___wmul
   808 ;; This function is called by:
   809 ;;		_sensorUpdate
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814  00128A                     __ptext2:
   815                           	opt stack 0
   816  00128A                     _sensorComputation:
   817                           	opt stack 24
   818                           
   819                           ;user.c: 127: int max,min,i,j,sum;
   820                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   821                           
   822                           ;incstack = 0
   823  00128A  0E00               	movlw	0
   824  00128C  0100               	movlb	0	; () banked
   825  00128E  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   826  001290  0E00               	movlw	0
   827  001292  6F86               	movwf	sensorComputation@i& (0+255),b
   828                           
   829                           ; BSR set to: 0
   830  001294  0100               	movlb	0	; () banked
   831  001296  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   832  001298  D00A               	goto	l1747
   833  00129A  0100               	movlb	0	; () banked
   834  00129C  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   835  00129E  E106               	bnz	u1450
   836  0012A0  0E04               	movlw	4
   837  0012A2  0100               	movlb	0	; () banked
   838  0012A4  5D86               	subwf	sensorComputation@i& (0+255),w,b
   839  0012A6  B0D8               	btfsc	status,0,c
   840  0012A8  D105               	goto	l257
   841  0012AA  D001               	goto	l1747
   842  0012AC                     u1450:
   843                           
   844                           ; BSR set to: 0
   845  0012AC  D103               	goto	l257
   846  0012AE                     l1747:
   847                           
   848                           ; BSR set to: 0
   849                           ;user.c: 129: {
   850                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   851  0012AE  0E00               	movlw	0
   852  0012B0  0100               	movlb	0	; () banked
   853  0012B2  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   854  0012B4  0E00               	movlw	0
   855  0012B6  6F88               	movwf	sensorComputation@j& (0+255),b
   856                           
   857                           ; BSR set to: 0
   858  0012B8  0100               	movlb	0	; () banked
   859  0012BA  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   860  0012BC  D00A               	goto	l1753
   861  0012BE  0100               	movlb	0	; () banked
   862  0012C0  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   863  0012C2  E106               	bnz	u1460
   864  0012C4  0E0A               	movlw	10
   865  0012C6  0100               	movlb	0	; () banked
   866  0012C8  5D88               	subwf	sensorComputation@j& (0+255),w,b
   867  0012CA  B0D8               	btfsc	status,0,c
   868  0012CC  D0B7               	goto	l1763
   869  0012CE  D001               	goto	l1753
   870  0012D0                     u1460:
   871                           
   872                           ; BSR set to: 0
   873  0012D0  D0B5               	goto	l1763
   874  0012D2                     l1753:
   875                           
   876                           ; BSR set to: 0
   877                           ;user.c: 131: {
   878                           ;user.c: 132: if(j == 0)
   879  0012D2  0100               	movlb	0	; () banked
   880  0012D4  5188               	movf	sensorComputation@j& (0+255),w,b
   881  0012D6  0100               	movlb	0	; () banked
   882  0012D8  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   883  0012DA  A4D8               	btfss	status,2,c
   884  0012DC  D02A               	goto	l1757
   885                           
   886                           ; BSR set to: 0
   887                           ;user.c: 133: {
   888                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   889  0012DE  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   890  0012E2  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   891  0012E6  0E00               	movlw	0
   892  0012E8  6E2B               	movwf	___wmul@multiplicand+1,c
   893  0012EA  0E14               	movlw	20
   894  0012EC  6E2A               	movwf	___wmul@multiplicand,c
   895  0012EE  ECDD  F00C         	call	___wmul	;wreg free
   896  0012F2  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   897  0012F6  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   898  0012FA  5028               	movf	?___wmul,w,c
   899  0012FC  2635               	addwf	??_sensorComputation,f,c
   900  0012FE  5029               	movf	?___wmul+1,w,c
   901  001300  2236               	addwfc	??_sensorComputation+1,f,c
   902  001302  90D8               	bcf	status,0,c
   903  001304  0100               	movlb	0	; () banked
   904  001306  3588               	rlcf	sensorComputation@j& (0+255),w,b
   905  001308  6ED9               	movwf	fsr2l,c
   906  00130A  0100               	movlb	0	; () banked
   907  00130C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   908  00130E  6EDA               	movwf	fsr2h,c
   909  001310  5035               	movf	??_sensorComputation,w,c
   910  001312  26D9               	addwf	fsr2l,f,c
   911  001314  5036               	movf	??_sensorComputation+1,w,c
   912  001316  22DA               	addwfc	fsr2h,f,c
   913  001318  CFDE F080          	movff	postinc2,sensorComputation@max
   914  00131C  CFDD F081          	movff	postdec2,sensorComputation@max+1
   915  001320  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   916  001324  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   917  001328  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   918  00132C  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   919                           
   920                           ;user.c: 135: continue;
   921  001330  D07A               	goto	l1759
   922  001332                     l1757:
   923                           
   924                           ; BSR set to: 0
   925                           ;user.c: 136: }
   926                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   927  001332  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   928  001336  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   929  00133A  0E00               	movlw	0
   930  00133C  6E2B               	movwf	___wmul@multiplicand+1,c
   931  00133E  0E14               	movlw	20
   932  001340  6E2A               	movwf	___wmul@multiplicand,c
   933  001342  ECDD  F00C         	call	___wmul	;wreg free
   934  001346  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   935  00134A  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   936  00134E  5028               	movf	?___wmul,w,c
   937  001350  2635               	addwf	??_sensorComputation,f,c
   938  001352  5029               	movf	?___wmul+1,w,c
   939  001354  2236               	addwfc	??_sensorComputation+1,f,c
   940  001356  90D8               	bcf	status,0,c
   941  001358  0100               	movlb	0	; () banked
   942  00135A  3588               	rlcf	sensorComputation@j& (0+255),w,b
   943  00135C  6ED9               	movwf	fsr2l,c
   944  00135E  0100               	movlb	0	; () banked
   945  001360  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   946  001362  6EDA               	movwf	fsr2h,c
   947  001364  5035               	movf	??_sensorComputation,w,c
   948  001366  26D9               	addwf	fsr2l,f,c
   949  001368  5036               	movf	??_sensorComputation+1,w,c
   950  00136A  22DA               	addwfc	fsr2h,f,c
   951  00136C  CFDE F02E          	movff	postinc2,MIN@a
   952  001370  CFDD F02F          	movff	postdec2,MIN@a+1
   953  001374  C082  F030         	movff	sensorComputation@min,MIN@b
   954  001378  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   955  00137C  ECF1  F00C         	call	_MIN	;wreg free
   956  001380  C02E  F082         	movff	?_MIN,sensorComputation@min
   957  001384  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   958                           
   959                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   960  001388  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   961  00138C  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   962  001390  0E00               	movlw	0
   963  001392  6E2B               	movwf	___wmul@multiplicand+1,c
   964  001394  0E14               	movlw	20
   965  001396  6E2A               	movwf	___wmul@multiplicand,c
   966  001398  ECDD  F00C         	call	___wmul	;wreg free
   967  00139C  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   968  0013A0  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   969  0013A4  5028               	movf	?___wmul,w,c
   970  0013A6  2635               	addwf	??_sensorComputation,f,c
   971  0013A8  5029               	movf	?___wmul+1,w,c
   972  0013AA  2236               	addwfc	??_sensorComputation+1,f,c
   973  0013AC  90D8               	bcf	status,0,c
   974  0013AE  0100               	movlb	0	; () banked
   975  0013B0  3588               	rlcf	sensorComputation@j& (0+255),w,b
   976  0013B2  6ED9               	movwf	fsr2l,c
   977  0013B4  0100               	movlb	0	; () banked
   978  0013B6  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   979  0013B8  6EDA               	movwf	fsr2h,c
   980  0013BA  5035               	movf	??_sensorComputation,w,c
   981  0013BC  26D9               	addwf	fsr2l,f,c
   982  0013BE  5036               	movf	??_sensorComputation+1,w,c
   983  0013C0  22DA               	addwfc	fsr2h,f,c
   984  0013C2  CFDE F02E          	movff	postinc2,MAX@a
   985  0013C6  CFDD F02F          	movff	postdec2,MAX@a+1
   986  0013CA  C080  F030         	movff	sensorComputation@max,MAX@b
   987  0013CE  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
   988  0013D2  EC05  F00D         	call	_MAX	;wreg free
   989  0013D6  C02E  F080         	movff	?_MAX,sensorComputation@max
   990  0013DA  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
   991                           
   992                           ;user.c: 139: sum += sensorTemp[i][j];
   993  0013DE  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   994  0013E2  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   995  0013E6  0E00               	movlw	0
   996  0013E8  6E2B               	movwf	___wmul@multiplicand+1,c
   997  0013EA  0E14               	movlw	20
   998  0013EC  6E2A               	movwf	___wmul@multiplicand,c
   999  0013EE  ECDD  F00C         	call	___wmul	;wreg free
  1000  0013F2  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1001  0013F6  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1002  0013FA  5028               	movf	?___wmul,w,c
  1003  0013FC  2635               	addwf	??_sensorComputation,f,c
  1004  0013FE  5029               	movf	?___wmul+1,w,c
  1005  001400  2236               	addwfc	??_sensorComputation+1,f,c
  1006  001402  90D8               	bcf	status,0,c
  1007  001404  0100               	movlb	0	; () banked
  1008  001406  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1009  001408  6ED9               	movwf	fsr2l,c
  1010  00140A  0100               	movlb	0	; () banked
  1011  00140C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1012  00140E  6EDA               	movwf	fsr2h,c
  1013  001410  5035               	movf	??_sensorComputation,w,c
  1014  001412  26D9               	addwf	fsr2l,f,c
  1015  001414  5036               	movf	??_sensorComputation+1,w,c
  1016  001416  22DA               	addwfc	fsr2h,f,c
  1017  001418  50DE               	movf	postinc2,w,c
  1018  00141A  0100               	movlb	0	; () banked
  1019  00141C  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1020  00141E  50DD               	movf	postdec2,w,c
  1021  001420  0100               	movlb	0	; () banked
  1022  001422  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1023  001424  D000               	goto	l1759
  1024  001426                     l1759:
  1025                           
  1026                           ; BSR set to: 0
  1027  001426  0100               	movlb	0	; () banked
  1028  001428  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1029  00142A  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1030                           
  1031                           ; BSR set to: 0
  1032  00142C  0100               	movlb	0	; () banked
  1033  00142E  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1034  001430  D750               	goto	l1753
  1035  001432  0100               	movlb	0	; () banked
  1036  001434  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1037  001436  E102               	bnz	l1763
  1038  001438  D745               	goto	L3
  1039  00143A  D000               	goto	l1763
  1040  00143C                     l1763:
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;user.c: 140: }
  1044                           ;user.c: 141: sum = sum - min - max;
  1045  00143C  0100               	movlb	0	; () banked
  1046  00143E  5180               	movf	sensorComputation@max& (0+255),w,b
  1047  001440  0100               	movlb	0	; () banked
  1048  001442  2582               	addwf	sensorComputation@min& (0+255),w,b
  1049  001444  6E35               	movwf	??_sensorComputation& (0+255),c
  1050  001446  0100               	movlb	0	; () banked
  1051  001448  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1052  00144A  0100               	movlb	0	; () banked
  1053  00144C  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1054  00144E  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1055  001450  1E35               	comf	??_sensorComputation,f,c
  1056  001452  1E36               	comf	??_sensorComputation+1,f,c
  1057  001454  4A35               	infsnz	??_sensorComputation,f,c
  1058  001456  2A36               	incf	??_sensorComputation+1,f,c
  1059  001458  0100               	movlb	0	; () banked
  1060  00145A  5184               	movf	sensorComputation@sum& (0+255),w,b
  1061  00145C  2435               	addwf	??_sensorComputation,w,c
  1062  00145E  0100               	movlb	0	; () banked
  1063  001460  6F84               	movwf	sensorComputation@sum& (0+255),b
  1064  001462  0100               	movlb	0	; () banked
  1065  001464  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1066  001466  2036               	addwfc	??_sensorComputation+1,w,c
  1067  001468  0100               	movlb	0	; () banked
  1068  00146A  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1072  00146C  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1073  001470  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1074  001474  0E00               	movlw	0
  1075  001476  6E2B               	movwf	___awdiv@divisor+1,c
  1076  001478  0E08               	movlw	8
  1077  00147A  6E2A               	movwf	___awdiv@divisor,c
  1078  00147C  EC28  F00C         	call	___awdiv	;wreg free
  1079  001480  90D8               	bcf	status,0,c
  1080  001482  0100               	movlb	0	; () banked
  1081  001484  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1082  001486  6ED9               	movwf	fsr2l,c
  1083  001488  0100               	movlb	0	; () banked
  1084  00148A  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1085  00148C  6EDA               	movwf	fsr2h,c
  1086  00148E  0E3D               	movlw	low _sensorValue
  1087  001490  26D9               	addwf	fsr2l,f,c
  1088  001492  0E00               	movlw	high _sensorValue
  1089  001494  22DA               	addwfc	fsr2h,f,c
  1090  001496  C028  FFDE         	movff	?___awdiv,postinc2
  1091  00149A  C029  FFDD         	movff	?___awdiv+1,postdec2
  1092                           
  1093                           ; BSR set to: 0
  1094  00149E  0100               	movlb	0	; () banked
  1095  0014A0  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1096  0014A2  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1097                           
  1098                           ; BSR set to: 0
  1099  0014A4  0100               	movlb	0	; () banked
  1100  0014A6  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1101  0014A8  D702               	goto	l1747
  1102  0014AA  0100               	movlb	0	; () banked
  1103  0014AC  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1104  0014AE  E102               	bnz	l257
  1105  0014B0  D6F7               	goto	L4
  1106  0014B2  D000               	goto	l257
  1107  0014B4                     l257:
  1108                           
  1109                           ; BSR set to: 0
  1110  0014B4  0012               	return		;funcret
  1111  0014B6                     __end_of_sensorComputation:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc2	equ	0xFDE
  1120                           postdec2	equ	0xFDD
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function ___wmul *****************
  1126 ;; Defined at:
  1127 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  multiplier      2   39[COMRAM] unsigned int 
  1130 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  product         2   43[COMRAM] unsigned int 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   39[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, prodl, prodh
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    4
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_sensorComputation
  1153 ;;		_sensorUpdate
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  0019BA                     __ptext3:
  1159                           	opt stack 0
  1160  0019BA                     ___wmul:
  1161                           	opt stack 24
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  0019BA  5028               	movf	___wmul@multiplier,w,c
  1166  0019BC  022A               	mulwf	___wmul@multiplicand,c
  1167  0019BE  CFF3 F02C          	movff	prodl,___wmul@product
  1168  0019C2  CFF4 F02D          	movff	prodh,___wmul@product+1
  1169  0019C6  5028               	movf	___wmul@multiplier,w,c
  1170  0019C8  022B               	mulwf	___wmul@multiplicand+1,c
  1171  0019CA  50F3               	movf	prodl,w,c
  1172  0019CC  262D               	addwf	___wmul@product+1,f,c
  1173  0019CE  5029               	movf	___wmul@multiplier+1,w,c
  1174  0019D0  022A               	mulwf	___wmul@multiplicand,c
  1175  0019D2  50F3               	movf	prodl,w,c
  1176  0019D4  262D               	addwf	___wmul@product+1,f,c
  1177  0019D6  C02C  F028         	movff	___wmul@product,?___wmul
  1178  0019DA  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1179  0019DE  D000               	goto	l282
  1180  0019E0                     l282:
  1181  0019E0  0012               	return		;funcret
  1182  0019E2                     __end_of___wmul:
  1183                           	opt stack 0
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           prodh	equ	0xFF4
  1189                           prodl	equ	0xFF3
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198 ;; *************** function ___awdiv *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        2   39[COMRAM] int 
  1203 ;;  divisor         2   41[COMRAM] int 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  quotient        2   45[COMRAM] int 
  1206 ;;  sign            1   44[COMRAM] unsigned char 
  1207 ;;  counter         1   43[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] int 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        8 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    4
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_sensorComputation
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  001850                     __ptext4:
  1233                           	opt stack 0
  1234  001850                     ___awdiv:
  1235                           	opt stack 24
  1236                           
  1237                           ;incstack = 0
  1238  001850  0E00               	movlw	0
  1239  001852  6E2D               	movwf	___awdiv@sign,c
  1240  001854  AE2B               	btfss	___awdiv@divisor+1,7,c
  1241  001856  D007               	goto	l1705
  1242  001858  6C2A               	negf	___awdiv@divisor,c
  1243  00185A  1E2B               	comf	___awdiv@divisor+1,f,c
  1244  00185C  B0D8               	btfsc	status,0,c
  1245  00185E  2A2B               	incf	___awdiv@divisor+1,f,c
  1246  001860  0E01               	movlw	1
  1247  001862  6E2D               	movwf	___awdiv@sign,c
  1248  001864  D000               	goto	l1705
  1249  001866                     l1705:
  1250  001866  AE29               	btfss	___awdiv@dividend+1,7,c
  1251  001868  D007               	goto	l1711
  1252  00186A  6C28               	negf	___awdiv@dividend,c
  1253  00186C  1E29               	comf	___awdiv@dividend+1,f,c
  1254  00186E  B0D8               	btfsc	status,0,c
  1255  001870  2A29               	incf	___awdiv@dividend+1,f,c
  1256  001872  0E01               	movlw	1
  1257  001874  1A2D               	xorwf	___awdiv@sign,f,c
  1258  001876  D000               	goto	l1711
  1259  001878                     l1711:
  1260  001878  0E00               	movlw	0
  1261  00187A  6E2F               	movwf	___awdiv@quotient+1,c
  1262  00187C  0E00               	movlw	0
  1263  00187E  6E2E               	movwf	___awdiv@quotient,c
  1264  001880  502A               	movf	___awdiv@divisor,w,c
  1265  001882  102B               	iorwf	___awdiv@divisor+1,w,c
  1266  001884  B4D8               	btfsc	status,2,c
  1267  001886  D021               	goto	l1733
  1268  001888  0E01               	movlw	1
  1269  00188A  6E2C               	movwf	___awdiv@counter,c
  1270  00188C  D005               	goto	l1719
  1271  00188E                     l1717:
  1272  00188E  90D8               	bcf	status,0,c
  1273  001890  362A               	rlcf	___awdiv@divisor,f,c
  1274  001892  362B               	rlcf	___awdiv@divisor+1,f,c
  1275  001894  2A2C               	incf	___awdiv@counter,f,c
  1276  001896  D000               	goto	l1719
  1277  001898                     l1719:
  1278  001898  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1279  00189A  D002               	goto	l1721
  1280  00189C  D7F8               	goto	l1717
  1281  00189E  D000               	goto	l1721
  1282  0018A0                     l1721:
  1283  0018A0  90D8               	bcf	status,0,c
  1284  0018A2  362E               	rlcf	___awdiv@quotient,f,c
  1285  0018A4  362F               	rlcf	___awdiv@quotient+1,f,c
  1286  0018A6  502A               	movf	___awdiv@divisor,w,c
  1287  0018A8  5C28               	subwf	___awdiv@dividend,w,c
  1288  0018AA  502B               	movf	___awdiv@divisor+1,w,c
  1289  0018AC  5829               	subwfb	___awdiv@dividend+1,w,c
  1290  0018AE  A0D8               	btfss	status,0,c
  1291  0018B0  D006               	goto	l1729
  1292  0018B2  502A               	movf	___awdiv@divisor,w,c
  1293  0018B4  5E28               	subwf	___awdiv@dividend,f,c
  1294  0018B6  502B               	movf	___awdiv@divisor+1,w,c
  1295  0018B8  5A29               	subwfb	___awdiv@dividend+1,f,c
  1296  0018BA  802E               	bsf	___awdiv@quotient,0,c
  1297  0018BC  D000               	goto	l1729
  1298  0018BE                     l1729:
  1299  0018BE  90D8               	bcf	status,0,c
  1300  0018C0  322B               	rrcf	___awdiv@divisor+1,f,c
  1301  0018C2  322A               	rrcf	___awdiv@divisor,f,c
  1302  0018C4  2E2C               	decfsz	___awdiv@counter,f,c
  1303  0018C6  D7EC               	goto	l1721
  1304  0018C8  D000               	goto	l1733
  1305  0018CA                     l1733:
  1306  0018CA  502D               	movf	___awdiv@sign,w,c
  1307  0018CC  B4D8               	btfsc	status,2,c
  1308  0018CE  D005               	goto	l1737
  1309  0018D0  6C2E               	negf	___awdiv@quotient,c
  1310  0018D2  1E2F               	comf	___awdiv@quotient+1,f,c
  1311  0018D4  B0D8               	btfsc	status,0,c
  1312  0018D6  2A2F               	incf	___awdiv@quotient+1,f,c
  1313  0018D8  D000               	goto	l1737
  1314  0018DA                     l1737:
  1315  0018DA  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1316  0018DE  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1317  0018E2  D000               	goto	l475
  1318  0018E4                     l475:
  1319  0018E4  0012               	return		;funcret
  1320  0018E6                     __end_of___awdiv:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           postinc0	equ	0xFEE
  1329                           wreg	equ	0xFE8
  1330                           postinc2	equ	0xFDE
  1331                           postdec2	equ	0xFDD
  1332                           fsr2h	equ	0xFDA
  1333                           fsr2l	equ	0xFD9
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _MIN *****************
  1337 ;; Defined at:
  1338 ;;		line 175 in file "user.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  a               2   45[COMRAM] int 
  1341 ;;  b               2   47[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2   45[COMRAM] int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        5 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    4
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sensorComputation
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text5
  1368  0019E2                     __ptext5:
  1369                           	opt stack 0
  1370  0019E2                     _MIN:
  1371                           	opt stack 24
  1372                           
  1373                           ;user.c: 177: if(a>b) return b;
  1374                           
  1375                           ;incstack = 0
  1376  0019E2  502E               	movf	MIN@a,w,c
  1377  0019E4  5C30               	subwf	MIN@b,w,c
  1378  0019E6  5031               	movf	MIN@b+1,w,c
  1379  0019E8  0A80               	xorlw	128
  1380  0019EA  6E32               	movwf	??_MIN& (0+255),c
  1381  0019EC  502F               	movf	MIN@a+1,w,c
  1382  0019EE  0A80               	xorlw	128
  1383  0019F0  5832               	subwfb	??_MIN& (0+255),w,c
  1384  0019F2  B0D8               	btfsc	status,0,c
  1385  0019F4  D005               	goto	l274
  1386  0019F6  C030  F02E         	movff	MIN@b,?_MIN
  1387  0019FA  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1388  0019FE  D004               	goto	l275
  1389  001A00                     l274:
  1390                           
  1391                           ;user.c: 178: return a;
  1392  001A00  C02E  F02E         	movff	MIN@a,?_MIN
  1393  001A04  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1394  001A08                     l275:
  1395  001A08  0012               	return		;funcret
  1396  001A0A                     __end_of_MIN:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postinc2	equ	0xFDE
  1407                           postdec2	equ	0xFDD
  1408                           fsr2h	equ	0xFDA
  1409                           fsr2l	equ	0xFD9
  1410                           status	equ	0xFD8
  1411                           
  1412 ;; *************** function _MAX *****************
  1413 ;; Defined at:
  1414 ;;		line 181 in file "user.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  a               2   45[COMRAM] int 
  1417 ;;  b               2   47[COMRAM] int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  2   45[COMRAM] int 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;Total ram usage:        5 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    4
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_sensorComputation
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  001A0A                     __ptext6:
  1445                           	opt stack 0
  1446  001A0A                     _MAX:
  1447                           	opt stack 24
  1448                           
  1449                           ;user.c: 183: if(a>b) return a;
  1450                           
  1451                           ;incstack = 0
  1452  001A0A  502E               	movf	MAX@a,w,c
  1453  001A0C  5C30               	subwf	MAX@b,w,c
  1454  001A0E  5031               	movf	MAX@b+1,w,c
  1455  001A10  0A80               	xorlw	128
  1456  001A12  6E32               	movwf	??_MAX& (0+255),c
  1457  001A14  502F               	movf	MAX@a+1,w,c
  1458  001A16  0A80               	xorlw	128
  1459  001A18  5832               	subwfb	??_MAX& (0+255),w,c
  1460  001A1A  B0D8               	btfsc	status,0,c
  1461  001A1C  D005               	goto	l278
  1462  001A1E  C02E  F02E         	movff	MAX@a,?_MAX
  1463  001A22  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1464  001A26  D004               	goto	l279
  1465  001A28                     l278:
  1466                           
  1467                           ;user.c: 184: return b;
  1468  001A28  C030  F02E         	movff	MAX@b,?_MAX
  1469  001A2C  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1470  001A30                     l279:
  1471  001A30  0012               	return		;funcret
  1472  001A32                     __end_of_MAX:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postinc2	equ	0xFDE
  1483                           postdec2	equ	0xFDD
  1484                           fsr2h	equ	0xFDA
  1485                           fsr2l	equ	0xFD9
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _InitApp *****************
  1489 ;; Defined at:
  1490 ;;		line 35 in file "user.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    5
  1511 ;; This function calls:
  1512 ;;		_AlgorithmSelection
  1513 ;;		_delay
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  0018E6                     __ptext7:
  1521                           	opt stack 0
  1522  0018E6                     _InitApp:
  1523                           	opt stack 25
  1524                           
  1525                           ;user.c: 39: TRISC = 0;
  1526                           
  1527                           ;incstack = 0
  1528  0018E6  0E00               	movlw	0
  1529  0018E8  6E94               	movwf	3988,c	;volatile
  1530                           
  1531                           ;user.c: 43: TRISEbits.TRISE1=1;
  1532  0018EA  8296               	bsf	3990,1,c	;volatile
  1533                           
  1534                           ;user.c: 45: TRISEbits.TRISE2=1;
  1535  0018EC  8496               	bsf	3990,2,c	;volatile
  1536                           
  1537                           ;user.c: 47: TRISBbits.RB1=1;
  1538  0018EE  8293               	bsf	3987,1,c	;volatile
  1539                           
  1540                           ;user.c: 49: TRISBbits.RB0=1;
  1541  0018F0  8093               	bsf	3987,0,c	;volatile
  1542                           
  1543                           ;user.c: 52: TRISBbits.RB3=1;
  1544  0018F2  8693               	bsf	3987,3,c	;volatile
  1545                           
  1546                           ;user.c: 54: TRISBbits.RB2=1;
  1547  0018F4  8493               	bsf	3987,2,c	;volatile
  1548                           
  1549                           ;user.c: 58: ADCON1 =0b00000001;
  1550  0018F6  0E01               	movlw	1
  1551  0018F8  6EC1               	movwf	4033,c	;volatile
  1552                           
  1553                           ;user.c: 63: ADCON2=0b00001010;
  1554  0018FA  0E0A               	movlw	10
  1555  0018FC  6EC0               	movwf	4032,c	;volatile
  1556                           
  1557                           ;user.c: 68: ADCON0=0b00101011;
  1558  0018FE  0E2B               	movlw	43
  1559  001900  6EC2               	movwf	4034,c	;volatile
  1560                           
  1561                           ;user.c: 77: T0CON = 0b11000100;
  1562  001902  0EC4               	movlw	196
  1563  001904  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;user.c: 85: INTCON2 = 0b11110100;
  1566  001906  0EF4               	movlw	244
  1567  001908  6EF1               	movwf	intcon2,c	;volatile
  1568                           
  1569                           ;user.c: 95: INTCON = 0b00100000;
  1570  00190A  0E20               	movlw	32
  1571  00190C  6EF2               	movwf	intcon,c	;volatile
  1572                           
  1573                           ;user.c: 105: AlgorithmSelection();
  1574  00190E  EC19  F00D         	call	_AlgorithmSelection	;wreg free
  1575                           
  1576                           ;user.c: 108: delay(1000);
  1577  001912  0E03               	movlw	3
  1578  001914  6E29               	movwf	delay@ms+1,c
  1579  001916  0EE8               	movlw	232
  1580  001918  6E28               	movwf	delay@ms,c
  1581  00191A  ECAF  F00C         	call	_delay	;wreg free
  1582                           
  1583                           ;user.c: 109: INTCONbits.GIE = 1;
  1584  00191E  8EF2               	bsf	intcon,7,c	;volatile
  1585  001920  0012               	return		;funcret
  1586  001922                     __end_of_InitApp:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           prodh	equ	0xFF4
  1593                           prodl	equ	0xFF3
  1594                           intcon	equ	0xFF2
  1595                           intcon2	equ	0xFF1
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _delay *****************
  1605 ;; Defined at:
  1606 ;;		line 29 in file "user.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  ms              2   39[COMRAM] unsigned int 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  x               2   42[COMRAM] int 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;Total ram usage:        5 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    4
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_InitApp
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text8
  1635  00195E                     __ptext8:
  1636                           	opt stack 0
  1637  00195E                     _delay:
  1638                           	opt stack 25
  1639                           
  1640                           ;user.c: 30: int x = 0;
  1641                           
  1642                           ;incstack = 0
  1643  00195E  0E00               	movlw	0
  1644  001960  6E2C               	movwf	delay@x+1,c
  1645  001962  0E00               	movlw	0
  1646  001964  6E2B               	movwf	delay@x,c
  1647                           
  1648                           ;user.c: 31: for (x = 0; x < ms; x++)
  1649  001966  0E00               	movlw	0
  1650  001968  6E2C               	movwf	delay@x+1,c
  1651  00196A  0E00               	movlw	0
  1652  00196C  6E2B               	movwf	delay@x,c
  1653  00196E  D00A               	goto	l234
  1654  001970                     l1429:
  1655                           
  1656                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1657  001970  0E0B               	movlw	11
  1658  001972  6E2A               	movwf	??_delay& (0+255),c
  1659  001974  0E62               	movlw	98
  1660  001976                     u1587:
  1661  001976  2EE8               	decfsz	wreg,f,c
  1662  001978  D7FE               	goto	u1587
  1663  00197A  2E2A               	decfsz	??_delay& (0+255),f,c
  1664  00197C  D7FC               	goto	u1587
  1665  00197E  D000               	nop2	
  1666  001980  4A2B               	infsnz	delay@x,f,c
  1667  001982  2A2C               	incf	delay@x+1,f,c
  1668  001984                     l234:
  1669  001984  5028               	movf	delay@ms,w,c
  1670  001986  5C2B               	subwf	delay@x,w,c
  1671  001988  5029               	movf	delay@ms+1,w,c
  1672  00198A  582C               	subwfb	delay@x+1,w,c
  1673  00198C  A0D8               	btfss	status,0,c
  1674  00198E  D7F0               	goto	l1429
  1675  001990  0012               	return		;funcret
  1676  001992                     __end_of_delay:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           prodh	equ	0xFF4
  1683                           prodl	equ	0xFF3
  1684                           intcon	equ	0xFF2
  1685                           intcon2	equ	0xFF1
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _AlgorithmSelection *****************
  1695 ;; Defined at:
  1696 ;;		line 112 in file "user.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_InitApp
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text9
  1725  001A32                     __ptext9:
  1726                           	opt stack 0
  1727  001A32                     _AlgorithmSelection:
  1728                           	opt stack 25
  1729                           
  1730                           ;user.c: 114: ADCON0 = 0b00100111;
  1731                           
  1732                           ;incstack = 0
  1733  001A32  0E27               	movlw	39
  1734  001A34  6EC2               	movwf	4034,c	;volatile
  1735                           
  1736                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1737  001A36  82C2               	bsf	4034,1,c	;volatile
  1738                           
  1739                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1740  001A38  D000               	goto	l243
  1741  001A3A                     l243:
  1742  001A3A  B2C2               	btfsc	4034,1,c	;volatile
  1743  001A3C  D7FE               	goto	l243
  1744                           
  1745                           ;user.c: 119: if(ADRESL > 0b10000000)
  1746  001A3E  0E80               	movlw	128
  1747  001A40  64C3               	cpfsgt	4035,c	;volatile
  1748  001A42  D002               	goto	l1029
  1749                           
  1750                           ;user.c: 120: algorithm = LEFTWALL;
  1751  001A44  0E00               	movlw	0
  1752  001A46  D001               	goto	L5
  1753  001A48                     l1029:
  1754                           
  1755                           ;user.c: 121: else
  1756                           ;user.c: 122: algorithm = RIGHTWALL;
  1757  001A48  0E01               	movlw	1
  1758  001A4A                     L5:
  1759  001A4A  6E55               	movwf	_algorithm,c
  1760  001A4C  D000               	goto	l248
  1761  001A4E                     l248:
  1762  001A4E  0012               	return		;funcret
  1763  001A50                     __end_of_AlgorithmSelection:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postinc2	equ	0xFDE
  1776                           postdec2	equ	0xFDD
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _ConfigureOscillator *****************
  1782 ;; Defined at:
  1783 ;;		line 24 in file "system.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;		None               void
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text10
  1812  001AC6                     __ptext10:
  1813                           	opt stack 0
  1814  001AC6                     _ConfigureOscillator:
  1815                           	opt stack 26
  1816                           
  1817                           ;system.c: 29: OSCCON = 0b01111100;
  1818                           
  1819                           ;incstack = 0
  1820  001AC6  0E7C               	movlw	124
  1821  001AC8  6ED3               	movwf	4051,c	;volatile
  1822                           
  1823                           ;system.c: 31: OSCTUNE = 0b01001111;
  1824  001ACA  0E4F               	movlw	79
  1825  001ACC  6E9B               	movwf	3995,c	;volatile
  1826  001ACE  0012               	return		;funcret
  1827  001AD0                     __end_of_ConfigureOscillator:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           intcon2	equ	0xFF1
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postinc2	equ	0xFDE
  1840                           postdec2	equ	0xFDD
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _low_isr *****************
  1846 ;; Defined at:
  1847 ;;		line 203 in file "interrupts.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;		None               void
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;Total ram usage:       17 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		Interrupt level 1
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	intcodelo
  1876  000018                     __pintcodelo:
  1877                           	opt stack 0
  1878  000018                     _low_isr:
  1879                           	opt stack 24
  1880                           
  1881                           ;incstack = 0
  1882  000018  CFD8 F001          	movff	status,??_low_isr
  1883  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1884  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1885  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1886  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1887  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1888  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1889  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1890  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1891  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1892  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1893  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1894  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1895  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1896  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1897  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1898  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1899  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1900  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1901  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1902  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1903  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1904  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1905  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1906  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1907  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1908  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1909  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1910  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1911  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1912  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1913  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1914  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1915  00009C  C001  FFD8         	movff	??_low_isr,status
  1916  0000A0  0010               	retfie	
  1917  0000A2                     __end_of_low_isr:
  1918                           	opt stack 0
  1919                           pclatu	equ	0xFFB
  1920                           pclath	equ	0xFFA
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           intcon2	equ	0xFF1
  1929                           postinc0	equ	0xFEE
  1930                           fsr0h	equ	0xFEA
  1931                           fsr0l	equ	0xFE9
  1932                           wreg	equ	0xFE8
  1933                           fsr1h	equ	0xFE2
  1934                           fsr1l	equ	0xFE1
  1935                           bsr	equ	0xFE0
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _high_isr *****************
  1943 ;; Defined at:
  1944 ;;		line 80 in file "interrupts.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;		None               void
  1951 ;; Registers used:
  1952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		_KController
  1967 ;;		_Reversing
  1968 ;;		_forward
  1969 ;;		_merge
  1970 ;;		_moveMouse
  1971 ;;		_rotate
  1972 ;; This function is called by:
  1973 ;;		Interrupt level 2
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	intcode
  1978  000008                     __pintcode:
  1979                           	opt stack 0
  1980  000008                     _high_isr:
  1981                           	opt stack 24
  1982                           
  1983                           ;incstack = 0
  1984  000008  CFFA F01A          	movff	pclath,??_high_isr
  1985  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1986  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1987  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  1988                           pclatu	equ	0xFFB
  1989                           pclath	equ	0xFFA
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           intcon	equ	0xFF2
  1997                           intcon2	equ	0xFF1
  1998                           postinc0	equ	0xFEE
  1999                           fsr0h	equ	0xFEA
  2000                           fsr0l	equ	0xFE9
  2001                           wreg	equ	0xFE8
  2002                           fsr1h	equ	0xFE2
  2003                           fsr1l	equ	0xFE1
  2004                           bsr	equ	0xFE0
  2005                           postinc2	equ	0xFDE
  2006                           postdec2	equ	0xFDD
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011                           	psect	intcode_body
  2012  00100A                     __pintcode_body:
  2013                           	opt stack 24
  2014  00100A                     int_func:
  2015                           	opt stack 24
  2016  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2017  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2018  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2019  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2020  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2021  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2022  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2023  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2024  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2025  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2026  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2027  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2028                           
  2029                           ;interrupts.c: 99: if(INTCONbits.TMR0IF == 1)
  2030  001038  A4F2               	btfss	intcon,2,c	;volatile
  2031  00103A  D10A               	goto	i2l80
  2032                           
  2033                           ;interrupts.c: 100: {
  2034                           ;interrupts.c: 101: if(MotorDelayCounter > 2)
  2035  00103C  BE4A               	btfsc	_MotorDelayCounter+1,7,c
  2036  00103E  D104               	goto	i2l1661
  2037  001040  504A               	movf	_MotorDelayCounter+1,w,c
  2038  001042  E104               	bnz	i2u108_40
  2039  001044  0E03               	movlw	3
  2040  001046  5C49               	subwf	_MotorDelayCounter,w,c
  2041  001048  A0D8               	btfss	status,0,c
  2042  00104A  D0FE               	goto	i2l1661
  2043  00104C                     i2u108_40:
  2044                           
  2045                           ;interrupts.c: 102: {
  2046                           ;interrupts.c: 104: if (ForwardCounter > 0)
  2047  00104C  BE46               	btfsc	_ForwardCounter+1,7,c
  2048  00104E  D008               	goto	i2l1579
  2049  001050  5046               	movf	_ForwardCounter+1,w,c
  2050  001052  E103               	bnz	i2u109_40
  2051  001054  0445               	decf	_ForwardCounter,w,c
  2052  001056  A0D8               	btfss	status,0,c
  2053  001058  D003               	goto	i2l1579
  2054  00105A                     i2u109_40:
  2055                           
  2056                           ;interrupts.c: 105: forward();
  2057  00105A  EC28  F00D         	call	_forward	;wreg free
  2058  00105E  D0E8               	goto	i2l1659
  2059  001060                     i2l1579:
  2060                           
  2061                           ;interrupts.c: 106: else if (ReverseCounter > 0)
  2062  001060  BE4E               	btfsc	_ReverseCounter+1,7,c
  2063  001062  D008               	goto	i2l1583
  2064  001064  504E               	movf	_ReverseCounter+1,w,c
  2065  001066  E103               	bnz	i2u110_40
  2066  001068  044D               	decf	_ReverseCounter,w,c
  2067  00106A  A0D8               	btfss	status,0,c
  2068  00106C  D003               	goto	i2l1583
  2069  00106E                     i2u110_40:
  2070                           
  2071                           ;interrupts.c: 107: Reversing();
  2072  00106E  EC36  F00D         	call	_Reversing	;wreg free
  2073  001072  D0DE               	goto	i2l1659
  2074  001074                     i2l1583:
  2075                           
  2076                           ;interrupts.c: 108: else if(RotateCounter > 0)
  2077  001074  BE50               	btfsc	_RotateCounter+1,7,c
  2078  001076  D020               	goto	i2l1595
  2079  001078  5050               	movf	_RotateCounter+1,w,c
  2080  00107A  E103               	bnz	i2u111_40
  2081  00107C  044F               	decf	_RotateCounter,w,c
  2082  00107E  A0D8               	btfss	status,0,c
  2083  001080  D01B               	goto	i2l1595
  2084  001082                     i2u111_40:
  2085                           
  2086                           ;interrupts.c: 109: {
  2087                           ;interrupts.c: 110: if ((sensorValue[2] > 700 || sensorValue[3] > 700)) {
  2088  001082  BE42               	btfsc	_sensorValue+5,7,c
  2089  001084  D006               	goto	i2l1587
  2090  001086  0EBD               	movlw	189
  2091  001088  5C41               	subwf	_sensorValue+4,w,c
  2092  00108A  0E02               	movlw	2
  2093  00108C  5842               	subwfb	_sensorValue+5,w,c
  2094  00108E  B0D8               	btfsc	status,0,c
  2095  001090  D008               	goto	i2l1589
  2096  001092                     i2l1587:
  2097  001092  BE44               	btfsc	_sensorValue+7,7,c
  2098  001094  D00D               	goto	i2l1593
  2099  001096  0EBD               	movlw	189
  2100  001098  5C43               	subwf	_sensorValue+6,w,c
  2101  00109A  0E02               	movlw	2
  2102  00109C  5844               	subwfb	_sensorValue+7,w,c
  2103  00109E  A0D8               	btfss	status,0,c
  2104  0010A0  D007               	goto	i2l1593
  2105  0010A2                     i2l1589:
  2106                           
  2107                           ;interrupts.c: 112: ReverseCounter = 15;
  2108  0010A2  0E00               	movlw	0
  2109  0010A4  6E4E               	movwf	_ReverseCounter+1,c
  2110  0010A6  0E0F               	movlw	15
  2111  0010A8  6E4D               	movwf	_ReverseCounter,c
  2112                           
  2113                           ;interrupts.c: 113: Reversing();
  2114  0010AA  EC36  F00D         	call	_Reversing	;wreg free
  2115                           
  2116                           ;interrupts.c: 114: } else {
  2117  0010AE  D0C0               	goto	i2l1659
  2118  0010B0                     i2l1593:
  2119                           
  2120                           ;interrupts.c: 115: rotate(rotatingSide);
  2121  0010B0  5057               	movf	_rotatingSide,w,c
  2122  0010B2  EC91  F00C         	call	_rotate
  2123                           
  2124                           ;interrupts.c: 116: }
  2125                           ;interrupts.c: 117: }
  2126  0010B6  D0BC               	goto	i2l1659
  2127  0010B8                     i2l1595:
  2128                           
  2129                           ;interrupts.c: 118: else if (LTurnCounter > 0 || RTurnCounter > 0) {
  2130  0010B8  BE48               	btfsc	_LTurnCounter+1,7,c
  2131  0010BA  D005               	goto	i2l1597
  2132  0010BC  5048               	movf	_LTurnCounter+1,w,c
  2133  0010BE  E102               	bnz	i2u114_41
  2134  0010C0  0447               	decf	_LTurnCounter,w,c
  2135  0010C2  B0D8               	btfsc	status,0,c
  2136  0010C4                     i2u114_41:
  2137  0010C4  D0B5               	goto	i2l1659
  2138  0010C6                     i2l1597:
  2139  0010C6  BE4C               	btfsc	_RTurnCounter+1,7,c
  2140  0010C8  D007               	goto	i2l1599
  2141  0010CA  504C               	movf	_RTurnCounter+1,w,c
  2142  0010CC  E104               	bnz	i2u115_40
  2143  0010CE  044B               	decf	_RTurnCounter,w,c
  2144  0010D0  B0D8               	btfsc	status,0,c
  2145  0010D2  D0AE               	goto	i2l1659
  2146  0010D4  D001               	goto	i2l1599
  2147  0010D6                     i2u115_40:
  2148                           
  2149                           ;interrupts.c: 120: }
  2150  0010D6  D0AC               	goto	i2l1659
  2151  0010D8                     i2l1599:
  2152                           
  2153                           ;interrupts.c: 121: else if (sensorValue[0] < 120 || (sensorValue[2] > 420 && sensorValu
      +                          e[3] > 420)
  2154                           ;interrupts.c: 122: && sensorValue[1] > 120 && algorithm == LEFTWALL)
  2155  0010D8  BE3E               	btfsc	_sensorValue+1,7,c
  2156  0010DA  D01F               	goto	i2l1609
  2157  0010DC  503E               	movf	_sensorValue+1,w,c
  2158  0010DE  E104               	bnz	i2u116_40
  2159  0010E0  0E78               	movlw	120
  2160  0010E2  5C3D               	subwf	_sensorValue,w,c
  2161  0010E4  A0D8               	btfss	status,0,c
  2162  0010E6  D019               	goto	i2l1609
  2163  0010E8                     i2u116_40:
  2164  0010E8  BE42               	btfsc	_sensorValue+5,7,c
  2165  0010EA  D023               	goto	i2l1617
  2166  0010EC  0EA5               	movlw	165
  2167  0010EE  5C41               	subwf	_sensorValue+4,w,c
  2168  0010F0  0E01               	movlw	1
  2169  0010F2  5842               	subwfb	_sensorValue+5,w,c
  2170  0010F4  B0D8               	btfsc	status,0,c
  2171  0010F6  BE44               	btfsc	_sensorValue+7,7,c
  2172  0010F8  D01C               	goto	i2l1617
  2173  0010FA  0EA5               	movlw	165
  2174  0010FC  5C43               	subwf	_sensorValue+6,w,c
  2175  0010FE  0E01               	movlw	1
  2176  001100  5844               	subwfb	_sensorValue+7,w,c
  2177  001102  B0D8               	btfsc	status,0,c
  2178  001104  BE40               	btfsc	_sensorValue+3,7,c
  2179  001106  D015               	goto	i2l1617
  2180  001108  5040               	movf	_sensorValue+3,w,c
  2181  00110A  E104               	bnz	i2u119_40
  2182  00110C  0E79               	movlw	121
  2183  00110E  5C3F               	subwf	_sensorValue+2,w,c
  2184  001110  A0D8               	btfss	status,0,c
  2185  001112  D00F               	goto	i2l1617
  2186  001114                     i2u119_40:
  2187  001114  5055               	movf	_algorithm,w,c
  2188  001116  A4D8               	btfss	status,2,c
  2189  001118  D00C               	goto	i2l1617
  2190  00111A                     i2l1609:
  2191                           
  2192                           ;interrupts.c: 123: {
  2193                           ;interrupts.c: 125: ForwardCounter = 460;
  2194  00111A  0E01               	movlw	1
  2195  00111C  6E46               	movwf	_ForwardCounter+1,c
  2196  00111E  0ECC               	movlw	204
  2197  001120  6E45               	movwf	_ForwardCounter,c
  2198                           
  2199                           ;interrupts.c: 129: forward();
  2200  001122  EC28  F00D         	call	_forward	;wreg free
  2201                           
  2202                           ;interrupts.c: 130: RotateCounter = 167;
  2203  001126  0E00               	movlw	0
  2204  001128  6E50               	movwf	_RotateCounter+1,c
  2205  00112A  0EA7               	movlw	167
  2206  00112C  6E4F               	movwf	_RotateCounter,c
  2207                           
  2208                           ;interrupts.c: 131: rotatingSide = LEFT;
  2209  00112E  0E00               	movlw	0
  2210  001130  D02D               	goto	L6
  2211  001132                     i2l1617:
  2212                           
  2213                           ;interrupts.c: 136: else if (sensorValue[1] < 120 && (sensorValue[2] < 700 || sensorValu
      +                          e[3] < 700)
  2214                           ;interrupts.c: 137: && sensorValue[0] > 120 && algorithm == LEFTWALL)
  2215  001132  BE40               	btfsc	_sensorValue+3,7,c
  2216  001134  D006               	goto	i2l1619
  2217  001136  5040               	movf	_sensorValue+3,w,c
  2218  001138  E12B               	bnz	i2l1635
  2219  00113A  0E78               	movlw	120
  2220  00113C  5C3F               	subwf	_sensorValue+2,w,c
  2221  00113E  B0D8               	btfsc	status,0,c
  2222  001140  D027               	goto	i2l1635
  2223  001142                     i2l1619:
  2224  001142  BE42               	btfsc	_sensorValue+5,7,c
  2225  001144  D00D               	goto	i2l1623
  2226  001146  0EBC               	movlw	188
  2227  001148  5C41               	subwf	_sensorValue+4,w,c
  2228  00114A  0E02               	movlw	2
  2229  00114C  5842               	subwfb	_sensorValue+5,w,c
  2230  00114E  B0D8               	btfsc	status,0,c
  2231  001150  BE44               	btfsc	_sensorValue+7,7,c
  2232  001152  D006               	goto	i2l1623
  2233  001154  0EBC               	movlw	188
  2234  001156  5C43               	subwf	_sensorValue+6,w,c
  2235  001158  0E02               	movlw	2
  2236  00115A  5844               	subwfb	_sensorValue+7,w,c
  2237  00115C  B0D8               	btfsc	status,0,c
  2238  00115E  D018               	goto	i2l1635
  2239  001160                     i2l1623:
  2240  001160  BE3E               	btfsc	_sensorValue+1,7,c
  2241  001162  D016               	goto	i2l1635
  2242  001164  503E               	movf	_sensorValue+1,w,c
  2243  001166  E104               	bnz	i2u124_40
  2244  001168  0E79               	movlw	121
  2245  00116A  5C3D               	subwf	_sensorValue,w,c
  2246  00116C  A0D8               	btfss	status,0,c
  2247  00116E  D010               	goto	i2l1635
  2248  001170                     i2u124_40:
  2249  001170  5055               	movf	_algorithm,w,c
  2250  001172  A4D8               	btfss	status,2,c
  2251  001174  D00D               	goto	i2l1635
  2252                           
  2253                           ;interrupts.c: 138: {
  2254                           ;interrupts.c: 140: ForwardCounter = 460;
  2255  001176  0E01               	movlw	1
  2256  001178  6E46               	movwf	_ForwardCounter+1,c
  2257  00117A  0ECC               	movlw	204
  2258  00117C  6E45               	movwf	_ForwardCounter,c
  2259                           
  2260                           ;interrupts.c: 143: forward();
  2261  00117E  EC28  F00D         	call	_forward	;wreg free
  2262                           
  2263                           ;interrupts.c: 144: RotateCounter = 167;
  2264  001182  0E00               	movlw	0
  2265  001184  6E50               	movwf	_RotateCounter+1,c
  2266  001186  0EA7               	movlw	167
  2267  001188  6E4F               	movwf	_RotateCounter,c
  2268                           
  2269                           ;interrupts.c: 145: rotatingSide = RIGHT;
  2270  00118A  0E01               	movlw	1
  2271  00118C                     L6:
  2272  00118C  6E57               	movwf	_rotatingSide,c
  2273                           
  2274                           ;interrupts.c: 149: }
  2275  00118E  D050               	goto	i2l1659
  2276  001190                     i2l1635:
  2277                           
  2278                           ;interrupts.c: 150: else if ((sensorValue[0] > 120 && sensorValue[1] > 120 )
  2279                           ;interrupts.c: 151: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2280  001190  BE3E               	btfsc	_sensorValue+1,7,c
  2281  001192  D020               	goto	i2l1645
  2282  001194  503E               	movf	_sensorValue+1,w,c
  2283  001196  E104               	bnz	i2u126_40
  2284  001198  0E79               	movlw	121
  2285  00119A  5C3D               	subwf	_sensorValue,w,c
  2286  00119C  A0D8               	btfss	status,0,c
  2287  00119E  D01A               	goto	i2l1645
  2288  0011A0                     i2u126_40:
  2289  0011A0  BE40               	btfsc	_sensorValue+3,7,c
  2290  0011A2  D018               	goto	i2l1645
  2291  0011A4  5040               	movf	_sensorValue+3,w,c
  2292  0011A6  E104               	bnz	i2u127_40
  2293  0011A8  0E79               	movlw	121
  2294  0011AA  5C3F               	subwf	_sensorValue+2,w,c
  2295  0011AC  A0D8               	btfss	status,0,c
  2296  0011AE  D012               	goto	i2l1645
  2297  0011B0                     i2u127_40:
  2298  0011B0  BE42               	btfsc	_sensorValue+5,7,c
  2299  0011B2  D00D               	goto	i2l1643
  2300  0011B4  0EA4               	movlw	164
  2301  0011B6  5C41               	subwf	_sensorValue+4,w,c
  2302  0011B8  0E01               	movlw	1
  2303  0011BA  5842               	subwfb	_sensorValue+5,w,c
  2304  0011BC  B0D8               	btfsc	status,0,c
  2305  0011BE  BE44               	btfsc	_sensorValue+7,7,c
  2306  0011C0  D006               	goto	i2l1643
  2307  0011C2  0EA4               	movlw	164
  2308  0011C4  5C43               	subwf	_sensorValue+6,w,c
  2309  0011C6  0E01               	movlw	1
  2310  0011C8  5844               	subwfb	_sensorValue+7,w,c
  2311  0011CA  B0D8               	btfsc	status,0,c
  2312  0011CC  D003               	goto	i2l1645
  2313  0011CE                     i2l1643:
  2314                           
  2315                           ;interrupts.c: 152: {
  2316                           ;interrupts.c: 153: KController();
  2317  0011CE  ECBB  F00B         	call	_KController	;wreg free
  2318                           
  2319                           ;interrupts.c: 155: }else if ((sensorValue[0] > 120 && sensorValue[1] > 120 )
  2320  0011D2  D02E               	goto	i2l1659
  2321  0011D4                     i2l1645:
  2322                           
  2323                           ;interrupts.c: 156: && (sensorValue[2] > 420 && sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2324  0011D4  BE3E               	btfsc	_sensorValue+1,7,c
  2325  0011D6  D02C               	goto	i2l1659
  2326  0011D8  503E               	movf	_sensorValue+1,w,c
  2327  0011DA  E104               	bnz	i2u130_40
  2328  0011DC  0E79               	movlw	121
  2329  0011DE  5C3D               	subwf	_sensorValue,w,c
  2330  0011E0  A0D8               	btfss	status,0,c
  2331  0011E2  D026               	goto	i2l1659
  2332  0011E4                     i2u130_40:
  2333  0011E4  BE40               	btfsc	_sensorValue+3,7,c
  2334  0011E6  D024               	goto	i2l1659
  2335  0011E8  5040               	movf	_sensorValue+3,w,c
  2336  0011EA  E104               	bnz	i2u131_40
  2337  0011EC  0E79               	movlw	121
  2338  0011EE  5C3F               	subwf	_sensorValue+2,w,c
  2339  0011F0  A0D8               	btfss	status,0,c
  2340  0011F2  D01E               	goto	i2l1659
  2341  0011F4                     i2u131_40:
  2342  0011F4  BE42               	btfsc	_sensorValue+5,7,c
  2343  0011F6  D01C               	goto	i2l1659
  2344  0011F8  0EA5               	movlw	165
  2345  0011FA  5C41               	subwf	_sensorValue+4,w,c
  2346  0011FC  0E01               	movlw	1
  2347  0011FE  5842               	subwfb	_sensorValue+5,w,c
  2348  001200  B0D8               	btfsc	status,0,c
  2349  001202  BE44               	btfsc	_sensorValue+7,7,c
  2350  001204  D015               	goto	i2l1659
  2351  001206  0EA5               	movlw	165
  2352  001208  5C43               	subwf	_sensorValue+6,w,c
  2353  00120A  0E01               	movlw	1
  2354  00120C  5844               	subwfb	_sensorValue+7,w,c
  2355  00120E  A0D8               	btfss	status,0,c
  2356  001210  D00F               	goto	i2l1659
  2357  001212  BE50               	btfsc	_RotateCounter+1,7,c
  2358  001214  D005               	goto	i2l1655
  2359  001216  5050               	movf	_RotateCounter+1,w,c
  2360  001218  E10B               	bnz	i2l1659
  2361  00121A  044F               	decf	_RotateCounter,w,c
  2362  00121C  B0D8               	btfsc	status,0,c
  2363  00121E  D008               	goto	i2l1659
  2364  001220                     i2l1655:
  2365                           
  2366                           ;interrupts.c: 157: {
  2367                           ;interrupts.c: 158: RotateCounter = 167*2;
  2368  001220  0E01               	movlw	1
  2369  001222  6E50               	movwf	_RotateCounter+1,c
  2370  001224  0E4E               	movlw	78
  2371  001226  6E4F               	movwf	_RotateCounter,c
  2372                           
  2373                           ;interrupts.c: 159: rotate(rotatingSide);
  2374  001228  5057               	movf	_rotatingSide,w,c
  2375  00122A  EC91  F00C         	call	_rotate
  2376  00122E  D000               	goto	i2l1659
  2377  001230                     i2l1659:
  2378                           
  2379                           ;interrupts.c: 160: }
  2380                           ;interrupts.c: 188: moveMouse(merge(LMotorCounter,RMotorCounter));
  2381  001230  C054  F012         	movff	_RMotorCounter,merge@right
  2382  001234  5053               	movf	_LMotorCounter,w,c
  2383  001236  EC5B  F00D         	call	_merge
  2384  00123A  EC68  F00D         	call	_moveMouse
  2385                           
  2386                           ;interrupts.c: 189: MotorDelayCounter = 0;
  2387  00123E  0E00               	movlw	0
  2388  001240  6E4A               	movwf	_MotorDelayCounter+1,c
  2389  001242  0E00               	movlw	0
  2390  001244  6E49               	movwf	_MotorDelayCounter,c
  2391  001246  D000               	goto	i2l1661
  2392  001248                     i2l1661:
  2393                           
  2394                           ;interrupts.c: 191: }
  2395                           ;interrupts.c: 193: MotorDelayCounter++;
  2396  001248  4A49               	infsnz	_MotorDelayCounter,f,c
  2397  00124A  2A4A               	incf	_MotorDelayCounter+1,f,c
  2398                           
  2399                           ;interrupts.c: 194: INTCONbits.TMR0IF = 0;
  2400  00124C  94F2               	bcf	intcon,2,c	;volatile
  2401  00124E  D000               	goto	i2l80
  2402  001250                     i2l80:
  2403  001250  C027  FFF5         	movff	??_high_isr+13,tablat
  2404  001254  C026  FFF8         	movff	??_high_isr+12,tblptru
  2405  001258  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2406  00125C  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2407  001260  C023  FFF4         	movff	??_high_isr+9,prodh
  2408  001264  C022  FFF3         	movff	??_high_isr+8,prodl
  2409  001268  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2410  00126C  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2411  001270  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2412  001274  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2413  001278  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2414  00127C  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2415  001280  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2416  001284  C01A  FFFA         	movff	??_high_isr,pclath
  2417  001288  0011               	retfie		f
  2418  00128A                     __end_of_high_isr:
  2419                           	opt stack 0
  2420                           pclatu	equ	0xFFB
  2421                           pclath	equ	0xFFA
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           prodh	equ	0xFF4
  2427                           prodl	equ	0xFF3
  2428                           intcon	equ	0xFF2
  2429                           intcon2	equ	0xFF1
  2430                           postinc0	equ	0xFEE
  2431                           fsr0h	equ	0xFEA
  2432                           fsr0l	equ	0xFE9
  2433                           wreg	equ	0xFE8
  2434                           fsr1h	equ	0xFE2
  2435                           fsr1l	equ	0xFE1
  2436                           bsr	equ	0xFE0
  2437                           postinc2	equ	0xFDE
  2438                           postdec2	equ	0xFDD
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _rotate *****************
  2444 ;; Defined at:
  2445 ;;		line 340 in file "interrupts.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  side            1    wreg     enum E4082
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  side            1   19[COMRAM] enum E4082
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;Total ram usage:        1 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    1
  2466 ;; This function calls:
  2467 ;;		_motorCounterUpdate
  2468 ;; This function is called by:
  2469 ;;		_high_isr
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text13
  2474  001922                     __ptext13:
  2475                           	opt stack 0
  2476  001922                     _rotate:
  2477                           	opt stack 24
  2478                           
  2479                           ;incstack = 0
  2480                           ;rotate@side stored from wreg
  2481  001922  6E14               	movwf	rotate@side,c
  2482                           
  2483                           ;interrupts.c: 342: if (side == LEFT){
  2484  001924  5014               	movf	rotate@side,w,c
  2485  001926  A4D8               	btfss	status,2,c
  2486  001928  D00B               	goto	i2l1475
  2487                           
  2488                           ;interrupts.c: 343: motorCounterUpdate(RIGHT,0);
  2489  00192A  0E00               	movlw	0
  2490  00192C  6E12               	movwf	motorCounterUpdate@reverse,c
  2491  00192E  0E01               	movlw	1
  2492  001930  EC41  F00B         	call	_motorCounterUpdate
  2493                           
  2494                           ;interrupts.c: 344: motorCounterUpdate(LEFT,1);
  2495  001934  0E01               	movlw	1
  2496  001936  6E12               	movwf	motorCounterUpdate@reverse,c
  2497  001938  0E00               	movlw	0
  2498  00193A  EC41  F00B         	call	_motorCounterUpdate
  2499                           
  2500                           ;interrupts.c: 345: } else {
  2501  00193E  D00B               	goto	i2l1477
  2502  001940                     i2l1475:
  2503                           
  2504                           ;interrupts.c: 346: motorCounterUpdate(LEFT,0);
  2505  001940  0E00               	movlw	0
  2506  001942  6E12               	movwf	motorCounterUpdate@reverse,c
  2507  001944  0E00               	movlw	0
  2508  001946  EC41  F00B         	call	_motorCounterUpdate
  2509                           
  2510                           ;interrupts.c: 347: motorCounterUpdate(RIGHT,1);
  2511  00194A  0E01               	movlw	1
  2512  00194C  6E12               	movwf	motorCounterUpdate@reverse,c
  2513  00194E  0E01               	movlw	1
  2514  001950  EC41  F00B         	call	_motorCounterUpdate
  2515  001954  D000               	goto	i2l1477
  2516  001956                     i2l1477:
  2517                           
  2518                           ;interrupts.c: 348: }
  2519                           ;interrupts.c: 349: RotateCounter--;
  2520  001956  064F               	decf	_RotateCounter,f,c
  2521  001958  A0D8               	btfss	status,0,c
  2522  00195A  0650               	decf	_RotateCounter+1,f,c
  2523  00195C  0012               	return		;funcret
  2524  00195E                     __end_of_rotate:
  2525                           	opt stack 0
  2526                           pclatu	equ	0xFFB
  2527                           pclath	equ	0xFFA
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           intcon2	equ	0xFF1
  2536                           postinc0	equ	0xFEE
  2537                           fsr0h	equ	0xFEA
  2538                           fsr0l	equ	0xFE9
  2539                           wreg	equ	0xFE8
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           bsr	equ	0xFE0
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _forward *****************
  2550 ;; Defined at:
  2551 ;;		line 371 in file "interrupts.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;		None               void
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    1
  2572 ;; This function calls:
  2573 ;;		_motorCounterUpdate
  2574 ;; This function is called by:
  2575 ;;		_high_isr
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text14
  2580  001A50                     __ptext14:
  2581                           	opt stack 0
  2582  001A50                     _forward:
  2583                           	opt stack 24
  2584                           
  2585                           ;interrupts.c: 373: motorCounterUpdate(RIGHT,0);
  2586                           
  2587                           ;incstack = 0
  2588  001A50  0E00               	movlw	0
  2589  001A52  6E12               	movwf	motorCounterUpdate@reverse,c
  2590  001A54  0E01               	movlw	1
  2591  001A56  EC41  F00B         	call	_motorCounterUpdate
  2592                           
  2593                           ;interrupts.c: 374: motorCounterUpdate(LEFT,0);
  2594  001A5A  0E00               	movlw	0
  2595  001A5C  6E12               	movwf	motorCounterUpdate@reverse,c
  2596  001A5E  0E00               	movlw	0
  2597  001A60  EC41  F00B         	call	_motorCounterUpdate
  2598                           
  2599                           ;interrupts.c: 375: ForwardCounter--;
  2600  001A64  0645               	decf	_ForwardCounter,f,c
  2601  001A66  A0D8               	btfss	status,0,c
  2602  001A68  0646               	decf	_ForwardCounter+1,f,c
  2603  001A6A  0012               	return		;funcret
  2604  001A6C                     __end_of_forward:
  2605                           	opt stack 0
  2606                           pclatu	equ	0xFFB
  2607                           pclath	equ	0xFFA
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           intcon2	equ	0xFF1
  2616                           postinc0	equ	0xFEE
  2617                           fsr0h	equ	0xFEA
  2618                           fsr0l	equ	0xFE9
  2619                           wreg	equ	0xFE8
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           bsr	equ	0xFE0
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _Reversing *****************
  2630 ;; Defined at:
  2631 ;;		line 364 in file "interrupts.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;		None               void
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    1
  2652 ;; This function calls:
  2653 ;;		_motorCounterUpdate
  2654 ;; This function is called by:
  2655 ;;		_high_isr
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text15
  2660  001A6C                     __ptext15:
  2661                           	opt stack 0
  2662  001A6C                     _Reversing:
  2663                           	opt stack 24
  2664                           
  2665                           ;interrupts.c: 366: motorCounterUpdate(RIGHT,1);
  2666                           
  2667                           ;incstack = 0
  2668  001A6C  0E01               	movlw	1
  2669  001A6E  6E12               	movwf	motorCounterUpdate@reverse,c
  2670  001A70  0E01               	movlw	1
  2671  001A72  EC41  F00B         	call	_motorCounterUpdate
  2672                           
  2673                           ;interrupts.c: 367: motorCounterUpdate(LEFT,1);
  2674  001A76  0E01               	movlw	1
  2675  001A78  6E12               	movwf	motorCounterUpdate@reverse,c
  2676  001A7A  0E00               	movlw	0
  2677  001A7C  EC41  F00B         	call	_motorCounterUpdate
  2678                           
  2679                           ;interrupts.c: 368: ReverseCounter--;
  2680  001A80  064D               	decf	_ReverseCounter,f,c
  2681  001A82  A0D8               	btfss	status,0,c
  2682  001A84  064E               	decf	_ReverseCounter+1,f,c
  2683  001A86  0012               	return		;funcret
  2684  001A88                     __end_of_Reversing:
  2685                           	opt stack 0
  2686                           pclatu	equ	0xFFB
  2687                           pclath	equ	0xFFA
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon	equ	0xFF2
  2695                           intcon2	equ	0xFF1
  2696                           postinc0	equ	0xFEE
  2697                           fsr0h	equ	0xFEA
  2698                           fsr0l	equ	0xFE9
  2699                           wreg	equ	0xFE8
  2700                           fsr1h	equ	0xFE2
  2701                           fsr1l	equ	0xFE1
  2702                           bsr	equ	0xFE0
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _KController *****************
  2710 ;; Defined at:
  2711 ;;		line 305 in file "interrupts.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  diff            2   23[COMRAM] int 
  2716 ;;  correctTo       1   22[COMRAM] enum E4082
  2717 ;; Return value:  Size  Location     Type
  2718 ;;		None               void
  2719 ;; Registers used:
  2720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;Total ram usage:        5 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    1
  2733 ;; This function calls:
  2734 ;;		_ABS
  2735 ;;		_merge
  2736 ;;		_motorCounterUpdate
  2737 ;;		_moveMouse
  2738 ;; This function is called by:
  2739 ;;		_high_isr
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text16
  2744  001776                     __ptext16:
  2745                           	opt stack 0
  2746  001776                     _KController:
  2747                           	opt stack 24
  2748                           
  2749                           ;interrupts.c: 307: Side correctTo;
  2750                           ;interrupts.c: 308: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2751                           
  2752                           ;incstack = 0
  2753  001776  EE20  F03F         	lfsr	2,_sensorValue+2
  2754  00177A  CFDE F015          	movff	postinc2,??_KController
  2755  00177E  CFDD F016          	movff	postdec2,??_KController+1
  2756  001782  1E15               	comf	??_KController,f,c
  2757  001784  1E16               	comf	??_KController+1,f,c
  2758  001786  4A15               	infsnz	??_KController,f,c
  2759  001788  2A16               	incf	??_KController+1,f,c
  2760  00178A  503D               	movf	_sensorValue,w,c
  2761  00178C  2415               	addwf	??_KController,w,c
  2762  00178E  6E12               	movwf	ABS@x,c
  2763  001790  503E               	movf	_sensorValue+1,w,c
  2764  001792  2016               	addwfc	??_KController+1,w,c
  2765  001794  6E13               	movwf	ABS@x+1,c
  2766  001796  EC44  F00D         	call	_ABS	;wreg free
  2767  00179A  C012  F018         	movff	?_ABS,KController@diff
  2768  00179E  C013  F019         	movff	?_ABS+1,KController@diff+1
  2769                           
  2770                           ;interrupts.c: 311: if(controllerSteps > 0)
  2771  0017A2  5058               	movf	_controllerSteps,w,c
  2772  0017A4  B4D8               	btfsc	status,2,c
  2773  0017A6  D00C               	goto	i2l1489
  2774                           
  2775                           ;interrupts.c: 312: {
  2776                           ;interrupts.c: 313: motorCounterUpdate(RIGHT,0);
  2777  0017A8  0E00               	movlw	0
  2778  0017AA  6E12               	movwf	motorCounterUpdate@reverse,c
  2779  0017AC  0E01               	movlw	1
  2780  0017AE  EC41  F00B         	call	_motorCounterUpdate
  2781                           
  2782                           ;interrupts.c: 314: motorCounterUpdate(LEFT,0);
  2783  0017B2  0E00               	movlw	0
  2784  0017B4  6E12               	movwf	motorCounterUpdate@reverse,c
  2785  0017B6  0E00               	movlw	0
  2786  0017B8  EC41  F00B         	call	_motorCounterUpdate
  2787                           
  2788                           ;interrupts.c: 315: controllerSteps--;
  2789  0017BC  0658               	decf	_controllerSteps,f,c
  2790                           
  2791                           ;interrupts.c: 316: return;
  2792  0017BE  D047               	goto	i2l135
  2793  0017C0                     i2l1489:
  2794                           
  2795                           ;interrupts.c: 317: }
  2796                           ;interrupts.c: 319: if(sensorValue[0] > sensorValue[1])
  2797  0017C0  503D               	movf	_sensorValue,w,c
  2798  0017C2  5C3F               	subwf	_sensorValue+2,w,c
  2799  0017C4  5040               	movf	_sensorValue+3,w,c
  2800  0017C6  0A80               	xorlw	128
  2801  0017C8  6E15               	movwf	??_KController& (0+255),c
  2802  0017CA  503E               	movf	_sensorValue+1,w,c
  2803  0017CC  0A80               	xorlw	128
  2804  0017CE  5815               	subwfb	??_KController& (0+255),w,c
  2805  0017D0  B0D8               	btfsc	status,0,c
  2806  0017D2  D00F               	goto	i2l1497
  2807                           
  2808                           ;interrupts.c: 320: {
  2809                           ;interrupts.c: 321: correctTo = LEFT;
  2810  0017D4  0E00               	movlw	0
  2811  0017D6  6E17               	movwf	KController@correctTo,c
  2812                           
  2813                           ;interrupts.c: 322: motorCounterUpdate(correctTo,0);
  2814  0017D8  0E00               	movlw	0
  2815  0017DA  6E12               	movwf	motorCounterUpdate@reverse,c
  2816  0017DC  5017               	movf	KController@correctTo,w,c
  2817  0017DE  EC41  F00B         	call	_motorCounterUpdate
  2818                           
  2819                           ;interrupts.c: 323: moveMouse(merge(LMotorCounter,RMotorCounter));
  2820  0017E2  C054  F012         	movff	_RMotorCounter,merge@right
  2821  0017E6  5053               	movf	_LMotorCounter,w,c
  2822  0017E8  EC5B  F00D         	call	_merge
  2823  0017EC  EC68  F00D         	call	_moveMouse
  2824                           
  2825                           ;interrupts.c: 324: }
  2826  0017F0  D00F               	goto	i2l1503
  2827  0017F2                     i2l1497:
  2828                           
  2829                           ;interrupts.c: 325: else
  2830                           ;interrupts.c: 326: {
  2831                           ;interrupts.c: 327: correctTo = RIGHT;
  2832  0017F2  0E01               	movlw	1
  2833  0017F4  6E17               	movwf	KController@correctTo,c
  2834                           
  2835                           ;interrupts.c: 328: motorCounterUpdate(correctTo,0);
  2836  0017F6  0E00               	movlw	0
  2837  0017F8  6E12               	movwf	motorCounterUpdate@reverse,c
  2838  0017FA  5017               	movf	KController@correctTo,w,c
  2839  0017FC  EC41  F00B         	call	_motorCounterUpdate
  2840                           
  2841                           ;interrupts.c: 329: moveMouse(merge(LMotorCounter,RMotorCounter));
  2842  001800  C054  F012         	movff	_RMotorCounter,merge@right
  2843  001804  5053               	movf	_LMotorCounter,w,c
  2844  001806  EC5B  F00D         	call	_merge
  2845  00180A  EC68  F00D         	call	_moveMouse
  2846  00180E  D000               	goto	i2l1503
  2847  001810                     i2l1503:
  2848                           
  2849                           ;interrupts.c: 330: }
  2850                           ;interrupts.c: 332: if(diff > 150)
  2851  001810  BE19               	btfsc	KController@diff+1,7,c
  2852  001812  D008               	goto	i2l1507
  2853  001814  5019               	movf	KController@diff+1,w,c
  2854  001816  E104               	bnz	i2u96_40
  2855  001818  0E97               	movlw	151
  2856  00181A  5C18               	subwf	KController@diff,w,c
  2857  00181C  A0D8               	btfss	status,0,c
  2858  00181E  D002               	goto	i2l1507
  2859  001820                     i2u96_40:
  2860                           
  2861                           ;interrupts.c: 333: controllerSteps = 1;
  2862  001820  0E01               	movlw	1
  2863  001822  D013               	goto	L8
  2864  001824                     i2l1507:
  2865                           
  2866                           ;interrupts.c: 334: else if(diff <= 150 && diff > 20)
  2867  001824  BE19               	btfsc	KController@diff+1,7,c
  2868  001826  D006               	goto	i2l1509
  2869  001828  5019               	movf	KController@diff+1,w,c
  2870  00182A  E10E               	bnz	i2l1513
  2871  00182C  0E97               	movlw	151
  2872  00182E  5C18               	subwf	KController@diff,w,c
  2873  001830  B0D8               	btfsc	status,0,c
  2874  001832  D00A               	goto	i2l1513
  2875  001834                     i2l1509:
  2876  001834  BE19               	btfsc	KController@diff+1,7,c
  2877  001836  D008               	goto	i2l1513
  2878  001838  5019               	movf	KController@diff+1,w,c
  2879  00183A  E104               	bnz	i2u98_40
  2880  00183C  0E15               	movlw	21
  2881  00183E  5C18               	subwf	KController@diff,w,c
  2882  001840  A0D8               	btfss	status,0,c
  2883  001842  D002               	goto	i2l1513
  2884  001844                     i2u98_40:
  2885                           
  2886                           ;interrupts.c: 335: controllerSteps = 4;
  2887  001844  0E04               	movlw	4
  2888  001846  D001               	goto	L8
  2889  001848                     i2l1513:
  2890                           
  2891                           ;interrupts.c: 336: else
  2892                           ;interrupts.c: 337: controllerSteps = 8;
  2893  001848  0E08               	movlw	8
  2894  00184A                     L8:
  2895  00184A  6E58               	movwf	_controllerSteps,c
  2896  00184C  D000               	goto	i2l135
  2897  00184E                     i2l135:
  2898  00184E  0012               	return		;funcret
  2899  001850                     __end_of_KController:
  2900                           	opt stack 0
  2901                           pclatu	equ	0xFFB
  2902                           pclath	equ	0xFFA
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           postinc0	equ	0xFEE
  2912                           fsr0h	equ	0xFEA
  2913                           fsr0l	equ	0xFE9
  2914                           wreg	equ	0xFE8
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           bsr	equ	0xFE0
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _moveMouse *****************
  2925 ;; Defined at:
  2926 ;;		line 292 in file "interrupts.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  action          1    wreg     unsigned char 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  action          1   17[COMRAM] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;		None               void
  2933 ;; Registers used:
  2934 ;;		wreg
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;Total ram usage:        1 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_high_isr
  2950 ;;		_KController
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text17
  2955  001AD0                     __ptext17:
  2956                           	opt stack 0
  2957  001AD0                     _moveMouse:
  2958                           	opt stack 25
  2959                           
  2960                           ;incstack = 0
  2961                           ;moveMouse@action stored from wreg
  2962  001AD0  6E12               	movwf	moveMouse@action,c
  2963                           
  2964                           ;interrupts.c: 294: LATC = action;
  2965  001AD2  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2966  001AD6  0012               	return		;funcret
  2967  001AD8                     __end_of_moveMouse:
  2968                           	opt stack 0
  2969                           pclatu	equ	0xFFB
  2970                           pclath	equ	0xFFA
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           intcon2	equ	0xFF1
  2979                           postinc0	equ	0xFEE
  2980                           fsr0h	equ	0xFEA
  2981                           fsr0l	equ	0xFE9
  2982                           wreg	equ	0xFE8
  2983                           fsr1h	equ	0xFE2
  2984                           fsr1l	equ	0xFE1
  2985                           bsr	equ	0xFE0
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function _motorCounterUpdate *****************
  2993 ;; Defined at:
  2994 ;;		line 240 in file "interrupts.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  side            1    wreg     enum E4082
  2997 ;;  reverse         1   17[COMRAM] unsigned char 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  side            1   18[COMRAM] enum E4082
  3000 ;; Return value:  Size  Location     Type
  3001 ;;		None               void
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        2 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_KController
  3019 ;;		_rotate
  3020 ;;		_Reversing
  3021 ;;		_forward
  3022 ;;		_smoothTurn
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text18
  3027  001682                     __ptext18:
  3028                           	opt stack 0
  3029  001682                     _motorCounterUpdate:
  3030                           	opt stack 24
  3031                           
  3032                           ;incstack = 0
  3033                           ;motorCounterUpdate@side stored from wreg
  3034  001682  6E13               	movwf	motorCounterUpdate@side,c
  3035                           
  3036                           ;interrupts.c: 242: if(side == LEFT && reverse == 1)
  3037  001684  5013               	movf	motorCounterUpdate@side,w,c
  3038  001686  A4D8               	btfss	status,2,c
  3039  001688  D01B               	goto	i2l1365
  3040  00168A  0412               	decf	motorCounterUpdate@reverse,w,c
  3041  00168C  B4D8               	btfsc	status,2,c
  3042  00168E  D00B               	goto	i2l1363
  3043  001690  D017               	goto	i2l1365
  3044                           
  3045                           ;interrupts.c: 243: {
  3046                           ;interrupts.c: 244: switch(LMotorCounter)
  3047  001692  D009               	goto	i2l1363
  3048  001694                     i2l1353:
  3049  001694  0E02               	movlw	2
  3050  001696  D004               	goto	L11
  3051  001698                     i2l1355:
  3052  001698  0E04               	movlw	4
  3053  00169A  D002               	goto	L11
  3054                           
  3055                           ;interrupts.c: 248: case 0b00000100: LMotorCounter = 0b00001000; break;
  3056  00169C  D03E               	goto	i2l1397
  3057                           
  3058                           ;interrupts.c: 249: case 0b00001000: LMotorCounter = 0b00000001; break;
  3059  00169E  D039               	goto	i2l1391
  3060  0016A0                     L11:
  3061  0016A0  6E53               	movwf	_LMotorCounter,c
  3062  0016A2  D068               	goto	i2l121
  3063                           
  3064                           ;interrupts.c: 250: default: LMotorCounter = 0b00000001;
  3065  0016A4  D036               	goto	i2l1391
  3066  0016A6                     i2l1363:
  3067  0016A6  5053               	movf	_LMotorCounter,w,c
  3068                           
  3069                           ; Switch size 1, requested type "space"
  3070                           ; Number of cases is 4, Range of values is 1 to 8
  3071                           ; switch strategies available:
  3072                           ; Name         Instructions Cycles
  3073                           ; simple_byte           13     7 (average)
  3074                           ;	Chosen strategy is simple_byte
  3075  0016A8  0A01               	xorlw	1	; case 1
  3076  0016AA  B4D8               	btfsc	status,2,c
  3077  0016AC  D7F3               	goto	i2l1353
  3078  0016AE  0A03               	xorlw	3	; case 2
  3079  0016B0  B4D8               	btfsc	status,2,c
  3080  0016B2  D7F2               	goto	i2l1355
  3081  0016B4  0A06               	xorlw	6	; case 4
  3082  0016B6  B4D8               	btfsc	status,2,c
  3083  0016B8  D030               	goto	i2l1397
  3084  0016BA  0A0C               	xorlw	12	; case 8
  3085  0016BC  D02A               	goto	i2l1391
  3086                           
  3087                           ;interrupts.c: 252: } else if(side == RIGHT && reverse == 1)
  3088  0016BE  D05A               	goto	i2l121
  3089  0016C0                     i2l1365:
  3090  0016C0  0413               	decf	motorCounterUpdate@side,w,c
  3091  0016C2  A4D8               	btfss	status,2,c
  3092  0016C4  D01D               	goto	i2l1383
  3093  0016C6  0412               	decf	motorCounterUpdate@reverse,w,c
  3094  0016C8  B4D8               	btfsc	status,2,c
  3095  0016CA  D00B               	goto	i2l1381
  3096  0016CC  D019               	goto	i2l1383
  3097                           
  3098                           ;interrupts.c: 253: {
  3099                           ;interrupts.c: 254: switch(RMotorCounter)
  3100  0016CE  D009               	goto	i2l1381
  3101  0016D0                     i2l1371:
  3102  0016D0  0E08               	movlw	8
  3103  0016D2  D040               	goto	L19
  3104  0016D4                     i2l1373:
  3105  0016D4  0E01               	movlw	1
  3106  0016D6  D03E               	goto	L19
  3107  0016D8                     i2l1375:
  3108  0016D8  0E02               	movlw	2
  3109  0016DA  D03C               	goto	L19
  3110  0016DC                     i2l1377:
  3111  0016DC  0E04               	movlw	4
  3112  0016DE  D03A               	goto	L19
  3113                           
  3114                           ;interrupts.c: 260: default: RMotorCounter = 0b00001000;
  3115  0016E0  D7F7               	goto	i2l1371
  3116  0016E2                     i2l1381:
  3117  0016E2  5054               	movf	_RMotorCounter,w,c
  3118                           
  3119                           ; Switch size 1, requested type "space"
  3120                           ; Number of cases is 4, Range of values is 1 to 8
  3121                           ; switch strategies available:
  3122                           ; Name         Instructions Cycles
  3123                           ; simple_byte           13     7 (average)
  3124                           ;	Chosen strategy is simple_byte
  3125  0016E4  0A01               	xorlw	1	; case 1
  3126  0016E6  B4D8               	btfsc	status,2,c
  3127  0016E8  D7F3               	goto	i2l1371
  3128  0016EA  0A03               	xorlw	3	; case 2
  3129  0016EC  B4D8               	btfsc	status,2,c
  3130  0016EE  D7F2               	goto	i2l1373
  3131  0016F0  0A06               	xorlw	6	; case 4
  3132  0016F2  B4D8               	btfsc	status,2,c
  3133  0016F4  D7F1               	goto	i2l1375
  3134  0016F6  0A0C               	xorlw	12	; case 8
  3135  0016F8  B4D8               	btfsc	status,2,c
  3136  0016FA  D7F0               	goto	i2l1377
  3137  0016FC  D7E9               	goto	i2l1371
  3138                           
  3139                           ;interrupts.c: 262: } else if(side == LEFT && reverse == 0)
  3140  0016FE  D03A               	goto	i2l121
  3141  001700                     i2l1383:
  3142  001700  5013               	movf	motorCounterUpdate@side,w,c
  3143  001702  A4D8               	btfss	status,2,c
  3144  001704  D01B               	goto	i2l1401
  3145  001706  5012               	movf	motorCounterUpdate@reverse,w,c
  3146  001708  B4D8               	btfsc	status,2,c
  3147  00170A  D009               	goto	i2l1399
  3148  00170C  D017               	goto	i2l1401
  3149                           
  3150                           ;interrupts.c: 263: {
  3151                           ;interrupts.c: 264: switch(LMotorCounter)
  3152  00170E  D007               	goto	i2l1399
  3153                           
  3154                           ;interrupts.c: 265: {
  3155                           ;interrupts.c: 266: case 0b00000001: LMotorCounter = 0b00001000; break;
  3156  001710  D004               	goto	i2l1397
  3157  001712                     i2l1391:
  3158  001712  0E01               	movlw	1
  3159  001714  D7C5               	goto	L11
  3160                           
  3161                           ;interrupts.c: 268: case 0b00000100: LMotorCounter = 0b00000010; break;
  3162  001716  D7BE               	goto	i2l1353
  3163                           
  3164                           ;interrupts.c: 269: case 0b00001000: LMotorCounter = 0b00000100; break;
  3165  001718  D7BF               	goto	i2l1355
  3166  00171A                     i2l1397:
  3167  00171A  0E08               	movlw	8
  3168  00171C  D7C1               	goto	L11
  3169  00171E                     i2l1399:
  3170  00171E  5053               	movf	_LMotorCounter,w,c
  3171                           
  3172                           ; Switch size 1, requested type "space"
  3173                           ; Number of cases is 4, Range of values is 1 to 8
  3174                           ; switch strategies available:
  3175                           ; Name         Instructions Cycles
  3176                           ; simple_byte           13     7 (average)
  3177                           ;	Chosen strategy is simple_byte
  3178  001720  0A01               	xorlw	1	; case 1
  3179  001722  B4D8               	btfsc	status,2,c
  3180  001724  D7FA               	goto	i2l1397
  3181  001726  0A03               	xorlw	3	; case 2
  3182  001728  B4D8               	btfsc	status,2,c
  3183  00172A  D7F3               	goto	i2l1391
  3184  00172C  0A06               	xorlw	6	; case 4
  3185  00172E  B4D8               	btfsc	status,2,c
  3186  001730  D7B1               	goto	i2l1353
  3187  001732  0A0C               	xorlw	12	; case 8
  3188  001734  B4D8               	btfsc	status,2,c
  3189  001736  D7B0               	goto	i2l1355
  3190  001738  D7F0               	goto	i2l1397
  3191                           
  3192                           ;interrupts.c: 272: } else if(side == RIGHT && reverse == 0)
  3193  00173A  D01C               	goto	i2l121
  3194  00173C                     i2l1401:
  3195  00173C  0413               	decf	motorCounterUpdate@side,w,c
  3196  00173E  A4D8               	btfss	status,2,c
  3197  001740  D019               	goto	i2l121
  3198  001742  5012               	movf	motorCounterUpdate@reverse,w,c
  3199  001744  B4D8               	btfsc	status,2,c
  3200  001746  D009               	goto	i2l1417
  3201  001748  D015               	goto	i2l121
  3202                           
  3203                           ;interrupts.c: 273: {
  3204                           ;interrupts.c: 274: switch(RMotorCounter)
  3205  00174A  D007               	goto	i2l1417
  3206                           
  3207                           ;interrupts.c: 275: {
  3208                           ;interrupts.c: 276: case 0b00000001: RMotorCounter = 0b00000010; break;
  3209  00174C  D7C5               	goto	i2l1375
  3210                           
  3211                           ;interrupts.c: 277: case 0b00000010: RMotorCounter = 0b00000100; break;
  3212  00174E  D7C6               	goto	i2l1377
  3213                           
  3214                           ;interrupts.c: 278: case 0b00000100: RMotorCounter = 0b00001000; break;
  3215  001750  D7BF               	goto	i2l1371
  3216                           
  3217                           ;interrupts.c: 279: case 0b00001000: RMotorCounter = 0b00000001; break;
  3218  001752  D7C0               	goto	i2l1373
  3219  001754                     L19:
  3220  001754  6E54               	movwf	_RMotorCounter,c
  3221  001756  D00E               	goto	i2l121
  3222                           
  3223                           ;interrupts.c: 280: default: RMotorCounter = 0b00000001;
  3224  001758  D7BD               	goto	i2l1373
  3225  00175A                     i2l1417:
  3226  00175A  5054               	movf	_RMotorCounter,w,c
  3227                           
  3228                           ; Switch size 1, requested type "space"
  3229                           ; Number of cases is 4, Range of values is 1 to 8
  3230                           ; switch strategies available:
  3231                           ; Name         Instructions Cycles
  3232                           ; simple_byte           13     7 (average)
  3233                           ;	Chosen strategy is simple_byte
  3234  00175C  0A01               	xorlw	1	; case 1
  3235  00175E  B4D8               	btfsc	status,2,c
  3236  001760  D7BB               	goto	i2l1375
  3237  001762  0A03               	xorlw	3	; case 2
  3238  001764  B4D8               	btfsc	status,2,c
  3239  001766  D7BA               	goto	i2l1377
  3240  001768  0A06               	xorlw	6	; case 4
  3241  00176A  B4D8               	btfsc	status,2,c
  3242  00176C  D7B1               	goto	i2l1371
  3243  00176E  0A0C               	xorlw	12	; case 8
  3244  001770  D7B1               	goto	i2l1373
  3245  001772  D000               	goto	i2l121
  3246  001774                     i2l121:
  3247  001774  0012               	return		;funcret
  3248  001776                     __end_of_motorCounterUpdate:
  3249                           	opt stack 0
  3250                           pclatu	equ	0xFFB
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           intcon2	equ	0xFF1
  3260                           postinc0	equ	0xFEE
  3261                           fsr0h	equ	0xFEA
  3262                           fsr0l	equ	0xFE9
  3263                           wreg	equ	0xFE8
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           bsr	equ	0xFE0
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _merge *****************
  3274 ;; Defined at:
  3275 ;;		line 285 in file "interrupts.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  left            1    wreg     unsigned char 
  3278 ;;  right           1   17[COMRAM] unsigned char 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  left            1   18[COMRAM] unsigned char 
  3281 ;;  merged          1   19[COMRAM] unsigned char 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      unsigned char 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3291 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;Total ram usage:        3 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_high_isr
  3301 ;;		_KController
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text19
  3306  001AB6                     __ptext19:
  3307                           	opt stack 0
  3308  001AB6                     _merge:
  3309                           	opt stack 25
  3310                           
  3311                           ;incstack = 0
  3312                           ;merge@left stored from wreg
  3313  001AB6  6E13               	movwf	merge@left,c
  3314                           
  3315                           ;interrupts.c: 287: unsigned char merged;
  3316                           ;interrupts.c: 288: merged = left + (right << 4);
  3317  001AB8  3812               	swapf	merge@right,w,c
  3318  001ABA  0BF0               	andlw	240
  3319  001ABC  2413               	addwf	merge@left,w,c
  3320  001ABE  6E14               	movwf	merge@merged,c
  3321                           
  3322                           ;interrupts.c: 289: return merged;
  3323  001AC0  5014               	movf	merge@merged,w,c
  3324  001AC2  D000               	goto	i2l124
  3325  001AC4                     i2l124:
  3326  001AC4  0012               	return		;funcret
  3327  001AC6                     __end_of_merge:
  3328                           	opt stack 0
  3329                           pclatu	equ	0xFFB
  3330                           pclath	equ	0xFFA
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           intcon	equ	0xFF2
  3338                           intcon2	equ	0xFF1
  3339                           postinc0	equ	0xFEE
  3340                           fsr0h	equ	0xFEA
  3341                           fsr0l	equ	0xFE9
  3342                           wreg	equ	0xFE8
  3343                           fsr1h	equ	0xFE2
  3344                           fsr1l	equ	0xFE1
  3345                           bsr	equ	0xFE0
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _ABS *****************
  3353 ;; Defined at:
  3354 ;;		line 298 in file "interrupts.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  x               2   17[COMRAM] int 
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  2   17[COMRAM] int 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;Total ram usage:        2 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_KController
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text20
  3382  001A88                     __ptext20:
  3383                           	opt stack 0
  3384  001A88                     _ABS:
  3385                           	opt stack 24
  3386                           
  3387                           ;interrupts.c: 300: if(x<0) x = -x;
  3388                           
  3389                           ;incstack = 0
  3390  001A88  AE13               	btfss	ABS@x+1,7,c
  3391  001A8A  D005               	goto	i2l1423
  3392  001A8C  6C12               	negf	ABS@x,c
  3393  001A8E  1E13               	comf	ABS@x+1,f,c
  3394  001A90  B0D8               	btfsc	status,0,c
  3395  001A92  2A13               	incf	ABS@x+1,f,c
  3396  001A94  D000               	goto	i2l1423
  3397  001A96                     i2l1423:
  3398                           
  3399                           ;interrupts.c: 301: return x;
  3400  001A96  C012  F012         	movff	ABS@x,?_ABS
  3401  001A9A  C013  F013         	movff	ABS@x+1,?_ABS+1
  3402  001A9E  D000               	goto	i2l131
  3403  001AA0                     i2l131:
  3404  001AA0  0012               	return		;funcret
  3405  001AA2                     __end_of_ABS:
  3406                           	opt stack 0
  3407                           pclatu	equ	0xFFB
  3408                           pclath	equ	0xFFA
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           intcon2	equ	0xFF1
  3417                           postinc0	equ	0xFEE
  3418                           fsr0h	equ	0xFEA
  3419                           fsr0l	equ	0xFE9
  3420                           wreg	equ	0xFE8
  3421                           fsr1h	equ	0xFE2
  3422                           fsr1l	equ	0xFE1
  3423                           bsr	equ	0xFE0
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           pclatu	equ	0xFFB
  3430                           pclath	equ	0xFFA
  3431                           tblptru	equ	0xFF8
  3432                           tblptrh	equ	0xFF7
  3433                           tblptrl	equ	0xFF6
  3434                           tablat	equ	0xFF5
  3435                           prodh	equ	0xFF4
  3436                           prodl	equ	0xFF3
  3437                           intcon	equ	0xFF2
  3438                           intcon2	equ	0xFF1
  3439                           postinc0	equ	0xFEE
  3440                           fsr0h	equ	0xFEA
  3441                           fsr0l	equ	0xFE9
  3442                           wreg	equ	0xFE8
  3443                           fsr1h	equ	0xFE2
  3444                           fsr1l	equ	0xFE1
  3445                           bsr	equ	0xFE0
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452                           	psect	rparam
  3453  0000                     pclatu	equ	0xFFB
  3454                           pclath	equ	0xFFA
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           intcon2	equ	0xFF1
  3463                           postinc0	equ	0xFEE
  3464                           fsr0h	equ	0xFEA
  3465                           fsr0l	equ	0xFE9
  3466                           wreg	equ	0xFE8
  3467                           fsr1h	equ	0xFE2
  3468                           fsr1l	equ	0xFE1
  3469                           bsr	equ	0xFE0
  3470                           postinc2	equ	0xFDE
  3471                           postdec2	equ	0xFDD
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     60      88
    BANK0           128     94      94
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             54 COMRAM     6     6      0
                                             10 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    4409
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0     940
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     918
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1392
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     918
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5E      5E       5       73.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3C      58       1       69.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B6      34        0.0%
DATA                 0      0      B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 15 21:50:08 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l234 1984                           l243 1A3A                           l248 1A4E  
                         l264 1516                           l257 14B4                           l274 1A00  
                         l282 19E0                           l275 1A08                           l278 1A28  
                         l279 1A30                           l475 18E4                           _ABS 1A88  
                __CFG_CPB$OFF 000000                           _MAX 1A0A                           _MIN 19E2  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1A50                  _rotatingSide 0057  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1029 1A48                          l1429 1970  
                        l1711 1878                          l1721 18A0                          l1705 1866  
                        l1801 165E                          l1811 1AAC                          l1717 188E  
                        l1733 18CA                          l1805 1674                          l1719 1898  
                        l1737 18DA                          l1729 18BE                          l1753 12D2  
                        l1763 143C                          l1747 12AE                          l1757 1332  
                        l1759 1426                          l1783 14FE                          l1793 15A0  
                        l1777 14DA                          l1795 15F4                          l1797 1648  
                        u1500 14D8                          u1510 14FC                          _LATC 000F8B  
                        u1450 12AC                          u1460 12D0                          u1535 1522  
                        u1587 1976                          i2l80 1250                          _main 1AA2  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          fsr1l 000FE1                          fsr2l 000FD9  
                        pclat 000FFA                          prodh 000FF4                          prodl 000FF3  
                        start 00A2                 __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0033  
               __CFG_MCLRE$ON 000000                  ___param_bank 000010               __end_of_InitApp 1922  
                       ??_ABS 0014                         ??_MAX 0032                         ??_MIN 0032  
  __size_of_sensorComputation 022C                         ?_main 0001               __end_of___awdiv 18E6  
                       _T0CON 000FD5               ___awdiv@divisor 002A                         i2l121 1774  
                       i2l131 1AA0                         i2l124 1AC4                         i2l135 184E  
             ___awdiv@counter 002C                         _TRISC 000F94           _ConfigureOscillator 1AC6  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 195E  
                       _merge 1AB6               __end_of_forward 1A6C               __end_of_low_isr 00A2  
                       tablat 000FF5                         status 000FD8          ?_ConfigureOscillator 0001  
             __initialization 1992                  __end_of_main 1AB6                        ??_main 003D  
               __activetblptr 000002                        ?_delay 0028                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0028  
                      i2l1401 173C                        i2l1423 1A96                        i2l1503 1810  
                      i2l1417 175A                        i2l1353 1694                        i2l1513 1848  
                      i2l1371 16D0                        i2l1355 1698                        i2l1363 16A6  
                      i2l1507 1824                        i2l1373 16D4                        i2l1381 16E2  
                      i2l1365 16C0                        i2l1509 1834                        i2l1391 1712  
                      i2l1375 16D8                        i2l1383 1700                        i2l1623 1160  
                      i2l1377 16DC                        i2l1617 1132                        i2l1609 111A  
                      i2l1475 1940                        i2l1643 11CE                        i2l1619 1142  
                      i2l1635 1190                        i2l1397 171A                        i2l1477 1956  
                      i2l1645 11D4                        i2l1661 1248                        i2l1399 171E  
                      i2l1655 1220                        i2l1583 1074                        i2l1497 17F2  
                      i2l1489 17C0                        i2l1593 10B0                        i2l1587 1092  
                      i2l1595 10B8                        i2l1659 1230                        i2l1579 1060  
                      i2l1597 10C6                        i2l1589 10A2                        i2l1599 10D8  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 002D  
       ??_ConfigureOscillator 0028                   merge@merged 0014                __CFG_XINST$OFF 000000  
          sensorComputation@i 0086            sensorComputation@j 0088              __end_of_high_isr 128A  
                      ___wmul 19BA                     ??___awdiv 002C                __CFG_STVREN$ON 000000  
                      delay@x 002B                        clear_0 1998              ___awdiv@quotient 002E  
                      _rotate 1922            __size_of_Reversing 001C                  __pdataCOMRAM 0058  
                   ??_forward 0014                  __mediumconst 0000                     ??_low_isr 0001  
              _ReverseCounter 004D                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 19B0  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 1992               moveMouse@action 0012  
               __end_of_merge 1AC6          KController@correctTo 0017    __end_of_motorCounterUpdate 1776  
              _ForwardCounter 0045                       ??_delay 002A                       ??_merge 0013  
          _AlgorithmSelection 1A32                  _LTurnCounter 0047             __end_of_Reversing 1A88  
                  _delay_time 0051             _MotorDelayCounter 0049           ?_AlgorithmSelection 0001  
                     ?___wmul 0028            __size_of_moveMouse 0008                       ?_rotate 0001  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u96_40 1820  
                     i2u98_40 1844          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
               _LMotorCounter 0053                       _InitApp 18E6                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 1850               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 1992                       __ramtop 1000  
                     __ptext0 1AA2                       __ptext1 14B6                       __ptext2 128A  
                     __ptext3 19BA                       __ptext4 1850                       __ptext5 19E2  
                     __ptext6 1A0A                       __ptext7 18E6                       __ptext8 195E  
                     __ptext9 1A32               __size_of_rotate 003C                  __size_of_ABS 001A  
                __size_of_MAX 0028                  __size_of_MIN 0028                       _forward 1A50  
                     delay@ms 0028                       _low_isr 0018                 ?_sensorUpdate 0001  
                  ??_high_isr 001A                __pintcode_body 100A          end_of_initialization 19B0  
            _sensorCorrection 1001             __end_of_moveMouse 1AD8                 __Lmediumconst 0000  
                     int_func 100A               _controllerSteps 0058                    _justTurned 0056  
        __size_of_KController 00DA                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0037   __end_of_ConfigureOscillator 1AD0                  _RTurnCounter 004B  
              __end_of___wmul 19E2                 __pidataCOMRAM 1AD8                __end_of_rotate 195E  
         start_initialization 1992                   __end_of_ABS 1AA2                   __end_of_MAX 1A32  
                 __end_of_MIN 1A0A            _motorCounterUpdate 1682              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 1A6C  
                    ??___wmul 002C              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 003D  
               __pcstackBANK0 0080        sensorUpdate@sensorTemp 008A             __size_of_high_isr 1282  
                    ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001  
                   _algorithm 0055                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 0028          __end_of_sensorUpdate 1682        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_forward 0001                      ?_low_isr 0001                __size_of_delay 0034  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 002C  
                   _moveMouse 1AD0                      i2u110_40 106E                      i2u111_40 1082  
                    i2u130_40 11E4                      i2u114_41 10C4                      i2u131_40 11F4  
                    i2u115_40 10D6                      i2u124_40 1170                      i2u116_40 10E8  
                    i2u108_40 104C                      i2u109_40 105A                      i2u126_40 11A0  
                    i2u127_40 11B0                      i2u119_40 1114              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0028                 _RMotorCounter 0054  
                  rotate@side 0014                 ??_KController 0015                    ?_moveMouse 0001  
            __size_of_InitApp 003C                      __Hrparam 0000                     merge@left 0013  
        sensorComputation@max 0080                      __Lrparam 0000          sensorComputation@min 0082  
        sensorComputation@sum 0084                   ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of_forward 001C              __size_of_low_isr 008A  
                    __ptext10 1AC6                      __ptext20 1A88                      __ptext13 1922  
                    __ptext14 1A50                      __ptext15 1A6C                      __ptext16 1776  
                    __ptext17 1AD0                      __ptext18 1682                      __ptext19 1AB6  
                    _high_isr 0008                 __size_of_main 0014                 _RotateCounter 004F  
       __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A           __end_of_KController 1850  
           _sensorComputation 128A                    _INTCONbits 000FF2            ?_sensorComputation 0033  
               sensorUpdate@i 00DA                 sensorUpdate@j 00DC                  _sensorUpdate 14B6  
                    intlevel1 0000                      intlevel2 0000           ??_sensorComputation 0035  
                 ??_moveMouse 0012               KController@diff 0018     __end_of_sensorComputation 14B6  
                 _sensorValue 003D   __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012  
                 _KController 1776  
