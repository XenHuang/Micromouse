

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 10 23:33:11 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           	psect	smallconst
    29  001000                     __psmallconst:
    30                           	opt stack 0
    31  001000  00                 	db	0
    32  001001                     _sensorCorrection:
    33                           	opt stack 0
    34  001001  16                 	db	22
    35  001002  17                 	db	23
    36  001003  11                 	db	17
    37  001004  11                 	db	17
    38  001005                     __end_of_sensorCorrection:
    39                           	opt stack 0
    40  001005                     _sensorLocation:
    41                           	opt stack 0
    42  001005  1B                 	db	27
    43  001006  2B                 	db	43
    44  001007  1F                 	db	31
    45  001008  33                 	db	51
    46  001009                     __end_of_sensorLocation:
    47                           	opt stack 0
    48  0000                     _ADCON0	set	4034
    49  0000                     _ADCON0bits	set	4034
    50  0000                     _ADCON1	set	4033
    51  0000                     _ADCON2	set	4032
    52  0000                     _ADRESH	set	4036
    53  0000                     _ADRESL	set	4035
    54  0000                     _INTCON	set	4082
    55  0000                     _INTCON2	set	4081
    56  0000                     _INTCONbits	set	4082
    57  0000                     _LATC	set	3979
    58  0000                     _OSCCON	set	4051
    59  0000                     _OSCTUNE	set	3995
    60  0000                     _PORTBbits	set	3969
    61  0000                     _T0CON	set	4053
    62  0000                     _TRISBbits	set	3987
    63  0000                     _TRISC	set	3988
    64  0000                     _TRISEbits	set	3990
    65                           
    66                           ; #config settings
    67  001009  00                 	db	0	; dummy byte at the end
    68  0000                     
    69                           	psect	cinit
    70  00163C                     __pcinit:
    71                           	opt stack 0
    72  00163C                     start_initialization:
    73                           	opt stack 0
    74  00163C                     __initialization:
    75                           	opt stack 0
    76                           
    77                           ; Clear objects allocated to COMRAM (19 bytes)
    78  00163C  EE00  F042         	lfsr	0,__pbssCOMRAM
    79  001640  0E13               	movlw	19
    80  001642                     clear_0:
    81  001642  6AEE               	clrf	postinc0,c
    82  001644  06E8               	decf	wreg,f,c
    83  001646  E1FD               	bnz	clear_0
    84  001648                     end_of_initialization:
    85                           	opt stack 0
    86  001648                     __end_of__initialization:
    87                           	opt stack 0
    88  001648  0E00               	movlw	low (__Lmediumconst shr (0+16))
    89  00164A  6EF8               	movwf	tblptru,c
    90  00164C  0100               	movlb	0
    91  00164E  EF29  F00B         	goto	_main	;jump to C main() function
    92                           tblptru	equ	0xFF8
    93                           postinc0	equ	0xFEE
    94                           wreg	equ	0xFE8
    95                           
    96                           	psect	bssCOMRAM
    97  000042                     __pbssCOMRAM:
    98                           	opt stack 0
    99  000042                     _sensorValue:
   100                           	opt stack 0
   101  000042                     	ds	8
   102  00004A                     _LMotorDelayCounter:
   103                           	opt stack 0
   104  00004A                     	ds	2
   105  00004C                     _MotorDelayCounter:
   106                           	opt stack 0
   107  00004C                     	ds	2
   108  00004E                     _RMotorDelayCounter:
   109                           	opt stack 0
   110  00004E                     	ds	2
   111  000050                     _delay_time:
   112                           	opt stack 0
   113  000050                     	ds	2
   114  000052                     _LMotorCounter:
   115                           	opt stack 0
   116  000052                     	ds	1
   117  000053                     _RMotorCounter:
   118                           	opt stack 0
   119  000053                     	ds	1
   120  000054                     _algorithm:
   121                           	opt stack 0
   122  000054                     	ds	1
   123                           tblptru	equ	0xFF8
   124                           postinc0	equ	0xFEE
   125                           wreg	equ	0xFE8
   126                           
   127                           	psect	cstackBANK0
   128  000080                     __pcstackBANK0:
   129                           	opt stack 0
   130  000080                     sensorUpdate@sensorTemp:
   131                           	opt stack 0
   132                           
   133                           ; 80 bytes @ 0x0
   134  000080                     	ds	80
   135  0000D0                     sensorUpdate@i:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0x50
   139  0000D0                     	ds	2
   140  0000D2                     sensorUpdate@j:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x52
   144  0000D2                     	ds	2
   145                           tblptru	equ	0xFF8
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	cstackCOMRAM
   150  000001                     __pcstackCOMRAM:
   151                           	opt stack 0
   152  000001                     ??_low_isr:
   153  000001                     
   154                           ; 0 bytes @ 0x0
   155  000001                     	ds	17
   156  000012                     motorCounterUpdate@reverse:
   157                           	opt stack 0
   158  000012                     merge@right:
   159                           	opt stack 0
   160  000012                     moveMouse@action:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x11
   164  000012                     	ds	1
   165  000013                     motorCounterUpdate@side:
   166                           	opt stack 0
   167  000013                     merge@left:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x12
   171  000013                     	ds	1
   172  000014                     merge@merged:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x13
   176  000014                     	ds	1
   177  000015                     ??_high_isr:
   178                           
   179                           ; 0 bytes @ 0x14
   180  000015                     	ds	14
   181  000023                     ?___wmul:
   182                           	opt stack 0
   183  000023                     ?___awdiv:
   184                           	opt stack 0
   185  000023                     ___wmul@multiplier:
   186                           	opt stack 0
   187  000023                     ___awdiv@dividend:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x22
   191  000023                     	ds	2
   192  000025                     ___wmul@multiplicand:
   193                           	opt stack 0
   194  000025                     ___awdiv@divisor:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x24
   198  000025                     	ds	2
   199  000027                     ___awdiv@counter:
   200                           	opt stack 0
   201  000027                     ___wmul@product:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x26
   205  000027                     	ds	1
   206  000028                     ___awdiv@sign:
   207                           	opt stack 0
   208                           
   209                           ; 1 bytes @ 0x27
   210  000028                     	ds	1
   211  000029                     ?_MIN:
   212                           	opt stack 0
   213  000029                     ?_MAX:
   214                           	opt stack 0
   215  000029                     MIN@a:
   216                           	opt stack 0
   217  000029                     MAX@a:
   218                           	opt stack 0
   219  000029                     ___awdiv@quotient:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x28
   223  000029                     	ds	2
   224  00002B                     MIN@b:
   225                           	opt stack 0
   226  00002B                     MAX@b:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x2A
   230  00002B                     	ds	2
   231  00002D                     ??_MIN:
   232  00002D                     ??_MAX:
   233                           
   234                           ; 0 bytes @ 0x2C
   235  00002D                     	ds	1
   236  00002E                     sensorComputation@sensorTemp:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x2D
   240  00002E                     	ds	2
   241  000030                     ??_sensorComputation:
   242                           
   243                           ; 0 bytes @ 0x2F
   244  000030                     	ds	2
   245  000032                     sensorComputation@max:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x31
   249  000032                     	ds	2
   250  000034                     sensorComputation@min:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x33
   254  000034                     	ds	2
   255  000036                     sensorComputation@sum:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x35
   259  000036                     	ds	2
   260  000038                     sensorComputation@i:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x37
   264  000038                     	ds	2
   265  00003A                     sensorComputation@j:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x39
   269  00003A                     	ds	2
   270  00003C                     ??_sensorUpdate:
   271                           
   272                           ; 0 bytes @ 0x3B
   273  00003C                     	ds	6
   274  000042                     tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           ; 0 bytes @ 0x41
   279 ;;
   280 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   281 ;;
   282 ;; *************** function _main *****************
   283 ;; Defined at:
   284 ;;		line 41 in file "main.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;		None
   289 ;; Return value:  Size  Location     Type
   290 ;;		None               void
   291 ;; Registers used:
   292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   302 ;;Total ram usage:        0 bytes
   303 ;; Hardware stack levels required when called:    6
   304 ;; This function calls:
   305 ;;		_ConfigureOscillator
   306 ;;		_InitApp
   307 ;;		_sensorUpdate
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           	psect	text0
   314  001652                     __ptext0:
   315                           	opt stack 0
   316  001652                     _main:
   317                           	opt stack 25
   318                           
   319                           ;main.c: 44: ConfigureOscillator();
   320                           
   321                           ;incstack = 0
   322  001652  EC3B  F00B         	call	_ConfigureOscillator	;wreg free
   323                           
   324                           ;main.c: 47: InitApp();
   325  001656  ECC6  F00A         	call	_InitApp	;wreg free
   326  00165A  D000               	goto	l1288
   327  00165C                     l1288:
   328                           
   329                           ;main.c: 50: {
   330                           ;main.c: 51: sensorUpdate();
   331  00165C  ECF7  F008         	call	_sensorUpdate	;wreg free
   332  001660  D7FD               	goto	l1288
   333  001662  EF51  F000         	goto	start
   334  001666                     __end_of_main:
   335                           	opt stack 0
   336                           tblptru	equ	0xFF8
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340 ;; *************** function _sensorUpdate *****************
   341 ;; Defined at:
   342 ;;		line 136 in file "user.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;  sensorTemp     80    0[BANK0 ] int [10][4]
   347 ;;  j               2   82[BANK0 ] int 
   348 ;;  i               2   80[BANK0 ] int 
   349 ;; Return value:  Size  Location     Type
   350 ;;		None               void
   351 ;; Registers used:
   352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : 0/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   359 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   361 ;;      Totals:         6      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   362 ;;Total ram usage:       90 bytes
   363 ;; Hardware stack levels used:    1
   364 ;; Hardware stack levels required when called:    5
   365 ;; This function calls:
   366 ;;		___wmul
   367 ;;		_sensorComputation
   368 ;; This function is called by:
   369 ;;		_main
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           	psect	text1
   374  0011EE                     __ptext1:
   375                           	opt stack 0
   376  0011EE                     _sensorUpdate:
   377                           	opt stack 25
   378                           
   379                           ;user.c: 138: int i,j;
   380                           ;user.c: 139: int sensorTemp[4][10];
   381                           ;user.c: 142: for(i = 0; i < 10; i++)
   382                           
   383                           ;incstack = 0
   384  0011EE  0E00               	movlw	0
   385  0011F0  0100               	movlb	0	; () banked
   386  0011F2  6FD1               	movwf	(sensorUpdate@i+1)& (0+255),b
   387  0011F4  0E00               	movlw	0
   388  0011F6  6FD0               	movwf	sensorUpdate@i& (0+255),b
   389                           
   390                           ; BSR set to: 0
   391  0011F8  0100               	movlb	0	; () banked
   392  0011FA  BFD1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   393  0011FC  D00A               	goto	l1194
   394  0011FE  0100               	movlb	0	; () banked
   395  001200  51D1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   396  001202  E106               	bnz	u560
   397  001204  0E0A               	movlw	10
   398  001206  0100               	movlb	0	; () banked
   399  001208  5DD0               	subwf	sensorUpdate@i& (0+255),w,b
   400  00120A  B0D8               	btfsc	status,0,c
   401  00120C  D0CF               	goto	l1222
   402  00120E  D001               	goto	l1194
   403  001210                     u560:
   404                           
   405                           ; BSR set to: 0
   406  001210  D0CD               	goto	l1222
   407  001212                     l1194:
   408                           
   409                           ; BSR set to: 0
   410                           ;user.c: 143: {
   411                           ;user.c: 144: for(j = 0 ; j < 4 ; j++)
   412  001212  0E00               	movlw	0
   413  001214  0100               	movlb	0	; () banked
   414  001216  6FD3               	movwf	(sensorUpdate@j+1)& (0+255),b
   415  001218  0E00               	movlw	0
   416  00121A  6FD2               	movwf	sensorUpdate@j& (0+255),b
   417                           
   418                           ; BSR set to: 0
   419  00121C  0100               	movlb	0	; () banked
   420  00121E  BFD3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   421  001220  D00A               	goto	l1200
   422  001222  0100               	movlb	0	; () banked
   423  001224  51D3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   424  001226  E106               	bnz	u570
   425  001228  0E04               	movlw	4
   426  00122A  0100               	movlb	0	; () banked
   427  00122C  5DD2               	subwf	sensorUpdate@j& (0+255),w,b
   428  00122E  B0D8               	btfsc	status,0,c
   429  001230  D0B2               	goto	l1218
   430  001232  D001               	goto	l1200
   431  001234                     u570:
   432                           
   433                           ; BSR set to: 0
   434  001234  D0B0               	goto	l1218
   435  001236                     l1200:
   436                           
   437                           ; BSR set to: 0
   438                           ;user.c: 145: {
   439                           ;user.c: 146: ADCON0 = sensorLocation[j];
   440  001236  0E05               	movlw	low _sensorLocation
   441  001238  0100               	movlb	0	; () banked
   442  00123A  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   443  00123C  6EF6               	movwf	tblptrl,c
   444  00123E  0E10               	movlw	high _sensorLocation
   445  001240  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   446  001242  6EF7               	movwf	tblptrh,c
   447  001244                     	if	0	;There are less than 3 active tblptr bytes
   448  001244                     	endif
   449  001244  0008               	tblrd		*
   450  001246  CFF5 FFC2          	movff	tablat,4034	;volatile
   451                           
   452                           ; BSR set to: 0
   453                           ;user.c: 148: ADCON0bits.GO_DONE = 1;
   454  00124A  82C2               	bsf	4034,1,c	;volatile
   455                           
   456                           ;user.c: 149: while(ADCON0bits.GO_DONE != 0);
   457  00124C  D000               	goto	l185
   458  00124E                     l185:
   459  00124E  B2C2               	btfsc	4034,1,c	;volatile
   460  001250  D7FE               	goto	l185
   461                           
   462                           ;user.c: 150: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   463  001252  CFC3 F03C          	movff	4035,??_sensorUpdate	;volatile
   464  001256  0E06               	movlw	6
   465  001258  6E3D               	movwf	(??_sensorUpdate+1)& (0+255),c
   466  00125A                     u595:
   467  00125A  90D8               	bcf	status,0,c
   468  00125C  323C               	rrcf	??_sensorUpdate,f,c
   469  00125E  2E3D               	decfsz	(??_sensorUpdate+1)& (0+255),f,c
   470  001260  D7FC               	goto	u595
   471  001262  503C               	movf	??_sensorUpdate,w,c
   472  001264  CFC4 F03E          	movff	4036,??_sensorUpdate+2	;volatile
   473  001268  6A3F               	clrf	(??_sensorUpdate+3)& (0+255),c
   474  00126A  90D8               	bcf	status,0,c
   475  00126C  363E               	rlcf	??_sensorUpdate+2,f,c
   476  00126E  363F               	rlcf	??_sensorUpdate+3,f,c
   477  001270  90D8               	bcf	status,0,c
   478  001272  363E               	rlcf	??_sensorUpdate+2,f,c
   479  001274  363F               	rlcf	??_sensorUpdate+3,f,c
   480  001276  263E               	addwf	??_sensorUpdate+2,f,c
   481  001278  0E00               	movlw	0
   482  00127A  223F               	addwfc	??_sensorUpdate+3,f,c
   483  00127C  C0D2  F023         	movff	sensorUpdate@j,___wmul@multiplier
   484  001280  C0D3  F024         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   485  001284  0E00               	movlw	0
   486  001286  6E26               	movwf	___wmul@multiplicand+1,c
   487  001288  0E14               	movlw	20
   488  00128A  6E25               	movwf	___wmul@multiplicand,c
   489  00128C  ECE2  F00A         	call	___wmul	;wreg free
   490  001290  0E80               	movlw	low sensorUpdate@sensorTemp
   491  001292  6E40               	movwf	(??_sensorUpdate+4)& (0+255),c
   492  001294  0E00               	movlw	high sensorUpdate@sensorTemp
   493  001296  6E41               	movwf	(??_sensorUpdate+5)& (0+255),c
   494  001298  5023               	movf	?___wmul,w,c
   495  00129A  2640               	addwf	??_sensorUpdate+4,f,c
   496  00129C  5024               	movf	?___wmul+1,w,c
   497  00129E  2241               	addwfc	??_sensorUpdate+5,f,c
   498  0012A0  90D8               	bcf	status,0,c
   499  0012A2  0100               	movlb	0	; () banked
   500  0012A4  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   501  0012A6  6ED9               	movwf	fsr2l,c
   502  0012A8  0100               	movlb	0	; () banked
   503  0012AA  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   504  0012AC  6EDA               	movwf	fsr2h,c
   505  0012AE  5040               	movf	??_sensorUpdate+4,w,c
   506  0012B0  26D9               	addwf	fsr2l,f,c
   507  0012B2  5041               	movf	??_sensorUpdate+5,w,c
   508  0012B4  22DA               	addwfc	fsr2h,f,c
   509  0012B6  C03E  FFDE         	movff	??_sensorUpdate+2,postinc2
   510  0012BA  C03F  FFDD         	movff	??_sensorUpdate+3,postdec2
   511                           
   512                           ; BSR set to: 0
   513                           ;user.c: 153: if(j == 0 || j == 3)
   514  0012BE  0100               	movlb	0	; () banked
   515  0012C0  51D2               	movf	sensorUpdate@j& (0+255),w,b
   516  0012C2  0100               	movlb	0	; () banked
   517  0012C4  11D3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   518  0012C6  B4D8               	btfsc	status,2,c
   519  0012C8  D007               	goto	l1210
   520                           
   521                           ; BSR set to: 0
   522  0012CA  0E03               	movlw	3
   523  0012CC  0100               	movlb	0	; () banked
   524  0012CE  19D2               	xorwf	sensorUpdate@j& (0+255),w,b
   525  0012D0  0100               	movlb	0	; () banked
   526  0012D2  11D3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   527  0012D4  A4D8               	btfss	status,2,c
   528  0012D6  D02A               	goto	l1212
   529  0012D8                     l1210:
   530                           
   531                           ; BSR set to: 0
   532                           ;user.c: 154: sensorTemp[j][i] -= sensorCorrection[j];
   533  0012D8  C0D2  F023         	movff	sensorUpdate@j,___wmul@multiplier
   534  0012DC  C0D3  F024         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   535  0012E0  0E00               	movlw	0
   536  0012E2  6E26               	movwf	___wmul@multiplicand+1,c
   537  0012E4  0E14               	movlw	20
   538  0012E6  6E25               	movwf	___wmul@multiplicand,c
   539  0012E8  ECE2  F00A         	call	___wmul	;wreg free
   540  0012EC  0E80               	movlw	low sensorUpdate@sensorTemp
   541  0012EE  6E3C               	movwf	??_sensorUpdate& (0+255),c
   542  0012F0  0E00               	movlw	high sensorUpdate@sensorTemp
   543  0012F2  6E3D               	movwf	(??_sensorUpdate+1)& (0+255),c
   544  0012F4  5023               	movf	?___wmul,w,c
   545  0012F6  263C               	addwf	??_sensorUpdate,f,c
   546  0012F8  5024               	movf	?___wmul+1,w,c
   547  0012FA  223D               	addwfc	??_sensorUpdate+1,f,c
   548  0012FC  90D8               	bcf	status,0,c
   549  0012FE  0100               	movlb	0	; () banked
   550  001300  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   551  001302  6ED9               	movwf	fsr2l,c
   552  001304  0100               	movlb	0	; () banked
   553  001306  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   554  001308  6EDA               	movwf	fsr2h,c
   555  00130A  503C               	movf	??_sensorUpdate,w,c
   556  00130C  26D9               	addwf	fsr2l,f,c
   557  00130E  503D               	movf	??_sensorUpdate+1,w,c
   558  001310  22DA               	addwfc	fsr2h,f,c
   559  001312  0E01               	movlw	low _sensorCorrection
   560  001314  0100               	movlb	0	; () banked
   561  001316  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   562  001318  6EF6               	movwf	tblptrl,c
   563  00131A  0E10               	movlw	high _sensorCorrection
   564  00131C  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   565  00131E  6EF7               	movwf	tblptrh,c
   566  001320                     	if	0	;There are less than 3 active tblptr bytes
   567  001320                     	endif
   568  001320  0008               	tblrd		*
   569  001322  50F5               	movf	tablat,w,c
   570  001324  5EDE               	subwf	postinc2,f,c
   571  001326  0E00               	movlw	0
   572  001328  5ADD               	subwfb	postdec2,f,c
   573  00132A  D02A               	goto	l1214
   574  00132C                     l1212:
   575                           
   576                           ; BSR set to: 0
   577                           ;user.c: 155: else
   578                           ;user.c: 156: sensorTemp[j][i] += sensorCorrection[j];
   579  00132C  C0D2  F023         	movff	sensorUpdate@j,___wmul@multiplier
   580  001330  C0D3  F024         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   581  001334  0E00               	movlw	0
   582  001336  6E26               	movwf	___wmul@multiplicand+1,c
   583  001338  0E14               	movlw	20
   584  00133A  6E25               	movwf	___wmul@multiplicand,c
   585  00133C  ECE2  F00A         	call	___wmul	;wreg free
   586  001340  0E80               	movlw	low sensorUpdate@sensorTemp
   587  001342  6E3C               	movwf	??_sensorUpdate& (0+255),c
   588  001344  0E00               	movlw	high sensorUpdate@sensorTemp
   589  001346  6E3D               	movwf	(??_sensorUpdate+1)& (0+255),c
   590  001348  5023               	movf	?___wmul,w,c
   591  00134A  263C               	addwf	??_sensorUpdate,f,c
   592  00134C  5024               	movf	?___wmul+1,w,c
   593  00134E  223D               	addwfc	??_sensorUpdate+1,f,c
   594  001350  90D8               	bcf	status,0,c
   595  001352  0100               	movlb	0	; () banked
   596  001354  35D0               	rlcf	sensorUpdate@i& (0+255),w,b
   597  001356  6ED9               	movwf	fsr2l,c
   598  001358  0100               	movlb	0	; () banked
   599  00135A  35D1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   600  00135C  6EDA               	movwf	fsr2h,c
   601  00135E  503C               	movf	??_sensorUpdate,w,c
   602  001360  26D9               	addwf	fsr2l,f,c
   603  001362  503D               	movf	??_sensorUpdate+1,w,c
   604  001364  22DA               	addwfc	fsr2h,f,c
   605  001366  0E01               	movlw	low _sensorCorrection
   606  001368  0100               	movlb	0	; () banked
   607  00136A  25D2               	addwf	sensorUpdate@j& (0+255),w,b
   608  00136C  6EF6               	movwf	tblptrl,c
   609  00136E  0E10               	movlw	high _sensorCorrection
   610  001370  21D3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   611  001372  6EF7               	movwf	tblptrh,c
   612  001374                     	if	0	;There are less than 3 active tblptr bytes
   613  001374                     	endif
   614  001374  0008               	tblrd		*
   615  001376  50F5               	movf	tablat,w,c
   616  001378  26DE               	addwf	postinc2,f,c
   617  00137A  0E00               	movlw	0
   618  00137C  22DD               	addwfc	postdec2,f,c
   619  00137E  D000               	goto	l1214
   620  001380                     l1214:
   621                           
   622                           ; BSR set to: 0
   623  001380  0100               	movlb	0	; () banked
   624  001382  4BD2               	infsnz	sensorUpdate@j& (0+255),f,b
   625  001384  2BD3               	incf	(sensorUpdate@j+1)& (0+255),f,b
   626                           
   627                           ; BSR set to: 0
   628  001386  0100               	movlb	0	; () banked
   629  001388  BFD3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   630  00138A  D755               	goto	l1200
   631  00138C  0100               	movlb	0	; () banked
   632  00138E  51D3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   633  001390  E102               	bnz	l1218
   634  001392  D74A               	goto	L1
   635  001394  D000               	goto	l1218
   636  001396                     l1218:
   637                           
   638                           ; BSR set to: 0
   639  001396  0100               	movlb	0	; () banked
   640  001398  4BD0               	infsnz	sensorUpdate@i& (0+255),f,b
   641  00139A  2BD1               	incf	(sensorUpdate@i+1)& (0+255),f,b
   642                           
   643                           ; BSR set to: 0
   644  00139C  0100               	movlb	0	; () banked
   645  00139E  BFD1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   646  0013A0  D738               	goto	l1194
   647  0013A2  0100               	movlb	0	; () banked
   648  0013A4  51D1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   649  0013A6  E102               	bnz	l1222
   650  0013A8  D72D               	goto	L2
   651  0013AA  D000               	goto	l1222
   652  0013AC                     l1222:
   653                           
   654                           ; BSR set to: 0
   655                           ;user.c: 157: }
   656                           ;user.c: 158: }
   657                           ;user.c: 161: sensorComputation(sensorTemp);
   658  0013AC  0E80               	movlw	low sensorUpdate@sensorTemp
   659  0013AE  6E2E               	movwf	sensorComputation@sensorTemp,c
   660  0013B0  0E00               	movlw	high sensorUpdate@sensorTemp
   661  0013B2  6E2F               	movwf	sensorComputation@sensorTemp+1,c
   662  0013B4  EC05  F008         	call	_sensorComputation	;wreg free
   663  0013B8  0012               	return		;funcret
   664  0013BA                     __end_of_sensorUpdate:
   665                           	opt stack 0
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           postinc2	equ	0xFDE
   673                           postdec2	equ	0xFDD
   674                           fsr2h	equ	0xFDA
   675                           fsr2l	equ	0xFD9
   676                           status	equ	0xFD8
   677                           
   678 ;; *************** function _sensorComputation *****************
   679 ;; Defined at:
   680 ;;		line 115 in file "user.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;  sensorTemp      2   45[COMRAM] PTR int [10]
   683 ;;		 -> sensorUpdate@sensorTemp(80), 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  j               2   57[COMRAM] int 
   686 ;;  i               2   55[COMRAM] int 
   687 ;;  sum             2   53[COMRAM] int 
   688 ;;  min             2   51[COMRAM] int 
   689 ;;  max             2   49[COMRAM] int 
   690 ;; Return value:  Size  Location     Type
   691 ;;		None               void
   692 ;; Registers used:
   693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;Total ram usage:       14 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    4
   706 ;; This function calls:
   707 ;;		_MAX
   708 ;;		_MIN
   709 ;;		___awdiv
   710 ;;		___wmul
   711 ;; This function is called by:
   712 ;;		_sensorUpdate
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text2
   717  00100A                     __ptext2:
   718                           	opt stack 0
   719  00100A                     _sensorComputation:
   720                           	opt stack 25
   721                           
   722                           ;user.c: 117: int max,min,i,j,sum;
   723                           ;user.c: 118: for(i = 0; i < 4 ; i++)
   724                           
   725                           ;incstack = 0
   726  00100A  0E00               	movlw	0
   727  00100C  6E39               	movwf	sensorComputation@i+1,c
   728  00100E  0E00               	movlw	0
   729  001010  6E38               	movwf	sensorComputation@i,c
   730  001012  BE39               	btfsc	sensorComputation@i+1,7,c
   731  001014  D008               	goto	l1124
   732  001016  5039               	movf	sensorComputation@i+1,w,c
   733  001018  E105               	bnz	u480
   734  00101A  0E04               	movlw	4
   735  00101C  5C38               	subwf	sensorComputation@i,w,c
   736  00101E  B0D8               	btfsc	status,0,c
   737  001020  D0E5               	goto	l178
   738  001022  D001               	goto	l1124
   739  001024                     u480:
   740  001024  D0E3               	goto	l178
   741  001026                     l1124:
   742                           
   743                           ;user.c: 119: {
   744                           ;user.c: 120: for(j = 0 ; j < 10 ; j++)
   745  001026  0E00               	movlw	0
   746  001028  6E3B               	movwf	sensorComputation@j+1,c
   747  00102A  0E00               	movlw	0
   748  00102C  6E3A               	movwf	sensorComputation@j,c
   749  00102E  BE3B               	btfsc	sensorComputation@j+1,7,c
   750  001030  D008               	goto	l1130
   751  001032  503B               	movf	sensorComputation@j+1,w,c
   752  001034  E105               	bnz	u490
   753  001036  0E0A               	movlw	10
   754  001038  5C3A               	subwf	sensorComputation@j,w,c
   755  00103A  B0D8               	btfsc	status,0,c
   756  00103C  D0A8               	goto	l1140
   757  00103E  D001               	goto	l1130
   758  001040                     u490:
   759  001040  D0A6               	goto	l1140
   760  001042                     l1130:
   761                           
   762                           ;user.c: 121: {
   763                           ;user.c: 122: if(j == 0)
   764  001042  503A               	movf	sensorComputation@j,w,c
   765  001044  103B               	iorwf	sensorComputation@j+1,w,c
   766  001046  A4D8               	btfss	status,2,c
   767  001048  D028               	goto	l1134
   768                           
   769                           ;user.c: 123: {
   770                           ;user.c: 124: sum = min = max = sensorTemp[i][j];
   771  00104A  C038  F023         	movff	sensorComputation@i,___wmul@multiplier
   772  00104E  C039  F024         	movff	sensorComputation@i+1,___wmul@multiplier+1
   773  001052  0E00               	movlw	0
   774  001054  6E26               	movwf	___wmul@multiplicand+1,c
   775  001056  0E14               	movlw	20
   776  001058  6E25               	movwf	___wmul@multiplicand,c
   777  00105A  ECE2  F00A         	call	___wmul	;wreg free
   778  00105E  C02E  F030         	movff	sensorComputation@sensorTemp,??_sensorComputation
   779  001062  C02F  F031         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   780  001066  5023               	movf	?___wmul,w,c
   781  001068  2630               	addwf	??_sensorComputation,f,c
   782  00106A  5024               	movf	?___wmul+1,w,c
   783  00106C  2231               	addwfc	??_sensorComputation+1,f,c
   784  00106E  90D8               	bcf	status,0,c
   785  001070  343A               	rlcf	sensorComputation@j,w,c
   786  001072  6ED9               	movwf	fsr2l,c
   787  001074  343B               	rlcf	sensorComputation@j+1,w,c
   788  001076  6EDA               	movwf	fsr2h,c
   789  001078  5030               	movf	??_sensorComputation,w,c
   790  00107A  26D9               	addwf	fsr2l,f,c
   791  00107C  5031               	movf	??_sensorComputation+1,w,c
   792  00107E  22DA               	addwfc	fsr2h,f,c
   793  001080  CFDE F032          	movff	postinc2,sensorComputation@max
   794  001084  CFDD F033          	movff	postdec2,sensorComputation@max+1
   795  001088  C032  F034         	movff	sensorComputation@max,sensorComputation@min
   796  00108C  C033  F035         	movff	sensorComputation@max+1,sensorComputation@min+1
   797  001090  C034  F036         	movff	sensorComputation@min,sensorComputation@sum
   798  001094  C035  F037         	movff	sensorComputation@min+1,sensorComputation@sum+1
   799                           
   800                           ;user.c: 125: continue;
   801  001098  D072               	goto	l1136
   802  00109A                     l1134:
   803                           
   804                           ;user.c: 126: }
   805                           ;user.c: 127: min = MIN(sensorTemp[i][j],min);
   806  00109A  C038  F023         	movff	sensorComputation@i,___wmul@multiplier
   807  00109E  C039  F024         	movff	sensorComputation@i+1,___wmul@multiplier+1
   808  0010A2  0E00               	movlw	0
   809  0010A4  6E26               	movwf	___wmul@multiplicand+1,c
   810  0010A6  0E14               	movlw	20
   811  0010A8  6E25               	movwf	___wmul@multiplicand,c
   812  0010AA  ECE2  F00A         	call	___wmul	;wreg free
   813  0010AE  C02E  F030         	movff	sensorComputation@sensorTemp,??_sensorComputation
   814  0010B2  C02F  F031         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   815  0010B6  5023               	movf	?___wmul,w,c
   816  0010B8  2630               	addwf	??_sensorComputation,f,c
   817  0010BA  5024               	movf	?___wmul+1,w,c
   818  0010BC  2231               	addwfc	??_sensorComputation+1,f,c
   819  0010BE  90D8               	bcf	status,0,c
   820  0010C0  343A               	rlcf	sensorComputation@j,w,c
   821  0010C2  6ED9               	movwf	fsr2l,c
   822  0010C4  343B               	rlcf	sensorComputation@j+1,w,c
   823  0010C6  6EDA               	movwf	fsr2h,c
   824  0010C8  5030               	movf	??_sensorComputation,w,c
   825  0010CA  26D9               	addwf	fsr2l,f,c
   826  0010CC  5031               	movf	??_sensorComputation+1,w,c
   827  0010CE  22DA               	addwfc	fsr2h,f,c
   828  0010D0  CFDE F029          	movff	postinc2,MIN@a
   829  0010D4  CFDD F02A          	movff	postdec2,MIN@a+1
   830  0010D8  C034  F02B         	movff	sensorComputation@min,MIN@b
   831  0010DC  C035  F02C         	movff	sensorComputation@min+1,MIN@b+1
   832  0010E0  ECF6  F00A         	call	_MIN	;wreg free
   833  0010E4  C029  F034         	movff	?_MIN,sensorComputation@min
   834  0010E8  C02A  F035         	movff	?_MIN+1,sensorComputation@min+1
   835                           
   836                           ;user.c: 128: max = MAX(sensorTemp[i][j],max);
   837  0010EC  C038  F023         	movff	sensorComputation@i,___wmul@multiplier
   838  0010F0  C039  F024         	movff	sensorComputation@i+1,___wmul@multiplier+1
   839  0010F4  0E00               	movlw	0
   840  0010F6  6E26               	movwf	___wmul@multiplicand+1,c
   841  0010F8  0E14               	movlw	20
   842  0010FA  6E25               	movwf	___wmul@multiplicand,c
   843  0010FC  ECE2  F00A         	call	___wmul	;wreg free
   844  001100  C02E  F030         	movff	sensorComputation@sensorTemp,??_sensorComputation
   845  001104  C02F  F031         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   846  001108  5023               	movf	?___wmul,w,c
   847  00110A  2630               	addwf	??_sensorComputation,f,c
   848  00110C  5024               	movf	?___wmul+1,w,c
   849  00110E  2231               	addwfc	??_sensorComputation+1,f,c
   850  001110  90D8               	bcf	status,0,c
   851  001112  343A               	rlcf	sensorComputation@j,w,c
   852  001114  6ED9               	movwf	fsr2l,c
   853  001116  343B               	rlcf	sensorComputation@j+1,w,c
   854  001118  6EDA               	movwf	fsr2h,c
   855  00111A  5030               	movf	??_sensorComputation,w,c
   856  00111C  26D9               	addwf	fsr2l,f,c
   857  00111E  5031               	movf	??_sensorComputation+1,w,c
   858  001120  22DA               	addwfc	fsr2h,f,c
   859  001122  CFDE F029          	movff	postinc2,MAX@a
   860  001126  CFDD F02A          	movff	postdec2,MAX@a+1
   861  00112A  C032  F02B         	movff	sensorComputation@max,MAX@b
   862  00112E  C033  F02C         	movff	sensorComputation@max+1,MAX@b+1
   863  001132  EC0A  F00B         	call	_MAX	;wreg free
   864  001136  C029  F032         	movff	?_MAX,sensorComputation@max
   865  00113A  C02A  F033         	movff	?_MAX+1,sensorComputation@max+1
   866                           
   867                           ;user.c: 129: sum += sensorTemp[i][j];
   868  00113E  C038  F023         	movff	sensorComputation@i,___wmul@multiplier
   869  001142  C039  F024         	movff	sensorComputation@i+1,___wmul@multiplier+1
   870  001146  0E00               	movlw	0
   871  001148  6E26               	movwf	___wmul@multiplicand+1,c
   872  00114A  0E14               	movlw	20
   873  00114C  6E25               	movwf	___wmul@multiplicand,c
   874  00114E  ECE2  F00A         	call	___wmul	;wreg free
   875  001152  C02E  F030         	movff	sensorComputation@sensorTemp,??_sensorComputation
   876  001156  C02F  F031         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   877  00115A  5023               	movf	?___wmul,w,c
   878  00115C  2630               	addwf	??_sensorComputation,f,c
   879  00115E  5024               	movf	?___wmul+1,w,c
   880  001160  2231               	addwfc	??_sensorComputation+1,f,c
   881  001162  90D8               	bcf	status,0,c
   882  001164  343A               	rlcf	sensorComputation@j,w,c
   883  001166  6ED9               	movwf	fsr2l,c
   884  001168  343B               	rlcf	sensorComputation@j+1,w,c
   885  00116A  6EDA               	movwf	fsr2h,c
   886  00116C  5030               	movf	??_sensorComputation,w,c
   887  00116E  26D9               	addwf	fsr2l,f,c
   888  001170  5031               	movf	??_sensorComputation+1,w,c
   889  001172  22DA               	addwfc	fsr2h,f,c
   890  001174  50DE               	movf	postinc2,w,c
   891  001176  2636               	addwf	sensorComputation@sum,f,c
   892  001178  50DD               	movf	postdec2,w,c
   893  00117A  2237               	addwfc	sensorComputation@sum+1,f,c
   894  00117C  D000               	goto	l1136
   895  00117E                     l1136:
   896  00117E  4A3A               	infsnz	sensorComputation@j,f,c
   897  001180  2A3B               	incf	sensorComputation@j+1,f,c
   898  001182  BE3B               	btfsc	sensorComputation@j+1,7,c
   899  001184  D75E               	goto	l1130
   900  001186  503B               	movf	sensorComputation@j+1,w,c
   901  001188  E102               	bnz	l1140
   902  00118A  D755               	goto	L3
   903  00118C  D000               	goto	l1140
   904  00118E                     l1140:
   905                           
   906                           ;user.c: 130: }
   907                           ;user.c: 131: sum = sum - min - max;
   908  00118E  5032               	movf	sensorComputation@max,w,c
   909  001190  2434               	addwf	sensorComputation@min,w,c
   910  001192  6E30               	movwf	??_sensorComputation& (0+255),c
   911  001194  5033               	movf	sensorComputation@max+1,w,c
   912  001196  2035               	addwfc	sensorComputation@min+1,w,c
   913  001198  6E31               	movwf	(??_sensorComputation+1)& (0+255),c
   914  00119A  1E30               	comf	??_sensorComputation,f,c
   915  00119C  1E31               	comf	??_sensorComputation+1,f,c
   916  00119E  4A30               	infsnz	??_sensorComputation,f,c
   917  0011A0  2A31               	incf	??_sensorComputation+1,f,c
   918  0011A2  5036               	movf	sensorComputation@sum,w,c
   919  0011A4  2430               	addwf	??_sensorComputation,w,c
   920  0011A6  6E36               	movwf	sensorComputation@sum,c
   921  0011A8  5037               	movf	sensorComputation@sum+1,w,c
   922  0011AA  2031               	addwfc	??_sensorComputation+1,w,c
   923  0011AC  6E37               	movwf	sensorComputation@sum+1,c
   924                           
   925                           ;user.c: 132: sensorValue[i] = sum/(10-2);
   926  0011AE  C036  F023         	movff	sensorComputation@sum,___awdiv@dividend
   927  0011B2  C037  F024         	movff	sensorComputation@sum+1,___awdiv@dividend+1
   928  0011B6  0E00               	movlw	0
   929  0011B8  6E26               	movwf	___awdiv@divisor+1,c
   930  0011BA  0E08               	movlw	8
   931  0011BC  6E25               	movwf	___awdiv@divisor,c
   932  0011BE  EC37  F00A         	call	___awdiv	;wreg free
   933  0011C2  90D8               	bcf	status,0,c
   934  0011C4  3438               	rlcf	sensorComputation@i,w,c
   935  0011C6  6ED9               	movwf	fsr2l,c
   936  0011C8  3439               	rlcf	sensorComputation@i+1,w,c
   937  0011CA  6EDA               	movwf	fsr2h,c
   938  0011CC  0E42               	movlw	low _sensorValue
   939  0011CE  26D9               	addwf	fsr2l,f,c
   940  0011D0  0E00               	movlw	high _sensorValue
   941  0011D2  22DA               	addwfc	fsr2h,f,c
   942  0011D4  C023  FFDE         	movff	?___awdiv,postinc2
   943  0011D8  C024  FFDD         	movff	?___awdiv+1,postdec2
   944  0011DC  4A38               	infsnz	sensorComputation@i,f,c
   945  0011DE  2A39               	incf	sensorComputation@i+1,f,c
   946  0011E0  BE39               	btfsc	sensorComputation@i+1,7,c
   947  0011E2  D721               	goto	l1124
   948  0011E4  5039               	movf	sensorComputation@i+1,w,c
   949  0011E6  E102               	bnz	l178
   950  0011E8  D718               	goto	L4
   951  0011EA  D000               	goto	l178
   952  0011EC                     l178:
   953  0011EC  0012               	return		;funcret
   954  0011EE                     __end_of_sensorComputation:
   955                           	opt stack 0
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postinc2	equ	0xFDE
   963                           postdec2	equ	0xFDD
   964                           fsr2h	equ	0xFDA
   965                           fsr2l	equ	0xFD9
   966                           status	equ	0xFD8
   967                           
   968 ;; *************** function ___wmul *****************
   969 ;; Defined at:
   970 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  multiplier      2   34[COMRAM] unsigned int 
   973 ;;  multiplicand    2   36[COMRAM] unsigned int 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  product         2   38[COMRAM] unsigned int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  2   34[COMRAM] unsigned int 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0, prodl, prodh
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;Total ram usage:        6 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; Hardware stack levels required when called:    3
   992 ;; This function calls:
   993 ;;		Nothing
   994 ;; This function is called by:
   995 ;;		_sensorComputation
   996 ;;		_sensorUpdate
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text3
  1001  0015C4                     __ptext3:
  1002                           	opt stack 0
  1003  0015C4                     ___wmul:
  1004                           	opt stack 25
  1005                           
  1006                           ;incstack = 0
  1007  0015C4  5023               	movf	___wmul@multiplier,w,c
  1008  0015C6  0225               	mulwf	___wmul@multiplicand,c
  1009  0015C8  CFF3 F027          	movff	prodl,___wmul@product
  1010  0015CC  CFF4 F028          	movff	prodh,___wmul@product+1
  1011  0015D0  5023               	movf	___wmul@multiplier,w,c
  1012  0015D2  0226               	mulwf	___wmul@multiplicand+1,c
  1013  0015D4  50F3               	movf	prodl,w,c
  1014  0015D6  2628               	addwf	___wmul@product+1,f,c
  1015  0015D8  5024               	movf	___wmul@multiplier+1,w,c
  1016  0015DA  0225               	mulwf	___wmul@multiplicand,c
  1017  0015DC  50F3               	movf	prodl,w,c
  1018  0015DE  2628               	addwf	___wmul@product+1,f,c
  1019  0015E0  C027  F023         	movff	___wmul@product,?___wmul
  1020  0015E4  C028  F024         	movff	___wmul@product+1,?___wmul+1
  1021  0015E8  D000               	goto	l203
  1022  0015EA                     l203:
  1023  0015EA  0012               	return		;funcret
  1024  0015EC                     __end_of___wmul:
  1025                           	opt stack 0
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           prodh	equ	0xFF4
  1031                           prodl	equ	0xFF3
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postinc2	equ	0xFDE
  1035                           postdec2	equ	0xFDD
  1036                           fsr2h	equ	0xFDA
  1037                           fsr2l	equ	0xFD9
  1038                           status	equ	0xFD8
  1039                           
  1040 ;; *************** function ___awdiv *****************
  1041 ;; Defined at:
  1042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;  dividend        2   34[COMRAM] int 
  1045 ;;  divisor         2   36[COMRAM] int 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  quotient        2   40[COMRAM] int 
  1048 ;;  sign            1   39[COMRAM] unsigned char 
  1049 ;;  counter         1   38[COMRAM] unsigned char 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  2   34[COMRAM] int 
  1052 ;; Registers used:
  1053 ;;		wreg, status,2, status,0
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1062 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1063 ;;Total ram usage:        8 bytes
  1064 ;; Hardware stack levels used:    1
  1065 ;; Hardware stack levels required when called:    3
  1066 ;; This function calls:
  1067 ;;		Nothing
  1068 ;; This function is called by:
  1069 ;;		_sensorComputation
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           	psect	text4
  1074  00146E                     __ptext4:
  1075                           	opt stack 0
  1076  00146E                     ___awdiv:
  1077                           	opt stack 25
  1078                           
  1079                           ;incstack = 0
  1080  00146E  0E00               	movlw	0
  1081  001470  6E28               	movwf	___awdiv@sign,c
  1082  001472  AE26               	btfss	___awdiv@divisor+1,7,c
  1083  001474  D007               	goto	l1082
  1084  001476  6C25               	negf	___awdiv@divisor,c
  1085  001478  1E26               	comf	___awdiv@divisor+1,f,c
  1086  00147A  B0D8               	btfsc	status,0,c
  1087  00147C  2A26               	incf	___awdiv@divisor+1,f,c
  1088  00147E  0E01               	movlw	1
  1089  001480  6E28               	movwf	___awdiv@sign,c
  1090  001482  D000               	goto	l1082
  1091  001484                     l1082:
  1092  001484  AE24               	btfss	___awdiv@dividend+1,7,c
  1093  001486  D007               	goto	l1088
  1094  001488  6C23               	negf	___awdiv@dividend,c
  1095  00148A  1E24               	comf	___awdiv@dividend+1,f,c
  1096  00148C  B0D8               	btfsc	status,0,c
  1097  00148E  2A24               	incf	___awdiv@dividend+1,f,c
  1098  001490  0E01               	movlw	1
  1099  001492  1A28               	xorwf	___awdiv@sign,f,c
  1100  001494  D000               	goto	l1088
  1101  001496                     l1088:
  1102  001496  0E00               	movlw	0
  1103  001498  6E2A               	movwf	___awdiv@quotient+1,c
  1104  00149A  0E00               	movlw	0
  1105  00149C  6E29               	movwf	___awdiv@quotient,c
  1106  00149E  5025               	movf	___awdiv@divisor,w,c
  1107  0014A0  1026               	iorwf	___awdiv@divisor+1,w,c
  1108  0014A2  B4D8               	btfsc	status,2,c
  1109  0014A4  D021               	goto	l1110
  1110  0014A6  0E01               	movlw	1
  1111  0014A8  6E27               	movwf	___awdiv@counter,c
  1112  0014AA  D005               	goto	l1096
  1113  0014AC                     l1094:
  1114  0014AC  90D8               	bcf	status,0,c
  1115  0014AE  3625               	rlcf	___awdiv@divisor,f,c
  1116  0014B0  3626               	rlcf	___awdiv@divisor+1,f,c
  1117  0014B2  2A27               	incf	___awdiv@counter,f,c
  1118  0014B4  D000               	goto	l1096
  1119  0014B6                     l1096:
  1120  0014B6  BE26               	btfsc	___awdiv@divisor+1,7,c
  1121  0014B8  D002               	goto	l1098
  1122  0014BA  D7F8               	goto	l1094
  1123  0014BC  D000               	goto	l1098
  1124  0014BE                     l1098:
  1125  0014BE  90D8               	bcf	status,0,c
  1126  0014C0  3629               	rlcf	___awdiv@quotient,f,c
  1127  0014C2  362A               	rlcf	___awdiv@quotient+1,f,c
  1128  0014C4  5025               	movf	___awdiv@divisor,w,c
  1129  0014C6  5C23               	subwf	___awdiv@dividend,w,c
  1130  0014C8  5026               	movf	___awdiv@divisor+1,w,c
  1131  0014CA  5824               	subwfb	___awdiv@dividend+1,w,c
  1132  0014CC  A0D8               	btfss	status,0,c
  1133  0014CE  D006               	goto	l1106
  1134  0014D0  5025               	movf	___awdiv@divisor,w,c
  1135  0014D2  5E23               	subwf	___awdiv@dividend,f,c
  1136  0014D4  5026               	movf	___awdiv@divisor+1,w,c
  1137  0014D6  5A24               	subwfb	___awdiv@dividend+1,f,c
  1138  0014D8  8029               	bsf	___awdiv@quotient,0,c
  1139  0014DA  D000               	goto	l1106
  1140  0014DC                     l1106:
  1141  0014DC  90D8               	bcf	status,0,c
  1142  0014DE  3226               	rrcf	___awdiv@divisor+1,f,c
  1143  0014E0  3225               	rrcf	___awdiv@divisor,f,c
  1144  0014E2  2E27               	decfsz	___awdiv@counter,f,c
  1145  0014E4  D7EC               	goto	l1098
  1146  0014E6  D000               	goto	l1110
  1147  0014E8                     l1110:
  1148  0014E8  5028               	movf	___awdiv@sign,w,c
  1149  0014EA  B4D8               	btfsc	status,2,c
  1150  0014EC  D005               	goto	l1114
  1151  0014EE  6C29               	negf	___awdiv@quotient,c
  1152  0014F0  1E2A               	comf	___awdiv@quotient+1,f,c
  1153  0014F2  B0D8               	btfsc	status,0,c
  1154  0014F4  2A2A               	incf	___awdiv@quotient+1,f,c
  1155  0014F6  D000               	goto	l1114
  1156  0014F8                     l1114:
  1157  0014F8  C029  F023         	movff	___awdiv@quotient,?___awdiv
  1158  0014FC  C02A  F024         	movff	___awdiv@quotient+1,?___awdiv+1
  1159  001500  D000               	goto	l396
  1160  001502                     l396:
  1161  001502  0012               	return		;funcret
  1162  001504                     __end_of___awdiv:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postinc2	equ	0xFDE
  1173                           postdec2	equ	0xFDD
  1174                           fsr2h	equ	0xFDA
  1175                           fsr2l	equ	0xFD9
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _MIN *****************
  1179 ;; Defined at:
  1180 ;;		line 165 in file "user.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  a               2   40[COMRAM] int 
  1183 ;;  b               2   42[COMRAM] int 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;		None
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  2   40[COMRAM] int 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2, status,0
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1198 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;Total ram usage:        5 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    3
  1202 ;; This function calls:
  1203 ;;		Nothing
  1204 ;; This function is called by:
  1205 ;;		_sensorComputation
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text5
  1210  0015EC                     __ptext5:
  1211                           	opt stack 0
  1212  0015EC                     _MIN:
  1213                           	opt stack 25
  1214                           
  1215                           ;user.c: 167: if(a>b) return b;
  1216                           
  1217                           ;incstack = 0
  1218  0015EC  5029               	movf	MIN@a,w,c
  1219  0015EE  5C2B               	subwf	MIN@b,w,c
  1220  0015F0  502C               	movf	MIN@b+1,w,c
  1221  0015F2  0A80               	xorlw	128
  1222  0015F4  6E2D               	movwf	??_MIN& (0+255),c
  1223  0015F6  502A               	movf	MIN@a+1,w,c
  1224  0015F8  0A80               	xorlw	128
  1225  0015FA  582D               	subwfb	??_MIN& (0+255),w,c
  1226  0015FC  B0D8               	btfsc	status,0,c
  1227  0015FE  D005               	goto	l195
  1228  001600  C02B  F029         	movff	MIN@b,?_MIN
  1229  001604  C02C  F02A         	movff	MIN@b+1,?_MIN+1
  1230  001608  D004               	goto	l196
  1231  00160A                     l195:
  1232                           
  1233                           ;user.c: 168: return a;
  1234  00160A  C029  F029         	movff	MIN@a,?_MIN
  1235  00160E  C02A  F02A         	movff	MIN@a+1,?_MIN+1
  1236  001612                     l196:
  1237  001612  0012               	return		;funcret
  1238  001614                     __end_of_MIN:
  1239                           	opt stack 0
  1240                           tblptru	equ	0xFF8
  1241                           tblptrh	equ	0xFF7
  1242                           tblptrl	equ	0xFF6
  1243                           tablat	equ	0xFF5
  1244                           prodh	equ	0xFF4
  1245                           prodl	equ	0xFF3
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postinc2	equ	0xFDE
  1249                           postdec2	equ	0xFDD
  1250                           fsr2h	equ	0xFDA
  1251                           fsr2l	equ	0xFD9
  1252                           status	equ	0xFD8
  1253                           
  1254 ;; *************** function _MAX *****************
  1255 ;; Defined at:
  1256 ;;		line 171 in file "user.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  a               2   40[COMRAM] int 
  1259 ;;  b               2   42[COMRAM] int 
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  2   40[COMRAM] int 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;Total ram usage:        5 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    3
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_sensorComputation
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text6
  1286  001614                     __ptext6:
  1287                           	opt stack 0
  1288  001614                     _MAX:
  1289                           	opt stack 25
  1290                           
  1291                           ;user.c: 173: if(a>b) return a;
  1292                           
  1293                           ;incstack = 0
  1294  001614  5029               	movf	MAX@a,w,c
  1295  001616  5C2B               	subwf	MAX@b,w,c
  1296  001618  502C               	movf	MAX@b+1,w,c
  1297  00161A  0A80               	xorlw	128
  1298  00161C  6E2D               	movwf	??_MAX& (0+255),c
  1299  00161E  502A               	movf	MAX@a+1,w,c
  1300  001620  0A80               	xorlw	128
  1301  001622  582D               	subwfb	??_MAX& (0+255),w,c
  1302  001624  B0D8               	btfsc	status,0,c
  1303  001626  D005               	goto	l199
  1304  001628  C029  F029         	movff	MAX@a,?_MAX
  1305  00162C  C02A  F02A         	movff	MAX@a+1,?_MAX+1
  1306  001630  D004               	goto	l200
  1307  001632                     l199:
  1308                           
  1309                           ;user.c: 174: return b;
  1310  001632  C02B  F029         	movff	MAX@b,?_MAX
  1311  001636  C02C  F02A         	movff	MAX@b+1,?_MAX+1
  1312  00163A                     l200:
  1313  00163A  0012               	return		;funcret
  1314  00163C                     __end_of_MAX:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           prodh	equ	0xFF4
  1321                           prodl	equ	0xFF3
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postinc2	equ	0xFDE
  1325                           postdec2	equ	0xFDD
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330 ;; *************** function _InitApp *****************
  1331 ;; Defined at:
  1332 ;;		line 35 in file "user.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;		None               void
  1339 ;; Registers used:
  1340 ;;		wreg, status,2
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;Total ram usage:        0 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    3
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text7
  1361  00158C                     __ptext7:
  1362                           	opt stack 0
  1363  00158C                     _InitApp:
  1364                           	opt stack 27
  1365                           
  1366                           ;user.c: 39: TRISC = 0;
  1367                           
  1368                           ;incstack = 0
  1369  00158C  0E00               	movlw	0
  1370  00158E  6E94               	movwf	3988,c	;volatile
  1371                           
  1372                           ;user.c: 43: TRISEbits.TRISE1=1;
  1373  001590  8296               	bsf	3990,1,c	;volatile
  1374                           
  1375                           ;user.c: 45: TRISEbits.TRISE2=1;
  1376  001592  8496               	bsf	3990,2,c	;volatile
  1377                           
  1378                           ;user.c: 47: TRISBbits.RB1=1;
  1379  001594  8293               	bsf	3987,1,c	;volatile
  1380                           
  1381                           ;user.c: 49: TRISBbits.RB0=1;
  1382  001596  8093               	bsf	3987,0,c	;volatile
  1383                           
  1384                           ;user.c: 52: TRISBbits.RB3=1;
  1385  001598  8693               	bsf	3987,3,c	;volatile
  1386                           
  1387                           ;user.c: 54: TRISBbits.RB2=1;
  1388  00159A  8493               	bsf	3987,2,c	;volatile
  1389                           
  1390                           ;user.c: 57: if(PORTBbits.RB3 == TRUE)
  1391  00159C  A681               	btfss	3969,3,c	;volatile
  1392  00159E  D002               	goto	l948
  1393                           
  1394                           ;user.c: 58: algorithm = LEFTWALL;
  1395  0015A0  0E00               	movlw	0
  1396  0015A2  D001               	goto	L5
  1397  0015A4                     l948:
  1398                           
  1399                           ;user.c: 59: else
  1400                           ;user.c: 60: algorithm = RIGHTWALL;
  1401  0015A4  0E01               	movlw	1
  1402  0015A6                     L5:
  1403  0015A6  6E54               	movwf	_algorithm,c
  1404                           
  1405                           ;user.c: 63: ADCON1 =0b00000001;
  1406  0015A8  0E01               	movlw	1
  1407  0015AA  6EC1               	movwf	4033,c	;volatile
  1408                           
  1409                           ;user.c: 68: ADCON2=0b00001010;
  1410  0015AC  0E0A               	movlw	10
  1411  0015AE  6EC0               	movwf	4032,c	;volatile
  1412                           
  1413                           ;user.c: 73: ADCON0=0b00101011;
  1414  0015B0  0E2B               	movlw	43
  1415  0015B2  6EC2               	movwf	4034,c	;volatile
  1416                           
  1417                           ;user.c: 82: T0CON = 0b11000100;
  1418  0015B4  0EC4               	movlw	196
  1419  0015B6  6ED5               	movwf	4053,c	;volatile
  1420                           
  1421                           ;user.c: 90: INTCON2 = 0b11110100;
  1422  0015B8  0EF4               	movlw	244
  1423  0015BA  6EF1               	movwf	intcon2,c	;volatile
  1424                           
  1425                           ;user.c: 100: INTCON = 0b00100000;
  1426  0015BC  0E20               	movlw	32
  1427  0015BE  6EF2               	movwf	intcon,c	;volatile
  1428                           
  1429                           ;user.c: 112: INTCONbits.GIE = 1;
  1430  0015C0  8EF2               	bsf	intcon,7,c	;volatile
  1431  0015C2  0012               	return		;funcret
  1432  0015C4                     __end_of_InitApp:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           intcon	equ	0xFF2
  1441                           intcon2	equ	0xFF1
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postinc2	equ	0xFDE
  1445                           postdec2	equ	0xFDD
  1446                           fsr2h	equ	0xFDA
  1447                           fsr2l	equ	0xFD9
  1448                           status	equ	0xFD8
  1449                           
  1450 ;; *************** function _ConfigureOscillator *****************
  1451 ;; Defined at:
  1452 ;;		line 24 in file "system.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;		None
  1457 ;; Return value:  Size  Location     Type
  1458 ;;		None               void
  1459 ;; Registers used:
  1460 ;;		wreg, status,2
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;Total ram usage:        0 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    3
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text8
  1481  001676                     __ptext8:
  1482                           	opt stack 0
  1483  001676                     _ConfigureOscillator:
  1484                           	opt stack 27
  1485                           
  1486                           ;system.c: 29: OSCCON = 0b01111100;
  1487                           
  1488                           ;incstack = 0
  1489  001676  0E7C               	movlw	124
  1490  001678  6ED3               	movwf	4051,c	;volatile
  1491                           
  1492                           ;system.c: 31: OSCTUNE = 0b01001111;
  1493  00167A  0E4F               	movlw	79
  1494  00167C  6E9B               	movwf	3995,c	;volatile
  1495  00167E  0012               	return		;funcret
  1496  001680                     __end_of_ConfigureOscillator:
  1497                           	opt stack 0
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           prodh	equ	0xFF4
  1503                           prodl	equ	0xFF3
  1504                           intcon	equ	0xFF2
  1505                           intcon2	equ	0xFF1
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postinc2	equ	0xFDE
  1509                           postdec2	equ	0xFDD
  1510                           fsr2h	equ	0xFDA
  1511                           fsr2l	equ	0xFD9
  1512                           status	equ	0xFD8
  1513                           
  1514 ;; *************** function _low_isr *****************
  1515 ;; Defined at:
  1516 ;;		line 113 in file "interrupts.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;		None               void
  1523 ;; Registers used:
  1524 ;;		None
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;Total ram usage:       17 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    2
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		Interrupt level 1
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	intcodelo
  1545  000018                     __pintcodelo:
  1546                           	opt stack 0
  1547  000018                     _low_isr:
  1548                           	opt stack 25
  1549                           
  1550                           ;incstack = 0
  1551  000018  CFD8 F001          	movff	status,??_low_isr
  1552  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1553  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1554  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1555  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1556  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1557  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1558  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1559  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1560  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1561  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1562  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1563  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1564  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1565  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1566  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1567  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1568  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1569  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1570  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1571  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1572  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1573  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1574  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1575  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1576  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1577  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1578  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1579  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1580  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1581  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1582  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1583  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1584  00009C  C001  FFD8         	movff	??_low_isr,status
  1585  0000A0  0010               	retfie	
  1586  0000A2                     __end_of_low_isr:
  1587                           	opt stack 0
  1588                           pclatu	equ	0xFFB
  1589                           pclath	equ	0xFFA
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           prodh	equ	0xFF4
  1595                           prodl	equ	0xFF3
  1596                           intcon	equ	0xFF2
  1597                           intcon2	equ	0xFF1
  1598                           postinc0	equ	0xFEE
  1599                           fsr0h	equ	0xFEA
  1600                           fsr0l	equ	0xFE9
  1601                           wreg	equ	0xFE8
  1602                           fsr1h	equ	0xFE2
  1603                           fsr1l	equ	0xFE1
  1604                           bsr	equ	0xFE0
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _high_isr *****************
  1612 ;; Defined at:
  1613 ;;		line 65 in file "interrupts.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;Total ram usage:       14 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    1
  1634 ;; This function calls:
  1635 ;;		_merge
  1636 ;;		_motorCounterUpdate
  1637 ;;		_moveMouse
  1638 ;; This function is called by:
  1639 ;;		Interrupt level 2
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	intcode
  1644  000008                     __pintcode:
  1645                           	opt stack 0
  1646  000008                     _high_isr:
  1647                           	opt stack 25
  1648                           
  1649                           ;incstack = 0
  1650  000008  CFFA F015          	movff	pclath,??_high_isr
  1651  00000C  CFFB F016          	movff	pclatu,??_high_isr+1
  1652  000010  CFE9 F017          	movff	fsr0l,??_high_isr+2
  1653  000014  EDDD  F009         	call	int_func,f	;refresh shadow registers
  1654                           pclatu	equ	0xFFB
  1655                           pclath	equ	0xFFA
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon	equ	0xFF2
  1663                           intcon2	equ	0xFF1
  1664                           postinc0	equ	0xFEE
  1665                           fsr0h	equ	0xFEA
  1666                           fsr0l	equ	0xFE9
  1667                           wreg	equ	0xFE8
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           bsr	equ	0xFE0
  1671                           postinc2	equ	0xFDE
  1672                           postdec2	equ	0xFDD
  1673                           fsr2h	equ	0xFDA
  1674                           fsr2l	equ	0xFD9
  1675                           status	equ	0xFD8
  1676                           
  1677                           	psect	intcode_body
  1678  0013BA                     __pintcode_body:
  1679                           	opt stack 25
  1680  0013BA                     int_func:
  1681                           	opt stack 25
  1682  0013BA  0006               	pop		; remove dummy address from shadow register refresh
  1683  0013BC  CFEA F018          	movff	fsr0h,??_high_isr+3
  1684  0013C0  CFE1 F019          	movff	fsr1l,??_high_isr+4
  1685  0013C4  CFE2 F01A          	movff	fsr1h,??_high_isr+5
  1686  0013C8  CFD9 F01B          	movff	fsr2l,??_high_isr+6
  1687  0013CC  CFDA F01C          	movff	fsr2h,??_high_isr+7
  1688  0013D0  CFF3 F01D          	movff	prodl,??_high_isr+8
  1689  0013D4  CFF4 F01E          	movff	prodh,??_high_isr+9
  1690  0013D8  CFF6 F01F          	movff	tblptrl,??_high_isr+10
  1691  0013DC  CFF7 F020          	movff	tblptrh,??_high_isr+11
  1692  0013E0  CFF8 F021          	movff	tblptru,??_high_isr+12
  1693  0013E4  CFF5 F022          	movff	tablat,??_high_isr+13
  1694                           
  1695                           ;interrupts.c: 84: if(INTCONbits.TMR0IF == 1)
  1696  0013E8  A4F2               	btfss	intcon,2,c	;volatile
  1697  0013EA  D024               	goto	i2l36
  1698                           
  1699                           ;interrupts.c: 85: {
  1700                           ;interrupts.c: 86: if(MotorDelayCounter > 10)
  1701  0013EC  BE4D               	btfsc	_MotorDelayCounter+1,7,c
  1702  0013EE  D01E               	goto	i2l1236
  1703  0013F0  504D               	movf	_MotorDelayCounter+1,w,c
  1704  0013F2  E106               	bnz	i2l1232
  1705  0013F4  0E0B               	movlw	11
  1706  0013F6  5C4C               	subwf	_MotorDelayCounter,w,c
  1707  0013F8  B0D8               	btfsc	status,0,c
  1708  0013FA  D002               	goto	i2l1232
  1709  0013FC  D017               	goto	i2l1236
  1710  0013FE  D000               	goto	i2l1232
  1711  001400                     i2l1232:
  1712                           
  1713                           ;interrupts.c: 93: }
  1714                           ;interrupts.c: 96: motorCounterUpdate(RIGHT,0);
  1715  001400  0E00               	movlw	0
  1716  001402  6E12               	movwf	motorCounterUpdate@reverse,c
  1717  001404  0E01               	movlw	1
  1718  001406  EC82  F00A         	call	_motorCounterUpdate
  1719                           
  1720                           ;interrupts.c: 97: motorCounterUpdate(LEFT,0);
  1721  00140A  0E00               	movlw	0
  1722  00140C  6E12               	movwf	motorCounterUpdate@reverse,c
  1723  00140E  0E00               	movlw	0
  1724  001410  EC82  F00A         	call	_motorCounterUpdate
  1725                           
  1726                           ;interrupts.c: 98: moveMouse(merge(LMotorCounter,RMotorCounter));
  1727  001414  C053  F012         	movff	_RMotorCounter,merge@right
  1728  001418  5052               	movf	_LMotorCounter,w,c
  1729  00141A  EC33  F00B         	call	_merge
  1730  00141E  EC40  F00B         	call	_moveMouse
  1731                           
  1732                           ;interrupts.c: 100: MotorDelayCounter = 0;
  1733  001422  0E00               	movlw	0
  1734  001424  6E4D               	movwf	_MotorDelayCounter+1,c
  1735  001426  0E00               	movlw	0
  1736  001428  6E4C               	movwf	_MotorDelayCounter,c
  1737  00142A  D000               	goto	i2l1236
  1738  00142C                     i2l1236:
  1739                           
  1740                           ;interrupts.c: 101: }
  1741                           ;interrupts.c: 103: MotorDelayCounter++;
  1742  00142C  4A4C               	infsnz	_MotorDelayCounter,f,c
  1743  00142E  2A4D               	incf	_MotorDelayCounter+1,f,c
  1744                           
  1745                           ;interrupts.c: 104: INTCONbits.TMR0IF = 0;
  1746  001430  94F2               	bcf	intcon,2,c	;volatile
  1747  001432  D000               	goto	i2l36
  1748  001434                     i2l36:
  1749  001434  C022  FFF5         	movff	??_high_isr+13,tablat
  1750  001438  C021  FFF8         	movff	??_high_isr+12,tblptru
  1751  00143C  C020  FFF7         	movff	??_high_isr+11,tblptrh
  1752  001440  C01F  FFF6         	movff	??_high_isr+10,tblptrl
  1753  001444  C01E  FFF4         	movff	??_high_isr+9,prodh
  1754  001448  C01D  FFF3         	movff	??_high_isr+8,prodl
  1755  00144C  C01C  FFDA         	movff	??_high_isr+7,fsr2h
  1756  001450  C01B  FFD9         	movff	??_high_isr+6,fsr2l
  1757  001454  C01A  FFE2         	movff	??_high_isr+5,fsr1h
  1758  001458  C019  FFE1         	movff	??_high_isr+4,fsr1l
  1759  00145C  C018  FFEA         	movff	??_high_isr+3,fsr0h
  1760  001460  C017  FFE9         	movff	??_high_isr+2,fsr0l
  1761  001464  C016  FFFB         	movff	??_high_isr+1,pclatu
  1762  001468  C015  FFFA         	movff	??_high_isr,pclath
  1763  00146C  0011               	retfie		f
  1764  00146E                     __end_of_high_isr:
  1765                           	opt stack 0
  1766                           pclatu	equ	0xFFB
  1767                           pclath	equ	0xFFA
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           intcon	equ	0xFF2
  1775                           intcon2	equ	0xFF1
  1776                           postinc0	equ	0xFEE
  1777                           fsr0h	equ	0xFEA
  1778                           fsr0l	equ	0xFE9
  1779                           wreg	equ	0xFE8
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           bsr	equ	0xFE0
  1783                           postinc2	equ	0xFDE
  1784                           postdec2	equ	0xFDD
  1785                           fsr2h	equ	0xFDA
  1786                           fsr2l	equ	0xFD9
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _moveMouse *****************
  1790 ;; Defined at:
  1791 ;;		line 189 in file "interrupts.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  action          1    wreg     unsigned char 
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;  action          1   17[COMRAM] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;		None               void
  1798 ;; Registers used:
  1799 ;;		wreg
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        1 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_high_isr
  1815 ;;		_KController
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text11
  1820  001680                     __ptext11:
  1821                           	opt stack 0
  1822  001680                     _moveMouse:
  1823                           	opt stack 25
  1824                           
  1825                           ;incstack = 0
  1826                           ;moveMouse@action stored from wreg
  1827  001680  6E12               	movwf	moveMouse@action,c
  1828                           
  1829                           ;interrupts.c: 191: LATC = action;
  1830  001682  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  1831  001686  0012               	return		;funcret
  1832  001688                     __end_of_moveMouse:
  1833                           	opt stack 0
  1834                           pclatu	equ	0xFFB
  1835                           pclath	equ	0xFFA
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           postinc0	equ	0xFEE
  1845                           fsr0h	equ	0xFEA
  1846                           fsr0l	equ	0xFE9
  1847                           wreg	equ	0xFE8
  1848                           fsr1h	equ	0xFE2
  1849                           fsr1l	equ	0xFE1
  1850                           bsr	equ	0xFE0
  1851                           postinc2	equ	0xFDE
  1852                           postdec2	equ	0xFDD
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           
  1857 ;; *************** function _motorCounterUpdate *****************
  1858 ;; Defined at:
  1859 ;;		line 150 in file "interrupts.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  side            1    wreg     enum E4081
  1862 ;;  reverse         1   17[COMRAM] unsigned char 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  side            1   18[COMRAM] enum E4081
  1865 ;; Return value:  Size  Location     Type
  1866 ;;		None               void
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1874 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;Total ram usage:        2 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_high_isr
  1884 ;;		_KController
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text12
  1889  001504                     __ptext12:
  1890                           	opt stack 0
  1891  001504                     _motorCounterUpdate:
  1892                           	opt stack 25
  1893                           
  1894                           ;incstack = 0
  1895                           ;motorCounterUpdate@side stored from wreg
  1896  001504  6E13               	movwf	motorCounterUpdate@side,c
  1897                           
  1898                           ;interrupts.c: 152: if(reverse == TRUE)
  1899  001506  0412               	decf	motorCounterUpdate@reverse,w,c
  1900  001508  A4D8               	btfss	status,2,c
  1901  00150A  D008               	goto	i2l42
  1902                           
  1903                           ;interrupts.c: 153: {
  1904                           ;interrupts.c: 154: if(side == LEFT)
  1905  00150C  5013               	movf	motorCounterUpdate@side,w,c
  1906  00150E  A4D8               	btfss	status,2,c
  1907  001510  D002               	goto	i2l1154
  1908                           
  1909                           ;interrupts.c: 155: side = RIGHT;
  1910  001512  0E01               	movlw	1
  1911  001514  D001               	goto	L6
  1912  001516                     i2l1154:
  1913                           
  1914                           ;interrupts.c: 156: else
  1915                           ;interrupts.c: 157: side = LEFT;
  1916  001516  0E00               	movlw	0
  1917  001518                     L6:
  1918  001518  6E13               	movwf	motorCounterUpdate@side,c
  1919  00151A  D000               	goto	i2l42
  1920  00151C                     i2l42:
  1921                           
  1922                           ;interrupts.c: 158: }
  1923                           ;interrupts.c: 160: if(side == LEFT)
  1924  00151C  5013               	movf	motorCounterUpdate@side,w,c
  1925  00151E  B4D8               	btfsc	status,2,c
  1926  001520  D00D               	goto	i2l1168
  1927  001522  D024               	goto	i2l1180
  1928                           
  1929                           ;interrupts.c: 161: {
  1930                           ;interrupts.c: 162: switch(LMotorCounter)
  1931  001524  D00B               	goto	i2l1168
  1932  001526                     i2l1158:
  1933  001526  0E02               	movlw	2
  1934  001528  D005               	goto	L9
  1935  00152A                     i2l1160:
  1936  00152A  0E04               	movlw	4
  1937  00152C  D003               	goto	L9
  1938  00152E                     i2l1162:
  1939  00152E  0E08               	movlw	8
  1940  001530  D001               	goto	L9
  1941                           
  1942                           ;interrupts.c: 167: case 0b00001000: LMotorCounter = 0b00000001; break;
  1943  001532  D002               	goto	i2l1166
  1944  001534                     L9:
  1945  001534  6E52               	movwf	_LMotorCounter,c
  1946  001536  D029               	goto	i2l61
  1947  001538                     i2l1166:
  1948  001538  0E01               	movlw	1
  1949  00153A  D7FC               	goto	L9
  1950  00153C                     i2l1168:
  1951  00153C  5052               	movf	_LMotorCounter,w,c
  1952                           
  1953                           ; Switch size 1, requested type "space"
  1954                           ; Number of cases is 4, Range of values is 1 to 8
  1955                           ; switch strategies available:
  1956                           ; Name         Instructions Cycles
  1957                           ; simple_byte           13     7 (average)
  1958                           ;	Chosen strategy is simple_byte
  1959  00153E  0A01               	xorlw	1	; case 1
  1960  001540  B4D8               	btfsc	status,2,c
  1961  001542  D7F1               	goto	i2l1158
  1962  001544  0A03               	xorlw	3	; case 2
  1963  001546  B4D8               	btfsc	status,2,c
  1964  001548  D7F0               	goto	i2l1160
  1965  00154A  0A06               	xorlw	6	; case 4
  1966  00154C  B4D8               	btfsc	status,2,c
  1967  00154E  D7EF               	goto	i2l1162
  1968  001550  0A0C               	xorlw	12	; case 8
  1969  001552  D7F2               	goto	i2l1166
  1970                           
  1971                           ;interrupts.c: 170: } else {
  1972  001554  D01A               	goto	i2l61
  1973                           
  1974                           ;interrupts.c: 171: switch(RMotorCounter)
  1975  001556  D00A               	goto	i2l1180
  1976                           
  1977                           ;interrupts.c: 172: {
  1978                           ;interrupts.c: 173: case 0b00000001: RMotorCounter = 0b00001000; break;
  1979  001558  D006               	goto	i2l1178
  1980  00155A                     i2l1172:
  1981  00155A  0E01               	movlw	1
  1982  00155C  D005               	goto	L13
  1983  00155E                     i2l1174:
  1984  00155E  0E02               	movlw	2
  1985  001560  D003               	goto	L13
  1986  001562                     i2l1176:
  1987  001562  0E04               	movlw	4
  1988  001564  D001               	goto	L13
  1989  001566                     i2l1178:
  1990  001566  0E08               	movlw	8
  1991  001568                     L13:
  1992  001568  6E53               	movwf	_RMotorCounter,c
  1993                           
  1994                           ;interrupts.c: 178: }
  1995  00156A  D00F               	goto	i2l61
  1996  00156C                     i2l1180:
  1997  00156C  5053               	movf	_RMotorCounter,w,c
  1998                           
  1999                           ; Switch size 1, requested type "space"
  2000                           ; Number of cases is 4, Range of values is 1 to 8
  2001                           ; switch strategies available:
  2002                           ; Name         Instructions Cycles
  2003                           ; simple_byte           13     7 (average)
  2004                           ;	Chosen strategy is simple_byte
  2005  00156E  0A01               	xorlw	1	; case 1
  2006  001570  B4D8               	btfsc	status,2,c
  2007  001572  D7F9               	goto	i2l1178
  2008  001574  0A03               	xorlw	3	; case 2
  2009  001576  B4D8               	btfsc	status,2,c
  2010  001578  D7F0               	goto	i2l1172
  2011  00157A  0A06               	xorlw	6	; case 4
  2012  00157C  B4D8               	btfsc	status,2,c
  2013  00157E  D7EF               	goto	i2l1174
  2014  001580  0A0C               	xorlw	12	; case 8
  2015  001582  B4D8               	btfsc	status,2,c
  2016  001584  D7EE               	goto	i2l1176
  2017  001586  D7EF               	goto	i2l1178
  2018  001588  D000               	goto	i2l61
  2019  00158A                     i2l61:
  2020  00158A  0012               	return		;funcret
  2021  00158C                     __end_of_motorCounterUpdate:
  2022                           	opt stack 0
  2023                           pclatu	equ	0xFFB
  2024                           pclath	equ	0xFFA
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           intcon2	equ	0xFF1
  2033                           postinc0	equ	0xFEE
  2034                           fsr0h	equ	0xFEA
  2035                           fsr0l	equ	0xFE9
  2036                           wreg	equ	0xFE8
  2037                           fsr1h	equ	0xFE2
  2038                           fsr1l	equ	0xFE1
  2039                           bsr	equ	0xFE0
  2040                           postinc2	equ	0xFDE
  2041                           postdec2	equ	0xFDD
  2042                           fsr2h	equ	0xFDA
  2043                           fsr2l	equ	0xFD9
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _merge *****************
  2047 ;; Defined at:
  2048 ;;		line 182 in file "interrupts.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;  left            1    wreg     unsigned char 
  2051 ;;  right           1   17[COMRAM] unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  left            1   18[COMRAM] unsigned char 
  2054 ;;  merged          1   19[COMRAM] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      unsigned char 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2064 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;Total ram usage:        3 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; This function calls:
  2071 ;;		Nothing
  2072 ;; This function is called by:
  2073 ;;		_high_isr
  2074 ;;		_KController
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text13
  2079  001666                     __ptext13:
  2080                           	opt stack 0
  2081  001666                     _merge:
  2082                           	opt stack 25
  2083                           
  2084                           ;incstack = 0
  2085                           ;merge@left stored from wreg
  2086  001666  6E13               	movwf	merge@left,c
  2087                           
  2088                           ;interrupts.c: 184: unsigned char merged;
  2089                           ;interrupts.c: 185: merged = (left << 4) + right;
  2090  001668  3813               	swapf	merge@left,w,c
  2091  00166A  0BF0               	andlw	240
  2092  00166C  2412               	addwf	merge@right,w,c
  2093  00166E  6E14               	movwf	merge@merged,c
  2094                           
  2095                           ;interrupts.c: 186: return merged;
  2096  001670  5014               	movf	merge@merged,w,c
  2097  001672  D000               	goto	i2l64
  2098  001674                     i2l64:
  2099  001674  0012               	return		;funcret
  2100  001676                     __end_of_merge:
  2101                           	opt stack 0
  2102                           pclatu	equ	0xFFB
  2103                           pclath	equ	0xFFA
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           intcon	equ	0xFF2
  2111                           intcon2	equ	0xFF1
  2112                           postinc0	equ	0xFEE
  2113                           fsr0h	equ	0xFEA
  2114                           fsr0l	equ	0xFE9
  2115                           wreg	equ	0xFE8
  2116                           fsr1h	equ	0xFE2
  2117                           fsr1l	equ	0xFE1
  2118                           bsr	equ	0xFE0
  2119                           postinc2	equ	0xFDE
  2120                           postdec2	equ	0xFDD
  2121                           fsr2h	equ	0xFDA
  2122                           fsr2l	equ	0xFD9
  2123                           status	equ	0xFD8
  2124                           pclatu	equ	0xFFB
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           intcon2	equ	0xFF1
  2134                           postinc0	equ	0xFEE
  2135                           fsr0h	equ	0xFEA
  2136                           fsr0l	equ	0xFE9
  2137                           wreg	equ	0xFE8
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           bsr	equ	0xFE0
  2141                           postinc2	equ	0xFDE
  2142                           postdec2	equ	0xFDD
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147                           	psect	rparam
  2148  0000                     pclatu	equ	0xFFB
  2149                           pclath	equ	0xFFA
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon2	equ	0xFF1
  2158                           postinc0	equ	0xFEE
  2159                           fsr0h	equ	0xFEA
  2160                           fsr0l	equ	0xFE9
  2161                           wreg	equ	0xFE8
  2162                           fsr1h	equ	0xFE2
  2163                           fsr1l	equ	0xFE1
  2164                           bsr	equ	0xFE0
  2165                           postinc2	equ	0xFDE
  2166                           postdec2	equ	0xFDD
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65      84
    BANK0           128     84      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul

Critical Paths under _high_isr in COMRAM

    _high_isr->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3620
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    3620
                                             59 COMRAM     6     6      0
                                              0 BANK0     84    84      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    2287
                                             45 COMRAM    14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     901
                                             34 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                             34 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     194
                                             40 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     194
                                             40 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0     521
                                             20 COMRAM    14    14      0
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _motorCounterUpdate                                   2     1      1     280
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _merge
   _motorCounterUpdate
   _moveMouse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      54       5       65.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      54       1       66.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      34        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 10 23:33:11 2015

                ___awdiv@sign 0028                            bsr 000FE0           ___wmul@multiplicand 0025  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l200 163A                           l203 15EA                           l185 124E  
                         l178 11EC                           l195 160A                           l196 1612  
                         l199 1632                           l396 1502                           l948 15A4  
                __CFG_CPB$OFF 000000                           _MAX 1614                           _MIN 15EC  
                __CFG_CPD$OFF 000000                           u480 1024                           u560 1210  
                         u490 1040                           u570 1234                           u595 125A  
                         wreg 000FE8                          ?_MAX 0029                          ?_MIN 0029  
                        MAX@a 0029                          MAX@b 002B                          MIN@a 0029  
                        MIN@b 002B                  __CFG_WDT$OFF 000000                          l1110 14E8  
                        l1200 1236                          l1114 14F8                          l1106 14DC  
                        l1130 1042                          l1210 12D8                          l1140 118E  
                        l1124 1026                          l1212 132C                          l1134 109A  
                        l1214 1380                          l1222 13AC                          l1136 117E  
                        l1082 1484                          l1218 1396                          l1094 14AC  
                        l1096 14B6                          l1088 1496                          l1098 14BE  
                        l1194 1212                          l1288 165C                          _LATC 000F8B  
                        i2l42 151C                          i2l36 1434                          i2l61 158A  
                        i2l64 1674                          _main 1652                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 002E                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 15C4                         ??_MAX 002D  
                       ??_MIN 002D    __size_of_sensorComputation 01E4                         ?_main 0001  
             __end_of___awdiv 1504                         _T0CON 000FD5               ___awdiv@divisor 0025  
             ___awdiv@counter 0027                         _TRISC 000F94           _ConfigureOscillator 1676  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _merge 1666  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 163C                  __end_of_main 1666  
                      ??_main 0042                 __activetblptr 000002                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0023  
                      i2l1160 152A                        i2l1232 1400                        i2l1162 152E  
                      i2l1154 1516                        i2l1172 155A                        i2l1180 156C  
                      i2l1236 142C                        i2l1174 155E                        i2l1166 1538  
                      i2l1158 1526                        i2l1176 1562                        i2l1168 153C  
                      i2l1178 1566                        _INTCON 000FF2                        _OSCCON 000FD3  
                   ??_InitApp 0023         ??_ConfigureOscillator 0023                   merge@merged 0014  
              __CFG_XINST$OFF 000000            sensorComputation@i 0038            sensorComputation@j 003A  
            __end_of_high_isr 146E                        ___wmul 15C4                     ??___awdiv 0027  
              __CFG_STVREN$ON 000000                        clear_0 1642              ___awdiv@quotient 0029  
                __mediumconst 0000                     ??_low_isr 0001                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 1648               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
              __pcstackCOMRAM 0001               moveMouse@action 0012                 __end_of_merge 1676  
  __end_of_motorCounterUpdate 158C                       ??_merge 0013                    _delay_time 0050  
           _MotorDelayCounter 004C                       ?___wmul 0023            __size_of_moveMouse 0008  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                     ?_high_isr 0001  
               _LMotorCounter 0052                       _InitApp 158C                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 146E               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 163C                       __ramtop 1000  
                     __ptext0 1652                       __ptext1 11EE                       __ptext2 100A  
                     __ptext3 15C4                       __ptext4 146E                       __ptext5 15EC  
                     __ptext6 1614                       __ptext7 158C                       __ptext8 1676  
                __size_of_MAX 0028                  __size_of_MIN 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 0015                __pintcode_body 13BA  
        end_of_initialization 1648              _sensorCorrection 1001             __end_of_moveMouse 1688  
               __Lmediumconst 0000                       int_func 13BA                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                     _PORTBbits 000F81  
                   _TRISBbits 000F93                     _TRISEbits 000F96                ??_sensorUpdate 003C  
 __end_of_ConfigureOscillator 1680                __end_of___wmul 15EC           start_initialization 163C  
                 __end_of_MAX 163C                   __end_of_MIN 1614            _motorCounterUpdate 1504  
            __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012                    merge@right 0012  
                    ??___wmul 0027              __CFG_LPT1OSC$OFF 000000                _sensorLocation 1005  
        ??_motorCounterUpdate 0013                   __pbssCOMRAM 0042                 __pcstackBANK0 0080  
      sensorUpdate@sensorTemp 0080             __size_of_high_isr 1466                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                     _algorithm 0054                     __pintcode 0008  
      motorCounterUpdate@side 0013                      ?___awdiv 0023          __end_of_sensorUpdate 13BA  
      __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005                   __pintcodelo 0018  
                 __smallconst 1000                      ?_low_isr 0001                __size_of_merge 0010  
              ___wmul@product 0027                     _moveMouse 1680              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0023                 _RMotorCounter 0053  
                  ?_moveMouse 0001              __size_of_InitApp 0038                      __Hrparam 0000  
                   merge@left 0013          sensorComputation@max 0032                      __Lrparam 0000  
        sensorComputation@min 0034          sensorComputation@sum 0036            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of_low_isr 008A                      __ptext11 1680  
                    __ptext12 1504                      __ptext13 1666                      _high_isr 0008  
          _LMotorDelayCounter 004A            _RMotorDelayCounter 004E                 __size_of_main 0014  
       __size_of_sensorUpdate 01CC  __size_of_ConfigureOscillator 000A             _sensorComputation 100A  
                  _INTCONbits 000FF2            ?_sensorComputation 002E                 sensorUpdate@i 00D0  
               sensorUpdate@j 00D2                  _sensorUpdate 11EE                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 0030                   ??_moveMouse 0012  
   __end_of_sensorComputation 11EE                   _sensorValue 0042   __size_of_motorCounterUpdate 0088  
   motorCounterUpdate@reverse 0012  
