

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 24 23:18:31 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001B28                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _TurnRight
    42  001B28  00C8               	dw	200
    43                           
    44                           ;initializer for _controllerSteps
    45  001B2A  03                 	db	3
    46                           
    47                           	psect	smallconst
    48  001000                     __psmallconst:
    49                           	opt stack 0
    50  001000  00                 	db	0
    51  001001                     _sensorCorrection:
    52                           	opt stack 0
    53  001001  1A                 	db	26
    54  001002  1A                 	db	26
    55  001003  23                 	db	35
    56  001004  23                 	db	35
    57  001005                     __end_of_sensorCorrection:
    58                           	opt stack 0
    59  001005                     _sensorLocation:
    60                           	opt stack 0
    61  001005  1B                 	db	27
    62  001006  2B                 	db	43
    63  001007  1F                 	db	31
    64  001008  33                 	db	51
    65  001009                     __end_of_sensorLocation:
    66                           	opt stack 0
    67  0000                     _ADCON0	set	4034
    68  0000                     _ADCON0bits	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _ADCON2	set	4032
    71  0000                     _ADRESH	set	4036
    72  0000                     _ADRESL	set	4035
    73  0000                     _INTCON	set	4082
    74  0000                     _INTCON2	set	4081
    75  0000                     _INTCONbits	set	4082
    76  0000                     _LATC	set	3979
    77  0000                     _OSCCON	set	4051
    78  0000                     _OSCTUNE	set	3995
    79  0000                     _T0CON	set	4053
    80  0000                     _TRISBbits	set	3987
    81  0000                     _TRISC	set	3988
    82  0000                     _TRISEbits	set	3990
    83                           
    84                           ; #config settings
    85  001009  00                 	db	0	; dummy byte at the end
    86  0000                     
    87                           	psect	cinit
    88  0019A2                     __pcinit:
    89                           	opt stack 0
    90  0019A2                     start_initialization:
    91                           	opt stack 0
    92  0019A2                     __initialization:
    93                           	opt stack 0
    94                           
    95                           ; Clear objects allocated to COMRAM (27 bytes)
    96  0019A2  EE00  F037         	lfsr	0,__pbssCOMRAM
    97  0019A6  0E1B               	movlw	27
    98  0019A8                     clear_0:
    99  0019A8  6AEE               	clrf	postinc0,c
   100  0019AA  06E8               	decf	wreg,f,c
   101  0019AC  E1FD               	bnz	clear_0
   102                           
   103                           ; Initialize objects allocated to COMRAM (3 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  0019AE  0E28               	movlw	low __pidataCOMRAM
   106  0019B0  6EF6               	movwf	tblptrl,c
   107  0019B2  0E1B               	movlw	high __pidataCOMRAM
   108  0019B4  6EF7               	movwf	tblptrh,c
   109  0019B6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  0019B8  6EF8               	movwf	tblptru,c
   111  0019BA  0009               	tblrd		*+	;fetch initializer
   112  0019BC  CFF5 F052          	movff	tablat,__pdataCOMRAM
   113  0019C0  0009               	tblrd		*+	;fetch initializer
   114  0019C2  CFF5 F053          	movff	tablat,__pdataCOMRAM+1
   115  0019C6  0009               	tblrd		*+	;fetch initializer
   116  0019C8  CFF5 F054          	movff	tablat,__pdataCOMRAM+2
   117  0019CC                     end_of_initialization:
   118                           	opt stack 0
   119  0019CC                     __end_of__initialization:
   120                           	opt stack 0
   121  0019CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   122  0019CE  6EF8               	movwf	tblptru,c
   123  0019D0  0100               	movlb	0
   124  0019D2  EF79  F00D         	goto	_main	;jump to C main() function
   125                           tblptru	equ	0xFF8
   126                           tblptrh	equ	0xFF7
   127                           tblptrl	equ	0xFF6
   128                           tablat	equ	0xFF5
   129                           postinc0	equ	0xFEE
   130                           wreg	equ	0xFE8
   131                           
   132                           	psect	bssCOMRAM
   133  000037                     __pbssCOMRAM:
   134                           	opt stack 0
   135  000037                     _sensorValue:
   136                           	opt stack 0
   137  000037                     	ds	8
   138  00003F                     _ForwardCounter:
   139                           	opt stack 0
   140  00003F                     	ds	2
   141  000041                     _LTurnCounter:
   142                           	opt stack 0
   143  000041                     	ds	2
   144  000043                     _MotorDelayCounter:
   145                           	opt stack 0
   146  000043                     	ds	2
   147  000045                     _RTurnCounter:
   148                           	opt stack 0
   149  000045                     	ds	2
   150  000047                     _ReverseCounter:
   151                           	opt stack 0
   152  000047                     	ds	2
   153  000049                     _RotateCounter:
   154                           	opt stack 0
   155  000049                     	ds	2
   156  00004B                     _delay_time:
   157                           	opt stack 0
   158  00004B                     	ds	2
   159  00004D                     _LMotorCounter:
   160                           	opt stack 0
   161  00004D                     	ds	1
   162  00004E                     _RMotorCounter:
   163                           	opt stack 0
   164  00004E                     	ds	1
   165  00004F                     _algorithm:
   166                           	opt stack 0
   167  00004F                     	ds	1
   168  000050                     _justTurned:
   169                           	opt stack 0
   170  000050                     	ds	1
   171  000051                     _rotatingSide:
   172                           	opt stack 0
   173  000051                     	ds	1
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181                           	psect	dataCOMRAM
   182  000052                     __pdataCOMRAM:
   183                           	opt stack 0
   184  000052                     _TurnRight:
   185                           	opt stack 0
   186  000052                     	ds	2
   187  000054                     _controllerSteps:
   188                           	opt stack 0
   189  000054                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           tblptrl	equ	0xFF6
   193                           tablat	equ	0xFF5
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	cstackBANK0
   198  000080                     __pcstackBANK0:
   199                           	opt stack 0
   200  000080                     sensorComputation@max:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x0
   204  000080                     	ds	2
   205  000082                     sensorComputation@min:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x2
   209  000082                     	ds	2
   210  000084                     sensorComputation@sum:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x4
   214  000084                     	ds	2
   215  000086                     sensorComputation@i:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x6
   219  000086                     	ds	2
   220  000088                     sensorComputation@j:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x8
   224  000088                     	ds	2
   225  00008A                     ??_sensorUpdate:
   226                           
   227                           ; 0 bytes @ 0xA
   228  00008A                     	ds	6
   229  000090                     sensorUpdate@sensorTemp:
   230                           	opt stack 0
   231                           
   232                           ; 80 bytes @ 0x10
   233  000090                     	ds	80
   234  0000E0                     sensorUpdate@i:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x60
   238  0000E0                     	ds	2
   239  0000E2                     sensorUpdate@j:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x62
   243  0000E2                     	ds	2
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	cstackCOMRAM
   252  000001                     __pcstackCOMRAM:
   253                           	opt stack 0
   254  000001                     ??_low_isr:
   255  000001                     
   256                           ; 0 bytes @ 0x0
   257  000001                     	ds	17
   258  000012                     ?_ABS:
   259                           	opt stack 0
   260  000012                     motorCounterUpdate@reverse:
   261                           	opt stack 0
   262  000012                     merge@right:
   263                           	opt stack 0
   264  000012                     moveMouse@action:
   265                           	opt stack 0
   266  000012                     ABS@x:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x11
   270  000012                     	ds	1
   271  000013                     motorCounterUpdate@side:
   272                           	opt stack 0
   273  000013                     merge@left:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x12
   277  000013                     	ds	1
   278  000014                     merge@merged:
   279                           	opt stack 0
   280  000014                     rotate@side:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x13
   284  000014                     	ds	1
   285  000015                     ??_KController:
   286                           
   287                           ; 0 bytes @ 0x14
   288  000015                     	ds	2
   289  000017                     KController@correctTo:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x16
   293  000017                     	ds	1
   294  000018                     KController@diff:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x17
   298  000018                     	ds	2
   299  00001A                     ??_high_isr:
   300                           
   301                           ; 0 bytes @ 0x19
   302  00001A                     	ds	14
   303  000028                     ?___wmul:
   304                           	opt stack 0
   305  000028                     ?___awdiv:
   306                           	opt stack 0
   307  000028                     delay@ms:
   308                           	opt stack 0
   309  000028                     ___wmul@multiplier:
   310                           	opt stack 0
   311  000028                     ___awdiv@dividend:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x27
   315  000028                     	ds	2
   316  00002A                     ??_delay:
   317  00002A                     ___wmul@multiplicand:
   318                           	opt stack 0
   319  00002A                     ___awdiv@divisor:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x29
   323  00002A                     	ds	1
   324  00002B                     delay@x:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x2A
   328  00002B                     	ds	1
   329  00002C                     ___awdiv@counter:
   330                           	opt stack 0
   331  00002C                     ___wmul@product:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x2B
   335  00002C                     	ds	1
   336  00002D                     ___awdiv@sign:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x2C
   340  00002D                     	ds	1
   341  00002E                     ?_MIN:
   342                           	opt stack 0
   343  00002E                     ?_MAX:
   344                           	opt stack 0
   345  00002E                     MIN@a:
   346                           	opt stack 0
   347  00002E                     MAX@a:
   348                           	opt stack 0
   349  00002E                     ___awdiv@quotient:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2D
   353  00002E                     	ds	2
   354  000030                     MIN@b:
   355                           	opt stack 0
   356  000030                     MAX@b:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2F
   360  000030                     	ds	2
   361  000032                     ??_MIN:
   362  000032                     ??_MAX:
   363                           
   364                           ; 0 bytes @ 0x31
   365  000032                     	ds	1
   366  000033                     sensorComputation@sensorTemp:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x32
   370  000033                     	ds	2
   371  000035                     ??_sensorComputation:
   372                           
   373                           ; 0 bytes @ 0x34
   374  000035                     	ds	2
   375  000037                     tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           
   382                           ; 0 bytes @ 0x36
   383 ;;
   384 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   385 ;;
   386 ;; *************** function _main *****************
   387 ;; Defined at:
   388 ;;		line 41 in file "main.c"
   389 ;; Parameters:    Size  Location     Type
   390 ;;		None
   391 ;; Auto vars:     Size  Location     Type
   392 ;;		None
   393 ;; Return value:  Size  Location     Type
   394 ;;		None               void
   395 ;; Registers used:
   396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   406 ;;Total ram usage:        0 bytes
   407 ;; Hardware stack levels required when called:    7
   408 ;; This function calls:
   409 ;;		_ConfigureOscillator
   410 ;;		_InitApp
   411 ;;		_sensorUpdate
   412 ;; This function is called by:
   413 ;;		Startup code after reset
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text0
   418  001AF2                     __ptext0:
   419                           	opt stack 0
   420  001AF2                     _main:
   421                           	opt stack 24
   422                           
   423                           ;main.c: 44: ConfigureOscillator();
   424                           
   425                           ;incstack = 0
   426  001AF2  EC8B  F00D         	call	_ConfigureOscillator	;wreg free
   427                           
   428                           ;main.c: 47: InitApp();
   429  001AF6  EC95  F00C         	call	_InitApp	;wreg free
   430  001AFA  D000               	goto	l1834
   431  001AFC                     l1834:
   432                           
   433                           ;main.c: 50: {
   434                           ;main.c: 51: sensorUpdate();
   435  001AFC  EC63  F00A         	call	_sensorUpdate	;wreg free
   436  001B00  D7FD               	goto	l1834
   437  001B02  EF51  F000         	goto	start
   438  001B06                     __end_of_main:
   439                           	opt stack 0
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           
   447 ;; *************** function _sensorUpdate *****************
   448 ;; Defined at:
   449 ;;		line 146 in file "user.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  sensorTemp     80   16[BANK0 ] int [10][4]
   454 ;;  j               2   98[BANK0 ] int 
   455 ;;  i               2   96[BANK0 ] int 
   456 ;; Return value:  Size  Location     Type
   457 ;;		None               void
   458 ;; Registers used:
   459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   466 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   467 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   468 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   469 ;;Total ram usage:       90 bytes
   470 ;; Hardware stack levels used:    1
   471 ;; Hardware stack levels required when called:    6
   472 ;; This function calls:
   473 ;;		___wmul
   474 ;;		_sensorComputation
   475 ;; This function is called by:
   476 ;;		_main
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480                           	psect	text1
   481  0014C6                     __ptext1:
   482                           	opt stack 0
   483  0014C6                     _sensorUpdate:
   484                           	opt stack 24
   485                           
   486                           ;user.c: 148: int i,j;
   487                           ;user.c: 149: int sensorTemp[4][10];
   488                           ;user.c: 152: for(i = 0; i < 10; i++)
   489                           
   490                           ;incstack = 0
   491  0014C6  0E00               	movlw	0
   492  0014C8  0100               	movlb	0	; () banked
   493  0014CA  6FE1               	movwf	(sensorUpdate@i+1)& (0+255),b
   494  0014CC  0E00               	movlw	0
   495  0014CE  6FE0               	movwf	sensorUpdate@i& (0+255),b
   496                           
   497                           ; BSR set to: 0
   498  0014D0  0100               	movlb	0	; () banked
   499  0014D2  BFE1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   500  0014D4  D00A               	goto	l1800
   501  0014D6  0100               	movlb	0	; () banked
   502  0014D8  51E1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   503  0014DA  E106               	bnz	u1440
   504  0014DC  0E0A               	movlw	10
   505  0014DE  0100               	movlb	0	; () banked
   506  0014E0  5DE0               	subwf	sensorUpdate@i& (0+255),w,b
   507  0014E2  B0D8               	btfsc	status,0,c
   508  0014E4  D0E9               	goto	l1828
   509  0014E6  D001               	goto	l1800
   510  0014E8                     u1440:
   511                           
   512                           ; BSR set to: 0
   513  0014E8  D0E7               	goto	l1828
   514  0014EA                     l1800:
   515                           
   516                           ; BSR set to: 0
   517                           ;user.c: 153: {
   518                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   519  0014EA  0E00               	movlw	0
   520  0014EC  0100               	movlb	0	; () banked
   521  0014EE  6FE3               	movwf	(sensorUpdate@j+1)& (0+255),b
   522  0014F0  0E00               	movlw	0
   523  0014F2  6FE2               	movwf	sensorUpdate@j& (0+255),b
   524                           
   525                           ; BSR set to: 0
   526  0014F4  0100               	movlb	0	; () banked
   527  0014F6  BFE3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   528  0014F8  D00A               	goto	l1806
   529  0014FA  0100               	movlb	0	; () banked
   530  0014FC  51E3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   531  0014FE  E106               	bnz	u1450
   532  001500  0E04               	movlw	4
   533  001502  0100               	movlb	0	; () banked
   534  001504  5DE2               	subwf	sensorUpdate@j& (0+255),w,b
   535  001506  B0D8               	btfsc	status,0,c
   536  001508  D0CC               	goto	l1824
   537  00150A  D001               	goto	l1806
   538  00150C                     u1450:
   539                           
   540                           ; BSR set to: 0
   541  00150C  D0CA               	goto	l1824
   542  00150E                     l1806:
   543                           
   544                           ; BSR set to: 0
   545                           ;user.c: 155: {
   546                           ;user.c: 156: ADCON0 = sensorLocation[j];
   547  00150E  0E05               	movlw	low _sensorLocation
   548  001510  0100               	movlb	0	; () banked
   549  001512  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   550  001514  6EF6               	movwf	tblptrl,c
   551  001516  0E10               	movlw	high _sensorLocation
   552  001518  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   553  00151A  6EF7               	movwf	tblptrh,c
   554  00151C                     	if	0	;There are less than 3 active tblptr bytes
   555  00151C                     	endif
   556  00151C  0008               	tblrd		*
   557  00151E  CFF5 FFC2          	movff	tablat,4034	;volatile
   558                           
   559                           ; BSR set to: 0
   560                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   561  001522  82C2               	bsf	4034,1,c	;volatile
   562                           
   563                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   564  001524  D000               	goto	l267
   565  001526                     l267:
   566  001526  B2C2               	btfsc	4034,1,c	;volatile
   567  001528  D7FE               	goto	l267
   568                           
   569                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   570  00152A  CFC3 F08A          	movff	4035,??_sensorUpdate	;volatile
   571  00152E  0E06               	movlw	6
   572  001530  0100               	movlb	0	; () banked
   573  001532  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   574  001534                     u1475:
   575  001534  0100               	movlb	0	; () banked
   576  001536  90D8               	bcf	status,0,c
   577  001538  338A               	rrcf	??_sensorUpdate& (0+255),f,b
   578  00153A  0100               	movlb	0	; () banked
   579  00153C  2F8B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   580  00153E  D7FA               	goto	u1475
   581  001540  0100               	movlb	0	; () banked
   582  001542  518A               	movf	??_sensorUpdate& (0+255),w,b
   583  001544  CFC4 F08C          	movff	4036,??_sensorUpdate+2	;volatile
   584  001548  0100               	movlb	0	; () banked
   585  00154A  6B8D               	clrf	(??_sensorUpdate+3)& (0+255),b
   586  00154C  0100               	movlb	0	; () banked
   587  00154E  90D8               	bcf	status,0,c
   588  001550  378C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   589  001552  378D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   590  001554  0100               	movlb	0	; () banked
   591  001556  90D8               	bcf	status,0,c
   592  001558  378C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   593  00155A  378D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   594  00155C  0100               	movlb	0	; () banked
   595  00155E  278C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   596  001560  0E00               	movlw	0
   597  001562  238D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   598  001564  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   599  001568  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   600  00156C  0E00               	movlw	0
   601  00156E  6E2B               	movwf	___wmul@multiplicand+1,c
   602  001570  0E14               	movlw	20
   603  001572  6E2A               	movwf	___wmul@multiplicand,c
   604  001574  EC05  F00D         	call	___wmul	;wreg free
   605  001578  0E90               	movlw	low sensorUpdate@sensorTemp
   606  00157A  0100               	movlb	0	; () banked
   607  00157C  6F8E               	movwf	(??_sensorUpdate+4)& (0+255),b
   608  00157E  0E00               	movlw	high sensorUpdate@sensorTemp
   609  001580  0100               	movlb	0	; () banked
   610  001582  6F8F               	movwf	(??_sensorUpdate+5)& (0+255),b
   611  001584  5028               	movf	?___wmul,w,c
   612  001586  0100               	movlb	0	; () banked
   613  001588  278E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   614  00158A  5029               	movf	?___wmul+1,w,c
   615  00158C  0100               	movlb	0	; () banked
   616  00158E  238F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   617  001590  90D8               	bcf	status,0,c
   618  001592  0100               	movlb	0	; () banked
   619  001594  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   620  001596  6ED9               	movwf	fsr2l,c
   621  001598  0100               	movlb	0	; () banked
   622  00159A  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   623  00159C  6EDA               	movwf	fsr2h,c
   624  00159E  0100               	movlb	0	; () banked
   625  0015A0  518E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   626  0015A2  26D9               	addwf	fsr2l,f,c
   627  0015A4  0100               	movlb	0	; () banked
   628  0015A6  518F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   629  0015A8  22DA               	addwfc	fsr2h,f,c
   630  0015AA  C08C  FFDE         	movff	??_sensorUpdate+2,postinc2
   631  0015AE  C08D  FFDD         	movff	??_sensorUpdate+3,postdec2
   632                           
   633                           ; BSR set to: 0
   634                           ;user.c: 163: if(j == 0 || j == 3)
   635  0015B2  0100               	movlb	0	; () banked
   636  0015B4  51E2               	movf	sensorUpdate@j& (0+255),w,b
   637  0015B6  0100               	movlb	0	; () banked
   638  0015B8  11E3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   639  0015BA  B4D8               	btfsc	status,2,c
   640  0015BC  D007               	goto	l1816
   641                           
   642                           ; BSR set to: 0
   643  0015BE  0E03               	movlw	3
   644  0015C0  0100               	movlb	0	; () banked
   645  0015C2  19E2               	xorwf	sensorUpdate@j& (0+255),w,b
   646  0015C4  0100               	movlb	0	; () banked
   647  0015C6  11E3               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   648  0015C8  A4D8               	btfss	status,2,c
   649  0015CA  D030               	goto	l1818
   650  0015CC                     l1816:
   651                           
   652                           ; BSR set to: 0
   653                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   654  0015CC  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   655  0015D0  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   656  0015D4  0E00               	movlw	0
   657  0015D6  6E2B               	movwf	___wmul@multiplicand+1,c
   658  0015D8  0E14               	movlw	20
   659  0015DA  6E2A               	movwf	___wmul@multiplicand,c
   660  0015DC  EC05  F00D         	call	___wmul	;wreg free
   661  0015E0  0E90               	movlw	low sensorUpdate@sensorTemp
   662  0015E2  0100               	movlb	0	; () banked
   663  0015E4  6F8A               	movwf	??_sensorUpdate& (0+255),b
   664  0015E6  0E00               	movlw	high sensorUpdate@sensorTemp
   665  0015E8  0100               	movlb	0	; () banked
   666  0015EA  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   667  0015EC  5028               	movf	?___wmul,w,c
   668  0015EE  0100               	movlb	0	; () banked
   669  0015F0  278A               	addwf	??_sensorUpdate& (0+255),f,b
   670  0015F2  5029               	movf	?___wmul+1,w,c
   671  0015F4  0100               	movlb	0	; () banked
   672  0015F6  238B               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   673  0015F8  90D8               	bcf	status,0,c
   674  0015FA  0100               	movlb	0	; () banked
   675  0015FC  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   676  0015FE  6ED9               	movwf	fsr2l,c
   677  001600  0100               	movlb	0	; () banked
   678  001602  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   679  001604  6EDA               	movwf	fsr2h,c
   680  001606  0100               	movlb	0	; () banked
   681  001608  518A               	movf	??_sensorUpdate& (0+255),w,b
   682  00160A  26D9               	addwf	fsr2l,f,c
   683  00160C  0100               	movlb	0	; () banked
   684  00160E  518B               	movf	(??_sensorUpdate+1)& (0+255),w,b
   685  001610  22DA               	addwfc	fsr2h,f,c
   686  001612  0E01               	movlw	low _sensorCorrection
   687  001614  0100               	movlb	0	; () banked
   688  001616  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   689  001618  6EF6               	movwf	tblptrl,c
   690  00161A  0E10               	movlw	high _sensorCorrection
   691  00161C  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   692  00161E  6EF7               	movwf	tblptrh,c
   693  001620                     	if	0	;There are less than 3 active tblptr bytes
   694  001620                     	endif
   695  001620  0008               	tblrd		*
   696  001622  50F5               	movf	tablat,w,c
   697  001624  5EDE               	subwf	postinc2,f,c
   698  001626  0E00               	movlw	0
   699  001628  5ADD               	subwfb	postdec2,f,c
   700  00162A  D030               	goto	l1820
   701  00162C                     l1818:
   702                           
   703                           ; BSR set to: 0
   704                           ;user.c: 165: else
   705                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   706  00162C  C0E2  F028         	movff	sensorUpdate@j,___wmul@multiplier
   707  001630  C0E3  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   708  001634  0E00               	movlw	0
   709  001636  6E2B               	movwf	___wmul@multiplicand+1,c
   710  001638  0E14               	movlw	20
   711  00163A  6E2A               	movwf	___wmul@multiplicand,c
   712  00163C  EC05  F00D         	call	___wmul	;wreg free
   713  001640  0E90               	movlw	low sensorUpdate@sensorTemp
   714  001642  0100               	movlb	0	; () banked
   715  001644  6F8A               	movwf	??_sensorUpdate& (0+255),b
   716  001646  0E00               	movlw	high sensorUpdate@sensorTemp
   717  001648  0100               	movlb	0	; () banked
   718  00164A  6F8B               	movwf	(??_sensorUpdate+1)& (0+255),b
   719  00164C  5028               	movf	?___wmul,w,c
   720  00164E  0100               	movlb	0	; () banked
   721  001650  278A               	addwf	??_sensorUpdate& (0+255),f,b
   722  001652  5029               	movf	?___wmul+1,w,c
   723  001654  0100               	movlb	0	; () banked
   724  001656  238B               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   725  001658  90D8               	bcf	status,0,c
   726  00165A  0100               	movlb	0	; () banked
   727  00165C  35E0               	rlcf	sensorUpdate@i& (0+255),w,b
   728  00165E  6ED9               	movwf	fsr2l,c
   729  001660  0100               	movlb	0	; () banked
   730  001662  35E1               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   731  001664  6EDA               	movwf	fsr2h,c
   732  001666  0100               	movlb	0	; () banked
   733  001668  518A               	movf	??_sensorUpdate& (0+255),w,b
   734  00166A  26D9               	addwf	fsr2l,f,c
   735  00166C  0100               	movlb	0	; () banked
   736  00166E  518B               	movf	(??_sensorUpdate+1)& (0+255),w,b
   737  001670  22DA               	addwfc	fsr2h,f,c
   738  001672  0E01               	movlw	low _sensorCorrection
   739  001674  0100               	movlb	0	; () banked
   740  001676  25E2               	addwf	sensorUpdate@j& (0+255),w,b
   741  001678  6EF6               	movwf	tblptrl,c
   742  00167A  0E10               	movlw	high _sensorCorrection
   743  00167C  21E3               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   744  00167E  6EF7               	movwf	tblptrh,c
   745  001680                     	if	0	;There are less than 3 active tblptr bytes
   746  001680                     	endif
   747  001680  0008               	tblrd		*
   748  001682  50F5               	movf	tablat,w,c
   749  001684  26DE               	addwf	postinc2,f,c
   750  001686  0E00               	movlw	0
   751  001688  22DD               	addwfc	postdec2,f,c
   752  00168A  D000               	goto	l1820
   753  00168C                     l1820:
   754                           
   755                           ; BSR set to: 0
   756  00168C  0100               	movlb	0	; () banked
   757  00168E  4BE2               	infsnz	sensorUpdate@j& (0+255),f,b
   758  001690  2BE3               	incf	(sensorUpdate@j+1)& (0+255),f,b
   759                           
   760                           ; BSR set to: 0
   761  001692  0100               	movlb	0	; () banked
   762  001694  BFE3               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   763  001696  D73B               	goto	l1806
   764  001698  0100               	movlb	0	; () banked
   765  00169A  51E3               	movf	(sensorUpdate@j+1)& (0+255),w,b
   766  00169C  E102               	bnz	l1824
   767  00169E  D730               	goto	L1
   768  0016A0  D000               	goto	l1824
   769  0016A2                     l1824:
   770                           
   771                           ; BSR set to: 0
   772  0016A2  0100               	movlb	0	; () banked
   773  0016A4  4BE0               	infsnz	sensorUpdate@i& (0+255),f,b
   774  0016A6  2BE1               	incf	(sensorUpdate@i+1)& (0+255),f,b
   775                           
   776                           ; BSR set to: 0
   777  0016A8  0100               	movlb	0	; () banked
   778  0016AA  BFE1               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   779  0016AC  D71E               	goto	l1800
   780  0016AE  0100               	movlb	0	; () banked
   781  0016B0  51E1               	movf	(sensorUpdate@i+1)& (0+255),w,b
   782  0016B2  E102               	bnz	l1828
   783  0016B4  D713               	goto	L2
   784  0016B6  D000               	goto	l1828
   785  0016B8                     l1828:
   786                           
   787                           ; BSR set to: 0
   788                           ;user.c: 167: }
   789                           ;user.c: 168: }
   790                           ;user.c: 171: sensorComputation(sensorTemp);
   791  0016B8  0E90               	movlw	low sensorUpdate@sensorTemp
   792  0016BA  6E33               	movwf	sensorComputation@sensorTemp,c
   793  0016BC  0E00               	movlw	high sensorUpdate@sensorTemp
   794  0016BE  6E34               	movwf	sensorComputation@sensorTemp+1,c
   795  0016C0  EC4D  F009         	call	_sensorComputation	;wreg free
   796  0016C4  0012               	return		;funcret
   797  0016C6                     __end_of_sensorUpdate:
   798                           	opt stack 0
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postinc2	equ	0xFDE
   806                           postdec2	equ	0xFDD
   807                           fsr2h	equ	0xFDA
   808                           fsr2l	equ	0xFD9
   809                           status	equ	0xFD8
   810                           
   811 ;; *************** function _sensorComputation *****************
   812 ;; Defined at:
   813 ;;		line 125 in file "user.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   816 ;;		 -> sensorUpdate@sensorTemp(80), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  j               2    8[BANK0 ] int 
   819 ;;  i               2    6[BANK0 ] int 
   820 ;;  sum             2    4[BANK0 ] int 
   821 ;;  min             2    2[BANK0 ] int 
   822 ;;  max             2    0[BANK0 ] int 
   823 ;; Return value:  Size  Location     Type
   824 ;;		None               void
   825 ;; Registers used:
   826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;Total ram usage:       14 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    5
   839 ;; This function calls:
   840 ;;		_MAX
   841 ;;		_MIN
   842 ;;		___awdiv
   843 ;;		___wmul
   844 ;; This function is called by:
   845 ;;		_sensorUpdate
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text2
   850  00129A                     __ptext2:
   851                           	opt stack 0
   852  00129A                     _sensorComputation:
   853                           	opt stack 24
   854                           
   855                           ;user.c: 127: int max,min,i,j,sum;
   856                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   857                           
   858                           ;incstack = 0
   859  00129A  0E00               	movlw	0
   860  00129C  0100               	movlb	0	; () banked
   861  00129E  6F87               	movwf	(sensorComputation@i+1)& (0+255),b
   862  0012A0  0E00               	movlw	0
   863  0012A2  6F86               	movwf	sensorComputation@i& (0+255),b
   864                           
   865                           ; BSR set to: 0
   866  0012A4  0100               	movlb	0	; () banked
   867  0012A6  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   868  0012A8  D00A               	goto	l1770
   869  0012AA  0100               	movlb	0	; () banked
   870  0012AC  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
   871  0012AE  E106               	bnz	u1390
   872  0012B0  0E04               	movlw	4
   873  0012B2  0100               	movlb	0	; () banked
   874  0012B4  5D86               	subwf	sensorComputation@i& (0+255),w,b
   875  0012B6  B0D8               	btfsc	status,0,c
   876  0012B8  D105               	goto	l260
   877  0012BA  D001               	goto	l1770
   878  0012BC                     u1390:
   879                           
   880                           ; BSR set to: 0
   881  0012BC  D103               	goto	l260
   882  0012BE                     l1770:
   883                           
   884                           ; BSR set to: 0
   885                           ;user.c: 129: {
   886                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   887  0012BE  0E00               	movlw	0
   888  0012C0  0100               	movlb	0	; () banked
   889  0012C2  6F89               	movwf	(sensorComputation@j+1)& (0+255),b
   890  0012C4  0E00               	movlw	0
   891  0012C6  6F88               	movwf	sensorComputation@j& (0+255),b
   892                           
   893                           ; BSR set to: 0
   894  0012C8  0100               	movlb	0	; () banked
   895  0012CA  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   896  0012CC  D00A               	goto	l1776
   897  0012CE  0100               	movlb	0	; () banked
   898  0012D0  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
   899  0012D2  E106               	bnz	u1400
   900  0012D4  0E0A               	movlw	10
   901  0012D6  0100               	movlb	0	; () banked
   902  0012D8  5D88               	subwf	sensorComputation@j& (0+255),w,b
   903  0012DA  B0D8               	btfsc	status,0,c
   904  0012DC  D0B7               	goto	l1786
   905  0012DE  D001               	goto	l1776
   906  0012E0                     u1400:
   907                           
   908                           ; BSR set to: 0
   909  0012E0  D0B5               	goto	l1786
   910  0012E2                     l1776:
   911                           
   912                           ; BSR set to: 0
   913                           ;user.c: 131: {
   914                           ;user.c: 132: if(j == 0)
   915  0012E2  0100               	movlb	0	; () banked
   916  0012E4  5188               	movf	sensorComputation@j& (0+255),w,b
   917  0012E6  0100               	movlb	0	; () banked
   918  0012E8  1189               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   919  0012EA  A4D8               	btfss	status,2,c
   920  0012EC  D02A               	goto	l1780
   921                           
   922                           ; BSR set to: 0
   923                           ;user.c: 133: {
   924                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   925  0012EE  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   926  0012F2  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   927  0012F6  0E00               	movlw	0
   928  0012F8  6E2B               	movwf	___wmul@multiplicand+1,c
   929  0012FA  0E14               	movlw	20
   930  0012FC  6E2A               	movwf	___wmul@multiplicand,c
   931  0012FE  EC05  F00D         	call	___wmul	;wreg free
   932  001302  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   933  001306  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   934  00130A  5028               	movf	?___wmul,w,c
   935  00130C  2635               	addwf	??_sensorComputation,f,c
   936  00130E  5029               	movf	?___wmul+1,w,c
   937  001310  2236               	addwfc	??_sensorComputation+1,f,c
   938  001312  90D8               	bcf	status,0,c
   939  001314  0100               	movlb	0	; () banked
   940  001316  3588               	rlcf	sensorComputation@j& (0+255),w,b
   941  001318  6ED9               	movwf	fsr2l,c
   942  00131A  0100               	movlb	0	; () banked
   943  00131C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   944  00131E  6EDA               	movwf	fsr2h,c
   945  001320  5035               	movf	??_sensorComputation,w,c
   946  001322  26D9               	addwf	fsr2l,f,c
   947  001324  5036               	movf	??_sensorComputation+1,w,c
   948  001326  22DA               	addwfc	fsr2h,f,c
   949  001328  CFDE F080          	movff	postinc2,sensorComputation@max
   950  00132C  CFDD F081          	movff	postdec2,sensorComputation@max+1
   951  001330  C080  F082         	movff	sensorComputation@max,sensorComputation@min
   952  001334  C081  F083         	movff	sensorComputation@max+1,sensorComputation@min+1
   953  001338  C082  F084         	movff	sensorComputation@min,sensorComputation@sum
   954  00133C  C083  F085         	movff	sensorComputation@min+1,sensorComputation@sum+1
   955                           
   956                           ;user.c: 135: continue;
   957  001340  D07A               	goto	l1782
   958  001342                     l1780:
   959                           
   960                           ; BSR set to: 0
   961                           ;user.c: 136: }
   962                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   963  001342  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   964  001346  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   965  00134A  0E00               	movlw	0
   966  00134C  6E2B               	movwf	___wmul@multiplicand+1,c
   967  00134E  0E14               	movlw	20
   968  001350  6E2A               	movwf	___wmul@multiplicand,c
   969  001352  EC05  F00D         	call	___wmul	;wreg free
   970  001356  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   971  00135A  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   972  00135E  5028               	movf	?___wmul,w,c
   973  001360  2635               	addwf	??_sensorComputation,f,c
   974  001362  5029               	movf	?___wmul+1,w,c
   975  001364  2236               	addwfc	??_sensorComputation+1,f,c
   976  001366  90D8               	bcf	status,0,c
   977  001368  0100               	movlb	0	; () banked
   978  00136A  3588               	rlcf	sensorComputation@j& (0+255),w,b
   979  00136C  6ED9               	movwf	fsr2l,c
   980  00136E  0100               	movlb	0	; () banked
   981  001370  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
   982  001372  6EDA               	movwf	fsr2h,c
   983  001374  5035               	movf	??_sensorComputation,w,c
   984  001376  26D9               	addwf	fsr2l,f,c
   985  001378  5036               	movf	??_sensorComputation+1,w,c
   986  00137A  22DA               	addwfc	fsr2h,f,c
   987  00137C  CFDE F02E          	movff	postinc2,MIN@a
   988  001380  CFDD F02F          	movff	postdec2,MIN@a+1
   989  001384  C082  F030         	movff	sensorComputation@min,MIN@b
   990  001388  C083  F031         	movff	sensorComputation@min+1,MIN@b+1
   991  00138C  EC19  F00D         	call	_MIN	;wreg free
   992  001390  C02E  F082         	movff	?_MIN,sensorComputation@min
   993  001394  C02F  F083         	movff	?_MIN+1,sensorComputation@min+1
   994                           
   995                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   996  001398  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
   997  00139C  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   998  0013A0  0E00               	movlw	0
   999  0013A2  6E2B               	movwf	___wmul@multiplicand+1,c
  1000  0013A4  0E14               	movlw	20
  1001  0013A6  6E2A               	movwf	___wmul@multiplicand,c
  1002  0013A8  EC05  F00D         	call	___wmul	;wreg free
  1003  0013AC  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1004  0013B0  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1005  0013B4  5028               	movf	?___wmul,w,c
  1006  0013B6  2635               	addwf	??_sensorComputation,f,c
  1007  0013B8  5029               	movf	?___wmul+1,w,c
  1008  0013BA  2236               	addwfc	??_sensorComputation+1,f,c
  1009  0013BC  90D8               	bcf	status,0,c
  1010  0013BE  0100               	movlb	0	; () banked
  1011  0013C0  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1012  0013C2  6ED9               	movwf	fsr2l,c
  1013  0013C4  0100               	movlb	0	; () banked
  1014  0013C6  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1015  0013C8  6EDA               	movwf	fsr2h,c
  1016  0013CA  5035               	movf	??_sensorComputation,w,c
  1017  0013CC  26D9               	addwf	fsr2l,f,c
  1018  0013CE  5036               	movf	??_sensorComputation+1,w,c
  1019  0013D0  22DA               	addwfc	fsr2h,f,c
  1020  0013D2  CFDE F02E          	movff	postinc2,MAX@a
  1021  0013D6  CFDD F02F          	movff	postdec2,MAX@a+1
  1022  0013DA  C080  F030         	movff	sensorComputation@max,MAX@b
  1023  0013DE  C081  F031         	movff	sensorComputation@max+1,MAX@b+1
  1024  0013E2  EC2D  F00D         	call	_MAX	;wreg free
  1025  0013E6  C02E  F080         	movff	?_MAX,sensorComputation@max
  1026  0013EA  C02F  F081         	movff	?_MAX+1,sensorComputation@max+1
  1027                           
  1028                           ;user.c: 139: sum += sensorTemp[i][j];
  1029  0013EE  C086  F028         	movff	sensorComputation@i,___wmul@multiplier
  1030  0013F2  C087  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1031  0013F6  0E00               	movlw	0
  1032  0013F8  6E2B               	movwf	___wmul@multiplicand+1,c
  1033  0013FA  0E14               	movlw	20
  1034  0013FC  6E2A               	movwf	___wmul@multiplicand,c
  1035  0013FE  EC05  F00D         	call	___wmul	;wreg free
  1036  001402  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1037  001406  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1038  00140A  5028               	movf	?___wmul,w,c
  1039  00140C  2635               	addwf	??_sensorComputation,f,c
  1040  00140E  5029               	movf	?___wmul+1,w,c
  1041  001410  2236               	addwfc	??_sensorComputation+1,f,c
  1042  001412  90D8               	bcf	status,0,c
  1043  001414  0100               	movlb	0	; () banked
  1044  001416  3588               	rlcf	sensorComputation@j& (0+255),w,b
  1045  001418  6ED9               	movwf	fsr2l,c
  1046  00141A  0100               	movlb	0	; () banked
  1047  00141C  3589               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1048  00141E  6EDA               	movwf	fsr2h,c
  1049  001420  5035               	movf	??_sensorComputation,w,c
  1050  001422  26D9               	addwf	fsr2l,f,c
  1051  001424  5036               	movf	??_sensorComputation+1,w,c
  1052  001426  22DA               	addwfc	fsr2h,f,c
  1053  001428  50DE               	movf	postinc2,w,c
  1054  00142A  0100               	movlb	0	; () banked
  1055  00142C  2784               	addwf	sensorComputation@sum& (0+255),f,b
  1056  00142E  50DD               	movf	postdec2,w,c
  1057  001430  0100               	movlb	0	; () banked
  1058  001432  2385               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1059  001434  D000               	goto	l1782
  1060  001436                     l1782:
  1061                           
  1062                           ; BSR set to: 0
  1063  001436  0100               	movlb	0	; () banked
  1064  001438  4B88               	infsnz	sensorComputation@j& (0+255),f,b
  1065  00143A  2B89               	incf	(sensorComputation@j+1)& (0+255),f,b
  1066                           
  1067                           ; BSR set to: 0
  1068  00143C  0100               	movlb	0	; () banked
  1069  00143E  BF89               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1070  001440  D750               	goto	l1776
  1071  001442  0100               	movlb	0	; () banked
  1072  001444  5189               	movf	(sensorComputation@j+1)& (0+255),w,b
  1073  001446  E102               	bnz	l1786
  1074  001448  D745               	goto	L3
  1075  00144A  D000               	goto	l1786
  1076  00144C                     l1786:
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;user.c: 140: }
  1080                           ;user.c: 141: sum = sum - min - max;
  1081  00144C  0100               	movlb	0	; () banked
  1082  00144E  5180               	movf	sensorComputation@max& (0+255),w,b
  1083  001450  0100               	movlb	0	; () banked
  1084  001452  2582               	addwf	sensorComputation@min& (0+255),w,b
  1085  001454  6E35               	movwf	??_sensorComputation& (0+255),c
  1086  001456  0100               	movlb	0	; () banked
  1087  001458  5181               	movf	(sensorComputation@max+1)& (0+255),w,b
  1088  00145A  0100               	movlb	0	; () banked
  1089  00145C  2183               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1090  00145E  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1091  001460  1E35               	comf	??_sensorComputation,f,c
  1092  001462  1E36               	comf	??_sensorComputation+1,f,c
  1093  001464  4A35               	infsnz	??_sensorComputation,f,c
  1094  001466  2A36               	incf	??_sensorComputation+1,f,c
  1095  001468  0100               	movlb	0	; () banked
  1096  00146A  5184               	movf	sensorComputation@sum& (0+255),w,b
  1097  00146C  2435               	addwf	??_sensorComputation,w,c
  1098  00146E  0100               	movlb	0	; () banked
  1099  001470  6F84               	movwf	sensorComputation@sum& (0+255),b
  1100  001472  0100               	movlb	0	; () banked
  1101  001474  5185               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1102  001476  2036               	addwfc	??_sensorComputation+1,w,c
  1103  001478  0100               	movlb	0	; () banked
  1104  00147A  6F85               	movwf	(sensorComputation@sum+1)& (0+255),b
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1108  00147C  C084  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1109  001480  C085  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1110  001484  0E00               	movlw	0
  1111  001486  6E2B               	movwf	___awdiv@divisor+1,c
  1112  001488  0E08               	movlw	8
  1113  00148A  6E2A               	movwf	___awdiv@divisor,c
  1114  00148C  EC4A  F00C         	call	___awdiv	;wreg free
  1115  001490  90D8               	bcf	status,0,c
  1116  001492  0100               	movlb	0	; () banked
  1117  001494  3586               	rlcf	sensorComputation@i& (0+255),w,b
  1118  001496  6ED9               	movwf	fsr2l,c
  1119  001498  0100               	movlb	0	; () banked
  1120  00149A  3587               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1121  00149C  6EDA               	movwf	fsr2h,c
  1122  00149E  0E37               	movlw	low _sensorValue
  1123  0014A0  26D9               	addwf	fsr2l,f,c
  1124  0014A2  0E00               	movlw	high _sensorValue
  1125  0014A4  22DA               	addwfc	fsr2h,f,c
  1126  0014A6  C028  FFDE         	movff	?___awdiv,postinc2
  1127  0014AA  C029  FFDD         	movff	?___awdiv+1,postdec2
  1128                           
  1129                           ; BSR set to: 0
  1130  0014AE  0100               	movlb	0	; () banked
  1131  0014B0  4B86               	infsnz	sensorComputation@i& (0+255),f,b
  1132  0014B2  2B87               	incf	(sensorComputation@i+1)& (0+255),f,b
  1133                           
  1134                           ; BSR set to: 0
  1135  0014B4  0100               	movlb	0	; () banked
  1136  0014B6  BF87               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1137  0014B8  D702               	goto	l1770
  1138  0014BA  0100               	movlb	0	; () banked
  1139  0014BC  5187               	movf	(sensorComputation@i+1)& (0+255),w,b
  1140  0014BE  E102               	bnz	l260
  1141  0014C0  D6F7               	goto	L4
  1142  0014C2  D000               	goto	l260
  1143  0014C4                     l260:
  1144                           
  1145                           ; BSR set to: 0
  1146  0014C4  0012               	return		;funcret
  1147  0014C6                     __end_of_sensorComputation:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postinc2	equ	0xFDE
  1156                           postdec2	equ	0xFDD
  1157                           fsr2h	equ	0xFDA
  1158                           fsr2l	equ	0xFD9
  1159                           status	equ	0xFD8
  1160                           
  1161 ;; *************** function ___wmul *****************
  1162 ;; Defined at:
  1163 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  multiplier      2   39[COMRAM] unsigned int 
  1166 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  product         2   43[COMRAM] unsigned int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  2   39[COMRAM] unsigned int 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2, status,0, prodl, prodh
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;Total ram usage:        6 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; Hardware stack levels required when called:    4
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_sensorComputation
  1189 ;;		_sensorUpdate
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text3
  1194  001A0A                     __ptext3:
  1195                           	opt stack 0
  1196  001A0A                     ___wmul:
  1197                           	opt stack 24
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;incstack = 0
  1201  001A0A  5028               	movf	___wmul@multiplier,w,c
  1202  001A0C  022A               	mulwf	___wmul@multiplicand,c
  1203  001A0E  CFF3 F02C          	movff	prodl,___wmul@product
  1204  001A12  CFF4 F02D          	movff	prodh,___wmul@product+1
  1205  001A16  5028               	movf	___wmul@multiplier,w,c
  1206  001A18  022B               	mulwf	___wmul@multiplicand+1,c
  1207  001A1A  50F3               	movf	prodl,w,c
  1208  001A1C  262D               	addwf	___wmul@product+1,f,c
  1209  001A1E  5029               	movf	___wmul@multiplier+1,w,c
  1210  001A20  022A               	mulwf	___wmul@multiplicand,c
  1211  001A22  50F3               	movf	prodl,w,c
  1212  001A24  262D               	addwf	___wmul@product+1,f,c
  1213  001A26  C02C  F028         	movff	___wmul@product,?___wmul
  1214  001A2A  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1215  001A2E  D000               	goto	l285
  1216  001A30                     l285:
  1217  001A30  0012               	return		;funcret
  1218  001A32                     __end_of___wmul:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           prodh	equ	0xFF4
  1225                           prodl	equ	0xFF3
  1226                           postinc0	equ	0xFEE
  1227                           wreg	equ	0xFE8
  1228                           postinc2	equ	0xFDE
  1229                           postdec2	equ	0xFDD
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function ___awdiv *****************
  1235 ;; Defined at:
  1236 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;  dividend        2   39[COMRAM] int 
  1239 ;;  divisor         2   41[COMRAM] int 
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  quotient        2   45[COMRAM] int 
  1242 ;;  sign            1   44[COMRAM] unsigned char 
  1243 ;;  counter         1   43[COMRAM] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   39[COMRAM] int 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;Total ram usage:        8 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    4
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_sensorComputation
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text4
  1268  001894                     __ptext4:
  1269                           	opt stack 0
  1270  001894                     ___awdiv:
  1271                           	opt stack 24
  1272                           
  1273                           ;incstack = 0
  1274  001894  0E00               	movlw	0
  1275  001896  6E2D               	movwf	___awdiv@sign,c
  1276  001898  AE2B               	btfss	___awdiv@divisor+1,7,c
  1277  00189A  D007               	goto	l1728
  1278  00189C  6C2A               	negf	___awdiv@divisor,c
  1279  00189E  1E2B               	comf	___awdiv@divisor+1,f,c
  1280  0018A0  B0D8               	btfsc	status,0,c
  1281  0018A2  2A2B               	incf	___awdiv@divisor+1,f,c
  1282  0018A4  0E01               	movlw	1
  1283  0018A6  6E2D               	movwf	___awdiv@sign,c
  1284  0018A8  D000               	goto	l1728
  1285  0018AA                     l1728:
  1286  0018AA  AE29               	btfss	___awdiv@dividend+1,7,c
  1287  0018AC  D007               	goto	l1734
  1288  0018AE  6C28               	negf	___awdiv@dividend,c
  1289  0018B0  1E29               	comf	___awdiv@dividend+1,f,c
  1290  0018B2  B0D8               	btfsc	status,0,c
  1291  0018B4  2A29               	incf	___awdiv@dividend+1,f,c
  1292  0018B6  0E01               	movlw	1
  1293  0018B8  1A2D               	xorwf	___awdiv@sign,f,c
  1294  0018BA  D000               	goto	l1734
  1295  0018BC                     l1734:
  1296  0018BC  0E00               	movlw	0
  1297  0018BE  6E2F               	movwf	___awdiv@quotient+1,c
  1298  0018C0  0E00               	movlw	0
  1299  0018C2  6E2E               	movwf	___awdiv@quotient,c
  1300  0018C4  502A               	movf	___awdiv@divisor,w,c
  1301  0018C6  102B               	iorwf	___awdiv@divisor+1,w,c
  1302  0018C8  B4D8               	btfsc	status,2,c
  1303  0018CA  D021               	goto	l1756
  1304  0018CC  0E01               	movlw	1
  1305  0018CE  6E2C               	movwf	___awdiv@counter,c
  1306  0018D0  D005               	goto	l1742
  1307  0018D2                     l1740:
  1308  0018D2  90D8               	bcf	status,0,c
  1309  0018D4  362A               	rlcf	___awdiv@divisor,f,c
  1310  0018D6  362B               	rlcf	___awdiv@divisor+1,f,c
  1311  0018D8  2A2C               	incf	___awdiv@counter,f,c
  1312  0018DA  D000               	goto	l1742
  1313  0018DC                     l1742:
  1314  0018DC  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1315  0018DE  D002               	goto	l1744
  1316  0018E0  D7F8               	goto	l1740
  1317  0018E2  D000               	goto	l1744
  1318  0018E4                     l1744:
  1319  0018E4  90D8               	bcf	status,0,c
  1320  0018E6  362E               	rlcf	___awdiv@quotient,f,c
  1321  0018E8  362F               	rlcf	___awdiv@quotient+1,f,c
  1322  0018EA  502A               	movf	___awdiv@divisor,w,c
  1323  0018EC  5C28               	subwf	___awdiv@dividend,w,c
  1324  0018EE  502B               	movf	___awdiv@divisor+1,w,c
  1325  0018F0  5829               	subwfb	___awdiv@dividend+1,w,c
  1326  0018F2  A0D8               	btfss	status,0,c
  1327  0018F4  D006               	goto	l1752
  1328  0018F6  502A               	movf	___awdiv@divisor,w,c
  1329  0018F8  5E28               	subwf	___awdiv@dividend,f,c
  1330  0018FA  502B               	movf	___awdiv@divisor+1,w,c
  1331  0018FC  5A29               	subwfb	___awdiv@dividend+1,f,c
  1332  0018FE  802E               	bsf	___awdiv@quotient,0,c
  1333  001900  D000               	goto	l1752
  1334  001902                     l1752:
  1335  001902  90D8               	bcf	status,0,c
  1336  001904  322B               	rrcf	___awdiv@divisor+1,f,c
  1337  001906  322A               	rrcf	___awdiv@divisor,f,c
  1338  001908  2E2C               	decfsz	___awdiv@counter,f,c
  1339  00190A  D7EC               	goto	l1744
  1340  00190C  D000               	goto	l1756
  1341  00190E                     l1756:
  1342  00190E  502D               	movf	___awdiv@sign,w,c
  1343  001910  B4D8               	btfsc	status,2,c
  1344  001912  D005               	goto	l1760
  1345  001914  6C2E               	negf	___awdiv@quotient,c
  1346  001916  1E2F               	comf	___awdiv@quotient+1,f,c
  1347  001918  B0D8               	btfsc	status,0,c
  1348  00191A  2A2F               	incf	___awdiv@quotient+1,f,c
  1349  00191C  D000               	goto	l1760
  1350  00191E                     l1760:
  1351  00191E  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1352  001922  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1353  001926  D000               	goto	l478
  1354  001928                     l478:
  1355  001928  0012               	return		;funcret
  1356  00192A                     __end_of___awdiv:
  1357                           	opt stack 0
  1358                           tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           prodh	equ	0xFF4
  1363                           prodl	equ	0xFF3
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postinc2	equ	0xFDE
  1367                           postdec2	equ	0xFDD
  1368                           fsr2h	equ	0xFDA
  1369                           fsr2l	equ	0xFD9
  1370                           status	equ	0xFD8
  1371                           
  1372 ;; *************** function _MIN *****************
  1373 ;; Defined at:
  1374 ;;		line 175 in file "user.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  a               2   45[COMRAM] int 
  1377 ;;  b               2   47[COMRAM] int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  2   45[COMRAM] int 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;Total ram usage:        5 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    4
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_sensorComputation
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text5
  1404  001A32                     __ptext5:
  1405                           	opt stack 0
  1406  001A32                     _MIN:
  1407                           	opt stack 24
  1408                           
  1409                           ;user.c: 177: if(a>b) return b;
  1410                           
  1411                           ;incstack = 0
  1412  001A32  502E               	movf	MIN@a,w,c
  1413  001A34  5C30               	subwf	MIN@b,w,c
  1414  001A36  5031               	movf	MIN@b+1,w,c
  1415  001A38  0A80               	xorlw	128
  1416  001A3A  6E32               	movwf	??_MIN& (0+255),c
  1417  001A3C  502F               	movf	MIN@a+1,w,c
  1418  001A3E  0A80               	xorlw	128
  1419  001A40  5832               	subwfb	??_MIN& (0+255),w,c
  1420  001A42  B0D8               	btfsc	status,0,c
  1421  001A44  D005               	goto	l277
  1422  001A46  C030  F02E         	movff	MIN@b,?_MIN
  1423  001A4A  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1424  001A4E  D004               	goto	l278
  1425  001A50                     l277:
  1426                           
  1427                           ;user.c: 178: return a;
  1428  001A50  C02E  F02E         	movff	MIN@a,?_MIN
  1429  001A54  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1430  001A58                     l278:
  1431  001A58  0012               	return		;funcret
  1432  001A5A                     __end_of_MIN:
  1433                           	opt stack 0
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           prodh	equ	0xFF4
  1439                           prodl	equ	0xFF3
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _MAX *****************
  1449 ;; Defined at:
  1450 ;;		line 181 in file "user.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  a               2   45[COMRAM] int 
  1453 ;;  b               2   47[COMRAM] int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  2   45[COMRAM] int 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;Total ram usage:        5 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    4
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_sensorComputation
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text6
  1480  001A5A                     __ptext6:
  1481                           	opt stack 0
  1482  001A5A                     _MAX:
  1483                           	opt stack 24
  1484                           
  1485                           ;user.c: 183: if(a>b) return a;
  1486                           
  1487                           ;incstack = 0
  1488  001A5A  502E               	movf	MAX@a,w,c
  1489  001A5C  5C30               	subwf	MAX@b,w,c
  1490  001A5E  5031               	movf	MAX@b+1,w,c
  1491  001A60  0A80               	xorlw	128
  1492  001A62  6E32               	movwf	??_MAX& (0+255),c
  1493  001A64  502F               	movf	MAX@a+1,w,c
  1494  001A66  0A80               	xorlw	128
  1495  001A68  5832               	subwfb	??_MAX& (0+255),w,c
  1496  001A6A  B0D8               	btfsc	status,0,c
  1497  001A6C  D005               	goto	l281
  1498  001A6E  C02E  F02E         	movff	MAX@a,?_MAX
  1499  001A72  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1500  001A76  D004               	goto	l282
  1501  001A78                     l281:
  1502                           
  1503                           ;user.c: 184: return b;
  1504  001A78  C030  F02E         	movff	MAX@b,?_MAX
  1505  001A7C  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1506  001A80                     l282:
  1507  001A80  0012               	return		;funcret
  1508  001A82                     __end_of_MAX:
  1509                           	opt stack 0
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _InitApp *****************
  1525 ;; Defined at:
  1526 ;;		line 35 in file "user.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;		None               void
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;Total ram usage:        0 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    5
  1547 ;; This function calls:
  1548 ;;		_AlgorithmSelection
  1549 ;;		_delay
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text7
  1556  00192A                     __ptext7:
  1557                           	opt stack 0
  1558  00192A                     _InitApp:
  1559                           	opt stack 25
  1560                           
  1561                           ;user.c: 39: TRISC = 0;
  1562                           
  1563                           ;incstack = 0
  1564  00192A  0E00               	movlw	0
  1565  00192C  6E94               	movwf	3988,c	;volatile
  1566                           
  1567                           ;user.c: 43: TRISEbits.TRISE1=1;
  1568  00192E  8296               	bsf	3990,1,c	;volatile
  1569                           
  1570                           ;user.c: 45: TRISEbits.TRISE2=1;
  1571  001930  8496               	bsf	3990,2,c	;volatile
  1572                           
  1573                           ;user.c: 47: TRISBbits.RB1=1;
  1574  001932  8293               	bsf	3987,1,c	;volatile
  1575                           
  1576                           ;user.c: 49: TRISBbits.RB0=1;
  1577  001934  8093               	bsf	3987,0,c	;volatile
  1578                           
  1579                           ;user.c: 52: TRISBbits.RB3=1;
  1580  001936  8693               	bsf	3987,3,c	;volatile
  1581                           
  1582                           ;user.c: 54: TRISBbits.RB2=1;
  1583  001938  8493               	bsf	3987,2,c	;volatile
  1584                           
  1585                           ;user.c: 58: ADCON1 =0b00000001;
  1586  00193A  0E01               	movlw	1
  1587  00193C  6EC1               	movwf	4033,c	;volatile
  1588                           
  1589                           ;user.c: 63: ADCON2=0b00001010;
  1590  00193E  0E0A               	movlw	10
  1591  001940  6EC0               	movwf	4032,c	;volatile
  1592                           
  1593                           ;user.c: 68: ADCON0=0b00101011;
  1594  001942  0E2B               	movlw	43
  1595  001944  6EC2               	movwf	4034,c	;volatile
  1596                           
  1597                           ;user.c: 77: T0CON = 0b11000100;
  1598  001946  0EC4               	movlw	196
  1599  001948  6ED5               	movwf	4053,c	;volatile
  1600                           
  1601                           ;user.c: 85: INTCON2 = 0b11110100;
  1602  00194A  0EF4               	movlw	244
  1603  00194C  6EF1               	movwf	intcon2,c	;volatile
  1604                           
  1605                           ;user.c: 95: INTCON = 0b00100000;
  1606  00194E  0E20               	movlw	32
  1607  001950  6EF2               	movwf	intcon,c	;volatile
  1608                           
  1609                           ;user.c: 105: AlgorithmSelection();
  1610  001952  EC41  F00D         	call	_AlgorithmSelection	;wreg free
  1611                           
  1612                           ;user.c: 108: delay(1000);
  1613  001956  0E03               	movlw	3
  1614  001958  6E29               	movwf	delay@ms+1,c
  1615  00195A  0EE8               	movlw	232
  1616  00195C  6E28               	movwf	delay@ms,c
  1617  00195E  ECEB  F00C         	call	_delay	;wreg free
  1618                           
  1619                           ;user.c: 109: INTCONbits.GIE = 1;
  1620  001962  8EF2               	bsf	intcon,7,c	;volatile
  1621  001964  0012               	return		;funcret
  1622  001966                     __end_of_InitApp:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           intcon	equ	0xFF2
  1631                           intcon2	equ	0xFF1
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postinc2	equ	0xFDE
  1635                           postdec2	equ	0xFDD
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _delay *****************
  1641 ;; Defined at:
  1642 ;;		line 29 in file "user.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  ms              2   39[COMRAM] unsigned int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  x               2   42[COMRAM] int 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_InitApp
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text8
  1671  0019D6                     __ptext8:
  1672                           	opt stack 0
  1673  0019D6                     _delay:
  1674                           	opt stack 25
  1675                           
  1676                           ;user.c: 30: int x = 0;
  1677                           
  1678                           ;incstack = 0
  1679  0019D6  0E00               	movlw	0
  1680  0019D8  6E2C               	movwf	delay@x+1,c
  1681  0019DA  0E00               	movlw	0
  1682  0019DC  6E2B               	movwf	delay@x,c
  1683                           
  1684                           ;user.c: 31: for (x = 0; x < ms; x++)
  1685  0019DE  0E00               	movlw	0
  1686  0019E0  6E2C               	movwf	delay@x+1,c
  1687  0019E2  0E00               	movlw	0
  1688  0019E4  6E2B               	movwf	delay@x,c
  1689  0019E6  D00A               	goto	l237
  1690  0019E8                     l1442:
  1691                           
  1692                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1693  0019E8  0E0B               	movlw	11
  1694  0019EA  6E2A               	movwf	??_delay& (0+255),c
  1695  0019EC  0E62               	movlw	98
  1696  0019EE                     u1527:
  1697  0019EE  2EE8               	decfsz	wreg,f,c
  1698  0019F0  D7FE               	goto	u1527
  1699  0019F2  2E2A               	decfsz	??_delay& (0+255),f,c
  1700  0019F4  D7FC               	goto	u1527
  1701  0019F6  D000               	nop2	
  1702  0019F8  4A2B               	infsnz	delay@x,f,c
  1703  0019FA  2A2C               	incf	delay@x+1,f,c
  1704  0019FC                     l237:
  1705  0019FC  5028               	movf	delay@ms,w,c
  1706  0019FE  5C2B               	subwf	delay@x,w,c
  1707  001A00  5029               	movf	delay@ms+1,w,c
  1708  001A02  582C               	subwfb	delay@x+1,w,c
  1709  001A04  A0D8               	btfss	status,0,c
  1710  001A06  D7F0               	goto	l1442
  1711  001A08  0012               	return		;funcret
  1712  001A0A                     __end_of_delay:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           intcon2	equ	0xFF1
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _AlgorithmSelection *****************
  1731 ;; Defined at:
  1732 ;;		line 112 in file "user.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    4
  1753 ;; This function calls:
  1754 ;;		Nothing
  1755 ;; This function is called by:
  1756 ;;		_InitApp
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text9
  1761  001A82                     __ptext9:
  1762                           	opt stack 0
  1763  001A82                     _AlgorithmSelection:
  1764                           	opt stack 25
  1765                           
  1766                           ;user.c: 114: ADCON0 = 0b00100111;
  1767                           
  1768                           ;incstack = 0
  1769  001A82  0E27               	movlw	39
  1770  001A84  6EC2               	movwf	4034,c	;volatile
  1771                           
  1772                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1773  001A86  82C2               	bsf	4034,1,c	;volatile
  1774                           
  1775                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1776  001A88  D000               	goto	l246
  1777  001A8A                     l246:
  1778  001A8A  B2C2               	btfsc	4034,1,c	;volatile
  1779  001A8C  D7FE               	goto	l246
  1780                           
  1781                           ;user.c: 119: if(ADRESL > 0b10000000)
  1782  001A8E  0E80               	movlw	128
  1783  001A90  64C3               	cpfsgt	4035,c	;volatile
  1784  001A92  D002               	goto	l1032
  1785                           
  1786                           ;user.c: 120: algorithm = LEFTWALL;
  1787  001A94  0E00               	movlw	0
  1788  001A96  D001               	goto	L5
  1789  001A98                     l1032:
  1790                           
  1791                           ;user.c: 121: else
  1792                           ;user.c: 122: algorithm = RIGHTWALL;
  1793  001A98  0E01               	movlw	1
  1794  001A9A                     L5:
  1795  001A9A  6E4F               	movwf	_algorithm,c
  1796  001A9C  D000               	goto	l251
  1797  001A9E                     l251:
  1798  001A9E  0012               	return		;funcret
  1799  001AA0                     __end_of_AlgorithmSelection:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           intcon2	equ	0xFF1
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postinc2	equ	0xFDE
  1812                           postdec2	equ	0xFDD
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _ConfigureOscillator *****************
  1818 ;; Defined at:
  1819 ;;		line 24 in file "system.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;		None               void
  1826 ;; Registers used:
  1827 ;;		wreg, status,2
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text10
  1848  001B16                     __ptext10:
  1849                           	opt stack 0
  1850  001B16                     _ConfigureOscillator:
  1851                           	opt stack 26
  1852                           
  1853                           ;system.c: 29: OSCCON = 0b01111100;
  1854                           
  1855                           ;incstack = 0
  1856  001B16  0E7C               	movlw	124
  1857  001B18  6ED3               	movwf	4051,c	;volatile
  1858                           
  1859                           ;system.c: 31: OSCTUNE = 0b01001111;
  1860  001B1A  0E4F               	movlw	79
  1861  001B1C  6E9B               	movwf	3995,c	;volatile
  1862  001B1E  0012               	return		;funcret
  1863  001B20                     __end_of_ConfigureOscillator:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           prodh	equ	0xFF4
  1870                           prodl	equ	0xFF3
  1871                           intcon	equ	0xFF2
  1872                           intcon2	equ	0xFF1
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postinc2	equ	0xFDE
  1876                           postdec2	equ	0xFDD
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _low_isr *****************
  1882 ;; Defined at:
  1883 ;;		line 229 in file "interrupts.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;		None               void
  1890 ;; Registers used:
  1891 ;;		None
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;Total ram usage:       17 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    3
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		Interrupt level 1
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	intcodelo
  1912  000018                     __pintcodelo:
  1913                           	opt stack 0
  1914  000018                     _low_isr:
  1915                           	opt stack 24
  1916                           
  1917                           ;incstack = 0
  1918  000018  CFD8 F001          	movff	status,??_low_isr
  1919  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1920  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1921  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1922  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1923  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1924  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1925  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1926  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1927  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1928  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1929  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1930  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1931  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1932  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1933  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1934  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1935  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1936  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1937  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1938  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1939  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1940  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1941  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1942  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1943  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1944  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1945  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1946  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1947  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1948  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1949  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1950  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1951  00009C  C001  FFD8         	movff	??_low_isr,status
  1952  0000A0  0010               	retfie	
  1953  0000A2                     __end_of_low_isr:
  1954                           	opt stack 0
  1955                           pclatu	equ	0xFFB
  1956                           pclath	equ	0xFFA
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           intcon2	equ	0xFF1
  1965                           postinc0	equ	0xFEE
  1966                           fsr0h	equ	0xFEA
  1967                           fsr0l	equ	0xFE9
  1968                           wreg	equ	0xFE8
  1969                           fsr1h	equ	0xFE2
  1970                           fsr1l	equ	0xFE1
  1971                           bsr	equ	0xFE0
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _high_isr *****************
  1979 ;; Defined at:
  1980 ;;		line 86 in file "interrupts.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;		None
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;		None
  1985 ;; Return value:  Size  Location     Type
  1986 ;;		None               void
  1987 ;; Registers used:
  1988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;Total ram usage:       14 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    2
  2001 ;; This function calls:
  2002 ;;		_KController
  2003 ;;		_Reversing
  2004 ;;		_forward
  2005 ;;		_merge
  2006 ;;		_motorCounterUpdate
  2007 ;;		_moveMouse
  2008 ;;		_rotate
  2009 ;; This function is called by:
  2010 ;;		Interrupt level 2
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	intcode
  2015  000008                     __pintcode:
  2016                           	opt stack 0
  2017  000008                     _high_isr:
  2018                           	opt stack 24
  2019                           
  2020                           ;incstack = 0
  2021  000008  CFFA F01A          	movff	pclath,??_high_isr
  2022  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  2023  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  2024  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  2025                           pclatu	equ	0xFFB
  2026                           pclath	equ	0xFFA
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           intcon	equ	0xFF2
  2034                           intcon2	equ	0xFF1
  2035                           postinc0	equ	0xFEE
  2036                           fsr0h	equ	0xFEA
  2037                           fsr0l	equ	0xFE9
  2038                           wreg	equ	0xFE8
  2039                           fsr1h	equ	0xFE2
  2040                           fsr1l	equ	0xFE1
  2041                           bsr	equ	0xFE0
  2042                           postinc2	equ	0xFDE
  2043                           postdec2	equ	0xFDD
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048                           	psect	intcode_body
  2049  00100A                     __pintcode_body:
  2050                           	opt stack 24
  2051  00100A                     int_func:
  2052                           	opt stack 24
  2053  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2054  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2055  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2056  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2057  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2058  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2059  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2060  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2061  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2062  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2063  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2064  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2065                           
  2066                           ;interrupts.c: 105: if(INTCONbits.TMR0IF == 1)
  2067  001038  A4F2               	btfss	intcon,2,c	;volatile
  2068  00103A  D112               	goto	i2l83
  2069                           
  2070                           ;interrupts.c: 106: {
  2071                           ;interrupts.c: 107: if(MotorDelayCounter > 2)
  2072  00103C  BE44               	btfsc	_MotorDelayCounter+1,7,c
  2073  00103E  D10C               	goto	i2l1684
  2074  001040  5044               	movf	_MotorDelayCounter+1,w,c
  2075  001042  E104               	bnz	i2u105_40
  2076  001044  0E03               	movlw	3
  2077  001046  5C43               	subwf	_MotorDelayCounter,w,c
  2078  001048  A0D8               	btfss	status,0,c
  2079  00104A  D106               	goto	i2l1684
  2080  00104C                     i2u105_40:
  2081                           
  2082                           ;interrupts.c: 108: {
  2083                           ;interrupts.c: 110: if (ForwardCounter > 0) {
  2084  00104C  BE40               	btfsc	_ForwardCounter+1,7,c
  2085  00104E  D008               	goto	i2l1592
  2086  001050  5040               	movf	_ForwardCounter+1,w,c
  2087  001052  E103               	bnz	i2u106_40
  2088  001054  043F               	decf	_ForwardCounter,w,c
  2089  001056  A0D8               	btfss	status,0,c
  2090  001058  D003               	goto	i2l1592
  2091  00105A                     i2u106_40:
  2092                           
  2093                           ;interrupts.c: 111: forward();
  2094  00105A  EC50  F00D         	call	_forward	;wreg free
  2095                           
  2096                           ;interrupts.c: 112: }
  2097  00105E  D0F0               	goto	i2l58
  2098  001060                     i2l1592:
  2099                           
  2100                           ;interrupts.c: 115: else if (ReverseCounter > 0)
  2101  001060  BE48               	btfsc	_ReverseCounter+1,7,c
  2102  001062  D008               	goto	i2l1596
  2103  001064  5048               	movf	_ReverseCounter+1,w,c
  2104  001066  E103               	bnz	i2u107_40
  2105  001068  0447               	decf	_ReverseCounter,w,c
  2106  00106A  A0D8               	btfss	status,0,c
  2107  00106C  D003               	goto	i2l1596
  2108  00106E                     i2u107_40:
  2109                           
  2110                           ;interrupts.c: 116: Reversing();
  2111  00106E  EC5E  F00D         	call	_Reversing	;wreg free
  2112  001072  D0E6               	goto	i2l58
  2113  001074                     i2l1596:
  2114                           
  2115                           ;interrupts.c: 117: else if(RotateCounter > 0)
  2116  001074  BE4A               	btfsc	_RotateCounter+1,7,c
  2117  001076  D020               	goto	i2l1608
  2118  001078  504A               	movf	_RotateCounter+1,w,c
  2119  00107A  E103               	bnz	i2u108_40
  2120  00107C  0449               	decf	_RotateCounter,w,c
  2121  00107E  A0D8               	btfss	status,0,c
  2122  001080  D01B               	goto	i2l1608
  2123  001082                     i2u108_40:
  2124                           
  2125                           ;interrupts.c: 118: {
  2126                           ;interrupts.c: 120: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2127  001082  BE3C               	btfsc	_sensorValue+5,7,c
  2128  001084  D006               	goto	i2l1600
  2129  001086  0E21               	movlw	33
  2130  001088  5C3B               	subwf	_sensorValue+4,w,c
  2131  00108A  0E03               	movlw	3
  2132  00108C  583C               	subwfb	_sensorValue+5,w,c
  2133  00108E  B0D8               	btfsc	status,0,c
  2134  001090  D008               	goto	i2l1602
  2135  001092                     i2l1600:
  2136  001092  BE3E               	btfsc	_sensorValue+7,7,c
  2137  001094  D00D               	goto	i2l1606
  2138  001096  0E21               	movlw	33
  2139  001098  5C3D               	subwf	_sensorValue+6,w,c
  2140  00109A  0E03               	movlw	3
  2141  00109C  583E               	subwfb	_sensorValue+7,w,c
  2142  00109E  A0D8               	btfss	status,0,c
  2143  0010A0  D007               	goto	i2l1606
  2144  0010A2                     i2l1602:
  2145                           
  2146                           ;interrupts.c: 121: ReverseCounter = 15;
  2147  0010A2  0E00               	movlw	0
  2148  0010A4  6E48               	movwf	_ReverseCounter+1,c
  2149  0010A6  0E0F               	movlw	15
  2150  0010A8  6E47               	movwf	_ReverseCounter,c
  2151                           
  2152                           ;interrupts.c: 122: Reversing();
  2153  0010AA  EC5E  F00D         	call	_Reversing	;wreg free
  2154                           
  2155                           ;interrupts.c: 123: } else {
  2156  0010AE  D0C8               	goto	i2l58
  2157  0010B0                     i2l1606:
  2158                           
  2159                           ;interrupts.c: 124: rotate(rotatingSide);
  2160  0010B0  5051               	movf	_rotatingSide,w,c
  2161  0010B2  ECB3  F00C         	call	_rotate
  2162                           
  2163                           ;interrupts.c: 125: }
  2164                           ;interrupts.c: 126: }
  2165  0010B6  D0C4               	goto	i2l58
  2166  0010B8                     i2l1608:
  2167                           
  2168                           ;interrupts.c: 130: else if (sensorValue[0] > 70 && sensorValue[1] > 70 && (sensorValue[
      +                          2] < 250 && sensorValue[3] < 250) )
  2169  0010B8  BE38               	btfsc	_sensorValue+1,7,c
  2170  0010BA  D022               	goto	i2l1620
  2171  0010BC  5038               	movf	_sensorValue+1,w,c
  2172  0010BE  E104               	bnz	i2u111_40
  2173  0010C0  0E47               	movlw	71
  2174  0010C2  5C37               	subwf	_sensorValue,w,c
  2175  0010C4  A0D8               	btfss	status,0,c
  2176  0010C6  D01C               	goto	i2l1620
  2177  0010C8                     i2u111_40:
  2178  0010C8  BE3A               	btfsc	_sensorValue+3,7,c
  2179  0010CA  D01A               	goto	i2l1620
  2180  0010CC  503A               	movf	_sensorValue+3,w,c
  2181  0010CE  E104               	bnz	i2u112_40
  2182  0010D0  0E47               	movlw	71
  2183  0010D2  5C39               	subwf	_sensorValue+2,w,c
  2184  0010D4  A0D8               	btfss	status,0,c
  2185  0010D6  D014               	goto	i2l1620
  2186  0010D8                     i2u112_40:
  2187  0010D8  BE3C               	btfsc	_sensorValue+5,7,c
  2188  0010DA  D006               	goto	i2l1614
  2189  0010DC  503C               	movf	_sensorValue+5,w,c
  2190  0010DE  E110               	bnz	i2l1620
  2191  0010E0  0EFA               	movlw	250
  2192  0010E2  5C3B               	subwf	_sensorValue+4,w,c
  2193  0010E4  B0D8               	btfsc	status,0,c
  2194  0010E6  D00C               	goto	i2l1620
  2195  0010E8                     i2l1614:
  2196  0010E8  BE3E               	btfsc	_sensorValue+7,7,c
  2197  0010EA  D006               	goto	i2l1616
  2198  0010EC  503E               	movf	_sensorValue+7,w,c
  2199  0010EE  E108               	bnz	i2l1620
  2200  0010F0  0EFA               	movlw	250
  2201  0010F2  5C3D               	subwf	_sensorValue+6,w,c
  2202  0010F4  B0D8               	btfsc	status,0,c
  2203  0010F6  D004               	goto	i2l1620
  2204  0010F8                     i2l1616:
  2205                           
  2206                           ;interrupts.c: 132: {
  2207                           ;interrupts.c: 133: KController();
  2208  0010F8  ECDD  F00B         	call	_KController	;wreg free
  2209                           
  2210                           ;interrupts.c: 134: justTurned = 0;
  2211  0010FC  0E00               	movlw	0
  2212  0010FE  D062               	goto	L6
  2213  001100                     i2l1620:
  2214                           
  2215                           ;interrupts.c: 136: else if (sensorValue[0] < 210 && algorithm == LEFTWALL)
  2216  001100  BE38               	btfsc	_sensorValue+1,7,c
  2217  001102  D006               	goto	i2l1622
  2218  001104  5038               	movf	_sensorValue+1,w,c
  2219  001106  E121               	bnz	i2l1640
  2220  001108  0ED2               	movlw	210
  2221  00110A  5C37               	subwf	_sensorValue,w,c
  2222  00110C  B0D8               	btfsc	status,0,c
  2223  00110E  D01D               	goto	i2l1640
  2224  001110                     i2l1622:
  2225  001110  504F               	movf	_algorithm,w,c
  2226  001112  A4D8               	btfss	status,2,c
  2227  001114  D01A               	goto	i2l1640
  2228                           
  2229                           ;interrupts.c: 137: {
  2230                           ;interrupts.c: 138: if(justTurned == 0) {
  2231  001116  5050               	movf	_justTurned,w,c
  2232  001118  A4D8               	btfss	status,2,c
  2233  00111A  D004               	goto	i2l1628
  2234                           
  2235                           ;interrupts.c: 139: ForwardCounter = 440;
  2236  00111C  0E01               	movlw	1
  2237  00111E  6E40               	movwf	_ForwardCounter+1,c
  2238  001120  0EB8               	movlw	184
  2239  001122  D003               	goto	L7
  2240  001124                     i2l1628:
  2241                           
  2242                           ;interrupts.c: 141: ForwardCounter = 400;
  2243  001124  0E01               	movlw	1
  2244  001126  6E40               	movwf	_ForwardCounter+1,c
  2245  001128  0E90               	movlw	144
  2246  00112A                     L7:
  2247  00112A  6E3F               	movwf	_ForwardCounter,c
  2248  00112C  D000               	goto	i2l1630
  2249  00112E                     i2l1630:
  2250                           
  2251                           ;interrupts.c: 142: }
  2252                           ;interrupts.c: 143: forward();
  2253  00112E  EC50  F00D         	call	_forward	;wreg free
  2254                           
  2255                           ;interrupts.c: 144: RotateCounter = 167;
  2256  001132  0E00               	movlw	0
  2257  001134  6E4A               	movwf	_RotateCounter+1,c
  2258  001136  0EA7               	movlw	167
  2259  001138  6E49               	movwf	_RotateCounter,c
  2260                           
  2261                           ;interrupts.c: 145: rotatingSide = LEFT;
  2262  00113A  0E00               	movlw	0
  2263  00113C  6E51               	movwf	_rotatingSide,c
  2264  00113E  D072               	goto	i2l1676
  2265  001140                     i2l1638:
  2266                           
  2267                           ;interrupts.c: 147: TurnRight= 200;
  2268  001140  0E00               	movlw	0
  2269  001142  6E53               	movwf	_TurnRight+1,c
  2270  001144  0EC8               	movlw	200
  2271  001146  6E52               	movwf	_TurnRight,c
  2272                           
  2273                           ;interrupts.c: 150: }
  2274  001148  D07B               	goto	i2l58
  2275  00114A                     i2l1640:
  2276                           
  2277                           ;interrupts.c: 153: else if (sensorValue[1] < 180
  2278                           ;interrupts.c: 154: && sensorValue[0] > 180 && algorithm == LEFTWALL)
  2279  00114A  BE3A               	btfsc	_sensorValue+3,7,c
  2280  00114C  D006               	goto	i2l1642
  2281  00114E  503A               	movf	_sensorValue+3,w,c
  2282  001150  E122               	bnz	i2l1656
  2283  001152  0EB4               	movlw	180
  2284  001154  5C39               	subwf	_sensorValue+2,w,c
  2285  001156  B0D8               	btfsc	status,0,c
  2286  001158  D01E               	goto	i2l1656
  2287  00115A                     i2l1642:
  2288  00115A  BE38               	btfsc	_sensorValue+1,7,c
  2289  00115C  D01C               	goto	i2l1656
  2290  00115E  5038               	movf	_sensorValue+1,w,c
  2291  001160  E104               	bnz	i2u119_40
  2292  001162  0EB5               	movlw	181
  2293  001164  5C37               	subwf	_sensorValue,w,c
  2294  001166  A0D8               	btfss	status,0,c
  2295  001168  D016               	goto	i2l1656
  2296  00116A                     i2u119_40:
  2297  00116A  504F               	movf	_algorithm,w,c
  2298  00116C  A4D8               	btfss	status,2,c
  2299  00116E  D013               	goto	i2l1656
  2300                           
  2301                           ;interrupts.c: 155: {
  2302                           ;interrupts.c: 156: TurnRight = sensorValue[1];
  2303  001170  C039  F052         	movff	_sensorValue+2,_TurnRight
  2304  001174  C03A  F053         	movff	_sensorValue+3,_TurnRight+1
  2305                           
  2306                           ;interrupts.c: 157: if(justTurned == 0) {
  2307  001178  5050               	movf	_justTurned,w,c
  2308  00117A  A4D8               	btfss	status,2,c
  2309  00117C  D004               	goto	i2l1652
  2310                           
  2311                           ;interrupts.c: 158: ForwardCounter = 440;
  2312  00117E  0E01               	movlw	1
  2313  001180  6E40               	movwf	_ForwardCounter+1,c
  2314  001182  0EB8               	movlw	184
  2315  001184  D003               	goto	L8
  2316  001186                     i2l1652:
  2317                           
  2318                           ;interrupts.c: 160: ForwardCounter = 400;
  2319  001186  0E01               	movlw	1
  2320  001188  6E40               	movwf	_ForwardCounter+1,c
  2321  00118A  0E90               	movlw	144
  2322  00118C                     L8:
  2323  00118C  6E3F               	movwf	_ForwardCounter,c
  2324  00118E  D000               	goto	i2l1654
  2325  001190                     i2l1654:
  2326                           
  2327                           ;interrupts.c: 161: }
  2328                           ;interrupts.c: 162: forward();
  2329  001190  EC50  F00D         	call	_forward	;wreg free
  2330                           
  2331                           ;interrupts.c: 166: }
  2332  001194  D055               	goto	i2l58
  2333  001196                     i2l1656:
  2334                           
  2335                           ;interrupts.c: 167: else if (TurnRight < 130 && sensorValue[3] > 300) {
  2336  001196  BE53               	btfsc	_TurnRight+1,7,c
  2337  001198  D006               	goto	i2l1658
  2338  00119A  5053               	movf	_TurnRight+1,w,c
  2339  00119C  E115               	bnz	i2l1662
  2340  00119E  0E82               	movlw	130
  2341  0011A0  5C52               	subwf	_TurnRight,w,c
  2342  0011A2  B0D8               	btfsc	status,0,c
  2343  0011A4  D011               	goto	i2l1662
  2344  0011A6                     i2l1658:
  2345  0011A6  BE3E               	btfsc	_sensorValue+7,7,c
  2346  0011A8  D00F               	goto	i2l1662
  2347  0011AA  0E2D               	movlw	45
  2348  0011AC  5C3D               	subwf	_sensorValue+6,w,c
  2349  0011AE  0E01               	movlw	1
  2350  0011B0  583E               	subwfb	_sensorValue+7,w,c
  2351  0011B2  A0D8               	btfss	status,0,c
  2352  0011B4  D009               	goto	i2l1662
  2353                           
  2354                           ;interrupts.c: 168: RotateCounter = 167;
  2355  0011B6  0E00               	movlw	0
  2356  0011B8  6E4A               	movwf	_RotateCounter+1,c
  2357  0011BA  0EA7               	movlw	167
  2358  0011BC  6E49               	movwf	_RotateCounter,c
  2359                           
  2360                           ;interrupts.c: 169: rotatingSide = RIGHT;
  2361  0011BE  0E01               	movlw	1
  2362  0011C0  6E51               	movwf	_rotatingSide,c
  2363                           
  2364                           ;interrupts.c: 170: justTurned = 1;
  2365  0011C2  0E01               	movlw	1
  2366  0011C4                     L6:
  2367  0011C4  6E50               	movwf	_justTurned,c
  2368                           
  2369                           ;interrupts.c: 171: }
  2370  0011C6  D03C               	goto	i2l58
  2371  0011C8                     i2l1662:
  2372                           
  2373                           ;interrupts.c: 176: else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2374                           ;interrupts.c: 177: && (sensorValue[2] > 380 || sensorValue[3] > 380) && RotateCounter <
      +                          = 0)
  2375  0011C8  BE38               	btfsc	_sensorValue+1,7,c
  2376  0011CA  D02F               	goto	i2l1680
  2377  0011CC  5038               	movf	_sensorValue+1,w,c
  2378  0011CE  E104               	bnz	i2u124_40
  2379  0011D0  0E5B               	movlw	91
  2380  0011D2  5C37               	subwf	_sensorValue,w,c
  2381  0011D4  A0D8               	btfss	status,0,c
  2382  0011D6  D029               	goto	i2l1680
  2383  0011D8                     i2u124_40:
  2384  0011D8  BE3A               	btfsc	_sensorValue+3,7,c
  2385  0011DA  D027               	goto	i2l1680
  2386  0011DC  503A               	movf	_sensorValue+3,w,c
  2387  0011DE  E104               	bnz	i2u125_40
  2388  0011E0  0E5B               	movlw	91
  2389  0011E2  5C39               	subwf	_sensorValue+2,w,c
  2390  0011E4  A0D8               	btfss	status,0,c
  2391  0011E6  D021               	goto	i2l1680
  2392  0011E8                     i2u125_40:
  2393  0011E8  BE3C               	btfsc	_sensorValue+5,7,c
  2394  0011EA  D006               	goto	i2l1668
  2395  0011EC  0E7D               	movlw	125
  2396  0011EE  5C3B               	subwf	_sensorValue+4,w,c
  2397  0011F0  0E01               	movlw	1
  2398  0011F2  583C               	subwfb	_sensorValue+5,w,c
  2399  0011F4  B0D8               	btfsc	status,0,c
  2400  0011F6  D008               	goto	i2l1670
  2401  0011F8                     i2l1668:
  2402  0011F8  BE3E               	btfsc	_sensorValue+7,7,c
  2403  0011FA  D017               	goto	i2l1680
  2404  0011FC  0E7D               	movlw	125
  2405  0011FE  5C3D               	subwf	_sensorValue+6,w,c
  2406  001200  0E01               	movlw	1
  2407  001202  583E               	subwfb	_sensorValue+7,w,c
  2408  001204  A0D8               	btfss	status,0,c
  2409  001206  D011               	goto	i2l1680
  2410  001208                     i2l1670:
  2411  001208  BE4A               	btfsc	_RotateCounter+1,7,c
  2412  00120A  D005               	goto	i2l1672
  2413  00120C  504A               	movf	_RotateCounter+1,w,c
  2414  00120E  E10D               	bnz	i2l1680
  2415  001210  0449               	decf	_RotateCounter,w,c
  2416  001212  B0D8               	btfsc	status,0,c
  2417  001214  D00A               	goto	i2l1680
  2418  001216                     i2l1672:
  2419                           
  2420                           ;interrupts.c: 178: {
  2421                           ;interrupts.c: 179: RotateCounter = 167*2;
  2422  001216  0E01               	movlw	1
  2423  001218  6E4A               	movwf	_RotateCounter+1,c
  2424  00121A  0E4E               	movlw	78
  2425  00121C  6E49               	movwf	_RotateCounter,c
  2426                           
  2427                           ;interrupts.c: 180: rotate(rotatingSide);
  2428  00121E  5051               	movf	_rotatingSide,w,c
  2429  001220  ECB3  F00C         	call	_rotate
  2430  001224                     i2l1676:
  2431                           
  2432                           ;interrupts.c: 181: justTurned = 1;
  2433  001224  0E01               	movlw	1
  2434  001226  6E50               	movwf	_justTurned,c
  2435  001228  D78B               	goto	i2l1638
  2436  00122A                     i2l1680:
  2437                           
  2438                           ;interrupts.c: 210: else {
  2439                           ;interrupts.c: 211: motorCounterUpdate(RIGHT,0);
  2440  00122A  0E00               	movlw	0
  2441  00122C  6E12               	movwf	motorCounterUpdate@reverse,c
  2442  00122E  0E01               	movlw	1
  2443  001230  EC63  F00B         	call	_motorCounterUpdate
  2444                           
  2445                           ;interrupts.c: 212: motorCounterUpdate(LEFT,0);
  2446  001234  0E00               	movlw	0
  2447  001236  6E12               	movwf	motorCounterUpdate@reverse,c
  2448  001238  0E00               	movlw	0
  2449  00123A  EC63  F00B         	call	_motorCounterUpdate
  2450  00123E  D000               	goto	i2l58
  2451  001240                     i2l58:
  2452                           
  2453                           ;interrupts.c: 213: }
  2454                           ;interrupts.c: 214: moveMouse(merge(LMotorCounter,RMotorCounter));
  2455  001240  C04E  F012         	movff	_RMotorCounter,merge@right
  2456  001244  504D               	movf	_LMotorCounter,w,c
  2457  001246  EC83  F00D         	call	_merge
  2458  00124A  EC90  F00D         	call	_moveMouse
  2459                           
  2460                           ;interrupts.c: 215: MotorDelayCounter = 0;
  2461  00124E  0E00               	movlw	0
  2462  001250  6E44               	movwf	_MotorDelayCounter+1,c
  2463  001252  0E00               	movlw	0
  2464  001254  6E43               	movwf	_MotorDelayCounter,c
  2465  001256  D000               	goto	i2l1684
  2466  001258                     i2l1684:
  2467                           
  2468                           ;interrupts.c: 217: }
  2469                           ;interrupts.c: 219: MotorDelayCounter++;
  2470  001258  4A43               	infsnz	_MotorDelayCounter,f,c
  2471  00125A  2A44               	incf	_MotorDelayCounter+1,f,c
  2472                           
  2473                           ;interrupts.c: 220: INTCONbits.TMR0IF = 0;
  2474  00125C  94F2               	bcf	intcon,2,c	;volatile
  2475  00125E  D000               	goto	i2l83
  2476  001260                     i2l83:
  2477  001260  C027  FFF5         	movff	??_high_isr+13,tablat
  2478  001264  C026  FFF8         	movff	??_high_isr+12,tblptru
  2479  001268  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2480  00126C  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2481  001270  C023  FFF4         	movff	??_high_isr+9,prodh
  2482  001274  C022  FFF3         	movff	??_high_isr+8,prodl
  2483  001278  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2484  00127C  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2485  001280  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2486  001284  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2487  001288  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2488  00128C  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2489  001290  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2490  001294  C01A  FFFA         	movff	??_high_isr,pclath
  2491  001298  0011               	retfie		f
  2492  00129A                     __end_of_high_isr:
  2493                           	opt stack 0
  2494                           pclatu	equ	0xFFB
  2495                           pclath	equ	0xFFA
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           prodh	equ	0xFF4
  2501                           prodl	equ	0xFF3
  2502                           intcon	equ	0xFF2
  2503                           intcon2	equ	0xFF1
  2504                           postinc0	equ	0xFEE
  2505                           fsr0h	equ	0xFEA
  2506                           fsr0l	equ	0xFE9
  2507                           wreg	equ	0xFE8
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           bsr	equ	0xFE0
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _rotate *****************
  2518 ;; Defined at:
  2519 ;;		line 368 in file "interrupts.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  side            1    wreg     enum E4082
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  side            1   19[COMRAM] enum E4082
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;Total ram usage:        1 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    1
  2540 ;; This function calls:
  2541 ;;		_motorCounterUpdate
  2542 ;; This function is called by:
  2543 ;;		_high_isr
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text13
  2548  001966                     __ptext13:
  2549                           	opt stack 0
  2550  001966                     _rotate:
  2551                           	opt stack 24
  2552                           
  2553                           ;incstack = 0
  2554                           ;rotate@side stored from wreg
  2555  001966  6E14               	movwf	rotate@side,c
  2556                           
  2557                           ;interrupts.c: 370: if (side == LEFT){
  2558  001968  5014               	movf	rotate@side,w,c
  2559  00196A  A4D8               	btfss	status,2,c
  2560  00196C  D00B               	goto	i2l1488
  2561                           
  2562                           ;interrupts.c: 371: motorCounterUpdate(RIGHT,0);
  2563  00196E  0E00               	movlw	0
  2564  001970  6E12               	movwf	motorCounterUpdate@reverse,c
  2565  001972  0E01               	movlw	1
  2566  001974  EC63  F00B         	call	_motorCounterUpdate
  2567                           
  2568                           ;interrupts.c: 372: motorCounterUpdate(LEFT,1);
  2569  001978  0E01               	movlw	1
  2570  00197A  6E12               	movwf	motorCounterUpdate@reverse,c
  2571  00197C  0E00               	movlw	0
  2572  00197E  EC63  F00B         	call	_motorCounterUpdate
  2573                           
  2574                           ;interrupts.c: 373: } else {
  2575  001982  D00B               	goto	i2l1490
  2576  001984                     i2l1488:
  2577                           
  2578                           ;interrupts.c: 374: motorCounterUpdate(LEFT,0);
  2579  001984  0E00               	movlw	0
  2580  001986  6E12               	movwf	motorCounterUpdate@reverse,c
  2581  001988  0E00               	movlw	0
  2582  00198A  EC63  F00B         	call	_motorCounterUpdate
  2583                           
  2584                           ;interrupts.c: 375: motorCounterUpdate(RIGHT,1);
  2585  00198E  0E01               	movlw	1
  2586  001990  6E12               	movwf	motorCounterUpdate@reverse,c
  2587  001992  0E01               	movlw	1
  2588  001994  EC63  F00B         	call	_motorCounterUpdate
  2589  001998  D000               	goto	i2l1490
  2590  00199A                     i2l1490:
  2591                           
  2592                           ;interrupts.c: 376: }
  2593                           ;interrupts.c: 377: RotateCounter--;
  2594  00199A  0649               	decf	_RotateCounter,f,c
  2595  00199C  A0D8               	btfss	status,0,c
  2596  00199E  064A               	decf	_RotateCounter+1,f,c
  2597  0019A0  0012               	return		;funcret
  2598  0019A2                     __end_of_rotate:
  2599                           	opt stack 0
  2600                           pclatu	equ	0xFFB
  2601                           pclath	equ	0xFFA
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon2	equ	0xFF1
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           fsr1h	equ	0xFE2
  2615                           fsr1l	equ	0xFE1
  2616                           bsr	equ	0xFE0
  2617                           postinc2	equ	0xFDE
  2618                           postdec2	equ	0xFDD
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _forward *****************
  2624 ;; Defined at:
  2625 ;;		line 399 in file "interrupts.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;		None               void
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    1
  2646 ;; This function calls:
  2647 ;;		_motorCounterUpdate
  2648 ;; This function is called by:
  2649 ;;		_high_isr
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text14
  2654  001AA0                     __ptext14:
  2655                           	opt stack 0
  2656  001AA0                     _forward:
  2657                           	opt stack 24
  2658                           
  2659                           ;interrupts.c: 401: motorCounterUpdate(RIGHT,0);
  2660                           
  2661                           ;incstack = 0
  2662  001AA0  0E00               	movlw	0
  2663  001AA2  6E12               	movwf	motorCounterUpdate@reverse,c
  2664  001AA4  0E01               	movlw	1
  2665  001AA6  EC63  F00B         	call	_motorCounterUpdate
  2666                           
  2667                           ;interrupts.c: 402: motorCounterUpdate(LEFT,0);
  2668  001AAA  0E00               	movlw	0
  2669  001AAC  6E12               	movwf	motorCounterUpdate@reverse,c
  2670  001AAE  0E00               	movlw	0
  2671  001AB0  EC63  F00B         	call	_motorCounterUpdate
  2672                           
  2673                           ;interrupts.c: 403: ForwardCounter--;
  2674  001AB4  063F               	decf	_ForwardCounter,f,c
  2675  001AB6  A0D8               	btfss	status,0,c
  2676  001AB8  0640               	decf	_ForwardCounter+1,f,c
  2677  001ABA  0012               	return		;funcret
  2678  001ABC                     __end_of_forward:
  2679                           	opt stack 0
  2680                           pclatu	equ	0xFFB
  2681                           pclath	equ	0xFFA
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           intcon	equ	0xFF2
  2689                           intcon2	equ	0xFF1
  2690                           postinc0	equ	0xFEE
  2691                           fsr0h	equ	0xFEA
  2692                           fsr0l	equ	0xFE9
  2693                           wreg	equ	0xFE8
  2694                           fsr1h	equ	0xFE2
  2695                           fsr1l	equ	0xFE1
  2696                           bsr	equ	0xFE0
  2697                           postinc2	equ	0xFDE
  2698                           postdec2	equ	0xFDD
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _Reversing *****************
  2704 ;; Defined at:
  2705 ;;		line 392 in file "interrupts.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;		None               void
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    1
  2726 ;; This function calls:
  2727 ;;		_motorCounterUpdate
  2728 ;; This function is called by:
  2729 ;;		_high_isr
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text15
  2734  001ABC                     __ptext15:
  2735                           	opt stack 0
  2736  001ABC                     _Reversing:
  2737                           	opt stack 24
  2738                           
  2739                           ;interrupts.c: 394: motorCounterUpdate(RIGHT,1);
  2740                           
  2741                           ;incstack = 0
  2742  001ABC  0E01               	movlw	1
  2743  001ABE  6E12               	movwf	motorCounterUpdate@reverse,c
  2744  001AC0  0E01               	movlw	1
  2745  001AC2  EC63  F00B         	call	_motorCounterUpdate
  2746                           
  2747                           ;interrupts.c: 395: motorCounterUpdate(LEFT,1);
  2748  001AC6  0E01               	movlw	1
  2749  001AC8  6E12               	movwf	motorCounterUpdate@reverse,c
  2750  001ACA  0E00               	movlw	0
  2751  001ACC  EC63  F00B         	call	_motorCounterUpdate
  2752                           
  2753                           ;interrupts.c: 396: ReverseCounter--;
  2754  001AD0  0647               	decf	_ReverseCounter,f,c
  2755  001AD2  A0D8               	btfss	status,0,c
  2756  001AD4  0648               	decf	_ReverseCounter+1,f,c
  2757  001AD6  0012               	return		;funcret
  2758  001AD8                     __end_of_Reversing:
  2759                           	opt stack 0
  2760                           pclatu	equ	0xFFB
  2761                           pclath	equ	0xFFA
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           prodh	equ	0xFF4
  2767                           prodl	equ	0xFF3
  2768                           intcon	equ	0xFF2
  2769                           intcon2	equ	0xFF1
  2770                           postinc0	equ	0xFEE
  2771                           fsr0h	equ	0xFEA
  2772                           fsr0l	equ	0xFE9
  2773                           wreg	equ	0xFE8
  2774                           fsr1h	equ	0xFE2
  2775                           fsr1l	equ	0xFE1
  2776                           bsr	equ	0xFE0
  2777                           postinc2	equ	0xFDE
  2778                           postdec2	equ	0xFDD
  2779                           fsr2h	equ	0xFDA
  2780                           fsr2l	equ	0xFD9
  2781                           status	equ	0xFD8
  2782                           
  2783 ;; *************** function _KController *****************
  2784 ;; Defined at:
  2785 ;;		line 331 in file "interrupts.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  diff            2   23[COMRAM] int 
  2790 ;;  correctTo       1   22[COMRAM] enum E4082
  2791 ;; Return value:  Size  Location     Type
  2792 ;;		None               void
  2793 ;; Registers used:
  2794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;Total ram usage:        5 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    1
  2807 ;; This function calls:
  2808 ;;		_ABS
  2809 ;;		_merge
  2810 ;;		_motorCounterUpdate
  2811 ;;		_moveMouse
  2812 ;; This function is called by:
  2813 ;;		_high_isr
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text16
  2818  0017BA                     __ptext16:
  2819                           	opt stack 0
  2820  0017BA                     _KController:
  2821                           	opt stack 24
  2822                           
  2823                           ;interrupts.c: 333: Side correctTo;
  2824                           ;interrupts.c: 334: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2825                           
  2826                           ;incstack = 0
  2827  0017BA  EE20  F039         	lfsr	2,_sensorValue+2
  2828  0017BE  CFDE F015          	movff	postinc2,??_KController
  2829  0017C2  CFDD F016          	movff	postdec2,??_KController+1
  2830  0017C6  1E15               	comf	??_KController,f,c
  2831  0017C8  1E16               	comf	??_KController+1,f,c
  2832  0017CA  4A15               	infsnz	??_KController,f,c
  2833  0017CC  2A16               	incf	??_KController+1,f,c
  2834  0017CE  5037               	movf	_sensorValue,w,c
  2835  0017D0  2415               	addwf	??_KController,w,c
  2836  0017D2  6E12               	movwf	ABS@x,c
  2837  0017D4  5038               	movf	_sensorValue+1,w,c
  2838  0017D6  2016               	addwfc	??_KController+1,w,c
  2839  0017D8  6E13               	movwf	ABS@x+1,c
  2840  0017DA  EC6C  F00D         	call	_ABS	;wreg free
  2841  0017DE  C012  F018         	movff	?_ABS,KController@diff
  2842  0017E2  C013  F019         	movff	?_ABS+1,KController@diff+1
  2843                           
  2844                           ;interrupts.c: 337: if(controllerSteps > 0)
  2845  0017E6  5054               	movf	_controllerSteps,w,c
  2846  0017E8  B4D8               	btfsc	status,2,c
  2847  0017EA  D00C               	goto	i2l1502
  2848                           
  2849                           ;interrupts.c: 338: {
  2850                           ;interrupts.c: 339: motorCounterUpdate(RIGHT,0);
  2851  0017EC  0E00               	movlw	0
  2852  0017EE  6E12               	movwf	motorCounterUpdate@reverse,c
  2853  0017F0  0E01               	movlw	1
  2854  0017F2  EC63  F00B         	call	_motorCounterUpdate
  2855                           
  2856                           ;interrupts.c: 340: motorCounterUpdate(LEFT,0);
  2857  0017F6  0E00               	movlw	0
  2858  0017F8  6E12               	movwf	motorCounterUpdate@reverse,c
  2859  0017FA  0E00               	movlw	0
  2860  0017FC  EC63  F00B         	call	_motorCounterUpdate
  2861                           
  2862                           ;interrupts.c: 341: controllerSteps--;
  2863  001800  0654               	decf	_controllerSteps,f,c
  2864                           
  2865                           ;interrupts.c: 342: return;
  2866  001802  D047               	goto	i2l138
  2867  001804                     i2l1502:
  2868                           
  2869                           ;interrupts.c: 343: }
  2870                           ;interrupts.c: 345: if(sensorValue[0] > sensorValue[1])
  2871  001804  5037               	movf	_sensorValue,w,c
  2872  001806  5C39               	subwf	_sensorValue+2,w,c
  2873  001808  503A               	movf	_sensorValue+3,w,c
  2874  00180A  0A80               	xorlw	128
  2875  00180C  6E15               	movwf	??_KController& (0+255),c
  2876  00180E  5038               	movf	_sensorValue+1,w,c
  2877  001810  0A80               	xorlw	128
  2878  001812  5815               	subwfb	??_KController& (0+255),w,c
  2879  001814  B0D8               	btfsc	status,0,c
  2880  001816  D00F               	goto	i2l1510
  2881                           
  2882                           ;interrupts.c: 346: {
  2883                           ;interrupts.c: 348: correctTo = LEFT;
  2884  001818  0E00               	movlw	0
  2885  00181A  6E17               	movwf	KController@correctTo,c
  2886                           
  2887                           ;interrupts.c: 349: motorCounterUpdate(correctTo,0);
  2888  00181C  0E00               	movlw	0
  2889  00181E  6E12               	movwf	motorCounterUpdate@reverse,c
  2890  001820  5017               	movf	KController@correctTo,w,c
  2891  001822  EC63  F00B         	call	_motorCounterUpdate
  2892                           
  2893                           ;interrupts.c: 350: moveMouse(merge(LMotorCounter,RMotorCounter));
  2894  001826  C04E  F012         	movff	_RMotorCounter,merge@right
  2895  00182A  504D               	movf	_LMotorCounter,w,c
  2896  00182C  EC83  F00D         	call	_merge
  2897  001830  EC90  F00D         	call	_moveMouse
  2898                           
  2899                           ;interrupts.c: 351: }
  2900  001834  D00F               	goto	i2l1516
  2901  001836                     i2l1510:
  2902                           
  2903                           ;interrupts.c: 352: else
  2904                           ;interrupts.c: 353: {
  2905                           ;interrupts.c: 355: correctTo = RIGHT;
  2906  001836  0E01               	movlw	1
  2907  001838  6E17               	movwf	KController@correctTo,c
  2908                           
  2909                           ;interrupts.c: 356: motorCounterUpdate(correctTo,0);
  2910  00183A  0E00               	movlw	0
  2911  00183C  6E12               	movwf	motorCounterUpdate@reverse,c
  2912  00183E  5017               	movf	KController@correctTo,w,c
  2913  001840  EC63  F00B         	call	_motorCounterUpdate
  2914                           
  2915                           ;interrupts.c: 357: moveMouse(merge(LMotorCounter,RMotorCounter));
  2916  001844  C04E  F012         	movff	_RMotorCounter,merge@right
  2917  001848  504D               	movf	_LMotorCounter,w,c
  2918  00184A  EC83  F00D         	call	_merge
  2919  00184E  EC90  F00D         	call	_moveMouse
  2920  001852  D000               	goto	i2l1516
  2921  001854                     i2l1516:
  2922                           
  2923                           ;interrupts.c: 358: }
  2924                           ;interrupts.c: 360: if(diff > 90)
  2925  001854  BE19               	btfsc	KController@diff+1,7,c
  2926  001856  D008               	goto	i2l1520
  2927  001858  5019               	movf	KController@diff+1,w,c
  2928  00185A  E104               	bnz	i2u93_40
  2929  00185C  0E5B               	movlw	91
  2930  00185E  5C18               	subwf	KController@diff,w,c
  2931  001860  A0D8               	btfss	status,0,c
  2932  001862  D002               	goto	i2l1520
  2933  001864                     i2u93_40:
  2934                           
  2935                           ;interrupts.c: 361: controllerSteps = 1;
  2936  001864  0E01               	movlw	1
  2937  001866  D013               	goto	L10
  2938  001868                     i2l1520:
  2939                           
  2940                           ;interrupts.c: 362: else if(diff <= 90 && diff > 20)
  2941  001868  BE19               	btfsc	KController@diff+1,7,c
  2942  00186A  D006               	goto	i2l1522
  2943  00186C  5019               	movf	KController@diff+1,w,c
  2944  00186E  E10E               	bnz	i2l1526
  2945  001870  0E5B               	movlw	91
  2946  001872  5C18               	subwf	KController@diff,w,c
  2947  001874  B0D8               	btfsc	status,0,c
  2948  001876  D00A               	goto	i2l1526
  2949  001878                     i2l1522:
  2950  001878  BE19               	btfsc	KController@diff+1,7,c
  2951  00187A  D008               	goto	i2l1526
  2952  00187C  5019               	movf	KController@diff+1,w,c
  2953  00187E  E104               	bnz	i2u95_40
  2954  001880  0E15               	movlw	21
  2955  001882  5C18               	subwf	KController@diff,w,c
  2956  001884  A0D8               	btfss	status,0,c
  2957  001886  D002               	goto	i2l1526
  2958  001888                     i2u95_40:
  2959                           
  2960                           ;interrupts.c: 363: controllerSteps = 2;
  2961  001888  0E02               	movlw	2
  2962  00188A  D001               	goto	L10
  2963  00188C                     i2l1526:
  2964                           
  2965                           ;interrupts.c: 364: else
  2966                           ;interrupts.c: 365: controllerSteps = 3;
  2967  00188C  0E03               	movlw	3
  2968  00188E                     L10:
  2969  00188E  6E54               	movwf	_controllerSteps,c
  2970  001890  D000               	goto	i2l138
  2971  001892                     i2l138:
  2972  001892  0012               	return		;funcret
  2973  001894                     __end_of_KController:
  2974                           	opt stack 0
  2975                           pclatu	equ	0xFFB
  2976                           pclath	equ	0xFFA
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           intcon2	equ	0xFF1
  2985                           postinc0	equ	0xFEE
  2986                           fsr0h	equ	0xFEA
  2987                           fsr0l	equ	0xFE9
  2988                           wreg	equ	0xFE8
  2989                           fsr1h	equ	0xFE2
  2990                           fsr1l	equ	0xFE1
  2991                           bsr	equ	0xFE0
  2992                           postinc2	equ	0xFDE
  2993                           postdec2	equ	0xFDD
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function _moveMouse *****************
  2999 ;; Defined at:
  3000 ;;		line 318 in file "interrupts.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  action          1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  action          1   17[COMRAM] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;		None               void
  3007 ;; Registers used:
  3008 ;;		wreg
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_high_isr
  3024 ;;		_KController
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text17
  3029  001B20                     __ptext17:
  3030                           	opt stack 0
  3031  001B20                     _moveMouse:
  3032                           	opt stack 25
  3033                           
  3034                           ;incstack = 0
  3035                           ;moveMouse@action stored from wreg
  3036  001B20  6E12               	movwf	moveMouse@action,c
  3037                           
  3038                           ;interrupts.c: 320: LATC = action;
  3039  001B22  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  3040  001B26  0012               	return		;funcret
  3041  001B28                     __end_of_moveMouse:
  3042                           	opt stack 0
  3043                           pclatu	equ	0xFFB
  3044                           pclath	equ	0xFFA
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           intcon2	equ	0xFF1
  3053                           postinc0	equ	0xFEE
  3054                           fsr0h	equ	0xFEA
  3055                           fsr0l	equ	0xFE9
  3056                           wreg	equ	0xFE8
  3057                           fsr1h	equ	0xFE2
  3058                           fsr1l	equ	0xFE1
  3059                           bsr	equ	0xFE0
  3060                           postinc2	equ	0xFDE
  3061                           postdec2	equ	0xFDD
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _motorCounterUpdate *****************
  3067 ;; Defined at:
  3068 ;;		line 266 in file "interrupts.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  side            1    wreg     enum E4082
  3071 ;;  reverse         1   17[COMRAM] unsigned char 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  side            1   18[COMRAM] enum E4082
  3074 ;; Return value:  Size  Location     Type
  3075 ;;		None               void
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        2 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_high_isr
  3093 ;;		_KController
  3094 ;;		_rotate
  3095 ;;		_Reversing
  3096 ;;		_forward
  3097 ;;		_smoothTurn
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text18
  3102  0016C6                     __ptext18:
  3103                           	opt stack 0
  3104  0016C6                     _motorCounterUpdate:
  3105                           	opt stack 24
  3106                           
  3107                           ;incstack = 0
  3108                           ;motorCounterUpdate@side stored from wreg
  3109  0016C6  6E13               	movwf	motorCounterUpdate@side,c
  3110                           
  3111                           ;interrupts.c: 268: if(side == LEFT && reverse == 1)
  3112  0016C8  5013               	movf	motorCounterUpdate@side,w,c
  3113  0016CA  A4D8               	btfss	status,2,c
  3114  0016CC  D01B               	goto	i2l1372
  3115  0016CE  0412               	decf	motorCounterUpdate@reverse,w,c
  3116  0016D0  B4D8               	btfsc	status,2,c
  3117  0016D2  D00B               	goto	i2l1370
  3118  0016D4  D017               	goto	i2l1372
  3119                           
  3120                           ;interrupts.c: 269: {
  3121                           ;interrupts.c: 270: switch(LMotorCounter)
  3122  0016D6  D009               	goto	i2l1370
  3123  0016D8                     i2l1360:
  3124  0016D8  0E02               	movlw	2
  3125  0016DA  D004               	goto	L13
  3126  0016DC                     i2l1362:
  3127  0016DC  0E04               	movlw	4
  3128  0016DE  D002               	goto	L13
  3129                           
  3130                           ;interrupts.c: 274: case 0b00000100: LMotorCounter = 0b00001000; break;
  3131  0016E0  D03E               	goto	i2l1404
  3132                           
  3133                           ;interrupts.c: 275: case 0b00001000: LMotorCounter = 0b00000001; break;
  3134  0016E2  D039               	goto	i2l1398
  3135  0016E4                     L13:
  3136  0016E4  6E4D               	movwf	_LMotorCounter,c
  3137  0016E6  D068               	goto	i2l124
  3138                           
  3139                           ;interrupts.c: 276: default: LMotorCounter = 0b00000001;
  3140  0016E8  D036               	goto	i2l1398
  3141  0016EA                     i2l1370:
  3142  0016EA  504D               	movf	_LMotorCounter,w,c
  3143                           
  3144                           ; Switch size 1, requested type "space"
  3145                           ; Number of cases is 4, Range of values is 1 to 8
  3146                           ; switch strategies available:
  3147                           ; Name         Instructions Cycles
  3148                           ; simple_byte           13     7 (average)
  3149                           ;	Chosen strategy is simple_byte
  3150  0016EC  0A01               	xorlw	1	; case 1
  3151  0016EE  B4D8               	btfsc	status,2,c
  3152  0016F0  D7F3               	goto	i2l1360
  3153  0016F2  0A03               	xorlw	3	; case 2
  3154  0016F4  B4D8               	btfsc	status,2,c
  3155  0016F6  D7F2               	goto	i2l1362
  3156  0016F8  0A06               	xorlw	6	; case 4
  3157  0016FA  B4D8               	btfsc	status,2,c
  3158  0016FC  D030               	goto	i2l1404
  3159  0016FE  0A0C               	xorlw	12	; case 8
  3160  001700  D02A               	goto	i2l1398
  3161                           
  3162                           ;interrupts.c: 278: } else if(side == RIGHT && reverse == 1)
  3163  001702  D05A               	goto	i2l124
  3164  001704                     i2l1372:
  3165  001704  0413               	decf	motorCounterUpdate@side,w,c
  3166  001706  A4D8               	btfss	status,2,c
  3167  001708  D01D               	goto	i2l1390
  3168  00170A  0412               	decf	motorCounterUpdate@reverse,w,c
  3169  00170C  B4D8               	btfsc	status,2,c
  3170  00170E  D00B               	goto	i2l1388
  3171  001710  D019               	goto	i2l1390
  3172                           
  3173                           ;interrupts.c: 279: {
  3174                           ;interrupts.c: 280: switch(RMotorCounter)
  3175  001712  D009               	goto	i2l1388
  3176  001714                     i2l1378:
  3177  001714  0E08               	movlw	8
  3178  001716  D040               	goto	L21
  3179  001718                     i2l1380:
  3180  001718  0E01               	movlw	1
  3181  00171A  D03E               	goto	L21
  3182  00171C                     i2l1382:
  3183  00171C  0E02               	movlw	2
  3184  00171E  D03C               	goto	L21
  3185  001720                     i2l1384:
  3186  001720  0E04               	movlw	4
  3187  001722  D03A               	goto	L21
  3188                           
  3189                           ;interrupts.c: 286: default: RMotorCounter = 0b00001000;
  3190  001724  D7F7               	goto	i2l1378
  3191  001726                     i2l1388:
  3192  001726  504E               	movf	_RMotorCounter,w,c
  3193                           
  3194                           ; Switch size 1, requested type "space"
  3195                           ; Number of cases is 4, Range of values is 1 to 8
  3196                           ; switch strategies available:
  3197                           ; Name         Instructions Cycles
  3198                           ; simple_byte           13     7 (average)
  3199                           ;	Chosen strategy is simple_byte
  3200  001728  0A01               	xorlw	1	; case 1
  3201  00172A  B4D8               	btfsc	status,2,c
  3202  00172C  D7F3               	goto	i2l1378
  3203  00172E  0A03               	xorlw	3	; case 2
  3204  001730  B4D8               	btfsc	status,2,c
  3205  001732  D7F2               	goto	i2l1380
  3206  001734  0A06               	xorlw	6	; case 4
  3207  001736  B4D8               	btfsc	status,2,c
  3208  001738  D7F1               	goto	i2l1382
  3209  00173A  0A0C               	xorlw	12	; case 8
  3210  00173C  B4D8               	btfsc	status,2,c
  3211  00173E  D7F0               	goto	i2l1384
  3212  001740  D7E9               	goto	i2l1378
  3213                           
  3214                           ;interrupts.c: 288: } else if(side == LEFT && reverse == 0)
  3215  001742  D03A               	goto	i2l124
  3216  001744                     i2l1390:
  3217  001744  5013               	movf	motorCounterUpdate@side,w,c
  3218  001746  A4D8               	btfss	status,2,c
  3219  001748  D01B               	goto	i2l1408
  3220  00174A  5012               	movf	motorCounterUpdate@reverse,w,c
  3221  00174C  B4D8               	btfsc	status,2,c
  3222  00174E  D009               	goto	i2l1406
  3223  001750  D017               	goto	i2l1408
  3224                           
  3225                           ;interrupts.c: 289: {
  3226                           ;interrupts.c: 290: switch(LMotorCounter)
  3227  001752  D007               	goto	i2l1406
  3228                           
  3229                           ;interrupts.c: 291: {
  3230                           ;interrupts.c: 292: case 0b00000001: LMotorCounter = 0b00001000; break;
  3231  001754  D004               	goto	i2l1404
  3232  001756                     i2l1398:
  3233  001756  0E01               	movlw	1
  3234  001758  D7C5               	goto	L13
  3235                           
  3236                           ;interrupts.c: 294: case 0b00000100: LMotorCounter = 0b00000010; break;
  3237  00175A  D7BE               	goto	i2l1360
  3238                           
  3239                           ;interrupts.c: 295: case 0b00001000: LMotorCounter = 0b00000100; break;
  3240  00175C  D7BF               	goto	i2l1362
  3241  00175E                     i2l1404:
  3242  00175E  0E08               	movlw	8
  3243  001760  D7C1               	goto	L13
  3244  001762                     i2l1406:
  3245  001762  504D               	movf	_LMotorCounter,w,c
  3246                           
  3247                           ; Switch size 1, requested type "space"
  3248                           ; Number of cases is 4, Range of values is 1 to 8
  3249                           ; switch strategies available:
  3250                           ; Name         Instructions Cycles
  3251                           ; simple_byte           13     7 (average)
  3252                           ;	Chosen strategy is simple_byte
  3253  001764  0A01               	xorlw	1	; case 1
  3254  001766  B4D8               	btfsc	status,2,c
  3255  001768  D7FA               	goto	i2l1404
  3256  00176A  0A03               	xorlw	3	; case 2
  3257  00176C  B4D8               	btfsc	status,2,c
  3258  00176E  D7F3               	goto	i2l1398
  3259  001770  0A06               	xorlw	6	; case 4
  3260  001772  B4D8               	btfsc	status,2,c
  3261  001774  D7B1               	goto	i2l1360
  3262  001776  0A0C               	xorlw	12	; case 8
  3263  001778  B4D8               	btfsc	status,2,c
  3264  00177A  D7B0               	goto	i2l1362
  3265  00177C  D7F0               	goto	i2l1404
  3266                           
  3267                           ;interrupts.c: 298: } else if(side == RIGHT && reverse == 0)
  3268  00177E  D01C               	goto	i2l124
  3269  001780                     i2l1408:
  3270  001780  0413               	decf	motorCounterUpdate@side,w,c
  3271  001782  A4D8               	btfss	status,2,c
  3272  001784  D019               	goto	i2l124
  3273  001786  5012               	movf	motorCounterUpdate@reverse,w,c
  3274  001788  B4D8               	btfsc	status,2,c
  3275  00178A  D009               	goto	i2l1424
  3276  00178C  D015               	goto	i2l124
  3277                           
  3278                           ;interrupts.c: 299: {
  3279                           ;interrupts.c: 300: switch(RMotorCounter)
  3280  00178E  D007               	goto	i2l1424
  3281                           
  3282                           ;interrupts.c: 301: {
  3283                           ;interrupts.c: 302: case 0b00000001: RMotorCounter = 0b00000010; break;
  3284  001790  D7C5               	goto	i2l1382
  3285                           
  3286                           ;interrupts.c: 303: case 0b00000010: RMotorCounter = 0b00000100; break;
  3287  001792  D7C6               	goto	i2l1384
  3288                           
  3289                           ;interrupts.c: 304: case 0b00000100: RMotorCounter = 0b00001000; break;
  3290  001794  D7BF               	goto	i2l1378
  3291                           
  3292                           ;interrupts.c: 305: case 0b00001000: RMotorCounter = 0b00000001; break;
  3293  001796  D7C0               	goto	i2l1380
  3294  001798                     L21:
  3295  001798  6E4E               	movwf	_RMotorCounter,c
  3296  00179A  D00E               	goto	i2l124
  3297                           
  3298                           ;interrupts.c: 306: default: RMotorCounter = 0b00000001;
  3299  00179C  D7BD               	goto	i2l1380
  3300  00179E                     i2l1424:
  3301  00179E  504E               	movf	_RMotorCounter,w,c
  3302                           
  3303                           ; Switch size 1, requested type "space"
  3304                           ; Number of cases is 4, Range of values is 1 to 8
  3305                           ; switch strategies available:
  3306                           ; Name         Instructions Cycles
  3307                           ; simple_byte           13     7 (average)
  3308                           ;	Chosen strategy is simple_byte
  3309  0017A0  0A01               	xorlw	1	; case 1
  3310  0017A2  B4D8               	btfsc	status,2,c
  3311  0017A4  D7BB               	goto	i2l1382
  3312  0017A6  0A03               	xorlw	3	; case 2
  3313  0017A8  B4D8               	btfsc	status,2,c
  3314  0017AA  D7BA               	goto	i2l1384
  3315  0017AC  0A06               	xorlw	6	; case 4
  3316  0017AE  B4D8               	btfsc	status,2,c
  3317  0017B0  D7B1               	goto	i2l1378
  3318  0017B2  0A0C               	xorlw	12	; case 8
  3319  0017B4  D7B1               	goto	i2l1380
  3320  0017B6  D000               	goto	i2l124
  3321  0017B8                     i2l124:
  3322  0017B8  0012               	return		;funcret
  3323  0017BA                     __end_of_motorCounterUpdate:
  3324                           	opt stack 0
  3325                           pclatu	equ	0xFFB
  3326                           pclath	equ	0xFFA
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           intcon2	equ	0xFF1
  3335                           postinc0	equ	0xFEE
  3336                           fsr0h	equ	0xFEA
  3337                           fsr0l	equ	0xFE9
  3338                           wreg	equ	0xFE8
  3339                           fsr1h	equ	0xFE2
  3340                           fsr1l	equ	0xFE1
  3341                           bsr	equ	0xFE0
  3342                           postinc2	equ	0xFDE
  3343                           postdec2	equ	0xFDD
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _merge *****************
  3349 ;; Defined at:
  3350 ;;		line 311 in file "interrupts.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  left            1    wreg     unsigned char 
  3353 ;;  right           1   17[COMRAM] unsigned char 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  left            1   18[COMRAM] unsigned char 
  3356 ;;  merged          1   19[COMRAM] unsigned char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      unsigned char 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        3 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_high_isr
  3376 ;;		_KController
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text19
  3381  001B06                     __ptext19:
  3382                           	opt stack 0
  3383  001B06                     _merge:
  3384                           	opt stack 25
  3385                           
  3386                           ;incstack = 0
  3387                           ;merge@left stored from wreg
  3388  001B06  6E13               	movwf	merge@left,c
  3389                           
  3390                           ;interrupts.c: 313: unsigned char merged;
  3391                           ;interrupts.c: 314: merged = left + (right << 4);
  3392  001B08  3812               	swapf	merge@right,w,c
  3393  001B0A  0BF0               	andlw	240
  3394  001B0C  2413               	addwf	merge@left,w,c
  3395  001B0E  6E14               	movwf	merge@merged,c
  3396                           
  3397                           ;interrupts.c: 315: return merged;
  3398  001B10  5014               	movf	merge@merged,w,c
  3399  001B12  D000               	goto	i2l127
  3400  001B14                     i2l127:
  3401  001B14  0012               	return		;funcret
  3402  001B16                     __end_of_merge:
  3403                           	opt stack 0
  3404                           pclatu	equ	0xFFB
  3405                           pclath	equ	0xFFA
  3406                           tblptru	equ	0xFF8
  3407                           tblptrh	equ	0xFF7
  3408                           tblptrl	equ	0xFF6
  3409                           tablat	equ	0xFF5
  3410                           prodh	equ	0xFF4
  3411                           prodl	equ	0xFF3
  3412                           intcon	equ	0xFF2
  3413                           intcon2	equ	0xFF1
  3414                           postinc0	equ	0xFEE
  3415                           fsr0h	equ	0xFEA
  3416                           fsr0l	equ	0xFE9
  3417                           wreg	equ	0xFE8
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           bsr	equ	0xFE0
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _ABS *****************
  3428 ;; Defined at:
  3429 ;;		line 324 in file "interrupts.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  x               2   17[COMRAM] int 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  2   17[COMRAM] int 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        2 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_KController
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text20
  3457  001AD8                     __ptext20:
  3458                           	opt stack 0
  3459  001AD8                     _ABS:
  3460                           	opt stack 24
  3461                           
  3462                           ;interrupts.c: 326: if(x<0) x = -x;
  3463                           
  3464                           ;incstack = 0
  3465  001AD8  AE13               	btfss	ABS@x+1,7,c
  3466  001ADA  D005               	goto	i2l1436
  3467  001ADC  6C12               	negf	ABS@x,c
  3468  001ADE  1E13               	comf	ABS@x+1,f,c
  3469  001AE0  B0D8               	btfsc	status,0,c
  3470  001AE2  2A13               	incf	ABS@x+1,f,c
  3471  001AE4  D000               	goto	i2l1436
  3472  001AE6                     i2l1436:
  3473                           
  3474                           ;interrupts.c: 327: return x;
  3475  001AE6  C012  F012         	movff	ABS@x,?_ABS
  3476  001AEA  C013  F013         	movff	ABS@x+1,?_ABS+1
  3477  001AEE  D000               	goto	i2l134
  3478  001AF0                     i2l134:
  3479  001AF0  0012               	return		;funcret
  3480  001AF2                     __end_of_ABS:
  3481                           	opt stack 0
  3482                           pclatu	equ	0xFFB
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           intcon2	equ	0xFF1
  3492                           postinc0	equ	0xFEE
  3493                           fsr0h	equ	0xFEA
  3494                           fsr0l	equ	0xFE9
  3495                           wreg	equ	0xFE8
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           bsr	equ	0xFE0
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           pclatu	equ	0xFFB
  3505                           pclath	equ	0xFFA
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           intcon2	equ	0xFF1
  3514                           postinc0	equ	0xFEE
  3515                           fsr0h	equ	0xFEA
  3516                           fsr0l	equ	0xFE9
  3517                           wreg	equ	0xFE8
  3518                           fsr1h	equ	0xFE2
  3519                           fsr1l	equ	0xFE1
  3520                           bsr	equ	0xFE0
  3521                           postinc2	equ	0xFDE
  3522                           postdec2	equ	0xFDD
  3523                           fsr2h	equ	0xFDA
  3524                           fsr2l	equ	0xFD9
  3525                           status	equ	0xFD8
  3526                           
  3527                           	psect	rparam
  3528  0000                     pclatu	equ	0xFFB
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           intcon2	equ	0xFF1
  3538                           postinc0	equ	0xFEE
  3539                           fsr0h	equ	0xFEA
  3540                           fsr0l	equ	0xFE9
  3541                           wreg	equ	0xFE8
  3542                           fsr1h	equ	0xFE2
  3543                           fsr1l	equ	0xFE1
  3544                           bsr	equ	0xFE0
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        3
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     54      84
    BANK0           128    100     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4940
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             10 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                             50 COMRAM     4     2      2
                                              0 BANK0     10    10      0
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    5857
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1046
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1024
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1498
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1024
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     64      64       5       78.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     36      54       1       66.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      34        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 24 23:18:31 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l251 1A9E                           l260 14C4                           l237 19FC  
                         l246 1A8A                           l281 1A78                           l282 1A80  
                         l267 1526                           l277 1A50                           l285 1A30  
                         l278 1A58                           _ABS 1AD8                           l478 1928  
                __CFG_CPB$OFF 000000                           _MAX 1A5A                           _MIN 1A32  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1AA0                  _rotatingSide 0051  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 002E                          ?_MIN 002E                          MAX@a 002E  
                        MAX@b 0030                          MIN@a 002E                          MIN@b 0030  
                __CFG_WDT$OFF 000000                          l1032 1A98                          l1442 19E8  
                        l1800 14EA                          l1740 18D2                          l1820 168C  
                        l1742 18DC                          l1734 18BC                          l1806 150E  
                        l1760 191E                          l1752 1902                          l1744 18E4  
                        l1728 18AA                          l1816 15CC                          l1824 16A2  
                        l1770 12BE                          l1818 162C                          l1834 1AFC  
                        l1756 190E                          l1780 1342                          l1828 16B8  
                        l1782 1436                          l1776 12E2                          l1786 144C  
                        u1400 12E0                          _LATC 000F8B                          u1440 14E8  
                        u1450 150C                          u1390 12BC                          u1527 19EE  
                        u1475 1534                          i2l58 1240                          i2l83 1260  
                        _main 1AF2                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 00A2                 __CFG_IESO$OFF 000000  
 sensorComputation@sensorTemp 0033                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
             __end_of_InitApp 1966                         ??_ABS 0014                         ??_MAX 0032  
                       ??_MIN 0032    __size_of_sensorComputation 022C                         ?_main 0001  
             __end_of___awdiv 192A                         _T0CON 000FD5               ___awdiv@divisor 002A  
                       i2l124 17B8                         i2l134 1AF0                         i2l127 1B14  
                       i2l138 1892               ___awdiv@counter 002C                         _TRISC 000F94  
         _ConfigureOscillator 1B16                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _delay 19D6                         _merge 1B06               __end_of_forward 1ABC  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 19A2                  __end_of_main 1B06  
                      ??_main 0037                 __activetblptr 000002                        ?_delay 0028  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0028                        i2l1404 175E                        i2l1406 1762  
                      i2l1510 1836                        i2l1502 1804                        i2l1424 179E  
                      i2l1408 1780                        i2l1360 16D8                        i2l1520 1868  
                      i2l1600 1092                        i2l1362 16DC                        i2l1370 16EA  
                      i2l1522 1878                        i2l1602 10A2                        i2l1436 1AE6  
                      i2l1380 1718                        i2l1372 1704                        i2l1516 1854  
                      i2l1620 1100                        i2l1382 171C                        i2l1390 1744  
                      i2l1526 188C                        i2l1630 112E                        i2l1622 1110  
                      i2l1614 10E8                        i2l1606 10B0                        i2l1384 1720  
                      i2l1640 114A                        i2l1616 10F8                        i2l1608 10B8  
                      i2l1378 1714                        i2l1490 199A                        i2l1642 115A  
                      i2l1388 1726                        i2l1652 1186                        i2l1628 1124  
                      i2l1398 1756                        i2l1670 1208                        i2l1662 11C8  
                      i2l1654 1190                        i2l1638 1140                        i2l1488 1984  
                      i2l1672 1216                        i2l1680 122A                        i2l1656 1196  
                      i2l1592 1060                        i2l1658 11A6                        i2l1676 1224  
                      i2l1668 11F8                        i2l1596 1074                        i2l1684 1258  
                      _INTCON 000FF2                        _OSCCON 000FD3                     ??_InitApp 002D  
       ??_ConfigureOscillator 0028                   merge@merged 0014                __CFG_XINST$OFF 000000  
          sensorComputation@i 0086            sensorComputation@j 0088              __end_of_high_isr 129A  
                      ___wmul 1A0A                     ??___awdiv 002C                __CFG_STVREN$ON 000000  
                      delay@x 002B                        clear_0 19A8              ___awdiv@quotient 002E  
                      _rotate 1966            __size_of_Reversing 001C                  __pdataCOMRAM 0052  
                   ??_forward 0014                  __mediumconst 0000                     ??_low_isr 0001  
              _ReverseCounter 0047                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 19CC  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 1A0A               moveMouse@action 0012  
               __end_of_merge 1B16          KController@correctTo 0017    __end_of_motorCounterUpdate 17BA  
              _ForwardCounter 003F                       ??_delay 002A                       ??_merge 0013  
          _AlgorithmSelection 1A82                  _LTurnCounter 0041             __end_of_Reversing 1AD8  
                  _delay_time 004B             _MotorDelayCounter 0043           ?_AlgorithmSelection 0001  
                     ?___wmul 0028            __size_of_moveMouse 0008                       ?_rotate 0001  
                     _INTCON2 000FF1                       _OSCTUNE 000F9B                       i2u93_40 1864  
                     i2u95_40 1888          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
               _LMotorCounter 004D                       _InitApp 192A                       __Hparam 0000  
                     __Lparam 0000                       ___awdiv 1894               __size_of___wmul 0028  
                __psmallconst 1000                       __pcinit 19A2                       __ramtop 1000  
                     __ptext0 1AF2                       __ptext1 14C6                       __ptext2 129A  
                     __ptext3 1A0A                       __ptext4 1894                       __ptext5 1A32  
                     __ptext6 1A5A                       __ptext7 192A                       __ptext8 19D6  
                     __ptext9 1A82               __size_of_rotate 003C                  __size_of_ABS 001A  
                __size_of_MAX 0028                  __size_of_MIN 0028                       _forward 1AA0  
                     delay@ms 0028                       _low_isr 0018                 ?_sensorUpdate 0001  
                  ??_high_isr 001A                __pintcode_body 100A          end_of_initialization 19CC  
            _sensorCorrection 1001             __end_of_moveMouse 1B28                 __Lmediumconst 0000  
                     int_func 100A               _controllerSteps 0054                    _justTurned 0050  
        __size_of_KController 00DA                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 008A   __end_of_ConfigureOscillator 1B20                  _RTurnCounter 0045  
              __end_of___wmul 1A32                 __pidataCOMRAM 1B28                __end_of_rotate 19A2  
         start_initialization 19A2                   __end_of_ABS 1AF2                   __end_of_MAX 1A82  
                 __end_of_MIN 1A5A            _motorCounterUpdate 16C6              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 1ABC  
                    ??___wmul 002C              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 0037  
               __pcstackBANK0 0080                     _TurnRight 0052        sensorUpdate@sensorTemp 0090  
           __size_of_high_isr 1292                      ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000  
                  ?_Reversing 0001                     _algorithm 004F                     __pintcode 0008  
      motorCounterUpdate@side 0013                      ?___awdiv 0028          __end_of_sensorUpdate 16C6  
      __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005                   __pintcodelo 0018  
                 __smallconst 1000                      ?_forward 0001                      ?_low_isr 0001  
              __size_of_delay 0034   __size_of_AlgorithmSelection 001E                __size_of_merge 0010  
              ___wmul@product 002C                     _moveMouse 1B20                      i2u111_40 10C8  
                    i2u112_40 10D8                      i2u105_40 104C                      i2u106_40 105A  
                    i2u107_40 106E                      i2u124_40 11D8                      i2u108_40 1082  
                    i2u125_40 11E8                      i2u119_40 116A              __CFG_WDTPS$32768 000000  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0028                 _RMotorCounter 004E  
                  rotate@side 0014                 ??_KController 0015                    ?_moveMouse 0001  
            __size_of_InitApp 003C                      __Hrparam 0000                     merge@left 0013  
        sensorComputation@max 0080                      __Lrparam 0000          sensorComputation@min 0082  
        sensorComputation@sum 0084                   ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of_forward 001C              __size_of_low_isr 008A  
                    __ptext10 1B16                      __ptext20 1AD8                      __ptext13 1966  
                    __ptext14 1AA0                      __ptext15 1ABC                      __ptext16 17BA  
                    __ptext17 1B20                      __ptext18 16C6                      __ptext19 1B06  
                    _high_isr 0008                 __size_of_main 0014                 _RotateCounter 0049  
       __size_of_sensorUpdate 0200  __size_of_ConfigureOscillator 000A           __end_of_KController 1894  
           _sensorComputation 129A                    _INTCONbits 000FF2            ?_sensorComputation 0033  
               sensorUpdate@i 00E0                 sensorUpdate@j 00E2                  _sensorUpdate 14C6  
                    intlevel1 0000                      intlevel2 0000           ??_sensorComputation 0035  
                 ??_moveMouse 0012               KController@diff 0018     __end_of_sensorComputation 14C6  
                 _sensorValue 0037   __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012  
                 _KController 17BA  
