

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 01 17:48:09 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001CD2                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _controllerSteps
    43  001CD2  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _ADCON0	set	4034
    58  0000                     _ADCON0bits	set	4034
    59  0000                     _ADCON1	set	4033
    60  0000                     _ADCON2	set	4032
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADRESL	set	4035
    63  0000                     _INTCON	set	4082
    64  0000                     _INTCON2	set	4081
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATC	set	3979
    67  0000                     _OSCCON	set	4051
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _T0CON	set	4053
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISEbits	set	3990
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001BF6                     __pcinit:
    79                           	opt stack 0
    80  001BF6                     start_initialization:
    81                           	opt stack 0
    82  001BF6                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (55 bytes)
    86  001BF6  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  001BFA  0E37               	movlw	55
    88  001BFC                     clear_0:
    89  001BFC  6AEE               	clrf	postinc0,c
    90  001BFE  06E8               	decf	wreg,f,c
    91  001C00  E1FD               	bnz	clear_0
    92                           
    93                           ; Initialize objects allocated to COMRAM (1 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  001C02  0ED2               	movlw	low __pidataCOMRAM
    96  001C04  6EF6               	movwf	tblptrl,c
    97  001C06  0E1C               	movlw	high __pidataCOMRAM
    98  001C08  6EF7               	movwf	tblptrh,c
    99  001C0A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  001C0C  6EF8               	movwf	tblptru,c
   101  001C0E  0009               	tblrd		*+	;fetch initializer
   102  001C10  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   103  001C14                     end_of_initialization:
   104                           	opt stack 0
   105  001C14                     __end_of__initialization:
   106                           	opt stack 0
   107  001C14  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  001C16  6EF8               	movwf	tblptru,c
   109  001C18  0100               	movlb	0
   110  001C1A  EF0F  F00E         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000001                     _sensorCorrection:
   122                           	opt stack 0
   123  000001                     	ds	8
   124  000009                     _sensorValue:
   125                           	opt stack 0
   126  000009                     	ds	8
   127  000011                     _ControllerCounter:
   128                           	opt stack 0
   129  000011                     	ds	2
   130  000013                     _Deadend:
   131                           	opt stack 0
   132  000013                     	ds	2
   133  000015                     _ForwardCounter:
   134                           	opt stack 0
   135  000015                     	ds	2
   136  000017                     _LTurnCounter:
   137                           	opt stack 0
   138  000017                     	ds	2
   139  000019                     _MotorDelayCounter:
   140                           	opt stack 0
   141  000019                     	ds	2
   142  00001B                     _RTurnCounter:
   143                           	opt stack 0
   144  00001B                     	ds	2
   145  00001D                     _ReverseCounter:
   146                           	opt stack 0
   147  00001D                     	ds	2
   148  00001F                     _RotateCounter:
   149                           	opt stack 0
   150  00001F                     	ds	2
   151  000021                     _TurnLeft:
   152                           	opt stack 0
   153  000021                     	ds	2
   154  000023                     _TurnRight:
   155                           	opt stack 0
   156  000023                     	ds	2
   157  000025                     _TurnedLeft:
   158                           	opt stack 0
   159  000025                     	ds	2
   160  000027                     _TurnedRight:
   161                           	opt stack 0
   162  000027                     	ds	2
   163  000029                     _delay_time:
   164                           	opt stack 0
   165  000029                     	ds	2
   166  00002B                     _errorD:
   167                           	opt stack 0
   168  00002B                     	ds	2
   169  00002D                     _errorP:
   170                           	opt stack 0
   171  00002D                     	ds	2
   172  00002F                     _oldErrorP:
   173                           	opt stack 0
   174  00002F                     	ds	2
   175  000031                     _totalError:
   176                           	opt stack 0
   177  000031                     	ds	2
   178  000033                     _LMotorCounter:
   179                           	opt stack 0
   180  000033                     	ds	1
   181  000034                     _RMotorCounter:
   182                           	opt stack 0
   183  000034                     	ds	1
   184  000035                     _algorithm:
   185                           	opt stack 0
   186  000035                     	ds	1
   187  000036                     _justTurned:
   188                           	opt stack 0
   189  000036                     	ds	1
   190  000037                     _rotatingSide:
   191                           	opt stack 0
   192  000037                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00005F                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00005F                     _controllerSteps:
   204                           	opt stack 0
   205  00005F                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000080                     __pcstackBANK0:
   215                           	opt stack 0
   216  000080                     ?___wmul:
   217                           	opt stack 0
   218  000080                     ?___awdiv:
   219                           	opt stack 0
   220  000080                     delay@ms:
   221                           	opt stack 0
   222  000080                     ___wmul@multiplier:
   223                           	opt stack 0
   224  000080                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_delay:
   230  000082                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000082                     ___awdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000082                     	ds	1
   237  000083                     delay@x:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000083                     	ds	1
   242  000084                     ___awdiv@counter:
   243                           	opt stack 0
   244  000084                     ___wmul@product:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000084                     	ds	1
   249  000085                     ___awdiv@sign:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  000085                     	ds	1
   254  000086                     ?_MIN:
   255                           	opt stack 0
   256  000086                     ?_MAX:
   257                           	opt stack 0
   258  000086                     MIN@a:
   259                           	opt stack 0
   260  000086                     MAX@a:
   261                           	opt stack 0
   262  000086                     ___awdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000086                     	ds	2
   267  000088                     ??_setCorrection:
   268  000088                     MIN@b:
   269                           	opt stack 0
   270  000088                     MAX@b:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  000088                     	ds	2
   275  00008A                     ??_MIN:
   276  00008A                     ??_MAX:
   277  00008A                     setCorrection@sideAvg:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00008A                     	ds	1
   282  00008B                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00008B                     	ds	1
   287  00008C                     setCorrection@frontAvg:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00008C                     	ds	1
   292  00008D                     sensorComputation@getCorrection:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00008D                     	ds	1
   297  00008E                     ??_sensorComputation:
   298                           
   299                           ; 0 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@max:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@min:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@sum:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     sensorComputation@j:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000096                     	ds	2
   321  000098                     sensorComputation@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x18
   325  000098                     	ds	2
   326  00009A                     ??_sensorUpdate:
   327                           
   328                           ; 0 bytes @ 0x1A
   329  00009A                     	ds	6
   330  0000A0                     sensorUpdate@sensorTemp:
   331                           	opt stack 0
   332                           
   333                           ; 80 bytes @ 0x20
   334  0000A0                     	ds	80
   335  0000F0                     sensorUpdate@getCorrection:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x70
   339  0000F0                     	ds	1
   340  0000F1                     sensorUpdate@i:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x71
   344  0000F1                     	ds	2
   345  0000F3                     sensorUpdate@j:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x73
   349  0000F3                     	ds	2
   350  0000F5                     tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           ; 0 bytes @ 0x75
   358                           
   359                           	psect	cstackCOMRAM
   360  000038                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000038                     ??_low_isr:
   363  000038                     
   364                           ; 0 bytes @ 0x0
   365  000038                     	ds	17
   366  000049                     ?_ABS:
   367                           	opt stack 0
   368  000049                     motorCounterUpdate@reverse:
   369                           	opt stack 0
   370  000049                     merge@right:
   371                           	opt stack 0
   372  000049                     moveMouse@action:
   373                           	opt stack 0
   374  000049                     ABS@x:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000049                     	ds	1
   379  00004A                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  00004A                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  00004A                     	ds	1
   386  00004B                     merge@merged:
   387                           	opt stack 0
   388  00004B                     rotate@side:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x13
   392  00004B                     	ds	1
   393  00004C                     ??_KController:
   394                           
   395                           ; 0 bytes @ 0x14
   396  00004C                     	ds	2
   397  00004E                     KController@correctTo:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x16
   401  00004E                     	ds	1
   402  00004F                     KController@diff:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x17
   406  00004F                     	ds	2
   407  000051                     ??_high_isr:
   408                           
   409                           ; 0 bytes @ 0x19
   410  000051                     	ds	14
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 41 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;		None               void
   430 ;; Registers used:
   431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;Total ram usage:        0 bytes
   442 ;; Hardware stack levels required when called:    7
   443 ;; This function calls:
   444 ;;		_ConfigureOscillator
   445 ;;		_InitApp
   446 ;;		_sensorUpdate
   447 ;;		_setCorrection
   448 ;; This function is called by:
   449 ;;		Startup code after reset
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text0
   454  001C1E                     __ptext0:
   455                           	opt stack 0
   456  001C1E                     _main:
   457                           	opt stack 24
   458                           
   459                           ;main.c: 44: ConfigureOscillator();
   460                           
   461                           ;incstack = 0
   462  001C1E  EC60  F00E         	call	_ConfigureOscillator	;wreg free
   463                           
   464                           ;main.c: 47: InitApp();
   465  001C22  EC6F  F00D         	call	_InitApp	;wreg free
   466                           
   467                           ;main.c: 48: sensorUpdate(1);
   468  001C26  0E01               	movlw	1
   469  001C28  ECE3  F00A         	call	_sensorUpdate
   470                           
   471                           ;main.c: 49: setCorrection();
   472  001C2C  EC7A  F00C         	call	_setCorrection	;wreg free
   473                           
   474                           ;main.c: 50: INTCONbits.GIE = 1;
   475  001C30  8EF2               	bsf	intcon,7,c	;volatile
   476  001C32  D000               	goto	l2059
   477  001C34                     l2059:
   478                           
   479                           ;main.c: 52: {
   480                           ;main.c: 53: sensorUpdate(0);
   481  001C34  0E00               	movlw	0
   482  001C36  ECE3  F00A         	call	_sensorUpdate
   483  001C3A  D7FC               	goto	l2059
   484  001C3C  EF51  F000         	goto	start
   485  001C40                     __end_of_main:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           intcon	equ	0xFF2
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           
   495 ;; *************** function _setCorrection *****************
   496 ;; Defined at:
   497 ;;		line 125 in file "user.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  frontAvg        2   12[BANK0 ] int 
   502 ;;  sideAvg         2   10[BANK0 ] int 
   503 ;; Return value:  Size  Location     Type
   504 ;;		None               void
   505 ;; Registers used:
   506 ;;		wreg, status,2, status,0, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;Total ram usage:        6 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    5
   519 ;; This function calls:
   520 ;;		___awdiv
   521 ;; This function is called by:
   522 ;;		_main
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text1
   527  0018F4                     __ptext1:
   528                           	opt stack 0
   529  0018F4                     _setCorrection:
   530                           	opt stack 25
   531                           
   532                           ;user.c: 127: int sideAvg,frontAvg;
   533                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   534                           
   535                           ;incstack = 0
   536  0018F4  5009               	movf	_sensorValue,w,c
   537  0018F6  240B               	addwf	_sensorValue+2,w,c
   538  0018F8  0100               	movlb	0	; () banked
   539  0018FA  6F80               	movwf	___awdiv@dividend& (0+255),b
   540  0018FC  500A               	movf	_sensorValue+1,w,c
   541  0018FE  200C               	addwfc	_sensorValue+3,w,c
   542  001900  0100               	movlb	0	; () banked
   543  001902  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   544  001904  0E00               	movlw	0
   545  001906  0100               	movlb	0	; () banked
   546  001908  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   547  00190A  0E02               	movlw	2
   548  00190C  6F82               	movwf	___awdiv@divisor& (0+255),b
   549  00190E  ECE5  F00C         	call	___awdiv	;wreg free
   550  001912  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   551  001916  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   552                           
   553                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   554  00191A  500F               	movf	_sensorValue+6,w,c
   555  00191C  240D               	addwf	_sensorValue+4,w,c
   556  00191E  0100               	movlb	0	; () banked
   557  001920  6F80               	movwf	___awdiv@dividend& (0+255),b
   558  001922  5010               	movf	_sensorValue+7,w,c
   559  001924  200E               	addwfc	_sensorValue+5,w,c
   560  001926  0100               	movlb	0	; () banked
   561  001928  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   562  00192A  0E00               	movlw	0
   563  00192C  0100               	movlb	0	; () banked
   564  00192E  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   565  001930  0E02               	movlw	2
   566  001932  6F82               	movwf	___awdiv@divisor& (0+255),b
   567  001934  ECE5  F00C         	call	___awdiv	;wreg free
   568  001938  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   569  00193C  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   570                           
   571                           ;user.c: 131: sensorCorrection[0] = sensorValue[0] - sideAvg;
   572  001940  C08A  F088         	movff	setCorrection@sideAvg,??_setCorrection
   573  001944  C08B  F089         	movff	setCorrection@sideAvg+1,??_setCorrection+1
   574  001948  0100               	movlb	0	; () banked
   575  00194A  1F88               	comf	??_setCorrection& (0+255),f,b
   576  00194C  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   577  00194E  4B88               	infsnz	??_setCorrection& (0+255),f,b
   578  001950  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   579  001952  5009               	movf	_sensorValue,w,c
   580  001954  0100               	movlb	0	; () banked
   581  001956  2588               	addwf	??_setCorrection& (0+255),w,b
   582  001958  6E01               	movwf	_sensorCorrection,c
   583  00195A  500A               	movf	_sensorValue+1,w,c
   584  00195C  0100               	movlb	0	; () banked
   585  00195E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   586  001960  6E02               	movwf	_sensorCorrection+1,c
   587                           
   588                           ; BSR set to: 0
   589                           ;user.c: 132: sensorCorrection[1] = sensorValue[1] - sideAvg;
   590  001962  C08A  F088         	movff	setCorrection@sideAvg,??_setCorrection
   591  001966  C08B  F089         	movff	setCorrection@sideAvg+1,??_setCorrection+1
   592  00196A  0100               	movlb	0	; () banked
   593  00196C  1F88               	comf	??_setCorrection& (0+255),f,b
   594  00196E  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   595  001970  4B88               	infsnz	??_setCorrection& (0+255),f,b
   596  001972  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   597  001974  500B               	movf	_sensorValue+2,w,c
   598  001976  0100               	movlb	0	; () banked
   599  001978  2588               	addwf	??_setCorrection& (0+255),w,b
   600  00197A  6E03               	movwf	_sensorCorrection+2,c
   601  00197C  500C               	movf	_sensorValue+3,w,c
   602  00197E  0100               	movlb	0	; () banked
   603  001980  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   604  001982  6E04               	movwf	_sensorCorrection+3,c
   605                           
   606                           ; BSR set to: 0
   607                           ;user.c: 133: sensorCorrection[2] = sensorValue[2] - frontAvg;
   608  001984  C08C  F088         	movff	setCorrection@frontAvg,??_setCorrection
   609  001988  C08D  F089         	movff	setCorrection@frontAvg+1,??_setCorrection+1
   610  00198C  0100               	movlb	0	; () banked
   611  00198E  1F88               	comf	??_setCorrection& (0+255),f,b
   612  001990  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   613  001992  4B88               	infsnz	??_setCorrection& (0+255),f,b
   614  001994  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   615  001996  500D               	movf	_sensorValue+4,w,c
   616  001998  0100               	movlb	0	; () banked
   617  00199A  2588               	addwf	??_setCorrection& (0+255),w,b
   618  00199C  6E05               	movwf	_sensorCorrection+4,c
   619  00199E  500E               	movf	_sensorValue+5,w,c
   620  0019A0  0100               	movlb	0	; () banked
   621  0019A2  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   622  0019A4  6E06               	movwf	_sensorCorrection+5,c
   623                           
   624                           ; BSR set to: 0
   625                           ;user.c: 134: sensorCorrection[3] = sensorValue[3] - frontAvg;
   626  0019A6  C08C  F088         	movff	setCorrection@frontAvg,??_setCorrection
   627  0019AA  C08D  F089         	movff	setCorrection@frontAvg+1,??_setCorrection+1
   628  0019AE  0100               	movlb	0	; () banked
   629  0019B0  1F88               	comf	??_setCorrection& (0+255),f,b
   630  0019B2  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   631  0019B4  4B88               	infsnz	??_setCorrection& (0+255),f,b
   632  0019B6  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   633  0019B8  500F               	movf	_sensorValue+6,w,c
   634  0019BA  0100               	movlb	0	; () banked
   635  0019BC  2588               	addwf	??_setCorrection& (0+255),w,b
   636  0019BE  6E07               	movwf	_sensorCorrection+6,c
   637  0019C0  5010               	movf	_sensorValue+7,w,c
   638  0019C2  0100               	movlb	0	; () banked
   639  0019C4  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   640  0019C6  6E08               	movwf	_sensorCorrection+7,c
   641                           
   642                           ; BSR set to: 0
   643  0019C8  0012               	return		;funcret
   644  0019CA                     __end_of_setCorrection:
   645                           	opt stack 0
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           intcon	equ	0xFF2
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           
   654 ;; *************** function _sensorUpdate *****************
   655 ;; Defined at:
   656 ;;		line 161 in file "user.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  getCorrectio    1    wreg     unsigned char 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   661 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   662 ;;  j               2  115[BANK0 ] int 
   663 ;;  i               2  113[BANK0 ] int 
   664 ;; Return value:  Size  Location     Type
   665 ;;		None               void
   666 ;; Registers used:
   667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   674 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;Total ram usage:       91 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    6
   680 ;; This function calls:
   681 ;;		___wmul
   682 ;;		_sensorComputation
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text2
   689  0015C6                     __ptext2:
   690                           	opt stack 0
   691  0015C6                     _sensorUpdate:
   692                           	opt stack 24
   693                           
   694                           ; BSR set to: 0
   695                           ;incstack = 0
   696                           ;sensorUpdate@getCorrection stored from wreg
   697  0015C6  0100               	movlb	0	; () banked
   698  0015C8  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   699                           
   700                           ; BSR set to: 0
   701                           ;user.c: 163: int i,j;
   702                           ;user.c: 164: int sensorTemp[4][10];
   703                           ;user.c: 167: for(i = 0; i < 10; i++)
   704  0015CA  0E00               	movlw	0
   705  0015CC  0100               	movlb	0	; () banked
   706  0015CE  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   707  0015D0  0E00               	movlw	0
   708  0015D2  6FF1               	movwf	sensorUpdate@i& (0+255),b
   709  0015D4                     l2013:
   710                           
   711                           ; BSR set to: 0
   712  0015D4  0100               	movlb	0	; () banked
   713  0015D6  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   714  0015D8  D00A               	goto	l2017
   715  0015DA  0100               	movlb	0	; () banked
   716  0015DC  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   717  0015DE  E178               	bnz	l2037
   718  0015E0  0E0A               	movlw	10
   719  0015E2  0100               	movlb	0	; () banked
   720  0015E4  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   721  0015E6  B0D8               	btfsc	status,0,c
   722  0015E8  D073               	goto	l2037
   723  0015EA  D001               	goto	l2017
   724                           
   725                           ; BSR set to: 0
   726  0015EC  D071               	goto	l2037
   727  0015EE                     l2017:
   728                           
   729                           ; BSR set to: 0
   730                           ;user.c: 168: {
   731                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   732  0015EE  0E00               	movlw	0
   733  0015F0  0100               	movlb	0	; () banked
   734  0015F2  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   735  0015F4  0E00               	movlw	0
   736  0015F6  6FF3               	movwf	sensorUpdate@j& (0+255),b
   737  0015F8                     l2019:
   738                           
   739                           ; BSR set to: 0
   740  0015F8  0100               	movlb	0	; () banked
   741  0015FA  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   742  0015FC  D00A               	goto	l2023
   743  0015FE  0100               	movlb	0	; () banked
   744  001600  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   745  001602  E161               	bnz	l2033
   746  001604  0E04               	movlw	4
   747  001606  0100               	movlb	0	; () banked
   748  001608  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   749  00160A  B0D8               	btfsc	status,0,c
   750  00160C  D05C               	goto	l2033
   751  00160E  D001               	goto	l2023
   752                           
   753                           ; BSR set to: 0
   754  001610  D05A               	goto	l2033
   755  001612                     l2023:
   756                           
   757                           ; BSR set to: 0
   758                           ;user.c: 170: {
   759                           ;user.c: 171: ADCON0 = sensorLocation[j];
   760  001612  0E01               	movlw	low _sensorLocation
   761  001614  0100               	movlb	0	; () banked
   762  001616  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   763  001618  6EF6               	movwf	tblptrl,c
   764  00161A  0E10               	movlw	high _sensorLocation
   765  00161C  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   766  00161E  6EF7               	movwf	tblptrh,c
   767  001620                     	if	0	;There are less than 3 active tblptr bytes
   768  001620                     	endif
   769  001620  0008               	tblrd		*
   770  001622  CFF5 FFC2          	movff	tablat,4034	;volatile
   771                           
   772                           ; BSR set to: 0
   773                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   774  001626  82C2               	bsf	4034,1,c	;volatile
   775                           
   776                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   777  001628  D000               	goto	l314
   778  00162A                     l314:
   779                           
   780                           ; BSR set to: 0
   781  00162A  B2C2               	btfsc	4034,1,c	;volatile
   782  00162C  D7FE               	goto	l314
   783                           
   784                           ; BSR set to: 0
   785                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   786                           
   787                           ; BSR set to: 0
   788  00162E  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   789  001632  0E06               	movlw	6
   790  001634  0100               	movlb	0	; () banked
   791  001636  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   792  001638                     u1755:
   793  001638  0100               	movlb	0	; () banked
   794  00163A  90D8               	bcf	status,0,c
   795  00163C  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   796  00163E  0100               	movlb	0	; () banked
   797  001640  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   798  001642  D7FA               	goto	u1755
   799  001644  0100               	movlb	0	; () banked
   800  001646  519A               	movf	??_sensorUpdate& (0+255),w,b
   801  001648  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   802  00164C  0100               	movlb	0	; () banked
   803  00164E  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   804  001650  0100               	movlb	0	; () banked
   805  001652  90D8               	bcf	status,0,c
   806  001654  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   807  001656  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   808  001658  0100               	movlb	0	; () banked
   809  00165A  90D8               	bcf	status,0,c
   810  00165C  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   811  00165E  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   812  001660  0100               	movlb	0	; () banked
   813  001662  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   814  001664  0E00               	movlw	0
   815  001666  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   816  001668  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   817  00166C  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   818  001670  0E00               	movlw	0
   819  001672  0100               	movlb	0	; () banked
   820  001674  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   821  001676  0E14               	movlw	20
   822  001678  6F82               	movwf	___wmul@multiplicand& (0+255),b
   823  00167A  ECAB  F00D         	call	___wmul	;wreg free
   824  00167E  0EA0               	movlw	low sensorUpdate@sensorTemp
   825  001680  0100               	movlb	0	; () banked
   826  001682  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   827  001684  0E00               	movlw	high sensorUpdate@sensorTemp
   828  001686  0100               	movlb	0	; () banked
   829  001688  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   830  00168A  0100               	movlb	0	; () banked
   831  00168C  5180               	movf	?___wmul& (0+255),w,b
   832  00168E  0100               	movlb	0	; () banked
   833  001690  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   834  001692  0100               	movlb	0	; () banked
   835  001694  5181               	movf	(?___wmul+1)& (0+255),w,b
   836  001696  0100               	movlb	0	; () banked
   837  001698  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   838  00169A  90D8               	bcf	status,0,c
   839  00169C  0100               	movlb	0	; () banked
   840  00169E  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   841  0016A0  6ED9               	movwf	fsr2l,c
   842  0016A2  0100               	movlb	0	; () banked
   843  0016A4  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   844  0016A6  6EDA               	movwf	fsr2h,c
   845  0016A8  0100               	movlb	0	; () banked
   846  0016AA  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   847  0016AC  26D9               	addwf	fsr2l,f,c
   848  0016AE  0100               	movlb	0	; () banked
   849  0016B0  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   850  0016B2  22DA               	addwfc	fsr2h,f,c
   851  0016B4  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   852  0016B8  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   853                           
   854                           ; BSR set to: 0
   855  0016BC  0100               	movlb	0	; () banked
   856  0016BE  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   857  0016C0  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   858  0016C2  D79A               	goto	l2019
   859                           
   860                           ; BSR set to: 0
   861  0016C4  D000               	goto	l2033
   862  0016C6                     l2033:
   863                           
   864                           ; BSR set to: 0
   865  0016C6  0100               	movlb	0	; () banked
   866  0016C8  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   867  0016CA  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   868  0016CC  D783               	goto	l2013
   869                           
   870                           ; BSR set to: 0
   871  0016CE  D000               	goto	l2037
   872  0016D0                     l2037:
   873                           
   874                           ; BSR set to: 0
   875                           ;user.c: 176: }
   876                           ;user.c: 177: }
   877                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   878  0016D0  0EA0               	movlw	low sensorUpdate@sensorTemp
   879  0016D2  0100               	movlb	0	; () banked
   880  0016D4  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   881  0016D6  0E00               	movlw	high sensorUpdate@sensorTemp
   882  0016D8  0100               	movlb	0	; () banked
   883  0016DA  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   884  0016DC  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   885  0016E0  EC81  F009         	call	_sensorComputation	;wreg free
   886  0016E4  0012               	return		;funcret
   887  0016E6                     __end_of_sensorUpdate:
   888                           	opt stack 0
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           intcon	equ	0xFF2
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           postinc2	equ	0xFDE
   897                           postdec2	equ	0xFDD
   898                           fsr2h	equ	0xFDA
   899                           fsr2l	equ	0xFD9
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _sensorComputation *****************
   903 ;; Defined at:
   904 ;;		line 137 in file "user.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   907 ;;		 -> sensorUpdate@sensorTemp(80), 
   908 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  i               2   24[BANK0 ] int 
   911 ;;  j               2   22[BANK0 ] int 
   912 ;;  sum             2   20[BANK0 ] int 
   913 ;;  min             2   18[BANK0 ] int 
   914 ;;  max             2   16[BANK0 ] int 
   915 ;; Return value:  Size  Location     Type
   916 ;;		None               void
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   924 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;Total ram usage:       15 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    5
   931 ;; This function calls:
   932 ;;		_MAX
   933 ;;		_MIN
   934 ;;		___awdiv
   935 ;;		___wmul
   936 ;; This function is called by:
   937 ;;		_sensorUpdate
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text3
   942  001302                     __ptext3:
   943                           	opt stack 0
   944  001302                     _sensorComputation:
   945                           	opt stack 24
   946                           
   947                           ;user.c: 139: int max,min,i,j,sum;
   948                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   949                           
   950                           ;incstack = 0
   951  001302  0E00               	movlw	0
   952  001304  0100               	movlb	0	; () banked
   953  001306  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   954  001308  0E00               	movlw	0
   955  00130A  6F98               	movwf	sensorComputation@i& (0+255),b
   956                           
   957                           ; BSR set to: 0
   958  00130C  0100               	movlb	0	; () banked
   959  00130E  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   960  001310  D00A               	goto	l1965
   961  001312  0100               	movlb	0	; () banked
   962  001314  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   963  001316  E106               	bnz	u1660
   964  001318  0E04               	movlw	4
   965  00131A  0100               	movlb	0	; () banked
   966  00131C  5D98               	subwf	sensorComputation@i& (0+255),w,b
   967  00131E  B0D8               	btfsc	status,0,c
   968  001320  D151               	goto	l307
   969  001322  D001               	goto	l1965
   970  001324                     u1660:
   971                           
   972                           ; BSR set to: 0
   973  001324  D14F               	goto	l307
   974  001326                     l1965:
   975                           
   976                           ; BSR set to: 0
   977                           ;user.c: 141: {
   978                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
   979  001326  0E00               	movlw	0
   980  001328  0100               	movlb	0	; () banked
   981  00132A  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
   982  00132C  0E00               	movlw	0
   983  00132E  6F96               	movwf	sensorComputation@j& (0+255),b
   984                           
   985                           ; BSR set to: 0
   986  001330  0100               	movlb	0	; () banked
   987  001332  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   988  001334  D00A               	goto	l1971
   989  001336  0100               	movlb	0	; () banked
   990  001338  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
   991  00133A  E106               	bnz	u1670
   992  00133C  0E0A               	movlw	10
   993  00133E  0100               	movlb	0	; () banked
   994  001340  5D96               	subwf	sensorComputation@j& (0+255),w,b
   995  001342  B0D8               	btfsc	status,0,c
   996  001344  D0D3               	goto	l1981
   997  001346  D001               	goto	l1971
   998  001348                     u1670:
   999                           
  1000                           ; BSR set to: 0
  1001  001348  D0D1               	goto	l1981
  1002  00134A                     l1971:
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;user.c: 143: {
  1006                           ;user.c: 144: if(j == 0)
  1007  00134A  0100               	movlb	0	; () banked
  1008  00134C  5196               	movf	sensorComputation@j& (0+255),w,b
  1009  00134E  0100               	movlb	0	; () banked
  1010  001350  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1011  001352  A4D8               	btfss	status,2,c
  1012  001354  D031               	goto	l1975
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;user.c: 145: {
  1016                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1017  001356  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1018  00135A  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1019  00135E  0E00               	movlw	0
  1020  001360  0100               	movlb	0	; () banked
  1021  001362  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1022  001364  0E14               	movlw	20
  1023  001366  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1024  001368  ECAB  F00D         	call	___wmul	;wreg free
  1025  00136C  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1026  001370  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1027  001374  0100               	movlb	0	; () banked
  1028  001376  5180               	movf	?___wmul& (0+255),w,b
  1029  001378  0100               	movlb	0	; () banked
  1030  00137A  278E               	addwf	??_sensorComputation& (0+255),f,b
  1031  00137C  0100               	movlb	0	; () banked
  1032  00137E  5181               	movf	(?___wmul+1)& (0+255),w,b
  1033  001380  0100               	movlb	0	; () banked
  1034  001382  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1035  001384  90D8               	bcf	status,0,c
  1036  001386  0100               	movlb	0	; () banked
  1037  001388  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1038  00138A  6ED9               	movwf	fsr2l,c
  1039  00138C  0100               	movlb	0	; () banked
  1040  00138E  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1041  001390  6EDA               	movwf	fsr2h,c
  1042  001392  0100               	movlb	0	; () banked
  1043  001394  518E               	movf	??_sensorComputation& (0+255),w,b
  1044  001396  26D9               	addwf	fsr2l,f,c
  1045  001398  0100               	movlb	0	; () banked
  1046  00139A  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1047  00139C  22DA               	addwfc	fsr2h,f,c
  1048  00139E  CFDE F090          	movff	postinc2,sensorComputation@max
  1049  0013A2  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1050  0013A6  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1051  0013AA  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1052  0013AE  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1053  0013B2  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1054                           
  1055                           ;user.c: 147: continue;
  1056  0013B6  D08F               	goto	l1977
  1057  0013B8                     l1975:
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;user.c: 148: }
  1061                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1062  0013B8  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1063  0013BC  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1064  0013C0  0E00               	movlw	0
  1065  0013C2  0100               	movlb	0	; () banked
  1066  0013C4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1067  0013C6  0E14               	movlw	20
  1068  0013C8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1069  0013CA  ECAB  F00D         	call	___wmul	;wreg free
  1070  0013CE  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1071  0013D2  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1072  0013D6  0100               	movlb	0	; () banked
  1073  0013D8  5180               	movf	?___wmul& (0+255),w,b
  1074  0013DA  0100               	movlb	0	; () banked
  1075  0013DC  278E               	addwf	??_sensorComputation& (0+255),f,b
  1076  0013DE  0100               	movlb	0	; () banked
  1077  0013E0  5181               	movf	(?___wmul+1)& (0+255),w,b
  1078  0013E2  0100               	movlb	0	; () banked
  1079  0013E4  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1080  0013E6  90D8               	bcf	status,0,c
  1081  0013E8  0100               	movlb	0	; () banked
  1082  0013EA  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1083  0013EC  6ED9               	movwf	fsr2l,c
  1084  0013EE  0100               	movlb	0	; () banked
  1085  0013F0  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1086  0013F2  6EDA               	movwf	fsr2h,c
  1087  0013F4  0100               	movlb	0	; () banked
  1088  0013F6  518E               	movf	??_sensorComputation& (0+255),w,b
  1089  0013F8  26D9               	addwf	fsr2l,f,c
  1090  0013FA  0100               	movlb	0	; () banked
  1091  0013FC  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1092  0013FE  22DA               	addwfc	fsr2h,f,c
  1093  001400  CFDE F086          	movff	postinc2,MIN@a
  1094  001404  CFDD F087          	movff	postdec2,MIN@a+1
  1095  001408  C092  F088         	movff	sensorComputation@min,MIN@b
  1096  00140C  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1097  001410  ECC7  F00D         	call	_MIN	;wreg free
  1098  001414  C086  F092         	movff	?_MIN,sensorComputation@min
  1099  001418  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1100                           
  1101                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1102  00141C  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1103  001420  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1104  001424  0E00               	movlw	0
  1105  001426  0100               	movlb	0	; () banked
  1106  001428  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1107  00142A  0E14               	movlw	20
  1108  00142C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1109  00142E  ECAB  F00D         	call	___wmul	;wreg free
  1110  001432  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1111  001436  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1112  00143A  0100               	movlb	0	; () banked
  1113  00143C  5180               	movf	?___wmul& (0+255),w,b
  1114  00143E  0100               	movlb	0	; () banked
  1115  001440  278E               	addwf	??_sensorComputation& (0+255),f,b
  1116  001442  0100               	movlb	0	; () banked
  1117  001444  5181               	movf	(?___wmul+1)& (0+255),w,b
  1118  001446  0100               	movlb	0	; () banked
  1119  001448  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1120  00144A  90D8               	bcf	status,0,c
  1121  00144C  0100               	movlb	0	; () banked
  1122  00144E  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1123  001450  6ED9               	movwf	fsr2l,c
  1124  001452  0100               	movlb	0	; () banked
  1125  001454  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1126  001456  6EDA               	movwf	fsr2h,c
  1127  001458  0100               	movlb	0	; () banked
  1128  00145A  518E               	movf	??_sensorComputation& (0+255),w,b
  1129  00145C  26D9               	addwf	fsr2l,f,c
  1130  00145E  0100               	movlb	0	; () banked
  1131  001460  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1132  001462  22DA               	addwfc	fsr2h,f,c
  1133  001464  CFDE F086          	movff	postinc2,MAX@a
  1134  001468  CFDD F087          	movff	postdec2,MAX@a+1
  1135  00146C  C090  F088         	movff	sensorComputation@max,MAX@b
  1136  001470  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1137  001474  ECE1  F00D         	call	_MAX	;wreg free
  1138  001478  C086  F090         	movff	?_MAX,sensorComputation@max
  1139  00147C  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1140                           
  1141                           ;user.c: 151: sum += sensorTemp[i][j];
  1142  001480  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1143  001484  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1144  001488  0E00               	movlw	0
  1145  00148A  0100               	movlb	0	; () banked
  1146  00148C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1147  00148E  0E14               	movlw	20
  1148  001490  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1149  001492  ECAB  F00D         	call	___wmul	;wreg free
  1150  001496  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1151  00149A  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1152  00149E  0100               	movlb	0	; () banked
  1153  0014A0  5180               	movf	?___wmul& (0+255),w,b
  1154  0014A2  0100               	movlb	0	; () banked
  1155  0014A4  278E               	addwf	??_sensorComputation& (0+255),f,b
  1156  0014A6  0100               	movlb	0	; () banked
  1157  0014A8  5181               	movf	(?___wmul+1)& (0+255),w,b
  1158  0014AA  0100               	movlb	0	; () banked
  1159  0014AC  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1160  0014AE  90D8               	bcf	status,0,c
  1161  0014B0  0100               	movlb	0	; () banked
  1162  0014B2  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1163  0014B4  6ED9               	movwf	fsr2l,c
  1164  0014B6  0100               	movlb	0	; () banked
  1165  0014B8  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1166  0014BA  6EDA               	movwf	fsr2h,c
  1167  0014BC  0100               	movlb	0	; () banked
  1168  0014BE  518E               	movf	??_sensorComputation& (0+255),w,b
  1169  0014C0  26D9               	addwf	fsr2l,f,c
  1170  0014C2  0100               	movlb	0	; () banked
  1171  0014C4  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1172  0014C6  22DA               	addwfc	fsr2h,f,c
  1173  0014C8  50DE               	movf	postinc2,w,c
  1174  0014CA  0100               	movlb	0	; () banked
  1175  0014CC  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1176  0014CE  50DD               	movf	postdec2,w,c
  1177  0014D0  0100               	movlb	0	; () banked
  1178  0014D2  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1179  0014D4  D000               	goto	l1977
  1180  0014D6                     l1977:
  1181                           
  1182                           ; BSR set to: 0
  1183  0014D6  0100               	movlb	0	; () banked
  1184  0014D8  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1185  0014DA  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1186                           
  1187                           ; BSR set to: 0
  1188  0014DC  0100               	movlb	0	; () banked
  1189  0014DE  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1190  0014E0  D734               	goto	l1971
  1191  0014E2  0100               	movlb	0	; () banked
  1192  0014E4  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1193  0014E6  E102               	bnz	l1981
  1194  0014E8  D729               	goto	L2
  1195  0014EA  D000               	goto	l1981
  1196  0014EC                     l1981:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;user.c: 152: }
  1200                           ;user.c: 153: sum = sum - min - max;
  1201  0014EC  0100               	movlb	0	; () banked
  1202  0014EE  5190               	movf	sensorComputation@max& (0+255),w,b
  1203  0014F0  0100               	movlb	0	; () banked
  1204  0014F2  2592               	addwf	sensorComputation@min& (0+255),w,b
  1205  0014F4  0100               	movlb	0	; () banked
  1206  0014F6  6F8E               	movwf	??_sensorComputation& (0+255),b
  1207  0014F8  0100               	movlb	0	; () banked
  1208  0014FA  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1209  0014FC  0100               	movlb	0	; () banked
  1210  0014FE  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1211  001500  0100               	movlb	0	; () banked
  1212  001502  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1213  001504  0100               	movlb	0	; () banked
  1214  001506  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1215  001508  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1216  00150A  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1217  00150C  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1218  00150E  0100               	movlb	0	; () banked
  1219  001510  5194               	movf	sensorComputation@sum& (0+255),w,b
  1220  001512  0100               	movlb	0	; () banked
  1221  001514  258E               	addwf	??_sensorComputation& (0+255),w,b
  1222  001516  0100               	movlb	0	; () banked
  1223  001518  6F94               	movwf	sensorComputation@sum& (0+255),b
  1224  00151A  0100               	movlb	0	; () banked
  1225  00151C  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1226  00151E  0100               	movlb	0	; () banked
  1227  001520  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1228  001522  0100               	movlb	0	; () banked
  1229  001524  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1230                           
  1231                           ;user.c: 154: if(getCorrection != 1)
  1232  001526  0100               	movlb	0	; () banked
  1233  001528  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1234  00152A  B4D8               	btfsc	status,2,c
  1235  00152C  D00C               	goto	l1985
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1239  00152E  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1240  001532  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1241  001536  0E00               	movlw	0
  1242  001538  0100               	movlb	0	; () banked
  1243  00153A  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1244  00153C  0E08               	movlw	8
  1245  00153E  6F82               	movwf	___awdiv@divisor& (0+255),b
  1246  001540  ECE5  F00C         	call	___awdiv	;wreg free
  1247  001544  D022               	goto	L3
  1248  001546                     l1985:
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;user.c: 156: else
  1252                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1253  001546  90D8               	bcf	status,0,c
  1254  001548  0100               	movlb	0	; () banked
  1255  00154A  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1256  00154C  6ED9               	movwf	fsr2l,c
  1257  00154E  0100               	movlb	0	; () banked
  1258  001550  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1259  001552  6EDA               	movwf	fsr2h,c
  1260  001554  0E01               	movlw	low _sensorCorrection
  1261  001556  26D9               	addwf	fsr2l,f,c
  1262  001558  0E00               	movlw	high _sensorCorrection
  1263  00155A  22DA               	addwfc	fsr2h,f,c
  1264  00155C  CFDE F08E          	movff	postinc2,??_sensorComputation
  1265  001560  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1266  001564  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1267  001568  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1268  00156C  0E00               	movlw	0
  1269  00156E  0100               	movlb	0	; () banked
  1270  001570  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1271  001572  0E08               	movlw	8
  1272  001574  6F82               	movwf	___awdiv@divisor& (0+255),b
  1273  001576  ECE5  F00C         	call	___awdiv	;wreg free
  1274  00157A  0100               	movlb	0	; () banked
  1275  00157C  518E               	movf	??_sensorComputation& (0+255),w,b
  1276  00157E  0100               	movlb	0	; () banked
  1277  001580  2780               	addwf	?___awdiv& (0+255),f,b
  1278  001582  0100               	movlb	0	; () banked
  1279  001584  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1280  001586  0100               	movlb	0	; () banked
  1281  001588  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1282  00158A                     L3:
  1283  00158A  90D8               	bcf	status,0,c
  1284  00158C  0100               	movlb	0	; () banked
  1285  00158E  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1286  001590  6ED9               	movwf	fsr2l,c
  1287  001592  0100               	movlb	0	; () banked
  1288  001594  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1289  001596  6EDA               	movwf	fsr2h,c
  1290  001598  0E09               	movlw	low _sensorValue
  1291  00159A  26D9               	addwf	fsr2l,f,c
  1292  00159C  0E00               	movlw	high _sensorValue
  1293  00159E  22DA               	addwfc	fsr2h,f,c
  1294  0015A0  0100               	movlb	0	; () banked
  1295  0015A2  C080  FFDE         	movff	?___awdiv,postinc2
  1296  0015A6  0100               	movlb	0	; () banked
  1297  0015A8  C081  FFDD         	movff	?___awdiv+1,postdec2
  1298  0015AC  D000               	goto	l1987
  1299  0015AE                     l1987:
  1300                           
  1301                           ; BSR set to: 0
  1302  0015AE  0100               	movlb	0	; () banked
  1303  0015B0  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1304  0015B2  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1305                           
  1306                           ; BSR set to: 0
  1307  0015B4  0100               	movlb	0	; () banked
  1308  0015B6  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1309  0015B8  D6B6               	goto	l1965
  1310  0015BA  0100               	movlb	0	; () banked
  1311  0015BC  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1312  0015BE  E102               	bnz	l307
  1313  0015C0  D6AB               	goto	L4
  1314  0015C2  D000               	goto	l307
  1315  0015C4                     l307:
  1316                           
  1317                           ; BSR set to: 0
  1318  0015C4  0012               	return		;funcret
  1319  0015C6                     __end_of_sensorComputation:
  1320                           	opt stack 0
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           intcon	equ	0xFF2
  1326                           postinc0	equ	0xFEE
  1327                           wreg	equ	0xFE8
  1328                           postinc2	equ	0xFDE
  1329                           postdec2	equ	0xFDD
  1330                           fsr2h	equ	0xFDA
  1331                           fsr2l	equ	0xFD9
  1332                           status	equ	0xFD8
  1333                           
  1334 ;; *************** function ___wmul *****************
  1335 ;; Defined at:
  1336 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1339 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  product         2    4[BANK0 ] unsigned int 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  2    0[BANK0 ] unsigned int 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2, status,0, prodl, prodh
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1351 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;Total ram usage:        6 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    4
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_sensorComputation
  1362 ;;		_sensorUpdate
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text4
  1367  001B56                     __ptext4:
  1368                           	opt stack 0
  1369  001B56                     ___wmul:
  1370                           	opt stack 24
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;incstack = 0
  1374  001B56  0100               	movlb	0	; () banked
  1375  001B58  5180               	movf	___wmul@multiplier& (0+255),w,b
  1376  001B5A  0100               	movlb	0	; () banked
  1377  001B5C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1378  001B5E  CFF3 F084          	movff	prodl,___wmul@product
  1379  001B62  CFF4 F085          	movff	prodh,___wmul@product+1
  1380  001B66  0100               	movlb	0	; () banked
  1381  001B68  5180               	movf	___wmul@multiplier& (0+255),w,b
  1382  001B6A  0100               	movlb	0	; () banked
  1383  001B6C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1384  001B6E  50F3               	movf	prodl,w,c
  1385  001B70  0100               	movlb	0	; () banked
  1386  001B72  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1387  001B74  0100               	movlb	0	; () banked
  1388  001B76  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1389  001B78  0100               	movlb	0	; () banked
  1390  001B7A  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1391  001B7C  50F3               	movf	prodl,w,c
  1392  001B7E  0100               	movlb	0	; () banked
  1393  001B80  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1394                           
  1395                           ; BSR set to: 0
  1396  001B82  C084  F080         	movff	___wmul@product,?___wmul
  1397  001B86  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1398  001B8A  D000               	goto	l328
  1399  001B8C                     l328:
  1400                           
  1401                           ; BSR set to: 0
  1402  001B8C  0012               	return		;funcret
  1403  001B8E                     __end_of___wmul:
  1404                           	opt stack 0
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           prodh	equ	0xFF4
  1410                           prodl	equ	0xFF3
  1411                           intcon	equ	0xFF2
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           postinc2	equ	0xFDE
  1415                           postdec2	equ	0xFDD
  1416                           fsr2h	equ	0xFDA
  1417                           fsr2l	equ	0xFD9
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function ___awdiv *****************
  1421 ;; Defined at:
  1422 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  dividend        2    0[BANK0 ] int 
  1425 ;;  divisor         2    2[BANK0 ] int 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  quotient        2    6[BANK0 ] int 
  1428 ;;  sign            1    5[BANK0 ] unsigned char 
  1429 ;;  counter         1    4[BANK0 ] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  2    0[BANK0 ] int 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        8 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    4
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_setCorrection
  1450 ;;		_sensorComputation
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text5
  1455  0019CA                     __ptext5:
  1456                           	opt stack 0
  1457  0019CA                     ___awdiv:
  1458                           	opt stack 25
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;incstack = 0
  1462  0019CA  0E00               	movlw	0
  1463  0019CC  0100               	movlb	0	; () banked
  1464  0019CE  6F85               	movwf	___awdiv@sign& (0+255),b
  1465                           
  1466                           ; BSR set to: 0
  1467  0019D0  0100               	movlb	0	; () banked
  1468  0019D2  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1469  0019D4  D009               	goto	l1907
  1470                           
  1471                           ; BSR set to: 0
  1472  0019D6  0100               	movlb	0	; () banked
  1473  0019D8  6D82               	negf	___awdiv@divisor& (0+255),b
  1474  0019DA  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1475  0019DC  B0D8               	btfsc	status,0,c
  1476  0019DE  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1477                           
  1478                           ; BSR set to: 0
  1479  0019E0  0E01               	movlw	1
  1480  0019E2  0100               	movlb	0	; () banked
  1481  0019E4  6F85               	movwf	___awdiv@sign& (0+255),b
  1482  0019E6  D000               	goto	l1907
  1483  0019E8                     l1907:
  1484                           
  1485                           ; BSR set to: 0
  1486  0019E8  0100               	movlb	0	; () banked
  1487  0019EA  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1488  0019EC  D009               	goto	l1913
  1489                           
  1490                           ; BSR set to: 0
  1491  0019EE  0100               	movlb	0	; () banked
  1492  0019F0  6D80               	negf	___awdiv@dividend& (0+255),b
  1493  0019F2  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1494  0019F4  B0D8               	btfsc	status,0,c
  1495  0019F6  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1496                           
  1497                           ; BSR set to: 0
  1498  0019F8  0E01               	movlw	1
  1499  0019FA  0100               	movlb	0	; () banked
  1500  0019FC  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1501  0019FE  D000               	goto	l1913
  1502  001A00                     l1913:
  1503                           
  1504                           ; BSR set to: 0
  1505  001A00  0E00               	movlw	0
  1506  001A02  0100               	movlb	0	; () banked
  1507  001A04  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1508  001A06  0E00               	movlw	0
  1509  001A08  6F86               	movwf	___awdiv@quotient& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512  001A0A  0100               	movlb	0	; () banked
  1513  001A0C  5182               	movf	___awdiv@divisor& (0+255),w,b
  1514  001A0E  0100               	movlb	0	; () banked
  1515  001A10  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1516  001A12  B4D8               	btfsc	status,2,c
  1517  001A14  D031               	goto	l1935
  1518                           
  1519                           ; BSR set to: 0
  1520  001A16  0E01               	movlw	1
  1521  001A18  0100               	movlb	0	; () banked
  1522  001A1A  6F84               	movwf	___awdiv@counter& (0+255),b
  1523  001A1C  D007               	goto	l1921
  1524  001A1E                     l1919:
  1525                           
  1526                           ; BSR set to: 0
  1527  001A1E  0100               	movlb	0	; () banked
  1528  001A20  90D8               	bcf	status,0,c
  1529  001A22  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1530  001A24  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1531  001A26  0100               	movlb	0	; () banked
  1532  001A28  2B84               	incf	___awdiv@counter& (0+255),f,b
  1533  001A2A  D000               	goto	l1921
  1534  001A2C                     l1921:
  1535                           
  1536                           ; BSR set to: 0
  1537  001A2C  0100               	movlb	0	; () banked
  1538  001A2E  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1539  001A30  D002               	goto	l1923
  1540  001A32  D7F5               	goto	l1919
  1541                           
  1542                           ; BSR set to: 0
  1543  001A34  D000               	goto	l1923
  1544  001A36                     l1923:
  1545                           
  1546                           ; BSR set to: 0
  1547  001A36  0100               	movlb	0	; () banked
  1548  001A38  90D8               	bcf	status,0,c
  1549  001A3A  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1550  001A3C  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1551                           
  1552                           ; BSR set to: 0
  1553  001A3E  0100               	movlb	0	; () banked
  1554  001A40  5182               	movf	___awdiv@divisor& (0+255),w,b
  1555  001A42  0100               	movlb	0	; () banked
  1556  001A44  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1557  001A46  0100               	movlb	0	; () banked
  1558  001A48  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1559  001A4A  0100               	movlb	0	; () banked
  1560  001A4C  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1561  001A4E  A0D8               	btfss	status,0,c
  1562  001A50  D00B               	goto	l1931
  1563                           
  1564                           ; BSR set to: 0
  1565  001A52  0100               	movlb	0	; () banked
  1566  001A54  5182               	movf	___awdiv@divisor& (0+255),w,b
  1567  001A56  0100               	movlb	0	; () banked
  1568  001A58  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1569  001A5A  0100               	movlb	0	; () banked
  1570  001A5C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1571  001A5E  0100               	movlb	0	; () banked
  1572  001A60  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1573                           
  1574                           ; BSR set to: 0
  1575  001A62  0100               	movlb	0	; () banked
  1576  001A64  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1577  001A66  D000               	goto	l1931
  1578  001A68                     l1931:
  1579                           
  1580                           ; BSR set to: 0
  1581  001A68  0100               	movlb	0	; () banked
  1582  001A6A  90D8               	bcf	status,0,c
  1583  001A6C  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1584  001A6E  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1585                           
  1586                           ; BSR set to: 0
  1587  001A70  0100               	movlb	0	; () banked
  1588  001A72  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1589  001A74  D7E0               	goto	l1923
  1590                           
  1591                           ; BSR set to: 0
  1592  001A76  D000               	goto	l1935
  1593  001A78                     l1935:
  1594                           
  1595                           ; BSR set to: 0
  1596  001A78  0100               	movlb	0	; () banked
  1597  001A7A  5185               	movf	___awdiv@sign& (0+255),w,b
  1598  001A7C  0100               	movlb	0	; () banked
  1599  001A7E  B4D8               	btfsc	status,2,c
  1600  001A80  D006               	goto	l1939
  1601                           
  1602                           ; BSR set to: 0
  1603  001A82  0100               	movlb	0	; () banked
  1604  001A84  6D86               	negf	___awdiv@quotient& (0+255),b
  1605  001A86  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1606  001A88  B0D8               	btfsc	status,0,c
  1607  001A8A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1608  001A8C  D000               	goto	l1939
  1609  001A8E                     l1939:
  1610                           
  1611                           ; BSR set to: 0
  1612  001A8E  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1613  001A92  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1614  001A96  D000               	goto	l521
  1615  001A98                     l521:
  1616                           
  1617                           ; BSR set to: 0
  1618  001A98  0012               	return		;funcret
  1619  001A9A                     __end_of___awdiv:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           prodh	equ	0xFF4
  1626                           prodl	equ	0xFF3
  1627                           intcon	equ	0xFF2
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postinc2	equ	0xFDE
  1631                           postdec2	equ	0xFDD
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _MIN *****************
  1637 ;; Defined at:
  1638 ;;		line 184 in file "user.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  a               2    6[BANK0 ] int 
  1641 ;;  b               2    8[BANK0 ] int 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  2    6[BANK0 ] int 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        5 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    4
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_sensorComputation
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text6
  1668  001B8E                     __ptext6:
  1669                           	opt stack 0
  1670  001B8E                     _MIN:
  1671                           	opt stack 24
  1672                           
  1673                           ;user.c: 186: if(a>b) return b;
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;incstack = 0
  1677  001B8E  0100               	movlb	0	; () banked
  1678  001B90  5186               	movf	MIN@a& (0+255),w,b
  1679  001B92  0100               	movlb	0	; () banked
  1680  001B94  5D88               	subwf	MIN@b& (0+255),w,b
  1681  001B96  0100               	movlb	0	; () banked
  1682  001B98  5189               	movf	(MIN@b+1)& (0+255),w,b
  1683  001B9A  0A80               	xorlw	128
  1684  001B9C  0100               	movlb	0	; () banked
  1685  001B9E  6F8A               	movwf	??_MIN& (0+255),b
  1686  001BA0  0100               	movlb	0	; () banked
  1687  001BA2  5187               	movf	(MIN@a+1)& (0+255),w,b
  1688  001BA4  0A80               	xorlw	128
  1689  001BA6  0100               	movlb	0	; () banked
  1690  001BA8  598A               	subwfb	??_MIN& (0+255),w,b
  1691  001BAA  B0D8               	btfsc	status,0,c
  1692  001BAC  D005               	goto	l320
  1693                           
  1694                           ; BSR set to: 0
  1695  001BAE  C088  F086         	movff	MIN@b,?_MIN
  1696  001BB2  C089  F087         	movff	MIN@b+1,?_MIN+1
  1697  001BB6  D004               	goto	l321
  1698  001BB8                     l320:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;user.c: 187: return a;
  1702  001BB8  C086  F086         	movff	MIN@a,?_MIN
  1703  001BBC  C087  F087         	movff	MIN@a+1,?_MIN+1
  1704  001BC0                     l321:
  1705                           
  1706                           ; BSR set to: 0
  1707  001BC0  0012               	return		;funcret
  1708  001BC2                     __end_of_MIN:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           intcon	equ	0xFF2
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _MAX *****************
  1726 ;; Defined at:
  1727 ;;		line 190 in file "user.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  a               2    6[BANK0 ] int 
  1730 ;;  b               2    8[BANK0 ] int 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  2    6[BANK0 ] int 
  1735 ;; Registers used:
  1736 ;;		wreg, status,2, status,0
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;Total ram usage:        5 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    4
  1749 ;; This function calls:
  1750 ;;		Nothing
  1751 ;; This function is called by:
  1752 ;;		_sensorComputation
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text7
  1757  001BC2                     __ptext7:
  1758                           	opt stack 0
  1759  001BC2                     _MAX:
  1760                           	opt stack 24
  1761                           
  1762                           ;user.c: 192: if(a>b) return a;
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;incstack = 0
  1766  001BC2  0100               	movlb	0	; () banked
  1767  001BC4  5186               	movf	MAX@a& (0+255),w,b
  1768  001BC6  0100               	movlb	0	; () banked
  1769  001BC8  5D88               	subwf	MAX@b& (0+255),w,b
  1770  001BCA  0100               	movlb	0	; () banked
  1771  001BCC  5189               	movf	(MAX@b+1)& (0+255),w,b
  1772  001BCE  0A80               	xorlw	128
  1773  001BD0  0100               	movlb	0	; () banked
  1774  001BD2  6F8A               	movwf	??_MAX& (0+255),b
  1775  001BD4  0100               	movlb	0	; () banked
  1776  001BD6  5187               	movf	(MAX@a+1)& (0+255),w,b
  1777  001BD8  0A80               	xorlw	128
  1778  001BDA  0100               	movlb	0	; () banked
  1779  001BDC  598A               	subwfb	??_MAX& (0+255),w,b
  1780  001BDE  B0D8               	btfsc	status,0,c
  1781  001BE0  D005               	goto	l324
  1782                           
  1783                           ; BSR set to: 0
  1784  001BE2  C086  F086         	movff	MAX@a,?_MAX
  1785  001BE6  C087  F087         	movff	MAX@a+1,?_MAX+1
  1786  001BEA  D004               	goto	l325
  1787  001BEC                     l324:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;user.c: 193: return b;
  1791  001BEC  C088  F086         	movff	MAX@b,?_MAX
  1792  001BF0  C089  F087         	movff	MAX@b+1,?_MAX+1
  1793  001BF4                     l325:
  1794                           
  1795                           ; BSR set to: 0
  1796  001BF4  0012               	return		;funcret
  1797  001BF6                     __end_of_MAX:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postinc2	equ	0xFDE
  1809                           postdec2	equ	0xFDD
  1810                           fsr2h	equ	0xFDA
  1811                           fsr2l	equ	0xFD9
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _InitApp *****************
  1815 ;; Defined at:
  1816 ;;		line 35 in file "user.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;		None               void
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    5
  1837 ;; This function calls:
  1838 ;;		_AlgorithmSelection
  1839 ;;		_delay
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text8
  1846  001ADE                     __ptext8:
  1847                           	opt stack 0
  1848  001ADE                     _InitApp:
  1849                           	opt stack 25
  1850                           
  1851                           ;user.c: 39: TRISC = 0;
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;incstack = 0
  1855  001ADE  0E00               	movlw	0
  1856  001AE0  6E94               	movwf	3988,c	;volatile
  1857                           
  1858                           ;user.c: 43: TRISEbits.TRISE1=1;
  1859  001AE2  8296               	bsf	3990,1,c	;volatile
  1860                           
  1861                           ;user.c: 45: TRISEbits.TRISE2=1;
  1862  001AE4  8496               	bsf	3990,2,c	;volatile
  1863                           
  1864                           ;user.c: 47: TRISBbits.RB1=1;
  1865  001AE6  8293               	bsf	3987,1,c	;volatile
  1866                           
  1867                           ;user.c: 49: TRISBbits.RB0=1;
  1868  001AE8  8093               	bsf	3987,0,c	;volatile
  1869                           
  1870                           ;user.c: 52: TRISBbits.RB3=1;
  1871  001AEA  8693               	bsf	3987,3,c	;volatile
  1872                           
  1873                           ;user.c: 54: TRISBbits.RB2=1;
  1874  001AEC  8493               	bsf	3987,2,c	;volatile
  1875                           
  1876                           ;user.c: 58: ADCON1 =0b00000001;
  1877  001AEE  0E01               	movlw	1
  1878  001AF0  6EC1               	movwf	4033,c	;volatile
  1879                           
  1880                           ;user.c: 63: ADCON2=0b00001010;
  1881  001AF2  0E0A               	movlw	10
  1882  001AF4  6EC0               	movwf	4032,c	;volatile
  1883                           
  1884                           ;user.c: 68: ADCON0=0b00101011;
  1885  001AF6  0E2B               	movlw	43
  1886  001AF8  6EC2               	movwf	4034,c	;volatile
  1887                           
  1888                           ;user.c: 77: T0CON = 0b11000100;
  1889  001AFA  0EC4               	movlw	196
  1890  001AFC  6ED5               	movwf	4053,c	;volatile
  1891                           
  1892                           ;user.c: 85: INTCON2 = 0b11110100;
  1893  001AFE  0EF4               	movlw	244
  1894  001B00  6EF1               	movwf	intcon2,c	;volatile
  1895                           
  1896                           ;user.c: 95: INTCON = 0b00100000;
  1897  001B02  0E20               	movlw	32
  1898  001B04  6EF2               	movwf	intcon,c	;volatile
  1899                           
  1900                           ;user.c: 105: AlgorithmSelection();
  1901  001B06  EC20  F00E         	call	_AlgorithmSelection	;wreg free
  1902                           
  1903                           ;user.c: 108: delay(1000);
  1904  001B0A  0E03               	movlw	3
  1905  001B0C  0100               	movlb	0	; () banked
  1906  001B0E  6F81               	movwf	(delay@ms+1)& (0+255),b
  1907  001B10  0EE8               	movlw	232
  1908  001B12  6F80               	movwf	delay@ms& (0+255),b
  1909  001B14  EC4D  F00D         	call	_delay	;wreg free
  1910  001B18  0012               	return		;funcret
  1911  001B1A                     __end_of_InitApp:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _delay *****************
  1930 ;; Defined at:
  1931 ;;		line 29 in file "user.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  ms              2    0[BANK0 ] unsigned int 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  x               2    3[BANK0 ] int 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;		None               void
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1948 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;Total ram usage:        5 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    4
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_InitApp
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text9
  1960  001A9A                     __ptext9:
  1961                           	opt stack 0
  1962  001A9A                     _delay:
  1963                           	opt stack 25
  1964                           
  1965                           ;user.c: 30: int x = 0;
  1966                           
  1967                           ;incstack = 0
  1968  001A9A  0E00               	movlw	0
  1969  001A9C  0100               	movlb	0	; () banked
  1970  001A9E  6F84               	movwf	(delay@x+1)& (0+255),b
  1971  001AA0  0E00               	movlw	0
  1972  001AA2  6F83               	movwf	delay@x& (0+255),b
  1973                           
  1974                           ;user.c: 31: for (x = 0; x < ms; x++)
  1975  001AA4  0E00               	movlw	0
  1976  001AA6  0100               	movlb	0	; () banked
  1977  001AA8  6F84               	movwf	(delay@x+1)& (0+255),b
  1978  001AAA  0E00               	movlw	0
  1979  001AAC  6F83               	movwf	delay@x& (0+255),b
  1980  001AAE  D00C               	goto	l279
  1981  001AB0                     l1945:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1985  001AB0  0E0B               	movlw	11
  1986  001AB2  0100               	movlb	0	; () banked
  1987  001AB4  6F82               	movwf	??_delay& (0+255),b
  1988  001AB6  0E62               	movlw	98
  1989  001AB8                     u1787:
  1990  001AB8  2EE8               	decfsz	wreg,f,c
  1991  001ABA  D7FE               	goto	u1787
  1992  001ABC  2F82               	decfsz	??_delay& (0+255),f,b
  1993  001ABE  D7FC               	goto	u1787
  1994  001AC0  D000               	nop2	
  1995  001AC2  0100               	movlb	0	; () banked
  1996  001AC4  4B83               	infsnz	delay@x& (0+255),f,b
  1997  001AC6  2B84               	incf	(delay@x+1)& (0+255),f,b
  1998  001AC8                     l279:
  1999                           
  2000                           ; BSR set to: 0
  2001  001AC8  0100               	movlb	0	; () banked
  2002  001ACA  5180               	movf	delay@ms& (0+255),w,b
  2003  001ACC  0100               	movlb	0	; () banked
  2004  001ACE  5D83               	subwf	delay@x& (0+255),w,b
  2005  001AD0  0100               	movlb	0	; () banked
  2006  001AD2  5181               	movf	(delay@ms+1)& (0+255),w,b
  2007  001AD4  0100               	movlb	0	; () banked
  2008  001AD6  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2009  001AD8  A0D8               	btfss	status,0,c
  2010  001ADA  D7EA               	goto	l1945
  2011                           
  2012                           ; BSR set to: 0
  2013                           
  2014                           ; BSR set to: 0
  2015  001ADC  0012               	return		;funcret
  2016  001ADE                     __end_of_delay:
  2017                           	opt stack 0
  2018                           tblptru	equ	0xFF8
  2019                           tblptrh	equ	0xFF7
  2020                           tblptrl	equ	0xFF6
  2021                           tablat	equ	0xFF5
  2022                           prodh	equ	0xFF4
  2023                           prodl	equ	0xFF3
  2024                           intcon	equ	0xFF2
  2025                           intcon2	equ	0xFF1
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           postinc2	equ	0xFDE
  2029                           postdec2	equ	0xFDD
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _AlgorithmSelection *****************
  2035 ;; Defined at:
  2036 ;;		line 112 in file "user.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;		None
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;		None
  2041 ;; Return value:  Size  Location     Type
  2042 ;;		None               void
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;Total ram usage:        0 bytes
  2055 ;; Hardware stack levels used:    1
  2056 ;; Hardware stack levels required when called:    4
  2057 ;; This function calls:
  2058 ;;		Nothing
  2059 ;; This function is called by:
  2060 ;;		_InitApp
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text10
  2065  001C40                     __ptext10:
  2066                           	opt stack 0
  2067  001C40                     _AlgorithmSelection:
  2068                           	opt stack 25
  2069                           
  2070                           ;user.c: 114: ADCON0 = 0b00100111;
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;incstack = 0
  2074  001C40  0E27               	movlw	39
  2075  001C42  6EC2               	movwf	4034,c	;volatile
  2076                           
  2077                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2078  001C44  82C2               	bsf	4034,1,c	;volatile
  2079                           
  2080                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2081  001C46  D000               	goto	l288
  2082  001C48                     l288:
  2083  001C48  B2C2               	btfsc	4034,1,c	;volatile
  2084  001C4A  D7FE               	goto	l288
  2085                           
  2086                           ;user.c: 119: if(ADRESL > 0b10000000)
  2087  001C4C  0E80               	movlw	128
  2088  001C4E  64C3               	cpfsgt	4035,c	;volatile
  2089  001C50  D002               	goto	l1957
  2090                           
  2091                           ;user.c: 120: algorithm = LEFTWALL;
  2092  001C52  0E00               	movlw	0
  2093  001C54  D001               	goto	L5
  2094  001C56                     l1957:
  2095                           
  2096                           ;user.c: 121: else
  2097                           ;user.c: 122: algorithm = RIGHTWALL;
  2098  001C56  0E01               	movlw	1
  2099  001C58                     L5:
  2100  001C58  6E35               	movwf	_algorithm,c
  2101  001C5A  D000               	goto	l293
  2102  001C5C                     l293:
  2103  001C5C  0012               	return		;funcret
  2104  001C5E                     __end_of_AlgorithmSelection:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           prodh	equ	0xFF4
  2111                           prodl	equ	0xFF3
  2112                           intcon	equ	0xFF2
  2113                           intcon2	equ	0xFF1
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postinc2	equ	0xFDE
  2117                           postdec2	equ	0xFDD
  2118                           fsr2h	equ	0xFDA
  2119                           fsr2l	equ	0xFD9
  2120                           status	equ	0xFD8
  2121                           
  2122 ;; *************** function _ConfigureOscillator *****************
  2123 ;; Defined at:
  2124 ;;		line 24 in file "system.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;		None               void
  2131 ;; Registers used:
  2132 ;;		wreg, status,2
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    4
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text11
  2153  001CC0                     __ptext11:
  2154                           	opt stack 0
  2155  001CC0                     _ConfigureOscillator:
  2156                           	opt stack 26
  2157                           
  2158                           ;system.c: 29: OSCCON = 0b01111100;
  2159                           
  2160                           ;incstack = 0
  2161  001CC0  0E7C               	movlw	124
  2162  001CC2  6ED3               	movwf	4051,c	;volatile
  2163                           
  2164                           ;system.c: 31: OSCTUNE = 0b01001111;
  2165  001CC4  0E4F               	movlw	79
  2166  001CC6  6E9B               	movwf	3995,c	;volatile
  2167  001CC8  0012               	return		;funcret
  2168  001CCA                     __end_of_ConfigureOscillator:
  2169                           	opt stack 0
  2170                           tblptru	equ	0xFF8
  2171                           tblptrh	equ	0xFF7
  2172                           tblptrl	equ	0xFF6
  2173                           tablat	equ	0xFF5
  2174                           prodh	equ	0xFF4
  2175                           prodl	equ	0xFF3
  2176                           intcon	equ	0xFF2
  2177                           intcon2	equ	0xFF1
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           postinc2	equ	0xFDE
  2181                           postdec2	equ	0xFDD
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _low_isr *****************
  2187 ;; Defined at:
  2188 ;;		line 232 in file "interrupts.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;		None               void
  2195 ;; Registers used:
  2196 ;;		None
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;Total ram usage:       17 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    3
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		Interrupt level 1
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	intcodelo
  2217  000018                     __pintcodelo:
  2218                           	opt stack 0
  2219  000018                     _low_isr:
  2220                           	opt stack 24
  2221                           
  2222                           ;incstack = 0
  2223  000018  CFD8 F038          	movff	status,??_low_isr
  2224  00001C  CFE8 F039          	movff	wreg,??_low_isr+1
  2225  000020  CFE0 F03A          	movff	bsr,??_low_isr+2
  2226  000024  CFFA F03B          	movff	pclath,??_low_isr+3
  2227  000028  CFFB F03C          	movff	pclatu,??_low_isr+4
  2228  00002C  CFE9 F03D          	movff	fsr0l,??_low_isr+5
  2229  000030  CFEA F03E          	movff	fsr0h,??_low_isr+6
  2230  000034  CFE1 F03F          	movff	fsr1l,??_low_isr+7
  2231  000038  CFE2 F040          	movff	fsr1h,??_low_isr+8
  2232  00003C  CFD9 F041          	movff	fsr2l,??_low_isr+9
  2233  000040  CFDA F042          	movff	fsr2h,??_low_isr+10
  2234  000044  CFF3 F043          	movff	prodl,??_low_isr+11
  2235  000048  CFF4 F044          	movff	prodh,??_low_isr+12
  2236  00004C  CFF6 F045          	movff	tblptrl,??_low_isr+13
  2237  000050  CFF7 F046          	movff	tblptrh,??_low_isr+14
  2238  000054  CFF8 F047          	movff	tblptru,??_low_isr+15
  2239  000058  CFF5 F048          	movff	tablat,??_low_isr+16
  2240  00005C  C048  FFF5         	movff	??_low_isr+16,tablat
  2241  000060  C047  FFF8         	movff	??_low_isr+15,tblptru
  2242  000064  C046  FFF7         	movff	??_low_isr+14,tblptrh
  2243  000068  C045  FFF6         	movff	??_low_isr+13,tblptrl
  2244  00006C  C044  FFF4         	movff	??_low_isr+12,prodh
  2245  000070  C043  FFF3         	movff	??_low_isr+11,prodl
  2246  000074  C042  FFDA         	movff	??_low_isr+10,fsr2h
  2247  000078  C041  FFD9         	movff	??_low_isr+9,fsr2l
  2248  00007C  C040  FFE2         	movff	??_low_isr+8,fsr1h
  2249  000080  C03F  FFE1         	movff	??_low_isr+7,fsr1l
  2250  000084  C03E  FFEA         	movff	??_low_isr+6,fsr0h
  2251  000088  C03D  FFE9         	movff	??_low_isr+5,fsr0l
  2252  00008C  C03C  FFFB         	movff	??_low_isr+4,pclatu
  2253  000090  C03B  FFFA         	movff	??_low_isr+3,pclath
  2254  000094  C03A  FFE0         	movff	??_low_isr+2,bsr
  2255  000098  C039  FFE8         	movff	??_low_isr+1,wreg
  2256  00009C  C038  FFD8         	movff	??_low_isr,status
  2257  0000A0  0010               	retfie	
  2258  0000A2                     __end_of_low_isr:
  2259                           	opt stack 0
  2260                           pclatu	equ	0xFFB
  2261                           pclath	equ	0xFFA
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           intcon	equ	0xFF2
  2269                           intcon2	equ	0xFF1
  2270                           postinc0	equ	0xFEE
  2271                           fsr0h	equ	0xFEA
  2272                           fsr0l	equ	0xFE9
  2273                           wreg	equ	0xFE8
  2274                           fsr1h	equ	0xFE2
  2275                           fsr1l	equ	0xFE1
  2276                           bsr	equ	0xFE0
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _high_isr *****************
  2284 ;; Defined at:
  2285 ;;		line 99 in file "interrupts.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;		None               void
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:       14 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    2
  2306 ;; This function calls:
  2307 ;;		_KController
  2308 ;;		_Reversing
  2309 ;;		_forward
  2310 ;;		_merge
  2311 ;;		_motorCounterUpdate
  2312 ;;		_moveMouse
  2313 ;;		_rotate
  2314 ;; This function is called by:
  2315 ;;		Interrupt level 2
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	intcode
  2320  000008                     __pintcode:
  2321                           	opt stack 0
  2322  000008                     _high_isr:
  2323                           	opt stack 24
  2324                           
  2325                           ;incstack = 0
  2326  000008  CFFA F051          	movff	pclath,??_high_isr
  2327  00000C  CFFB F052          	movff	pclatu,??_high_isr+1
  2328  000010  CFE9 F053          	movff	fsr0l,??_high_isr+2
  2329  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2330                           pclatu	equ	0xFFB
  2331                           pclath	equ	0xFFA
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           intcon	equ	0xFF2
  2339                           intcon2	equ	0xFF1
  2340                           postinc0	equ	0xFEE
  2341                           fsr0h	equ	0xFEA
  2342                           fsr0l	equ	0xFE9
  2343                           wreg	equ	0xFE8
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           bsr	equ	0xFE0
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353                           	psect	intcode_body
  2354  001006                     __pintcode_body:
  2355                           	opt stack 24
  2356  001006                     int_func:
  2357                           	opt stack 24
  2358  001006  0006               	pop		; remove dummy address from shadow register refresh
  2359  001008  CFEA F054          	movff	fsr0h,??_high_isr+3
  2360  00100C  CFE1 F055          	movff	fsr1l,??_high_isr+4
  2361  001010  CFE2 F056          	movff	fsr1h,??_high_isr+5
  2362  001014  CFD9 F057          	movff	fsr2l,??_high_isr+6
  2363  001018  CFDA F058          	movff	fsr2h,??_high_isr+7
  2364  00101C  CFF3 F059          	movff	prodl,??_high_isr+8
  2365  001020  CFF4 F05A          	movff	prodh,??_high_isr+9
  2366  001024  CFF6 F05B          	movff	tblptrl,??_high_isr+10
  2367  001028  CFF7 F05C          	movff	tblptrh,??_high_isr+11
  2368  00102C  CFF8 F05D          	movff	tblptru,??_high_isr+12
  2369  001030  CFF5 F05E          	movff	tablat,??_high_isr+13
  2370                           
  2371                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2372  001034  A4F2               	btfss	intcon,2,c	;volatile
  2373  001036  D148               	goto	i2l107
  2374                           
  2375                           ;interrupts.c: 119: {
  2376                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2377  001038  BE1A               	btfsc	_MotorDelayCounter+1,7,c
  2378  00103A  D142               	goto	i2l1811
  2379  00103C  501A               	movf	_MotorDelayCounter+1,w,c
  2380  00103E  E104               	bnz	i2u118_40
  2381  001040  0E03               	movlw	3
  2382  001042  5C19               	subwf	_MotorDelayCounter,w,c
  2383  001044  A0D8               	btfss	status,0,c
  2384  001046  D13C               	goto	i2l1811
  2385  001048                     i2u118_40:
  2386                           
  2387                           ;interrupts.c: 121: {
  2388                           ;interrupts.c: 123: if(ControllerCounter > 0){
  2389  001048  BE12               	btfsc	_ControllerCounter+1,7,c
  2390  00104A  D022               	goto	i2l1719
  2391  00104C  5012               	movf	_ControllerCounter+1,w,c
  2392  00104E  E103               	bnz	i2u119_40
  2393  001050  0411               	decf	_ControllerCounter,w,c
  2394  001052  A0D8               	btfss	status,0,c
  2395  001054  D01D               	goto	i2l1719
  2396  001056                     i2u119_40:
  2397                           
  2398                           ;interrupts.c: 124: KController();
  2399  001056  EC73  F00B         	call	_KController	;wreg free
  2400                           
  2401                           ;interrupts.c: 125: if (sensorValue[3] > 200 && sensorValue[2] > 200){
  2402  00105A  BE10               	btfsc	_sensorValue+7,7,c
  2403  00105C  D125               	goto	i2l1809
  2404  00105E  5010               	movf	_sensorValue+7,w,c
  2405  001060  E104               	bnz	i2u120_40
  2406  001062  0EC9               	movlw	201
  2407  001064  5C0F               	subwf	_sensorValue+6,w,c
  2408  001066  A0D8               	btfss	status,0,c
  2409  001068  D11F               	goto	i2l1809
  2410  00106A                     i2u120_40:
  2411  00106A  BE0E               	btfsc	_sensorValue+5,7,c
  2412  00106C  D11D               	goto	i2l1809
  2413  00106E  500E               	movf	_sensorValue+5,w,c
  2414  001070  E104               	bnz	i2u121_40
  2415  001072  0EC9               	movlw	201
  2416  001074  5C0D               	subwf	_sensorValue+4,w,c
  2417  001076  A0D8               	btfss	status,0,c
  2418  001078  D117               	goto	i2l1809
  2419  00107A                     i2u121_40:
  2420                           
  2421                           ;interrupts.c: 126: ControllerCounter = 0;
  2422  00107A  0E00               	movlw	0
  2423  00107C  6E12               	movwf	_ControllerCounter+1,c
  2424  00107E  0E00               	movlw	0
  2425  001080  6E11               	movwf	_ControllerCounter,c
  2426                           
  2427                           ;interrupts.c: 127: RotateCounter = 167*2;
  2428  001082  0E01               	movlw	1
  2429  001084  6E20               	movwf	_RotateCounter+1,c
  2430  001086  0E4E               	movlw	78
  2431  001088  6E1F               	movwf	_RotateCounter,c
  2432                           
  2433                           ;interrupts.c: 128: rotatingSide = LEFT;
  2434  00108A  0E00               	movlw	0
  2435  00108C  6E37               	movwf	_rotatingSide,c
  2436                           
  2437                           ;interrupts.c: 130: }
  2438                           ;interrupts.c: 132: }
  2439  00108E  D10C               	goto	i2l1809
  2440  001090                     i2l1719:
  2441                           
  2442                           ;interrupts.c: 134: else if (ForwardCounter > 0) {
  2443  001090  BE16               	btfsc	_ForwardCounter+1,7,c
  2444  001092  D008               	goto	i2l1723
  2445  001094  5016               	movf	_ForwardCounter+1,w,c
  2446  001096  E103               	bnz	i2u122_40
  2447  001098  0415               	decf	_ForwardCounter,w,c
  2448  00109A  A0D8               	btfss	status,0,c
  2449  00109C  D003               	goto	i2l1723
  2450  00109E                     i2u122_40:
  2451                           
  2452                           ;interrupts.c: 135: forward();
  2453  00109E  EC2F  F00E         	call	_forward	;wreg free
  2454                           
  2455                           ;interrupts.c: 142: }
  2456  0010A2  D102               	goto	i2l1809
  2457  0010A4                     i2l1723:
  2458                           
  2459                           ;interrupts.c: 144: else if (ReverseCounter > 0) {
  2460  0010A4  BE1E               	btfsc	_ReverseCounter+1,7,c
  2461  0010A6  D008               	goto	i2l1727
  2462  0010A8  501E               	movf	_ReverseCounter+1,w,c
  2463  0010AA  E103               	bnz	i2u123_40
  2464  0010AC  041D               	decf	_ReverseCounter,w,c
  2465  0010AE  A0D8               	btfss	status,0,c
  2466  0010B0  D003               	goto	i2l1727
  2467  0010B2                     i2u123_40:
  2468                           
  2469                           ;interrupts.c: 145: Reversing();
  2470  0010B2  EC3D  F00E         	call	_Reversing	;wreg free
  2471                           
  2472                           ;interrupts.c: 146: }
  2473  0010B6  D0F8               	goto	i2l1809
  2474  0010B8                     i2l1727:
  2475                           
  2476                           ;interrupts.c: 148: else if(RotateCounter > 0) {
  2477  0010B8  BE20               	btfsc	_RotateCounter+1,7,c
  2478  0010BA  D025               	goto	i2l1743
  2479  0010BC  5020               	movf	_RotateCounter+1,w,c
  2480  0010BE  E103               	bnz	i2u124_40
  2481  0010C0  041F               	decf	_RotateCounter,w,c
  2482  0010C2  A0D8               	btfss	status,0,c
  2483  0010C4  D020               	goto	i2l1743
  2484  0010C6                     i2u124_40:
  2485                           
  2486                           ;interrupts.c: 150: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2487  0010C6  BE0E               	btfsc	_sensorValue+5,7,c
  2488  0010C8  D006               	goto	i2l1731
  2489  0010CA  0E21               	movlw	33
  2490  0010CC  5C0D               	subwf	_sensorValue+4,w,c
  2491  0010CE  0E03               	movlw	3
  2492  0010D0  580E               	subwfb	_sensorValue+5,w,c
  2493  0010D2  B0D8               	btfsc	status,0,c
  2494  0010D4  D008               	goto	i2l1733
  2495  0010D6                     i2l1731:
  2496  0010D6  BE10               	btfsc	_sensorValue+7,7,c
  2497  0010D8  D00D               	goto	i2l1737
  2498  0010DA  0E21               	movlw	33
  2499  0010DC  5C0F               	subwf	_sensorValue+6,w,c
  2500  0010DE  0E03               	movlw	3
  2501  0010E0  5810               	subwfb	_sensorValue+7,w,c
  2502  0010E2  A0D8               	btfss	status,0,c
  2503  0010E4  D007               	goto	i2l1737
  2504  0010E6                     i2l1733:
  2505                           
  2506                           ;interrupts.c: 151: ReverseCounter = 15;
  2507  0010E6  0E00               	movlw	0
  2508  0010E8  6E1E               	movwf	_ReverseCounter+1,c
  2509  0010EA  0E0F               	movlw	15
  2510  0010EC  6E1D               	movwf	_ReverseCounter,c
  2511                           
  2512                           ;interrupts.c: 152: Reversing();
  2513  0010EE  EC3D  F00E         	call	_Reversing	;wreg free
  2514                           
  2515                           ;interrupts.c: 153: } else {
  2516  0010F2  D0DA               	goto	i2l1809
  2517  0010F4                     i2l1737:
  2518                           
  2519                           ;interrupts.c: 154: rotate(rotatingSide);
  2520  0010F4  5037               	movf	_rotatingSide,w,c
  2521  0010F6  EC8D  F00D         	call	_rotate
  2522                           
  2523                           ;interrupts.c: 155: TurnRight = 0;
  2524  0010FA  0E00               	movlw	0
  2525  0010FC  6E24               	movwf	_TurnRight+1,c
  2526  0010FE  0E00               	movlw	0
  2527  001100  6E23               	movwf	_TurnRight,c
  2528  001102  D00D               	goto	L6
  2529                           
  2530                           ;interrupts.c: 157: }
  2531                           ;interrupts.c: 158: }
  2532                           
  2533                           ;interrupts.c: 156: TurnLeft = 0;
  2534  001104  D0D1               	goto	i2l1809
  2535  001106                     i2l1743:
  2536                           
  2537                           ;interrupts.c: 160: else if (TurnLeft == 1){
  2538  001106  0421               	decf	_TurnLeft,w,c
  2539  001108  1022               	iorwf	_TurnLeft+1,w,c
  2540  00110A  A4D8               	btfss	status,2,c
  2541  00110C  D00D               	goto	i2l1747
  2542                           
  2543                           ;interrupts.c: 161: RotateCounter = 167;
  2544  00110E  0E00               	movlw	0
  2545  001110  6E20               	movwf	_RotateCounter+1,c
  2546  001112  0EA7               	movlw	167
  2547  001114  6E1F               	movwf	_RotateCounter,c
  2548                           
  2549                           ;interrupts.c: 162: rotatingSide = LEFT;
  2550  001116  0E00               	movlw	0
  2551  001118  6E37               	movwf	_rotatingSide,c
  2552                           
  2553                           ;interrupts.c: 163: justTurned = 1;
  2554  00111A  0E01               	movlw	1
  2555  00111C  6E36               	movwf	_justTurned,c
  2556  00111E                     L6:
  2557                           
  2558                           ;interrupts.c: 164: TurnLeft = 0;
  2559  00111E  0E00               	movlw	0
  2560  001120  6E22               	movwf	_TurnLeft+1,c
  2561  001122  0E00               	movlw	0
  2562  001124  6E21               	movwf	_TurnLeft,c
  2563                           
  2564                           ;interrupts.c: 165: }
  2565  001126  D0C0               	goto	i2l1809
  2566  001128                     i2l1747:
  2567                           
  2568                           ;interrupts.c: 167: else if (TurnRight == 1 && sensorValue[3] > 475 && sensorValue[2] > 
      +                          475) {
  2569  001128  0423               	decf	_TurnRight,w,c
  2570  00112A  1024               	iorwf	_TurnRight+1,w,c
  2571  00112C  B4D8               	btfsc	status,2,c
  2572  00112E  BE10               	btfsc	_sensorValue+7,7,c
  2573  001130  D016               	goto	i2l1755
  2574  001132  0EDC               	movlw	220
  2575  001134  5C0F               	subwf	_sensorValue+6,w,c
  2576  001136  0E01               	movlw	1
  2577  001138  5810               	subwfb	_sensorValue+7,w,c
  2578  00113A  B0D8               	btfsc	status,0,c
  2579  00113C  BE0E               	btfsc	_sensorValue+5,7,c
  2580  00113E  D00F               	goto	i2l1755
  2581  001140  0EDC               	movlw	220
  2582  001142  5C0D               	subwf	_sensorValue+4,w,c
  2583  001144  0E01               	movlw	1
  2584  001146  580E               	subwfb	_sensorValue+5,w,c
  2585  001148  A0D8               	btfss	status,0,c
  2586  00114A  D009               	goto	i2l1755
  2587                           
  2588                           ;interrupts.c: 168: RotateCounter = 167;
  2589  00114C  0E00               	movlw	0
  2590  00114E  6E20               	movwf	_RotateCounter+1,c
  2591  001150  0EA7               	movlw	167
  2592  001152  6E1F               	movwf	_RotateCounter,c
  2593                           
  2594                           ;interrupts.c: 169: rotatingSide = RIGHT;
  2595  001154  0E01               	movlw	1
  2596  001156  6E37               	movwf	_rotatingSide,c
  2597                           
  2598                           ;interrupts.c: 170: justTurned = 1;
  2599  001158  0E01               	movlw	1
  2600  00115A  6E36               	movwf	_justTurned,c
  2601  00115C  D0A0               	goto	i2l1807
  2602  00115E                     i2l1755:
  2603                           
  2604                           ;interrupts.c: 174: else if (sensorValue[0] < 90 && algorithm == LEFTWALL) {
  2605  00115E  BE0A               	btfsc	_sensorValue+1,7,c
  2606  001160  D006               	goto	i2l1757
  2607  001162  500A               	movf	_sensorValue+1,w,c
  2608  001164  E11A               	bnz	i2l1767
  2609  001166  0E5A               	movlw	90
  2610  001168  5C09               	subwf	_sensorValue,w,c
  2611  00116A  B0D8               	btfsc	status,0,c
  2612  00116C  D016               	goto	i2l1767
  2613  00116E                     i2l1757:
  2614  00116E  5035               	movf	_algorithm,w,c
  2615  001170  A4D8               	btfss	status,2,c
  2616  001172  D013               	goto	i2l1767
  2617                           
  2618                           ;interrupts.c: 175: TurnLeft = 1;
  2619  001174  0E00               	movlw	0
  2620  001176  6E22               	movwf	_TurnLeft+1,c
  2621  001178  0E01               	movlw	1
  2622  00117A  6E21               	movwf	_TurnLeft,c
  2623                           
  2624                           ;interrupts.c: 176: if(justTurned == 0) {
  2625  00117C  5036               	movf	_justTurned,w,c
  2626  00117E  A4D8               	btfss	status,2,c
  2627  001180  D004               	goto	i2l1763
  2628                           
  2629                           ;interrupts.c: 177: ForwardCounter = 420;
  2630  001182  0E01               	movlw	1
  2631  001184  6E16               	movwf	_ForwardCounter+1,c
  2632  001186  0EA4               	movlw	164
  2633  001188  D003               	goto	L7
  2634  00118A                     i2l1763:
  2635                           
  2636                           ;interrupts.c: 179: ForwardCounter = 400;
  2637  00118A  0E01               	movlw	1
  2638  00118C  6E16               	movwf	_ForwardCounter+1,c
  2639  00118E  0E90               	movlw	144
  2640  001190                     L7:
  2641  001190  6E15               	movwf	_ForwardCounter,c
  2642  001192  D000               	goto	i2l1765
  2643  001194                     i2l1765:
  2644                           
  2645                           ;interrupts.c: 180: }
  2646                           ;interrupts.c: 181: forward();
  2647  001194  EC2F  F00E         	call	_forward	;wreg free
  2648                           
  2649                           ;interrupts.c: 182: }
  2650  001198  D087               	goto	i2l1809
  2651  00119A                     i2l1767:
  2652                           
  2653                           ;interrupts.c: 184: else if (sensorValue[1] < 91 && algorithm == LEFTWALL) {
  2654  00119A  BE0C               	btfsc	_sensorValue+3,7,c
  2655  00119C  D006               	goto	i2l1769
  2656  00119E  500C               	movf	_sensorValue+3,w,c
  2657  0011A0  E11A               	bnz	i2l1779
  2658  0011A2  0E5B               	movlw	91
  2659  0011A4  5C0B               	subwf	_sensorValue+2,w,c
  2660  0011A6  B0D8               	btfsc	status,0,c
  2661  0011A8  D016               	goto	i2l1779
  2662  0011AA                     i2l1769:
  2663  0011AA  5035               	movf	_algorithm,w,c
  2664  0011AC  A4D8               	btfss	status,2,c
  2665  0011AE  D013               	goto	i2l1779
  2666                           
  2667                           ;interrupts.c: 185: TurnRight = 1;
  2668  0011B0  0E00               	movlw	0
  2669  0011B2  6E24               	movwf	_TurnRight+1,c
  2670  0011B4  0E01               	movlw	1
  2671  0011B6  6E23               	movwf	_TurnRight,c
  2672                           
  2673                           ;interrupts.c: 186: if(justTurned == 0) {
  2674  0011B8  5036               	movf	_justTurned,w,c
  2675  0011BA  A4D8               	btfss	status,2,c
  2676  0011BC  D004               	goto	i2l1775
  2677                           
  2678                           ;interrupts.c: 187: ForwardCounter = 450;
  2679  0011BE  0E01               	movlw	1
  2680  0011C0  6E16               	movwf	_ForwardCounter+1,c
  2681  0011C2  0EC2               	movlw	194
  2682  0011C4  D003               	goto	L8
  2683  0011C6                     i2l1775:
  2684                           
  2685                           ;interrupts.c: 189: ForwardCounter = 410;
  2686  0011C6  0E01               	movlw	1
  2687  0011C8  6E16               	movwf	_ForwardCounter+1,c
  2688  0011CA  0E9A               	movlw	154
  2689  0011CC                     L8:
  2690  0011CC  6E15               	movwf	_ForwardCounter,c
  2691  0011CE  D000               	goto	i2l1777
  2692  0011D0                     i2l1777:
  2693                           
  2694                           ;interrupts.c: 190: }
  2695                           ;interrupts.c: 191: forward();
  2696  0011D0  EC2F  F00E         	call	_forward	;wreg free
  2697                           
  2698                           ;interrupts.c: 192: }
  2699  0011D4  D069               	goto	i2l1809
  2700  0011D6                     i2l1779:
  2701                           
  2702                           ;interrupts.c: 194: else if ((sensorValue[0] > 90 && sensorValue[1] > 91 )
  2703                           ;interrupts.c: 195: && (sensorValue[3] > 475 && sensorValue[2] > 475) && RotateCounter <
      +                          = 0)
  2704  0011D6  BE0A               	btfsc	_sensorValue+1,7,c
  2705  0011D8  D02D               	goto	i2l1791
  2706  0011DA  500A               	movf	_sensorValue+1,w,c
  2707  0011DC  E104               	bnz	i2u137_40
  2708  0011DE  0E5B               	movlw	91
  2709  0011E0  5C09               	subwf	_sensorValue,w,c
  2710  0011E2  A0D8               	btfss	status,0,c
  2711  0011E4  D027               	goto	i2l1791
  2712  0011E6                     i2u137_40:
  2713  0011E6  BE0C               	btfsc	_sensorValue+3,7,c
  2714  0011E8  D025               	goto	i2l1791
  2715  0011EA  500C               	movf	_sensorValue+3,w,c
  2716  0011EC  E104               	bnz	i2u138_40
  2717  0011EE  0E5C               	movlw	92
  2718  0011F0  5C0B               	subwf	_sensorValue+2,w,c
  2719  0011F2  A0D8               	btfss	status,0,c
  2720  0011F4  D01F               	goto	i2l1791
  2721  0011F6                     i2u138_40:
  2722  0011F6  BE10               	btfsc	_sensorValue+7,7,c
  2723  0011F8  D01D               	goto	i2l1791
  2724  0011FA  0EDC               	movlw	220
  2725  0011FC  5C0F               	subwf	_sensorValue+6,w,c
  2726  0011FE  0E01               	movlw	1
  2727  001200  5810               	subwfb	_sensorValue+7,w,c
  2728  001202  B0D8               	btfsc	status,0,c
  2729  001204  BE0E               	btfsc	_sensorValue+5,7,c
  2730  001206  D016               	goto	i2l1791
  2731  001208  0EDC               	movlw	220
  2732  00120A  5C0D               	subwf	_sensorValue+4,w,c
  2733  00120C  0E01               	movlw	1
  2734  00120E  580E               	subwfb	_sensorValue+5,w,c
  2735  001210  A0D8               	btfss	status,0,c
  2736  001212  D010               	goto	i2l1791
  2737  001214  BE20               	btfsc	_RotateCounter+1,7,c
  2738  001216  D005               	goto	i2l1789
  2739  001218  5020               	movf	_RotateCounter+1,w,c
  2740  00121A  E10C               	bnz	i2l1791
  2741  00121C  041F               	decf	_RotateCounter,w,c
  2742  00121E  B0D8               	btfsc	status,0,c
  2743  001220  D009               	goto	i2l1791
  2744  001222                     i2l1789:
  2745                           
  2746                           ;interrupts.c: 196: {
  2747                           ;interrupts.c: 197: RotateCounter = 167*2;
  2748  001222  0E01               	movlw	1
  2749  001224  6E20               	movwf	_RotateCounter+1,c
  2750  001226  0E4E               	movlw	78
  2751  001228  6E1F               	movwf	_RotateCounter,c
  2752                           
  2753                           ;interrupts.c: 198: rotatingSide = LEFT;
  2754  00122A  0E00               	movlw	0
  2755  00122C  6E37               	movwf	_rotatingSide,c
  2756                           
  2757                           ;interrupts.c: 199: justTurned = 1;
  2758  00122E  0E01               	movlw	1
  2759  001230  6E36               	movwf	_justTurned,c
  2760                           
  2761                           ;interrupts.c: 200: }
  2762  001232  D03A               	goto	i2l1809
  2763  001234                     i2l1791:
  2764                           
  2765                           ;interrupts.c: 202: else if ((sensorValue[0] > 90 && sensorValue[1] > 91)) {
  2766  001234  BE0A               	btfsc	_sensorValue+1,7,c
  2767  001236  D023               	goto	i2l1801
  2768  001238  500A               	movf	_sensorValue+1,w,c
  2769  00123A  E104               	bnz	i2u142_40
  2770  00123C  0E5B               	movlw	91
  2771  00123E  5C09               	subwf	_sensorValue,w,c
  2772  001240  A0D8               	btfss	status,0,c
  2773  001242  D01D               	goto	i2l1801
  2774  001244                     i2u142_40:
  2775  001244  BE0C               	btfsc	_sensorValue+3,7,c
  2776  001246  D01B               	goto	i2l1801
  2777  001248  500C               	movf	_sensorValue+3,w,c
  2778  00124A  E104               	bnz	i2u143_40
  2779  00124C  0E5C               	movlw	92
  2780  00124E  5C0B               	subwf	_sensorValue+2,w,c
  2781  001250  A0D8               	btfss	status,0,c
  2782  001252  D015               	goto	i2l1801
  2783  001254                     i2u143_40:
  2784                           
  2785                           ;interrupts.c: 203: if (sensorValue[3] < 200 || sensorValue[2] < 200){
  2786  001254  BE10               	btfsc	_sensorValue+7,7,c
  2787  001256  D00E               	goto	i2l1799
  2788  001258  5010               	movf	_sensorValue+7,w,c
  2789  00125A  E104               	bnz	i2u144_40
  2790  00125C  0EC8               	movlw	200
  2791  00125E  5C0F               	subwf	_sensorValue+6,w,c
  2792  001260  A0D8               	btfss	status,0,c
  2793  001262  D008               	goto	i2l1799
  2794  001264                     i2u144_40:
  2795  001264  BE0E               	btfsc	_sensorValue+5,7,c
  2796  001266  D006               	goto	i2l1799
  2797  001268  500E               	movf	_sensorValue+5,w,c
  2798  00126A  E11E               	bnz	i2l1809
  2799  00126C  0EC8               	movlw	200
  2800  00126E  5C0D               	subwf	_sensorValue+4,w,c
  2801  001270  B0D8               	btfsc	status,0,c
  2802  001272  D01A               	goto	i2l1809
  2803  001274                     i2l1799:
  2804                           
  2805                           ;interrupts.c: 204: ControllerCounter = 5;
  2806  001274  0E00               	movlw	0
  2807  001276  6E12               	movwf	_ControllerCounter+1,c
  2808  001278  0E05               	movlw	5
  2809  00127A  6E11               	movwf	_ControllerCounter,c
  2810                           
  2811                           ;interrupts.c: 205: }
  2812                           ;interrupts.c: 206: }
  2813  00127C  D015               	goto	i2l1809
  2814  00127E                     i2l1801:
  2815                           
  2816                           ;interrupts.c: 212: else {
  2817                           ;interrupts.c: 213: motorCounterUpdate(RIGHT,0);
  2818  00127E  0E00               	movlw	0
  2819  001280  6E49               	movwf	motorCounterUpdate@reverse,c
  2820  001282  0E01               	movlw	1
  2821  001284  EC00  F00C         	call	_motorCounterUpdate
  2822                           
  2823                           ;interrupts.c: 214: motorCounterUpdate(LEFT,0);
  2824  001288  0E00               	movlw	0
  2825  00128A  6E49               	movwf	motorCounterUpdate@reverse,c
  2826  00128C  0E00               	movlw	0
  2827  00128E  EC00  F00C         	call	_motorCounterUpdate
  2828                           
  2829                           ;interrupts.c: 215: justTurned = 0;
  2830  001292  0E00               	movlw	0
  2831  001294  6E36               	movwf	_justTurned,c
  2832                           
  2833                           ;interrupts.c: 216: TurnLeft = 0;
  2834  001296  0E00               	movlw	0
  2835  001298  6E22               	movwf	_TurnLeft+1,c
  2836  00129A  0E00               	movlw	0
  2837  00129C  6E21               	movwf	_TurnLeft,c
  2838  00129E                     i2l1807:
  2839                           
  2840                           ;interrupts.c: 217: TurnRight = 0;
  2841  00129E  0E00               	movlw	0
  2842  0012A0  6E24               	movwf	_TurnRight+1,c
  2843  0012A2  0E00               	movlw	0
  2844  0012A4  6E23               	movwf	_TurnRight,c
  2845  0012A6  D000               	goto	i2l1809
  2846  0012A8                     i2l1809:
  2847                           
  2848                           ;interrupts.c: 218: }
  2849                           ;interrupts.c: 219: moveMouse(merge(LMotorCounter,RMotorCounter));
  2850  0012A8  C034  F049         	movff	_RMotorCounter,merge@right
  2851  0012AC  5033               	movf	_LMotorCounter,w,c
  2852  0012AE  EC58  F00E         	call	_merge
  2853  0012B2  EC65  F00E         	call	_moveMouse
  2854                           
  2855                           ;interrupts.c: 220: MotorDelayCounter = 0;
  2856  0012B6  0E00               	movlw	0
  2857  0012B8  6E1A               	movwf	_MotorDelayCounter+1,c
  2858  0012BA  0E00               	movlw	0
  2859  0012BC  6E19               	movwf	_MotorDelayCounter,c
  2860  0012BE  D000               	goto	i2l1811
  2861  0012C0                     i2l1811:
  2862                           
  2863                           ;interrupts.c: 221: }
  2864                           ;interrupts.c: 223: MotorDelayCounter++;
  2865  0012C0  4A19               	infsnz	_MotorDelayCounter,f,c
  2866  0012C2  2A1A               	incf	_MotorDelayCounter+1,f,c
  2867                           
  2868                           ;interrupts.c: 224: INTCONbits.TMR0IF = 0;
  2869  0012C4  94F2               	bcf	intcon,2,c	;volatile
  2870  0012C6  D000               	goto	i2l107
  2871  0012C8                     i2l107:
  2872  0012C8  C05E  FFF5         	movff	??_high_isr+13,tablat
  2873  0012CC  C05D  FFF8         	movff	??_high_isr+12,tblptru
  2874  0012D0  C05C  FFF7         	movff	??_high_isr+11,tblptrh
  2875  0012D4  C05B  FFF6         	movff	??_high_isr+10,tblptrl
  2876  0012D8  C05A  FFF4         	movff	??_high_isr+9,prodh
  2877  0012DC  C059  FFF3         	movff	??_high_isr+8,prodl
  2878  0012E0  C058  FFDA         	movff	??_high_isr+7,fsr2h
  2879  0012E4  C057  FFD9         	movff	??_high_isr+6,fsr2l
  2880  0012E8  C056  FFE2         	movff	??_high_isr+5,fsr1h
  2881  0012EC  C055  FFE1         	movff	??_high_isr+4,fsr1l
  2882  0012F0  C054  FFEA         	movff	??_high_isr+3,fsr0h
  2883  0012F4  C053  FFE9         	movff	??_high_isr+2,fsr0l
  2884  0012F8  C052  FFFB         	movff	??_high_isr+1,pclatu
  2885  0012FC  C051  FFFA         	movff	??_high_isr,pclath
  2886  001300  0011               	retfie		f
  2887  001302                     __end_of_high_isr:
  2888                           	opt stack 0
  2889                           pclatu	equ	0xFFB
  2890                           pclath	equ	0xFFA
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           prodh	equ	0xFF4
  2896                           prodl	equ	0xFF3
  2897                           intcon	equ	0xFF2
  2898                           intcon2	equ	0xFF1
  2899                           postinc0	equ	0xFEE
  2900                           fsr0h	equ	0xFEA
  2901                           fsr0l	equ	0xFE9
  2902                           wreg	equ	0xFE8
  2903                           fsr1h	equ	0xFE2
  2904                           fsr1l	equ	0xFE1
  2905                           bsr	equ	0xFE0
  2906                           postinc2	equ	0xFDE
  2907                           postdec2	equ	0xFDD
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function _rotate *****************
  2913 ;; Defined at:
  2914 ;;		line 421 in file "interrupts.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  side            1    wreg     enum E4145
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  side            1   19[COMRAM] enum E4145
  2919 ;; Return value:  Size  Location     Type
  2920 ;;		None               void
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0, cstack
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;Total ram usage:        1 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    1
  2935 ;; This function calls:
  2936 ;;		_motorCounterUpdate
  2937 ;; This function is called by:
  2938 ;;		_high_isr
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text14
  2943  001B1A                     __ptext14:
  2944                           	opt stack 0
  2945  001B1A                     _rotate:
  2946                           	opt stack 24
  2947                           
  2948                           ;incstack = 0
  2949                           ;rotate@side stored from wreg
  2950  001B1A  6E4B               	movwf	rotate@side,c
  2951                           
  2952                           ;interrupts.c: 423: if (side == LEFT){
  2953  001B1C  504B               	movf	rotate@side,w,c
  2954  001B1E  A4D8               	btfss	status,2,c
  2955  001B20  D00B               	goto	i2l1645
  2956                           
  2957                           ;interrupts.c: 424: motorCounterUpdate(RIGHT,0);
  2958  001B22  0E00               	movlw	0
  2959  001B24  6E49               	movwf	motorCounterUpdate@reverse,c
  2960  001B26  0E01               	movlw	1
  2961  001B28  EC00  F00C         	call	_motorCounterUpdate
  2962                           
  2963                           ;interrupts.c: 425: motorCounterUpdate(LEFT,1);
  2964  001B2C  0E01               	movlw	1
  2965  001B2E  6E49               	movwf	motorCounterUpdate@reverse,c
  2966  001B30  0E00               	movlw	0
  2967  001B32  EC00  F00C         	call	_motorCounterUpdate
  2968                           
  2969                           ;interrupts.c: 426: } else {
  2970  001B36  D00B               	goto	i2l1647
  2971  001B38                     i2l1645:
  2972                           
  2973                           ;interrupts.c: 427: motorCounterUpdate(LEFT,0);
  2974  001B38  0E00               	movlw	0
  2975  001B3A  6E49               	movwf	motorCounterUpdate@reverse,c
  2976  001B3C  0E00               	movlw	0
  2977  001B3E  EC00  F00C         	call	_motorCounterUpdate
  2978                           
  2979                           ;interrupts.c: 428: motorCounterUpdate(RIGHT,1);
  2980  001B42  0E01               	movlw	1
  2981  001B44  6E49               	movwf	motorCounterUpdate@reverse,c
  2982  001B46  0E01               	movlw	1
  2983  001B48  EC00  F00C         	call	_motorCounterUpdate
  2984  001B4C  D000               	goto	i2l1647
  2985  001B4E                     i2l1647:
  2986                           
  2987                           ;interrupts.c: 429: }
  2988                           ;interrupts.c: 430: RotateCounter--;
  2989  001B4E  061F               	decf	_RotateCounter,f,c
  2990  001B50  A0D8               	btfss	status,0,c
  2991  001B52  0620               	decf	_RotateCounter+1,f,c
  2992  001B54  0012               	return		;funcret
  2993  001B56                     __end_of_rotate:
  2994                           	opt stack 0
  2995                           pclatu	equ	0xFFB
  2996                           pclath	equ	0xFFA
  2997                           tblptru	equ	0xFF8
  2998                           tblptrh	equ	0xFF7
  2999                           tblptrl	equ	0xFF6
  3000                           tablat	equ	0xFF5
  3001                           prodh	equ	0xFF4
  3002                           prodl	equ	0xFF3
  3003                           intcon	equ	0xFF2
  3004                           intcon2	equ	0xFF1
  3005                           postinc0	equ	0xFEE
  3006                           fsr0h	equ	0xFEA
  3007                           fsr0l	equ	0xFE9
  3008                           wreg	equ	0xFE8
  3009                           fsr1h	equ	0xFE2
  3010                           fsr1l	equ	0xFE1
  3011                           bsr	equ	0xFE0
  3012                           postinc2	equ	0xFDE
  3013                           postdec2	equ	0xFDD
  3014                           fsr2h	equ	0xFDA
  3015                           fsr2l	equ	0xFD9
  3016                           status	equ	0xFD8
  3017                           
  3018 ;; *************** function _forward *****************
  3019 ;; Defined at:
  3020 ;;		line 466 in file "interrupts.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;		None               void
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    1
  3041 ;; This function calls:
  3042 ;;		_motorCounterUpdate
  3043 ;; This function is called by:
  3044 ;;		_high_isr
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text15
  3049  001C5E                     __ptext15:
  3050                           	opt stack 0
  3051  001C5E                     _forward:
  3052                           	opt stack 24
  3053                           
  3054                           ;interrupts.c: 468: motorCounterUpdate(RIGHT,0);
  3055                           
  3056                           ;incstack = 0
  3057  001C5E  0E00               	movlw	0
  3058  001C60  6E49               	movwf	motorCounterUpdate@reverse,c
  3059  001C62  0E01               	movlw	1
  3060  001C64  EC00  F00C         	call	_motorCounterUpdate
  3061                           
  3062                           ;interrupts.c: 469: motorCounterUpdate(LEFT,0);
  3063  001C68  0E00               	movlw	0
  3064  001C6A  6E49               	movwf	motorCounterUpdate@reverse,c
  3065  001C6C  0E00               	movlw	0
  3066  001C6E  EC00  F00C         	call	_motorCounterUpdate
  3067                           
  3068                           ;interrupts.c: 470: ForwardCounter--;
  3069  001C72  0615               	decf	_ForwardCounter,f,c
  3070  001C74  A0D8               	btfss	status,0,c
  3071  001C76  0616               	decf	_ForwardCounter+1,f,c
  3072  001C78  0012               	return		;funcret
  3073  001C7A                     __end_of_forward:
  3074                           	opt stack 0
  3075                           pclatu	equ	0xFFB
  3076                           pclath	equ	0xFFA
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           intcon	equ	0xFF2
  3084                           intcon2	equ	0xFF1
  3085                           postinc0	equ	0xFEE
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           bsr	equ	0xFE0
  3092                           postinc2	equ	0xFDE
  3093                           postdec2	equ	0xFDD
  3094                           fsr2h	equ	0xFDA
  3095                           fsr2l	equ	0xFD9
  3096                           status	equ	0xFD8
  3097                           
  3098 ;; *************** function _Reversing *****************
  3099 ;; Defined at:
  3100 ;;		line 445 in file "interrupts.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		wreg, status,2, status,0, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    1
  3121 ;; This function calls:
  3122 ;;		_motorCounterUpdate
  3123 ;; This function is called by:
  3124 ;;		_high_isr
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text16
  3129  001C7A                     __ptext16:
  3130                           	opt stack 0
  3131  001C7A                     _Reversing:
  3132                           	opt stack 24
  3133                           
  3134                           ;interrupts.c: 447: motorCounterUpdate(RIGHT,1);
  3135                           
  3136                           ;incstack = 0
  3137  001C7A  0E01               	movlw	1
  3138  001C7C  6E49               	movwf	motorCounterUpdate@reverse,c
  3139  001C7E  0E01               	movlw	1
  3140  001C80  EC00  F00C         	call	_motorCounterUpdate
  3141                           
  3142                           ;interrupts.c: 448: motorCounterUpdate(LEFT,1);
  3143  001C84  0E01               	movlw	1
  3144  001C86  6E49               	movwf	motorCounterUpdate@reverse,c
  3145  001C88  0E00               	movlw	0
  3146  001C8A  EC00  F00C         	call	_motorCounterUpdate
  3147                           
  3148                           ;interrupts.c: 449: ReverseCounter--;
  3149  001C8E  061D               	decf	_ReverseCounter,f,c
  3150  001C90  A0D8               	btfss	status,0,c
  3151  001C92  061E               	decf	_ReverseCounter+1,f,c
  3152  001C94  0012               	return		;funcret
  3153  001C96                     __end_of_Reversing:
  3154                           	opt stack 0
  3155                           pclatu	equ	0xFFB
  3156                           pclath	equ	0xFFA
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           intcon2	equ	0xFF1
  3165                           postinc0	equ	0xFEE
  3166                           fsr0h	equ	0xFEA
  3167                           fsr0l	equ	0xFE9
  3168                           wreg	equ	0xFE8
  3169                           fsr1h	equ	0xFE2
  3170                           fsr1l	equ	0xFE1
  3171                           bsr	equ	0xFE0
  3172                           postinc2	equ	0xFDE
  3173                           postdec2	equ	0xFDD
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _KController *****************
  3179 ;; Defined at:
  3180 ;;		line 334 in file "interrupts.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;		None
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  diff            2   23[COMRAM] int 
  3185 ;;  correctTo       1   22[COMRAM] enum E4145
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        5 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    1
  3202 ;; This function calls:
  3203 ;;		_ABS
  3204 ;;		_merge
  3205 ;;		_motorCounterUpdate
  3206 ;;		_moveMouse
  3207 ;; This function is called by:
  3208 ;;		_high_isr
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text17
  3213  0016E6                     __ptext17:
  3214                           	opt stack 0
  3215  0016E6                     _KController:
  3216                           	opt stack 24
  3217                           
  3218                           ;interrupts.c: 336: Side correctTo;
  3219                           ;interrupts.c: 337: int diff = 0;
  3220                           
  3221                           ;incstack = 0
  3222  0016E6  0E00               	movlw	0
  3223  0016E8  6E50               	movwf	KController@diff+1,c
  3224  0016EA  0E00               	movlw	0
  3225  0016EC  6E4F               	movwf	KController@diff,c
  3226                           
  3227                           ;interrupts.c: 338: if(controllerSteps > 0){
  3228  0016EE  505F               	movf	_controllerSteps,w,c
  3229  0016F0  B4D8               	btfsc	status,2,c
  3230  0016F2  D00F               	goto	i2l1599
  3231                           
  3232                           ;interrupts.c: 339: motorCounterUpdate(RIGHT,0);
  3233  0016F4  0E00               	movlw	0
  3234  0016F6  6E49               	movwf	motorCounterUpdate@reverse,c
  3235  0016F8  0E01               	movlw	1
  3236  0016FA  EC00  F00C         	call	_motorCounterUpdate
  3237                           
  3238                           ;interrupts.c: 340: motorCounterUpdate(LEFT,0);
  3239  0016FE  0E00               	movlw	0
  3240  001700  6E49               	movwf	motorCounterUpdate@reverse,c
  3241  001702  0E00               	movlw	0
  3242  001704  EC00  F00C         	call	_motorCounterUpdate
  3243                           
  3244                           ;interrupts.c: 341: controllerSteps--;
  3245  001708  065F               	decf	_controllerSteps,f,c
  3246                           
  3247                           ;interrupts.c: 342: ControllerCounter--;
  3248  00170A  0611               	decf	_ControllerCounter,f,c
  3249  00170C  A0D8               	btfss	status,0,c
  3250  00170E  0612               	decf	_ControllerCounter+1,f,c
  3251                           
  3252                           ;interrupts.c: 343: return;
  3253  001710  D076               	goto	i2l162
  3254  001712                     i2l1599:
  3255                           
  3256                           ;interrupts.c: 344: }
  3257                           ;interrupts.c: 345: if((sensorValue[0] > 90 && sensorValue[1] > 91))
  3258  001712  BE0A               	btfsc	_sensorValue+1,7,c
  3259  001714  D069               	goto	i2l1631
  3260  001716  500A               	movf	_sensorValue+1,w,c
  3261  001718  E104               	bnz	i2u104_40
  3262  00171A  0E5B               	movlw	91
  3263  00171C  5C09               	subwf	_sensorValue,w,c
  3264  00171E  A0D8               	btfss	status,0,c
  3265  001720  D063               	goto	i2l1631
  3266  001722                     i2u104_40:
  3267  001722  BE0C               	btfsc	_sensorValue+3,7,c
  3268  001724  D061               	goto	i2l1631
  3269  001726  500C               	movf	_sensorValue+3,w,c
  3270  001728  E104               	bnz	i2u105_40
  3271  00172A  0E5C               	movlw	92
  3272  00172C  5C0B               	subwf	_sensorValue+2,w,c
  3273  00172E  A0D8               	btfss	status,0,c
  3274  001730  D05B               	goto	i2l1631
  3275  001732                     i2u105_40:
  3276                           
  3277                           ;interrupts.c: 346: {
  3278                           ;interrupts.c: 347: diff = ABS(sensorValue[1] - sensorValue[0]);
  3279  001732  C009  F04C         	movff	_sensorValue,??_KController
  3280  001736  C00A  F04D         	movff	_sensorValue+1,??_KController+1
  3281  00173A  1E4C               	comf	??_KController,f,c
  3282  00173C  1E4D               	comf	??_KController+1,f,c
  3283  00173E  4A4C               	infsnz	??_KController,f,c
  3284  001740  2A4D               	incf	??_KController+1,f,c
  3285  001742  500B               	movf	_sensorValue+2,w,c
  3286  001744  244C               	addwf	??_KController,w,c
  3287  001746  6E49               	movwf	ABS@x,c
  3288  001748  500C               	movf	_sensorValue+3,w,c
  3289  00174A  204D               	addwfc	??_KController+1,w,c
  3290  00174C  6E4A               	movwf	ABS@x+1,c
  3291  00174E  EC4B  F00E         	call	_ABS	;wreg free
  3292  001752  C049  F04F         	movff	?_ABS,KController@diff
  3293  001756  C04A  F050         	movff	?_ABS+1,KController@diff+1
  3294                           
  3295                           ;interrupts.c: 349: if(sensorValue[0] > sensorValue[1])
  3296  00175A  5009               	movf	_sensorValue,w,c
  3297  00175C  5C0B               	subwf	_sensorValue+2,w,c
  3298  00175E  500C               	movf	_sensorValue+3,w,c
  3299  001760  0A80               	xorlw	128
  3300  001762  6E4C               	movwf	??_KController& (0+255),c
  3301  001764  500A               	movf	_sensorValue+1,w,c
  3302  001766  0A80               	xorlw	128
  3303  001768  584C               	subwfb	??_KController& (0+255),w,c
  3304  00176A  B0D8               	btfsc	status,0,c
  3305  00176C  D00F               	goto	i2l1613
  3306                           
  3307                           ;interrupts.c: 350: {
  3308                           ;interrupts.c: 351: correctTo = LEFT;
  3309  00176E  0E00               	movlw	0
  3310  001770  6E4E               	movwf	KController@correctTo,c
  3311                           
  3312                           ;interrupts.c: 352: motorCounterUpdate(correctTo,0);
  3313  001772  0E00               	movlw	0
  3314  001774  6E49               	movwf	motorCounterUpdate@reverse,c
  3315  001776  504E               	movf	KController@correctTo,w,c
  3316  001778  EC00  F00C         	call	_motorCounterUpdate
  3317                           
  3318                           ;interrupts.c: 353: moveMouse(merge(LMotorCounter,RMotorCounter));
  3319  00177C  C034  F049         	movff	_RMotorCounter,merge@right
  3320  001780  5033               	movf	_LMotorCounter,w,c
  3321  001782  EC58  F00E         	call	_merge
  3322  001786  EC65  F00E         	call	_moveMouse
  3323                           
  3324                           ;interrupts.c: 354: }
  3325  00178A  D00F               	goto	i2l1619
  3326  00178C                     i2l1613:
  3327                           
  3328                           ;interrupts.c: 355: else
  3329                           ;interrupts.c: 356: {
  3330                           ;interrupts.c: 357: correctTo = RIGHT;
  3331  00178C  0E01               	movlw	1
  3332  00178E  6E4E               	movwf	KController@correctTo,c
  3333                           
  3334                           ;interrupts.c: 358: motorCounterUpdate(correctTo,0);
  3335  001790  0E00               	movlw	0
  3336  001792  6E49               	movwf	motorCounterUpdate@reverse,c
  3337  001794  504E               	movf	KController@correctTo,w,c
  3338  001796  EC00  F00C         	call	_motorCounterUpdate
  3339                           
  3340                           ;interrupts.c: 359: moveMouse(merge(LMotorCounter,RMotorCounter));
  3341  00179A  C034  F049         	movff	_RMotorCounter,merge@right
  3342  00179E  5033               	movf	_LMotorCounter,w,c
  3343  0017A0  EC58  F00E         	call	_merge
  3344  0017A4  EC65  F00E         	call	_moveMouse
  3345  0017A8  D000               	goto	i2l1619
  3346  0017AA                     i2l1619:
  3347                           
  3348                           ;interrupts.c: 360: }
  3349                           ;interrupts.c: 362: if(diff > 60)
  3350  0017AA  BE50               	btfsc	KController@diff+1,7,c
  3351  0017AC  D008               	goto	i2l1623
  3352  0017AE  5050               	movf	KController@diff+1,w,c
  3353  0017B0  E104               	bnz	i2u107_40
  3354  0017B2  0E3D               	movlw	61
  3355  0017B4  5C4F               	subwf	KController@diff,w,c
  3356  0017B6  A0D8               	btfss	status,0,c
  3357  0017B8  D002               	goto	i2l1623
  3358  0017BA                     i2u107_40:
  3359                           
  3360                           ;interrupts.c: 363: controllerSteps = 1;
  3361  0017BA  0E01               	movlw	1
  3362  0017BC  D013               	goto	L10
  3363  0017BE                     i2l1623:
  3364                           
  3365                           ;interrupts.c: 364: else if(diff <= 60 && diff > 20)
  3366  0017BE  BE50               	btfsc	KController@diff+1,7,c
  3367  0017C0  D006               	goto	i2l1625
  3368  0017C2  5050               	movf	KController@diff+1,w,c
  3369  0017C4  E10E               	bnz	i2l1629
  3370  0017C6  0E3D               	movlw	61
  3371  0017C8  5C4F               	subwf	KController@diff,w,c
  3372  0017CA  B0D8               	btfsc	status,0,c
  3373  0017CC  D00A               	goto	i2l1629
  3374  0017CE                     i2l1625:
  3375  0017CE  BE50               	btfsc	KController@diff+1,7,c
  3376  0017D0  D008               	goto	i2l1629
  3377  0017D2  5050               	movf	KController@diff+1,w,c
  3378  0017D4  E104               	bnz	i2u109_40
  3379  0017D6  0E15               	movlw	21
  3380  0017D8  5C4F               	subwf	KController@diff,w,c
  3381  0017DA  A0D8               	btfss	status,0,c
  3382  0017DC  D002               	goto	i2l1629
  3383  0017DE                     i2u109_40:
  3384                           
  3385                           ;interrupts.c: 365: controllerSteps = 5;
  3386  0017DE  0E05               	movlw	5
  3387  0017E0  D001               	goto	L10
  3388  0017E2                     i2l1629:
  3389                           
  3390                           ;interrupts.c: 366: else
  3391                           ;interrupts.c: 367: controllerSteps = 10;
  3392  0017E2  0E0A               	movlw	10
  3393  0017E4                     L10:
  3394  0017E4  6E5F               	movwf	_controllerSteps,c
  3395                           
  3396                           ;interrupts.c: 368: }
  3397  0017E6  D00B               	goto	i2l162
  3398  0017E8                     i2l1631:
  3399                           
  3400                           ;interrupts.c: 369: else {
  3401                           ;interrupts.c: 370: motorCounterUpdate(RIGHT,0);
  3402  0017E8  0E00               	movlw	0
  3403  0017EA  6E49               	movwf	motorCounterUpdate@reverse,c
  3404  0017EC  0E01               	movlw	1
  3405  0017EE  EC00  F00C         	call	_motorCounterUpdate
  3406                           
  3407                           ;interrupts.c: 371: motorCounterUpdate(LEFT,0);
  3408  0017F2  0E00               	movlw	0
  3409  0017F4  6E49               	movwf	motorCounterUpdate@reverse,c
  3410  0017F6  0E00               	movlw	0
  3411  0017F8  EC00  F00C         	call	_motorCounterUpdate
  3412  0017FC  D000               	goto	i2l162
  3413  0017FE                     i2l162:
  3414  0017FE  0012               	return		;funcret
  3415  001800                     __end_of_KController:
  3416                           	opt stack 0
  3417                           pclatu	equ	0xFFB
  3418                           pclath	equ	0xFFA
  3419                           tblptru	equ	0xFF8
  3420                           tblptrh	equ	0xFF7
  3421                           tblptrl	equ	0xFF6
  3422                           tablat	equ	0xFF5
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           intcon	equ	0xFF2
  3426                           intcon2	equ	0xFF1
  3427                           postinc0	equ	0xFEE
  3428                           fsr0h	equ	0xFEA
  3429                           fsr0l	equ	0xFE9
  3430                           wreg	equ	0xFE8
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           bsr	equ	0xFE0
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _moveMouse *****************
  3441 ;; Defined at:
  3442 ;;		line 321 in file "interrupts.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  action          1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  action          1   17[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;		None               void
  3449 ;; Registers used:
  3450 ;;		wreg
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:        1 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_high_isr
  3466 ;;		_KController
  3467 ;;		_FrontController
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text18
  3472  001CCA                     __ptext18:
  3473                           	opt stack 0
  3474  001CCA                     _moveMouse:
  3475                           	opt stack 25
  3476                           
  3477                           ;incstack = 0
  3478                           ;moveMouse@action stored from wreg
  3479  001CCA  6E49               	movwf	moveMouse@action,c
  3480                           
  3481                           ;interrupts.c: 323: LATC = action;
  3482  001CCC  C049  FF8B         	movff	moveMouse@action,3979	;volatile
  3483  001CD0  0012               	return		;funcret
  3484  001CD2                     __end_of_moveMouse:
  3485                           	opt stack 0
  3486                           pclatu	equ	0xFFB
  3487                           pclath	equ	0xFFA
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           intcon2	equ	0xFF1
  3496                           postinc0	equ	0xFEE
  3497                           fsr0h	equ	0xFEA
  3498                           fsr0l	equ	0xFE9
  3499                           wreg	equ	0xFE8
  3500                           fsr1h	equ	0xFE2
  3501                           fsr1l	equ	0xFE1
  3502                           bsr	equ	0xFE0
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           fsr2h	equ	0xFDA
  3506                           fsr2l	equ	0xFD9
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function _motorCounterUpdate *****************
  3510 ;; Defined at:
  3511 ;;		line 269 in file "interrupts.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  side            1    wreg     enum E4145
  3514 ;;  reverse         1   17[COMRAM] unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  side            1   18[COMRAM] enum E4145
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3526 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;Total ram usage:        2 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		_high_isr
  3536 ;;		_KController
  3537 ;;		_rotate
  3538 ;;		_Reversing
  3539 ;;		_forward
  3540 ;;		_FrontController
  3541 ;;		_smoothTurn
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text19
  3546  001800                     __ptext19:
  3547                           	opt stack 0
  3548  001800                     _motorCounterUpdate:
  3549                           	opt stack 24
  3550                           
  3551                           ;incstack = 0
  3552                           ;motorCounterUpdate@side stored from wreg
  3553  001800  6E4A               	movwf	motorCounterUpdate@side,c
  3554                           
  3555                           ;interrupts.c: 271: if(side == LEFT && reverse == 1)
  3556  001802  504A               	movf	motorCounterUpdate@side,w,c
  3557  001804  A4D8               	btfss	status,2,c
  3558  001806  D01B               	goto	i2l1483
  3559  001808  0449               	decf	motorCounterUpdate@reverse,w,c
  3560  00180A  B4D8               	btfsc	status,2,c
  3561  00180C  D00B               	goto	i2l1481
  3562  00180E  D017               	goto	i2l1483
  3563                           
  3564                           ;interrupts.c: 272: {
  3565                           ;interrupts.c: 273: switch(LMotorCounter)
  3566  001810  D009               	goto	i2l1481
  3567  001812                     i2l1471:
  3568  001812  0E02               	movlw	2
  3569  001814  D004               	goto	L13
  3570  001816                     i2l1473:
  3571  001816  0E04               	movlw	4
  3572  001818  D002               	goto	L13
  3573                           
  3574                           ;interrupts.c: 277: case 0b00000100: LMotorCounter = 0b00001000; break;
  3575  00181A  D03E               	goto	i2l1515
  3576                           
  3577                           ;interrupts.c: 278: case 0b00001000: LMotorCounter = 0b00000001; break;
  3578  00181C  D039               	goto	i2l1509
  3579  00181E                     L13:
  3580  00181E  6E33               	movwf	_LMotorCounter,c
  3581  001820  D068               	goto	i2l148
  3582                           
  3583                           ;interrupts.c: 279: default: LMotorCounter = 0b00000001;
  3584  001822  D036               	goto	i2l1509
  3585  001824                     i2l1481:
  3586  001824  5033               	movf	_LMotorCounter,w,c
  3587                           
  3588                           ; Switch size 1, requested type "space"
  3589                           ; Number of cases is 4, Range of values is 1 to 8
  3590                           ; switch strategies available:
  3591                           ; Name         Instructions Cycles
  3592                           ; simple_byte           13     7 (average)
  3593                           ;	Chosen strategy is simple_byte
  3594  001826  0A01               	xorlw	1	; case 1
  3595  001828  B4D8               	btfsc	status,2,c
  3596  00182A  D7F3               	goto	i2l1471
  3597  00182C  0A03               	xorlw	3	; case 2
  3598  00182E  B4D8               	btfsc	status,2,c
  3599  001830  D7F2               	goto	i2l1473
  3600  001832  0A06               	xorlw	6	; case 4
  3601  001834  B4D8               	btfsc	status,2,c
  3602  001836  D030               	goto	i2l1515
  3603  001838  0A0C               	xorlw	12	; case 8
  3604  00183A  D02A               	goto	i2l1509
  3605                           
  3606                           ;interrupts.c: 281: } else if(side == RIGHT && reverse == 1)
  3607  00183C  D05A               	goto	i2l148
  3608  00183E                     i2l1483:
  3609  00183E  044A               	decf	motorCounterUpdate@side,w,c
  3610  001840  A4D8               	btfss	status,2,c
  3611  001842  D01D               	goto	i2l1501
  3612  001844  0449               	decf	motorCounterUpdate@reverse,w,c
  3613  001846  B4D8               	btfsc	status,2,c
  3614  001848  D00B               	goto	i2l1499
  3615  00184A  D019               	goto	i2l1501
  3616                           
  3617                           ;interrupts.c: 282: {
  3618                           ;interrupts.c: 283: switch(RMotorCounter)
  3619  00184C  D009               	goto	i2l1499
  3620  00184E                     i2l1489:
  3621  00184E  0E08               	movlw	8
  3622  001850  D040               	goto	L21
  3623  001852                     i2l1491:
  3624  001852  0E01               	movlw	1
  3625  001854  D03E               	goto	L21
  3626  001856                     i2l1493:
  3627  001856  0E02               	movlw	2
  3628  001858  D03C               	goto	L21
  3629  00185A                     i2l1495:
  3630  00185A  0E04               	movlw	4
  3631  00185C  D03A               	goto	L21
  3632                           
  3633                           ;interrupts.c: 289: default: RMotorCounter = 0b00001000;
  3634  00185E  D7F7               	goto	i2l1489
  3635  001860                     i2l1499:
  3636  001860  5034               	movf	_RMotorCounter,w,c
  3637                           
  3638                           ; Switch size 1, requested type "space"
  3639                           ; Number of cases is 4, Range of values is 1 to 8
  3640                           ; switch strategies available:
  3641                           ; Name         Instructions Cycles
  3642                           ; simple_byte           13     7 (average)
  3643                           ;	Chosen strategy is simple_byte
  3644  001862  0A01               	xorlw	1	; case 1
  3645  001864  B4D8               	btfsc	status,2,c
  3646  001866  D7F3               	goto	i2l1489
  3647  001868  0A03               	xorlw	3	; case 2
  3648  00186A  B4D8               	btfsc	status,2,c
  3649  00186C  D7F2               	goto	i2l1491
  3650  00186E  0A06               	xorlw	6	; case 4
  3651  001870  B4D8               	btfsc	status,2,c
  3652  001872  D7F1               	goto	i2l1493
  3653  001874  0A0C               	xorlw	12	; case 8
  3654  001876  B4D8               	btfsc	status,2,c
  3655  001878  D7F0               	goto	i2l1495
  3656  00187A  D7E9               	goto	i2l1489
  3657                           
  3658                           ;interrupts.c: 291: } else if(side == LEFT && reverse == 0)
  3659  00187C  D03A               	goto	i2l148
  3660  00187E                     i2l1501:
  3661  00187E  504A               	movf	motorCounterUpdate@side,w,c
  3662  001880  A4D8               	btfss	status,2,c
  3663  001882  D01B               	goto	i2l1519
  3664  001884  5049               	movf	motorCounterUpdate@reverse,w,c
  3665  001886  B4D8               	btfsc	status,2,c
  3666  001888  D009               	goto	i2l1517
  3667  00188A  D017               	goto	i2l1519
  3668                           
  3669                           ;interrupts.c: 292: {
  3670                           ;interrupts.c: 293: switch(LMotorCounter)
  3671  00188C  D007               	goto	i2l1517
  3672                           
  3673                           ;interrupts.c: 294: {
  3674                           ;interrupts.c: 295: case 0b00000001: LMotorCounter = 0b00001000; break;
  3675  00188E  D004               	goto	i2l1515
  3676  001890                     i2l1509:
  3677  001890  0E01               	movlw	1
  3678  001892  D7C5               	goto	L13
  3679                           
  3680                           ;interrupts.c: 297: case 0b00000100: LMotorCounter = 0b00000010; break;
  3681  001894  D7BE               	goto	i2l1471
  3682                           
  3683                           ;interrupts.c: 298: case 0b00001000: LMotorCounter = 0b00000100; break;
  3684  001896  D7BF               	goto	i2l1473
  3685  001898                     i2l1515:
  3686  001898  0E08               	movlw	8
  3687  00189A  D7C1               	goto	L13
  3688  00189C                     i2l1517:
  3689  00189C  5033               	movf	_LMotorCounter,w,c
  3690                           
  3691                           ; Switch size 1, requested type "space"
  3692                           ; Number of cases is 4, Range of values is 1 to 8
  3693                           ; switch strategies available:
  3694                           ; Name         Instructions Cycles
  3695                           ; simple_byte           13     7 (average)
  3696                           ;	Chosen strategy is simple_byte
  3697  00189E  0A01               	xorlw	1	; case 1
  3698  0018A0  B4D8               	btfsc	status,2,c
  3699  0018A2  D7FA               	goto	i2l1515
  3700  0018A4  0A03               	xorlw	3	; case 2
  3701  0018A6  B4D8               	btfsc	status,2,c
  3702  0018A8  D7F3               	goto	i2l1509
  3703  0018AA  0A06               	xorlw	6	; case 4
  3704  0018AC  B4D8               	btfsc	status,2,c
  3705  0018AE  D7B1               	goto	i2l1471
  3706  0018B0  0A0C               	xorlw	12	; case 8
  3707  0018B2  B4D8               	btfsc	status,2,c
  3708  0018B4  D7B0               	goto	i2l1473
  3709  0018B6  D7F0               	goto	i2l1515
  3710                           
  3711                           ;interrupts.c: 301: } else if(side == RIGHT && reverse == 0)
  3712  0018B8  D01C               	goto	i2l148
  3713  0018BA                     i2l1519:
  3714  0018BA  044A               	decf	motorCounterUpdate@side,w,c
  3715  0018BC  A4D8               	btfss	status,2,c
  3716  0018BE  D019               	goto	i2l148
  3717  0018C0  5049               	movf	motorCounterUpdate@reverse,w,c
  3718  0018C2  B4D8               	btfsc	status,2,c
  3719  0018C4  D009               	goto	i2l1535
  3720  0018C6  D015               	goto	i2l148
  3721                           
  3722                           ;interrupts.c: 302: {
  3723                           ;interrupts.c: 303: switch(RMotorCounter)
  3724  0018C8  D007               	goto	i2l1535
  3725                           
  3726                           ;interrupts.c: 304: {
  3727                           ;interrupts.c: 305: case 0b00000001: RMotorCounter = 0b00000010; break;
  3728  0018CA  D7C5               	goto	i2l1493
  3729                           
  3730                           ;interrupts.c: 306: case 0b00000010: RMotorCounter = 0b00000100; break;
  3731  0018CC  D7C6               	goto	i2l1495
  3732                           
  3733                           ;interrupts.c: 307: case 0b00000100: RMotorCounter = 0b00001000; break;
  3734  0018CE  D7BF               	goto	i2l1489
  3735                           
  3736                           ;interrupts.c: 308: case 0b00001000: RMotorCounter = 0b00000001; break;
  3737  0018D0  D7C0               	goto	i2l1491
  3738  0018D2                     L21:
  3739  0018D2  6E34               	movwf	_RMotorCounter,c
  3740  0018D4  D00E               	goto	i2l148
  3741                           
  3742                           ;interrupts.c: 309: default: RMotorCounter = 0b00000001;
  3743  0018D6  D7BD               	goto	i2l1491
  3744  0018D8                     i2l1535:
  3745  0018D8  5034               	movf	_RMotorCounter,w,c
  3746                           
  3747                           ; Switch size 1, requested type "space"
  3748                           ; Number of cases is 4, Range of values is 1 to 8
  3749                           ; switch strategies available:
  3750                           ; Name         Instructions Cycles
  3751                           ; simple_byte           13     7 (average)
  3752                           ;	Chosen strategy is simple_byte
  3753  0018DA  0A01               	xorlw	1	; case 1
  3754  0018DC  B4D8               	btfsc	status,2,c
  3755  0018DE  D7BB               	goto	i2l1493
  3756  0018E0  0A03               	xorlw	3	; case 2
  3757  0018E2  B4D8               	btfsc	status,2,c
  3758  0018E4  D7BA               	goto	i2l1495
  3759  0018E6  0A06               	xorlw	6	; case 4
  3760  0018E8  B4D8               	btfsc	status,2,c
  3761  0018EA  D7B1               	goto	i2l1489
  3762  0018EC  0A0C               	xorlw	12	; case 8
  3763  0018EE  D7B1               	goto	i2l1491
  3764  0018F0  D000               	goto	i2l148
  3765  0018F2                     i2l148:
  3766  0018F2  0012               	return		;funcret
  3767  0018F4                     __end_of_motorCounterUpdate:
  3768                           	opt stack 0
  3769                           pclatu	equ	0xFFB
  3770                           pclath	equ	0xFFA
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           intcon	equ	0xFF2
  3778                           intcon2	equ	0xFF1
  3779                           postinc0	equ	0xFEE
  3780                           fsr0h	equ	0xFEA
  3781                           fsr0l	equ	0xFE9
  3782                           wreg	equ	0xFE8
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           bsr	equ	0xFE0
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _merge *****************
  3793 ;; Defined at:
  3794 ;;		line 314 in file "interrupts.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  left            1    wreg     unsigned char 
  3797 ;;  right           1   17[COMRAM] unsigned char 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  left            1   18[COMRAM] unsigned char 
  3800 ;;  merged          1   19[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      unsigned char 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        3 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_high_isr
  3820 ;;		_KController
  3821 ;;		_FrontController
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text20
  3826  001CB0                     __ptext20:
  3827                           	opt stack 0
  3828  001CB0                     _merge:
  3829                           	opt stack 25
  3830                           
  3831                           ;incstack = 0
  3832                           ;merge@left stored from wreg
  3833  001CB0  6E4A               	movwf	merge@left,c
  3834                           
  3835                           ;interrupts.c: 316: unsigned char merged;
  3836                           ;interrupts.c: 317: merged = left + (right << 4);
  3837  001CB2  3849               	swapf	merge@right,w,c
  3838  001CB4  0BF0               	andlw	240
  3839  001CB6  244A               	addwf	merge@left,w,c
  3840  001CB8  6E4B               	movwf	merge@merged,c
  3841                           
  3842                           ;interrupts.c: 318: return merged;
  3843  001CBA  504B               	movf	merge@merged,w,c
  3844  001CBC  D000               	goto	i2l151
  3845  001CBE                     i2l151:
  3846  001CBE  0012               	return		;funcret
  3847  001CC0                     __end_of_merge:
  3848                           	opt stack 0
  3849                           pclatu	equ	0xFFB
  3850                           pclath	equ	0xFFA
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodh	equ	0xFF4
  3856                           prodl	equ	0xFF3
  3857                           intcon	equ	0xFF2
  3858                           intcon2	equ	0xFF1
  3859                           postinc0	equ	0xFEE
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           bsr	equ	0xFE0
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _ABS *****************
  3873 ;; Defined at:
  3874 ;;		line 327 in file "interrupts.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  x               2   17[COMRAM] int 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  2   17[COMRAM] int 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3888 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;Total ram usage:        2 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_KController
  3898 ;;		_FrontController
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text21
  3903  001C96                     __ptext21:
  3904                           	opt stack 0
  3905  001C96                     _ABS:
  3906                           	opt stack 24
  3907                           
  3908                           ;interrupts.c: 329: if(x<0) x = -x;
  3909                           
  3910                           ;incstack = 0
  3911  001C96  AE4A               	btfss	ABS@x+1,7,c
  3912  001C98  D005               	goto	i2l1547
  3913  001C9A  6C49               	negf	ABS@x,c
  3914  001C9C  1E4A               	comf	ABS@x+1,f,c
  3915  001C9E  B0D8               	btfsc	status,0,c
  3916  001CA0  2A4A               	incf	ABS@x+1,f,c
  3917  001CA2  D000               	goto	i2l1547
  3918  001CA4                     i2l1547:
  3919                           
  3920                           ;interrupts.c: 330: return x;
  3921  001CA4  C049  F049         	movff	ABS@x,?_ABS
  3922  001CA8  C04A  F04A         	movff	ABS@x+1,?_ABS+1
  3923  001CAC  D000               	goto	i2l158
  3924  001CAE                     i2l158:
  3925  001CAE  0012               	return		;funcret
  3926  001CB0                     __end_of_ABS:
  3927                           	opt stack 0
  3928                           pclatu	equ	0xFFB
  3929                           pclath	equ	0xFFA
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           intcon	equ	0xFF2
  3937                           intcon2	equ	0xFF1
  3938                           postinc0	equ	0xFEE
  3939                           fsr0h	equ	0xFEA
  3940                           fsr0l	equ	0xFE9
  3941                           wreg	equ	0xFE8
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           bsr	equ	0xFE0
  3945                           postinc2	equ	0xFDE
  3946                           postdec2	equ	0xFDD
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           pclatu	equ	0xFFB
  3951                           pclath	equ	0xFFA
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           fsr0h	equ	0xFEA
  3962                           fsr0l	equ	0xFE9
  3963                           wreg	equ	0xFE8
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           bsr	equ	0xFE0
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973                           	psect	rparam
  3974  0000                     pclatu	equ	0xFFB
  3975                           pclath	equ	0xFFA
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon	equ	0xFF2
  3983                           intcon2	equ	0xFF1
  3984                           postinc0	equ	0xFEE
  3985                           fsr0h	equ	0xFEA
  3986                           fsr0l	equ	0xFE9
  3987                           wreg	equ	0xFE8
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           bsr	equ	0xFE0
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     39      95
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8243
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1470
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2082
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1448
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     27      5F       1       74.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4      34        0.0%
DATA                 0      0      D4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 01 17:48:09 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l320 1BB8                             l321 1BC0                             l314 162A  
                           l307 15C4                             l324 1BEC                             l325 1BF4  
                           l328 1B8C                             l521 1A98                             l293 1C5C  
                           l279 1AC8                             l288 1C48                             _ABS 1C96  
                  __CFG_CPB$OFF 000000                             _MAX 1BC2                             _MIN 1B8E  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1C5E                    _rotatingSide 0037  
                           wreg 000FE8                            ABS@x 0049                            ?_ABS 0049  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l2013 15D4                            l2023 1612  
                          l2033 16C6                            l2017 15EE                            l2019 15F8  
                          l2037 16D0                            l2059 1C34                            l1921 1A2C  
                          l1913 1A00                            l1931 1A68                            l1923 1A36  
                          l1907 19E8                            l1919 1A1E                            l1935 1A78  
                          l1945 1AB0                            l1939 1A8E                            l1971 134A  
                          l1957 1C56                            l1981 14EC                            l1965 1326  
                          l1975 13B8                            l1985 1546                            l1977 14D6  
                          l1987 15AE                            _LATC 000F8B                            u1660 1324  
                          u1670 1348                            u1755 1638                            u1787 1AB8  
                          _main 1C1E                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1B1A           __end_of_setCorrection 19CA                           ??_ABS 004B  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0038                 __end_of___awdiv 1A9A                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l107 12C8                           i2l151 1CBE  
                         i2l162 17FE                           i2l148 18F2                           i2l158 1CAE  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1CC0  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1A9A  
                         _merge 1CB0                 __end_of_forward 1C7A                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0038  
             _ControllerCounter 0011                 __initialization 1BF6                    __end_of_main 1C40  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0049                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1501 187E                          i2l1515 1898  
                        i2l1509 1890                          i2l1517 189C                          i2l1613 178C  
                        i2l1535 18D8                          i2l1519 18BA                          i2l1471 1812  
                        i2l1623 17BE                          i2l1631 17E8                          i2l1473 1816  
                        i2l1481 1824                          i2l1625 17CE                          i2l1801 127E  
                        i2l1547 1CA4                          i2l1491 1852                          i2l1483 183E  
                        i2l1619 17AA                          i2l1731 10D6                          i2l1723 10A4  
                        i2l1811 12C0                          i2l1493 1856                          i2l1629 17E2  
                        i2l1645 1B38                          i2l1733 10E6                          i2l1495 185A  
                        i2l1647 1B4E                          i2l1807 129E                          i2l1743 1106  
                        i2l1727 10B8                          i2l1719 1090                          i2l1489 184E  
                        i2l1737 10F4                          i2l1809 12A8                          i2l1499 1860  
                        i2l1763 118A                          i2l1755 115E                          i2l1747 1128  
                        i2l1765 1194                          i2l1757 116E                          i2l1599 1712  
                        i2l1791 1234                          i2l1775 11C6                          i2l1767 119A  
                        i2l1777 11D0                          i2l1769 11AA                          i2l1779 11D6  
                        i2l1789 1222                          i2l1799 1274                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 004B                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 1302                          ___wmul 1B56  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 002B  
                        _errorP 002D                          delay@x 0083                          clear_0 1BFC  
              ___awdiv@quotient 0086                          _rotate 1B1A              __size_of_Reversing 001C  
                  __pdataCOMRAM 005F                       ??_forward 004B                    __mediumconst 0000  
                     ??_low_isr 0038                  _ReverseCounter 001D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1C14                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0038                  __pcstackCOMRAM 0038                   __end_of_delay 1ADE  
                    _TurnedLeft 0025                 moveMouse@action 0049                   __end_of_merge 1CC0  
          KController@correctTo 004E      __end_of_motorCounterUpdate 18F4                  _ForwardCounter 0015  
                       ??_delay 0082                         ??_merge 004A              _AlgorithmSelection 1C40  
                  _LTurnCounter 0017               __end_of_Reversing 1C96                      _delay_time 0029  
             _MotorDelayCounter 0019             ?_AlgorithmSelection 0038            setCorrection@sideAvg 008A  
                       ?___wmul 0080              __size_of_moveMouse 0008                         ?_rotate 0038  
                       _INTCON2 000FF1                         _OSCTUNE 000F9B            ??_AlgorithmSelection 0080  
                     ?_high_isr 0038                         _Deadend 0013                   _LMotorCounter 0033  
                       _InitApp 1ADE                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 19CA                 __size_of___wmul 0038                    __psmallconst 1000  
                       __pcinit 1BF6                         __ramtop 1000                         __ptext0 1C1E  
                       __ptext1 18F4                         __ptext2 15C6                         __ptext3 1302  
                       __ptext4 1B56                         __ptext5 19CA                         __ptext6 1B8E  
                       __ptext7 1BC2                         __ptext8 1ADE                         __ptext9 1A9A  
               __size_of_rotate 003C                    __size_of_ABS 001A                    __size_of_MAX 0034  
                  __size_of_MIN 0034                         _forward 1C5E                         delay@ms 0080  
                       _low_isr 0018                   ?_sensorUpdate 0038                      ??_high_isr 0051  
                __pintcode_body 1006          __size_of_setCorrection 00D6            end_of_initialization 1C14  
              _sensorCorrection 0001               __end_of_moveMouse 1CD2                   __Lmediumconst 0000  
                       int_func 1006                 _controllerSteps 005F                      _justTurned 0036  
          __size_of_KController 011A                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _TRISBbits 000F93                       _TRISEbits 000F96  
                ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1CCA                      _totalError 0031  
                  _RTurnCounter 001B  sensorComputation@getCorrection 008D                   _setCorrection 18F4  
                __end_of___wmul 1B8E                   __pidataCOMRAM 1CD2                     _TurnedRight 0027  
                __end_of_rotate 1B56             start_initialization 1BF6                     __end_of_ABS 1CB0  
                   __end_of_MAX 1BF6                     __end_of_MIN 1BC2              _motorCounterUpdate 1800  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0049                      merge@right 0049  
                     _Reversing 1C7A                  ?_setCorrection 0038                        ??___wmul 0084  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 004B                  _sensorLocation 1001  
          ??_motorCounterUpdate 004A                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 0023       sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0  
             __size_of_high_isr 12FA                        ?_InitApp 0038               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 0038                       _algorithm 0035                       __pintcode 0008  
         setCorrection@frontAvg 008C          motorCounterUpdate@side 004A                        ?___awdiv 0080  
          __end_of_sensorUpdate 16E6          __end_of_sensorLocation 1005                     __pintcodelo 0018  
                   __smallconst 1000                        ?_forward 0038                        ?_low_isr 0038  
                     _oldErrorP 002F                  __size_of_delay 0044     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 0084                       _moveMouse 1CCA  
                      i2u104_40 1722                        i2u120_40 106A                        i2u105_40 1732  
                      i2u121_40 107A                        i2u122_40 109E                        i2u107_40 17BA  
                      i2u123_40 10B2                        i2u124_40 10C6                        i2u109_40 17DE  
                      i2u142_40 1244                        i2u118_40 1048                        i2u143_40 1254  
                      i2u119_40 1056                        i2u144_40 1264                        i2u137_40 11E6  
                      i2u138_40 11F6                 ??_setCorrection 0088                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0034  
                    rotate@side 004B                   ??_KController 004C                      ?_moveMouse 0038  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 004A  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 004B              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0021                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1C40                        __ptext11 1CC0  
                      __ptext20 1CB0                        __ptext21 1C96                        __ptext14 1B1A  
                      __ptext15 1C5E                        __ptext16 1C7A                        __ptext17 16E6  
                      __ptext18 1CCA                        __ptext19 1800                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001F           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1800               _sensorComputation 1302  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 15C6                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0049  
               KController@diff 004F       __end_of_sensorComputation 15C6                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0049                     _KController 16E6  
