

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 29 18:28:09 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           	psect	idataCOMRAM
    38  001DEE                     __pidataCOMRAM:
    39                           	opt stack 0
    40                           
    41                           ;initializer for _TurnLeft
    42  001DEE  00C8               	dw	200
    43                           
    44                           ;initializer for _TurnRight
    45  001DF0  00C8               	dw	200
    46                           
    47                           ;initializer for _controllerSteps
    48  001DF2  0A                 	db	10
    49                           
    50                           	psect	smallconst
    51  001000                     __psmallconst:
    52                           	opt stack 0
    53  001000  00                 	db	0
    54  001001                     _sensorCorrection:
    55                           	opt stack 0
    56  001001  00                 	db	0
    57  001002  00                 	db	0
    58  001003  15                 	db	21
    59  001004  15                 	db	21
    60  001005                     __end_of_sensorCorrection:
    61                           	opt stack 0
    62  001005                     _sensorLocation:
    63                           	opt stack 0
    64  001005  1B                 	db	27
    65  001006  2B                 	db	43
    66  001007  1F                 	db	31
    67  001008  33                 	db	51
    68  001009                     __end_of_sensorLocation:
    69                           	opt stack 0
    70  0000                     _ADCON0	set	4034
    71  0000                     _ADCON0bits	set	4034
    72  0000                     _ADCON1	set	4033
    73  0000                     _ADCON2	set	4032
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADRESL	set	4035
    76  0000                     _INTCON	set	4082
    77  0000                     _INTCON2	set	4081
    78  0000                     _INTCONbits	set	4082
    79  0000                     _LATC	set	3979
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCTUNE	set	3995
    82  0000                     _T0CON	set	4053
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISEbits	set	3990
    86                           
    87                           ; #config settings
    88  001009  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           	psect	cinit
    91  001C7E                     __pcinit:
    92                           	opt stack 0
    93  001C7E                     start_initialization:
    94                           	opt stack 0
    95  001C7E                     __initialization:
    96                           	opt stack 0
    97                           
    98                           ; Clear objects allocated to COMRAM (41 bytes)
    99  001C7E  EE00  F02B         	lfsr	0,__pbssCOMRAM
   100  001C82  0E29               	movlw	41
   101  001C84                     clear_0:
   102  001C84  6AEE               	clrf	postinc0,c
   103  001C86  06E8               	decf	wreg,f,c
   104  001C88  E1FD               	bnz	clear_0
   105                           
   106                           ; Initialize objects allocated to COMRAM (5 bytes)
   107                           ; load TBLPTR registers with __pidataCOMRAM
   108  001C8A  0EEE               	movlw	low __pidataCOMRAM
   109  001C8C  6EF6               	movwf	tblptrl,c
   110  001C8E  0E1D               	movlw	high __pidataCOMRAM
   111  001C90  6EF7               	movwf	tblptrh,c
   112  001C92  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   113  001C94  6EF8               	movwf	tblptru,c
   114  001C96  EE00  F054         	lfsr	0,__pdataCOMRAM
   115  001C9A  EE10 F005          	lfsr	1,5
   116  001C9E                     copy_data0:
   117  001C9E  0009               	tblrd		*+
   118  001CA0  CFF5 FFEE          	movff	tablat,postinc0
   119  001CA4  50E5               	movf	postdec1,w,c
   120  001CA6  50E1               	movf	fsr1l,w,c
   121  001CA8  E1FA               	bnz	copy_data0
   122  001CAA                     end_of_initialization:
   123                           	opt stack 0
   124  001CAA                     __end_of__initialization:
   125                           	opt stack 0
   126  001CAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   127  001CAC  6EF8               	movwf	tblptru,c
   128  001CAE  0100               	movlb	0
   129  001CB0  EFDC  F00E         	goto	_main	;jump to C main() function
   130                           tblptru	equ	0xFF8
   131                           tblptrh	equ	0xFF7
   132                           tblptrl	equ	0xFF6
   133                           tablat	equ	0xFF5
   134                           postinc0	equ	0xFEE
   135                           wreg	equ	0xFE8
   136                           postdec1	equ	0xFE5
   137                           fsr1l	equ	0xFE1
   138                           
   139                           	psect	bssCOMRAM
   140  00002B                     __pbssCOMRAM:
   141                           	opt stack 0
   142  00002B                     _sensorValue:
   143                           	opt stack 0
   144  00002B                     	ds	8
   145  000033                     _Deadend:
   146                           	opt stack 0
   147  000033                     	ds	2
   148  000035                     _ForwardCounter:
   149                           	opt stack 0
   150  000035                     	ds	2
   151  000037                     _LTurnCounter:
   152                           	opt stack 0
   153  000037                     	ds	2
   154  000039                     _MotorDelayCounter:
   155                           	opt stack 0
   156  000039                     	ds	2
   157  00003B                     _RTurnCounter:
   158                           	opt stack 0
   159  00003B                     	ds	2
   160  00003D                     _ReverseCounter:
   161                           	opt stack 0
   162  00003D                     	ds	2
   163  00003F                     _RotateCounter:
   164                           	opt stack 0
   165  00003F                     	ds	2
   166  000041                     _TurnedLeft:
   167                           	opt stack 0
   168  000041                     	ds	2
   169  000043                     _TurnedRight:
   170                           	opt stack 0
   171  000043                     	ds	2
   172  000045                     _delay_time:
   173                           	opt stack 0
   174  000045                     	ds	2
   175  000047                     _errorD:
   176                           	opt stack 0
   177  000047                     	ds	2
   178  000049                     _errorP:
   179                           	opt stack 0
   180  000049                     	ds	2
   181  00004B                     _oldErrorP:
   182                           	opt stack 0
   183  00004B                     	ds	2
   184  00004D                     _totalError:
   185                           	opt stack 0
   186  00004D                     	ds	2
   187  00004F                     _LMotorCounter:
   188                           	opt stack 0
   189  00004F                     	ds	1
   190  000050                     _RMotorCounter:
   191                           	opt stack 0
   192  000050                     	ds	1
   193  000051                     _algorithm:
   194                           	opt stack 0
   195  000051                     	ds	1
   196  000052                     _justTurned:
   197                           	opt stack 0
   198  000052                     	ds	1
   199  000053                     _rotatingSide:
   200                           	opt stack 0
   201  000053                     	ds	1
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec1	equ	0xFE5
   209                           fsr1l	equ	0xFE1
   210                           
   211                           	psect	dataCOMRAM
   212  000054                     __pdataCOMRAM:
   213                           	opt stack 0
   214  000054                     _TurnLeft:
   215                           	opt stack 0
   216  000054                     	ds	2
   217  000056                     _TurnRight:
   218                           	opt stack 0
   219  000056                     	ds	2
   220  000058                     _controllerSteps:
   221                           	opt stack 0
   222  000058                     	ds	1
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	cstackBANK0
   233  000080                     __pcstackBANK0:
   234                           	opt stack 0
   235  000080                     ?___wmul:
   236                           	opt stack 0
   237  000080                     ?___awdiv:
   238                           	opt stack 0
   239  000080                     delay@x:
   240                           	opt stack 0
   241  000080                     ___wmul@multiplier:
   242                           	opt stack 0
   243  000080                     ___awdiv@dividend:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x0
   247  000080                     	ds	2
   248  000082                     ___wmul@multiplicand:
   249                           	opt stack 0
   250  000082                     ___awdiv@divisor:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x2
   254  000082                     	ds	2
   255  000084                     ?_MIN:
   256                           	opt stack 0
   257  000084                     ?_MAX:
   258                           	opt stack 0
   259  000084                     ___awdiv@counter:
   260                           	opt stack 0
   261  000084                     MIN@a:
   262                           	opt stack 0
   263  000084                     MAX@a:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x4
   267  000084                     	ds	1
   268  000085                     ___awdiv@sign:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x5
   272  000085                     	ds	1
   273  000086                     MIN@b:
   274                           	opt stack 0
   275  000086                     MAX@b:
   276                           	opt stack 0
   277  000086                     ___awdiv@quotient:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x6
   281  000086                     	ds	2
   282  000088                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x8
   286  000088                     	ds	2
   287  00008A                     ??_sensorComputation:
   288                           
   289                           ; 0 bytes @ 0xA
   290  00008A                     	ds	2
   291  00008C                     sensorComputation@max:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0xC
   295  00008C                     	ds	2
   296  00008E                     sensorComputation@min:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@sum:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@i:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@j:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     ??_sensorUpdate:
   317                           
   318                           ; 0 bytes @ 0x16
   319  000096                     	ds	6
   320  00009C                     sensorUpdate@sensorTemp:
   321                           	opt stack 0
   322                           
   323                           ; 80 bytes @ 0x1C
   324  00009C                     	ds	80
   325  0000EC                     sensorUpdate@i:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x6C
   329  0000EC                     	ds	2
   330  0000EE                     sensorUpdate@j:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x6E
   334  0000EE                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	cstackCOMRAM
   345  000001                     __pcstackCOMRAM:
   346                           	opt stack 0
   347  000001                     ??_low_isr:
   348  000001                     
   349                           ; 0 bytes @ 0x0
   350  000001                     	ds	17
   351  000012                     ?_ABS:
   352                           	opt stack 0
   353  000012                     motorCounterUpdate@reverse:
   354                           	opt stack 0
   355  000012                     merge@right:
   356                           	opt stack 0
   357  000012                     moveMouse@action:
   358                           	opt stack 0
   359  000012                     ABS@x:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x11
   363  000012                     	ds	1
   364  000013                     motorCounterUpdate@side:
   365                           	opt stack 0
   366  000013                     merge@left:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x12
   370  000013                     	ds	1
   371  000014                     merge@merged:
   372                           	opt stack 0
   373  000014                     rotate@side:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x13
   377  000014                     	ds	1
   378  000015                     ??_KController:
   379                           
   380                           ; 0 bytes @ 0x14
   381  000015                     	ds	2
   382  000017                     KController@correctTo:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x16
   386  000017                     	ds	1
   387  000018                     KController@diff:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x17
   391  000018                     	ds	2
   392  00001A                     ??_high_isr:
   393                           
   394                           ; 0 bytes @ 0x19
   395  00001A                     	ds	14
   396  000028                     delay@ms:
   397                           	opt stack 0
   398  000028                     ___wmul@product:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x27
   402  000028                     	ds	2
   403  00002A                     ??_MIN:
   404  00002A                     ??_MAX:
   405  00002A                     ??_delay:
   406                           
   407                           ; 0 bytes @ 0x29
   408  00002A                     	ds	1
   409  00002B                     tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1l	equ	0xFE1
   417                           
   418                           ; 0 bytes @ 0x2A
   419 ;;
   420 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   421 ;;
   422 ;; *************** function _main *****************
   423 ;; Defined at:
   424 ;;		line 41 in file "main.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;		None               void
   431 ;; Registers used:
   432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels required when called:    7
   444 ;; This function calls:
   445 ;;		_ConfigureOscillator
   446 ;;		_InitApp
   447 ;;		_sensorUpdate
   448 ;; This function is called by:
   449 ;;		Startup code after reset
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           	psect	text0
   454  001DB8                     __ptext0:
   455                           	opt stack 0
   456  001DB8                     _main:
   457                           	opt stack 24
   458                           
   459                           ;main.c: 44: ConfigureOscillator();
   460                           
   461                           ;incstack = 0
   462  001DB8  ECEE  F00E         	call	_ConfigureOscillator	;wreg free
   463                           
   464                           ;main.c: 47: InitApp();
   465  001DBC  EC03  F00E         	call	_InitApp	;wreg free
   466  001DC0  D000               	goto	l2039
   467  001DC2                     l2039:
   468                           
   469                           ;main.c: 50: {
   470                           ;main.c: 51: sensorUpdate();
   471  001DC2  ECF7  F00B         	call	_sensorUpdate	;wreg free
   472  001DC6  D7FD               	goto	l2039
   473  001DC8  EF51  F000         	goto	start
   474  001DCC                     __end_of_main:
   475                           	opt stack 0
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485 ;; *************** function _sensorUpdate *****************
   486 ;; Defined at:
   487 ;;		line 146 in file "user.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  sensorTemp     80   28[BANK0 ] int [10][4]
   492 ;;  j               2  110[BANK0 ] int 
   493 ;;  i               2  108[BANK0 ] int 
   494 ;; Return value:  Size  Location     Type
   495 ;;		None               void
   496 ;; Registers used:
   497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;Total ram usage:       90 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; Hardware stack levels required when called:    6
   510 ;; This function calls:
   511 ;;		___wmul
   512 ;;		_sensorComputation
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text1
   519  0017EE                     __ptext1:
   520                           	opt stack 0
   521  0017EE                     _sensorUpdate:
   522                           	opt stack 24
   523                           
   524                           ;user.c: 148: int i,j;
   525                           ;user.c: 149: int sensorTemp[4][10];
   526                           ;user.c: 152: for(i = 0; i < 10; i++)
   527                           
   528                           ;incstack = 0
   529  0017EE  0E00               	movlw	0
   530  0017F0  0100               	movlb	0	; () banked
   531  0017F2  6FED               	movwf	(sensorUpdate@i+1)& (0+255),b
   532  0017F4  0E00               	movlw	0
   533  0017F6  6FEC               	movwf	sensorUpdate@i& (0+255),b
   534                           
   535                           ; BSR set to: 0
   536  0017F8  0100               	movlb	0	; () banked
   537  0017FA  BFED               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   538  0017FC  D00A               	goto	l2005
   539  0017FE  0100               	movlb	0	; () banked
   540  001800  51ED               	movf	(sensorUpdate@i+1)& (0+255),w,b
   541  001802  E106               	bnz	u1710
   542  001804  0E0A               	movlw	10
   543  001806  0100               	movlb	0	; () banked
   544  001808  5DEC               	subwf	sensorUpdate@i& (0+255),w,b
   545  00180A  B0D8               	btfsc	status,0,c
   546  00180C  D0F2               	goto	l2033
   547  00180E  D001               	goto	l2005
   548  001810                     u1710:
   549                           
   550                           ; BSR set to: 0
   551  001810  D0F0               	goto	l2033
   552  001812                     l2005:
   553                           
   554                           ; BSR set to: 0
   555                           ;user.c: 153: {
   556                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   557  001812  0E00               	movlw	0
   558  001814  0100               	movlb	0	; () banked
   559  001816  6FEF               	movwf	(sensorUpdate@j+1)& (0+255),b
   560  001818  0E00               	movlw	0
   561  00181A  6FEE               	movwf	sensorUpdate@j& (0+255),b
   562                           
   563                           ; BSR set to: 0
   564  00181C  0100               	movlb	0	; () banked
   565  00181E  BFEF               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   566  001820  D00A               	goto	l2011
   567  001822  0100               	movlb	0	; () banked
   568  001824  51EF               	movf	(sensorUpdate@j+1)& (0+255),w,b
   569  001826  E106               	bnz	u1720
   570  001828  0E04               	movlw	4
   571  00182A  0100               	movlb	0	; () banked
   572  00182C  5DEE               	subwf	sensorUpdate@j& (0+255),w,b
   573  00182E  B0D8               	btfsc	status,0,c
   574  001830  D0D5               	goto	l2029
   575  001832  D001               	goto	l2011
   576  001834                     u1720:
   577                           
   578                           ; BSR set to: 0
   579  001834  D0D3               	goto	l2029
   580  001836                     l2011:
   581                           
   582                           ; BSR set to: 0
   583                           ;user.c: 155: {
   584                           ;user.c: 156: ADCON0 = sensorLocation[j];
   585  001836  0E05               	movlw	low _sensorLocation
   586  001838  0100               	movlb	0	; () banked
   587  00183A  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   588  00183C  6EF6               	movwf	tblptrl,c
   589  00183E  0E10               	movlw	high _sensorLocation
   590  001840  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   591  001842  6EF7               	movwf	tblptrh,c
   592  001844                     	if	0	;There are less than 3 active tblptr bytes
   593  001844                     	endif
   594  001844  0008               	tblrd		*
   595  001846  CFF5 FFC2          	movff	tablat,4034	;volatile
   596                           
   597                           ; BSR set to: 0
   598                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   599  00184A  82C2               	bsf	4034,1,c	;volatile
   600                           
   601                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   602  00184C  D000               	goto	l302
   603  00184E                     l302:
   604  00184E  B2C2               	btfsc	4034,1,c	;volatile
   605  001850  D7FE               	goto	l302
   606                           
   607                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   608  001852  CFC3 F096          	movff	4035,??_sensorUpdate	;volatile
   609  001856  0E06               	movlw	6
   610  001858  0100               	movlb	0	; () banked
   611  00185A  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   612  00185C                     u1745:
   613  00185C  0100               	movlb	0	; () banked
   614  00185E  90D8               	bcf	status,0,c
   615  001860  3396               	rrcf	??_sensorUpdate& (0+255),f,b
   616  001862  0100               	movlb	0	; () banked
   617  001864  2F97               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   618  001866  D7FA               	goto	u1745
   619  001868  0100               	movlb	0	; () banked
   620  00186A  5196               	movf	??_sensorUpdate& (0+255),w,b
   621  00186C  CFC4 F098          	movff	4036,??_sensorUpdate+2	;volatile
   622  001870  0100               	movlb	0	; () banked
   623  001872  6B99               	clrf	(??_sensorUpdate+3)& (0+255),b
   624  001874  0100               	movlb	0	; () banked
   625  001876  90D8               	bcf	status,0,c
   626  001878  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   627  00187A  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   628  00187C  0100               	movlb	0	; () banked
   629  00187E  90D8               	bcf	status,0,c
   630  001880  3798               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   631  001882  3799               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   632  001884  0100               	movlb	0	; () banked
   633  001886  2798               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   634  001888  0E00               	movlw	0
   635  00188A  2399               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   636  00188C  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   637  001890  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   638  001894  0E00               	movlw	0
   639  001896  0100               	movlb	0	; () banked
   640  001898  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   641  00189A  0E14               	movlw	20
   642  00189C  6F82               	movwf	___wmul@multiplicand& (0+255),b
   643  00189E  EC5A  F00E         	call	___wmul	;wreg free
   644  0018A2  0E9C               	movlw	low sensorUpdate@sensorTemp
   645  0018A4  0100               	movlb	0	; () banked
   646  0018A6  6F9A               	movwf	(??_sensorUpdate+4)& (0+255),b
   647  0018A8  0E00               	movlw	high sensorUpdate@sensorTemp
   648  0018AA  0100               	movlb	0	; () banked
   649  0018AC  6F9B               	movwf	(??_sensorUpdate+5)& (0+255),b
   650  0018AE  0100               	movlb	0	; () banked
   651  0018B0  5180               	movf	?___wmul& (0+255),w,b
   652  0018B2  0100               	movlb	0	; () banked
   653  0018B4  279A               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   654  0018B6  0100               	movlb	0	; () banked
   655  0018B8  5181               	movf	(?___wmul+1)& (0+255),w,b
   656  0018BA  0100               	movlb	0	; () banked
   657  0018BC  239B               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   658  0018BE  90D8               	bcf	status,0,c
   659  0018C0  0100               	movlb	0	; () banked
   660  0018C2  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   661  0018C4  6ED9               	movwf	fsr2l,c
   662  0018C6  0100               	movlb	0	; () banked
   663  0018C8  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   664  0018CA  6EDA               	movwf	fsr2h,c
   665  0018CC  0100               	movlb	0	; () banked
   666  0018CE  519A               	movf	(??_sensorUpdate+4)& (0+255),w,b
   667  0018D0  26D9               	addwf	fsr2l,f,c
   668  0018D2  0100               	movlb	0	; () banked
   669  0018D4  519B               	movf	(??_sensorUpdate+5)& (0+255),w,b
   670  0018D6  22DA               	addwfc	fsr2h,f,c
   671  0018D8  C098  FFDE         	movff	??_sensorUpdate+2,postinc2
   672  0018DC  C099  FFDD         	movff	??_sensorUpdate+3,postdec2
   673                           
   674                           ; BSR set to: 0
   675                           ;user.c: 163: if(j == 0 || j == 3)
   676  0018E0  0100               	movlb	0	; () banked
   677  0018E2  51EE               	movf	sensorUpdate@j& (0+255),w,b
   678  0018E4  0100               	movlb	0	; () banked
   679  0018E6  11EF               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   680  0018E8  B4D8               	btfsc	status,2,c
   681  0018EA  D007               	goto	l2021
   682                           
   683                           ; BSR set to: 0
   684  0018EC  0E03               	movlw	3
   685  0018EE  0100               	movlb	0	; () banked
   686  0018F0  19EE               	xorwf	sensorUpdate@j& (0+255),w,b
   687  0018F2  0100               	movlb	0	; () banked
   688  0018F4  11EF               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   689  0018F6  A4D8               	btfss	status,2,c
   690  0018F8  D033               	goto	l2023
   691  0018FA                     l2021:
   692                           
   693                           ; BSR set to: 0
   694                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   695  0018FA  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   696  0018FE  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   697  001902  0E00               	movlw	0
   698  001904  0100               	movlb	0	; () banked
   699  001906  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   700  001908  0E14               	movlw	20
   701  00190A  6F82               	movwf	___wmul@multiplicand& (0+255),b
   702  00190C  EC5A  F00E         	call	___wmul	;wreg free
   703  001910  0E9C               	movlw	low sensorUpdate@sensorTemp
   704  001912  0100               	movlb	0	; () banked
   705  001914  6F96               	movwf	??_sensorUpdate& (0+255),b
   706  001916  0E00               	movlw	high sensorUpdate@sensorTemp
   707  001918  0100               	movlb	0	; () banked
   708  00191A  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   709  00191C  0100               	movlb	0	; () banked
   710  00191E  5180               	movf	?___wmul& (0+255),w,b
   711  001920  0100               	movlb	0	; () banked
   712  001922  2796               	addwf	??_sensorUpdate& (0+255),f,b
   713  001924  0100               	movlb	0	; () banked
   714  001926  5181               	movf	(?___wmul+1)& (0+255),w,b
   715  001928  0100               	movlb	0	; () banked
   716  00192A  2397               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   717  00192C  90D8               	bcf	status,0,c
   718  00192E  0100               	movlb	0	; () banked
   719  001930  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   720  001932  6ED9               	movwf	fsr2l,c
   721  001934  0100               	movlb	0	; () banked
   722  001936  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   723  001938  6EDA               	movwf	fsr2h,c
   724  00193A  0100               	movlb	0	; () banked
   725  00193C  5196               	movf	??_sensorUpdate& (0+255),w,b
   726  00193E  26D9               	addwf	fsr2l,f,c
   727  001940  0100               	movlb	0	; () banked
   728  001942  5197               	movf	(??_sensorUpdate+1)& (0+255),w,b
   729  001944  22DA               	addwfc	fsr2h,f,c
   730  001946  0E01               	movlw	low _sensorCorrection
   731  001948  0100               	movlb	0	; () banked
   732  00194A  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   733  00194C  6EF6               	movwf	tblptrl,c
   734  00194E  0E10               	movlw	high _sensorCorrection
   735  001950  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   736  001952  6EF7               	movwf	tblptrh,c
   737  001954                     	if	0	;There are less than 3 active tblptr bytes
   738  001954                     	endif
   739  001954  0008               	tblrd		*
   740  001956  50F5               	movf	tablat,w,c
   741  001958  5EDE               	subwf	postinc2,f,c
   742  00195A  0E00               	movlw	0
   743  00195C  5ADD               	subwfb	postdec2,f,c
   744  00195E  D033               	goto	l2025
   745  001960                     l2023:
   746                           
   747                           ; BSR set to: 0
   748                           ;user.c: 165: else
   749                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   750  001960  C0EE  F080         	movff	sensorUpdate@j,___wmul@multiplier
   751  001964  C0EF  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   752  001968  0E00               	movlw	0
   753  00196A  0100               	movlb	0	; () banked
   754  00196C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   755  00196E  0E14               	movlw	20
   756  001970  6F82               	movwf	___wmul@multiplicand& (0+255),b
   757  001972  EC5A  F00E         	call	___wmul	;wreg free
   758  001976  0E9C               	movlw	low sensorUpdate@sensorTemp
   759  001978  0100               	movlb	0	; () banked
   760  00197A  6F96               	movwf	??_sensorUpdate& (0+255),b
   761  00197C  0E00               	movlw	high sensorUpdate@sensorTemp
   762  00197E  0100               	movlb	0	; () banked
   763  001980  6F97               	movwf	(??_sensorUpdate+1)& (0+255),b
   764  001982  0100               	movlb	0	; () banked
   765  001984  5180               	movf	?___wmul& (0+255),w,b
   766  001986  0100               	movlb	0	; () banked
   767  001988  2796               	addwf	??_sensorUpdate& (0+255),f,b
   768  00198A  0100               	movlb	0	; () banked
   769  00198C  5181               	movf	(?___wmul+1)& (0+255),w,b
   770  00198E  0100               	movlb	0	; () banked
   771  001990  2397               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   772  001992  90D8               	bcf	status,0,c
   773  001994  0100               	movlb	0	; () banked
   774  001996  35EC               	rlcf	sensorUpdate@i& (0+255),w,b
   775  001998  6ED9               	movwf	fsr2l,c
   776  00199A  0100               	movlb	0	; () banked
   777  00199C  35ED               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   778  00199E  6EDA               	movwf	fsr2h,c
   779  0019A0  0100               	movlb	0	; () banked
   780  0019A2  5196               	movf	??_sensorUpdate& (0+255),w,b
   781  0019A4  26D9               	addwf	fsr2l,f,c
   782  0019A6  0100               	movlb	0	; () banked
   783  0019A8  5197               	movf	(??_sensorUpdate+1)& (0+255),w,b
   784  0019AA  22DA               	addwfc	fsr2h,f,c
   785  0019AC  0E01               	movlw	low _sensorCorrection
   786  0019AE  0100               	movlb	0	; () banked
   787  0019B0  25EE               	addwf	sensorUpdate@j& (0+255),w,b
   788  0019B2  6EF6               	movwf	tblptrl,c
   789  0019B4  0E10               	movlw	high _sensorCorrection
   790  0019B6  21EF               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   791  0019B8  6EF7               	movwf	tblptrh,c
   792  0019BA                     	if	0	;There are less than 3 active tblptr bytes
   793  0019BA                     	endif
   794  0019BA  0008               	tblrd		*
   795  0019BC  50F5               	movf	tablat,w,c
   796  0019BE  26DE               	addwf	postinc2,f,c
   797  0019C0  0E00               	movlw	0
   798  0019C2  22DD               	addwfc	postdec2,f,c
   799  0019C4  D000               	goto	l2025
   800  0019C6                     l2025:
   801                           
   802                           ; BSR set to: 0
   803  0019C6  0100               	movlb	0	; () banked
   804  0019C8  4BEE               	infsnz	sensorUpdate@j& (0+255),f,b
   805  0019CA  2BEF               	incf	(sensorUpdate@j+1)& (0+255),f,b
   806                           
   807                           ; BSR set to: 0
   808  0019CC  0100               	movlb	0	; () banked
   809  0019CE  BFEF               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   810  0019D0  D732               	goto	l2011
   811  0019D2  0100               	movlb	0	; () banked
   812  0019D4  51EF               	movf	(sensorUpdate@j+1)& (0+255),w,b
   813  0019D6  E102               	bnz	l2029
   814  0019D8  D727               	goto	L1
   815  0019DA  D000               	goto	l2029
   816  0019DC                     l2029:
   817                           
   818                           ; BSR set to: 0
   819  0019DC  0100               	movlb	0	; () banked
   820  0019DE  4BEC               	infsnz	sensorUpdate@i& (0+255),f,b
   821  0019E0  2BED               	incf	(sensorUpdate@i+1)& (0+255),f,b
   822                           
   823                           ; BSR set to: 0
   824  0019E2  0100               	movlb	0	; () banked
   825  0019E4  BFED               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   826  0019E6  D715               	goto	l2005
   827  0019E8  0100               	movlb	0	; () banked
   828  0019EA  51ED               	movf	(sensorUpdate@i+1)& (0+255),w,b
   829  0019EC  E102               	bnz	l2033
   830  0019EE  D70A               	goto	L2
   831  0019F0  D000               	goto	l2033
   832  0019F2                     l2033:
   833                           
   834                           ; BSR set to: 0
   835                           ;user.c: 167: }
   836                           ;user.c: 168: }
   837                           ;user.c: 171: sensorComputation(sensorTemp);
   838  0019F2  0E9C               	movlw	low sensorUpdate@sensorTemp
   839  0019F4  0100               	movlb	0	; () banked
   840  0019F6  6F88               	movwf	sensorComputation@sensorTemp& (0+255),b
   841  0019F8  0E00               	movlw	high sensorUpdate@sensorTemp
   842  0019FA  0100               	movlb	0	; () banked
   843  0019FC  6F89               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   844  0019FE  ECAA  F009         	call	_sensorComputation	;wreg free
   845  001A02  0012               	return		;funcret
   846  001A04                     __end_of_sensorUpdate:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           postdec1	equ	0xFE5
   855                           fsr1l	equ	0xFE1
   856                           postinc2	equ	0xFDE
   857                           postdec2	equ	0xFDD
   858                           fsr2h	equ	0xFDA
   859                           fsr2l	equ	0xFD9
   860                           status	equ	0xFD8
   861                           
   862 ;; *************** function _sensorComputation *****************
   863 ;; Defined at:
   864 ;;		line 125 in file "user.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;  sensorTemp      2    8[BANK0 ] PTR int [10]
   867 ;;		 -> sensorUpdate@sensorTemp(80), 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  j               2   20[BANK0 ] int 
   870 ;;  i               2   18[BANK0 ] int 
   871 ;;  sum             2   16[BANK0 ] int 
   872 ;;  min             2   14[BANK0 ] int 
   873 ;;  max             2   12[BANK0 ] int 
   874 ;; Return value:  Size  Location     Type
   875 ;;		None               void
   876 ;; Registers used:
   877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   887 ;;Total ram usage:       14 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    5
   890 ;; This function calls:
   891 ;;		_MAX
   892 ;;		_MIN
   893 ;;		___awdiv
   894 ;;		___wmul
   895 ;; This function is called by:
   896 ;;		_sensorUpdate
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text2
   901  001354                     __ptext2:
   902                           	opt stack 0
   903  001354                     _sensorComputation:
   904                           	opt stack 24
   905                           
   906                           ;user.c: 127: int max,min,i,j,sum;
   907                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   908                           
   909                           ;incstack = 0
   910  001354  0E00               	movlw	0
   911  001356  0100               	movlb	0	; () banked
   912  001358  6F93               	movwf	(sensorComputation@i+1)& (0+255),b
   913  00135A  0E00               	movlw	0
   914  00135C  6F92               	movwf	sensorComputation@i& (0+255),b
   915                           
   916                           ; BSR set to: 0
   917  00135E  0100               	movlb	0	; () banked
   918  001360  BF93               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   919  001362  D00A               	goto	l1955
   920  001364  0100               	movlb	0	; () banked
   921  001366  5193               	movf	(sensorComputation@i+1)& (0+255),w,b
   922  001368  E106               	bnz	u1660
   923  00136A  0E04               	movlw	4
   924  00136C  0100               	movlb	0	; () banked
   925  00136E  5D92               	subwf	sensorComputation@i& (0+255),w,b
   926  001370  B0D8               	btfsc	status,0,c
   927  001372  D129               	goto	l295
   928  001374  D001               	goto	l1955
   929  001376                     u1660:
   930                           
   931                           ; BSR set to: 0
   932  001376  D127               	goto	l295
   933  001378                     l1955:
   934                           
   935                           ; BSR set to: 0
   936                           ;user.c: 129: {
   937                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   938  001378  0E00               	movlw	0
   939  00137A  0100               	movlb	0	; () banked
   940  00137C  6F95               	movwf	(sensorComputation@j+1)& (0+255),b
   941  00137E  0E00               	movlw	0
   942  001380  6F94               	movwf	sensorComputation@j& (0+255),b
   943                           
   944                           ; BSR set to: 0
   945  001382  0100               	movlb	0	; () banked
   946  001384  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   947  001386  D00A               	goto	l1961
   948  001388  0100               	movlb	0	; () banked
   949  00138A  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
   950  00138C  E106               	bnz	u1670
   951  00138E  0E0A               	movlw	10
   952  001390  0100               	movlb	0	; () banked
   953  001392  5D94               	subwf	sensorComputation@j& (0+255),w,b
   954  001394  B0D8               	btfsc	status,0,c
   955  001396  D0D3               	goto	l1971
   956  001398  D001               	goto	l1961
   957  00139A                     u1670:
   958                           
   959                           ; BSR set to: 0
   960  00139A  D0D1               	goto	l1971
   961  00139C                     l1961:
   962                           
   963                           ; BSR set to: 0
   964                           ;user.c: 131: {
   965                           ;user.c: 132: if(j == 0)
   966  00139C  0100               	movlb	0	; () banked
   967  00139E  5194               	movf	sensorComputation@j& (0+255),w,b
   968  0013A0  0100               	movlb	0	; () banked
   969  0013A2  1195               	iorwf	(sensorComputation@j+1)& (0+255),w,b
   970  0013A4  A4D8               	btfss	status,2,c
   971  0013A6  D031               	goto	l1965
   972                           
   973                           ; BSR set to: 0
   974                           ;user.c: 133: {
   975                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   976  0013A8  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
   977  0013AC  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
   978  0013B0  0E00               	movlw	0
   979  0013B2  0100               	movlb	0	; () banked
   980  0013B4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   981  0013B6  0E14               	movlw	20
   982  0013B8  6F82               	movwf	___wmul@multiplicand& (0+255),b
   983  0013BA  EC5A  F00E         	call	___wmul	;wreg free
   984  0013BE  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
   985  0013C2  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   986  0013C6  0100               	movlb	0	; () banked
   987  0013C8  5180               	movf	?___wmul& (0+255),w,b
   988  0013CA  0100               	movlb	0	; () banked
   989  0013CC  278A               	addwf	??_sensorComputation& (0+255),f,b
   990  0013CE  0100               	movlb	0	; () banked
   991  0013D0  5181               	movf	(?___wmul+1)& (0+255),w,b
   992  0013D2  0100               	movlb	0	; () banked
   993  0013D4  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
   994  0013D6  90D8               	bcf	status,0,c
   995  0013D8  0100               	movlb	0	; () banked
   996  0013DA  3594               	rlcf	sensorComputation@j& (0+255),w,b
   997  0013DC  6ED9               	movwf	fsr2l,c
   998  0013DE  0100               	movlb	0	; () banked
   999  0013E0  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1000  0013E2  6EDA               	movwf	fsr2h,c
  1001  0013E4  0100               	movlb	0	; () banked
  1002  0013E6  518A               	movf	??_sensorComputation& (0+255),w,b
  1003  0013E8  26D9               	addwf	fsr2l,f,c
  1004  0013EA  0100               	movlb	0	; () banked
  1005  0013EC  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1006  0013EE  22DA               	addwfc	fsr2h,f,c
  1007  0013F0  CFDE F08C          	movff	postinc2,sensorComputation@max
  1008  0013F4  CFDD F08D          	movff	postdec2,sensorComputation@max+1
  1009  0013F8  C08C  F08E         	movff	sensorComputation@max,sensorComputation@min
  1010  0013FC  C08D  F08F         	movff	sensorComputation@max+1,sensorComputation@min+1
  1011  001400  C08E  F090         	movff	sensorComputation@min,sensorComputation@sum
  1012  001404  C08F  F091         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1013                           
  1014                           ;user.c: 135: continue;
  1015  001408  D08F               	goto	l1967
  1016  00140A                     l1965:
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;user.c: 136: }
  1020                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
  1021  00140A  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1022  00140E  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1023  001412  0E00               	movlw	0
  1024  001414  0100               	movlb	0	; () banked
  1025  001416  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1026  001418  0E14               	movlw	20
  1027  00141A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1028  00141C  EC5A  F00E         	call	___wmul	;wreg free
  1029  001420  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1030  001424  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1031  001428  0100               	movlb	0	; () banked
  1032  00142A  5180               	movf	?___wmul& (0+255),w,b
  1033  00142C  0100               	movlb	0	; () banked
  1034  00142E  278A               	addwf	??_sensorComputation& (0+255),f,b
  1035  001430  0100               	movlb	0	; () banked
  1036  001432  5181               	movf	(?___wmul+1)& (0+255),w,b
  1037  001434  0100               	movlb	0	; () banked
  1038  001436  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1039  001438  90D8               	bcf	status,0,c
  1040  00143A  0100               	movlb	0	; () banked
  1041  00143C  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1042  00143E  6ED9               	movwf	fsr2l,c
  1043  001440  0100               	movlb	0	; () banked
  1044  001442  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1045  001444  6EDA               	movwf	fsr2h,c
  1046  001446  0100               	movlb	0	; () banked
  1047  001448  518A               	movf	??_sensorComputation& (0+255),w,b
  1048  00144A  26D9               	addwf	fsr2l,f,c
  1049  00144C  0100               	movlb	0	; () banked
  1050  00144E  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1051  001450  22DA               	addwfc	fsr2h,f,c
  1052  001452  CFDE F084          	movff	postinc2,MIN@a
  1053  001456  CFDD F085          	movff	postdec2,MIN@a+1
  1054  00145A  C08E  F086         	movff	sensorComputation@min,MIN@b
  1055  00145E  C08F  F087         	movff	sensorComputation@min+1,MIN@b+1
  1056  001462  EC74  F00E         	call	_MIN	;wreg free
  1057  001466  C084  F08E         	movff	?_MIN,sensorComputation@min
  1058  00146A  C085  F08F         	movff	?_MIN+1,sensorComputation@min+1
  1059                           
  1060                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
  1061  00146E  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1062  001472  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1063  001476  0E00               	movlw	0
  1064  001478  0100               	movlb	0	; () banked
  1065  00147A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1066  00147C  0E14               	movlw	20
  1067  00147E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1068  001480  EC5A  F00E         	call	___wmul	;wreg free
  1069  001484  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1070  001488  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1071  00148C  0100               	movlb	0	; () banked
  1072  00148E  5180               	movf	?___wmul& (0+255),w,b
  1073  001490  0100               	movlb	0	; () banked
  1074  001492  278A               	addwf	??_sensorComputation& (0+255),f,b
  1075  001494  0100               	movlb	0	; () banked
  1076  001496  5181               	movf	(?___wmul+1)& (0+255),w,b
  1077  001498  0100               	movlb	0	; () banked
  1078  00149A  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1079  00149C  90D8               	bcf	status,0,c
  1080  00149E  0100               	movlb	0	; () banked
  1081  0014A0  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1082  0014A2  6ED9               	movwf	fsr2l,c
  1083  0014A4  0100               	movlb	0	; () banked
  1084  0014A6  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1085  0014A8  6EDA               	movwf	fsr2h,c
  1086  0014AA  0100               	movlb	0	; () banked
  1087  0014AC  518A               	movf	??_sensorComputation& (0+255),w,b
  1088  0014AE  26D9               	addwf	fsr2l,f,c
  1089  0014B0  0100               	movlb	0	; () banked
  1090  0014B2  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1091  0014B4  22DA               	addwfc	fsr2h,f,c
  1092  0014B6  CFDE F084          	movff	postinc2,MAX@a
  1093  0014BA  CFDD F085          	movff	postdec2,MAX@a+1
  1094  0014BE  C08C  F086         	movff	sensorComputation@max,MAX@b
  1095  0014C2  C08D  F087         	movff	sensorComputation@max+1,MAX@b+1
  1096  0014C6  EC8C  F00E         	call	_MAX	;wreg free
  1097  0014CA  C084  F08C         	movff	?_MAX,sensorComputation@max
  1098  0014CE  C085  F08D         	movff	?_MAX+1,sensorComputation@max+1
  1099                           
  1100                           ;user.c: 139: sum += sensorTemp[i][j];
  1101  0014D2  C092  F080         	movff	sensorComputation@i,___wmul@multiplier
  1102  0014D6  C093  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1103  0014DA  0E00               	movlw	0
  1104  0014DC  0100               	movlb	0	; () banked
  1105  0014DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1106  0014E0  0E14               	movlw	20
  1107  0014E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1108  0014E4  EC5A  F00E         	call	___wmul	;wreg free
  1109  0014E8  C088  F08A         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1110  0014EC  C089  F08B         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1111  0014F0  0100               	movlb	0	; () banked
  1112  0014F2  5180               	movf	?___wmul& (0+255),w,b
  1113  0014F4  0100               	movlb	0	; () banked
  1114  0014F6  278A               	addwf	??_sensorComputation& (0+255),f,b
  1115  0014F8  0100               	movlb	0	; () banked
  1116  0014FA  5181               	movf	(?___wmul+1)& (0+255),w,b
  1117  0014FC  0100               	movlb	0	; () banked
  1118  0014FE  238B               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1119  001500  90D8               	bcf	status,0,c
  1120  001502  0100               	movlb	0	; () banked
  1121  001504  3594               	rlcf	sensorComputation@j& (0+255),w,b
  1122  001506  6ED9               	movwf	fsr2l,c
  1123  001508  0100               	movlb	0	; () banked
  1124  00150A  3595               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1125  00150C  6EDA               	movwf	fsr2h,c
  1126  00150E  0100               	movlb	0	; () banked
  1127  001510  518A               	movf	??_sensorComputation& (0+255),w,b
  1128  001512  26D9               	addwf	fsr2l,f,c
  1129  001514  0100               	movlb	0	; () banked
  1130  001516  518B               	movf	(??_sensorComputation+1)& (0+255),w,b
  1131  001518  22DA               	addwfc	fsr2h,f,c
  1132  00151A  50DE               	movf	postinc2,w,c
  1133  00151C  0100               	movlb	0	; () banked
  1134  00151E  2790               	addwf	sensorComputation@sum& (0+255),f,b
  1135  001520  50DD               	movf	postdec2,w,c
  1136  001522  0100               	movlb	0	; () banked
  1137  001524  2391               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1138  001526  D000               	goto	l1967
  1139  001528                     l1967:
  1140                           
  1141                           ; BSR set to: 0
  1142  001528  0100               	movlb	0	; () banked
  1143  00152A  4B94               	infsnz	sensorComputation@j& (0+255),f,b
  1144  00152C  2B95               	incf	(sensorComputation@j+1)& (0+255),f,b
  1145                           
  1146                           ; BSR set to: 0
  1147  00152E  0100               	movlb	0	; () banked
  1148  001530  BF95               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1149  001532  D734               	goto	l1961
  1150  001534  0100               	movlb	0	; () banked
  1151  001536  5195               	movf	(sensorComputation@j+1)& (0+255),w,b
  1152  001538  E102               	bnz	l1971
  1153  00153A  D729               	goto	L3
  1154  00153C  D000               	goto	l1971
  1155  00153E                     l1971:
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;user.c: 140: }
  1159                           ;user.c: 141: sum = sum - min - max;
  1160  00153E  0100               	movlb	0	; () banked
  1161  001540  518C               	movf	sensorComputation@max& (0+255),w,b
  1162  001542  0100               	movlb	0	; () banked
  1163  001544  258E               	addwf	sensorComputation@min& (0+255),w,b
  1164  001546  0100               	movlb	0	; () banked
  1165  001548  6F8A               	movwf	??_sensorComputation& (0+255),b
  1166  00154A  0100               	movlb	0	; () banked
  1167  00154C  518D               	movf	(sensorComputation@max+1)& (0+255),w,b
  1168  00154E  0100               	movlb	0	; () banked
  1169  001550  218F               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1170  001552  0100               	movlb	0	; () banked
  1171  001554  6F8B               	movwf	(??_sensorComputation+1)& (0+255),b
  1172  001556  0100               	movlb	0	; () banked
  1173  001558  1F8A               	comf	??_sensorComputation& (0+255),f,b
  1174  00155A  1F8B               	comf	(??_sensorComputation+1)& (0+255),f,b
  1175  00155C  4B8A               	infsnz	??_sensorComputation& (0+255),f,b
  1176  00155E  2B8B               	incf	(??_sensorComputation+1)& (0+255),f,b
  1177  001560  0100               	movlb	0	; () banked
  1178  001562  5190               	movf	sensorComputation@sum& (0+255),w,b
  1179  001564  0100               	movlb	0	; () banked
  1180  001566  258A               	addwf	??_sensorComputation& (0+255),w,b
  1181  001568  0100               	movlb	0	; () banked
  1182  00156A  6F90               	movwf	sensorComputation@sum& (0+255),b
  1183  00156C  0100               	movlb	0	; () banked
  1184  00156E  5191               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1185  001570  0100               	movlb	0	; () banked
  1186  001572  218B               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1187  001574  0100               	movlb	0	; () banked
  1188  001576  6F91               	movwf	(sensorComputation@sum+1)& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1192  001578  C090  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1193  00157C  C091  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1194  001580  0E00               	movlw	0
  1195  001582  0100               	movlb	0	; () banked
  1196  001584  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1197  001586  0E08               	movlw	8
  1198  001588  6F82               	movwf	___awdiv@divisor& (0+255),b
  1199  00158A  EC7C  F00D         	call	___awdiv	;wreg free
  1200  00158E  90D8               	bcf	status,0,c
  1201  001590  0100               	movlb	0	; () banked
  1202  001592  3592               	rlcf	sensorComputation@i& (0+255),w,b
  1203  001594  6ED9               	movwf	fsr2l,c
  1204  001596  0100               	movlb	0	; () banked
  1205  001598  3593               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1206  00159A  6EDA               	movwf	fsr2h,c
  1207  00159C  0E2B               	movlw	low _sensorValue
  1208  00159E  26D9               	addwf	fsr2l,f,c
  1209  0015A0  0E00               	movlw	high _sensorValue
  1210  0015A2  22DA               	addwfc	fsr2h,f,c
  1211  0015A4  0100               	movlb	0	; () banked
  1212  0015A6  C080  FFDE         	movff	?___awdiv,postinc2
  1213  0015AA  0100               	movlb	0	; () banked
  1214  0015AC  C081  FFDD         	movff	?___awdiv+1,postdec2
  1215                           
  1216                           ; BSR set to: 0
  1217  0015B0  0100               	movlb	0	; () banked
  1218  0015B2  4B92               	infsnz	sensorComputation@i& (0+255),f,b
  1219  0015B4  2B93               	incf	(sensorComputation@i+1)& (0+255),f,b
  1220                           
  1221                           ; BSR set to: 0
  1222  0015B6  0100               	movlb	0	; () banked
  1223  0015B8  BF93               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1224  0015BA  D6DE               	goto	l1955
  1225  0015BC  0100               	movlb	0	; () banked
  1226  0015BE  5193               	movf	(sensorComputation@i+1)& (0+255),w,b
  1227  0015C0  E102               	bnz	l295
  1228  0015C2  D6D3               	goto	L4
  1229  0015C4  D000               	goto	l295
  1230  0015C6                     l295:
  1231                           
  1232                           ; BSR set to: 0
  1233  0015C6  0012               	return		;funcret
  1234  0015C8                     __end_of_sensorComputation:
  1235                           	opt stack 0
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1l	equ	0xFE1
  1244                           postinc2	equ	0xFDE
  1245                           postdec2	equ	0xFDD
  1246                           fsr2h	equ	0xFDA
  1247                           fsr2l	equ	0xFD9
  1248                           status	equ	0xFD8
  1249                           
  1250 ;; *************** function ___wmul *****************
  1251 ;; Defined at:
  1252 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1255 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  product         2   39[COMRAM] unsigned int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2    0[BANK0 ] unsigned int 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, prodl, prodh
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:        6 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    4
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_sensorComputation
  1278 ;;		_sensorUpdate
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text3
  1283  001CB4                     __ptext3:
  1284                           	opt stack 0
  1285  001CB4                     ___wmul:
  1286                           	opt stack 24
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;incstack = 0
  1290  001CB4  0100               	movlb	0	; () banked
  1291  001CB6  5180               	movf	___wmul@multiplier& (0+255),w,b
  1292  001CB8  0100               	movlb	0	; () banked
  1293  001CBA  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1294  001CBC  CFF3 F028          	movff	prodl,___wmul@product
  1295  001CC0  CFF4 F029          	movff	prodh,___wmul@product+1
  1296  001CC4  0100               	movlb	0	; () banked
  1297  001CC6  5180               	movf	___wmul@multiplier& (0+255),w,b
  1298  001CC8  0100               	movlb	0	; () banked
  1299  001CCA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1300  001CCC  50F3               	movf	prodl,w,c
  1301  001CCE  2629               	addwf	___wmul@product+1,f,c
  1302  001CD0  0100               	movlb	0	; () banked
  1303  001CD2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1304  001CD4  0100               	movlb	0	; () banked
  1305  001CD6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1306  001CD8  50F3               	movf	prodl,w,c
  1307  001CDA  2629               	addwf	___wmul@product+1,f,c
  1308                           
  1309                           ; BSR set to: 0
  1310  001CDC  C028  F080         	movff	___wmul@product,?___wmul
  1311  001CE0  C029  F081         	movff	___wmul@product+1,?___wmul+1
  1312  001CE4  D000               	goto	l320
  1313  001CE6                     l320:
  1314                           
  1315                           ; BSR set to: 0
  1316  001CE6  0012               	return		;funcret
  1317  001CE8                     __end_of___wmul:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           prodh	equ	0xFF4
  1324                           prodl	equ	0xFF3
  1325                           postinc0	equ	0xFEE
  1326                           wreg	equ	0xFE8
  1327                           postdec1	equ	0xFE5
  1328                           fsr1l	equ	0xFE1
  1329                           postinc2	equ	0xFDE
  1330                           postdec2	equ	0xFDD
  1331                           fsr2h	equ	0xFDA
  1332                           fsr2l	equ	0xFD9
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function ___awdiv *****************
  1336 ;; Defined at:
  1337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  dividend        2    0[BANK0 ] int 
  1340 ;;  divisor         2    2[BANK0 ] int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  quotient        2    6[BANK0 ] int 
  1343 ;;  sign            1    5[BANK0 ] unsigned char 
  1344 ;;  counter         1    4[BANK0 ] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2    0[BANK0 ] int 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;Total ram usage:        8 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    4
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_sensorComputation
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text4
  1369  001AF8                     __ptext4:
  1370                           	opt stack 0
  1371  001AF8                     ___awdiv:
  1372                           	opt stack 24
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;incstack = 0
  1376  001AF8  0E00               	movlw	0
  1377  001AFA  0100               	movlb	0	; () banked
  1378  001AFC  6F85               	movwf	___awdiv@sign& (0+255),b
  1379                           
  1380                           ; BSR set to: 0
  1381  001AFE  0100               	movlb	0	; () banked
  1382  001B00  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1383  001B02  D009               	goto	l1907
  1384                           
  1385                           ; BSR set to: 0
  1386  001B04  0100               	movlb	0	; () banked
  1387  001B06  6D82               	negf	___awdiv@divisor& (0+255),b
  1388  001B08  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1389  001B0A  B0D8               	btfsc	status,0,c
  1390  001B0C  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1391                           
  1392                           ; BSR set to: 0
  1393  001B0E  0E01               	movlw	1
  1394  001B10  0100               	movlb	0	; () banked
  1395  001B12  6F85               	movwf	___awdiv@sign& (0+255),b
  1396  001B14  D000               	goto	l1907
  1397  001B16                     l1907:
  1398                           
  1399                           ; BSR set to: 0
  1400  001B16  0100               	movlb	0	; () banked
  1401  001B18  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1402  001B1A  D009               	goto	l1913
  1403                           
  1404                           ; BSR set to: 0
  1405  001B1C  0100               	movlb	0	; () banked
  1406  001B1E  6D80               	negf	___awdiv@dividend& (0+255),b
  1407  001B20  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1408  001B22  B0D8               	btfsc	status,0,c
  1409  001B24  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1410                           
  1411                           ; BSR set to: 0
  1412  001B26  0E01               	movlw	1
  1413  001B28  0100               	movlb	0	; () banked
  1414  001B2A  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1415  001B2C  D000               	goto	l1913
  1416  001B2E                     l1913:
  1417                           
  1418                           ; BSR set to: 0
  1419  001B2E  0E00               	movlw	0
  1420  001B30  0100               	movlb	0	; () banked
  1421  001B32  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1422  001B34  0E00               	movlw	0
  1423  001B36  6F86               	movwf	___awdiv@quotient& (0+255),b
  1424                           
  1425                           ; BSR set to: 0
  1426  001B38  0100               	movlb	0	; () banked
  1427  001B3A  5182               	movf	___awdiv@divisor& (0+255),w,b
  1428  001B3C  0100               	movlb	0	; () banked
  1429  001B3E  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1430  001B40  B4D8               	btfsc	status,2,c
  1431  001B42  D031               	goto	l1935
  1432                           
  1433                           ; BSR set to: 0
  1434  001B44  0E01               	movlw	1
  1435  001B46  0100               	movlb	0	; () banked
  1436  001B48  6F84               	movwf	___awdiv@counter& (0+255),b
  1437  001B4A  D007               	goto	l1921
  1438  001B4C                     l1919:
  1439                           
  1440                           ; BSR set to: 0
  1441  001B4C  0100               	movlb	0	; () banked
  1442  001B4E  90D8               	bcf	status,0,c
  1443  001B50  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1444  001B52  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1445  001B54  0100               	movlb	0	; () banked
  1446  001B56  2B84               	incf	___awdiv@counter& (0+255),f,b
  1447  001B58  D000               	goto	l1921
  1448  001B5A                     l1921:
  1449                           
  1450                           ; BSR set to: 0
  1451  001B5A  0100               	movlb	0	; () banked
  1452  001B5C  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1453  001B5E  D002               	goto	l1923
  1454  001B60  D7F5               	goto	l1919
  1455                           
  1456                           ; BSR set to: 0
  1457  001B62  D000               	goto	l1923
  1458  001B64                     l1923:
  1459                           
  1460                           ; BSR set to: 0
  1461  001B64  0100               	movlb	0	; () banked
  1462  001B66  90D8               	bcf	status,0,c
  1463  001B68  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1464  001B6A  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1465                           
  1466                           ; BSR set to: 0
  1467  001B6C  0100               	movlb	0	; () banked
  1468  001B6E  5182               	movf	___awdiv@divisor& (0+255),w,b
  1469  001B70  0100               	movlb	0	; () banked
  1470  001B72  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1471  001B74  0100               	movlb	0	; () banked
  1472  001B76  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1473  001B78  0100               	movlb	0	; () banked
  1474  001B7A  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1475  001B7C  A0D8               	btfss	status,0,c
  1476  001B7E  D00B               	goto	l1931
  1477                           
  1478                           ; BSR set to: 0
  1479  001B80  0100               	movlb	0	; () banked
  1480  001B82  5182               	movf	___awdiv@divisor& (0+255),w,b
  1481  001B84  0100               	movlb	0	; () banked
  1482  001B86  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1483  001B88  0100               	movlb	0	; () banked
  1484  001B8A  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1485  001B8C  0100               	movlb	0	; () banked
  1486  001B8E  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489  001B90  0100               	movlb	0	; () banked
  1490  001B92  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1491  001B94  D000               	goto	l1931
  1492  001B96                     l1931:
  1493                           
  1494                           ; BSR set to: 0
  1495  001B96  0100               	movlb	0	; () banked
  1496  001B98  90D8               	bcf	status,0,c
  1497  001B9A  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1498  001B9C  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1499                           
  1500                           ; BSR set to: 0
  1501  001B9E  0100               	movlb	0	; () banked
  1502  001BA0  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1503  001BA2  D7E0               	goto	l1923
  1504                           
  1505                           ; BSR set to: 0
  1506  001BA4  D000               	goto	l1935
  1507  001BA6                     l1935:
  1508                           
  1509                           ; BSR set to: 0
  1510  001BA6  0100               	movlb	0	; () banked
  1511  001BA8  5185               	movf	___awdiv@sign& (0+255),w,b
  1512  001BAA  0100               	movlb	0	; () banked
  1513  001BAC  B4D8               	btfsc	status,2,c
  1514  001BAE  D006               	goto	l1939
  1515                           
  1516                           ; BSR set to: 0
  1517  001BB0  0100               	movlb	0	; () banked
  1518  001BB2  6D86               	negf	___awdiv@quotient& (0+255),b
  1519  001BB4  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1520  001BB6  B0D8               	btfsc	status,0,c
  1521  001BB8  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1522  001BBA  D000               	goto	l1939
  1523  001BBC                     l1939:
  1524                           
  1525                           ; BSR set to: 0
  1526  001BBC  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1527  001BC0  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1528  001BC4  D000               	goto	l513
  1529  001BC6                     l513:
  1530                           
  1531                           ; BSR set to: 0
  1532  001BC6  0012               	return		;funcret
  1533  001BC8                     __end_of___awdiv:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           prodh	equ	0xFF4
  1540                           prodl	equ	0xFF3
  1541                           postinc0	equ	0xFEE
  1542                           wreg	equ	0xFE8
  1543                           postdec1	equ	0xFE5
  1544                           fsr1l	equ	0xFE1
  1545                           postinc2	equ	0xFDE
  1546                           postdec2	equ	0xFDD
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _MIN *****************
  1552 ;; Defined at:
  1553 ;;		line 175 in file "user.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  a               2    4[BANK0 ] int 
  1556 ;;  b               2    6[BANK0 ] int 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;		None
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  2    4[BANK0 ] int 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1568 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;Total ram usage:        5 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    4
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_sensorComputation
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text5
  1583  001CE8                     __ptext5:
  1584                           	opt stack 0
  1585  001CE8                     _MIN:
  1586                           	opt stack 24
  1587                           
  1588                           ;user.c: 177: if(a>b) return b;
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;incstack = 0
  1592  001CE8  0100               	movlb	0	; () banked
  1593  001CEA  5184               	movf	MIN@a& (0+255),w,b
  1594  001CEC  0100               	movlb	0	; () banked
  1595  001CEE  5D86               	subwf	MIN@b& (0+255),w,b
  1596  001CF0  0100               	movlb	0	; () banked
  1597  001CF2  5187               	movf	(MIN@b+1)& (0+255),w,b
  1598  001CF4  0A80               	xorlw	128
  1599  001CF6  6E2A               	movwf	??_MIN& (0+255),c
  1600  001CF8  0100               	movlb	0	; () banked
  1601  001CFA  5185               	movf	(MIN@a+1)& (0+255),w,b
  1602  001CFC  0A80               	xorlw	128
  1603  001CFE  582A               	subwfb	??_MIN& (0+255),w,c
  1604  001D00  B0D8               	btfsc	status,0,c
  1605  001D02  D005               	goto	l312
  1606                           
  1607                           ; BSR set to: 0
  1608  001D04  C086  F084         	movff	MIN@b,?_MIN
  1609  001D08  C087  F085         	movff	MIN@b+1,?_MIN+1
  1610  001D0C  D004               	goto	l313
  1611  001D0E                     l312:
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;user.c: 178: return a;
  1615  001D0E  C084  F084         	movff	MIN@a,?_MIN
  1616  001D12  C085  F085         	movff	MIN@a+1,?_MIN+1
  1617  001D16                     l313:
  1618                           
  1619                           ; BSR set to: 0
  1620  001D16  0012               	return		;funcret
  1621  001D18                     __end_of_MIN:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           prodh	equ	0xFF4
  1628                           prodl	equ	0xFF3
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           postinc2	equ	0xFDE
  1634                           postdec2	equ	0xFDD
  1635                           fsr2h	equ	0xFDA
  1636                           fsr2l	equ	0xFD9
  1637                           status	equ	0xFD8
  1638                           
  1639 ;; *************** function _MAX *****************
  1640 ;; Defined at:
  1641 ;;		line 181 in file "user.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  a               2    4[BANK0 ] int 
  1644 ;;  b               2    6[BANK0 ] int 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    4[BANK0 ] int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_sensorComputation
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text6
  1671  001D18                     __ptext6:
  1672                           	opt stack 0
  1673  001D18                     _MAX:
  1674                           	opt stack 24
  1675                           
  1676                           ;user.c: 183: if(a>b) return a;
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;incstack = 0
  1680  001D18  0100               	movlb	0	; () banked
  1681  001D1A  5184               	movf	MAX@a& (0+255),w,b
  1682  001D1C  0100               	movlb	0	; () banked
  1683  001D1E  5D86               	subwf	MAX@b& (0+255),w,b
  1684  001D20  0100               	movlb	0	; () banked
  1685  001D22  5187               	movf	(MAX@b+1)& (0+255),w,b
  1686  001D24  0A80               	xorlw	128
  1687  001D26  6E2A               	movwf	??_MAX& (0+255),c
  1688  001D28  0100               	movlb	0	; () banked
  1689  001D2A  5185               	movf	(MAX@a+1)& (0+255),w,b
  1690  001D2C  0A80               	xorlw	128
  1691  001D2E  582A               	subwfb	??_MAX& (0+255),w,c
  1692  001D30  B0D8               	btfsc	status,0,c
  1693  001D32  D005               	goto	l316
  1694                           
  1695                           ; BSR set to: 0
  1696  001D34  C084  F084         	movff	MAX@a,?_MAX
  1697  001D38  C085  F085         	movff	MAX@a+1,?_MAX+1
  1698  001D3C  D004               	goto	l317
  1699  001D3E                     l316:
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;user.c: 184: return b;
  1703  001D3E  C086  F084         	movff	MAX@b,?_MAX
  1704  001D42  C087  F085         	movff	MAX@b+1,?_MAX+1
  1705  001D46                     l317:
  1706                           
  1707                           ; BSR set to: 0
  1708  001D46  0012               	return		;funcret
  1709  001D48                     __end_of_MAX:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           postinc2	equ	0xFDE
  1722                           postdec2	equ	0xFDD
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _InitApp *****************
  1728 ;; Defined at:
  1729 ;;		line 35 in file "user.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    5
  1750 ;; This function calls:
  1751 ;;		_AlgorithmSelection
  1752 ;;		_delay
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text7
  1759  001C06                     __ptext7:
  1760                           	opt stack 0
  1761  001C06                     _InitApp:
  1762                           	opt stack 25
  1763                           
  1764                           ;user.c: 39: TRISC = 0;
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;incstack = 0
  1768  001C06  0E00               	movlw	0
  1769  001C08  6E94               	movwf	3988,c	;volatile
  1770                           
  1771                           ;user.c: 43: TRISEbits.TRISE1=1;
  1772  001C0A  8296               	bsf	3990,1,c	;volatile
  1773                           
  1774                           ;user.c: 45: TRISEbits.TRISE2=1;
  1775  001C0C  8496               	bsf	3990,2,c	;volatile
  1776                           
  1777                           ;user.c: 47: TRISBbits.RB1=1;
  1778  001C0E  8293               	bsf	3987,1,c	;volatile
  1779                           
  1780                           ;user.c: 49: TRISBbits.RB0=1;
  1781  001C10  8093               	bsf	3987,0,c	;volatile
  1782                           
  1783                           ;user.c: 52: TRISBbits.RB3=1;
  1784  001C12  8693               	bsf	3987,3,c	;volatile
  1785                           
  1786                           ;user.c: 54: TRISBbits.RB2=1;
  1787  001C14  8493               	bsf	3987,2,c	;volatile
  1788                           
  1789                           ;user.c: 58: ADCON1 =0b00000001;
  1790  001C16  0E01               	movlw	1
  1791  001C18  6EC1               	movwf	4033,c	;volatile
  1792                           
  1793                           ;user.c: 63: ADCON2=0b00001010;
  1794  001C1A  0E0A               	movlw	10
  1795  001C1C  6EC0               	movwf	4032,c	;volatile
  1796                           
  1797                           ;user.c: 68: ADCON0=0b00101011;
  1798  001C1E  0E2B               	movlw	43
  1799  001C20  6EC2               	movwf	4034,c	;volatile
  1800                           
  1801                           ;user.c: 77: T0CON = 0b11000100;
  1802  001C22  0EC4               	movlw	196
  1803  001C24  6ED5               	movwf	4053,c	;volatile
  1804                           
  1805                           ;user.c: 85: INTCON2 = 0b11110100;
  1806  001C26  0EF4               	movlw	244
  1807  001C28  6EF1               	movwf	intcon2,c	;volatile
  1808                           
  1809                           ;user.c: 95: INTCON = 0b00100000;
  1810  001C2A  0E20               	movlw	32
  1811  001C2C  6EF2               	movwf	intcon,c	;volatile
  1812                           
  1813                           ;user.c: 105: AlgorithmSelection();
  1814  001C2E  ECA4  F00E         	call	_AlgorithmSelection	;wreg free
  1815                           
  1816                           ;user.c: 108: delay(1000);
  1817  001C32  0E03               	movlw	3
  1818  001C34  6E29               	movwf	delay@ms+1,c
  1819  001C36  0EE8               	movlw	232
  1820  001C38  6E28               	movwf	delay@ms,c
  1821  001C3A  ECE4  F00D         	call	_delay	;wreg free
  1822                           
  1823                           ;user.c: 109: INTCONbits.GIE = 1;
  1824  001C3E  8EF2               	bsf	intcon,7,c	;volatile
  1825  001C40  0012               	return		;funcret
  1826  001C42                     __end_of_InitApp:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           intcon2	equ	0xFF1
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1l	equ	0xFE1
  1840                           postinc2	equ	0xFDE
  1841                           postdec2	equ	0xFDD
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8
  1845                           
  1846 ;; *************** function _delay *****************
  1847 ;; Defined at:
  1848 ;;		line 29 in file "user.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  ms              2   39[COMRAM] unsigned int 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  x               2    0[BANK0 ] int 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;		None               void
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;Total ram usage:        5 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:    4
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_InitApp
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text8
  1877  001BC8                     __ptext8:
  1878                           	opt stack 0
  1879  001BC8                     _delay:
  1880                           	opt stack 25
  1881                           
  1882                           ;user.c: 30: int x = 0;
  1883                           
  1884                           ;incstack = 0
  1885  001BC8  0E00               	movlw	0
  1886  001BCA  0100               	movlb	0	; () banked
  1887  001BCC  6F81               	movwf	(delay@x+1)& (0+255),b
  1888  001BCE  0E00               	movlw	0
  1889  001BD0  6F80               	movwf	delay@x& (0+255),b
  1890                           
  1891                           ;user.c: 31: for (x = 0; x < ms; x++)
  1892  001BD2  0E00               	movlw	0
  1893  001BD4  0100               	movlb	0	; () banked
  1894  001BD6  6F81               	movwf	(delay@x+1)& (0+255),b
  1895  001BD8  0E00               	movlw	0
  1896  001BDA  6F80               	movwf	delay@x& (0+255),b
  1897  001BDC  D00B               	goto	l272
  1898  001BDE                     l1945:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1902  001BDE  0E0B               	movlw	11
  1903  001BE0  6E2A               	movwf	??_delay& (0+255),c
  1904  001BE2  0E62               	movlw	98
  1905  001BE4                     u1797:
  1906  001BE4  2EE8               	decfsz	wreg,f,c
  1907  001BE6  D7FE               	goto	u1797
  1908  001BE8  2E2A               	decfsz	??_delay& (0+255),f,c
  1909  001BEA  D7FC               	goto	u1797
  1910  001BEC  D000               	nop2	
  1911  001BEE  0100               	movlb	0	; () banked
  1912  001BF0  4B80               	infsnz	delay@x& (0+255),f,b
  1913  001BF2  2B81               	incf	(delay@x+1)& (0+255),f,b
  1914  001BF4                     l272:
  1915                           
  1916                           ; BSR set to: 0
  1917  001BF4  5028               	movf	delay@ms,w,c
  1918  001BF6  0100               	movlb	0	; () banked
  1919  001BF8  5D80               	subwf	delay@x& (0+255),w,b
  1920  001BFA  5029               	movf	delay@ms+1,w,c
  1921  001BFC  0100               	movlb	0	; () banked
  1922  001BFE  5981               	subwfb	(delay@x+1)& (0+255),w,b
  1923  001C00  A0D8               	btfss	status,0,c
  1924  001C02  D7ED               	goto	l1945
  1925                           
  1926                           ; BSR set to: 0
  1927                           
  1928                           ; BSR set to: 0
  1929  001C04  0012               	return		;funcret
  1930  001C06                     __end_of_delay:
  1931                           	opt stack 0
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           prodh	equ	0xFF4
  1937                           prodl	equ	0xFF3
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _AlgorithmSelection *****************
  1951 ;; Defined at:
  1952 ;;		line 112 in file "user.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;		None               void
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    4
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_InitApp
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text9
  1981  001D48                     __ptext9:
  1982                           	opt stack 0
  1983  001D48                     _AlgorithmSelection:
  1984                           	opt stack 25
  1985                           
  1986                           ;user.c: 114: ADCON0 = 0b00100111;
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;incstack = 0
  1990  001D48  0E27               	movlw	39
  1991  001D4A  6EC2               	movwf	4034,c	;volatile
  1992                           
  1993                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1994  001D4C  82C2               	bsf	4034,1,c	;volatile
  1995                           
  1996                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1997  001D4E  D000               	goto	l281
  1998  001D50                     l281:
  1999  001D50  B2C2               	btfsc	4034,1,c	;volatile
  2000  001D52  D7FE               	goto	l281
  2001                           
  2002                           ;user.c: 119: if(ADRESL > 0b10000000)
  2003  001D54  0E80               	movlw	128
  2004  001D56  64C3               	cpfsgt	4035,c	;volatile
  2005  001D58  D002               	goto	l1067
  2006                           
  2007                           ;user.c: 120: algorithm = LEFTWALL;
  2008  001D5A  0E00               	movlw	0
  2009  001D5C  D001               	goto	L5
  2010  001D5E                     l1067:
  2011                           
  2012                           ;user.c: 121: else
  2013                           ;user.c: 122: algorithm = RIGHTWALL;
  2014  001D5E  0E01               	movlw	1
  2015  001D60                     L5:
  2016  001D60  6E51               	movwf	_algorithm,c
  2017  001D62  D000               	goto	l286
  2018  001D64                     l286:
  2019  001D64  0012               	return		;funcret
  2020  001D66                     __end_of_AlgorithmSelection:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           intcon	equ	0xFF2
  2029                           intcon2	equ	0xFF1
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _ConfigureOscillator *****************
  2041 ;; Defined at:
  2042 ;;		line 24 in file "system.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;		None               void
  2049 ;; Registers used:
  2050 ;;		wreg, status,2
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    4
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text10
  2071  001DDC                     __ptext10:
  2072                           	opt stack 0
  2073  001DDC                     _ConfigureOscillator:
  2074                           	opt stack 26
  2075                           
  2076                           ;system.c: 29: OSCCON = 0b01111100;
  2077                           
  2078                           ;incstack = 0
  2079  001DDC  0E7C               	movlw	124
  2080  001DDE  6ED3               	movwf	4051,c	;volatile
  2081                           
  2082                           ;system.c: 31: OSCTUNE = 0b01001111;
  2083  001DE0  0E4F               	movlw	79
  2084  001DE2  6E9B               	movwf	3995,c	;volatile
  2085  001DE4  0012               	return		;funcret
  2086  001DE6                     __end_of_ConfigureOscillator:
  2087                           	opt stack 0
  2088                           tblptru	equ	0xFF8
  2089                           tblptrh	equ	0xFF7
  2090                           tblptrl	equ	0xFF6
  2091                           tablat	equ	0xFF5
  2092                           prodh	equ	0xFF4
  2093                           prodl	equ	0xFF3
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1l	equ	0xFE1
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _low_isr *****************
  2107 ;; Defined at:
  2108 ;;		line 296 in file "interrupts.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		None
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;Total ram usage:       17 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		Interrupt level 1
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	intcodelo
  2137  000018                     __pintcodelo:
  2138                           	opt stack 0
  2139  000018                     _low_isr:
  2140                           	opt stack 24
  2141                           
  2142                           ;incstack = 0
  2143  000018  CFD8 F001          	movff	status,??_low_isr
  2144  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  2145  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  2146  000024  CFFA F004          	movff	pclath,??_low_isr+3
  2147  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  2148  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  2149  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  2150  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  2151  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  2152  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  2153  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  2154  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  2155  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  2156  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  2157  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  2158  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  2159  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  2160  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  2161  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  2162  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  2163  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  2164  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  2165  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  2166  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  2167  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  2168  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  2169  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  2170  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  2171  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  2172  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  2173  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  2174  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  2175  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  2176  00009C  C001  FFD8         	movff	??_low_isr,status
  2177  0000A0  0010               	retfie	
  2178  0000A2                     __end_of_low_isr:
  2179                           	opt stack 0
  2180                           pclatu	equ	0xFFB
  2181                           pclath	equ	0xFFA
  2182                           tblptru	equ	0xFF8
  2183                           tblptrh	equ	0xFF7
  2184                           tblptrl	equ	0xFF6
  2185                           tablat	equ	0xFF5
  2186                           prodh	equ	0xFF4
  2187                           prodl	equ	0xFF3
  2188                           intcon	equ	0xFF2
  2189                           intcon2	equ	0xFF1
  2190                           postinc0	equ	0xFEE
  2191                           fsr0h	equ	0xFEA
  2192                           fsr0l	equ	0xFE9
  2193                           wreg	equ	0xFE8
  2194                           postdec1	equ	0xFE5
  2195                           fsr1h	equ	0xFE2
  2196                           fsr1l	equ	0xFE1
  2197                           bsr	equ	0xFE0
  2198                           postinc2	equ	0xFDE
  2199                           postdec2	equ	0xFDD
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _high_isr *****************
  2205 ;; Defined at:
  2206 ;;		line 98 in file "interrupts.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;		None               void
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:       14 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		_KController
  2229 ;;		_Reversing
  2230 ;;		_forward
  2231 ;;		_merge
  2232 ;;		_motorCounterUpdate
  2233 ;;		_moveMouse
  2234 ;;		_rotate
  2235 ;; This function is called by:
  2236 ;;		Interrupt level 2
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	intcode
  2241  000008                     __pintcode:
  2242                           	opt stack 0
  2243  000008                     _high_isr:
  2244                           	opt stack 24
  2245                           
  2246                           ;incstack = 0
  2247  000008  CFFA F01A          	movff	pclath,??_high_isr
  2248  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  2249  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  2250  000014  ED05  F008         	call	int_func,f	;refresh shadow registers
  2251                           pclatu	equ	0xFFB
  2252                           pclath	equ	0xFFA
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           intcon	equ	0xFF2
  2260                           intcon2	equ	0xFF1
  2261                           postinc0	equ	0xFEE
  2262                           fsr0h	equ	0xFEA
  2263                           fsr0l	equ	0xFE9
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1h	equ	0xFE2
  2267                           fsr1l	equ	0xFE1
  2268                           bsr	equ	0xFE0
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275                           	psect	intcode_body
  2276  00100A                     __pintcode_body:
  2277                           	opt stack 24
  2278  00100A                     int_func:
  2279                           	opt stack 24
  2280  00100A  0006               	pop		; remove dummy address from shadow register refresh
  2281  00100C  CFEA F01D          	movff	fsr0h,??_high_isr+3
  2282  001010  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  2283  001014  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  2284  001018  CFD9 F020          	movff	fsr2l,??_high_isr+6
  2285  00101C  CFDA F021          	movff	fsr2h,??_high_isr+7
  2286  001020  CFF3 F022          	movff	prodl,??_high_isr+8
  2287  001024  CFF4 F023          	movff	prodh,??_high_isr+9
  2288  001028  CFF6 F024          	movff	tblptrl,??_high_isr+10
  2289  00102C  CFF7 F025          	movff	tblptrh,??_high_isr+11
  2290  001030  CFF8 F026          	movff	tblptru,??_high_isr+12
  2291  001034  CFF5 F027          	movff	tablat,??_high_isr+13
  2292                           
  2293                           ;interrupts.c: 117: if(INTCONbits.TMR0IF == 1)
  2294  001038  A4F2               	btfss	intcon,2,c	;volatile
  2295  00103A  D16F               	goto	i2l105
  2296                           
  2297                           ;interrupts.c: 118: {
  2298                           ;interrupts.c: 119: if(MotorDelayCounter > 2)
  2299  00103C  BE3A               	btfsc	_MotorDelayCounter+1,7,c
  2300  00103E  D169               	goto	i2l1863
  2301  001040  503A               	movf	_MotorDelayCounter+1,w,c
  2302  001042  E104               	bnz	i2u129_40
  2303  001044  0E03               	movlw	3
  2304  001046  5C39               	subwf	_MotorDelayCounter,w,c
  2305  001048  A0D8               	btfss	status,0,c
  2306  00104A  D163               	goto	i2l1863
  2307  00104C                     i2u129_40:
  2308                           
  2309                           ;interrupts.c: 120: {
  2310                           ;interrupts.c: 122: if (ForwardCounter > 0) {
  2311  00104C  BE36               	btfsc	_ForwardCounter+1,7,c
  2312  00104E  D008               	goto	i2l1753
  2313  001050  5036               	movf	_ForwardCounter+1,w,c
  2314  001052  E103               	bnz	i2u130_40
  2315  001054  0435               	decf	_ForwardCounter,w,c
  2316  001056  A0D8               	btfss	status,0,c
  2317  001058  D003               	goto	i2l1753
  2318  00105A                     i2u130_40:
  2319                           
  2320                           ;interrupts.c: 123: forward();
  2321  00105A  ECB3  F00E         	call	_forward	;wreg free
  2322                           
  2323                           ;interrupts.c: 124: }
  2324  00105E  D14D               	goto	i2l1861
  2325  001060                     i2l1753:
  2326                           
  2327                           ;interrupts.c: 125: else if (ReverseCounter > 0)
  2328  001060  BE3E               	btfsc	_ReverseCounter+1,7,c
  2329  001062  D008               	goto	i2l1757
  2330  001064  503E               	movf	_ReverseCounter+1,w,c
  2331  001066  E103               	bnz	i2u131_40
  2332  001068  043D               	decf	_ReverseCounter,w,c
  2333  00106A  A0D8               	btfss	status,0,c
  2334  00106C  D003               	goto	i2l1757
  2335  00106E                     i2u131_40:
  2336                           
  2337                           ;interrupts.c: 126: Reversing();
  2338  00106E  ECC1  F00E         	call	_Reversing	;wreg free
  2339  001072  D143               	goto	i2l1861
  2340  001074                     i2l1757:
  2341                           
  2342                           ;interrupts.c: 127: else if(RotateCounter > 0)
  2343  001074  BE40               	btfsc	_RotateCounter+1,7,c
  2344  001076  D020               	goto	i2l1769
  2345  001078  5040               	movf	_RotateCounter+1,w,c
  2346  00107A  E103               	bnz	i2u132_40
  2347  00107C  043F               	decf	_RotateCounter,w,c
  2348  00107E  A0D8               	btfss	status,0,c
  2349  001080  D01B               	goto	i2l1769
  2350  001082                     i2u132_40:
  2351                           
  2352                           ;interrupts.c: 128: {
  2353                           ;interrupts.c: 130: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2354  001082  BE30               	btfsc	_sensorValue+5,7,c
  2355  001084  D006               	goto	i2l1761
  2356  001086  0E21               	movlw	33
  2357  001088  5C2F               	subwf	_sensorValue+4,w,c
  2358  00108A  0E03               	movlw	3
  2359  00108C  5830               	subwfb	_sensorValue+5,w,c
  2360  00108E  B0D8               	btfsc	status,0,c
  2361  001090  D008               	goto	i2l1763
  2362  001092                     i2l1761:
  2363  001092  BE32               	btfsc	_sensorValue+7,7,c
  2364  001094  D00D               	goto	i2l1767
  2365  001096  0E21               	movlw	33
  2366  001098  5C31               	subwf	_sensorValue+6,w,c
  2367  00109A  0E03               	movlw	3
  2368  00109C  5832               	subwfb	_sensorValue+7,w,c
  2369  00109E  A0D8               	btfss	status,0,c
  2370  0010A0  D007               	goto	i2l1767
  2371  0010A2                     i2l1763:
  2372                           
  2373                           ;interrupts.c: 131: ReverseCounter = 15;
  2374  0010A2  0E00               	movlw	0
  2375  0010A4  6E3E               	movwf	_ReverseCounter+1,c
  2376  0010A6  0E0F               	movlw	15
  2377  0010A8  6E3D               	movwf	_ReverseCounter,c
  2378                           
  2379                           ;interrupts.c: 132: Reversing();
  2380  0010AA  ECC1  F00E         	call	_Reversing	;wreg free
  2381                           
  2382                           ;interrupts.c: 133: } else {
  2383  0010AE  D125               	goto	i2l1861
  2384  0010B0                     i2l1767:
  2385                           
  2386                           ;interrupts.c: 134: rotate(rotatingSide);
  2387  0010B0  5053               	movf	_rotatingSide,w,c
  2388  0010B2  EC21  F00E         	call	_rotate
  2389                           
  2390                           ;interrupts.c: 135: }
  2391                           ;interrupts.c: 136: }
  2392  0010B6  D121               	goto	i2l1861
  2393  0010B8                     i2l1769:
  2394                           
  2395                           ;interrupts.c: 146: else if (sensorValue[0] < 95 && TurnLeft > 95 && algorithm == LEFTWA
      +                          LL)
  2396  0010B8  BE2C               	btfsc	_sensorValue+1,7,c
  2397  0010BA  D006               	goto	i2l1771
  2398  0010BC  502C               	movf	_sensorValue+1,w,c
  2399  0010BE  E122               	bnz	i2l1785
  2400  0010C0  0E5F               	movlw	95
  2401  0010C2  5C2B               	subwf	_sensorValue,w,c
  2402  0010C4  B0D8               	btfsc	status,0,c
  2403  0010C6  D01E               	goto	i2l1785
  2404  0010C8                     i2l1771:
  2405  0010C8  BE55               	btfsc	_TurnLeft+1,7,c
  2406  0010CA  D01C               	goto	i2l1785
  2407  0010CC  5055               	movf	_TurnLeft+1,w,c
  2408  0010CE  E104               	bnz	i2u136_40
  2409  0010D0  0E60               	movlw	96
  2410  0010D2  5C54               	subwf	_TurnLeft,w,c
  2411  0010D4  A0D8               	btfss	status,0,c
  2412  0010D6  D016               	goto	i2l1785
  2413  0010D8                     i2u136_40:
  2414  0010D8  5051               	movf	_algorithm,w,c
  2415  0010DA  A4D8               	btfss	status,2,c
  2416  0010DC  D013               	goto	i2l1785
  2417                           
  2418                           ;interrupts.c: 147: {
  2419                           ;interrupts.c: 148: TurnLeft = sensorValue[0];
  2420  0010DE  C02B  F054         	movff	_sensorValue,_TurnLeft
  2421  0010E2  C02C  F055         	movff	_sensorValue+1,_TurnLeft+1
  2422                           
  2423                           ;interrupts.c: 153: if(justTurned == 0) {
  2424  0010E6  5052               	movf	_justTurned,w,c
  2425  0010E8  A4D8               	btfss	status,2,c
  2426  0010EA  D004               	goto	i2l1781
  2427                           
  2428                           ;interrupts.c: 154: ForwardCounter = 420;
  2429  0010EC  0E01               	movlw	1
  2430  0010EE  6E36               	movwf	_ForwardCounter+1,c
  2431  0010F0  0EA4               	movlw	164
  2432  0010F2  D003               	goto	L6
  2433  0010F4                     i2l1781:
  2434                           
  2435                           ;interrupts.c: 156: ForwardCounter = 400;
  2436  0010F4  0E01               	movlw	1
  2437  0010F6  6E36               	movwf	_ForwardCounter+1,c
  2438  0010F8  0E90               	movlw	144
  2439  0010FA                     L6:
  2440  0010FA  6E35               	movwf	_ForwardCounter,c
  2441  0010FC  D000               	goto	i2l1783
  2442  0010FE                     i2l1783:
  2443                           
  2444                           ;interrupts.c: 157: }
  2445                           ;interrupts.c: 158: forward();
  2446  0010FE  ECB3  F00E         	call	_forward	;wreg free
  2447                           
  2448                           ;interrupts.c: 159: }
  2449  001102  D0FB               	goto	i2l1861
  2450  001104                     i2l1785:
  2451                           
  2452                           ;interrupts.c: 161: else if (TurnLeft < 95) {
  2453  001104  BE55               	btfsc	_TurnLeft+1,7,c
  2454  001106  D006               	goto	i2l1787
  2455  001108  5055               	movf	_TurnLeft+1,w,c
  2456  00110A  E119               	bnz	i2l1789
  2457  00110C  0E5F               	movlw	95
  2458  00110E  5C54               	subwf	_TurnLeft,w,c
  2459  001110  B0D8               	btfsc	status,0,c
  2460  001112  D015               	goto	i2l1789
  2461  001114                     i2l1787:
  2462                           
  2463                           ;interrupts.c: 162: RotateCounter = 167;
  2464  001114  0E00               	movlw	0
  2465  001116  6E40               	movwf	_RotateCounter+1,c
  2466  001118  0EA7               	movlw	167
  2467  00111A  6E3F               	movwf	_RotateCounter,c
  2468                           
  2469                           ;interrupts.c: 163: rotatingSide = LEFT;
  2470  00111C  0E00               	movlw	0
  2471  00111E  6E53               	movwf	_rotatingSide,c
  2472                           
  2473                           ;interrupts.c: 164: justTurned = 1;
  2474  001120  0E01               	movlw	1
  2475  001122  6E52               	movwf	_justTurned,c
  2476                           
  2477                           ;interrupts.c: 165: TurnRight= 200;
  2478  001124  0E00               	movlw	0
  2479  001126  6E57               	movwf	_TurnRight+1,c
  2480  001128  0EC8               	movlw	200
  2481  00112A  6E56               	movwf	_TurnRight,c
  2482                           
  2483                           ;interrupts.c: 166: TurnLeft = 300;
  2484  00112C  0E01               	movlw	1
  2485  00112E  6E55               	movwf	_TurnLeft+1,c
  2486  001130  0E2C               	movlw	44
  2487  001132  6E54               	movwf	_TurnLeft,c
  2488                           
  2489                           ;interrupts.c: 167: TurnedLeft = 1;
  2490  001134  0E00               	movlw	0
  2491  001136  6E42               	movwf	_TurnedLeft+1,c
  2492  001138  0E01               	movlw	1
  2493  00113A  6E41               	movwf	_TurnedLeft,c
  2494                           
  2495                           ;interrupts.c: 171: }
  2496  00113C  D0DE               	goto	i2l1861
  2497  00113E                     i2l1789:
  2498                           
  2499                           ;interrupts.c: 174: else if (sensorValue[1] < 91 && algorithm == LEFTWALL)
  2500  00113E  BE2E               	btfsc	_sensorValue+3,7,c
  2501  001140  D006               	goto	i2l1791
  2502  001142  502E               	movf	_sensorValue+3,w,c
  2503  001144  E11A               	bnz	i2l1803
  2504  001146  0E5B               	movlw	91
  2505  001148  5C2D               	subwf	_sensorValue+2,w,c
  2506  00114A  B0D8               	btfsc	status,0,c
  2507  00114C  D016               	goto	i2l1803
  2508  00114E                     i2l1791:
  2509  00114E  5051               	movf	_algorithm,w,c
  2510  001150  A4D8               	btfss	status,2,c
  2511  001152  D013               	goto	i2l1803
  2512                           
  2513                           ;interrupts.c: 175: {
  2514                           ;interrupts.c: 176: TurnRight = sensorValue[1];
  2515  001154  C02D  F056         	movff	_sensorValue+2,_TurnRight
  2516  001158  C02E  F057         	movff	_sensorValue+3,_TurnRight+1
  2517                           
  2518                           ;interrupts.c: 187: if(justTurned == 0) {
  2519  00115C  5052               	movf	_justTurned,w,c
  2520  00115E  A4D8               	btfss	status,2,c
  2521  001160  D004               	goto	i2l1799
  2522                           
  2523                           ;interrupts.c: 188: ForwardCounter = 450;
  2524  001162  0E01               	movlw	1
  2525  001164  6E36               	movwf	_ForwardCounter+1,c
  2526  001166  0EC2               	movlw	194
  2527  001168  D003               	goto	L7
  2528  00116A                     i2l1799:
  2529                           
  2530                           ;interrupts.c: 190: ForwardCounter = 410;
  2531  00116A  0E01               	movlw	1
  2532  00116C  6E36               	movwf	_ForwardCounter+1,c
  2533  00116E  0E9A               	movlw	154
  2534  001170                     L7:
  2535  001170  6E35               	movwf	_ForwardCounter,c
  2536  001172  D000               	goto	i2l1801
  2537  001174                     i2l1801:
  2538                           
  2539                           ;interrupts.c: 191: }
  2540                           ;interrupts.c: 192: forward();
  2541  001174  ECB3  F00E         	call	_forward	;wreg free
  2542                           
  2543                           ;interrupts.c: 193: }
  2544  001178  D0C0               	goto	i2l1861
  2545  00117A                     i2l1803:
  2546                           
  2547                           ;interrupts.c: 197: else if (TurnRight < 91 && sensorValue[3] > 380) {
  2548  00117A  BE57               	btfsc	_TurnRight+1,7,c
  2549  00117C  D006               	goto	i2l1805
  2550  00117E  5057               	movf	_TurnRight+1,w,c
  2551  001180  E121               	bnz	i2l1809
  2552  001182  0E5B               	movlw	91
  2553  001184  5C56               	subwf	_TurnRight,w,c
  2554  001186  B0D8               	btfsc	status,0,c
  2555  001188  D01D               	goto	i2l1809
  2556  00118A                     i2l1805:
  2557  00118A  BE32               	btfsc	_sensorValue+7,7,c
  2558  00118C  D01B               	goto	i2l1809
  2559  00118E  0E7D               	movlw	125
  2560  001190  5C31               	subwf	_sensorValue+6,w,c
  2561  001192  0E01               	movlw	1
  2562  001194  5832               	subwfb	_sensorValue+7,w,c
  2563  001196  A0D8               	btfss	status,0,c
  2564  001198  D015               	goto	i2l1809
  2565                           
  2566                           ;interrupts.c: 198: RotateCounter = 167;
  2567  00119A  0E00               	movlw	0
  2568  00119C  6E40               	movwf	_RotateCounter+1,c
  2569  00119E  0EA7               	movlw	167
  2570  0011A0  6E3F               	movwf	_RotateCounter,c
  2571                           
  2572                           ;interrupts.c: 199: rotatingSide = RIGHT;
  2573  0011A2  0E01               	movlw	1
  2574  0011A4  6E53               	movwf	_rotatingSide,c
  2575                           
  2576                           ;interrupts.c: 200: justTurned = 1;
  2577  0011A6  0E01               	movlw	1
  2578  0011A8  6E52               	movwf	_justTurned,c
  2579                           
  2580                           ;interrupts.c: 201: TurnedRight = 1;
  2581  0011AA  0E00               	movlw	0
  2582  0011AC  6E44               	movwf	_TurnedRight+1,c
  2583  0011AE  0E01               	movlw	1
  2584  0011B0  6E43               	movwf	_TurnedRight,c
  2585                           
  2586                           ;interrupts.c: 202: TurnLeft = 300;
  2587  0011B2  0E01               	movlw	1
  2588  0011B4  6E55               	movwf	_TurnLeft+1,c
  2589  0011B6  0E2C               	movlw	44
  2590  0011B8  6E54               	movwf	_TurnLeft,c
  2591                           
  2592                           ;interrupts.c: 203: TurnRight = 300;
  2593  0011BA  0E01               	movlw	1
  2594  0011BC  6E57               	movwf	_TurnRight+1,c
  2595  0011BE  0E2C               	movlw	44
  2596  0011C0  6E56               	movwf	_TurnRight,c
  2597                           
  2598                           ;interrupts.c: 204: }
  2599  0011C2  D09B               	goto	i2l1861
  2600  0011C4                     i2l1809:
  2601                           
  2602                           ;interrupts.c: 205: else if (TurnRight < 91 && sensorValue[3] < 380) {
  2603  0011C4  BE57               	btfsc	_TurnRight+1,7,c
  2604  0011C6  D006               	goto	i2l1811
  2605  0011C8  5057               	movf	_TurnRight+1,w,c
  2606  0011CA  E10F               	bnz	i2l1815
  2607  0011CC  0E5B               	movlw	91
  2608  0011CE  5C56               	subwf	_TurnRight,w,c
  2609  0011D0  B0D8               	btfsc	status,0,c
  2610  0011D2  D00B               	goto	i2l1815
  2611  0011D4                     i2l1811:
  2612  0011D4  BE32               	btfsc	_sensorValue+7,7,c
  2613  0011D6  D006               	goto	i2l1813
  2614  0011D8  0E7C               	movlw	124
  2615  0011DA  5C31               	subwf	_sensorValue+6,w,c
  2616  0011DC  0E01               	movlw	1
  2617  0011DE  5832               	subwfb	_sensorValue+7,w,c
  2618  0011E0  B0D8               	btfsc	status,0,c
  2619  0011E2  D003               	goto	i2l1815
  2620  0011E4                     i2l1813:
  2621                           
  2622                           ;interrupts.c: 206: KController();
  2623  0011E4  ECE4  F00A         	call	_KController	;wreg free
  2624                           
  2625                           ;interrupts.c: 207: }
  2626  0011E8  D088               	goto	i2l1861
  2627  0011EA                     i2l1815:
  2628                           
  2629                           ;interrupts.c: 223: else if ((sensorValue[0] > 95 && sensorValue[1] > 91 )
  2630                           ;interrupts.c: 224: && (sensorValue[3] > 380) && RotateCounter <= 0)
  2631  0011EA  BE2C               	btfsc	_sensorValue+1,7,c
  2632  0011EC  D03B               	goto	i2l1837
  2633  0011EE  502C               	movf	_sensorValue+1,w,c
  2634  0011F0  E104               	bnz	i2u147_40
  2635  0011F2  0E60               	movlw	96
  2636  0011F4  5C2B               	subwf	_sensorValue,w,c
  2637  0011F6  A0D8               	btfss	status,0,c
  2638  0011F8  D035               	goto	i2l1837
  2639  0011FA                     i2u147_40:
  2640  0011FA  BE2E               	btfsc	_sensorValue+3,7,c
  2641  0011FC  D033               	goto	i2l1837
  2642  0011FE  502E               	movf	_sensorValue+3,w,c
  2643  001200  E104               	bnz	i2u148_40
  2644  001202  0E5C               	movlw	92
  2645  001204  5C2D               	subwf	_sensorValue+2,w,c
  2646  001206  A0D8               	btfss	status,0,c
  2647  001208  D02D               	goto	i2l1837
  2648  00120A                     i2u148_40:
  2649  00120A  BE32               	btfsc	_sensorValue+7,7,c
  2650  00120C  D02B               	goto	i2l1837
  2651  00120E  0E7D               	movlw	125
  2652  001210  5C31               	subwf	_sensorValue+6,w,c
  2653  001212  0E01               	movlw	1
  2654  001214  5832               	subwfb	_sensorValue+7,w,c
  2655  001216  A0D8               	btfss	status,0,c
  2656  001218  D025               	goto	i2l1837
  2657  00121A  BE40               	btfsc	_RotateCounter+1,7,c
  2658  00121C  D005               	goto	i2l1823
  2659  00121E  5040               	movf	_RotateCounter+1,w,c
  2660  001220  E121               	bnz	i2l1837
  2661  001222  043F               	decf	_RotateCounter,w,c
  2662  001224  B0D8               	btfsc	status,0,c
  2663  001226  D01E               	goto	i2l1837
  2664  001228                     i2l1823:
  2665                           
  2666                           ;interrupts.c: 225: {
  2667                           ;interrupts.c: 226: Deadend = 1;
  2668  001228  0E00               	movlw	0
  2669  00122A  6E34               	movwf	_Deadend+1,c
  2670  00122C  0E01               	movlw	1
  2671  00122E  6E33               	movwf	_Deadend,c
  2672                           
  2673                           ;interrupts.c: 227: RotateCounter = 167*2;
  2674  001230  0E01               	movlw	1
  2675  001232  6E40               	movwf	_RotateCounter+1,c
  2676  001234  0E4E               	movlw	78
  2677  001236  6E3F               	movwf	_RotateCounter,c
  2678                           
  2679                           ;interrupts.c: 228: rotate(rotatingSide);
  2680  001238  5053               	movf	_rotatingSide,w,c
  2681  00123A  EC21  F00E         	call	_rotate
  2682                           
  2683                           ;interrupts.c: 229: justTurned = 1;
  2684  00123E  0E01               	movlw	1
  2685  001240  6E52               	movwf	_justTurned,c
  2686                           
  2687                           ;interrupts.c: 230: TurnRight= 200;
  2688  001242  0E00               	movlw	0
  2689  001244  6E57               	movwf	_TurnRight+1,c
  2690  001246  0EC8               	movlw	200
  2691  001248  6E56               	movwf	_TurnRight,c
  2692                           
  2693                           ;interrupts.c: 231: TurnLeft = 300;
  2694  00124A  0E01               	movlw	1
  2695  00124C  6E55               	movwf	_TurnLeft+1,c
  2696  00124E  0E2C               	movlw	44
  2697  001250  6E54               	movwf	_TurnLeft,c
  2698                           
  2699                           ;interrupts.c: 232: TurnedLeft = 0;
  2700  001252  0E00               	movlw	0
  2701  001254  6E42               	movwf	_TurnedLeft+1,c
  2702  001256  0E00               	movlw	0
  2703  001258  6E41               	movwf	_TurnedLeft,c
  2704                           
  2705                           ;interrupts.c: 233: TurnedRight = 0;
  2706  00125A  0E00               	movlw	0
  2707  00125C  6E44               	movwf	_TurnedRight+1,c
  2708  00125E  0E00               	movlw	0
  2709  001260  6E43               	movwf	_TurnedRight,c
  2710                           
  2711                           ;interrupts.c: 234: }
  2712  001262  D04B               	goto	i2l1861
  2713  001264                     i2l1837:
  2714                           
  2715                           ;interrupts.c: 235: else if ((sensorValue[0] > 95 && sensorValue[1] > 91))
  2716  001264  BE2C               	btfsc	_sensorValue+1,7,c
  2717  001266  D02C               	goto	i2l1849
  2718  001268  502C               	movf	_sensorValue+1,w,c
  2719  00126A  E104               	bnz	i2u151_40
  2720  00126C  0E60               	movlw	96
  2721  00126E  5C2B               	subwf	_sensorValue,w,c
  2722  001270  A0D8               	btfss	status,0,c
  2723  001272  D026               	goto	i2l1849
  2724  001274                     i2u151_40:
  2725  001274  BE2E               	btfsc	_sensorValue+3,7,c
  2726  001276  D024               	goto	i2l1849
  2727  001278  502E               	movf	_sensorValue+3,w,c
  2728  00127A  E104               	bnz	i2u152_40
  2729  00127C  0E5C               	movlw	92
  2730  00127E  5C2D               	subwf	_sensorValue+2,w,c
  2731  001280  A0D8               	btfss	status,0,c
  2732  001282  D01E               	goto	i2l1849
  2733  001284                     i2u152_40:
  2734                           
  2735                           ;interrupts.c: 236: {
  2736                           ;interrupts.c: 237: if (sensorValue[3] < 80 || sensorValue[2] < 120){
  2737  001284  BE32               	btfsc	_sensorValue+7,7,c
  2738  001286  D00E               	goto	i2l1845
  2739  001288  5032               	movf	_sensorValue+7,w,c
  2740  00128A  E104               	bnz	i2u153_40
  2741  00128C  0E50               	movlw	80
  2742  00128E  5C31               	subwf	_sensorValue+6,w,c
  2743  001290  A0D8               	btfss	status,0,c
  2744  001292  D008               	goto	i2l1845
  2745  001294                     i2u153_40:
  2746  001294  BE30               	btfsc	_sensorValue+5,7,c
  2747  001296  D006               	goto	i2l1845
  2748  001298  5030               	movf	_sensorValue+5,w,c
  2749  00129A  E107               	bnz	i2l1847
  2750  00129C  0E78               	movlw	120
  2751  00129E  5C2F               	subwf	_sensorValue+4,w,c
  2752  0012A0  B0D8               	btfsc	status,0,c
  2753  0012A2  D003               	goto	i2l1847
  2754  0012A4                     i2l1845:
  2755                           
  2756                           ;interrupts.c: 238: KController();
  2757  0012A4  ECE4  F00A         	call	_KController	;wreg free
  2758                           
  2759                           ;interrupts.c: 239: }
  2760  0012A8  D028               	goto	i2l1861
  2761  0012AA                     i2l1847:
  2762                           
  2763                           ;interrupts.c: 240: else {
  2764                           ;interrupts.c: 241: motorCounterUpdate(RIGHT,0);
  2765  0012AA  0E00               	movlw	0
  2766  0012AC  6E12               	movwf	motorCounterUpdate@reverse,c
  2767  0012AE  0E01               	movlw	1
  2768  0012B0  EC02  F00D         	call	_motorCounterUpdate
  2769                           
  2770                           ;interrupts.c: 242: motorCounterUpdate(LEFT,0);
  2771  0012B4  0E00               	movlw	0
  2772  0012B6  6E12               	movwf	motorCounterUpdate@reverse,c
  2773  0012B8  0E00               	movlw	0
  2774  0012BA  EC02  F00D         	call	_motorCounterUpdate
  2775                           
  2776                           ;interrupts.c: 243: }
  2777                           ;interrupts.c: 245: }
  2778  0012BE  D01D               	goto	i2l1861
  2779  0012C0                     i2l1849:
  2780                           
  2781                           ;interrupts.c: 272: else {
  2782                           ;interrupts.c: 273: motorCounterUpdate(RIGHT,0);
  2783  0012C0  0E00               	movlw	0
  2784  0012C2  6E12               	movwf	motorCounterUpdate@reverse,c
  2785  0012C4  0E01               	movlw	1
  2786  0012C6  EC02  F00D         	call	_motorCounterUpdate
  2787                           
  2788                           ;interrupts.c: 274: motorCounterUpdate(LEFT,0);
  2789  0012CA  0E00               	movlw	0
  2790  0012CC  6E12               	movwf	motorCounterUpdate@reverse,c
  2791  0012CE  0E00               	movlw	0
  2792  0012D0  EC02  F00D         	call	_motorCounterUpdate
  2793                           
  2794                           ;interrupts.c: 275: justTurned = 0;
  2795  0012D4  0E00               	movlw	0
  2796  0012D6  6E52               	movwf	_justTurned,c
  2797                           
  2798                           ;interrupts.c: 276: TurnedLeft = 0;
  2799  0012D8  0E00               	movlw	0
  2800  0012DA  6E42               	movwf	_TurnedLeft+1,c
  2801  0012DC  0E00               	movlw	0
  2802  0012DE  6E41               	movwf	_TurnedLeft,c
  2803                           
  2804                           ;interrupts.c: 277: TurnedRight = 0;
  2805  0012E0  0E00               	movlw	0
  2806  0012E2  6E44               	movwf	_TurnedRight+1,c
  2807  0012E4  0E00               	movlw	0
  2808  0012E6  6E43               	movwf	_TurnedRight,c
  2809                           
  2810                           ;interrupts.c: 278: TurnRight = 200;
  2811  0012E8  0E00               	movlw	0
  2812  0012EA  6E57               	movwf	_TurnRight+1,c
  2813  0012EC  0EC8               	movlw	200
  2814  0012EE  6E56               	movwf	_TurnRight,c
  2815                           
  2816                           ;interrupts.c: 279: TurnLeft = 300;
  2817  0012F0  0E01               	movlw	1
  2818  0012F2  6E55               	movwf	_TurnLeft+1,c
  2819  0012F4  0E2C               	movlw	44
  2820  0012F6  6E54               	movwf	_TurnLeft,c
  2821  0012F8  D000               	goto	i2l1861
  2822  0012FA                     i2l1861:
  2823                           
  2824                           ;interrupts.c: 280: }
  2825                           ;interrupts.c: 281: moveMouse(merge(LMotorCounter,RMotorCounter));
  2826  0012FA  C050  F012         	movff	_RMotorCounter,merge@right
  2827  0012FE  504F               	movf	_LMotorCounter,w,c
  2828  001300  ECE6  F00E         	call	_merge
  2829  001304  ECF3  F00E         	call	_moveMouse
  2830                           
  2831                           ;interrupts.c: 282: MotorDelayCounter = 0;
  2832  001308  0E00               	movlw	0
  2833  00130A  6E3A               	movwf	_MotorDelayCounter+1,c
  2834  00130C  0E00               	movlw	0
  2835  00130E  6E39               	movwf	_MotorDelayCounter,c
  2836  001310  D000               	goto	i2l1863
  2837  001312                     i2l1863:
  2838                           
  2839                           ;interrupts.c: 284: }
  2840                           ;interrupts.c: 286: MotorDelayCounter++;
  2841  001312  4A39               	infsnz	_MotorDelayCounter,f,c
  2842  001314  2A3A               	incf	_MotorDelayCounter+1,f,c
  2843                           
  2844                           ;interrupts.c: 287: INTCONbits.TMR0IF = 0;
  2845  001316  94F2               	bcf	intcon,2,c	;volatile
  2846  001318  D000               	goto	i2l105
  2847  00131A                     i2l105:
  2848  00131A  C027  FFF5         	movff	??_high_isr+13,tablat
  2849  00131E  C026  FFF8         	movff	??_high_isr+12,tblptru
  2850  001322  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2851  001326  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2852  00132A  C023  FFF4         	movff	??_high_isr+9,prodh
  2853  00132E  C022  FFF3         	movff	??_high_isr+8,prodl
  2854  001332  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2855  001336  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2856  00133A  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2857  00133E  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2858  001342  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2859  001346  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2860  00134A  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2861  00134E  C01A  FFFA         	movff	??_high_isr,pclath
  2862  001352  0011               	retfie		f
  2863  001354                     __end_of_high_isr:
  2864                           	opt stack 0
  2865                           pclatu	equ	0xFFB
  2866                           pclath	equ	0xFFA
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           intcon2	equ	0xFF1
  2875                           postinc0	equ	0xFEE
  2876                           fsr0h	equ	0xFEA
  2877                           fsr0l	equ	0xFE9
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           bsr	equ	0xFE0
  2883                           postinc2	equ	0xFDE
  2884                           postdec2	equ	0xFDD
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _rotate *****************
  2890 ;; Defined at:
  2891 ;;		line 519 in file "interrupts.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  side            1    wreg     enum E4142
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  side            1   19[COMRAM] enum E4142
  2896 ;; Return value:  Size  Location     Type
  2897 ;;		None               void
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        1 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    1
  2912 ;; This function calls:
  2913 ;;		_motorCounterUpdate
  2914 ;; This function is called by:
  2915 ;;		_high_isr
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text13
  2920  001C42                     __ptext13:
  2921                           	opt stack 0
  2922  001C42                     _rotate:
  2923                           	opt stack 24
  2924                           
  2925                           ;incstack = 0
  2926                           ;rotate@side stored from wreg
  2927  001C42  6E14               	movwf	rotate@side,c
  2928                           
  2929                           ;interrupts.c: 521: if (side == LEFT){
  2930  001C44  5014               	movf	rotate@side,w,c
  2931  001C46  A4D8               	btfss	status,2,c
  2932  001C48  D00B               	goto	i2l1595
  2933                           
  2934                           ;interrupts.c: 522: motorCounterUpdate(RIGHT,0);
  2935  001C4A  0E00               	movlw	0
  2936  001C4C  6E12               	movwf	motorCounterUpdate@reverse,c
  2937  001C4E  0E01               	movlw	1
  2938  001C50  EC02  F00D         	call	_motorCounterUpdate
  2939                           
  2940                           ;interrupts.c: 523: motorCounterUpdate(LEFT,1);
  2941  001C54  0E01               	movlw	1
  2942  001C56  6E12               	movwf	motorCounterUpdate@reverse,c
  2943  001C58  0E00               	movlw	0
  2944  001C5A  EC02  F00D         	call	_motorCounterUpdate
  2945                           
  2946                           ;interrupts.c: 524: } else {
  2947  001C5E  D00B               	goto	i2l1597
  2948  001C60                     i2l1595:
  2949                           
  2950                           ;interrupts.c: 525: motorCounterUpdate(LEFT,0);
  2951  001C60  0E00               	movlw	0
  2952  001C62  6E12               	movwf	motorCounterUpdate@reverse,c
  2953  001C64  0E00               	movlw	0
  2954  001C66  EC02  F00D         	call	_motorCounterUpdate
  2955                           
  2956                           ;interrupts.c: 526: motorCounterUpdate(RIGHT,1);
  2957  001C6A  0E01               	movlw	1
  2958  001C6C  6E12               	movwf	motorCounterUpdate@reverse,c
  2959  001C6E  0E01               	movlw	1
  2960  001C70  EC02  F00D         	call	_motorCounterUpdate
  2961  001C74  D000               	goto	i2l1597
  2962  001C76                     i2l1597:
  2963                           
  2964                           ;interrupts.c: 527: }
  2965                           ;interrupts.c: 528: RotateCounter--;
  2966  001C76  063F               	decf	_RotateCounter,f,c
  2967  001C78  A0D8               	btfss	status,0,c
  2968  001C7A  0640               	decf	_RotateCounter+1,f,c
  2969  001C7C  0012               	return		;funcret
  2970  001C7E                     __end_of_rotate:
  2971                           	opt stack 0
  2972                           pclatu	equ	0xFFB
  2973                           pclath	equ	0xFFA
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           intcon	equ	0xFF2
  2981                           intcon2	equ	0xFF1
  2982                           postinc0	equ	0xFEE
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           wreg	equ	0xFE8
  2986                           postdec1	equ	0xFE5
  2987                           fsr1h	equ	0xFE2
  2988                           fsr1l	equ	0xFE1
  2989                           bsr	equ	0xFE0
  2990                           postinc2	equ	0xFDE
  2991                           postdec2	equ	0xFDD
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _forward *****************
  2997 ;; Defined at:
  2998 ;;		line 550 in file "interrupts.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;		None
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;		None
  3003 ;; Return value:  Size  Location     Type
  3004 ;;		None               void
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;Total ram usage:        0 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    1
  3019 ;; This function calls:
  3020 ;;		_motorCounterUpdate
  3021 ;; This function is called by:
  3022 ;;		_high_isr
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text14
  3027  001D66                     __ptext14:
  3028                           	opt stack 0
  3029  001D66                     _forward:
  3030                           	opt stack 24
  3031                           
  3032                           ;interrupts.c: 552: motorCounterUpdate(RIGHT,0);
  3033                           
  3034                           ;incstack = 0
  3035  001D66  0E00               	movlw	0
  3036  001D68  6E12               	movwf	motorCounterUpdate@reverse,c
  3037  001D6A  0E01               	movlw	1
  3038  001D6C  EC02  F00D         	call	_motorCounterUpdate
  3039                           
  3040                           ;interrupts.c: 553: motorCounterUpdate(LEFT,0);
  3041  001D70  0E00               	movlw	0
  3042  001D72  6E12               	movwf	motorCounterUpdate@reverse,c
  3043  001D74  0E00               	movlw	0
  3044  001D76  EC02  F00D         	call	_motorCounterUpdate
  3045                           
  3046                           ;interrupts.c: 554: ForwardCounter--;
  3047  001D7A  0635               	decf	_ForwardCounter,f,c
  3048  001D7C  A0D8               	btfss	status,0,c
  3049  001D7E  0636               	decf	_ForwardCounter+1,f,c
  3050  001D80  0012               	return		;funcret
  3051  001D82                     __end_of_forward:
  3052                           	opt stack 0
  3053                           pclatu	equ	0xFFB
  3054                           pclath	equ	0xFFA
  3055                           tblptru	equ	0xFF8
  3056                           tblptrh	equ	0xFF7
  3057                           tblptrl	equ	0xFF6
  3058                           tablat	equ	0xFF5
  3059                           prodh	equ	0xFF4
  3060                           prodl	equ	0xFF3
  3061                           intcon	equ	0xFF2
  3062                           intcon2	equ	0xFF1
  3063                           postinc0	equ	0xFEE
  3064                           fsr0h	equ	0xFEA
  3065                           fsr0l	equ	0xFE9
  3066                           wreg	equ	0xFE8
  3067                           postdec1	equ	0xFE5
  3068                           fsr1h	equ	0xFE2
  3069                           fsr1l	equ	0xFE1
  3070                           bsr	equ	0xFE0
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _Reversing *****************
  3078 ;; Defined at:
  3079 ;;		line 543 in file "interrupts.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;		None               void
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        0 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    1
  3100 ;; This function calls:
  3101 ;;		_motorCounterUpdate
  3102 ;; This function is called by:
  3103 ;;		_high_isr
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text15
  3108  001D82                     __ptext15:
  3109                           	opt stack 0
  3110  001D82                     _Reversing:
  3111                           	opt stack 24
  3112                           
  3113                           ;interrupts.c: 545: motorCounterUpdate(RIGHT,1);
  3114                           
  3115                           ;incstack = 0
  3116  001D82  0E01               	movlw	1
  3117  001D84  6E12               	movwf	motorCounterUpdate@reverse,c
  3118  001D86  0E01               	movlw	1
  3119  001D88  EC02  F00D         	call	_motorCounterUpdate
  3120                           
  3121                           ;interrupts.c: 546: motorCounterUpdate(LEFT,1);
  3122  001D8C  0E01               	movlw	1
  3123  001D8E  6E12               	movwf	motorCounterUpdate@reverse,c
  3124  001D90  0E00               	movlw	0
  3125  001D92  EC02  F00D         	call	_motorCounterUpdate
  3126                           
  3127                           ;interrupts.c: 547: ReverseCounter--;
  3128  001D96  063D               	decf	_ReverseCounter,f,c
  3129  001D98  A0D8               	btfss	status,0,c
  3130  001D9A  063E               	decf	_ReverseCounter+1,f,c
  3131  001D9C  0012               	return		;funcret
  3132  001D9E                     __end_of_Reversing:
  3133                           	opt stack 0
  3134                           pclatu	equ	0xFFB
  3135                           pclath	equ	0xFFA
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           intcon	equ	0xFF2
  3143                           intcon2	equ	0xFF1
  3144                           postinc0	equ	0xFEE
  3145                           fsr0h	equ	0xFEA
  3146                           fsr0l	equ	0xFE9
  3147                           wreg	equ	0xFE8
  3148                           postdec1	equ	0xFE5
  3149                           fsr1h	equ	0xFE2
  3150                           fsr1l	equ	0xFE1
  3151                           bsr	equ	0xFE0
  3152                           postinc2	equ	0xFDE
  3153                           postdec2	equ	0xFDD
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _KController *****************
  3159 ;; Defined at:
  3160 ;;		line 398 in file "interrupts.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  diff            2   23[COMRAM] int 
  3165 ;;  correctTo       1   22[COMRAM] enum E4142
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;Total ram usage:        5 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    1
  3182 ;; This function calls:
  3183 ;;		_ABS
  3184 ;;		_merge
  3185 ;;		_motorCounterUpdate
  3186 ;;		_moveMouse
  3187 ;; This function is called by:
  3188 ;;		_high_isr
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text16
  3193  0015C8                     __ptext16:
  3194                           	opt stack 0
  3195  0015C8                     _KController:
  3196                           	opt stack 24
  3197                           
  3198                           ;interrupts.c: 400: Side correctTo;
  3199                           ;interrupts.c: 401: int diff = 0;
  3200                           
  3201                           ;incstack = 0
  3202  0015C8  0E00               	movlw	0
  3203  0015CA  6E19               	movwf	KController@diff+1,c
  3204  0015CC  0E00               	movlw	0
  3205  0015CE  6E18               	movwf	KController@diff,c
  3206                           
  3207                           ;interrupts.c: 402: if((sensorValue[0] > 95 && sensorValue[1] > 91))
  3208  0015D0  BE2C               	btfsc	_sensorValue+1,7,c
  3209  0015D2  D077               	goto	i2l1641
  3210  0015D4  502C               	movf	_sensorValue+1,w,c
  3211  0015D6  E104               	bnz	i2u104_40
  3212  0015D8  0E60               	movlw	96
  3213  0015DA  5C2B               	subwf	_sensorValue,w,c
  3214  0015DC  A0D8               	btfss	status,0,c
  3215  0015DE  D071               	goto	i2l1641
  3216  0015E0                     i2u104_40:
  3217  0015E0  BE2E               	btfsc	_sensorValue+3,7,c
  3218  0015E2  D06F               	goto	i2l1641
  3219  0015E4  502E               	movf	_sensorValue+3,w,c
  3220  0015E6  E104               	bnz	i2u105_40
  3221  0015E8  0E5C               	movlw	92
  3222  0015EA  5C2D               	subwf	_sensorValue+2,w,c
  3223  0015EC  A0D8               	btfss	status,0,c
  3224  0015EE  D069               	goto	i2l1641
  3225  0015F0                     i2u105_40:
  3226                           
  3227                           ;interrupts.c: 403: {
  3228                           ;interrupts.c: 404: diff = ABS(sensorValue[1] - sensorValue[0]);
  3229  0015F0  C02B  F015         	movff	_sensorValue,??_KController
  3230  0015F4  C02C  F016         	movff	_sensorValue+1,??_KController+1
  3231  0015F8  1E15               	comf	??_KController,f,c
  3232  0015FA  1E16               	comf	??_KController+1,f,c
  3233  0015FC  4A15               	infsnz	??_KController,f,c
  3234  0015FE  2A16               	incf	??_KController+1,f,c
  3235  001600  502D               	movf	_sensorValue+2,w,c
  3236  001602  2415               	addwf	??_KController,w,c
  3237  001604  6E12               	movwf	ABS@x,c
  3238  001606  502E               	movf	_sensorValue+3,w,c
  3239  001608  2016               	addwfc	??_KController+1,w,c
  3240  00160A  6E13               	movwf	ABS@x+1,c
  3241  00160C  ECCF  F00E         	call	_ABS	;wreg free
  3242  001610  C012  F018         	movff	?_ABS,KController@diff
  3243  001614  C013  F019         	movff	?_ABS+1,KController@diff+1
  3244                           
  3245                           ;interrupts.c: 406: if(controllerSteps > 0)
  3246  001618  5058               	movf	_controllerSteps,w,c
  3247  00161A  B4D8               	btfsc	status,2,c
  3248  00161C  D00C               	goto	i2l1615
  3249                           
  3250                           ;interrupts.c: 407: {
  3251                           ;interrupts.c: 408: motorCounterUpdate(RIGHT,0);
  3252  00161E  0E00               	movlw	0
  3253  001620  6E12               	movwf	motorCounterUpdate@reverse,c
  3254  001622  0E01               	movlw	1
  3255  001624  EC02  F00D         	call	_motorCounterUpdate
  3256                           
  3257                           ;interrupts.c: 409: motorCounterUpdate(LEFT,0);
  3258  001628  0E00               	movlw	0
  3259  00162A  6E12               	movwf	motorCounterUpdate@reverse,c
  3260  00162C  0E00               	movlw	0
  3261  00162E  EC02  F00D         	call	_motorCounterUpdate
  3262  001632  D08C               	goto	i2l1657
  3263                           
  3264                           ;interrupts.c: 411: return;
  3265                           
  3266                           ;interrupts.c: 410: controllerSteps--;
  3267  001634  D0DB               	goto	i2l161
  3268  001636                     i2l1615:
  3269                           
  3270                           ;interrupts.c: 412: }
  3271                           ;interrupts.c: 414: if(sensorValue[0] > sensorValue[1])
  3272  001636  502B               	movf	_sensorValue,w,c
  3273  001638  5C2D               	subwf	_sensorValue+2,w,c
  3274  00163A  502E               	movf	_sensorValue+3,w,c
  3275  00163C  0A80               	xorlw	128
  3276  00163E  6E15               	movwf	??_KController& (0+255),c
  3277  001640  502C               	movf	_sensorValue+1,w,c
  3278  001642  0A80               	xorlw	128
  3279  001644  5815               	subwfb	??_KController& (0+255),w,c
  3280  001646  B0D8               	btfsc	status,0,c
  3281  001648  D00F               	goto	i2l1623
  3282                           
  3283                           ;interrupts.c: 415: {
  3284                           ;interrupts.c: 417: correctTo = LEFT;
  3285  00164A  0E00               	movlw	0
  3286  00164C  6E17               	movwf	KController@correctTo,c
  3287                           
  3288                           ;interrupts.c: 418: motorCounterUpdate(correctTo,0);
  3289  00164E  0E00               	movlw	0
  3290  001650  6E12               	movwf	motorCounterUpdate@reverse,c
  3291  001652  5017               	movf	KController@correctTo,w,c
  3292  001654  EC02  F00D         	call	_motorCounterUpdate
  3293                           
  3294                           ;interrupts.c: 419: moveMouse(merge(LMotorCounter,RMotorCounter));
  3295  001658  C050  F012         	movff	_RMotorCounter,merge@right
  3296  00165C  504F               	movf	_LMotorCounter,w,c
  3297  00165E  ECE6  F00E         	call	_merge
  3298  001662  ECF3  F00E         	call	_moveMouse
  3299                           
  3300                           ;interrupts.c: 420: }
  3301  001666  D00F               	goto	i2l1629
  3302  001668                     i2l1623:
  3303                           
  3304                           ;interrupts.c: 421: else
  3305                           ;interrupts.c: 422: {
  3306                           ;interrupts.c: 424: correctTo = RIGHT;
  3307  001668  0E01               	movlw	1
  3308  00166A  6E17               	movwf	KController@correctTo,c
  3309                           
  3310                           ;interrupts.c: 425: motorCounterUpdate(correctTo,0);
  3311  00166C  0E00               	movlw	0
  3312  00166E  6E12               	movwf	motorCounterUpdate@reverse,c
  3313  001670  5017               	movf	KController@correctTo,w,c
  3314  001672  EC02  F00D         	call	_motorCounterUpdate
  3315                           
  3316                           ;interrupts.c: 426: moveMouse(merge(LMotorCounter,RMotorCounter));
  3317  001676  C050  F012         	movff	_RMotorCounter,merge@right
  3318  00167A  504F               	movf	_LMotorCounter,w,c
  3319  00167C  ECE6  F00E         	call	_merge
  3320  001680  ECF3  F00E         	call	_moveMouse
  3321  001684  D000               	goto	i2l1629
  3322  001686                     i2l1629:
  3323                           
  3324                           ;interrupts.c: 427: }
  3325                           ;interrupts.c: 429: if(diff > 80)
  3326  001686  BE19               	btfsc	KController@diff+1,7,c
  3327  001688  D008               	goto	i2l1633
  3328  00168A  5019               	movf	KController@diff+1,w,c
  3329  00168C  E104               	bnz	i2u108_40
  3330  00168E  0E51               	movlw	81
  3331  001690  5C18               	subwf	KController@diff,w,c
  3332  001692  A0D8               	btfss	status,0,c
  3333  001694  D002               	goto	i2l1633
  3334  001696                     i2u108_40:
  3335                           
  3336                           ;interrupts.c: 430: controllerSteps = 1;
  3337  001696  0E01               	movlw	1
  3338  001698  D09C               	goto	L12
  3339  00169A                     i2l1633:
  3340                           
  3341                           ;interrupts.c: 431: else if(diff <= 80 && diff > 30)
  3342  00169A  BE19               	btfsc	KController@diff+1,7,c
  3343  00169C  D006               	goto	i2l1635
  3344  00169E  5019               	movf	KController@diff+1,w,c
  3345  0016A0  E10E               	bnz	i2l1639
  3346  0016A2  0E51               	movlw	81
  3347  0016A4  5C18               	subwf	KController@diff,w,c
  3348  0016A6  B0D8               	btfsc	status,0,c
  3349  0016A8  D093               	goto	i2l1685
  3350  0016AA                     i2l1635:
  3351  0016AA  BE19               	btfsc	KController@diff+1,7,c
  3352  0016AC  D091               	goto	i2l1685
  3353  0016AE  5019               	movf	KController@diff+1,w,c
  3354  0016B0  E104               	bnz	i2u110_40
  3355  0016B2  0E1F               	movlw	31
  3356  0016B4  5C18               	subwf	KController@diff,w,c
  3357  0016B6  A0D8               	btfss	status,0,c
  3358  0016B8  D08B               	goto	i2l1685
  3359  0016BA                     i2u110_40:
  3360                           
  3361                           ;interrupts.c: 432: controllerSteps = 5;
  3362  0016BA  0E05               	movlw	5
  3363  0016BC  D08A               	goto	L12
  3364  0016BE                     i2l1639:
  3365  0016BE  D088               	goto	i2l1685
  3366                           
  3367                           ;interrupts.c: 436: }
  3368                           
  3369                           ;interrupts.c: 433: else
  3370                           ;interrupts.c: 434: controllerSteps = 10;
  3371  0016C0  D095               	goto	i2l161
  3372  0016C2                     i2l1641:
  3373                           
  3374                           ;interrupts.c: 437: else if((sensorValue[0] > 95))
  3375  0016C2  BE2C               	btfsc	_sensorValue+1,7,c
  3376  0016C4  D008               	goto	i2l1645
  3377  0016C6  502C               	movf	_sensorValue+1,w,c
  3378  0016C8  E105               	bnz	i2u111_40
  3379  0016CA  0E60               	movlw	96
  3380  0016CC  5C2B               	subwf	_sensorValue,w,c
  3381  0016CE  B0D8               	btfsc	status,0,c
  3382  0016D0  D08D               	goto	i2l161
  3383  0016D2  D001               	goto	i2l1645
  3384  0016D4                     i2u111_40:
  3385                           
  3386                           ;interrupts.c: 438: {
  3387                           ;interrupts.c: 441: }
  3388  0016D4  D08B               	goto	i2l161
  3389  0016D6                     i2l1645:
  3390                           
  3391                           ;interrupts.c: 476: else if(((sensorValue[0] > 95 && sensorValue[1] > 91) && sensorValue
      +                          [3] > 80))
  3392  0016D6  BE2C               	btfsc	_sensorValue+1,7,c
  3393  0016D8  D07E               	goto	i2l1687
  3394  0016DA  502C               	movf	_sensorValue+1,w,c
  3395  0016DC  E104               	bnz	i2u112_40
  3396  0016DE  0E60               	movlw	96
  3397  0016E0  5C2B               	subwf	_sensorValue,w,c
  3398  0016E2  A0D8               	btfss	status,0,c
  3399  0016E4  D078               	goto	i2l1687
  3400  0016E6                     i2u112_40:
  3401  0016E6  BE2E               	btfsc	_sensorValue+3,7,c
  3402  0016E8  D076               	goto	i2l1687
  3403  0016EA  502E               	movf	_sensorValue+3,w,c
  3404  0016EC  E104               	bnz	i2u113_40
  3405  0016EE  0E5C               	movlw	92
  3406  0016F0  5C2D               	subwf	_sensorValue+2,w,c
  3407  0016F2  A0D8               	btfss	status,0,c
  3408  0016F4  D070               	goto	i2l1687
  3409  0016F6                     i2u113_40:
  3410  0016F6  BE32               	btfsc	_sensorValue+7,7,c
  3411  0016F8  D06E               	goto	i2l1687
  3412  0016FA  5032               	movf	_sensorValue+7,w,c
  3413  0016FC  E104               	bnz	i2u114_40
  3414  0016FE  0E51               	movlw	81
  3415  001700  5C31               	subwf	_sensorValue+6,w,c
  3416  001702  A0D8               	btfss	status,0,c
  3417  001704  D068               	goto	i2l1687
  3418  001706                     i2u114_40:
  3419                           
  3420                           ;interrupts.c: 477: {
  3421                           ;interrupts.c: 478: diff = ABS(sensorValue[3] - sensorValue[2]);
  3422  001706  EE20  F02F         	lfsr	2,_sensorValue+4
  3423  00170A  CFDE F015          	movff	postinc2,??_KController
  3424  00170E  CFDD F016          	movff	postdec2,??_KController+1
  3425  001712  1E15               	comf	??_KController,f,c
  3426  001714  1E16               	comf	??_KController+1,f,c
  3427  001716  4A15               	infsnz	??_KController,f,c
  3428  001718  2A16               	incf	??_KController+1,f,c
  3429  00171A  5031               	movf	_sensorValue+6,w,c
  3430  00171C  2415               	addwf	??_KController,w,c
  3431  00171E  6E12               	movwf	ABS@x,c
  3432  001720  5032               	movf	_sensorValue+7,w,c
  3433  001722  2016               	addwfc	??_KController+1,w,c
  3434  001724  6E13               	movwf	ABS@x+1,c
  3435  001726  ECCF  F00E         	call	_ABS	;wreg free
  3436  00172A  C012  F018         	movff	?_ABS,KController@diff
  3437  00172E  C013  F019         	movff	?_ABS+1,KController@diff+1
  3438                           
  3439                           ;interrupts.c: 480: if(controllerSteps > 0)
  3440  001732  5058               	movf	_controllerSteps,w,c
  3441  001734  B4D8               	btfsc	status,2,c
  3442  001736  D00C               	goto	i2l1661
  3443                           
  3444                           ;interrupts.c: 481: {
  3445                           ;interrupts.c: 482: motorCounterUpdate(RIGHT,0);
  3446  001738  0E00               	movlw	0
  3447  00173A  6E12               	movwf	motorCounterUpdate@reverse,c
  3448  00173C  0E01               	movlw	1
  3449  00173E  EC02  F00D         	call	_motorCounterUpdate
  3450                           
  3451                           ;interrupts.c: 483: motorCounterUpdate(LEFT,0);
  3452  001742  0E00               	movlw	0
  3453  001744  6E12               	movwf	motorCounterUpdate@reverse,c
  3454  001746  0E00               	movlw	0
  3455  001748  EC02  F00D         	call	_motorCounterUpdate
  3456  00174C                     i2l1657:
  3457                           
  3458                           ;interrupts.c: 484: controllerSteps--;
  3459  00174C  0658               	decf	_controllerSteps,f,c
  3460                           
  3461                           ;interrupts.c: 485: return;
  3462  00174E  D04E               	goto	i2l161
  3463  001750                     i2l1661:
  3464                           
  3465                           ;interrupts.c: 486: }
  3466                           ;interrupts.c: 488: if(sensorValue[2] > sensorValue[3])
  3467  001750  502F               	movf	_sensorValue+4,w,c
  3468  001752  5C31               	subwf	_sensorValue+6,w,c
  3469  001754  5032               	movf	_sensorValue+7,w,c
  3470  001756  0A80               	xorlw	128
  3471  001758  6E15               	movwf	??_KController& (0+255),c
  3472  00175A  5030               	movf	_sensorValue+5,w,c
  3473  00175C  0A80               	xorlw	128
  3474  00175E  5815               	subwfb	??_KController& (0+255),w,c
  3475  001760  B0D8               	btfsc	status,0,c
  3476  001762  D00F               	goto	i2l1669
  3477                           
  3478                           ;interrupts.c: 489: {
  3479                           ;interrupts.c: 491: correctTo = LEFT;
  3480  001764  0E00               	movlw	0
  3481  001766  6E17               	movwf	KController@correctTo,c
  3482                           
  3483                           ;interrupts.c: 492: motorCounterUpdate(correctTo,0);
  3484  001768  0E00               	movlw	0
  3485  00176A  6E12               	movwf	motorCounterUpdate@reverse,c
  3486  00176C  5017               	movf	KController@correctTo,w,c
  3487  00176E  EC02  F00D         	call	_motorCounterUpdate
  3488                           
  3489                           ;interrupts.c: 493: moveMouse(merge(LMotorCounter,RMotorCounter));
  3490  001772  C050  F012         	movff	_RMotorCounter,merge@right
  3491  001776  504F               	movf	_LMotorCounter,w,c
  3492  001778  ECE6  F00E         	call	_merge
  3493  00177C  ECF3  F00E         	call	_moveMouse
  3494                           
  3495                           ;interrupts.c: 494: }
  3496  001780  D00F               	goto	i2l1675
  3497  001782                     i2l1669:
  3498                           
  3499                           ;interrupts.c: 495: else
  3500                           ;interrupts.c: 496: {
  3501                           ;interrupts.c: 498: correctTo = RIGHT;
  3502  001782  0E01               	movlw	1
  3503  001784  6E17               	movwf	KController@correctTo,c
  3504                           
  3505                           ;interrupts.c: 499: motorCounterUpdate(correctTo,0);
  3506  001786  0E00               	movlw	0
  3507  001788  6E12               	movwf	motorCounterUpdate@reverse,c
  3508  00178A  5017               	movf	KController@correctTo,w,c
  3509  00178C  EC02  F00D         	call	_motorCounterUpdate
  3510                           
  3511                           ;interrupts.c: 500: moveMouse(merge(LMotorCounter,RMotorCounter));
  3512  001790  C050  F012         	movff	_RMotorCounter,merge@right
  3513  001794  504F               	movf	_LMotorCounter,w,c
  3514  001796  ECE6  F00E         	call	_merge
  3515  00179A  ECF3  F00E         	call	_moveMouse
  3516  00179E  D000               	goto	i2l1675
  3517  0017A0                     i2l1675:
  3518                           
  3519                           ;interrupts.c: 501: }
  3520                           ;interrupts.c: 503: if(diff > 80)
  3521  0017A0  BE19               	btfsc	KController@diff+1,7,c
  3522  0017A2  D006               	goto	i2l1679
  3523  0017A4  5019               	movf	KController@diff+1,w,c
  3524  0017A6  E103               	bnz	i2u117_40
  3525  0017A8  0E51               	movlw	81
  3526  0017AA  5C18               	subwf	KController@diff,w,c
  3527  0017AC  B0D8               	btfsc	status,0,c
  3528  0017AE                     i2u117_40:
  3529  0017AE  D773               	goto	i2u108_40
  3530  0017B0                     i2l1679:
  3531                           
  3532                           ;interrupts.c: 505: else if(diff <= 80 && diff > 30)
  3533  0017B0  BE19               	btfsc	KController@diff+1,7,c
  3534  0017B2  D006               	goto	i2l1681
  3535  0017B4  5019               	movf	KController@diff+1,w,c
  3536  0017B6  E10C               	bnz	i2l1685
  3537  0017B8  0E51               	movlw	81
  3538  0017BA  5C18               	subwf	KController@diff,w,c
  3539  0017BC  B0D8               	btfsc	status,0,c
  3540  0017BE  D008               	goto	i2l1685
  3541  0017C0                     i2l1681:
  3542  0017C0  BE19               	btfsc	KController@diff+1,7,c
  3543  0017C2  D006               	goto	i2l1685
  3544  0017C4  5019               	movf	KController@diff+1,w,c
  3545  0017C6  E103               	bnz	i2u119_40
  3546  0017C8  0E1F               	movlw	31
  3547  0017CA  5C18               	subwf	KController@diff,w,c
  3548  0017CC  B0D8               	btfsc	status,0,c
  3549  0017CE                     i2u119_40:
  3550  0017CE  D775               	goto	i2u110_40
  3551  0017D0                     i2l1685:
  3552                           
  3553                           ;interrupts.c: 507: else
  3554                           ;interrupts.c: 508: controllerSteps = 10;
  3555  0017D0  0E0A               	movlw	10
  3556  0017D2                     L12:
  3557  0017D2  6E58               	movwf	_controllerSteps,c
  3558                           
  3559                           ;interrupts.c: 511: }
  3560  0017D4  D00B               	goto	i2l161
  3561  0017D6                     i2l1687:
  3562                           
  3563                           ;interrupts.c: 512: else {
  3564                           ;interrupts.c: 513: motorCounterUpdate(RIGHT,0);
  3565  0017D6  0E00               	movlw	0
  3566  0017D8  6E12               	movwf	motorCounterUpdate@reverse,c
  3567  0017DA  0E01               	movlw	1
  3568  0017DC  EC02  F00D         	call	_motorCounterUpdate
  3569                           
  3570                           ;interrupts.c: 514: motorCounterUpdate(LEFT,0);
  3571  0017E0  0E00               	movlw	0
  3572  0017E2  6E12               	movwf	motorCounterUpdate@reverse,c
  3573  0017E4  0E00               	movlw	0
  3574  0017E6  EC02  F00D         	call	_motorCounterUpdate
  3575  0017EA  D000               	goto	i2l161
  3576  0017EC                     i2l161:
  3577  0017EC  0012               	return		;funcret
  3578  0017EE                     __end_of_KController:
  3579                           	opt stack 0
  3580                           pclatu	equ	0xFFB
  3581                           pclath	equ	0xFFA
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           intcon2	equ	0xFF1
  3590                           postinc0	equ	0xFEE
  3591                           fsr0h	equ	0xFEA
  3592                           fsr0l	equ	0xFE9
  3593                           wreg	equ	0xFE8
  3594                           postdec1	equ	0xFE5
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           bsr	equ	0xFE0
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _moveMouse *****************
  3605 ;; Defined at:
  3606 ;;		line 385 in file "interrupts.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  action          1    wreg     unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  action          1   17[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_high_isr
  3630 ;;		_KController
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text17
  3635  001DE6                     __ptext17:
  3636                           	opt stack 0
  3637  001DE6                     _moveMouse:
  3638                           	opt stack 25
  3639                           
  3640                           ;incstack = 0
  3641                           ;moveMouse@action stored from wreg
  3642  001DE6  6E12               	movwf	moveMouse@action,c
  3643                           
  3644                           ;interrupts.c: 387: LATC = action;
  3645  001DE8  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  3646  001DEC  0012               	return		;funcret
  3647  001DEE                     __end_of_moveMouse:
  3648                           	opt stack 0
  3649                           pclatu	equ	0xFFB
  3650                           pclath	equ	0xFFA
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           intcon2	equ	0xFF1
  3659                           postinc0	equ	0xFEE
  3660                           fsr0h	equ	0xFEA
  3661                           fsr0l	equ	0xFE9
  3662                           wreg	equ	0xFE8
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           bsr	equ	0xFE0
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _motorCounterUpdate *****************
  3674 ;; Defined at:
  3675 ;;		line 333 in file "interrupts.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  side            1    wreg     enum E4142
  3678 ;;  reverse         1   17[COMRAM] unsigned char 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  side            1   18[COMRAM] enum E4142
  3681 ;; Return value:  Size  Location     Type
  3682 ;;		None               void
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3690 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;Total ram usage:        2 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_high_isr
  3700 ;;		_KController
  3701 ;;		_rotate
  3702 ;;		_Reversing
  3703 ;;		_forward
  3704 ;;		_smoothTurn
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text18
  3709  001A04                     __ptext18:
  3710                           	opt stack 0
  3711  001A04                     _motorCounterUpdate:
  3712                           	opt stack 24
  3713                           
  3714                           ;incstack = 0
  3715                           ;motorCounterUpdate@side stored from wreg
  3716  001A04  6E13               	movwf	motorCounterUpdate@side,c
  3717                           
  3718                           ;interrupts.c: 335: if(side == LEFT && reverse == 1)
  3719  001A06  5013               	movf	motorCounterUpdate@side,w,c
  3720  001A08  A4D8               	btfss	status,2,c
  3721  001A0A  D01B               	goto	i2l1479
  3722  001A0C  0412               	decf	motorCounterUpdate@reverse,w,c
  3723  001A0E  B4D8               	btfsc	status,2,c
  3724  001A10  D00B               	goto	i2l1477
  3725  001A12  D017               	goto	i2l1479
  3726                           
  3727                           ;interrupts.c: 336: {
  3728                           ;interrupts.c: 337: switch(LMotorCounter)
  3729  001A14  D009               	goto	i2l1477
  3730  001A16                     i2l1467:
  3731  001A16  0E02               	movlw	2
  3732  001A18  D004               	goto	L15
  3733  001A1A                     i2l1469:
  3734  001A1A  0E04               	movlw	4
  3735  001A1C  D002               	goto	L15
  3736                           
  3737                           ;interrupts.c: 341: case 0b00000100: LMotorCounter = 0b00001000; break;
  3738  001A1E  D03E               	goto	i2l1511
  3739                           
  3740                           ;interrupts.c: 342: case 0b00001000: LMotorCounter = 0b00000001; break;
  3741  001A20  D039               	goto	i2l1505
  3742  001A22                     L15:
  3743  001A22  6E4F               	movwf	_LMotorCounter,c
  3744  001A24  D068               	goto	i2l146
  3745                           
  3746                           ;interrupts.c: 343: default: LMotorCounter = 0b00000001;
  3747  001A26  D036               	goto	i2l1505
  3748  001A28                     i2l1477:
  3749  001A28  504F               	movf	_LMotorCounter,w,c
  3750                           
  3751                           ; Switch size 1, requested type "space"
  3752                           ; Number of cases is 4, Range of values is 1 to 8
  3753                           ; switch strategies available:
  3754                           ; Name         Instructions Cycles
  3755                           ; simple_byte           13     7 (average)
  3756                           ;	Chosen strategy is simple_byte
  3757  001A2A  0A01               	xorlw	1	; case 1
  3758  001A2C  B4D8               	btfsc	status,2,c
  3759  001A2E  D7F3               	goto	i2l1467
  3760  001A30  0A03               	xorlw	3	; case 2
  3761  001A32  B4D8               	btfsc	status,2,c
  3762  001A34  D7F2               	goto	i2l1469
  3763  001A36  0A06               	xorlw	6	; case 4
  3764  001A38  B4D8               	btfsc	status,2,c
  3765  001A3A  D030               	goto	i2l1511
  3766  001A3C  0A0C               	xorlw	12	; case 8
  3767  001A3E  D02A               	goto	i2l1505
  3768                           
  3769                           ;interrupts.c: 345: } else if(side == RIGHT && reverse == 1)
  3770  001A40  D05A               	goto	i2l146
  3771  001A42                     i2l1479:
  3772  001A42  0413               	decf	motorCounterUpdate@side,w,c
  3773  001A44  A4D8               	btfss	status,2,c
  3774  001A46  D01D               	goto	i2l1497
  3775  001A48  0412               	decf	motorCounterUpdate@reverse,w,c
  3776  001A4A  B4D8               	btfsc	status,2,c
  3777  001A4C  D00B               	goto	i2l1495
  3778  001A4E  D019               	goto	i2l1497
  3779                           
  3780                           ;interrupts.c: 346: {
  3781                           ;interrupts.c: 347: switch(RMotorCounter)
  3782  001A50  D009               	goto	i2l1495
  3783  001A52                     i2l1485:
  3784  001A52  0E08               	movlw	8
  3785  001A54  D040               	goto	L23
  3786  001A56                     i2l1487:
  3787  001A56  0E01               	movlw	1
  3788  001A58  D03E               	goto	L23
  3789  001A5A                     i2l1489:
  3790  001A5A  0E02               	movlw	2
  3791  001A5C  D03C               	goto	L23
  3792  001A5E                     i2l1491:
  3793  001A5E  0E04               	movlw	4
  3794  001A60  D03A               	goto	L23
  3795                           
  3796                           ;interrupts.c: 353: default: RMotorCounter = 0b00001000;
  3797  001A62  D7F7               	goto	i2l1485
  3798  001A64                     i2l1495:
  3799  001A64  5050               	movf	_RMotorCounter,w,c
  3800                           
  3801                           ; Switch size 1, requested type "space"
  3802                           ; Number of cases is 4, Range of values is 1 to 8
  3803                           ; switch strategies available:
  3804                           ; Name         Instructions Cycles
  3805                           ; simple_byte           13     7 (average)
  3806                           ;	Chosen strategy is simple_byte
  3807  001A66  0A01               	xorlw	1	; case 1
  3808  001A68  B4D8               	btfsc	status,2,c
  3809  001A6A  D7F3               	goto	i2l1485
  3810  001A6C  0A03               	xorlw	3	; case 2
  3811  001A6E  B4D8               	btfsc	status,2,c
  3812  001A70  D7F2               	goto	i2l1487
  3813  001A72  0A06               	xorlw	6	; case 4
  3814  001A74  B4D8               	btfsc	status,2,c
  3815  001A76  D7F1               	goto	i2l1489
  3816  001A78  0A0C               	xorlw	12	; case 8
  3817  001A7A  B4D8               	btfsc	status,2,c
  3818  001A7C  D7F0               	goto	i2l1491
  3819  001A7E  D7E9               	goto	i2l1485
  3820                           
  3821                           ;interrupts.c: 355: } else if(side == LEFT && reverse == 0)
  3822  001A80  D03A               	goto	i2l146
  3823  001A82                     i2l1497:
  3824  001A82  5013               	movf	motorCounterUpdate@side,w,c
  3825  001A84  A4D8               	btfss	status,2,c
  3826  001A86  D01B               	goto	i2l1515
  3827  001A88  5012               	movf	motorCounterUpdate@reverse,w,c
  3828  001A8A  B4D8               	btfsc	status,2,c
  3829  001A8C  D009               	goto	i2l1513
  3830  001A8E  D017               	goto	i2l1515
  3831                           
  3832                           ;interrupts.c: 356: {
  3833                           ;interrupts.c: 357: switch(LMotorCounter)
  3834  001A90  D007               	goto	i2l1513
  3835                           
  3836                           ;interrupts.c: 358: {
  3837                           ;interrupts.c: 359: case 0b00000001: LMotorCounter = 0b00001000; break;
  3838  001A92  D004               	goto	i2l1511
  3839  001A94                     i2l1505:
  3840  001A94  0E01               	movlw	1
  3841  001A96  D7C5               	goto	L15
  3842                           
  3843                           ;interrupts.c: 361: case 0b00000100: LMotorCounter = 0b00000010; break;
  3844  001A98  D7BE               	goto	i2l1467
  3845                           
  3846                           ;interrupts.c: 362: case 0b00001000: LMotorCounter = 0b00000100; break;
  3847  001A9A  D7BF               	goto	i2l1469
  3848  001A9C                     i2l1511:
  3849  001A9C  0E08               	movlw	8
  3850  001A9E  D7C1               	goto	L15
  3851  001AA0                     i2l1513:
  3852  001AA0  504F               	movf	_LMotorCounter,w,c
  3853                           
  3854                           ; Switch size 1, requested type "space"
  3855                           ; Number of cases is 4, Range of values is 1 to 8
  3856                           ; switch strategies available:
  3857                           ; Name         Instructions Cycles
  3858                           ; simple_byte           13     7 (average)
  3859                           ;	Chosen strategy is simple_byte
  3860  001AA2  0A01               	xorlw	1	; case 1
  3861  001AA4  B4D8               	btfsc	status,2,c
  3862  001AA6  D7FA               	goto	i2l1511
  3863  001AA8  0A03               	xorlw	3	; case 2
  3864  001AAA  B4D8               	btfsc	status,2,c
  3865  001AAC  D7F3               	goto	i2l1505
  3866  001AAE  0A06               	xorlw	6	; case 4
  3867  001AB0  B4D8               	btfsc	status,2,c
  3868  001AB2  D7B1               	goto	i2l1467
  3869  001AB4  0A0C               	xorlw	12	; case 8
  3870  001AB6  B4D8               	btfsc	status,2,c
  3871  001AB8  D7B0               	goto	i2l1469
  3872  001ABA  D7F0               	goto	i2l1511
  3873                           
  3874                           ;interrupts.c: 365: } else if(side == RIGHT && reverse == 0)
  3875  001ABC  D01C               	goto	i2l146
  3876  001ABE                     i2l1515:
  3877  001ABE  0413               	decf	motorCounterUpdate@side,w,c
  3878  001AC0  A4D8               	btfss	status,2,c
  3879  001AC2  D019               	goto	i2l146
  3880  001AC4  5012               	movf	motorCounterUpdate@reverse,w,c
  3881  001AC6  B4D8               	btfsc	status,2,c
  3882  001AC8  D009               	goto	i2l1531
  3883  001ACA  D015               	goto	i2l146
  3884                           
  3885                           ;interrupts.c: 366: {
  3886                           ;interrupts.c: 367: switch(RMotorCounter)
  3887  001ACC  D007               	goto	i2l1531
  3888                           
  3889                           ;interrupts.c: 368: {
  3890                           ;interrupts.c: 369: case 0b00000001: RMotorCounter = 0b00000010; break;
  3891  001ACE  D7C5               	goto	i2l1489
  3892                           
  3893                           ;interrupts.c: 370: case 0b00000010: RMotorCounter = 0b00000100; break;
  3894  001AD0  D7C6               	goto	i2l1491
  3895                           
  3896                           ;interrupts.c: 371: case 0b00000100: RMotorCounter = 0b00001000; break;
  3897  001AD2  D7BF               	goto	i2l1485
  3898                           
  3899                           ;interrupts.c: 372: case 0b00001000: RMotorCounter = 0b00000001; break;
  3900  001AD4  D7C0               	goto	i2l1487
  3901  001AD6                     L23:
  3902  001AD6  6E50               	movwf	_RMotorCounter,c
  3903  001AD8  D00E               	goto	i2l146
  3904                           
  3905                           ;interrupts.c: 373: default: RMotorCounter = 0b00000001;
  3906  001ADA  D7BD               	goto	i2l1487
  3907  001ADC                     i2l1531:
  3908  001ADC  5050               	movf	_RMotorCounter,w,c
  3909                           
  3910                           ; Switch size 1, requested type "space"
  3911                           ; Number of cases is 4, Range of values is 1 to 8
  3912                           ; switch strategies available:
  3913                           ; Name         Instructions Cycles
  3914                           ; simple_byte           13     7 (average)
  3915                           ;	Chosen strategy is simple_byte
  3916  001ADE  0A01               	xorlw	1	; case 1
  3917  001AE0  B4D8               	btfsc	status,2,c
  3918  001AE2  D7BB               	goto	i2l1489
  3919  001AE4  0A03               	xorlw	3	; case 2
  3920  001AE6  B4D8               	btfsc	status,2,c
  3921  001AE8  D7BA               	goto	i2l1491
  3922  001AEA  0A06               	xorlw	6	; case 4
  3923  001AEC  B4D8               	btfsc	status,2,c
  3924  001AEE  D7B1               	goto	i2l1485
  3925  001AF0  0A0C               	xorlw	12	; case 8
  3926  001AF2  D7B1               	goto	i2l1487
  3927  001AF4  D000               	goto	i2l146
  3928  001AF6                     i2l146:
  3929  001AF6  0012               	return		;funcret
  3930  001AF8                     __end_of_motorCounterUpdate:
  3931                           	opt stack 0
  3932                           pclatu	equ	0xFFB
  3933                           pclath	equ	0xFFA
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           intcon2	equ	0xFF1
  3942                           postinc0	equ	0xFEE
  3943                           fsr0h	equ	0xFEA
  3944                           fsr0l	equ	0xFE9
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           bsr	equ	0xFE0
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _merge *****************
  3957 ;; Defined at:
  3958 ;;		line 378 in file "interrupts.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  left            1    wreg     unsigned char 
  3961 ;;  right           1   17[COMRAM] unsigned char 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  left            1   18[COMRAM] unsigned char 
  3964 ;;  merged          1   19[COMRAM] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      unsigned char 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        3 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; This function calls:
  3981 ;;		Nothing
  3982 ;; This function is called by:
  3983 ;;		_high_isr
  3984 ;;		_KController
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text19
  3989  001DCC                     __ptext19:
  3990                           	opt stack 0
  3991  001DCC                     _merge:
  3992                           	opt stack 25
  3993                           
  3994                           ;incstack = 0
  3995                           ;merge@left stored from wreg
  3996  001DCC  6E13               	movwf	merge@left,c
  3997                           
  3998                           ;interrupts.c: 380: unsigned char merged;
  3999                           ;interrupts.c: 381: merged = left + (right << 4);
  4000  001DCE  3812               	swapf	merge@right,w,c
  4001  001DD0  0BF0               	andlw	240
  4002  001DD2  2413               	addwf	merge@left,w,c
  4003  001DD4  6E14               	movwf	merge@merged,c
  4004                           
  4005                           ;interrupts.c: 382: return merged;
  4006  001DD6  5014               	movf	merge@merged,w,c
  4007  001DD8  D000               	goto	i2l149
  4008  001DDA                     i2l149:
  4009  001DDA  0012               	return		;funcret
  4010  001DDC                     __end_of_merge:
  4011                           	opt stack 0
  4012                           pclatu	equ	0xFFB
  4013                           pclath	equ	0xFFA
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodh	equ	0xFF4
  4019                           prodl	equ	0xFF3
  4020                           intcon	equ	0xFF2
  4021                           intcon2	equ	0xFF1
  4022                           postinc0	equ	0xFEE
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           bsr	equ	0xFE0
  4030                           postinc2	equ	0xFDE
  4031                           postdec2	equ	0xFDD
  4032                           fsr2h	equ	0xFDA
  4033                           fsr2l	equ	0xFD9
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function _ABS *****************
  4037 ;; Defined at:
  4038 ;;		line 391 in file "interrupts.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  x               2   17[COMRAM] int 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  2   17[COMRAM] int 
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;Total ram usage:        2 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_KController
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text20
  4066  001D9E                     __ptext20:
  4067                           	opt stack 0
  4068  001D9E                     _ABS:
  4069                           	opt stack 24
  4070                           
  4071                           ;interrupts.c: 393: if(x<0) x = -x;
  4072                           
  4073                           ;incstack = 0
  4074  001D9E  AE13               	btfss	ABS@x+1,7,c
  4075  001DA0  D005               	goto	i2l1543
  4076  001DA2  6C12               	negf	ABS@x,c
  4077  001DA4  1E13               	comf	ABS@x+1,f,c
  4078  001DA6  B0D8               	btfsc	status,0,c
  4079  001DA8  2A13               	incf	ABS@x+1,f,c
  4080  001DAA  D000               	goto	i2l1543
  4081  001DAC                     i2l1543:
  4082                           
  4083                           ;interrupts.c: 394: return x;
  4084  001DAC  C012  F012         	movff	ABS@x,?_ABS
  4085  001DB0  C013  F013         	movff	ABS@x+1,?_ABS+1
  4086  001DB4  D000               	goto	i2l156
  4087  001DB6                     i2l156:
  4088  001DB6  0012               	return		;funcret
  4089  001DB8                     __end_of_ABS:
  4090                           	opt stack 0
  4091                           pclatu	equ	0xFFB
  4092                           pclath	equ	0xFFA
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           intcon2	equ	0xFF1
  4101                           postinc0	equ	0xFEE
  4102                           fsr0h	equ	0xFEA
  4103                           fsr0l	equ	0xFE9
  4104                           wreg	equ	0xFE8
  4105                           postdec1	equ	0xFE5
  4106                           fsr1h	equ	0xFE2
  4107                           fsr1l	equ	0xFE1
  4108                           bsr	equ	0xFE0
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           pclatu	equ	0xFFB
  4115                           pclath	equ	0xFFA
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           intcon2	equ	0xFF1
  4124                           postinc0	equ	0xFEE
  4125                           fsr0h	equ	0xFEA
  4126                           fsr0l	equ	0xFE9
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           bsr	equ	0xFE0
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138                           	psect	rparam
  4139  0000                     pclatu	equ	0xFFB
  4140                           pclath	equ	0xFFA
  4141                           tblptru	equ	0xFF8
  4142                           tblptrh	equ	0xFF7
  4143                           tblptrl	equ	0xFF6
  4144                           tablat	equ	0xFF5
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           intcon2	equ	0xFF1
  4149                           postinc0	equ	0xFEE
  4150                           fsr0h	equ	0xFEA
  4151                           fsr0l	equ	0xFE9
  4152                           wreg	equ	0xFE8
  4153                           postdec1	equ	0xFE5
  4154                           fsr1h	equ	0xFE2
  4155                           fsr1l	equ	0xFE1
  4156                           bsr	equ	0xFE0
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        5
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     42      88
    BANK0           128    112     112
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _sensorComputation->___awdiv
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4976
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    4840
                                             22 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    3067
                                              8 BANK0     14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1142
                                             39 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     575
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                             41 COMRAM     1     1      0
                                              4 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                             41 COMRAM     1     1      0
                                              4 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                             39 COMRAM     3     1      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    8356
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1470
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1448
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    2195
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1448
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     332
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     70      70       5       87.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2A      58       1       69.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      34        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 29 18:28:09 2015

                ___awdiv@sign 0085                            bsr 000FE0           ___wmul@multiplicand 0082  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l302 184E                           l312 1D0E                           l320 1CE6  
                         l313 1D16                           l316 1D3E                           l317 1D46  
                         l272 1BF4                           l281 1D50                           l513 1BC6  
                         l286 1D64                           l295 15C6                           _ABS 1D9E  
                __CFG_CPB$OFF 000000                           _MAX 1D18                           _MIN 1CE8  
                __CFG_CPD$OFF 000000    __end_of_AlgorithmSelection 1D66                  _rotatingSide 0053  
                         wreg 000FE8                          ABS@x 0012                          ?_ABS 0012  
                        ?_MAX 0084                          ?_MIN 0084                          MAX@a 0084  
                        MAX@b 0086                          MIN@a 0084                          MIN@b 0086  
                __CFG_WDT$OFF 000000                          l2011 1836                          l2021 18FA  
                        l2005 1812                          l2023 1960                          l2025 19C6  
                        l2033 19F2                          l1067 1D5E                          l2029 19DC  
                        l2039 1DC2                          l1921 1B5A                          l1913 1B2E  
                        l1931 1B96                          l1923 1B64                          l1907 1B16  
                        l1919 1B4C                          l1935 1BA6                          l1945 1BDE  
                        l1961 139C                          l1939 1BBC                          l1971 153E  
                        l1955 1378                          l1965 140A                          l1967 1528  
                        _LATC 000F8B                          u1710 1810                          u1720 1834  
                        u1660 1376                          u1670 139A                          u1745 185C  
                        u1797 1BE4                          _main 1DB8                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0088                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 1C42                         ??_ABS 0014  
                       ??_MAX 002A                         ??_MIN 002A    __size_of_sensorComputation 0274  
                       ?_main 0001               __end_of___awdiv 1BC8                         _T0CON 000FD5  
             ___awdiv@divisor 0082                         i2l105 131A                         i2l161 17EC  
                       i2l146 1AF6                         i2l156 1DB6                         i2l149 1DDA  
             ___awdiv@counter 0084                         _TRISC 000F94           _ConfigureOscillator 1DDC  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         _delay 1BC8  
                       _merge 1DCC               __end_of_forward 1D82               __end_of_low_isr 00A2  
                       tablat 000FF5                         status 000FD8          ?_ConfigureOscillator 0001  
             __initialization 1C7E                  __end_of_main 1DCC                        ??_main 002B  
               __activetblptr 000002                        ?_delay 0028                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_merge 0012  
                      _ADRESH 000FC4                        _ADRESL 000FC3              ___awdiv@dividend 0080  
                      i2l1511 1A9C                        i2l1505 1A94                        i2l1513 1AA0  
                      i2l1531 1ADC                        i2l1515 1ABE                        i2l1543 1DAC  
                      i2l1623 1668                        i2l1615 1636                        i2l1633 169A  
                      i2l1641 16C2                        i2l1801 1174                        i2l1491 1A5E  
                      i2l1467 1A16                        i2l1635 16AA                        i2l1811 11D4  
                      i2l1803 117A                        i2l1485 1A52                        i2l1469 1A1A  
                      i2l1477 1A28                        i2l1661 1750                        i2l1645 16D6  
                      i2l1629 1686                        i2l1813 11E4                        i2l1805 118A  
                      i2l1487 1A56                        i2l1495 1A64                        i2l1479 1A42  
                      i2l1639 16BE                        i2l1823 1228                        i2l1815 11EA  
                      i2l1489 1A5A                        i2l1497 1A82                        i2l1681 17C0  
                      i2l1657 174C                        i2l1809 11C4                        i2l1761 1092  
                      i2l1753 1060                        i2l1675 17A0                        i2l1595 1C60  
                      i2l1771 10C8                        i2l1763 10A2                        i2l1685 17D0  
                      i2l1669 1782                        i2l1597 1C76                        i2l1845 12A4  
                      i2l1837 1264                        i2l1781 10F4                        i2l1757 1074  
                      i2l1861 12FA                        i2l1679 17B0                        i2l1687 17D6  
                      i2l1847 12AA                        i2l1791 114E                        i2l1783 10FE  
                      i2l1767 10B0                        i2l1863 1312                        i2l1849 12C0  
                      i2l1785 1104                        i2l1769 10B8                        i2l1787 1114  
                      i2l1789 113E                        i2l1799 116A                        _INTCON 000FF2  
                      _OSCCON 000FD3                     ??_InitApp 002B         ??_ConfigureOscillator 0028  
                 merge@merged 0014                __CFG_XINST$OFF 000000            sensorComputation@i 0092  
          sensorComputation@j 0094              __end_of_high_isr 1354                        ___wmul 1CB4  
                   ??___awdiv 0028                __CFG_STVREN$ON 000000                        _errorD 0047  
                      _errorP 0049                        delay@x 0080                        clear_0 1C84  
            ___awdiv@quotient 0086                        _rotate 1C42            __size_of_Reversing 001C  
                __pdataCOMRAM 0054                     ??_forward 0014                  __mediumconst 0000  
                   ??_low_isr 0001                _ReverseCounter 003D                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 1CAA               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
                ?_KController 0001                __pcstackCOMRAM 0001                 __end_of_delay 1C06  
                  _TurnedLeft 0041               moveMouse@action 0012                 __end_of_merge 1DDC  
        KController@correctTo 0017    __end_of_motorCounterUpdate 1AF8                _ForwardCounter 0035  
                     ??_delay 002A                       ??_merge 0013            _AlgorithmSelection 1D48  
                _LTurnCounter 0037             __end_of_Reversing 1D9E                    _delay_time 0045  
           _MotorDelayCounter 0039           ?_AlgorithmSelection 0001                       ?___wmul 0080  
          __size_of_moveMouse 0008                       ?_rotate 0001                       _INTCON2 000FF1  
                     _OSCTUNE 000F9B          ??_AlgorithmSelection 0028                     ?_high_isr 0001  
                     _Deadend 0033                 _LMotorCounter 004F                       _InitApp 1C06  
                     __Hparam 0000                       __Lparam 0000                       ___awdiv 1AF8  
             __size_of___wmul 0034                  __psmallconst 1000                       __pcinit 1C7E  
                     __ramtop 1000                       __ptext0 1DB8                       __ptext1 17EE  
                     __ptext2 1354                       __ptext3 1CB4                       __ptext4 1AF8  
                     __ptext5 1CE8                       __ptext6 1D18                       __ptext7 1C06  
                     __ptext8 1BC8                       __ptext9 1D48               __size_of_rotate 003C  
                __size_of_ABS 001A                  __size_of_MAX 0030                  __size_of_MIN 0030  
                     _forward 1D66                       delay@ms 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001A                __pintcode_body 100A  
        end_of_initialization 1CAA              _sensorCorrection 1001             __end_of_moveMouse 1DEE  
               __Lmediumconst 0000                       int_func 100A               _controllerSteps 0058  
                  _justTurned 0052          __size_of_KController 0226                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                   _TRISBbits 000F93                     _TRISEbits 000F96                ??_sensorUpdate 0096  
 __end_of_ConfigureOscillator 1DE6                    _totalError 004D                  _RTurnCounter 003B  
              __end_of___wmul 1CE8                 __pidataCOMRAM 1DEE                   _TurnedRight 0043  
              __end_of_rotate 1C7E           start_initialization 1C7E                   __end_of_ABS 1DB8  
                 __end_of_MAX 1D48                   __end_of_MIN 1D18            _motorCounterUpdate 1A04  
            __CFG_OSC$INTIO67 000000           ?_motorCounterUpdate 0012                    merge@right 0012  
                   _Reversing 1D82                      ??___wmul 0028              __CFG_LPT1OSC$OFF 000000  
                    ??_rotate 0014                _sensorLocation 1005          ??_motorCounterUpdate 0013  
                 __pbssCOMRAM 002B                 __pcstackBANK0 0080                     _TurnRight 0056  
      sensorUpdate@sensorTemp 009C             __size_of_high_isr 134C                      ?_InitApp 0001  
           __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001                     _algorithm 0051  
                   __pintcode 0008        motorCounterUpdate@side 0013                      ?___awdiv 0080  
        __end_of_sensorUpdate 1A04        __end_of_sensorLocation 1009      __end_of_sensorCorrection 1005  
                 __pintcodelo 0018                   __smallconst 1000                      ?_forward 0001  
                    ?_low_isr 0001                     _oldErrorP 004B                __size_of_delay 003E  
 __size_of_AlgorithmSelection 001E                __size_of_merge 0010                ___wmul@product 0028  
                   _moveMouse 1DE6                      i2u110_40 16BA                      i2u111_40 16D4  
                    i2u112_40 16E6                      i2u104_40 15E0                      i2u113_40 16F6  
                    i2u105_40 15F0                      i2u114_40 1706                      i2u130_40 105A  
                    i2u131_40 106E                      i2u108_40 1696                      i2u132_40 1082  
                    i2u117_40 17AE                      i2u119_40 17CE                      i2u151_40 1274  
                    i2u152_40 1284                      i2u136_40 10D8                      i2u153_40 1294  
                    i2u129_40 104C                      i2u147_40 11FA                      i2u148_40 120A  
            __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2             ___wmul@multiplier 0080  
                   copy_data0 1C9E                 _RMotorCounter 0050                    rotate@side 0014  
               ??_KController 0015                    ?_moveMouse 0001              __size_of_InitApp 003C  
                    __Hrparam 0000                     merge@left 0013          sensorComputation@max 008C  
                    __Lrparam 0000          sensorComputation@min 008E          sensorComputation@sum 0090  
                 ??_Reversing 0014            __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 00D0  
                    _TurnLeft 0054              __size_of_forward 001C              __size_of_low_isr 008A  
                    __ptext10 1DDC                      __ptext20 1D9E                      __ptext13 1C42  
                    __ptext14 1D66                      __ptext15 1D82                      __ptext16 15C8  
                    __ptext17 1DE6                      __ptext18 1A04                      __ptext19 1DCC  
                    _high_isr 0008                 __size_of_main 0014                 _RotateCounter 003F  
       __size_of_sensorUpdate 0216  __size_of_ConfigureOscillator 000A           __end_of_KController 17EE  
           _sensorComputation 1354                    _INTCONbits 000FF2            ?_sensorComputation 0088  
               sensorUpdate@i 00EC                 sensorUpdate@j 00EE                  _sensorUpdate 17EE  
                    intlevel1 0000                      intlevel2 0000           ??_sensorComputation 008A  
                 ??_moveMouse 0012               KController@diff 0018     __end_of_sensorComputation 15C8  
                 _sensorValue 002B   __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012  
                 _KController 15C8  
