

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Apr 15 19:56:55 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  0019B8                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _controllerSteps
    41  0019B8  08                 	db	8
    42                           
    43                           	psect	smallconst
    44  001000                     __psmallconst:
    45                           	opt stack 0
    46  001000  00                 	db	0
    47  001001                     _sensorCorrection:
    48                           	opt stack 0
    49  001001  27                 	db	39
    50  001002  27                 	db	39
    51  001003  47                 	db	71
    52  001004  47                 	db	71
    53  001005                     __end_of_sensorCorrection:
    54                           	opt stack 0
    55  001005                     _sensorLocation:
    56                           	opt stack 0
    57  001005  1B                 	db	27
    58  001006  2B                 	db	43
    59  001007  1F                 	db	31
    60  001008  33                 	db	51
    61  001009                     __end_of_sensorLocation:
    62                           	opt stack 0
    63  0000                     _ADCON0	set	4034
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON2	set	4032
    67  0000                     _ADRESH	set	4036
    68  0000                     _ADRESL	set	4035
    69  0000                     _INTCON	set	4082
    70  0000                     _INTCON2	set	4081
    71  0000                     _INTCONbits	set	4082
    72  0000                     _LATC	set	3979
    73  0000                     _OSCCON	set	4051
    74  0000                     _OSCTUNE	set	3995
    75  0000                     _T0CON	set	4053
    76  0000                     _TRISBbits	set	3987
    77  0000                     _TRISC	set	3988
    78  0000                     _TRISEbits	set	3990
    79                           
    80                           ; #config settings
    81  001009  00                 	db	0	; dummy byte at the end
    82  0000                     
    83                           	psect	cinit
    84  00188E                     __pcinit:
    85                           	opt stack 0
    86  00188E                     start_initialization:
    87                           	opt stack 0
    88  00188E                     __initialization:
    89                           	opt stack 0
    90                           
    91                           ; Clear objects allocated to COMRAM (23 bytes)
    92  00188E  EE00  F041         	lfsr	0,__pbssCOMRAM
    93  001892  0E17               	movlw	23
    94  001894                     clear_0:
    95  001894  6AEE               	clrf	postinc0,c
    96  001896  06E8               	decf	wreg,f,c
    97  001898  E1FD               	bnz	clear_0
    98                           
    99                           ; Initialize objects allocated to COMRAM (1 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  00189A  0EB8               	movlw	low __pidataCOMRAM
   102  00189C  6EF6               	movwf	tblptrl,c
   103  00189E  0E19               	movlw	high __pidataCOMRAM
   104  0018A0  6EF7               	movwf	tblptrh,c
   105  0018A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   106  0018A4  6EF8               	movwf	tblptru,c
   107  0018A6  0009               	tblrd		*+	;fetch initializer
   108  0018A8  CFF5 F058          	movff	tablat,__pdataCOMRAM
   109  0018AC                     end_of_initialization:
   110                           	opt stack 0
   111  0018AC                     __end_of__initialization:
   112                           	opt stack 0
   113  0018AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114  0018AE  6EF8               	movwf	tblptru,c
   115  0018B0  0100               	movlb	0
   116  0018B2  EFC1  F00C         	goto	_main	;jump to C main() function
   117                           tblptru	equ	0xFF8
   118                           tblptrh	equ	0xFF7
   119                           tblptrl	equ	0xFF6
   120                           tablat	equ	0xFF5
   121                           postinc0	equ	0xFEE
   122                           wreg	equ	0xFE8
   123                           
   124                           	psect	bssCOMRAM
   125  000041                     __pbssCOMRAM:
   126                           	opt stack 0
   127  000041                     _sensorValue:
   128                           	opt stack 0
   129  000041                     	ds	8
   130  000049                     _LTurnCounter:
   131                           	opt stack 0
   132  000049                     	ds	2
   133  00004B                     _MotorDelayCounter:
   134                           	opt stack 0
   135  00004B                     	ds	2
   136  00004D                     _RTurnCounter:
   137                           	opt stack 0
   138  00004D                     	ds	2
   139  00004F                     _ReverseCounter:
   140                           	opt stack 0
   141  00004F                     	ds	2
   142  000051                     _RotateCounter:
   143                           	opt stack 0
   144  000051                     	ds	2
   145  000053                     _delay_time:
   146                           	opt stack 0
   147  000053                     	ds	2
   148  000055                     _LMotorCounter:
   149                           	opt stack 0
   150  000055                     	ds	1
   151  000056                     _RMotorCounter:
   152                           	opt stack 0
   153  000056                     	ds	1
   154  000057                     _algorithm:
   155                           	opt stack 0
   156  000057                     	ds	1
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	dataCOMRAM
   165  000058                     __pdataCOMRAM:
   166                           	opt stack 0
   167  000058                     _controllerSteps:
   168                           	opt stack 0
   169  000058                     	ds	1
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	cstackBANK0
   178  000080                     __pcstackBANK0:
   179                           	opt stack 0
   180  000080                     ??_sensorUpdate:
   181                           
   182                           ; 0 bytes @ 0x0
   183  000080                     	ds	6
   184  000086                     sensorUpdate@sensorTemp:
   185                           	opt stack 0
   186                           
   187                           ; 80 bytes @ 0x6
   188  000086                     	ds	80
   189  0000D6                     sensorUpdate@i:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x56
   193  0000D6                     	ds	2
   194  0000D8                     sensorUpdate@j:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x58
   198  0000D8                     	ds	2
   199                           tblptru	equ	0xFF8
   200                           tblptrh	equ	0xFF7
   201                           tblptrl	equ	0xFF6
   202                           tablat	equ	0xFF5
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt stack 0
   209  000001                     ??_low_isr:
   210  000001                     
   211                           ; 0 bytes @ 0x0
   212  000001                     	ds	17
   213  000012                     ?_ABS:
   214                           	opt stack 0
   215  000012                     motorCounterUpdate@reverse:
   216                           	opt stack 0
   217  000012                     merge@right:
   218                           	opt stack 0
   219  000012                     moveMouse@action:
   220                           	opt stack 0
   221  000012                     ABS@x:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x11
   225  000012                     	ds	1
   226  000013                     motorCounterUpdate@side:
   227                           	opt stack 0
   228  000013                     merge@left:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x12
   232  000013                     	ds	1
   233  000014                     merge@merged:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x13
   237  000014                     	ds	1
   238  000015                     ??_KController:
   239                           
   240                           ; 0 bytes @ 0x14
   241  000015                     	ds	2
   242  000017                     KController@correctTo:
   243                           	opt stack 0
   244                           
   245                           ; 1 bytes @ 0x16
   246  000017                     	ds	1
   247  000018                     KController@diff:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x17
   251  000018                     	ds	2
   252  00001A                     ??_high_isr:
   253                           
   254                           ; 0 bytes @ 0x19
   255  00001A                     	ds	14
   256  000028                     ?___wmul:
   257                           	opt stack 0
   258  000028                     ?___awdiv:
   259                           	opt stack 0
   260  000028                     delay@ms:
   261                           	opt stack 0
   262  000028                     ___wmul@multiplier:
   263                           	opt stack 0
   264  000028                     ___awdiv@dividend:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x27
   268  000028                     	ds	2
   269  00002A                     ??_delay:
   270  00002A                     ___wmul@multiplicand:
   271                           	opt stack 0
   272  00002A                     ___awdiv@divisor:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x29
   276  00002A                     	ds	1
   277  00002B                     delay@x:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x2A
   281  00002B                     	ds	1
   282  00002C                     ___awdiv@counter:
   283                           	opt stack 0
   284  00002C                     ___wmul@product:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x2B
   288  00002C                     	ds	1
   289  00002D                     ___awdiv@sign:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x2C
   293  00002D                     	ds	1
   294  00002E                     ?_MIN:
   295                           	opt stack 0
   296  00002E                     ?_MAX:
   297                           	opt stack 0
   298  00002E                     MIN@a:
   299                           	opt stack 0
   300  00002E                     MAX@a:
   301                           	opt stack 0
   302  00002E                     ___awdiv@quotient:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x2D
   306  00002E                     	ds	2
   307  000030                     MIN@b:
   308                           	opt stack 0
   309  000030                     MAX@b:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x2F
   313  000030                     	ds	2
   314  000032                     ??_MIN:
   315  000032                     ??_MAX:
   316                           
   317                           ; 0 bytes @ 0x31
   318  000032                     	ds	1
   319  000033                     sensorComputation@sensorTemp:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x32
   323  000033                     	ds	2
   324  000035                     ??_sensorComputation:
   325                           
   326                           ; 0 bytes @ 0x34
   327  000035                     	ds	2
   328  000037                     sensorComputation@max:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x36
   332  000037                     	ds	2
   333  000039                     sensorComputation@min:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x38
   337  000039                     	ds	2
   338  00003B                     sensorComputation@sum:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x3A
   342  00003B                     	ds	2
   343  00003D                     sensorComputation@i:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x3C
   347  00003D                     	ds	2
   348  00003F                     sensorComputation@j:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x3E
   352  00003F                     	ds	2
   353  000041                     tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           ; 0 bytes @ 0x40
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 41 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;		None
   371 ;; Return value:  Size  Location     Type
   372 ;;		None               void
   373 ;; Registers used:
   374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   384 ;;Total ram usage:        0 bytes
   385 ;; Hardware stack levels required when called:    7
   386 ;; This function calls:
   387 ;;		_ConfigureOscillator
   388 ;;		_InitApp
   389 ;;		_sensorUpdate
   390 ;; This function is called by:
   391 ;;		Startup code after reset
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text0
   396  001982                     __ptext0:
   397                           	opt stack 0
   398  001982                     _main:
   399                           	opt stack 24
   400                           
   401                           ;main.c: 44: ConfigureOscillator();
   402                           
   403                           ;incstack = 0
   404  001982  ECD3  F00C         	call	_ConfigureOscillator	;wreg free
   405                           
   406                           ;main.c: 47: InitApp();
   407  001986  ECF2  F00B         	call	_InitApp	;wreg free
   408  00198A  D000               	goto	l1604
   409  00198C                     l1604:
   410                           
   411                           ;main.c: 50: {
   412                           ;main.c: 51: sensorUpdate();
   413  00198C  EC05  F008         	call	_sensorUpdate	;wreg free
   414  001990  D7FD               	goto	l1604
   415  001992  EF51  F000         	goto	start
   416  001996                     __end_of_main:
   417                           	opt stack 0
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           
   425 ;; *************** function _sensorUpdate *****************
   426 ;; Defined at:
   427 ;;		line 146 in file "user.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;  sensorTemp     80    6[BANK0 ] int [10][4]
   432 ;;  j               2   88[BANK0 ] int 
   433 ;;  i               2   86[BANK0 ] int 
   434 ;; Return value:  Size  Location     Type
   435 ;;		None               void
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   444 ;;      Locals:         0      84       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   445 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Totals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;Total ram usage:       90 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    6
   450 ;; This function calls:
   451 ;;		___wmul
   452 ;;		_sensorComputation
   453 ;; This function is called by:
   454 ;;		_main
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text1
   459  00100A                     __ptext1:
   460                           	opt stack 0
   461  00100A                     _sensorUpdate:
   462                           	opt stack 24
   463                           
   464                           ;user.c: 148: int i,j;
   465                           ;user.c: 149: int sensorTemp[4][10];
   466                           ;user.c: 152: for(i = 0; i < 10; i++)
   467                           
   468                           ;incstack = 0
   469  00100A  0E00               	movlw	0
   470  00100C  0100               	movlb	0	; () banked
   471  00100E  6FD7               	movwf	(sensorUpdate@i+1)& (0+255),b
   472  001010  0E00               	movlw	0
   473  001012  6FD6               	movwf	sensorUpdate@i& (0+255),b
   474                           
   475                           ; BSR set to: 0
   476  001014  0100               	movlb	0	; () banked
   477  001016  BFD7               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   478  001018  D00A               	goto	l1570
   479  00101A  0100               	movlb	0	; () banked
   480  00101C  51D7               	movf	(sensorUpdate@i+1)& (0+255),w,b
   481  00101E  E106               	bnz	u1110
   482  001020  0E0A               	movlw	10
   483  001022  0100               	movlb	0	; () banked
   484  001024  5DD6               	subwf	sensorUpdate@i& (0+255),w,b
   485  001026  B0D8               	btfsc	status,0,c
   486  001028  D0E9               	goto	l1598
   487  00102A  D001               	goto	l1570
   488  00102C                     u1110:
   489                           
   490                           ; BSR set to: 0
   491  00102C  D0E7               	goto	l1598
   492  00102E                     l1570:
   493                           
   494                           ; BSR set to: 0
   495                           ;user.c: 153: {
   496                           ;user.c: 154: for(j = 0 ; j < 4 ; j++)
   497  00102E  0E00               	movlw	0
   498  001030  0100               	movlb	0	; () banked
   499  001032  6FD9               	movwf	(sensorUpdate@j+1)& (0+255),b
   500  001034  0E00               	movlw	0
   501  001036  6FD8               	movwf	sensorUpdate@j& (0+255),b
   502                           
   503                           ; BSR set to: 0
   504  001038  0100               	movlb	0	; () banked
   505  00103A  BFD9               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   506  00103C  D00A               	goto	l1576
   507  00103E  0100               	movlb	0	; () banked
   508  001040  51D9               	movf	(sensorUpdate@j+1)& (0+255),w,b
   509  001042  E106               	bnz	u1120
   510  001044  0E04               	movlw	4
   511  001046  0100               	movlb	0	; () banked
   512  001048  5DD8               	subwf	sensorUpdate@j& (0+255),w,b
   513  00104A  B0D8               	btfsc	status,0,c
   514  00104C  D0CC               	goto	l1594
   515  00104E  D001               	goto	l1576
   516  001050                     u1120:
   517                           
   518                           ; BSR set to: 0
   519  001050  D0CA               	goto	l1594
   520  001052                     l1576:
   521                           
   522                           ; BSR set to: 0
   523                           ;user.c: 155: {
   524                           ;user.c: 156: ADCON0 = sensorLocation[j];
   525  001052  0E05               	movlw	low _sensorLocation
   526  001054  0100               	movlb	0	; () banked
   527  001056  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   528  001058  6EF6               	movwf	tblptrl,c
   529  00105A  0E10               	movlw	high _sensorLocation
   530  00105C  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   531  00105E  6EF7               	movwf	tblptrh,c
   532  001060                     	if	0	;There are less than 3 active tblptr bytes
   533  001060                     	endif
   534  001060  0008               	tblrd		*
   535  001062  CFF5 FFC2          	movff	tablat,4034	;volatile
   536                           
   537                           ; BSR set to: 0
   538                           ;user.c: 158: ADCON0bits.GO_DONE = 1;
   539  001066  82C2               	bsf	4034,1,c	;volatile
   540                           
   541                           ;user.c: 159: while(ADCON0bits.GO_DONE != 0);
   542  001068  D000               	goto	l241
   543  00106A                     l241:
   544  00106A  B2C2               	btfsc	4034,1,c	;volatile
   545  00106C  D7FE               	goto	l241
   546                           
   547                           ;user.c: 160: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   548  00106E  CFC3 F080          	movff	4035,??_sensorUpdate	;volatile
   549  001072  0E06               	movlw	6
   550  001074  0100               	movlb	0	; () banked
   551  001076  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   552  001078                     u1145:
   553  001078  0100               	movlb	0	; () banked
   554  00107A  90D8               	bcf	status,0,c
   555  00107C  3380               	rrcf	??_sensorUpdate& (0+255),f,b
   556  00107E  0100               	movlb	0	; () banked
   557  001080  2F81               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   558  001082  D7FA               	goto	u1145
   559  001084  0100               	movlb	0	; () banked
   560  001086  5180               	movf	??_sensorUpdate& (0+255),w,b
   561  001088  CFC4 F082          	movff	4036,??_sensorUpdate+2	;volatile
   562  00108C  0100               	movlb	0	; () banked
   563  00108E  6B83               	clrf	(??_sensorUpdate+3)& (0+255),b
   564  001090  0100               	movlb	0	; () banked
   565  001092  90D8               	bcf	status,0,c
   566  001094  3782               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   567  001096  3783               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   568  001098  0100               	movlb	0	; () banked
   569  00109A  90D8               	bcf	status,0,c
   570  00109C  3782               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   571  00109E  3783               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   572  0010A0  0100               	movlb	0	; () banked
   573  0010A2  2782               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   574  0010A4  0E00               	movlw	0
   575  0010A6  2383               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   576  0010A8  C0D8  F028         	movff	sensorUpdate@j,___wmul@multiplier
   577  0010AC  C0D9  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   578  0010B0  0E00               	movlw	0
   579  0010B2  6E2B               	movwf	___wmul@multiplicand+1,c
   580  0010B4  0E14               	movlw	20
   581  0010B6  6E2A               	movwf	___wmul@multiplicand,c
   582  0010B8  EC5B  F00C         	call	___wmul	;wreg free
   583  0010BC  0E86               	movlw	low sensorUpdate@sensorTemp
   584  0010BE  0100               	movlb	0	; () banked
   585  0010C0  6F84               	movwf	(??_sensorUpdate+4)& (0+255),b
   586  0010C2  0E00               	movlw	high sensorUpdate@sensorTemp
   587  0010C4  0100               	movlb	0	; () banked
   588  0010C6  6F85               	movwf	(??_sensorUpdate+5)& (0+255),b
   589  0010C8  5028               	movf	?___wmul,w,c
   590  0010CA  0100               	movlb	0	; () banked
   591  0010CC  2784               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   592  0010CE  5029               	movf	?___wmul+1,w,c
   593  0010D0  0100               	movlb	0	; () banked
   594  0010D2  2385               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   595  0010D4  90D8               	bcf	status,0,c
   596  0010D6  0100               	movlb	0	; () banked
   597  0010D8  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   598  0010DA  6ED9               	movwf	fsr2l,c
   599  0010DC  0100               	movlb	0	; () banked
   600  0010DE  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   601  0010E0  6EDA               	movwf	fsr2h,c
   602  0010E2  0100               	movlb	0	; () banked
   603  0010E4  5184               	movf	(??_sensorUpdate+4)& (0+255),w,b
   604  0010E6  26D9               	addwf	fsr2l,f,c
   605  0010E8  0100               	movlb	0	; () banked
   606  0010EA  5185               	movf	(??_sensorUpdate+5)& (0+255),w,b
   607  0010EC  22DA               	addwfc	fsr2h,f,c
   608  0010EE  C082  FFDE         	movff	??_sensorUpdate+2,postinc2
   609  0010F2  C083  FFDD         	movff	??_sensorUpdate+3,postdec2
   610                           
   611                           ; BSR set to: 0
   612                           ;user.c: 163: if(j == 0 || j == 3)
   613  0010F6  0100               	movlb	0	; () banked
   614  0010F8  51D8               	movf	sensorUpdate@j& (0+255),w,b
   615  0010FA  0100               	movlb	0	; () banked
   616  0010FC  11D9               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   617  0010FE  B4D8               	btfsc	status,2,c
   618  001100  D007               	goto	l1586
   619                           
   620                           ; BSR set to: 0
   621  001102  0E03               	movlw	3
   622  001104  0100               	movlb	0	; () banked
   623  001106  19D8               	xorwf	sensorUpdate@j& (0+255),w,b
   624  001108  0100               	movlb	0	; () banked
   625  00110A  11D9               	iorwf	(sensorUpdate@j+1)& (0+255),w,b
   626  00110C  A4D8               	btfss	status,2,c
   627  00110E  D030               	goto	l1588
   628  001110                     l1586:
   629                           
   630                           ; BSR set to: 0
   631                           ;user.c: 164: sensorTemp[j][i] -= sensorCorrection[j];
   632  001110  C0D8  F028         	movff	sensorUpdate@j,___wmul@multiplier
   633  001114  C0D9  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   634  001118  0E00               	movlw	0
   635  00111A  6E2B               	movwf	___wmul@multiplicand+1,c
   636  00111C  0E14               	movlw	20
   637  00111E  6E2A               	movwf	___wmul@multiplicand,c
   638  001120  EC5B  F00C         	call	___wmul	;wreg free
   639  001124  0E86               	movlw	low sensorUpdate@sensorTemp
   640  001126  0100               	movlb	0	; () banked
   641  001128  6F80               	movwf	??_sensorUpdate& (0+255),b
   642  00112A  0E00               	movlw	high sensorUpdate@sensorTemp
   643  00112C  0100               	movlb	0	; () banked
   644  00112E  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   645  001130  5028               	movf	?___wmul,w,c
   646  001132  0100               	movlb	0	; () banked
   647  001134  2780               	addwf	??_sensorUpdate& (0+255),f,b
   648  001136  5029               	movf	?___wmul+1,w,c
   649  001138  0100               	movlb	0	; () banked
   650  00113A  2381               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   651  00113C  90D8               	bcf	status,0,c
   652  00113E  0100               	movlb	0	; () banked
   653  001140  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   654  001142  6ED9               	movwf	fsr2l,c
   655  001144  0100               	movlb	0	; () banked
   656  001146  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   657  001148  6EDA               	movwf	fsr2h,c
   658  00114A  0100               	movlb	0	; () banked
   659  00114C  5180               	movf	??_sensorUpdate& (0+255),w,b
   660  00114E  26D9               	addwf	fsr2l,f,c
   661  001150  0100               	movlb	0	; () banked
   662  001152  5181               	movf	(??_sensorUpdate+1)& (0+255),w,b
   663  001154  22DA               	addwfc	fsr2h,f,c
   664  001156  0E01               	movlw	low _sensorCorrection
   665  001158  0100               	movlb	0	; () banked
   666  00115A  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   667  00115C  6EF6               	movwf	tblptrl,c
   668  00115E  0E10               	movlw	high _sensorCorrection
   669  001160  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   670  001162  6EF7               	movwf	tblptrh,c
   671  001164                     	if	0	;There are less than 3 active tblptr bytes
   672  001164                     	endif
   673  001164  0008               	tblrd		*
   674  001166  50F5               	movf	tablat,w,c
   675  001168  5EDE               	subwf	postinc2,f,c
   676  00116A  0E00               	movlw	0
   677  00116C  5ADD               	subwfb	postdec2,f,c
   678  00116E  D030               	goto	l1590
   679  001170                     l1588:
   680                           
   681                           ; BSR set to: 0
   682                           ;user.c: 165: else
   683                           ;user.c: 166: sensorTemp[j][i] += sensorCorrection[j];
   684  001170  C0D8  F028         	movff	sensorUpdate@j,___wmul@multiplier
   685  001174  C0D9  F029         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   686  001178  0E00               	movlw	0
   687  00117A  6E2B               	movwf	___wmul@multiplicand+1,c
   688  00117C  0E14               	movlw	20
   689  00117E  6E2A               	movwf	___wmul@multiplicand,c
   690  001180  EC5B  F00C         	call	___wmul	;wreg free
   691  001184  0E86               	movlw	low sensorUpdate@sensorTemp
   692  001186  0100               	movlb	0	; () banked
   693  001188  6F80               	movwf	??_sensorUpdate& (0+255),b
   694  00118A  0E00               	movlw	high sensorUpdate@sensorTemp
   695  00118C  0100               	movlb	0	; () banked
   696  00118E  6F81               	movwf	(??_sensorUpdate+1)& (0+255),b
   697  001190  5028               	movf	?___wmul,w,c
   698  001192  0100               	movlb	0	; () banked
   699  001194  2780               	addwf	??_sensorUpdate& (0+255),f,b
   700  001196  5029               	movf	?___wmul+1,w,c
   701  001198  0100               	movlb	0	; () banked
   702  00119A  2381               	addwfc	(??_sensorUpdate+1)& (0+255),f,b
   703  00119C  90D8               	bcf	status,0,c
   704  00119E  0100               	movlb	0	; () banked
   705  0011A0  35D6               	rlcf	sensorUpdate@i& (0+255),w,b
   706  0011A2  6ED9               	movwf	fsr2l,c
   707  0011A4  0100               	movlb	0	; () banked
   708  0011A6  35D7               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   709  0011A8  6EDA               	movwf	fsr2h,c
   710  0011AA  0100               	movlb	0	; () banked
   711  0011AC  5180               	movf	??_sensorUpdate& (0+255),w,b
   712  0011AE  26D9               	addwf	fsr2l,f,c
   713  0011B0  0100               	movlb	0	; () banked
   714  0011B2  5181               	movf	(??_sensorUpdate+1)& (0+255),w,b
   715  0011B4  22DA               	addwfc	fsr2h,f,c
   716  0011B6  0E01               	movlw	low _sensorCorrection
   717  0011B8  0100               	movlb	0	; () banked
   718  0011BA  25D8               	addwf	sensorUpdate@j& (0+255),w,b
   719  0011BC  6EF6               	movwf	tblptrl,c
   720  0011BE  0E10               	movlw	high _sensorCorrection
   721  0011C0  21D9               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   722  0011C2  6EF7               	movwf	tblptrh,c
   723  0011C4                     	if	0	;There are less than 3 active tblptr bytes
   724  0011C4                     	endif
   725  0011C4  0008               	tblrd		*
   726  0011C6  50F5               	movf	tablat,w,c
   727  0011C8  26DE               	addwf	postinc2,f,c
   728  0011CA  0E00               	movlw	0
   729  0011CC  22DD               	addwfc	postdec2,f,c
   730  0011CE  D000               	goto	l1590
   731  0011D0                     l1590:
   732                           
   733                           ; BSR set to: 0
   734  0011D0  0100               	movlb	0	; () banked
   735  0011D2  4BD8               	infsnz	sensorUpdate@j& (0+255),f,b
   736  0011D4  2BD9               	incf	(sensorUpdate@j+1)& (0+255),f,b
   737                           
   738                           ; BSR set to: 0
   739  0011D6  0100               	movlb	0	; () banked
   740  0011D8  BFD9               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   741  0011DA  D73B               	goto	l1576
   742  0011DC  0100               	movlb	0	; () banked
   743  0011DE  51D9               	movf	(sensorUpdate@j+1)& (0+255),w,b
   744  0011E0  E102               	bnz	l1594
   745  0011E2  D730               	goto	L1
   746  0011E4  D000               	goto	l1594
   747  0011E6                     l1594:
   748                           
   749                           ; BSR set to: 0
   750  0011E6  0100               	movlb	0	; () banked
   751  0011E8  4BD6               	infsnz	sensorUpdate@i& (0+255),f,b
   752  0011EA  2BD7               	incf	(sensorUpdate@i+1)& (0+255),f,b
   753                           
   754                           ; BSR set to: 0
   755  0011EC  0100               	movlb	0	; () banked
   756  0011EE  BFD7               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   757  0011F0  D71E               	goto	l1570
   758  0011F2  0100               	movlb	0	; () banked
   759  0011F4  51D7               	movf	(sensorUpdate@i+1)& (0+255),w,b
   760  0011F6  E102               	bnz	l1598
   761  0011F8  D713               	goto	L2
   762  0011FA  D000               	goto	l1598
   763  0011FC                     l1598:
   764                           
   765                           ; BSR set to: 0
   766                           ;user.c: 167: }
   767                           ;user.c: 168: }
   768                           ;user.c: 171: sensorComputation(sensorTemp);
   769  0011FC  0E86               	movlw	low sensorUpdate@sensorTemp
   770  0011FE  6E33               	movwf	sensorComputation@sensorTemp,c
   771  001200  0E00               	movlw	high sensorUpdate@sensorTemp
   772  001202  6E34               	movwf	sensorComputation@sensorTemp+1,c
   773  001204  EC05  F009         	call	_sensorComputation	;wreg free
   774  001208  0012               	return		;funcret
   775  00120A                     __end_of_sensorUpdate:
   776                           	opt stack 0
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postinc2	equ	0xFDE
   784                           postdec2	equ	0xFDD
   785                           fsr2h	equ	0xFDA
   786                           fsr2l	equ	0xFD9
   787                           status	equ	0xFD8
   788                           
   789 ;; *************** function _sensorComputation *****************
   790 ;; Defined at:
   791 ;;		line 125 in file "user.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;  sensorTemp      2   50[COMRAM] PTR int [10]
   794 ;;		 -> sensorUpdate@sensorTemp(80), 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  j               2   62[COMRAM] int 
   797 ;;  i               2   60[COMRAM] int 
   798 ;;  sum             2   58[COMRAM] int 
   799 ;;  min             2   56[COMRAM] int 
   800 ;;  max             2   54[COMRAM] int 
   801 ;; Return value:  Size  Location     Type
   802 ;;		None               void
   803 ;; Registers used:
   804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;Total ram usage:       14 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    5
   817 ;; This function calls:
   818 ;;		_MAX
   819 ;;		_MIN
   820 ;;		___awdiv
   821 ;;		___wmul
   822 ;; This function is called by:
   823 ;;		_sensorUpdate
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text2
   828  00120A                     __ptext2:
   829                           	opt stack 0
   830  00120A                     _sensorComputation:
   831                           	opt stack 24
   832                           
   833                           ;user.c: 127: int max,min,i,j,sum;
   834                           ;user.c: 128: for(i = 0; i < 4 ; i++)
   835                           
   836                           ;incstack = 0
   837  00120A  0E00               	movlw	0
   838  00120C  6E3E               	movwf	sensorComputation@i+1,c
   839  00120E  0E00               	movlw	0
   840  001210  6E3D               	movwf	sensorComputation@i,c
   841  001212  BE3E               	btfsc	sensorComputation@i+1,7,c
   842  001214  D008               	goto	l1368
   843  001216  503E               	movf	sensorComputation@i+1,w,c
   844  001218  E105               	bnz	u750
   845  00121A  0E04               	movlw	4
   846  00121C  5C3D               	subwf	sensorComputation@i,w,c
   847  00121E  B0D8               	btfsc	status,0,c
   848  001220  D0E5               	goto	l234
   849  001222  D001               	goto	l1368
   850  001224                     u750:
   851  001224  D0E3               	goto	l234
   852  001226                     l1368:
   853                           
   854                           ;user.c: 129: {
   855                           ;user.c: 130: for(j = 0 ; j < 10 ; j++)
   856  001226  0E00               	movlw	0
   857  001228  6E40               	movwf	sensorComputation@j+1,c
   858  00122A  0E00               	movlw	0
   859  00122C  6E3F               	movwf	sensorComputation@j,c
   860  00122E  BE40               	btfsc	sensorComputation@j+1,7,c
   861  001230  D008               	goto	l1374
   862  001232  5040               	movf	sensorComputation@j+1,w,c
   863  001234  E105               	bnz	u760
   864  001236  0E0A               	movlw	10
   865  001238  5C3F               	subwf	sensorComputation@j,w,c
   866  00123A  B0D8               	btfsc	status,0,c
   867  00123C  D0A8               	goto	l1384
   868  00123E  D001               	goto	l1374
   869  001240                     u760:
   870  001240  D0A6               	goto	l1384
   871  001242                     l1374:
   872                           
   873                           ;user.c: 131: {
   874                           ;user.c: 132: if(j == 0)
   875  001242  503F               	movf	sensorComputation@j,w,c
   876  001244  1040               	iorwf	sensorComputation@j+1,w,c
   877  001246  A4D8               	btfss	status,2,c
   878  001248  D028               	goto	l1378
   879                           
   880                           ;user.c: 133: {
   881                           ;user.c: 134: sum = min = max = sensorTemp[i][j];
   882  00124A  C03D  F028         	movff	sensorComputation@i,___wmul@multiplier
   883  00124E  C03E  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   884  001252  0E00               	movlw	0
   885  001254  6E2B               	movwf	___wmul@multiplicand+1,c
   886  001256  0E14               	movlw	20
   887  001258  6E2A               	movwf	___wmul@multiplicand,c
   888  00125A  EC5B  F00C         	call	___wmul	;wreg free
   889  00125E  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   890  001262  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   891  001266  5028               	movf	?___wmul,w,c
   892  001268  2635               	addwf	??_sensorComputation,f,c
   893  00126A  5029               	movf	?___wmul+1,w,c
   894  00126C  2236               	addwfc	??_sensorComputation+1,f,c
   895  00126E  90D8               	bcf	status,0,c
   896  001270  343F               	rlcf	sensorComputation@j,w,c
   897  001272  6ED9               	movwf	fsr2l,c
   898  001274  3440               	rlcf	sensorComputation@j+1,w,c
   899  001276  6EDA               	movwf	fsr2h,c
   900  001278  5035               	movf	??_sensorComputation,w,c
   901  00127A  26D9               	addwf	fsr2l,f,c
   902  00127C  5036               	movf	??_sensorComputation+1,w,c
   903  00127E  22DA               	addwfc	fsr2h,f,c
   904  001280  CFDE F037          	movff	postinc2,sensorComputation@max
   905  001284  CFDD F038          	movff	postdec2,sensorComputation@max+1
   906  001288  C037  F039         	movff	sensorComputation@max,sensorComputation@min
   907  00128C  C038  F03A         	movff	sensorComputation@max+1,sensorComputation@min+1
   908  001290  C039  F03B         	movff	sensorComputation@min,sensorComputation@sum
   909  001294  C03A  F03C         	movff	sensorComputation@min+1,sensorComputation@sum+1
   910                           
   911                           ;user.c: 135: continue;
   912  001298  D072               	goto	l1380
   913  00129A                     l1378:
   914                           
   915                           ;user.c: 136: }
   916                           ;user.c: 137: min = MIN(sensorTemp[i][j],min);
   917  00129A  C03D  F028         	movff	sensorComputation@i,___wmul@multiplier
   918  00129E  C03E  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   919  0012A2  0E00               	movlw	0
   920  0012A4  6E2B               	movwf	___wmul@multiplicand+1,c
   921  0012A6  0E14               	movlw	20
   922  0012A8  6E2A               	movwf	___wmul@multiplicand,c
   923  0012AA  EC5B  F00C         	call	___wmul	;wreg free
   924  0012AE  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   925  0012B2  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   926  0012B6  5028               	movf	?___wmul,w,c
   927  0012B8  2635               	addwf	??_sensorComputation,f,c
   928  0012BA  5029               	movf	?___wmul+1,w,c
   929  0012BC  2236               	addwfc	??_sensorComputation+1,f,c
   930  0012BE  90D8               	bcf	status,0,c
   931  0012C0  343F               	rlcf	sensorComputation@j,w,c
   932  0012C2  6ED9               	movwf	fsr2l,c
   933  0012C4  3440               	rlcf	sensorComputation@j+1,w,c
   934  0012C6  6EDA               	movwf	fsr2h,c
   935  0012C8  5035               	movf	??_sensorComputation,w,c
   936  0012CA  26D9               	addwf	fsr2l,f,c
   937  0012CC  5036               	movf	??_sensorComputation+1,w,c
   938  0012CE  22DA               	addwfc	fsr2h,f,c
   939  0012D0  CFDE F02E          	movff	postinc2,MIN@a
   940  0012D4  CFDD F02F          	movff	postdec2,MIN@a+1
   941  0012D8  C039  F030         	movff	sensorComputation@min,MIN@b
   942  0012DC  C03A  F031         	movff	sensorComputation@min+1,MIN@b+1
   943  0012E0  EC6F  F00C         	call	_MIN	;wreg free
   944  0012E4  C02E  F039         	movff	?_MIN,sensorComputation@min
   945  0012E8  C02F  F03A         	movff	?_MIN+1,sensorComputation@min+1
   946                           
   947                           ;user.c: 138: max = MAX(sensorTemp[i][j],max);
   948  0012EC  C03D  F028         	movff	sensorComputation@i,___wmul@multiplier
   949  0012F0  C03E  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   950  0012F4  0E00               	movlw	0
   951  0012F6  6E2B               	movwf	___wmul@multiplicand+1,c
   952  0012F8  0E14               	movlw	20
   953  0012FA  6E2A               	movwf	___wmul@multiplicand,c
   954  0012FC  EC5B  F00C         	call	___wmul	;wreg free
   955  001300  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   956  001304  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   957  001308  5028               	movf	?___wmul,w,c
   958  00130A  2635               	addwf	??_sensorComputation,f,c
   959  00130C  5029               	movf	?___wmul+1,w,c
   960  00130E  2236               	addwfc	??_sensorComputation+1,f,c
   961  001310  90D8               	bcf	status,0,c
   962  001312  343F               	rlcf	sensorComputation@j,w,c
   963  001314  6ED9               	movwf	fsr2l,c
   964  001316  3440               	rlcf	sensorComputation@j+1,w,c
   965  001318  6EDA               	movwf	fsr2h,c
   966  00131A  5035               	movf	??_sensorComputation,w,c
   967  00131C  26D9               	addwf	fsr2l,f,c
   968  00131E  5036               	movf	??_sensorComputation+1,w,c
   969  001320  22DA               	addwfc	fsr2h,f,c
   970  001322  CFDE F02E          	movff	postinc2,MAX@a
   971  001326  CFDD F02F          	movff	postdec2,MAX@a+1
   972  00132A  C037  F030         	movff	sensorComputation@max,MAX@b
   973  00132E  C038  F031         	movff	sensorComputation@max+1,MAX@b+1
   974  001332  EC83  F00C         	call	_MAX	;wreg free
   975  001336  C02E  F037         	movff	?_MAX,sensorComputation@max
   976  00133A  C02F  F038         	movff	?_MAX+1,sensorComputation@max+1
   977                           
   978                           ;user.c: 139: sum += sensorTemp[i][j];
   979  00133E  C03D  F028         	movff	sensorComputation@i,___wmul@multiplier
   980  001342  C03E  F029         	movff	sensorComputation@i+1,___wmul@multiplier+1
   981  001346  0E00               	movlw	0
   982  001348  6E2B               	movwf	___wmul@multiplicand+1,c
   983  00134A  0E14               	movlw	20
   984  00134C  6E2A               	movwf	___wmul@multiplicand,c
   985  00134E  EC5B  F00C         	call	___wmul	;wreg free
   986  001352  C033  F035         	movff	sensorComputation@sensorTemp,??_sensorComputation
   987  001356  C034  F036         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
   988  00135A  5028               	movf	?___wmul,w,c
   989  00135C  2635               	addwf	??_sensorComputation,f,c
   990  00135E  5029               	movf	?___wmul+1,w,c
   991  001360  2236               	addwfc	??_sensorComputation+1,f,c
   992  001362  90D8               	bcf	status,0,c
   993  001364  343F               	rlcf	sensorComputation@j,w,c
   994  001366  6ED9               	movwf	fsr2l,c
   995  001368  3440               	rlcf	sensorComputation@j+1,w,c
   996  00136A  6EDA               	movwf	fsr2h,c
   997  00136C  5035               	movf	??_sensorComputation,w,c
   998  00136E  26D9               	addwf	fsr2l,f,c
   999  001370  5036               	movf	??_sensorComputation+1,w,c
  1000  001372  22DA               	addwfc	fsr2h,f,c
  1001  001374  50DE               	movf	postinc2,w,c
  1002  001376  263B               	addwf	sensorComputation@sum,f,c
  1003  001378  50DD               	movf	postdec2,w,c
  1004  00137A  223C               	addwfc	sensorComputation@sum+1,f,c
  1005  00137C  D000               	goto	l1380
  1006  00137E                     l1380:
  1007  00137E  4A3F               	infsnz	sensorComputation@j,f,c
  1008  001380  2A40               	incf	sensorComputation@j+1,f,c
  1009  001382  BE40               	btfsc	sensorComputation@j+1,7,c
  1010  001384  D75E               	goto	l1374
  1011  001386  5040               	movf	sensorComputation@j+1,w,c
  1012  001388  E102               	bnz	l1384
  1013  00138A  D755               	goto	L3
  1014  00138C  D000               	goto	l1384
  1015  00138E                     l1384:
  1016                           
  1017                           ;user.c: 140: }
  1018                           ;user.c: 141: sum = sum - min - max;
  1019  00138E  5037               	movf	sensorComputation@max,w,c
  1020  001390  2439               	addwf	sensorComputation@min,w,c
  1021  001392  6E35               	movwf	??_sensorComputation& (0+255),c
  1022  001394  5038               	movf	sensorComputation@max+1,w,c
  1023  001396  203A               	addwfc	sensorComputation@min+1,w,c
  1024  001398  6E36               	movwf	(??_sensorComputation+1)& (0+255),c
  1025  00139A  1E35               	comf	??_sensorComputation,f,c
  1026  00139C  1E36               	comf	??_sensorComputation+1,f,c
  1027  00139E  4A35               	infsnz	??_sensorComputation,f,c
  1028  0013A0  2A36               	incf	??_sensorComputation+1,f,c
  1029  0013A2  503B               	movf	sensorComputation@sum,w,c
  1030  0013A4  2435               	addwf	??_sensorComputation,w,c
  1031  0013A6  6E3B               	movwf	sensorComputation@sum,c
  1032  0013A8  503C               	movf	sensorComputation@sum+1,w,c
  1033  0013AA  2036               	addwfc	??_sensorComputation+1,w,c
  1034  0013AC  6E3C               	movwf	sensorComputation@sum+1,c
  1035                           
  1036                           ;user.c: 142: sensorValue[i] = sum/(10-2);
  1037  0013AE  C03B  F028         	movff	sensorComputation@sum,___awdiv@dividend
  1038  0013B2  C03C  F029         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1039  0013B6  0E00               	movlw	0
  1040  0013B8  6E2B               	movwf	___awdiv@divisor+1,c
  1041  0013BA  0E08               	movlw	8
  1042  0013BC  6E2A               	movwf	___awdiv@divisor,c
  1043  0013BE  ECA7  F00B         	call	___awdiv	;wreg free
  1044  0013C2  90D8               	bcf	status,0,c
  1045  0013C4  343D               	rlcf	sensorComputation@i,w,c
  1046  0013C6  6ED9               	movwf	fsr2l,c
  1047  0013C8  343E               	rlcf	sensorComputation@i+1,w,c
  1048  0013CA  6EDA               	movwf	fsr2h,c
  1049  0013CC  0E41               	movlw	low _sensorValue
  1050  0013CE  26D9               	addwf	fsr2l,f,c
  1051  0013D0  0E00               	movlw	high _sensorValue
  1052  0013D2  22DA               	addwfc	fsr2h,f,c
  1053  0013D4  C028  FFDE         	movff	?___awdiv,postinc2
  1054  0013D8  C029  FFDD         	movff	?___awdiv+1,postdec2
  1055  0013DC  4A3D               	infsnz	sensorComputation@i,f,c
  1056  0013DE  2A3E               	incf	sensorComputation@i+1,f,c
  1057  0013E0  BE3E               	btfsc	sensorComputation@i+1,7,c
  1058  0013E2  D721               	goto	l1368
  1059  0013E4  503E               	movf	sensorComputation@i+1,w,c
  1060  0013E6  E102               	bnz	l234
  1061  0013E8  D718               	goto	L4
  1062  0013EA  D000               	goto	l234
  1063  0013EC                     l234:
  1064  0013EC  0012               	return		;funcret
  1065  0013EE                     __end_of_sensorComputation:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postinc2	equ	0xFDE
  1074                           postdec2	equ	0xFDD
  1075                           fsr2h	equ	0xFDA
  1076                           fsr2l	equ	0xFD9
  1077                           status	equ	0xFD8
  1078                           
  1079 ;; *************** function ___wmul *****************
  1080 ;; Defined at:
  1081 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  multiplier      2   39[COMRAM] unsigned int 
  1084 ;;  multiplicand    2   41[COMRAM] unsigned int 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  product         2   43[COMRAM] unsigned int 
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  2   39[COMRAM] unsigned int 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, prodl, prodh
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1100 ;;Total ram usage:        6 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    4
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_sensorComputation
  1107 ;;		_sensorUpdate
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text3
  1112  0018B6                     __ptext3:
  1113                           	opt stack 0
  1114  0018B6                     ___wmul:
  1115                           	opt stack 24
  1116                           
  1117                           ;incstack = 0
  1118  0018B6  5028               	movf	___wmul@multiplier,w,c
  1119  0018B8  022A               	mulwf	___wmul@multiplicand,c
  1120  0018BA  CFF3 F02C          	movff	prodl,___wmul@product
  1121  0018BE  CFF4 F02D          	movff	prodh,___wmul@product+1
  1122  0018C2  5028               	movf	___wmul@multiplier,w,c
  1123  0018C4  022B               	mulwf	___wmul@multiplicand+1,c
  1124  0018C6  50F3               	movf	prodl,w,c
  1125  0018C8  262D               	addwf	___wmul@product+1,f,c
  1126  0018CA  5029               	movf	___wmul@multiplier+1,w,c
  1127  0018CC  022A               	mulwf	___wmul@multiplicand,c
  1128  0018CE  50F3               	movf	prodl,w,c
  1129  0018D0  262D               	addwf	___wmul@product+1,f,c
  1130  0018D2  C02C  F028         	movff	___wmul@product,?___wmul
  1131  0018D6  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  1132  0018DA  D000               	goto	l259
  1133  0018DC                     l259:
  1134  0018DC  0012               	return		;funcret
  1135  0018DE                     __end_of___wmul:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           prodh	equ	0xFF4
  1142                           prodl	equ	0xFF3
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postinc2	equ	0xFDE
  1146                           postdec2	equ	0xFDD
  1147                           fsr2h	equ	0xFDA
  1148                           fsr2l	equ	0xFD9
  1149                           status	equ	0xFD8
  1150                           
  1151 ;; *************** function ___awdiv *****************
  1152 ;; Defined at:
  1153 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  dividend        2   39[COMRAM] int 
  1156 ;;  divisor         2   41[COMRAM] int 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  quotient        2   45[COMRAM] int 
  1159 ;;  sign            1   44[COMRAM] unsigned char 
  1160 ;;  counter         1   43[COMRAM] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  2   39[COMRAM] int 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;Total ram usage:        8 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    4
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_sensorComputation
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text4
  1185  00174E                     __ptext4:
  1186                           	opt stack 0
  1187  00174E                     ___awdiv:
  1188                           	opt stack 24
  1189                           
  1190                           ;incstack = 0
  1191  00174E  0E00               	movlw	0
  1192  001750  6E2D               	movwf	___awdiv@sign,c
  1193  001752  AE2B               	btfss	___awdiv@divisor+1,7,c
  1194  001754  D007               	goto	l1234
  1195  001756  6C2A               	negf	___awdiv@divisor,c
  1196  001758  1E2B               	comf	___awdiv@divisor+1,f,c
  1197  00175A  B0D8               	btfsc	status,0,c
  1198  00175C  2A2B               	incf	___awdiv@divisor+1,f,c
  1199  00175E  0E01               	movlw	1
  1200  001760  6E2D               	movwf	___awdiv@sign,c
  1201  001762  D000               	goto	l1234
  1202  001764                     l1234:
  1203  001764  AE29               	btfss	___awdiv@dividend+1,7,c
  1204  001766  D007               	goto	l1240
  1205  001768  6C28               	negf	___awdiv@dividend,c
  1206  00176A  1E29               	comf	___awdiv@dividend+1,f,c
  1207  00176C  B0D8               	btfsc	status,0,c
  1208  00176E  2A29               	incf	___awdiv@dividend+1,f,c
  1209  001770  0E01               	movlw	1
  1210  001772  1A2D               	xorwf	___awdiv@sign,f,c
  1211  001774  D000               	goto	l1240
  1212  001776                     l1240:
  1213  001776  0E00               	movlw	0
  1214  001778  6E2F               	movwf	___awdiv@quotient+1,c
  1215  00177A  0E00               	movlw	0
  1216  00177C  6E2E               	movwf	___awdiv@quotient,c
  1217  00177E  502A               	movf	___awdiv@divisor,w,c
  1218  001780  102B               	iorwf	___awdiv@divisor+1,w,c
  1219  001782  B4D8               	btfsc	status,2,c
  1220  001784  D021               	goto	l1262
  1221  001786  0E01               	movlw	1
  1222  001788  6E2C               	movwf	___awdiv@counter,c
  1223  00178A  D005               	goto	l1248
  1224  00178C                     l1246:
  1225  00178C  90D8               	bcf	status,0,c
  1226  00178E  362A               	rlcf	___awdiv@divisor,f,c
  1227  001790  362B               	rlcf	___awdiv@divisor+1,f,c
  1228  001792  2A2C               	incf	___awdiv@counter,f,c
  1229  001794  D000               	goto	l1248
  1230  001796                     l1248:
  1231  001796  BE2B               	btfsc	___awdiv@divisor+1,7,c
  1232  001798  D002               	goto	l1250
  1233  00179A  D7F8               	goto	l1246
  1234  00179C  D000               	goto	l1250
  1235  00179E                     l1250:
  1236  00179E  90D8               	bcf	status,0,c
  1237  0017A0  362E               	rlcf	___awdiv@quotient,f,c
  1238  0017A2  362F               	rlcf	___awdiv@quotient+1,f,c
  1239  0017A4  502A               	movf	___awdiv@divisor,w,c
  1240  0017A6  5C28               	subwf	___awdiv@dividend,w,c
  1241  0017A8  502B               	movf	___awdiv@divisor+1,w,c
  1242  0017AA  5829               	subwfb	___awdiv@dividend+1,w,c
  1243  0017AC  A0D8               	btfss	status,0,c
  1244  0017AE  D006               	goto	l1258
  1245  0017B0  502A               	movf	___awdiv@divisor,w,c
  1246  0017B2  5E28               	subwf	___awdiv@dividend,f,c
  1247  0017B4  502B               	movf	___awdiv@divisor+1,w,c
  1248  0017B6  5A29               	subwfb	___awdiv@dividend+1,f,c
  1249  0017B8  802E               	bsf	___awdiv@quotient,0,c
  1250  0017BA  D000               	goto	l1258
  1251  0017BC                     l1258:
  1252  0017BC  90D8               	bcf	status,0,c
  1253  0017BE  322B               	rrcf	___awdiv@divisor+1,f,c
  1254  0017C0  322A               	rrcf	___awdiv@divisor,f,c
  1255  0017C2  2E2C               	decfsz	___awdiv@counter,f,c
  1256  0017C4  D7EC               	goto	l1250
  1257  0017C6  D000               	goto	l1262
  1258  0017C8                     l1262:
  1259  0017C8  502D               	movf	___awdiv@sign,w,c
  1260  0017CA  B4D8               	btfsc	status,2,c
  1261  0017CC  D005               	goto	l1266
  1262  0017CE  6C2E               	negf	___awdiv@quotient,c
  1263  0017D0  1E2F               	comf	___awdiv@quotient+1,f,c
  1264  0017D2  B0D8               	btfsc	status,0,c
  1265  0017D4  2A2F               	incf	___awdiv@quotient+1,f,c
  1266  0017D6  D000               	goto	l1266
  1267  0017D8                     l1266:
  1268  0017D8  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  1269  0017DC  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  1270  0017E0  D000               	goto	l452
  1271  0017E2                     l452:
  1272  0017E2  0012               	return		;funcret
  1273  0017E4                     __end_of___awdiv:
  1274                           	opt stack 0
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           postinc2	equ	0xFDE
  1284                           postdec2	equ	0xFDD
  1285                           fsr2h	equ	0xFDA
  1286                           fsr2l	equ	0xFD9
  1287                           status	equ	0xFD8
  1288                           
  1289 ;; *************** function _MIN *****************
  1290 ;; Defined at:
  1291 ;;		line 175 in file "user.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  a               2   45[COMRAM] int 
  1294 ;;  b               2   47[COMRAM] int 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  2   45[COMRAM] int 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2, status,0
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;Total ram usage:        5 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    4
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_sensorComputation
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text5
  1321  0018DE                     __ptext5:
  1322                           	opt stack 0
  1323  0018DE                     _MIN:
  1324                           	opt stack 24
  1325                           
  1326                           ;user.c: 177: if(a>b) return b;
  1327                           
  1328                           ;incstack = 0
  1329  0018DE  502E               	movf	MIN@a,w,c
  1330  0018E0  5C30               	subwf	MIN@b,w,c
  1331  0018E2  5031               	movf	MIN@b+1,w,c
  1332  0018E4  0A80               	xorlw	128
  1333  0018E6  6E32               	movwf	??_MIN& (0+255),c
  1334  0018E8  502F               	movf	MIN@a+1,w,c
  1335  0018EA  0A80               	xorlw	128
  1336  0018EC  5832               	subwfb	??_MIN& (0+255),w,c
  1337  0018EE  B0D8               	btfsc	status,0,c
  1338  0018F0  D005               	goto	l251
  1339  0018F2  C030  F02E         	movff	MIN@b,?_MIN
  1340  0018F6  C031  F02F         	movff	MIN@b+1,?_MIN+1
  1341  0018FA  D004               	goto	l252
  1342  0018FC                     l251:
  1343                           
  1344                           ;user.c: 178: return a;
  1345  0018FC  C02E  F02E         	movff	MIN@a,?_MIN
  1346  001900  C02F  F02F         	movff	MIN@a+1,?_MIN+1
  1347  001904                     l252:
  1348  001904  0012               	return		;funcret
  1349  001906                     __end_of_MIN:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postinc2	equ	0xFDE
  1360                           postdec2	equ	0xFDD
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _MAX *****************
  1366 ;; Defined at:
  1367 ;;		line 181 in file "user.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  a               2   45[COMRAM] int 
  1370 ;;  b               2   47[COMRAM] int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2   45[COMRAM] int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:        5 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    4
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sensorComputation
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text6
  1397  001906                     __ptext6:
  1398                           	opt stack 0
  1399  001906                     _MAX:
  1400                           	opt stack 24
  1401                           
  1402                           ;user.c: 183: if(a>b) return a;
  1403                           
  1404                           ;incstack = 0
  1405  001906  502E               	movf	MAX@a,w,c
  1406  001908  5C30               	subwf	MAX@b,w,c
  1407  00190A  5031               	movf	MAX@b+1,w,c
  1408  00190C  0A80               	xorlw	128
  1409  00190E  6E32               	movwf	??_MAX& (0+255),c
  1410  001910  502F               	movf	MAX@a+1,w,c
  1411  001912  0A80               	xorlw	128
  1412  001914  5832               	subwfb	??_MAX& (0+255),w,c
  1413  001916  B0D8               	btfsc	status,0,c
  1414  001918  D005               	goto	l255
  1415  00191A  C02E  F02E         	movff	MAX@a,?_MAX
  1416  00191E  C02F  F02F         	movff	MAX@a+1,?_MAX+1
  1417  001922  D004               	goto	l256
  1418  001924                     l255:
  1419                           
  1420                           ;user.c: 184: return b;
  1421  001924  C030  F02E         	movff	MAX@b,?_MAX
  1422  001928  C031  F02F         	movff	MAX@b+1,?_MAX+1
  1423  00192C                     l256:
  1424  00192C  0012               	return		;funcret
  1425  00192E                     __end_of_MAX:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441 ;; *************** function _InitApp *****************
  1442 ;; Defined at:
  1443 ;;		line 35 in file "user.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;		None               void
  1450 ;; Registers used:
  1451 ;;		wreg, status,2, status,0, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;Total ram usage:        0 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    5
  1464 ;; This function calls:
  1465 ;;		_AlgorithmSelection
  1466 ;;		_delay
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text7
  1473  0017E4                     __ptext7:
  1474                           	opt stack 0
  1475  0017E4                     _InitApp:
  1476                           	opt stack 25
  1477                           
  1478                           ;user.c: 39: TRISC = 0;
  1479                           
  1480                           ;incstack = 0
  1481  0017E4  0E00               	movlw	0
  1482  0017E6  6E94               	movwf	3988,c	;volatile
  1483                           
  1484                           ;user.c: 43: TRISEbits.TRISE1=1;
  1485  0017E8  8296               	bsf	3990,1,c	;volatile
  1486                           
  1487                           ;user.c: 45: TRISEbits.TRISE2=1;
  1488  0017EA  8496               	bsf	3990,2,c	;volatile
  1489                           
  1490                           ;user.c: 47: TRISBbits.RB1=1;
  1491  0017EC  8293               	bsf	3987,1,c	;volatile
  1492                           
  1493                           ;user.c: 49: TRISBbits.RB0=1;
  1494  0017EE  8093               	bsf	3987,0,c	;volatile
  1495                           
  1496                           ;user.c: 52: TRISBbits.RB3=1;
  1497  0017F0  8693               	bsf	3987,3,c	;volatile
  1498                           
  1499                           ;user.c: 54: TRISBbits.RB2=1;
  1500  0017F2  8493               	bsf	3987,2,c	;volatile
  1501                           
  1502                           ;user.c: 58: ADCON1 =0b00000001;
  1503  0017F4  0E01               	movlw	1
  1504  0017F6  6EC1               	movwf	4033,c	;volatile
  1505                           
  1506                           ;user.c: 63: ADCON2=0b00001010;
  1507  0017F8  0E0A               	movlw	10
  1508  0017FA  6EC0               	movwf	4032,c	;volatile
  1509                           
  1510                           ;user.c: 68: ADCON0=0b00101011;
  1511  0017FC  0E2B               	movlw	43
  1512  0017FE  6EC2               	movwf	4034,c	;volatile
  1513                           
  1514                           ;user.c: 77: T0CON = 0b11000100;
  1515  001800  0EC4               	movlw	196
  1516  001802  6ED5               	movwf	4053,c	;volatile
  1517                           
  1518                           ;user.c: 85: INTCON2 = 0b11110100;
  1519  001804  0EF4               	movlw	244
  1520  001806  6EF1               	movwf	intcon2,c	;volatile
  1521                           
  1522                           ;user.c: 95: INTCON = 0b00100000;
  1523  001808  0E20               	movlw	32
  1524  00180A  6EF2               	movwf	intcon,c	;volatile
  1525                           
  1526                           ;user.c: 105: AlgorithmSelection();
  1527  00180C  EC97  F00C         	call	_AlgorithmSelection	;wreg free
  1528                           
  1529                           ;user.c: 108: delay(1000);
  1530  001810  0E03               	movlw	3
  1531  001812  6E29               	movwf	delay@ms+1,c
  1532  001814  0EE8               	movlw	232
  1533  001816  6E28               	movwf	delay@ms,c
  1534  001818  EC2D  F00C         	call	_delay	;wreg free
  1535                           
  1536                           ;user.c: 109: INTCONbits.GIE = 1;
  1537  00181C  8EF2               	bsf	intcon,7,c	;volatile
  1538  00181E  0012               	return		;funcret
  1539  001820                     __end_of_InitApp:
  1540                           	opt stack 0
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           intcon	equ	0xFF2
  1548                           intcon2	equ	0xFF1
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           postinc2	equ	0xFDE
  1552                           postdec2	equ	0xFDD
  1553                           fsr2h	equ	0xFDA
  1554                           fsr2l	equ	0xFD9
  1555                           status	equ	0xFD8
  1556                           
  1557 ;; *************** function _delay *****************
  1558 ;; Defined at:
  1559 ;;		line 29 in file "user.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  ms              2   39[COMRAM] unsigned int 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  x               2   42[COMRAM] int 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;		None               void
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;Total ram usage:        5 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    4
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_InitApp
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text8
  1588  00185A                     __ptext8:
  1589                           	opt stack 0
  1590  00185A                     _delay:
  1591                           	opt stack 25
  1592                           
  1593                           ;user.c: 30: int x = 0;
  1594                           
  1595                           ;incstack = 0
  1596  00185A  0E00               	movlw	0
  1597  00185C  6E2C               	movwf	delay@x+1,c
  1598  00185E  0E00               	movlw	0
  1599  001860  6E2B               	movwf	delay@x,c
  1600                           
  1601                           ;user.c: 31: for (x = 0; x < ms; x++)
  1602  001862  0E00               	movlw	0
  1603  001864  6E2C               	movwf	delay@x+1,c
  1604  001866  0E00               	movlw	0
  1605  001868  6E2B               	movwf	delay@x,c
  1606  00186A  D00A               	goto	l211
  1607  00186C                     l1358:
  1608                           
  1609                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1610  00186C  0E0B               	movlw	11
  1611  00186E  6E2A               	movwf	??_delay& (0+255),c
  1612  001870  0E62               	movlw	98
  1613  001872                     u1197:
  1614  001872  2EE8               	decfsz	wreg,f,c
  1615  001874  D7FE               	goto	u1197
  1616  001876  2E2A               	decfsz	??_delay& (0+255),f,c
  1617  001878  D7FC               	goto	u1197
  1618  00187A  D000               	nop2	
  1619  00187C  4A2B               	infsnz	delay@x,f,c
  1620  00187E  2A2C               	incf	delay@x+1,f,c
  1621  001880                     l211:
  1622  001880  5028               	movf	delay@ms,w,c
  1623  001882  5C2B               	subwf	delay@x,w,c
  1624  001884  5029               	movf	delay@ms+1,w,c
  1625  001886  582C               	subwfb	delay@x+1,w,c
  1626  001888  A0D8               	btfss	status,0,c
  1627  00188A  D7F0               	goto	l1358
  1628  00188C  0012               	return		;funcret
  1629  00188E                     __end_of_delay:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           prodh	equ	0xFF4
  1636                           prodl	equ	0xFF3
  1637                           intcon	equ	0xFF2
  1638                           intcon2	equ	0xFF1
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function _AlgorithmSelection *****************
  1648 ;; Defined at:
  1649 ;;		line 112 in file "user.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;		None               void
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_InitApp
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text9
  1678  00192E                     __ptext9:
  1679                           	opt stack 0
  1680  00192E                     _AlgorithmSelection:
  1681                           	opt stack 25
  1682                           
  1683                           ;user.c: 114: ADCON0 = 0b00100111;
  1684                           
  1685                           ;incstack = 0
  1686  00192E  0E27               	movlw	39
  1687  001930  6EC2               	movwf	4034,c	;volatile
  1688                           
  1689                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  1690  001932  82C2               	bsf	4034,1,c	;volatile
  1691                           
  1692                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  1693  001934  D000               	goto	l220
  1694  001936                     l220:
  1695  001936  B2C2               	btfsc	4034,1,c	;volatile
  1696  001938  D7FE               	goto	l220
  1697                           
  1698                           ;user.c: 119: if(ADRESL > 0b10000000)
  1699  00193A  0E80               	movlw	128
  1700  00193C  64C3               	cpfsgt	4035,c	;volatile
  1701  00193E  D002               	goto	l1006
  1702                           
  1703                           ;user.c: 120: algorithm = LEFTWALL;
  1704  001940  0E00               	movlw	0
  1705  001942  D001               	goto	L5
  1706  001944                     l1006:
  1707                           
  1708                           ;user.c: 121: else
  1709                           ;user.c: 122: algorithm = RIGHTWALL;
  1710  001944  0E01               	movlw	1
  1711  001946                     L5:
  1712  001946  6E57               	movwf	_algorithm,c
  1713  001948  D000               	goto	l225
  1714  00194A                     l225:
  1715  00194A  0012               	return		;funcret
  1716  00194C                     __end_of_AlgorithmSelection:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           intcon	equ	0xFF2
  1725                           intcon2	equ	0xFF1
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           postinc2	equ	0xFDE
  1729                           postdec2	equ	0xFDD
  1730                           fsr2h	equ	0xFDA
  1731                           fsr2l	equ	0xFD9
  1732                           status	equ	0xFD8
  1733                           
  1734 ;; *************** function _ConfigureOscillator *****************
  1735 ;; Defined at:
  1736 ;;		line 24 in file "system.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;		None               void
  1743 ;; Registers used:
  1744 ;;		wreg, status,2
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    4
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text10
  1765  0019A6                     __ptext10:
  1766                           	opt stack 0
  1767  0019A6                     _ConfigureOscillator:
  1768                           	opt stack 26
  1769                           
  1770                           ;system.c: 29: OSCCON = 0b01111100;
  1771                           
  1772                           ;incstack = 0
  1773  0019A6  0E7C               	movlw	124
  1774  0019A8  6ED3               	movwf	4051,c	;volatile
  1775                           
  1776                           ;system.c: 31: OSCTUNE = 0b01001111;
  1777  0019AA  0E4F               	movlw	79
  1778  0019AC  6E9B               	movwf	3995,c	;volatile
  1779  0019AE  0012               	return		;funcret
  1780  0019B0                     __end_of_ConfigureOscillator:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           prodh	equ	0xFF4
  1787                           prodl	equ	0xFF3
  1788                           intcon	equ	0xFF2
  1789                           intcon2	equ	0xFF1
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _low_isr *****************
  1799 ;; Defined at:
  1800 ;;		line 145 in file "interrupts.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		None
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;Total ram usage:       17 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    3
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		Interrupt level 1
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	intcodelo
  1829  000018                     __pintcodelo:
  1830                           	opt stack 0
  1831  000018                     _low_isr:
  1832                           	opt stack 24
  1833                           
  1834                           ;incstack = 0
  1835  000018  CFD8 F001          	movff	status,??_low_isr
  1836  00001C  CFE8 F002          	movff	wreg,??_low_isr+1
  1837  000020  CFE0 F003          	movff	bsr,??_low_isr+2
  1838  000024  CFFA F004          	movff	pclath,??_low_isr+3
  1839  000028  CFFB F005          	movff	pclatu,??_low_isr+4
  1840  00002C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  1841  000030  CFEA F007          	movff	fsr0h,??_low_isr+6
  1842  000034  CFE1 F008          	movff	fsr1l,??_low_isr+7
  1843  000038  CFE2 F009          	movff	fsr1h,??_low_isr+8
  1844  00003C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  1845  000040  CFDA F00B          	movff	fsr2h,??_low_isr+10
  1846  000044  CFF3 F00C          	movff	prodl,??_low_isr+11
  1847  000048  CFF4 F00D          	movff	prodh,??_low_isr+12
  1848  00004C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  1849  000050  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  1850  000054  CFF8 F010          	movff	tblptru,??_low_isr+15
  1851  000058  CFF5 F011          	movff	tablat,??_low_isr+16
  1852  00005C  C011  FFF5         	movff	??_low_isr+16,tablat
  1853  000060  C010  FFF8         	movff	??_low_isr+15,tblptru
  1854  000064  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  1855  000068  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  1856  00006C  C00D  FFF4         	movff	??_low_isr+12,prodh
  1857  000070  C00C  FFF3         	movff	??_low_isr+11,prodl
  1858  000074  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  1859  000078  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  1860  00007C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  1861  000080  C008  FFE1         	movff	??_low_isr+7,fsr1l
  1862  000084  C007  FFEA         	movff	??_low_isr+6,fsr0h
  1863  000088  C006  FFE9         	movff	??_low_isr+5,fsr0l
  1864  00008C  C005  FFFB         	movff	??_low_isr+4,pclatu
  1865  000090  C004  FFFA         	movff	??_low_isr+3,pclath
  1866  000094  C003  FFE0         	movff	??_low_isr+2,bsr
  1867  000098  C002  FFE8         	movff	??_low_isr+1,wreg
  1868  00009C  C001  FFD8         	movff	??_low_isr,status
  1869  0000A0  0010               	retfie	
  1870  0000A2                     __end_of_low_isr:
  1871                           	opt stack 0
  1872                           pclatu	equ	0xFFB
  1873                           pclath	equ	0xFFA
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           prodh	equ	0xFF4
  1879                           prodl	equ	0xFF3
  1880                           intcon	equ	0xFF2
  1881                           intcon2	equ	0xFF1
  1882                           postinc0	equ	0xFEE
  1883                           fsr0h	equ	0xFEA
  1884                           fsr0l	equ	0xFE9
  1885                           wreg	equ	0xFE8
  1886                           fsr1h	equ	0xFE2
  1887                           fsr1l	equ	0xFE1
  1888                           bsr	equ	0xFE0
  1889                           postinc2	equ	0xFDE
  1890                           postdec2	equ	0xFDD
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _high_isr *****************
  1896 ;; Defined at:
  1897 ;;		line 73 in file "interrupts.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;		None               void
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:       14 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    2
  1918 ;; This function calls:
  1919 ;;		_KController
  1920 ;;		_Reversing
  1921 ;;		_merge
  1922 ;;		_moveMouse
  1923 ;;		_rotate
  1924 ;; This function is called by:
  1925 ;;		Interrupt level 2
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	intcode
  1930  000008                     __pintcode:
  1931                           	opt stack 0
  1932  000008                     _high_isr:
  1933                           	opt stack 24
  1934                           
  1935                           ;incstack = 0
  1936  000008  CFFA F01A          	movff	pclath,??_high_isr
  1937  00000C  CFFB F01B          	movff	pclatu,??_high_isr+1
  1938  000010  CFE9 F01C          	movff	fsr0l,??_high_isr+2
  1939  000014  EDF7  F009         	call	int_func,f	;refresh shadow registers
  1940                           pclatu	equ	0xFFB
  1941                           pclath	equ	0xFFA
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           prodh	equ	0xFF4
  1947                           prodl	equ	0xFF3
  1948                           intcon	equ	0xFF2
  1949                           intcon2	equ	0xFF1
  1950                           postinc0	equ	0xFEE
  1951                           fsr0h	equ	0xFEA
  1952                           fsr0l	equ	0xFE9
  1953                           wreg	equ	0xFE8
  1954                           fsr1h	equ	0xFE2
  1955                           fsr1l	equ	0xFE1
  1956                           bsr	equ	0xFE0
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963                           	psect	intcode_body
  1964  0013EE                     __pintcode_body:
  1965                           	opt stack 24
  1966  0013EE                     int_func:
  1967                           	opt stack 24
  1968  0013EE  0006               	pop		; remove dummy address from shadow register refresh
  1969  0013F0  CFEA F01D          	movff	fsr0h,??_high_isr+3
  1970  0013F4  CFE1 F01E          	movff	fsr1l,??_high_isr+4
  1971  0013F8  CFE2 F01F          	movff	fsr1h,??_high_isr+5
  1972  0013FC  CFD9 F020          	movff	fsr2l,??_high_isr+6
  1973  001400  CFDA F021          	movff	fsr2h,??_high_isr+7
  1974  001404  CFF3 F022          	movff	prodl,??_high_isr+8
  1975  001408  CFF4 F023          	movff	prodh,??_high_isr+9
  1976  00140C  CFF6 F024          	movff	tblptrl,??_high_isr+10
  1977  001410  CFF7 F025          	movff	tblptrh,??_high_isr+11
  1978  001414  CFF8 F026          	movff	tblptru,??_high_isr+12
  1979  001418  CFF5 F027          	movff	tablat,??_high_isr+13
  1980                           
  1981                           ;interrupts.c: 92: if(INTCONbits.TMR0IF == 1)
  1982  00141C  A4F2               	btfss	intcon,2,c	;volatile
  1983  00141E  D093               	goto	i2l60
  1984                           
  1985                           ;interrupts.c: 93: {
  1986                           ;interrupts.c: 94: if(MotorDelayCounter > 2)
  1987  001420  BE4C               	btfsc	_MotorDelayCounter+1,7,c
  1988  001422  D08D               	goto	i2l1542
  1989  001424  504C               	movf	_MotorDelayCounter+1,w,c
  1990  001426  E104               	bnz	i2u95_40
  1991  001428  0E03               	movlw	3
  1992  00142A  5C4B               	subwf	_MotorDelayCounter,w,c
  1993  00142C  A0D8               	btfss	status,0,c
  1994  00142E  D087               	goto	i2l1542
  1995  001430                     i2u95_40:
  1996                           
  1997                           ;interrupts.c: 95: {
  1998                           ;interrupts.c: 97: if (ReverseCounter > 0)
  1999  001430  BE50               	btfsc	_ReverseCounter+1,7,c
  2000  001432  D008               	goto	i2l1504
  2001  001434  5050               	movf	_ReverseCounter+1,w,c
  2002  001436  E103               	bnz	i2u96_40
  2003  001438  044F               	decf	_ReverseCounter,w,c
  2004  00143A  A0D8               	btfss	status,0,c
  2005  00143C  D003               	goto	i2l1504
  2006  00143E                     i2u96_40:
  2007                           
  2008                           ;interrupts.c: 98: Reversing();
  2009  00143E  ECA6  F00C         	call	_Reversing	;wreg free
  2010  001442  D071               	goto	i2l1540
  2011  001444                     i2l1504:
  2012                           
  2013                           ;interrupts.c: 99: else if(RotateCounter > 0)
  2014  001444  BE52               	btfsc	_RotateCounter+1,7,c
  2015  001446  D01F               	goto	i2l1516
  2016  001448  5052               	movf	_RotateCounter+1,w,c
  2017  00144A  E103               	bnz	i2u97_40
  2018  00144C  0451               	decf	_RotateCounter,w,c
  2019  00144E  A0D8               	btfss	status,0,c
  2020  001450  D01A               	goto	i2l1516
  2021  001452                     i2u97_40:
  2022                           
  2023                           ;interrupts.c: 100: {
  2024                           ;interrupts.c: 101: if ((sensorValue[2] > 700 || sensorValue[3] > 700)) {
  2025  001452  BE46               	btfsc	_sensorValue+5,7,c
  2026  001454  D006               	goto	i2l1508
  2027  001456  0EBD               	movlw	189
  2028  001458  5C45               	subwf	_sensorValue+4,w,c
  2029  00145A  0E02               	movlw	2
  2030  00145C  5846               	subwfb	_sensorValue+5,w,c
  2031  00145E  B0D8               	btfsc	status,0,c
  2032  001460  D008               	goto	i2l1510
  2033  001462                     i2l1508:
  2034  001462  BE48               	btfsc	_sensorValue+7,7,c
  2035  001464  D00D               	goto	i2l1514
  2036  001466  0EBD               	movlw	189
  2037  001468  5C47               	subwf	_sensorValue+6,w,c
  2038  00146A  0E02               	movlw	2
  2039  00146C  5848               	subwfb	_sensorValue+7,w,c
  2040  00146E  A0D8               	btfss	status,0,c
  2041  001470  D007               	goto	i2l1514
  2042  001472                     i2l1510:
  2043                           
  2044                           ;interrupts.c: 103: ReverseCounter = 15;
  2045  001472  0E00               	movlw	0
  2046  001474  6E50               	movwf	_ReverseCounter+1,c
  2047  001476  0E0F               	movlw	15
  2048  001478  6E4F               	movwf	_ReverseCounter,c
  2049                           
  2050                           ;interrupts.c: 104: Reversing();
  2051  00147A  ECA6  F00C         	call	_Reversing	;wreg free
  2052                           
  2053                           ;interrupts.c: 105: } else {
  2054  00147E  D053               	goto	i2l1540
  2055  001480                     i2l1514:
  2056                           
  2057                           ;interrupts.c: 106: rotate();
  2058  001480  EC10  F00C         	call	_rotate	;wreg free
  2059                           
  2060                           ;interrupts.c: 107: }
  2061                           ;interrupts.c: 108: }
  2062  001484  D050               	goto	i2l1540
  2063  001486                     i2l1516:
  2064                           
  2065                           ;interrupts.c: 121: else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2066                           ;interrupts.c: 122: && (sensorValue[2] < 420 || sensorValue[3] < 420))
  2067  001486  BE42               	btfsc	_sensorValue+1,7,c
  2068  001488  D020               	goto	i2l1526
  2069  00148A  5042               	movf	_sensorValue+1,w,c
  2070  00148C  E104               	bnz	i2u100_40
  2071  00148E  0E65               	movlw	101
  2072  001490  5C41               	subwf	_sensorValue,w,c
  2073  001492  A0D8               	btfss	status,0,c
  2074  001494  D01A               	goto	i2l1526
  2075  001496                     i2u100_40:
  2076  001496  BE44               	btfsc	_sensorValue+3,7,c
  2077  001498  D018               	goto	i2l1526
  2078  00149A  5044               	movf	_sensorValue+3,w,c
  2079  00149C  E104               	bnz	i2u101_40
  2080  00149E  0E65               	movlw	101
  2081  0014A0  5C43               	subwf	_sensorValue+2,w,c
  2082  0014A2  A0D8               	btfss	status,0,c
  2083  0014A4  D012               	goto	i2l1526
  2084  0014A6                     i2u101_40:
  2085  0014A6  BE46               	btfsc	_sensorValue+5,7,c
  2086  0014A8  D00D               	goto	i2l1524
  2087  0014AA  0EA4               	movlw	164
  2088  0014AC  5C45               	subwf	_sensorValue+4,w,c
  2089  0014AE  0E01               	movlw	1
  2090  0014B0  5846               	subwfb	_sensorValue+5,w,c
  2091  0014B2  B0D8               	btfsc	status,0,c
  2092  0014B4  BE48               	btfsc	_sensorValue+7,7,c
  2093  0014B6  D006               	goto	i2l1524
  2094  0014B8  0EA4               	movlw	164
  2095  0014BA  5C47               	subwf	_sensorValue+6,w,c
  2096  0014BC  0E01               	movlw	1
  2097  0014BE  5848               	subwfb	_sensorValue+7,w,c
  2098  0014C0  B0D8               	btfsc	status,0,c
  2099  0014C2  D003               	goto	i2l1526
  2100  0014C4                     i2l1524:
  2101                           
  2102                           ;interrupts.c: 123: {
  2103                           ;interrupts.c: 124: KController();
  2104  0014C4  EC3A  F00B         	call	_KController	;wreg free
  2105                           
  2106                           ;interrupts.c: 125: } else if ((sensorValue[0] > 100 && sensorValue[1] > 100 )
  2107  0014C8  D02E               	goto	i2l1540
  2108  0014CA                     i2l1526:
  2109                           
  2110                           ;interrupts.c: 126: && (sensorValue[2] > 420 || sensorValue[3] > 420) && RotateCounter <
      +                          = 0)
  2111  0014CA  BE42               	btfsc	_sensorValue+1,7,c
  2112  0014CC  D02C               	goto	i2l1540
  2113  0014CE  5042               	movf	_sensorValue+1,w,c
  2114  0014D0  E104               	bnz	i2u104_40
  2115  0014D2  0E65               	movlw	101
  2116  0014D4  5C41               	subwf	_sensorValue,w,c
  2117  0014D6  A0D8               	btfss	status,0,c
  2118  0014D8  D026               	goto	i2l1540
  2119  0014DA                     i2u104_40:
  2120  0014DA  BE44               	btfsc	_sensorValue+3,7,c
  2121  0014DC  D024               	goto	i2l1540
  2122  0014DE  5044               	movf	_sensorValue+3,w,c
  2123  0014E0  E104               	bnz	i2u105_40
  2124  0014E2  0E65               	movlw	101
  2125  0014E4  5C43               	subwf	_sensorValue+2,w,c
  2126  0014E6  A0D8               	btfss	status,0,c
  2127  0014E8  D01E               	goto	i2l1540
  2128  0014EA                     i2u105_40:
  2129  0014EA  BE46               	btfsc	_sensorValue+5,7,c
  2130  0014EC  D006               	goto	i2l1532
  2131  0014EE  0EA5               	movlw	165
  2132  0014F0  5C45               	subwf	_sensorValue+4,w,c
  2133  0014F2  0E01               	movlw	1
  2134  0014F4  5846               	subwfb	_sensorValue+5,w,c
  2135  0014F6  B0D8               	btfsc	status,0,c
  2136  0014F8  D008               	goto	i2l1534
  2137  0014FA                     i2l1532:
  2138  0014FA  BE48               	btfsc	_sensorValue+7,7,c
  2139  0014FC  D014               	goto	i2l1540
  2140  0014FE  0EA5               	movlw	165
  2141  001500  5C47               	subwf	_sensorValue+6,w,c
  2142  001502  0E01               	movlw	1
  2143  001504  5848               	subwfb	_sensorValue+7,w,c
  2144  001506  A0D8               	btfss	status,0,c
  2145  001508  D00E               	goto	i2l1540
  2146  00150A                     i2l1534:
  2147  00150A  BE52               	btfsc	_RotateCounter+1,7,c
  2148  00150C  D005               	goto	i2l1536
  2149  00150E  5052               	movf	_RotateCounter+1,w,c
  2150  001510  E10A               	bnz	i2l1540
  2151  001512  0451               	decf	_RotateCounter,w,c
  2152  001514  B0D8               	btfsc	status,0,c
  2153  001516  D007               	goto	i2l1540
  2154  001518                     i2l1536:
  2155                           
  2156                           ;interrupts.c: 127: {
  2157                           ;interrupts.c: 128: RotateCounter = 167*2;
  2158  001518  0E01               	movlw	1
  2159  00151A  6E52               	movwf	_RotateCounter+1,c
  2160  00151C  0E4E               	movlw	78
  2161  00151E  6E51               	movwf	_RotateCounter,c
  2162                           
  2163                           ;interrupts.c: 129: rotate();
  2164  001520  EC10  F00C         	call	_rotate	;wreg free
  2165  001524  D000               	goto	i2l1540
  2166  001526                     i2l1540:
  2167                           
  2168                           ;interrupts.c: 130: }
  2169                           ;interrupts.c: 131: moveMouse(merge(LMotorCounter,RMotorCounter));
  2170  001526  C056  F012         	movff	_RMotorCounter,merge@right
  2171  00152A  5055               	movf	_LMotorCounter,w,c
  2172  00152C  ECCB  F00C         	call	_merge
  2173  001530  ECD8  F00C         	call	_moveMouse
  2174                           
  2175                           ;interrupts.c: 132: MotorDelayCounter = 0;
  2176  001534  0E00               	movlw	0
  2177  001536  6E4C               	movwf	_MotorDelayCounter+1,c
  2178  001538  0E00               	movlw	0
  2179  00153A  6E4B               	movwf	_MotorDelayCounter,c
  2180  00153C  D000               	goto	i2l1542
  2181  00153E                     i2l1542:
  2182                           
  2183                           ;interrupts.c: 133: }
  2184                           ;interrupts.c: 135: MotorDelayCounter++;
  2185  00153E  4A4B               	infsnz	_MotorDelayCounter,f,c
  2186  001540  2A4C               	incf	_MotorDelayCounter+1,f,c
  2187                           
  2188                           ;interrupts.c: 136: INTCONbits.TMR0IF = 0;
  2189  001542  94F2               	bcf	intcon,2,c	;volatile
  2190  001544  D000               	goto	i2l60
  2191  001546                     i2l60:
  2192  001546  C027  FFF5         	movff	??_high_isr+13,tablat
  2193  00154A  C026  FFF8         	movff	??_high_isr+12,tblptru
  2194  00154E  C025  FFF7         	movff	??_high_isr+11,tblptrh
  2195  001552  C024  FFF6         	movff	??_high_isr+10,tblptrl
  2196  001556  C023  FFF4         	movff	??_high_isr+9,prodh
  2197  00155A  C022  FFF3         	movff	??_high_isr+8,prodl
  2198  00155E  C021  FFDA         	movff	??_high_isr+7,fsr2h
  2199  001562  C020  FFD9         	movff	??_high_isr+6,fsr2l
  2200  001566  C01F  FFE2         	movff	??_high_isr+5,fsr1h
  2201  00156A  C01E  FFE1         	movff	??_high_isr+4,fsr1l
  2202  00156E  C01D  FFEA         	movff	??_high_isr+3,fsr0h
  2203  001572  C01C  FFE9         	movff	??_high_isr+2,fsr0l
  2204  001576  C01B  FFFB         	movff	??_high_isr+1,pclatu
  2205  00157A  C01A  FFFA         	movff	??_high_isr,pclath
  2206  00157E  0011               	retfie		f
  2207  001580                     __end_of_high_isr:
  2208                           	opt stack 0
  2209                           pclatu	equ	0xFFB
  2210                           pclath	equ	0xFFA
  2211                           tblptru	equ	0xFF8
  2212                           tblptrh	equ	0xFF7
  2213                           tblptrl	equ	0xFF6
  2214                           tablat	equ	0xFF5
  2215                           prodh	equ	0xFF4
  2216                           prodl	equ	0xFF3
  2217                           intcon	equ	0xFF2
  2218                           intcon2	equ	0xFF1
  2219                           postinc0	equ	0xFEE
  2220                           fsr0h	equ	0xFEA
  2221                           fsr0l	equ	0xFE9
  2222                           wreg	equ	0xFE8
  2223                           fsr1h	equ	0xFE2
  2224                           fsr1l	equ	0xFE1
  2225                           bsr	equ	0xFE0
  2226                           postinc2	equ	0xFDE
  2227                           postdec2	equ	0xFDD
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _rotate *****************
  2233 ;; Defined at:
  2234 ;;		line 282 in file "interrupts.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;		None               void
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;Total ram usage:        0 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    1
  2255 ;; This function calls:
  2256 ;;		_motorCounterUpdate
  2257 ;; This function is called by:
  2258 ;;		_high_isr
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text13
  2263  001820                     __ptext13:
  2264                           	opt stack 0
  2265  001820                     _rotate:
  2266                           	opt stack 24
  2267                           
  2268                           ;interrupts.c: 284: if (algorithm == LEFTWALL){
  2269                           
  2270                           ;incstack = 0
  2271  001820  5057               	movf	_algorithm,w,c
  2272  001822  A4D8               	btfss	status,2,c
  2273  001824  D00B               	goto	i2l1400
  2274                           
  2275                           ;interrupts.c: 285: motorCounterUpdate(RIGHT,0);
  2276  001826  0E00               	movlw	0
  2277  001828  6E12               	movwf	motorCounterUpdate@reverse,c
  2278  00182A  0E01               	movlw	1
  2279  00182C  ECC0  F00A         	call	_motorCounterUpdate
  2280                           
  2281                           ;interrupts.c: 286: motorCounterUpdate(LEFT,1);
  2282  001830  0E01               	movlw	1
  2283  001832  6E12               	movwf	motorCounterUpdate@reverse,c
  2284  001834  0E00               	movlw	0
  2285  001836  ECC0  F00A         	call	_motorCounterUpdate
  2286                           
  2287                           ;interrupts.c: 287: } else {
  2288  00183A  D00B               	goto	i2l1402
  2289  00183C                     i2l1400:
  2290                           
  2291                           ;interrupts.c: 288: motorCounterUpdate(LEFT,0);
  2292  00183C  0E00               	movlw	0
  2293  00183E  6E12               	movwf	motorCounterUpdate@reverse,c
  2294  001840  0E00               	movlw	0
  2295  001842  ECC0  F00A         	call	_motorCounterUpdate
  2296                           
  2297                           ;interrupts.c: 289: motorCounterUpdate(RIGHT,1);
  2298  001846  0E01               	movlw	1
  2299  001848  6E12               	movwf	motorCounterUpdate@reverse,c
  2300  00184A  0E01               	movlw	1
  2301  00184C  ECC0  F00A         	call	_motorCounterUpdate
  2302  001850  D000               	goto	i2l1402
  2303  001852                     i2l1402:
  2304                           
  2305                           ;interrupts.c: 290: }
  2306                           ;interrupts.c: 291: RotateCounter--;
  2307  001852  0651               	decf	_RotateCounter,f,c
  2308  001854  A0D8               	btfss	status,0,c
  2309  001856  0652               	decf	_RotateCounter+1,f,c
  2310  001858  0012               	return		;funcret
  2311  00185A                     __end_of_rotate:
  2312                           	opt stack 0
  2313                           pclatu	equ	0xFFB
  2314                           pclath	equ	0xFFA
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           intcon	equ	0xFF2
  2322                           intcon2	equ	0xFF1
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           fsr1h	equ	0xFE2
  2328                           fsr1l	equ	0xFE1
  2329                           bsr	equ	0xFE0
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8
  2335                           
  2336 ;; *************** function _Reversing *****************
  2337 ;; Defined at:
  2338 ;;		line 306 in file "interrupts.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;		None
  2343 ;; Return value:  Size  Location     Type
  2344 ;;		None               void
  2345 ;; Registers used:
  2346 ;;		wreg, status,2, status,0, cstack
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;Total ram usage:        0 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    1
  2359 ;; This function calls:
  2360 ;;		_motorCounterUpdate
  2361 ;; This function is called by:
  2362 ;;		_high_isr
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text14
  2367  00194C                     __ptext14:
  2368                           	opt stack 0
  2369  00194C                     _Reversing:
  2370                           	opt stack 24
  2371                           
  2372                           ;interrupts.c: 308: motorCounterUpdate(RIGHT,1);
  2373                           
  2374                           ;incstack = 0
  2375  00194C  0E01               	movlw	1
  2376  00194E  6E12               	movwf	motorCounterUpdate@reverse,c
  2377  001950  0E01               	movlw	1
  2378  001952  ECC0  F00A         	call	_motorCounterUpdate
  2379                           
  2380                           ;interrupts.c: 309: motorCounterUpdate(LEFT,1);
  2381  001956  0E01               	movlw	1
  2382  001958  6E12               	movwf	motorCounterUpdate@reverse,c
  2383  00195A  0E00               	movlw	0
  2384  00195C  ECC0  F00A         	call	_motorCounterUpdate
  2385                           
  2386                           ;interrupts.c: 310: ReverseCounter--;
  2387  001960  064F               	decf	_ReverseCounter,f,c
  2388  001962  A0D8               	btfss	status,0,c
  2389  001964  0650               	decf	_ReverseCounter+1,f,c
  2390  001966  0012               	return		;funcret
  2391  001968                     __end_of_Reversing:
  2392                           	opt stack 0
  2393                           pclatu	equ	0xFFB
  2394                           pclath	equ	0xFFA
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           intcon	equ	0xFF2
  2402                           intcon2	equ	0xFF1
  2403                           postinc0	equ	0xFEE
  2404                           fsr0h	equ	0xFEA
  2405                           fsr0l	equ	0xFE9
  2406                           wreg	equ	0xFE8
  2407                           fsr1h	equ	0xFE2
  2408                           fsr1l	equ	0xFE1
  2409                           bsr	equ	0xFE0
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function _KController *****************
  2417 ;; Defined at:
  2418 ;;		line 247 in file "interrupts.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  diff            2   23[COMRAM] int 
  2423 ;;  correctTo       1   22[COMRAM] enum E4082
  2424 ;; Return value:  Size  Location     Type
  2425 ;;		None               void
  2426 ;; Registers used:
  2427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;Total ram usage:        5 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    1
  2440 ;; This function calls:
  2441 ;;		_ABS
  2442 ;;		_merge
  2443 ;;		_motorCounterUpdate
  2444 ;;		_moveMouse
  2445 ;; This function is called by:
  2446 ;;		_high_isr
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text15
  2451  001674                     __ptext15:
  2452                           	opt stack 0
  2453  001674                     _KController:
  2454                           	opt stack 24
  2455                           
  2456                           ;interrupts.c: 249: Side correctTo;
  2457                           ;interrupts.c: 250: int diff = ABS(sensorValue[0] - sensorValue[1]);
  2458                           
  2459                           ;incstack = 0
  2460  001674  EE20  F043         	lfsr	2,_sensorValue+2
  2461  001678  CFDE F015          	movff	postinc2,??_KController
  2462  00167C  CFDD F016          	movff	postdec2,??_KController+1
  2463  001680  1E15               	comf	??_KController,f,c
  2464  001682  1E16               	comf	??_KController+1,f,c
  2465  001684  4A15               	infsnz	??_KController,f,c
  2466  001686  2A16               	incf	??_KController+1,f,c
  2467  001688  5041               	movf	_sensorValue,w,c
  2468  00168A  2415               	addwf	??_KController,w,c
  2469  00168C  6E12               	movwf	ABS@x,c
  2470  00168E  5042               	movf	_sensorValue+1,w,c
  2471  001690  2016               	addwfc	??_KController+1,w,c
  2472  001692  6E13               	movwf	ABS@x+1,c
  2473  001694  ECB4  F00C         	call	_ABS	;wreg free
  2474  001698  C012  F018         	movff	?_ABS,KController@diff
  2475  00169C  C013  F019         	movff	?_ABS+1,KController@diff+1
  2476                           
  2477                           ;interrupts.c: 253: if(controllerSteps > 0)
  2478  0016A0  5058               	movf	_controllerSteps,w,c
  2479  0016A2  B4D8               	btfsc	status,2,c
  2480  0016A4  D00C               	goto	i2l1414
  2481                           
  2482                           ;interrupts.c: 254: {
  2483                           ;interrupts.c: 255: motorCounterUpdate(RIGHT,0);
  2484  0016A6  0E00               	movlw	0
  2485  0016A8  6E12               	movwf	motorCounterUpdate@reverse,c
  2486  0016AA  0E01               	movlw	1
  2487  0016AC  ECC0  F00A         	call	_motorCounterUpdate
  2488                           
  2489                           ;interrupts.c: 256: motorCounterUpdate(LEFT,0);
  2490  0016B0  0E00               	movlw	0
  2491  0016B2  6E12               	movwf	motorCounterUpdate@reverse,c
  2492  0016B4  0E00               	movlw	0
  2493  0016B6  ECC0  F00A         	call	_motorCounterUpdate
  2494                           
  2495                           ;interrupts.c: 257: controllerSteps--;
  2496  0016BA  0658               	decf	_controllerSteps,f,c
  2497                           
  2498                           ;interrupts.c: 258: return;
  2499  0016BC  D047               	goto	i2l115
  2500  0016BE                     i2l1414:
  2501                           
  2502                           ;interrupts.c: 259: }
  2503                           ;interrupts.c: 261: if(sensorValue[0] > sensorValue[1])
  2504  0016BE  5041               	movf	_sensorValue,w,c
  2505  0016C0  5C43               	subwf	_sensorValue+2,w,c
  2506  0016C2  5044               	movf	_sensorValue+3,w,c
  2507  0016C4  0A80               	xorlw	128
  2508  0016C6  6E15               	movwf	??_KController& (0+255),c
  2509  0016C8  5042               	movf	_sensorValue+1,w,c
  2510  0016CA  0A80               	xorlw	128
  2511  0016CC  5815               	subwfb	??_KController& (0+255),w,c
  2512  0016CE  B0D8               	btfsc	status,0,c
  2513  0016D0  D00F               	goto	i2l1422
  2514                           
  2515                           ;interrupts.c: 262: {
  2516                           ;interrupts.c: 263: correctTo = LEFT;
  2517  0016D2  0E00               	movlw	0
  2518  0016D4  6E17               	movwf	KController@correctTo,c
  2519                           
  2520                           ;interrupts.c: 264: motorCounterUpdate(correctTo,0);
  2521  0016D6  0E00               	movlw	0
  2522  0016D8  6E12               	movwf	motorCounterUpdate@reverse,c
  2523  0016DA  5017               	movf	KController@correctTo,w,c
  2524  0016DC  ECC0  F00A         	call	_motorCounterUpdate
  2525                           
  2526                           ;interrupts.c: 265: moveMouse(merge(LMotorCounter,RMotorCounter));
  2527  0016E0  C056  F012         	movff	_RMotorCounter,merge@right
  2528  0016E4  5055               	movf	_LMotorCounter,w,c
  2529  0016E6  ECCB  F00C         	call	_merge
  2530  0016EA  ECD8  F00C         	call	_moveMouse
  2531                           
  2532                           ;interrupts.c: 266: }
  2533  0016EE  D00F               	goto	i2l1428
  2534  0016F0                     i2l1422:
  2535                           
  2536                           ;interrupts.c: 267: else
  2537                           ;interrupts.c: 268: {
  2538                           ;interrupts.c: 269: correctTo = RIGHT;
  2539  0016F0  0E01               	movlw	1
  2540  0016F2  6E17               	movwf	KController@correctTo,c
  2541                           
  2542                           ;interrupts.c: 270: motorCounterUpdate(correctTo,0);
  2543  0016F4  0E00               	movlw	0
  2544  0016F6  6E12               	movwf	motorCounterUpdate@reverse,c
  2545  0016F8  5017               	movf	KController@correctTo,w,c
  2546  0016FA  ECC0  F00A         	call	_motorCounterUpdate
  2547                           
  2548                           ;interrupts.c: 271: moveMouse(merge(LMotorCounter,RMotorCounter));
  2549  0016FE  C056  F012         	movff	_RMotorCounter,merge@right
  2550  001702  5055               	movf	_LMotorCounter,w,c
  2551  001704  ECCB  F00C         	call	_merge
  2552  001708  ECD8  F00C         	call	_moveMouse
  2553  00170C  D000               	goto	i2l1428
  2554  00170E                     i2l1428:
  2555                           
  2556                           ;interrupts.c: 272: }
  2557                           ;interrupts.c: 274: if(diff > 150)
  2558  00170E  BE19               	btfsc	KController@diff+1,7,c
  2559  001710  D008               	goto	i2l1432
  2560  001712  5019               	movf	KController@diff+1,w,c
  2561  001714  E104               	bnz	i2u83_40
  2562  001716  0E97               	movlw	151
  2563  001718  5C18               	subwf	KController@diff,w,c
  2564  00171A  A0D8               	btfss	status,0,c
  2565  00171C  D002               	goto	i2l1432
  2566  00171E                     i2u83_40:
  2567                           
  2568                           ;interrupts.c: 275: controllerSteps = 1;
  2569  00171E  0E01               	movlw	1
  2570  001720  D013               	goto	L7
  2571  001722                     i2l1432:
  2572                           
  2573                           ;interrupts.c: 276: else if(diff <= 150 && diff > 30)
  2574  001722  BE19               	btfsc	KController@diff+1,7,c
  2575  001724  D006               	goto	i2l1434
  2576  001726  5019               	movf	KController@diff+1,w,c
  2577  001728  E10E               	bnz	i2l1438
  2578  00172A  0E97               	movlw	151
  2579  00172C  5C18               	subwf	KController@diff,w,c
  2580  00172E  B0D8               	btfsc	status,0,c
  2581  001730  D00A               	goto	i2l1438
  2582  001732                     i2l1434:
  2583  001732  BE19               	btfsc	KController@diff+1,7,c
  2584  001734  D008               	goto	i2l1438
  2585  001736  5019               	movf	KController@diff+1,w,c
  2586  001738  E104               	bnz	i2u85_40
  2587  00173A  0E1F               	movlw	31
  2588  00173C  5C18               	subwf	KController@diff,w,c
  2589  00173E  A0D8               	btfss	status,0,c
  2590  001740  D002               	goto	i2l1438
  2591  001742                     i2u85_40:
  2592                           
  2593                           ;interrupts.c: 277: controllerSteps = 4;
  2594  001742  0E04               	movlw	4
  2595  001744  D001               	goto	L7
  2596  001746                     i2l1438:
  2597                           
  2598                           ;interrupts.c: 278: else
  2599                           ;interrupts.c: 279: controllerSteps = 8;
  2600  001746  0E08               	movlw	8
  2601  001748                     L7:
  2602  001748  6E58               	movwf	_controllerSteps,c
  2603  00174A  D000               	goto	i2l115
  2604  00174C                     i2l115:
  2605  00174C  0012               	return		;funcret
  2606  00174E                     __end_of_KController:
  2607                           	opt stack 0
  2608                           pclatu	equ	0xFFB
  2609                           pclath	equ	0xFFA
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           intcon2	equ	0xFF1
  2618                           postinc0	equ	0xFEE
  2619                           fsr0h	equ	0xFEA
  2620                           fsr0l	equ	0xFE9
  2621                           wreg	equ	0xFE8
  2622                           fsr1h	equ	0xFE2
  2623                           fsr1l	equ	0xFE1
  2624                           bsr	equ	0xFE0
  2625                           postinc2	equ	0xFDE
  2626                           postdec2	equ	0xFDD
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _moveMouse *****************
  2632 ;; Defined at:
  2633 ;;		line 234 in file "interrupts.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  action          1    wreg     unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  action          1   17[COMRAM] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;		None               void
  2640 ;; Registers used:
  2641 ;;		wreg
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;Total ram usage:        1 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_high_isr
  2657 ;;		_KController
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text16
  2662  0019B0                     __ptext16:
  2663                           	opt stack 0
  2664  0019B0                     _moveMouse:
  2665                           	opt stack 25
  2666                           
  2667                           ;incstack = 0
  2668                           ;moveMouse@action stored from wreg
  2669  0019B0  6E12               	movwf	moveMouse@action,c
  2670                           
  2671                           ;interrupts.c: 236: LATC = action;
  2672  0019B2  C012  FF8B         	movff	moveMouse@action,3979	;volatile
  2673  0019B6  0012               	return		;funcret
  2674  0019B8                     __end_of_moveMouse:
  2675                           	opt stack 0
  2676                           pclatu	equ	0xFFB
  2677                           pclath	equ	0xFFA
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon	equ	0xFF2
  2685                           intcon2	equ	0xFF1
  2686                           postinc0	equ	0xFEE
  2687                           fsr0h	equ	0xFEA
  2688                           fsr0l	equ	0xFE9
  2689                           wreg	equ	0xFE8
  2690                           fsr1h	equ	0xFE2
  2691                           fsr1l	equ	0xFE1
  2692                           bsr	equ	0xFE0
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _motorCounterUpdate *****************
  2700 ;; Defined at:
  2701 ;;		line 182 in file "interrupts.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  side            1    wreg     enum E4082
  2704 ;;  reverse         1   17[COMRAM] unsigned char 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  side            1   18[COMRAM] enum E4082
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2716 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;Total ram usage:        2 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_KController
  2726 ;;		_rotate
  2727 ;;		_Reversing
  2728 ;;		_smoothTurn
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text17
  2733  001580                     __ptext17:
  2734                           	opt stack 0
  2735  001580                     _motorCounterUpdate:
  2736                           	opt stack 24
  2737                           
  2738                           ;incstack = 0
  2739                           ;motorCounterUpdate@side stored from wreg
  2740  001580  6E13               	movwf	motorCounterUpdate@side,c
  2741                           
  2742                           ;interrupts.c: 184: if(side == LEFT && reverse == 1)
  2743  001582  5013               	movf	motorCounterUpdate@side,w,c
  2744  001584  A4D8               	btfss	status,2,c
  2745  001586  D01B               	goto	i2l1294
  2746  001588  0412               	decf	motorCounterUpdate@reverse,w,c
  2747  00158A  B4D8               	btfsc	status,2,c
  2748  00158C  D00B               	goto	i2l1292
  2749  00158E  D017               	goto	i2l1294
  2750                           
  2751                           ;interrupts.c: 185: {
  2752                           ;interrupts.c: 186: switch(LMotorCounter)
  2753  001590  D009               	goto	i2l1292
  2754  001592                     i2l1282:
  2755  001592  0E02               	movlw	2
  2756  001594  D004               	goto	L10
  2757  001596                     i2l1284:
  2758  001596  0E04               	movlw	4
  2759  001598  D002               	goto	L10
  2760                           
  2761                           ;interrupts.c: 190: case 0b00000100: LMotorCounter = 0b00001000; break;
  2762  00159A  D03E               	goto	i2l1326
  2763                           
  2764                           ;interrupts.c: 191: case 0b00001000: LMotorCounter = 0b00000001; break;
  2765  00159C  D039               	goto	i2l1320
  2766  00159E                     L10:
  2767  00159E  6E55               	movwf	_LMotorCounter,c
  2768  0015A0  D068               	goto	i2l101
  2769                           
  2770                           ;interrupts.c: 192: default: LMotorCounter = 0b00000001;
  2771  0015A2  D036               	goto	i2l1320
  2772  0015A4                     i2l1292:
  2773  0015A4  5055               	movf	_LMotorCounter,w,c
  2774                           
  2775                           ; Switch size 1, requested type "space"
  2776                           ; Number of cases is 4, Range of values is 1 to 8
  2777                           ; switch strategies available:
  2778                           ; Name         Instructions Cycles
  2779                           ; simple_byte           13     7 (average)
  2780                           ;	Chosen strategy is simple_byte
  2781  0015A6  0A01               	xorlw	1	; case 1
  2782  0015A8  B4D8               	btfsc	status,2,c
  2783  0015AA  D7F3               	goto	i2l1282
  2784  0015AC  0A03               	xorlw	3	; case 2
  2785  0015AE  B4D8               	btfsc	status,2,c
  2786  0015B0  D7F2               	goto	i2l1284
  2787  0015B2  0A06               	xorlw	6	; case 4
  2788  0015B4  B4D8               	btfsc	status,2,c
  2789  0015B6  D030               	goto	i2l1326
  2790  0015B8  0A0C               	xorlw	12	; case 8
  2791  0015BA  D02A               	goto	i2l1320
  2792                           
  2793                           ;interrupts.c: 194: } else if(side == RIGHT && reverse == 1)
  2794  0015BC  D05A               	goto	i2l101
  2795  0015BE                     i2l1294:
  2796  0015BE  0413               	decf	motorCounterUpdate@side,w,c
  2797  0015C0  A4D8               	btfss	status,2,c
  2798  0015C2  D01D               	goto	i2l1312
  2799  0015C4  0412               	decf	motorCounterUpdate@reverse,w,c
  2800  0015C6  B4D8               	btfsc	status,2,c
  2801  0015C8  D00B               	goto	i2l1310
  2802  0015CA  D019               	goto	i2l1312
  2803                           
  2804                           ;interrupts.c: 195: {
  2805                           ;interrupts.c: 196: switch(RMotorCounter)
  2806  0015CC  D009               	goto	i2l1310
  2807  0015CE                     i2l1300:
  2808  0015CE  0E08               	movlw	8
  2809  0015D0  D040               	goto	L18
  2810  0015D2                     i2l1302:
  2811  0015D2  0E01               	movlw	1
  2812  0015D4  D03E               	goto	L18
  2813  0015D6                     i2l1304:
  2814  0015D6  0E02               	movlw	2
  2815  0015D8  D03C               	goto	L18
  2816  0015DA                     i2l1306:
  2817  0015DA  0E04               	movlw	4
  2818  0015DC  D03A               	goto	L18
  2819                           
  2820                           ;interrupts.c: 202: default: RMotorCounter = 0b00001000;
  2821  0015DE  D7F7               	goto	i2l1300
  2822  0015E0                     i2l1310:
  2823  0015E0  5056               	movf	_RMotorCounter,w,c
  2824                           
  2825                           ; Switch size 1, requested type "space"
  2826                           ; Number of cases is 4, Range of values is 1 to 8
  2827                           ; switch strategies available:
  2828                           ; Name         Instructions Cycles
  2829                           ; simple_byte           13     7 (average)
  2830                           ;	Chosen strategy is simple_byte
  2831  0015E2  0A01               	xorlw	1	; case 1
  2832  0015E4  B4D8               	btfsc	status,2,c
  2833  0015E6  D7F3               	goto	i2l1300
  2834  0015E8  0A03               	xorlw	3	; case 2
  2835  0015EA  B4D8               	btfsc	status,2,c
  2836  0015EC  D7F2               	goto	i2l1302
  2837  0015EE  0A06               	xorlw	6	; case 4
  2838  0015F0  B4D8               	btfsc	status,2,c
  2839  0015F2  D7F1               	goto	i2l1304
  2840  0015F4  0A0C               	xorlw	12	; case 8
  2841  0015F6  B4D8               	btfsc	status,2,c
  2842  0015F8  D7F0               	goto	i2l1306
  2843  0015FA  D7E9               	goto	i2l1300
  2844                           
  2845                           ;interrupts.c: 204: } else if(side == LEFT && reverse == 0)
  2846  0015FC  D03A               	goto	i2l101
  2847  0015FE                     i2l1312:
  2848  0015FE  5013               	movf	motorCounterUpdate@side,w,c
  2849  001600  A4D8               	btfss	status,2,c
  2850  001602  D01B               	goto	i2l1330
  2851  001604  5012               	movf	motorCounterUpdate@reverse,w,c
  2852  001606  B4D8               	btfsc	status,2,c
  2853  001608  D009               	goto	i2l1328
  2854  00160A  D017               	goto	i2l1330
  2855                           
  2856                           ;interrupts.c: 205: {
  2857                           ;interrupts.c: 206: switch(LMotorCounter)
  2858  00160C  D007               	goto	i2l1328
  2859                           
  2860                           ;interrupts.c: 207: {
  2861                           ;interrupts.c: 208: case 0b00000001: LMotorCounter = 0b00001000; break;
  2862  00160E  D004               	goto	i2l1326
  2863  001610                     i2l1320:
  2864  001610  0E01               	movlw	1
  2865  001612  D7C5               	goto	L10
  2866                           
  2867                           ;interrupts.c: 210: case 0b00000100: LMotorCounter = 0b00000010; break;
  2868  001614  D7BE               	goto	i2l1282
  2869                           
  2870                           ;interrupts.c: 211: case 0b00001000: LMotorCounter = 0b00000100; break;
  2871  001616  D7BF               	goto	i2l1284
  2872  001618                     i2l1326:
  2873  001618  0E08               	movlw	8
  2874  00161A  D7C1               	goto	L10
  2875  00161C                     i2l1328:
  2876  00161C  5055               	movf	_LMotorCounter,w,c
  2877                           
  2878                           ; Switch size 1, requested type "space"
  2879                           ; Number of cases is 4, Range of values is 1 to 8
  2880                           ; switch strategies available:
  2881                           ; Name         Instructions Cycles
  2882                           ; simple_byte           13     7 (average)
  2883                           ;	Chosen strategy is simple_byte
  2884  00161E  0A01               	xorlw	1	; case 1
  2885  001620  B4D8               	btfsc	status,2,c
  2886  001622  D7FA               	goto	i2l1326
  2887  001624  0A03               	xorlw	3	; case 2
  2888  001626  B4D8               	btfsc	status,2,c
  2889  001628  D7F3               	goto	i2l1320
  2890  00162A  0A06               	xorlw	6	; case 4
  2891  00162C  B4D8               	btfsc	status,2,c
  2892  00162E  D7B1               	goto	i2l1282
  2893  001630  0A0C               	xorlw	12	; case 8
  2894  001632  B4D8               	btfsc	status,2,c
  2895  001634  D7B0               	goto	i2l1284
  2896  001636  D7F0               	goto	i2l1326
  2897                           
  2898                           ;interrupts.c: 214: } else if(side == RIGHT && reverse == 0)
  2899  001638  D01C               	goto	i2l101
  2900  00163A                     i2l1330:
  2901  00163A  0413               	decf	motorCounterUpdate@side,w,c
  2902  00163C  A4D8               	btfss	status,2,c
  2903  00163E  D019               	goto	i2l101
  2904  001640  5012               	movf	motorCounterUpdate@reverse,w,c
  2905  001642  B4D8               	btfsc	status,2,c
  2906  001644  D009               	goto	i2l1346
  2907  001646  D015               	goto	i2l101
  2908                           
  2909                           ;interrupts.c: 215: {
  2910                           ;interrupts.c: 216: switch(RMotorCounter)
  2911  001648  D007               	goto	i2l1346
  2912                           
  2913                           ;interrupts.c: 217: {
  2914                           ;interrupts.c: 218: case 0b00000001: RMotorCounter = 0b00000010; break;
  2915  00164A  D7C5               	goto	i2l1304
  2916                           
  2917                           ;interrupts.c: 219: case 0b00000010: RMotorCounter = 0b00000100; break;
  2918  00164C  D7C6               	goto	i2l1306
  2919                           
  2920                           ;interrupts.c: 220: case 0b00000100: RMotorCounter = 0b00001000; break;
  2921  00164E  D7BF               	goto	i2l1300
  2922                           
  2923                           ;interrupts.c: 221: case 0b00001000: RMotorCounter = 0b00000001; break;
  2924  001650  D7C0               	goto	i2l1302
  2925  001652                     L18:
  2926  001652  6E56               	movwf	_RMotorCounter,c
  2927  001654  D00E               	goto	i2l101
  2928                           
  2929                           ;interrupts.c: 222: default: RMotorCounter = 0b00000001;
  2930  001656  D7BD               	goto	i2l1302
  2931  001658                     i2l1346:
  2932  001658  5056               	movf	_RMotorCounter,w,c
  2933                           
  2934                           ; Switch size 1, requested type "space"
  2935                           ; Number of cases is 4, Range of values is 1 to 8
  2936                           ; switch strategies available:
  2937                           ; Name         Instructions Cycles
  2938                           ; simple_byte           13     7 (average)
  2939                           ;	Chosen strategy is simple_byte
  2940  00165A  0A01               	xorlw	1	; case 1
  2941  00165C  B4D8               	btfsc	status,2,c
  2942  00165E  D7BB               	goto	i2l1304
  2943  001660  0A03               	xorlw	3	; case 2
  2944  001662  B4D8               	btfsc	status,2,c
  2945  001664  D7BA               	goto	i2l1306
  2946  001666  0A06               	xorlw	6	; case 4
  2947  001668  B4D8               	btfsc	status,2,c
  2948  00166A  D7B1               	goto	i2l1300
  2949  00166C  0A0C               	xorlw	12	; case 8
  2950  00166E  D7B1               	goto	i2l1302
  2951  001670  D000               	goto	i2l101
  2952  001672                     i2l101:
  2953  001672  0012               	return		;funcret
  2954  001674                     __end_of_motorCounterUpdate:
  2955                           	opt stack 0
  2956                           pclatu	equ	0xFFB
  2957                           pclath	equ	0xFFA
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           intcon	equ	0xFF2
  2965                           intcon2	equ	0xFF1
  2966                           postinc0	equ	0xFEE
  2967                           fsr0h	equ	0xFEA
  2968                           fsr0l	equ	0xFE9
  2969                           wreg	equ	0xFE8
  2970                           fsr1h	equ	0xFE2
  2971                           fsr1l	equ	0xFE1
  2972                           bsr	equ	0xFE0
  2973                           postinc2	equ	0xFDE
  2974                           postdec2	equ	0xFDD
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _merge *****************
  2980 ;; Defined at:
  2981 ;;		line 227 in file "interrupts.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  left            1    wreg     unsigned char 
  2984 ;;  right           1   17[COMRAM] unsigned char 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  left            1   18[COMRAM] unsigned char 
  2987 ;;  merged          1   19[COMRAM] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      unsigned char 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        3 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_high_isr
  3007 ;;		_KController
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text18
  3012  001996                     __ptext18:
  3013                           	opt stack 0
  3014  001996                     _merge:
  3015                           	opt stack 25
  3016                           
  3017                           ;incstack = 0
  3018                           ;merge@left stored from wreg
  3019  001996  6E13               	movwf	merge@left,c
  3020                           
  3021                           ;interrupts.c: 229: unsigned char merged;
  3022                           ;interrupts.c: 230: merged = left + (right << 4);
  3023  001998  3812               	swapf	merge@right,w,c
  3024  00199A  0BF0               	andlw	240
  3025  00199C  2413               	addwf	merge@left,w,c
  3026  00199E  6E14               	movwf	merge@merged,c
  3027                           
  3028                           ;interrupts.c: 231: return merged;
  3029  0019A0  5014               	movf	merge@merged,w,c
  3030  0019A2  D000               	goto	i2l104
  3031  0019A4                     i2l104:
  3032  0019A4  0012               	return		;funcret
  3033  0019A6                     __end_of_merge:
  3034                           	opt stack 0
  3035                           pclatu	equ	0xFFB
  3036                           pclath	equ	0xFFA
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           intcon	equ	0xFF2
  3044                           intcon2	equ	0xFF1
  3045                           postinc0	equ	0xFEE
  3046                           fsr0h	equ	0xFEA
  3047                           fsr0l	equ	0xFE9
  3048                           wreg	equ	0xFE8
  3049                           fsr1h	equ	0xFE2
  3050                           fsr1l	equ	0xFE1
  3051                           bsr	equ	0xFE0
  3052                           postinc2	equ	0xFDE
  3053                           postdec2	equ	0xFDD
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058 ;; *************** function _ABS *****************
  3059 ;; Defined at:
  3060 ;;		line 240 in file "interrupts.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  x               2   17[COMRAM] int 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;		None
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  2   17[COMRAM] int 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_KController
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text19
  3088  001968                     __ptext19:
  3089                           	opt stack 0
  3090  001968                     _ABS:
  3091                           	opt stack 24
  3092                           
  3093                           ;interrupts.c: 242: if(x<0) x = -x;
  3094                           
  3095                           ;incstack = 0
  3096  001968  AE13               	btfss	ABS@x+1,7,c
  3097  00196A  D005               	goto	i2l1352
  3098  00196C  6C12               	negf	ABS@x,c
  3099  00196E  1E13               	comf	ABS@x+1,f,c
  3100  001970  B0D8               	btfsc	status,0,c
  3101  001972  2A13               	incf	ABS@x+1,f,c
  3102  001974  D000               	goto	i2l1352
  3103  001976                     i2l1352:
  3104                           
  3105                           ;interrupts.c: 243: return x;
  3106  001976  C012  F012         	movff	ABS@x,?_ABS
  3107  00197A  C013  F013         	movff	ABS@x+1,?_ABS+1
  3108  00197E  D000               	goto	i2l111
  3109  001980                     i2l111:
  3110  001980  0012               	return		;funcret
  3111  001982                     __end_of_ABS:
  3112                           	opt stack 0
  3113                           pclatu	equ	0xFFB
  3114                           pclath	equ	0xFFA
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           intcon	equ	0xFF2
  3122                           intcon2	equ	0xFF1
  3123                           postinc0	equ	0xFEE
  3124                           fsr0h	equ	0xFEA
  3125                           fsr0l	equ	0xFE9
  3126                           wreg	equ	0xFE8
  3127                           fsr1h	equ	0xFE2
  3128                           fsr1l	equ	0xFE1
  3129                           bsr	equ	0xFE0
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           pclatu	equ	0xFFB
  3136                           pclath	equ	0xFFA
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           prodh	equ	0xFF4
  3142                           prodl	equ	0xFF3
  3143                           intcon	equ	0xFF2
  3144                           intcon2	equ	0xFF1
  3145                           postinc0	equ	0xFEE
  3146                           fsr0h	equ	0xFEA
  3147                           fsr0l	equ	0xFE9
  3148                           wreg	equ	0xFE8
  3149                           fsr1h	equ	0xFE2
  3150                           fsr1l	equ	0xFE1
  3151                           bsr	equ	0xFE0
  3152                           postinc2	equ	0xFDE
  3153                           postdec2	equ	0xFDD
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158                           	psect	rparam
  3159  0000                     pclatu	equ	0xFFB
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           intcon2	equ	0xFF1
  3169                           postinc0	equ	0xFEE
  3170                           fsr0h	equ	0xFEA
  3171                           fsr0l	equ	0xFE9
  3172                           wreg	equ	0xFE8
  3173                           fsr1h	equ	0xFE2
  3174                           fsr1l	equ	0xFE1
  3175                           bsr	equ	0xFE0
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64      88
    BANK0           128     90      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_merge

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3919
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        90    90      0    3819
                                              0 BANK0     90    90      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   14    12      2    2287
                                             50 COMRAM    14    12      2
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     901
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     406
                                             39 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     194
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     194
                                             45 COMRAM     5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     100
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     100
                                             39 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    3151
                                             25 COMRAM    14    14      0
                        _KController
                          _Reversing
                              _merge
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0     812
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1286
                                             20 COMRAM     5     5      0
                                _ABS
                              _merge
                 _motorCounterUpdate
                          _moveMouse
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1     812
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _merge
     _motorCounterUpdate
     _moveMouse
   _Reversing
     _motorCounterUpdate
   _merge
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      5A       5       70.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      58       1       69.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B2      34        0.0%
DATA                 0      0      B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Apr 15 19:56:55 2015

                ___awdiv@sign 002D                            bsr 000FE0           ___wmul@multiplicand 002A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_LVP$ON 000000  
                         l211 1880                           l220 1936                           l225 194A  
                         l241 106A                           l234 13EC                           l251 18FC  
                         l252 1904                           l255 1924                           l256 192C  
                         l259 18DC                           l452 17E2                           _ABS 1968  
                __CFG_CPB$OFF 000000                           _MAX 1906                           _MIN 18DE  
                __CFG_CPD$OFF 000000                           u750 1224                           u760 1240  
  __end_of_AlgorithmSelection 194C                           wreg 000FE8                          ABS@x 0012  
                        ?_ABS 0012                          ?_MAX 002E                          ?_MIN 002E  
                        MAX@a 002E                          MAX@b 0030                          MIN@a 002E  
                        MIN@b 0030                  __CFG_WDT$OFF 000000                          l1006 1944  
                        l1240 1776                          l1250 179E                          l1234 1764  
                        l1246 178C                          l1262 17C8                          l1248 1796  
                        l1266 17D8                          l1258 17BC                          l1380 137E  
                        l1604 198C                          l1358 186C                          l1374 1242  
                        l1384 138E                          l1368 1226                          l1378 129A  
                        l1570 102E                          l1590 11D0                          l1576 1052  
                        l1586 1110                          l1594 11E6                          l1588 1170  
                        l1598 11FC                          u1110 102C                          u1120 1050  
                        u1145 1078                          _LATC 000F8B                          u1197 1872  
                        i2l60 1546                          _main 1982                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 00A2  
               __CFG_IESO$OFF 000000   sensorComputation@sensorTemp 0033                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010               __end_of_InitApp 1820                         ??_ABS 0014  
                       ??_MAX 0032                         ??_MIN 0032    __size_of_sensorComputation 01E4  
                       ?_main 0001               __end_of___awdiv 17E4                         _T0CON 000FD5  
             ___awdiv@divisor 002A                         i2l101 1672                         i2l111 1980  
                       i2l104 19A4                         i2l115 174C               ___awdiv@counter 002C  
                       _TRISC 000F94           _ConfigureOscillator 19A6                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _delay 185A                         _merge 1996  
             __end_of_low_isr 00A2                         tablat 000FF5                         status 000FD8  
        ?_ConfigureOscillator 0001               __initialization 188E                  __end_of_main 1996  
                      ??_main 0041                 __activetblptr 000002                        ?_delay 0028  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_merge 0012                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0028                        i2l1300 15CE                        i2l1302 15D2  
                      i2l1310 15E0                        i2l1320 1610                        i2l1304 15D6  
                      i2l1312 15FE                        i2l1400 183C                        i2l1330 163A  
                      i2l1306 15DA                        i2l1402 1852                        i2l1326 1618  
                      i2l1422 16F0                        i2l1414 16BE                        i2l1510 1472  
                      i2l1352 1976                        i2l1328 161C                        i2l1432 1722  
                      i2l1504 1444                        i2l1346 1658                        i2l1282 1592  
                      i2l1434 1732                        i2l1514 1480                        i2l1284 1596  
                      i2l1292 15A4                        i2l1428 170E                        i2l1532 14FA  
                      i2l1524 14C4                        i2l1508 1462                        i2l1516 1486  
                      i2l1540 1526                        i2l1294 15BE                        i2l1438 1746  
                      i2l1534 150A                        i2l1526 14CA                        i2l1542 153E  
                      i2l1536 1518                        _INTCON 000FF2                        _OSCCON 000FD3  
                   ??_InitApp 002D         ??_ConfigureOscillator 0028                   merge@merged 0014  
              __CFG_XINST$OFF 000000            sensorComputation@i 003D            sensorComputation@j 003F  
            __end_of_high_isr 1580                        ___wmul 18B6                     ??___awdiv 002C  
              __CFG_STVREN$ON 000000                        delay@x 002B                        clear_0 1894  
            ___awdiv@quotient 002E                        _rotate 1820            __size_of_Reversing 001C  
                __pdataCOMRAM 0058                  __mediumconst 0000                     ??_low_isr 0001  
              _ReverseCounter 004F                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 18AC  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                  ?_KController 0001  
              __pcstackCOMRAM 0001                 __end_of_delay 188E               moveMouse@action 0012  
               __end_of_merge 19A6          KController@correctTo 0017    __end_of_motorCounterUpdate 1674  
                     ??_delay 002A                       ??_merge 0013            _AlgorithmSelection 192E  
                _LTurnCounter 0049             __end_of_Reversing 1968                    _delay_time 0053  
           _MotorDelayCounter 004B           ?_AlgorithmSelection 0001                       ?___wmul 0028  
          __size_of_moveMouse 0008                       ?_rotate 0001                       _INTCON2 000FF1  
                     _OSCTUNE 000F9B                       i2u83_40 171E                       i2u85_40 1742  
                     i2u95_40 1430                       i2u96_40 143E                       i2u97_40 1452  
        ??_AlgorithmSelection 0028                     ?_high_isr 0001                 _LMotorCounter 0055  
                     _InitApp 17E4                       __Hparam 0000                       __Lparam 0000  
                     ___awdiv 174E               __size_of___wmul 0028                  __psmallconst 1000  
                     __pcinit 188E                       __ramtop 1000                       __ptext0 1982  
                     __ptext1 100A                       __ptext2 120A                       __ptext3 18B6  
                     __ptext4 174E                       __ptext5 18DE                       __ptext6 1906  
                     __ptext7 17E4                       __ptext8 185A                       __ptext9 192E  
             __size_of_rotate 003A                  __size_of_ABS 001A                  __size_of_MAX 0028  
                __size_of_MIN 0028                       delay@ms 0028                       _low_isr 0018  
               ?_sensorUpdate 0001                    ??_high_isr 001A                __pintcode_body 13EE  
        end_of_initialization 18AC              _sensorCorrection 1001             __end_of_moveMouse 19B8  
               __Lmediumconst 0000                       int_func 13EE               _controllerSteps 0058  
        __size_of_KController 00DA                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                     _TRISBbits 000F93                     _TRISEbits 000F96  
              ??_sensorUpdate 0080   __end_of_ConfigureOscillator 19B0                  _RTurnCounter 004D  
              __end_of___wmul 18DE                 __pidataCOMRAM 19B8                __end_of_rotate 185A  
         start_initialization 188E                   __end_of_ABS 1982                   __end_of_MAX 192E  
                 __end_of_MIN 1906            _motorCounterUpdate 1580              __CFG_OSC$INTIO67 000000  
         ?_motorCounterUpdate 0012                    merge@right 0012                     _Reversing 194C  
                    ??___wmul 002C              __CFG_LPT1OSC$OFF 000000                      ??_rotate 0014  
              _sensorLocation 1005          ??_motorCounterUpdate 0013                   __pbssCOMRAM 0041  
               __pcstackBANK0 0080        sensorUpdate@sensorTemp 0086             __size_of_high_isr 1578  
                    ?_InitApp 0001             __CFG_CCP2MX$PORTC 000000                    ?_Reversing 0001  
                   _algorithm 0057                     __pintcode 0008        motorCounterUpdate@side 0013  
                    ?___awdiv 0028          __end_of_sensorUpdate 120A        __end_of_sensorLocation 1009  
    __end_of_sensorCorrection 1005                   __pintcodelo 0018                   __smallconst 1000  
                    ?_low_isr 0001                __size_of_delay 0034   __size_of_AlgorithmSelection 001E  
              __size_of_merge 0010                ___wmul@product 002C                     _moveMouse 19B0  
                    i2u100_40 1496                      i2u101_40 14A6                      i2u104_40 14DA  
                    i2u105_40 14EA              __CFG_WDTPS$32768 000000                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0028                 _RMotorCounter 0056                 ??_KController 0015  
                  ?_moveMouse 0001              __size_of_InitApp 003C                      __Hrparam 0000  
                   merge@left 0013          sensorComputation@max 0037                      __Lrparam 0000  
        sensorComputation@min 0039          sensorComputation@sum 003B                   ??_Reversing 0014  
          __CFG_BOREN$SBORDIS 000000              __size_of___awdiv 0096              __size_of_low_isr 008A  
                    __ptext10 19A6                      __ptext13 1820                      __ptext14 194C  
                    __ptext15 1674                      __ptext16 19B0                      __ptext17 1580  
                    __ptext18 1996                      __ptext19 1968                      _high_isr 0008  
               __size_of_main 0014                 _RotateCounter 0051         __size_of_sensorUpdate 0200  
__size_of_ConfigureOscillator 000A           __end_of_KController 174E             _sensorComputation 120A  
                  _INTCONbits 000FF2            ?_sensorComputation 0033                 sensorUpdate@i 00D6  
               sensorUpdate@j 00D8                  _sensorUpdate 100A                      intlevel1 0000  
                    intlevel2 0000           ??_sensorComputation 0035                   ??_moveMouse 0012  
             KController@diff 0018     __end_of_sensorComputation 13EE                   _sensorValue 0041  
 __size_of_motorCounterUpdate 00F4     motorCounterUpdate@reverse 0012                   _KController 1674  
