

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri May 01 19:25:37 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001C8E                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _ignoreControll
    43  001C8E  0A                 	db	10
    44                           
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _sensorLocation:
    50                           	opt stack 0
    51  001001  1B                 	db	27
    52  001002  2B                 	db	43
    53  001003  1F                 	db	31
    54  001004  33                 	db	51
    55  001005                     __end_of_sensorLocation:
    56                           	opt stack 0
    57  0000                     _ADCON0	set	4034
    58  0000                     _ADCON0bits	set	4034
    59  0000                     _ADCON1	set	4033
    60  0000                     _ADCON2	set	4032
    61  0000                     _ADRESH	set	4036
    62  0000                     _ADRESL	set	4035
    63  0000                     _INTCON	set	4082
    64  0000                     _INTCON2	set	4081
    65  0000                     _INTCONbits	set	4082
    66  0000                     _LATC	set	3979
    67  0000                     _OSCCON	set	4051
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _T0CON	set	4053
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISC	set	3988
    72  0000                     _TRISEbits	set	3990
    73                           
    74                           ; #config settings
    75  001005  00                 	db	0	; dummy byte at the end
    76  0000                     
    77                           	psect	cinit
    78  001BB2                     __pcinit:
    79                           	opt stack 0
    80  001BB2                     start_initialization:
    81                           	opt stack 0
    82  001BB2                     __initialization:
    83                           	opt stack 0
    84                           
    85                           ; Clear objects allocated to COMRAM (55 bytes)
    86  001BB2  EE00  F001         	lfsr	0,__pbssCOMRAM
    87  001BB6  0E37               	movlw	55
    88  001BB8                     clear_0:
    89  001BB8  6AEE               	clrf	postinc0,c
    90  001BBA  06E8               	decf	wreg,f,c
    91  001BBC  E1FD               	bnz	clear_0
    92                           
    93                           ; Initialize objects allocated to COMRAM (1 bytes)
    94                           ; load TBLPTR registers with __pidataCOMRAM
    95  001BBE  0E8E               	movlw	low __pidataCOMRAM
    96  001BC0  6EF6               	movwf	tblptrl,c
    97  001BC2  0E1C               	movlw	high __pidataCOMRAM
    98  001BC4  6EF7               	movwf	tblptrh,c
    99  001BC6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   100  001BC8  6EF8               	movwf	tblptru,c
   101  001BCA  0009               	tblrd		*+	;fetch initializer
   102  001BCC  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   103  001BD0                     end_of_initialization:
   104                           	opt stack 0
   105  001BD0                     __end_of__initialization:
   106                           	opt stack 0
   107  001BD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  001BD2  6EF8               	movwf	tblptru,c
   109  001BD4  0100               	movlb	0
   110  001BD6  EFED  F00D         	goto	_main	;jump to C main() function
   111                           tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000001                     _sensorCorrection:
   122                           	opt stack 0
   123  000001                     	ds	8
   124  000009                     _sensorValue:
   125                           	opt stack 0
   126  000009                     	ds	8
   127  000011                     _ControllerCounter:
   128                           	opt stack 0
   129  000011                     	ds	2
   130  000013                     _Deadend:
   131                           	opt stack 0
   132  000013                     	ds	2
   133  000015                     _ForwardCounter:
   134                           	opt stack 0
   135  000015                     	ds	2
   136  000017                     _LTurnCounter:
   137                           	opt stack 0
   138  000017                     	ds	2
   139  000019                     _MotorDelayCounter:
   140                           	opt stack 0
   141  000019                     	ds	2
   142  00001B                     _RTurnCounter:
   143                           	opt stack 0
   144  00001B                     	ds	2
   145  00001D                     _ReverseCounter:
   146                           	opt stack 0
   147  00001D                     	ds	2
   148  00001F                     _RotateCounter:
   149                           	opt stack 0
   150  00001F                     	ds	2
   151  000021                     _TurnLeft:
   152                           	opt stack 0
   153  000021                     	ds	2
   154  000023                     _TurnRight:
   155                           	opt stack 0
   156  000023                     	ds	2
   157  000025                     _TurnedLeft:
   158                           	opt stack 0
   159  000025                     	ds	2
   160  000027                     _TurnedRight:
   161                           	opt stack 0
   162  000027                     	ds	2
   163  000029                     _delay_time:
   164                           	opt stack 0
   165  000029                     	ds	2
   166  00002B                     _errorD:
   167                           	opt stack 0
   168  00002B                     	ds	2
   169  00002D                     _errorP:
   170                           	opt stack 0
   171  00002D                     	ds	2
   172  00002F                     _oldErrorP:
   173                           	opt stack 0
   174  00002F                     	ds	2
   175  000031                     _totalError:
   176                           	opt stack 0
   177  000031                     	ds	2
   178  000033                     _LMotorCounter:
   179                           	opt stack 0
   180  000033                     	ds	1
   181  000034                     _RMotorCounter:
   182                           	opt stack 0
   183  000034                     	ds	1
   184  000035                     _algorithm:
   185                           	opt stack 0
   186  000035                     	ds	1
   187  000036                     _justTurned:
   188                           	opt stack 0
   189  000036                     	ds	1
   190  000037                     _rotatingSide:
   191                           	opt stack 0
   192  000037                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00005E                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00005E                     _ignoreControll:
   204                           	opt stack 0
   205  00005E                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackBANK0
   214  000080                     __pcstackBANK0:
   215                           	opt stack 0
   216  000080                     ?___wmul:
   217                           	opt stack 0
   218  000080                     ?___awdiv:
   219                           	opt stack 0
   220  000080                     delay@ms:
   221                           	opt stack 0
   222  000080                     ___wmul@multiplier:
   223                           	opt stack 0
   224  000080                     ___awdiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x0
   228  000080                     	ds	2
   229  000082                     ??_delay:
   230  000082                     ___wmul@multiplicand:
   231                           	opt stack 0
   232  000082                     ___awdiv@divisor:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x2
   236  000082                     	ds	1
   237  000083                     delay@x:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000083                     	ds	1
   242  000084                     ___awdiv@counter:
   243                           	opt stack 0
   244  000084                     ___wmul@product:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000084                     	ds	1
   249  000085                     ___awdiv@sign:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x5
   253  000085                     	ds	1
   254  000086                     ?_MIN:
   255                           	opt stack 0
   256  000086                     ?_MAX:
   257                           	opt stack 0
   258  000086                     MIN@a:
   259                           	opt stack 0
   260  000086                     MAX@a:
   261                           	opt stack 0
   262  000086                     ___awdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x6
   266  000086                     	ds	2
   267  000088                     ??_setCorrection:
   268  000088                     MIN@b:
   269                           	opt stack 0
   270  000088                     MAX@b:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x8
   274  000088                     	ds	2
   275  00008A                     ??_MIN:
   276  00008A                     ??_MAX:
   277  00008A                     setCorrection@sideAvg:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0xA
   281  00008A                     	ds	1
   282  00008B                     sensorComputation@sensorTemp:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xB
   286  00008B                     	ds	1
   287  00008C                     setCorrection@frontAvg:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00008C                     	ds	1
   292  00008D                     sensorComputation@getCorrection:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00008D                     	ds	1
   297  00008E                     ??_sensorComputation:
   298                           
   299                           ; 0 bytes @ 0xE
   300  00008E                     	ds	2
   301  000090                     sensorComputation@max:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000090                     	ds	2
   306  000092                     sensorComputation@min:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x12
   310  000092                     	ds	2
   311  000094                     sensorComputation@sum:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x14
   315  000094                     	ds	2
   316  000096                     sensorComputation@j:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x16
   320  000096                     	ds	2
   321  000098                     sensorComputation@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x18
   325  000098                     	ds	2
   326  00009A                     ??_sensorUpdate:
   327                           
   328                           ; 0 bytes @ 0x1A
   329  00009A                     	ds	6
   330  0000A0                     sensorUpdate@sensorTemp:
   331                           	opt stack 0
   332                           
   333                           ; 80 bytes @ 0x20
   334  0000A0                     	ds	80
   335  0000F0                     sensorUpdate@getCorrection:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x70
   339  0000F0                     	ds	1
   340  0000F1                     sensorUpdate@i:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x71
   344  0000F1                     	ds	2
   345  0000F3                     sensorUpdate@j:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x73
   349  0000F3                     	ds	2
   350  0000F5                     tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           ; 0 bytes @ 0x75
   358                           
   359                           	psect	cstackCOMRAM
   360  000038                     __pcstackCOMRAM:
   361                           	opt stack 0
   362  000038                     ??_low_isr:
   363  000038                     
   364                           ; 0 bytes @ 0x0
   365  000038                     	ds	17
   366  000049                     ?_ABS:
   367                           	opt stack 0
   368  000049                     motorCounterUpdate@reverse:
   369                           	opt stack 0
   370  000049                     merge@right:
   371                           	opt stack 0
   372  000049                     moveMouse@action:
   373                           	opt stack 0
   374  000049                     ABS@x:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x11
   378  000049                     	ds	1
   379  00004A                     motorCounterUpdate@side:
   380                           	opt stack 0
   381  00004A                     merge@left:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x12
   385  00004A                     	ds	1
   386  00004B                     ??_KController:
   387  00004B                     merge@merged:
   388                           	opt stack 0
   389  00004B                     rotate@side:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x13
   393  00004B                     	ds	2
   394  00004D                     KController@correctTo:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x15
   398  00004D                     	ds	1
   399  00004E                     KController@diff:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x16
   403  00004E                     	ds	2
   404  000050                     ??_high_isr:
   405                           
   406                           ; 0 bytes @ 0x18
   407  000050                     	ds	14
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415 ;;
   416 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   417 ;;
   418 ;; *************** function _main *****************
   419 ;; Defined at:
   420 ;;		line 41 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;		None               void
   427 ;; Registers used:
   428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;Total ram usage:        0 bytes
   439 ;; Hardware stack levels required when called:    7
   440 ;; This function calls:
   441 ;;		_ConfigureOscillator
   442 ;;		_InitApp
   443 ;;		_sensorUpdate
   444 ;;		_setCorrection
   445 ;; This function is called by:
   446 ;;		Startup code after reset
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           	psect	text0
   451  001BDA                     __ptext0:
   452                           	opt stack 0
   453  001BDA                     _main:
   454                           	opt stack 24
   455                           
   456                           ;main.c: 44: ConfigureOscillator();
   457                           
   458                           ;incstack = 0
   459  001BDA  EC3E  F00E         	call	_ConfigureOscillator	;wreg free
   460                           
   461                           ;main.c: 47: InitApp();
   462  001BDE  EC4D  F00D         	call	_InitApp	;wreg free
   463                           
   464                           ;main.c: 48: sensorUpdate(1);
   465  001BE2  0E01               	movlw	1
   466  001BE4  ECDC  F00A         	call	_sensorUpdate
   467                           
   468                           ;main.c: 49: setCorrection();
   469  001BE8  ECE6  F00B         	call	_setCorrection	;wreg free
   470                           
   471                           ;main.c: 50: INTCONbits.GIE = 1;
   472  001BEC  8EF2               	bsf	intcon,7,c	;volatile
   473  001BEE  D000               	goto	l2034
   474  001BF0                     l2034:
   475                           
   476                           ;main.c: 52: {
   477                           ;main.c: 53: sensorUpdate(0);
   478  001BF0  0E00               	movlw	0
   479  001BF2  ECDC  F00A         	call	_sensorUpdate
   480  001BF6  D7FC               	goto	l2034
   481  001BF8  EF51  F000         	goto	start
   482  001BFC                     __end_of_main:
   483                           	opt stack 0
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           intcon	equ	0xFF2
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492 ;; *************** function _setCorrection *****************
   493 ;; Defined at:
   494 ;;		line 125 in file "user.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  frontAvg        2   12[BANK0 ] int 
   499 ;;  sideAvg         2   10[BANK0 ] int 
   500 ;; Return value:  Size  Location     Type
   501 ;;		None               void
   502 ;; Registers used:
   503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;Total ram usage:        6 bytes
   514 ;; Hardware stack levels used:    1
   515 ;; Hardware stack levels required when called:    5
   516 ;; This function calls:
   517 ;;		___awdiv
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524  0017CC                     __ptext1:
   525                           	opt stack 0
   526  0017CC                     _setCorrection:
   527                           	opt stack 25
   528                           
   529                           ;user.c: 127: int sideAvg,frontAvg;
   530                           ;user.c: 128: sideAvg = (sensorValue[0]+sensorValue[1])/2;
   531                           
   532                           ;incstack = 0
   533  0017CC  5009               	movf	_sensorValue,w,c
   534  0017CE  240B               	addwf	_sensorValue+2,w,c
   535  0017D0  0100               	movlb	0	; () banked
   536  0017D2  6F80               	movwf	___awdiv@dividend& (0+255),b
   537  0017D4  500A               	movf	_sensorValue+1,w,c
   538  0017D6  200C               	addwfc	_sensorValue+3,w,c
   539  0017D8  0100               	movlb	0	; () banked
   540  0017DA  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   541  0017DC  0E00               	movlw	0
   542  0017DE  0100               	movlb	0	; () banked
   543  0017E0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   544  0017E2  0E02               	movlw	2
   545  0017E4  6F82               	movwf	___awdiv@divisor& (0+255),b
   546  0017E6  EC5F  F00C         	call	___awdiv	;wreg free
   547  0017EA  C080  F08A         	movff	?___awdiv,setCorrection@sideAvg
   548  0017EE  C081  F08B         	movff	?___awdiv+1,setCorrection@sideAvg+1
   549                           
   550                           ;user.c: 129: frontAvg = (sensorValue[2]+sensorValue[3])/2;
   551  0017F2  500F               	movf	_sensorValue+6,w,c
   552  0017F4  240D               	addwf	_sensorValue+4,w,c
   553  0017F6  0100               	movlb	0	; () banked
   554  0017F8  6F80               	movwf	___awdiv@dividend& (0+255),b
   555  0017FA  5010               	movf	_sensorValue+7,w,c
   556  0017FC  200E               	addwfc	_sensorValue+5,w,c
   557  0017FE  0100               	movlb	0	; () banked
   558  001800  6F81               	movwf	(___awdiv@dividend+1)& (0+255),b
   559  001802  0E00               	movlw	0
   560  001804  0100               	movlb	0	; () banked
   561  001806  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
   562  001808  0E02               	movlw	2
   563  00180A  6F82               	movwf	___awdiv@divisor& (0+255),b
   564  00180C  EC5F  F00C         	call	___awdiv	;wreg free
   565  001810  C080  F08C         	movff	?___awdiv,setCorrection@frontAvg
   566  001814  C081  F08D         	movff	?___awdiv+1,setCorrection@frontAvg+1
   567                           
   568                           ;user.c: 131: sensorCorrection[0] = sideAvg - sensorValue[0];
   569  001818  C009  F088         	movff	_sensorValue,??_setCorrection
   570  00181C  C00A  F089         	movff	_sensorValue+1,??_setCorrection+1
   571  001820  0100               	movlb	0	; () banked
   572  001822  1F88               	comf	??_setCorrection& (0+255),f,b
   573  001824  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   574  001826  4B88               	infsnz	??_setCorrection& (0+255),f,b
   575  001828  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   576  00182A  0100               	movlb	0	; () banked
   577  00182C  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   578  00182E  0100               	movlb	0	; () banked
   579  001830  2588               	addwf	??_setCorrection& (0+255),w,b
   580  001832  6E01               	movwf	_sensorCorrection,c
   581  001834  0100               	movlb	0	; () banked
   582  001836  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   583  001838  0100               	movlb	0	; () banked
   584  00183A  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   585  00183C  6E02               	movwf	_sensorCorrection+1,c
   586                           
   587                           ; BSR set to: 0
   588                           ;user.c: 132: sensorCorrection[1] = sideAvg - sensorValue[1];
   589  00183E  EE20  F00B         	lfsr	2,_sensorValue+2
   590  001842  CFDE F088          	movff	postinc2,??_setCorrection
   591  001846  CFDD F089          	movff	postdec2,??_setCorrection+1
   592  00184A  0100               	movlb	0	; () banked
   593  00184C  1F88               	comf	??_setCorrection& (0+255),f,b
   594  00184E  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   595  001850  4B88               	infsnz	??_setCorrection& (0+255),f,b
   596  001852  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   597  001854  0100               	movlb	0	; () banked
   598  001856  518A               	movf	setCorrection@sideAvg& (0+255),w,b
   599  001858  0100               	movlb	0	; () banked
   600  00185A  2588               	addwf	??_setCorrection& (0+255),w,b
   601  00185C  6E03               	movwf	_sensorCorrection+2,c
   602  00185E  0100               	movlb	0	; () banked
   603  001860  518B               	movf	(setCorrection@sideAvg+1)& (0+255),w,b
   604  001862  0100               	movlb	0	; () banked
   605  001864  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   606  001866  6E04               	movwf	_sensorCorrection+3,c
   607                           
   608                           ; BSR set to: 0
   609                           ;user.c: 133: sensorCorrection[2] = frontAvg - sensorValue[2];
   610  001868  EE20  F00D         	lfsr	2,_sensorValue+4
   611  00186C  CFDE F088          	movff	postinc2,??_setCorrection
   612  001870  CFDD F089          	movff	postdec2,??_setCorrection+1
   613  001874  0100               	movlb	0	; () banked
   614  001876  1F88               	comf	??_setCorrection& (0+255),f,b
   615  001878  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   616  00187A  4B88               	infsnz	??_setCorrection& (0+255),f,b
   617  00187C  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   618  00187E  0100               	movlb	0	; () banked
   619  001880  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   620  001882  0100               	movlb	0	; () banked
   621  001884  2588               	addwf	??_setCorrection& (0+255),w,b
   622  001886  6E05               	movwf	_sensorCorrection+4,c
   623  001888  0100               	movlb	0	; () banked
   624  00188A  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   625  00188C  0100               	movlb	0	; () banked
   626  00188E  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   627  001890  6E06               	movwf	_sensorCorrection+5,c
   628                           
   629                           ; BSR set to: 0
   630                           ;user.c: 134: sensorCorrection[3] = frontAvg - sensorValue[3];
   631  001892  EE20  F00F         	lfsr	2,_sensorValue+6
   632  001896  CFDE F088          	movff	postinc2,??_setCorrection
   633  00189A  CFDD F089          	movff	postdec2,??_setCorrection+1
   634  00189E  0100               	movlb	0	; () banked
   635  0018A0  1F88               	comf	??_setCorrection& (0+255),f,b
   636  0018A2  1F89               	comf	(??_setCorrection+1)& (0+255),f,b
   637  0018A4  4B88               	infsnz	??_setCorrection& (0+255),f,b
   638  0018A6  2B89               	incf	(??_setCorrection+1)& (0+255),f,b
   639  0018A8  0100               	movlb	0	; () banked
   640  0018AA  518C               	movf	setCorrection@frontAvg& (0+255),w,b
   641  0018AC  0100               	movlb	0	; () banked
   642  0018AE  2588               	addwf	??_setCorrection& (0+255),w,b
   643  0018B0  6E07               	movwf	_sensorCorrection+6,c
   644  0018B2  0100               	movlb	0	; () banked
   645  0018B4  518D               	movf	(setCorrection@frontAvg+1)& (0+255),w,b
   646  0018B6  0100               	movlb	0	; () banked
   647  0018B8  2189               	addwfc	(??_setCorrection+1)& (0+255),w,b
   648  0018BA  6E08               	movwf	_sensorCorrection+7,c
   649                           
   650                           ; BSR set to: 0
   651  0018BC  0012               	return		;funcret
   652  0018BE                     __end_of_setCorrection:
   653                           	opt stack 0
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           intcon	equ	0xFF2
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postinc2	equ	0xFDE
   662                           postdec2	equ	0xFDD
   663                           
   664 ;; *************** function _sensorUpdate *****************
   665 ;; Defined at:
   666 ;;		line 161 in file "user.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  getCorrectio    1    wreg     unsigned char 
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  getCorrectio    1  112[BANK0 ] unsigned char 
   671 ;;  sensorTemp     80   32[BANK0 ] int [10][4]
   672 ;;  j               2  115[BANK0 ] int 
   673 ;;  i               2  113[BANK0 ] int 
   674 ;; Return value:  Size  Location     Type
   675 ;;		None               void
   676 ;; Registers used:
   677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;      Locals:         0      85       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   685 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   686 ;;      Totals:         0      91       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;Total ram usage:       91 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    6
   690 ;; This function calls:
   691 ;;		___wmul
   692 ;;		_sensorComputation
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text2
   699  0015B8                     __ptext2:
   700                           	opt stack 0
   701  0015B8                     _sensorUpdate:
   702                           	opt stack 24
   703                           
   704                           ; BSR set to: 0
   705                           ;incstack = 0
   706                           ;sensorUpdate@getCorrection stored from wreg
   707  0015B8  0100               	movlb	0	; () banked
   708  0015BA  6FF0               	movwf	sensorUpdate@getCorrection& (0+255),b
   709                           
   710                           ; BSR set to: 0
   711                           ;user.c: 163: int i,j;
   712                           ;user.c: 164: int sensorTemp[4][10];
   713                           ;user.c: 167: for(i = 0; i < 10; i++)
   714  0015BC  0E00               	movlw	0
   715  0015BE  0100               	movlb	0	; () banked
   716  0015C0  6FF2               	movwf	(sensorUpdate@i+1)& (0+255),b
   717  0015C2  0E00               	movlw	0
   718  0015C4  6FF1               	movwf	sensorUpdate@i& (0+255),b
   719  0015C6                     l1988:
   720                           
   721                           ; BSR set to: 0
   722  0015C6  0100               	movlb	0	; () banked
   723  0015C8  BFF2               	btfsc	(sensorUpdate@i+1)& (0+255),7,b
   724  0015CA  D00A               	goto	l1992
   725  0015CC  0100               	movlb	0	; () banked
   726  0015CE  51F2               	movf	(sensorUpdate@i+1)& (0+255),w,b
   727  0015D0  E178               	bnz	l2012
   728  0015D2  0E0A               	movlw	10
   729  0015D4  0100               	movlb	0	; () banked
   730  0015D6  5DF1               	subwf	sensorUpdate@i& (0+255),w,b
   731  0015D8  B0D8               	btfsc	status,0,c
   732  0015DA  D073               	goto	l2012
   733  0015DC  D001               	goto	l1992
   734                           
   735                           ; BSR set to: 0
   736  0015DE  D071               	goto	l2012
   737  0015E0                     l1992:
   738                           
   739                           ; BSR set to: 0
   740                           ;user.c: 168: {
   741                           ;user.c: 169: for(j = 0 ; j < 4 ; j++)
   742  0015E0  0E00               	movlw	0
   743  0015E2  0100               	movlb	0	; () banked
   744  0015E4  6FF4               	movwf	(sensorUpdate@j+1)& (0+255),b
   745  0015E6  0E00               	movlw	0
   746  0015E8  6FF3               	movwf	sensorUpdate@j& (0+255),b
   747  0015EA                     l1994:
   748                           
   749                           ; BSR set to: 0
   750  0015EA  0100               	movlb	0	; () banked
   751  0015EC  BFF4               	btfsc	(sensorUpdate@j+1)& (0+255),7,b
   752  0015EE  D00A               	goto	l1998
   753  0015F0  0100               	movlb	0	; () banked
   754  0015F2  51F4               	movf	(sensorUpdate@j+1)& (0+255),w,b
   755  0015F4  E161               	bnz	l2008
   756  0015F6  0E04               	movlw	4
   757  0015F8  0100               	movlb	0	; () banked
   758  0015FA  5DF3               	subwf	sensorUpdate@j& (0+255),w,b
   759  0015FC  B0D8               	btfsc	status,0,c
   760  0015FE  D05C               	goto	l2008
   761  001600  D001               	goto	l1998
   762                           
   763                           ; BSR set to: 0
   764  001602  D05A               	goto	l2008
   765  001604                     l1998:
   766                           
   767                           ; BSR set to: 0
   768                           ;user.c: 170: {
   769                           ;user.c: 171: ADCON0 = sensorLocation[j];
   770  001604  0E01               	movlw	low _sensorLocation
   771  001606  0100               	movlb	0	; () banked
   772  001608  25F3               	addwf	sensorUpdate@j& (0+255),w,b
   773  00160A  6EF6               	movwf	tblptrl,c
   774  00160C  0E10               	movlw	high _sensorLocation
   775  00160E  21F4               	addwfc	(sensorUpdate@j+1)& (0+255),w,b
   776  001610  6EF7               	movwf	tblptrh,c
   777  001612                     	if	0	;There are less than 3 active tblptr bytes
   778  001612                     	endif
   779  001612  0008               	tblrd		*
   780  001614  CFF5 FFC2          	movff	tablat,4034	;volatile
   781                           
   782                           ; BSR set to: 0
   783                           ;user.c: 173: ADCON0bits.GO_DONE = 1;
   784  001618  82C2               	bsf	4034,1,c	;volatile
   785                           
   786                           ;user.c: 174: while(ADCON0bits.GO_DONE != 0);
   787  00161A  D000               	goto	l309
   788  00161C                     l309:
   789                           
   790                           ; BSR set to: 0
   791  00161C  B2C2               	btfsc	4034,1,c	;volatile
   792  00161E  D7FE               	goto	l309
   793                           
   794                           ; BSR set to: 0
   795                           ;user.c: 175: sensorTemp[j][i] = (ADRESH << 2) + (ADRESL >> 6);
   796                           
   797                           ; BSR set to: 0
   798  001620  CFC3 F09A          	movff	4035,??_sensorUpdate	;volatile
   799  001624  0E06               	movlw	6
   800  001626  0100               	movlb	0	; () banked
   801  001628  6F9B               	movwf	(??_sensorUpdate+1)& (0+255),b
   802  00162A                     u1715:
   803  00162A  0100               	movlb	0	; () banked
   804  00162C  90D8               	bcf	status,0,c
   805  00162E  339A               	rrcf	??_sensorUpdate& (0+255),f,b
   806  001630  0100               	movlb	0	; () banked
   807  001632  2F9B               	decfsz	(??_sensorUpdate+1)& (0+255),f,b
   808  001634  D7FA               	goto	u1715
   809  001636  0100               	movlb	0	; () banked
   810  001638  519A               	movf	??_sensorUpdate& (0+255),w,b
   811  00163A  CFC4 F09C          	movff	4036,??_sensorUpdate+2	;volatile
   812  00163E  0100               	movlb	0	; () banked
   813  001640  6B9D               	clrf	(??_sensorUpdate+3)& (0+255),b
   814  001642  0100               	movlb	0	; () banked
   815  001644  90D8               	bcf	status,0,c
   816  001646  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   817  001648  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   818  00164A  0100               	movlb	0	; () banked
   819  00164C  90D8               	bcf	status,0,c
   820  00164E  379C               	rlcf	(??_sensorUpdate+2)& (0+255),f,b
   821  001650  379D               	rlcf	(??_sensorUpdate+3)& (0+255),f,b
   822  001652  0100               	movlb	0	; () banked
   823  001654  279C               	addwf	(??_sensorUpdate+2)& (0+255),f,b
   824  001656  0E00               	movlw	0
   825  001658  239D               	addwfc	(??_sensorUpdate+3)& (0+255),f,b
   826  00165A  C0F3  F080         	movff	sensorUpdate@j,___wmul@multiplier
   827  00165E  C0F4  F081         	movff	sensorUpdate@j+1,___wmul@multiplier+1
   828  001662  0E00               	movlw	0
   829  001664  0100               	movlb	0	; () banked
   830  001666  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
   831  001668  0E14               	movlw	20
   832  00166A  6F82               	movwf	___wmul@multiplicand& (0+255),b
   833  00166C  EC89  F00D         	call	___wmul	;wreg free
   834  001670  0EA0               	movlw	low sensorUpdate@sensorTemp
   835  001672  0100               	movlb	0	; () banked
   836  001674  6F9E               	movwf	(??_sensorUpdate+4)& (0+255),b
   837  001676  0E00               	movlw	high sensorUpdate@sensorTemp
   838  001678  0100               	movlb	0	; () banked
   839  00167A  6F9F               	movwf	(??_sensorUpdate+5)& (0+255),b
   840  00167C  0100               	movlb	0	; () banked
   841  00167E  5180               	movf	?___wmul& (0+255),w,b
   842  001680  0100               	movlb	0	; () banked
   843  001682  279E               	addwf	(??_sensorUpdate+4)& (0+255),f,b
   844  001684  0100               	movlb	0	; () banked
   845  001686  5181               	movf	(?___wmul+1)& (0+255),w,b
   846  001688  0100               	movlb	0	; () banked
   847  00168A  239F               	addwfc	(??_sensorUpdate+5)& (0+255),f,b
   848  00168C  90D8               	bcf	status,0,c
   849  00168E  0100               	movlb	0	; () banked
   850  001690  35F1               	rlcf	sensorUpdate@i& (0+255),w,b
   851  001692  6ED9               	movwf	fsr2l,c
   852  001694  0100               	movlb	0	; () banked
   853  001696  35F2               	rlcf	(sensorUpdate@i+1)& (0+255),w,b
   854  001698  6EDA               	movwf	fsr2h,c
   855  00169A  0100               	movlb	0	; () banked
   856  00169C  519E               	movf	(??_sensorUpdate+4)& (0+255),w,b
   857  00169E  26D9               	addwf	fsr2l,f,c
   858  0016A0  0100               	movlb	0	; () banked
   859  0016A2  519F               	movf	(??_sensorUpdate+5)& (0+255),w,b
   860  0016A4  22DA               	addwfc	fsr2h,f,c
   861  0016A6  C09C  FFDE         	movff	??_sensorUpdate+2,postinc2
   862  0016AA  C09D  FFDD         	movff	??_sensorUpdate+3,postdec2
   863                           
   864                           ; BSR set to: 0
   865  0016AE  0100               	movlb	0	; () banked
   866  0016B0  4BF3               	infsnz	sensorUpdate@j& (0+255),f,b
   867  0016B2  2BF4               	incf	(sensorUpdate@j+1)& (0+255),f,b
   868  0016B4  D79A               	goto	l1994
   869                           
   870                           ; BSR set to: 0
   871  0016B6  D000               	goto	l2008
   872  0016B8                     l2008:
   873                           
   874                           ; BSR set to: 0
   875  0016B8  0100               	movlb	0	; () banked
   876  0016BA  4BF1               	infsnz	sensorUpdate@i& (0+255),f,b
   877  0016BC  2BF2               	incf	(sensorUpdate@i+1)& (0+255),f,b
   878  0016BE  D783               	goto	l1988
   879                           
   880                           ; BSR set to: 0
   881  0016C0  D000               	goto	l2012
   882  0016C2                     l2012:
   883                           
   884                           ; BSR set to: 0
   885                           ;user.c: 176: }
   886                           ;user.c: 177: }
   887                           ;user.c: 180: sensorComputation(sensorTemp,getCorrection);
   888  0016C2  0EA0               	movlw	low sensorUpdate@sensorTemp
   889  0016C4  0100               	movlb	0	; () banked
   890  0016C6  6F8B               	movwf	sensorComputation@sensorTemp& (0+255),b
   891  0016C8  0E00               	movlw	high sensorUpdate@sensorTemp
   892  0016CA  0100               	movlb	0	; () banked
   893  0016CC  6F8C               	movwf	(sensorComputation@sensorTemp+1)& (0+255),b
   894  0016CE  C0F0  F08D         	movff	sensorUpdate@getCorrection,sensorComputation@getCorrection
   895  0016D2  EC7A  F009         	call	_sensorComputation	;wreg free
   896  0016D6  0012               	return		;funcret
   897  0016D8                     __end_of_sensorUpdate:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           intcon	equ	0xFF2
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           postinc2	equ	0xFDE
   907                           postdec2	equ	0xFDD
   908                           fsr2h	equ	0xFDA
   909                           fsr2l	equ	0xFD9
   910                           status	equ	0xFD8
   911                           
   912 ;; *************** function _sensorComputation *****************
   913 ;; Defined at:
   914 ;;		line 137 in file "user.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  sensorTemp      2   11[BANK0 ] PTR int [10]
   917 ;;		 -> sensorUpdate@sensorTemp(80), 
   918 ;;  getCorrectio    1   13[BANK0 ] unsigned char 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  i               2   24[BANK0 ] int 
   921 ;;  j               2   22[BANK0 ] int 
   922 ;;  sum             2   20[BANK0 ] int 
   923 ;;  min             2   18[BANK0 ] int 
   924 ;;  max             2   16[BANK0 ] int 
   925 ;; Return value:  Size  Location     Type
   926 ;;		None               void
   927 ;; Registers used:
   928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   937 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;Total ram usage:       15 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    5
   941 ;; This function calls:
   942 ;;		_MAX
   943 ;;		_MIN
   944 ;;		___awdiv
   945 ;;		___wmul
   946 ;; This function is called by:
   947 ;;		_sensorUpdate
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text3
   952  0012F4                     __ptext3:
   953                           	opt stack 0
   954  0012F4                     _sensorComputation:
   955                           	opt stack 24
   956                           
   957                           ;user.c: 139: int max,min,i,j,sum;
   958                           ;user.c: 140: for(i = 0; i < 4 ; i++)
   959                           
   960                           ;incstack = 0
   961  0012F4  0E00               	movlw	0
   962  0012F6  0100               	movlb	0	; () banked
   963  0012F8  6F99               	movwf	(sensorComputation@i+1)& (0+255),b
   964  0012FA  0E00               	movlw	0
   965  0012FC  6F98               	movwf	sensorComputation@i& (0+255),b
   966                           
   967                           ; BSR set to: 0
   968  0012FE  0100               	movlb	0	; () banked
   969  001300  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
   970  001302  D00A               	goto	l1940
   971  001304  0100               	movlb	0	; () banked
   972  001306  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
   973  001308  E106               	bnz	u1620
   974  00130A  0E04               	movlw	4
   975  00130C  0100               	movlb	0	; () banked
   976  00130E  5D98               	subwf	sensorComputation@i& (0+255),w,b
   977  001310  B0D8               	btfsc	status,0,c
   978  001312  D151               	goto	l302
   979  001314  D001               	goto	l1940
   980  001316                     u1620:
   981                           
   982                           ; BSR set to: 0
   983  001316  D14F               	goto	l302
   984  001318                     l1940:
   985                           
   986                           ; BSR set to: 0
   987                           ;user.c: 141: {
   988                           ;user.c: 142: for(j = 0 ; j < 10 ; j++)
   989  001318  0E00               	movlw	0
   990  00131A  0100               	movlb	0	; () banked
   991  00131C  6F97               	movwf	(sensorComputation@j+1)& (0+255),b
   992  00131E  0E00               	movlw	0
   993  001320  6F96               	movwf	sensorComputation@j& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996  001322  0100               	movlb	0	; () banked
   997  001324  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
   998  001326  D00A               	goto	l1946
   999  001328  0100               	movlb	0	; () banked
  1000  00132A  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1001  00132C  E106               	bnz	u1630
  1002  00132E  0E0A               	movlw	10
  1003  001330  0100               	movlb	0	; () banked
  1004  001332  5D96               	subwf	sensorComputation@j& (0+255),w,b
  1005  001334  B0D8               	btfsc	status,0,c
  1006  001336  D0D3               	goto	l1956
  1007  001338  D001               	goto	l1946
  1008  00133A                     u1630:
  1009                           
  1010                           ; BSR set to: 0
  1011  00133A  D0D1               	goto	l1956
  1012  00133C                     l1946:
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;user.c: 143: {
  1016                           ;user.c: 144: if(j == 0)
  1017  00133C  0100               	movlb	0	; () banked
  1018  00133E  5196               	movf	sensorComputation@j& (0+255),w,b
  1019  001340  0100               	movlb	0	; () banked
  1020  001342  1197               	iorwf	(sensorComputation@j+1)& (0+255),w,b
  1021  001344  A4D8               	btfss	status,2,c
  1022  001346  D031               	goto	l1950
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;user.c: 145: {
  1026                           ;user.c: 146: sum = min = max = sensorTemp[i][j];
  1027  001348  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1028  00134C  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1029  001350  0E00               	movlw	0
  1030  001352  0100               	movlb	0	; () banked
  1031  001354  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1032  001356  0E14               	movlw	20
  1033  001358  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1034  00135A  EC89  F00D         	call	___wmul	;wreg free
  1035  00135E  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1036  001362  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1037  001366  0100               	movlb	0	; () banked
  1038  001368  5180               	movf	?___wmul& (0+255),w,b
  1039  00136A  0100               	movlb	0	; () banked
  1040  00136C  278E               	addwf	??_sensorComputation& (0+255),f,b
  1041  00136E  0100               	movlb	0	; () banked
  1042  001370  5181               	movf	(?___wmul+1)& (0+255),w,b
  1043  001372  0100               	movlb	0	; () banked
  1044  001374  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1045  001376  90D8               	bcf	status,0,c
  1046  001378  0100               	movlb	0	; () banked
  1047  00137A  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1048  00137C  6ED9               	movwf	fsr2l,c
  1049  00137E  0100               	movlb	0	; () banked
  1050  001380  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1051  001382  6EDA               	movwf	fsr2h,c
  1052  001384  0100               	movlb	0	; () banked
  1053  001386  518E               	movf	??_sensorComputation& (0+255),w,b
  1054  001388  26D9               	addwf	fsr2l,f,c
  1055  00138A  0100               	movlb	0	; () banked
  1056  00138C  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1057  00138E  22DA               	addwfc	fsr2h,f,c
  1058  001390  CFDE F090          	movff	postinc2,sensorComputation@max
  1059  001394  CFDD F091          	movff	postdec2,sensorComputation@max+1
  1060  001398  C090  F092         	movff	sensorComputation@max,sensorComputation@min
  1061  00139C  C091  F093         	movff	sensorComputation@max+1,sensorComputation@min+1
  1062  0013A0  C092  F094         	movff	sensorComputation@min,sensorComputation@sum
  1063  0013A4  C093  F095         	movff	sensorComputation@min+1,sensorComputation@sum+1
  1064                           
  1065                           ;user.c: 147: continue;
  1066  0013A8  D08F               	goto	l1952
  1067  0013AA                     l1950:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;user.c: 148: }
  1071                           ;user.c: 149: min = MIN(sensorTemp[i][j],min);
  1072  0013AA  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1073  0013AE  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1074  0013B2  0E00               	movlw	0
  1075  0013B4  0100               	movlb	0	; () banked
  1076  0013B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1077  0013B8  0E14               	movlw	20
  1078  0013BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1079  0013BC  EC89  F00D         	call	___wmul	;wreg free
  1080  0013C0  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1081  0013C4  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1082  0013C8  0100               	movlb	0	; () banked
  1083  0013CA  5180               	movf	?___wmul& (0+255),w,b
  1084  0013CC  0100               	movlb	0	; () banked
  1085  0013CE  278E               	addwf	??_sensorComputation& (0+255),f,b
  1086  0013D0  0100               	movlb	0	; () banked
  1087  0013D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  1088  0013D4  0100               	movlb	0	; () banked
  1089  0013D6  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1090  0013D8  90D8               	bcf	status,0,c
  1091  0013DA  0100               	movlb	0	; () banked
  1092  0013DC  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1093  0013DE  6ED9               	movwf	fsr2l,c
  1094  0013E0  0100               	movlb	0	; () banked
  1095  0013E2  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1096  0013E4  6EDA               	movwf	fsr2h,c
  1097  0013E6  0100               	movlb	0	; () banked
  1098  0013E8  518E               	movf	??_sensorComputation& (0+255),w,b
  1099  0013EA  26D9               	addwf	fsr2l,f,c
  1100  0013EC  0100               	movlb	0	; () banked
  1101  0013EE  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1102  0013F0  22DA               	addwfc	fsr2h,f,c
  1103  0013F2  CFDE F086          	movff	postinc2,MIN@a
  1104  0013F6  CFDD F087          	movff	postdec2,MIN@a+1
  1105  0013FA  C092  F088         	movff	sensorComputation@min,MIN@b
  1106  0013FE  C093  F089         	movff	sensorComputation@min+1,MIN@b+1
  1107  001402  ECA5  F00D         	call	_MIN	;wreg free
  1108  001406  C086  F092         	movff	?_MIN,sensorComputation@min
  1109  00140A  C087  F093         	movff	?_MIN+1,sensorComputation@min+1
  1110                           
  1111                           ;user.c: 150: max = MAX(sensorTemp[i][j],max);
  1112  00140E  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1113  001412  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1114  001416  0E00               	movlw	0
  1115  001418  0100               	movlb	0	; () banked
  1116  00141A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1117  00141C  0E14               	movlw	20
  1118  00141E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1119  001420  EC89  F00D         	call	___wmul	;wreg free
  1120  001424  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1121  001428  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1122  00142C  0100               	movlb	0	; () banked
  1123  00142E  5180               	movf	?___wmul& (0+255),w,b
  1124  001430  0100               	movlb	0	; () banked
  1125  001432  278E               	addwf	??_sensorComputation& (0+255),f,b
  1126  001434  0100               	movlb	0	; () banked
  1127  001436  5181               	movf	(?___wmul+1)& (0+255),w,b
  1128  001438  0100               	movlb	0	; () banked
  1129  00143A  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1130  00143C  90D8               	bcf	status,0,c
  1131  00143E  0100               	movlb	0	; () banked
  1132  001440  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1133  001442  6ED9               	movwf	fsr2l,c
  1134  001444  0100               	movlb	0	; () banked
  1135  001446  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1136  001448  6EDA               	movwf	fsr2h,c
  1137  00144A  0100               	movlb	0	; () banked
  1138  00144C  518E               	movf	??_sensorComputation& (0+255),w,b
  1139  00144E  26D9               	addwf	fsr2l,f,c
  1140  001450  0100               	movlb	0	; () banked
  1141  001452  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1142  001454  22DA               	addwfc	fsr2h,f,c
  1143  001456  CFDE F086          	movff	postinc2,MAX@a
  1144  00145A  CFDD F087          	movff	postdec2,MAX@a+1
  1145  00145E  C090  F088         	movff	sensorComputation@max,MAX@b
  1146  001462  C091  F089         	movff	sensorComputation@max+1,MAX@b+1
  1147  001466  ECBF  F00D         	call	_MAX	;wreg free
  1148  00146A  C086  F090         	movff	?_MAX,sensorComputation@max
  1149  00146E  C087  F091         	movff	?_MAX+1,sensorComputation@max+1
  1150                           
  1151                           ;user.c: 151: sum += sensorTemp[i][j];
  1152  001472  C098  F080         	movff	sensorComputation@i,___wmul@multiplier
  1153  001476  C099  F081         	movff	sensorComputation@i+1,___wmul@multiplier+1
  1154  00147A  0E00               	movlw	0
  1155  00147C  0100               	movlb	0	; () banked
  1156  00147E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1157  001480  0E14               	movlw	20
  1158  001482  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1159  001484  EC89  F00D         	call	___wmul	;wreg free
  1160  001488  C08B  F08E         	movff	sensorComputation@sensorTemp,??_sensorComputation
  1161  00148C  C08C  F08F         	movff	sensorComputation@sensorTemp+1,??_sensorComputation+1
  1162  001490  0100               	movlb	0	; () banked
  1163  001492  5180               	movf	?___wmul& (0+255),w,b
  1164  001494  0100               	movlb	0	; () banked
  1165  001496  278E               	addwf	??_sensorComputation& (0+255),f,b
  1166  001498  0100               	movlb	0	; () banked
  1167  00149A  5181               	movf	(?___wmul+1)& (0+255),w,b
  1168  00149C  0100               	movlb	0	; () banked
  1169  00149E  238F               	addwfc	(??_sensorComputation+1)& (0+255),f,b
  1170  0014A0  90D8               	bcf	status,0,c
  1171  0014A2  0100               	movlb	0	; () banked
  1172  0014A4  3596               	rlcf	sensorComputation@j& (0+255),w,b
  1173  0014A6  6ED9               	movwf	fsr2l,c
  1174  0014A8  0100               	movlb	0	; () banked
  1175  0014AA  3597               	rlcf	(sensorComputation@j+1)& (0+255),w,b
  1176  0014AC  6EDA               	movwf	fsr2h,c
  1177  0014AE  0100               	movlb	0	; () banked
  1178  0014B0  518E               	movf	??_sensorComputation& (0+255),w,b
  1179  0014B2  26D9               	addwf	fsr2l,f,c
  1180  0014B4  0100               	movlb	0	; () banked
  1181  0014B6  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1182  0014B8  22DA               	addwfc	fsr2h,f,c
  1183  0014BA  50DE               	movf	postinc2,w,c
  1184  0014BC  0100               	movlb	0	; () banked
  1185  0014BE  2794               	addwf	sensorComputation@sum& (0+255),f,b
  1186  0014C0  50DD               	movf	postdec2,w,c
  1187  0014C2  0100               	movlb	0	; () banked
  1188  0014C4  2395               	addwfc	(sensorComputation@sum+1)& (0+255),f,b
  1189  0014C6  D000               	goto	l1952
  1190  0014C8                     l1952:
  1191                           
  1192                           ; BSR set to: 0
  1193  0014C8  0100               	movlb	0	; () banked
  1194  0014CA  4B96               	infsnz	sensorComputation@j& (0+255),f,b
  1195  0014CC  2B97               	incf	(sensorComputation@j+1)& (0+255),f,b
  1196                           
  1197                           ; BSR set to: 0
  1198  0014CE  0100               	movlb	0	; () banked
  1199  0014D0  BF97               	btfsc	(sensorComputation@j+1)& (0+255),7,b
  1200  0014D2  D734               	goto	l1946
  1201  0014D4  0100               	movlb	0	; () banked
  1202  0014D6  5197               	movf	(sensorComputation@j+1)& (0+255),w,b
  1203  0014D8  E102               	bnz	l1956
  1204  0014DA  D729               	goto	L2
  1205  0014DC  D000               	goto	l1956
  1206  0014DE                     l1956:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;user.c: 152: }
  1210                           ;user.c: 153: sum = sum - min - max;
  1211  0014DE  0100               	movlb	0	; () banked
  1212  0014E0  5190               	movf	sensorComputation@max& (0+255),w,b
  1213  0014E2  0100               	movlb	0	; () banked
  1214  0014E4  2592               	addwf	sensorComputation@min& (0+255),w,b
  1215  0014E6  0100               	movlb	0	; () banked
  1216  0014E8  6F8E               	movwf	??_sensorComputation& (0+255),b
  1217  0014EA  0100               	movlb	0	; () banked
  1218  0014EC  5191               	movf	(sensorComputation@max+1)& (0+255),w,b
  1219  0014EE  0100               	movlb	0	; () banked
  1220  0014F0  2193               	addwfc	(sensorComputation@min+1)& (0+255),w,b
  1221  0014F2  0100               	movlb	0	; () banked
  1222  0014F4  6F8F               	movwf	(??_sensorComputation+1)& (0+255),b
  1223  0014F6  0100               	movlb	0	; () banked
  1224  0014F8  1F8E               	comf	??_sensorComputation& (0+255),f,b
  1225  0014FA  1F8F               	comf	(??_sensorComputation+1)& (0+255),f,b
  1226  0014FC  4B8E               	infsnz	??_sensorComputation& (0+255),f,b
  1227  0014FE  2B8F               	incf	(??_sensorComputation+1)& (0+255),f,b
  1228  001500  0100               	movlb	0	; () banked
  1229  001502  5194               	movf	sensorComputation@sum& (0+255),w,b
  1230  001504  0100               	movlb	0	; () banked
  1231  001506  258E               	addwf	??_sensorComputation& (0+255),w,b
  1232  001508  0100               	movlb	0	; () banked
  1233  00150A  6F94               	movwf	sensorComputation@sum& (0+255),b
  1234  00150C  0100               	movlb	0	; () banked
  1235  00150E  5195               	movf	(sensorComputation@sum+1)& (0+255),w,b
  1236  001510  0100               	movlb	0	; () banked
  1237  001512  218F               	addwfc	(??_sensorComputation+1)& (0+255),w,b
  1238  001514  0100               	movlb	0	; () banked
  1239  001516  6F95               	movwf	(sensorComputation@sum+1)& (0+255),b
  1240                           
  1241                           ;user.c: 154: if(getCorrection == 1)
  1242  001518  0100               	movlb	0	; () banked
  1243  00151A  058D               	decf	sensorComputation@getCorrection& (0+255),w,b
  1244  00151C  A4D8               	btfss	status,2,c
  1245  00151E  D00C               	goto	l1960
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;user.c: 155: sensorValue[i] = sum/(10-2);
  1249  001520  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1250  001524  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1251  001528  0E00               	movlw	0
  1252  00152A  0100               	movlb	0	; () banked
  1253  00152C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1254  00152E  0E08               	movlw	8
  1255  001530  6F82               	movwf	___awdiv@divisor& (0+255),b
  1256  001532  EC5F  F00C         	call	___awdiv	;wreg free
  1257  001536  D022               	goto	L3
  1258  001538                     l1960:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;user.c: 156: else
  1262                           ;user.c: 157: sensorValue[i] = sum/(10-2) + sensorCorrection[i];
  1263  001538  90D8               	bcf	status,0,c
  1264  00153A  0100               	movlb	0	; () banked
  1265  00153C  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1266  00153E  6ED9               	movwf	fsr2l,c
  1267  001540  0100               	movlb	0	; () banked
  1268  001542  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1269  001544  6EDA               	movwf	fsr2h,c
  1270  001546  0E01               	movlw	low _sensorCorrection
  1271  001548  26D9               	addwf	fsr2l,f,c
  1272  00154A  0E00               	movlw	high _sensorCorrection
  1273  00154C  22DA               	addwfc	fsr2h,f,c
  1274  00154E  CFDE F08E          	movff	postinc2,??_sensorComputation
  1275  001552  CFDD F08F          	movff	postdec2,??_sensorComputation+1
  1276  001556  C094  F080         	movff	sensorComputation@sum,___awdiv@dividend
  1277  00155A  C095  F081         	movff	sensorComputation@sum+1,___awdiv@dividend+1
  1278  00155E  0E00               	movlw	0
  1279  001560  0100               	movlb	0	; () banked
  1280  001562  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  1281  001564  0E08               	movlw	8
  1282  001566  6F82               	movwf	___awdiv@divisor& (0+255),b
  1283  001568  EC5F  F00C         	call	___awdiv	;wreg free
  1284  00156C  0100               	movlb	0	; () banked
  1285  00156E  518E               	movf	??_sensorComputation& (0+255),w,b
  1286  001570  0100               	movlb	0	; () banked
  1287  001572  2780               	addwf	?___awdiv& (0+255),f,b
  1288  001574  0100               	movlb	0	; () banked
  1289  001576  518F               	movf	(??_sensorComputation+1)& (0+255),w,b
  1290  001578  0100               	movlb	0	; () banked
  1291  00157A  2381               	addwfc	(?___awdiv+1)& (0+255),f,b
  1292  00157C                     L3:
  1293  00157C  90D8               	bcf	status,0,c
  1294  00157E  0100               	movlb	0	; () banked
  1295  001580  3598               	rlcf	sensorComputation@i& (0+255),w,b
  1296  001582  6ED9               	movwf	fsr2l,c
  1297  001584  0100               	movlb	0	; () banked
  1298  001586  3599               	rlcf	(sensorComputation@i+1)& (0+255),w,b
  1299  001588  6EDA               	movwf	fsr2h,c
  1300  00158A  0E09               	movlw	low _sensorValue
  1301  00158C  26D9               	addwf	fsr2l,f,c
  1302  00158E  0E00               	movlw	high _sensorValue
  1303  001590  22DA               	addwfc	fsr2h,f,c
  1304  001592  0100               	movlb	0	; () banked
  1305  001594  C080  FFDE         	movff	?___awdiv,postinc2
  1306  001598  0100               	movlb	0	; () banked
  1307  00159A  C081  FFDD         	movff	?___awdiv+1,postdec2
  1308  00159E  D000               	goto	l1962
  1309  0015A0                     l1962:
  1310                           
  1311                           ; BSR set to: 0
  1312  0015A0  0100               	movlb	0	; () banked
  1313  0015A2  4B98               	infsnz	sensorComputation@i& (0+255),f,b
  1314  0015A4  2B99               	incf	(sensorComputation@i+1)& (0+255),f,b
  1315                           
  1316                           ; BSR set to: 0
  1317  0015A6  0100               	movlb	0	; () banked
  1318  0015A8  BF99               	btfsc	(sensorComputation@i+1)& (0+255),7,b
  1319  0015AA  D6B6               	goto	l1940
  1320  0015AC  0100               	movlb	0	; () banked
  1321  0015AE  5199               	movf	(sensorComputation@i+1)& (0+255),w,b
  1322  0015B0  E102               	bnz	l302
  1323  0015B2  D6AB               	goto	L4
  1324  0015B4  D000               	goto	l302
  1325  0015B6                     l302:
  1326                           
  1327                           ; BSR set to: 0
  1328  0015B6  0012               	return		;funcret
  1329  0015B8                     __end_of_sensorComputation:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           intcon	equ	0xFF2
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postinc2	equ	0xFDE
  1339                           postdec2	equ	0xFDD
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function ___wmul *****************
  1345 ;; Defined at:
  1346 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1349 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  product         2    4[BANK0 ] unsigned int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2    0[BANK0 ] unsigned int 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, prodl, prodh
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;Total ram usage:        6 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_sensorComputation
  1372 ;;		_sensorUpdate
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text4
  1377  001B12                     __ptext4:
  1378                           	opt stack 0
  1379  001B12                     ___wmul:
  1380                           	opt stack 24
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;incstack = 0
  1384  001B12  0100               	movlb	0	; () banked
  1385  001B14  5180               	movf	___wmul@multiplier& (0+255),w,b
  1386  001B16  0100               	movlb	0	; () banked
  1387  001B18  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1388  001B1A  CFF3 F084          	movff	prodl,___wmul@product
  1389  001B1E  CFF4 F085          	movff	prodh,___wmul@product+1
  1390  001B22  0100               	movlb	0	; () banked
  1391  001B24  5180               	movf	___wmul@multiplier& (0+255),w,b
  1392  001B26  0100               	movlb	0	; () banked
  1393  001B28  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1394  001B2A  50F3               	movf	prodl,w,c
  1395  001B2C  0100               	movlb	0	; () banked
  1396  001B2E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1397  001B30  0100               	movlb	0	; () banked
  1398  001B32  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1399  001B34  0100               	movlb	0	; () banked
  1400  001B36  0382               	mulwf	___wmul@multiplicand& (0+255),b
  1401  001B38  50F3               	movf	prodl,w,c
  1402  001B3A  0100               	movlb	0	; () banked
  1403  001B3C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  1404                           
  1405                           ; BSR set to: 0
  1406  001B3E  C084  F080         	movff	___wmul@product,?___wmul
  1407  001B42  C085  F081         	movff	___wmul@product+1,?___wmul+1
  1408  001B46  D000               	goto	l323
  1409  001B48                     l323:
  1410                           
  1411                           ; BSR set to: 0
  1412  001B48  0012               	return		;funcret
  1413  001B4A                     __end_of___wmul:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           intcon	equ	0xFF2
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postinc2	equ	0xFDE
  1425                           postdec2	equ	0xFDD
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function ___awdiv *****************
  1431 ;; Defined at:
  1432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  dividend        2    0[BANK0 ] int 
  1435 ;;  divisor         2    2[BANK0 ] int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  quotient        2    6[BANK0 ] int 
  1438 ;;  sign            1    5[BANK0 ] unsigned char 
  1439 ;;  counter         1    4[BANK0 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2    0[BANK0 ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;Total ram usage:        8 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    4
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_setCorrection
  1460 ;;		_sensorComputation
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text5
  1465  0018BE                     __ptext5:
  1466                           	opt stack 0
  1467  0018BE                     ___awdiv:
  1468                           	opt stack 25
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;incstack = 0
  1472  0018BE  0E00               	movlw	0
  1473  0018C0  0100               	movlb	0	; () banked
  1474  0018C2  6F85               	movwf	___awdiv@sign& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477  0018C4  0100               	movlb	0	; () banked
  1478  0018C6  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1479  0018C8  D009               	goto	l1882
  1480                           
  1481                           ; BSR set to: 0
  1482  0018CA  0100               	movlb	0	; () banked
  1483  0018CC  6D82               	negf	___awdiv@divisor& (0+255),b
  1484  0018CE  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1485  0018D0  B0D8               	btfsc	status,0,c
  1486  0018D2  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489  0018D4  0E01               	movlw	1
  1490  0018D6  0100               	movlb	0	; () banked
  1491  0018D8  6F85               	movwf	___awdiv@sign& (0+255),b
  1492  0018DA  D000               	goto	l1882
  1493  0018DC                     l1882:
  1494                           
  1495                           ; BSR set to: 0
  1496  0018DC  0100               	movlb	0	; () banked
  1497  0018DE  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1498  0018E0  D009               	goto	l1888
  1499                           
  1500                           ; BSR set to: 0
  1501  0018E2  0100               	movlb	0	; () banked
  1502  0018E4  6D80               	negf	___awdiv@dividend& (0+255),b
  1503  0018E6  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1504  0018E8  B0D8               	btfsc	status,0,c
  1505  0018EA  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1506                           
  1507                           ; BSR set to: 0
  1508  0018EC  0E01               	movlw	1
  1509  0018EE  0100               	movlb	0	; () banked
  1510  0018F0  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  1511  0018F2  D000               	goto	l1888
  1512  0018F4                     l1888:
  1513                           
  1514                           ; BSR set to: 0
  1515  0018F4  0E00               	movlw	0
  1516  0018F6  0100               	movlb	0	; () banked
  1517  0018F8  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  1518  0018FA  0E00               	movlw	0
  1519  0018FC  6F86               	movwf	___awdiv@quotient& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522  0018FE  0100               	movlb	0	; () banked
  1523  001900  5182               	movf	___awdiv@divisor& (0+255),w,b
  1524  001902  0100               	movlb	0	; () banked
  1525  001904  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1526  001906  B4D8               	btfsc	status,2,c
  1527  001908  D031               	goto	l1910
  1528                           
  1529                           ; BSR set to: 0
  1530  00190A  0E01               	movlw	1
  1531  00190C  0100               	movlb	0	; () banked
  1532  00190E  6F84               	movwf	___awdiv@counter& (0+255),b
  1533  001910  D007               	goto	l1896
  1534  001912                     l1894:
  1535                           
  1536                           ; BSR set to: 0
  1537  001912  0100               	movlb	0	; () banked
  1538  001914  90D8               	bcf	status,0,c
  1539  001916  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  1540  001918  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1541  00191A  0100               	movlb	0	; () banked
  1542  00191C  2B84               	incf	___awdiv@counter& (0+255),f,b
  1543  00191E  D000               	goto	l1896
  1544  001920                     l1896:
  1545                           
  1546                           ; BSR set to: 0
  1547  001920  0100               	movlb	0	; () banked
  1548  001922  BF83               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  1549  001924  D002               	goto	l1898
  1550  001926  D7F5               	goto	l1894
  1551                           
  1552                           ; BSR set to: 0
  1553  001928  D000               	goto	l1898
  1554  00192A                     l1898:
  1555                           
  1556                           ; BSR set to: 0
  1557  00192A  0100               	movlb	0	; () banked
  1558  00192C  90D8               	bcf	status,0,c
  1559  00192E  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  1560  001930  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563  001932  0100               	movlb	0	; () banked
  1564  001934  5182               	movf	___awdiv@divisor& (0+255),w,b
  1565  001936  0100               	movlb	0	; () banked
  1566  001938  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  1567  00193A  0100               	movlb	0	; () banked
  1568  00193C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1569  00193E  0100               	movlb	0	; () banked
  1570  001940  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1571  001942  A0D8               	btfss	status,0,c
  1572  001944  D00B               	goto	l1906
  1573                           
  1574                           ; BSR set to: 0
  1575  001946  0100               	movlb	0	; () banked
  1576  001948  5182               	movf	___awdiv@divisor& (0+255),w,b
  1577  00194A  0100               	movlb	0	; () banked
  1578  00194C  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  1579  00194E  0100               	movlb	0	; () banked
  1580  001950  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1581  001952  0100               	movlb	0	; () banked
  1582  001954  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1583                           
  1584                           ; BSR set to: 0
  1585  001956  0100               	movlb	0	; () banked
  1586  001958  8186               	bsf	___awdiv@quotient& (0+255),0,b
  1587  00195A  D000               	goto	l1906
  1588  00195C                     l1906:
  1589                           
  1590                           ; BSR set to: 0
  1591  00195C  0100               	movlb	0	; () banked
  1592  00195E  90D8               	bcf	status,0,c
  1593  001960  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1594  001962  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  1595                           
  1596                           ; BSR set to: 0
  1597  001964  0100               	movlb	0	; () banked
  1598  001966  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  1599  001968  D7E0               	goto	l1898
  1600                           
  1601                           ; BSR set to: 0
  1602  00196A  D000               	goto	l1910
  1603  00196C                     l1910:
  1604                           
  1605                           ; BSR set to: 0
  1606  00196C  0100               	movlb	0	; () banked
  1607  00196E  5185               	movf	___awdiv@sign& (0+255),w,b
  1608  001970  0100               	movlb	0	; () banked
  1609  001972  B4D8               	btfsc	status,2,c
  1610  001974  D006               	goto	l1914
  1611                           
  1612                           ; BSR set to: 0
  1613  001976  0100               	movlb	0	; () banked
  1614  001978  6D86               	negf	___awdiv@quotient& (0+255),b
  1615  00197A  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1616  00197C  B0D8               	btfsc	status,0,c
  1617  00197E  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1618  001980  D000               	goto	l1914
  1619  001982                     l1914:
  1620                           
  1621                           ; BSR set to: 0
  1622  001982  C086  F080         	movff	___awdiv@quotient,?___awdiv
  1623  001986  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  1624  00198A  D000               	goto	l516
  1625  00198C                     l516:
  1626                           
  1627                           ; BSR set to: 0
  1628  00198C  0012               	return		;funcret
  1629  00198E                     __end_of___awdiv:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           prodh	equ	0xFF4
  1636                           prodl	equ	0xFF3
  1637                           intcon	equ	0xFF2
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postinc2	equ	0xFDE
  1641                           postdec2	equ	0xFDD
  1642                           fsr2h	equ	0xFDA
  1643                           fsr2l	equ	0xFD9
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function _MIN *****************
  1647 ;; Defined at:
  1648 ;;		line 184 in file "user.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  a               2    6[BANK0 ] int 
  1651 ;;  b               2    8[BANK0 ] int 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  2    6[BANK0 ] int 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_sensorComputation
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text6
  1678  001B4A                     __ptext6:
  1679                           	opt stack 0
  1680  001B4A                     _MIN:
  1681                           	opt stack 24
  1682                           
  1683                           ;user.c: 186: if(a>b) return b;
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;incstack = 0
  1687  001B4A  0100               	movlb	0	; () banked
  1688  001B4C  5186               	movf	MIN@a& (0+255),w,b
  1689  001B4E  0100               	movlb	0	; () banked
  1690  001B50  5D88               	subwf	MIN@b& (0+255),w,b
  1691  001B52  0100               	movlb	0	; () banked
  1692  001B54  5189               	movf	(MIN@b+1)& (0+255),w,b
  1693  001B56  0A80               	xorlw	128
  1694  001B58  0100               	movlb	0	; () banked
  1695  001B5A  6F8A               	movwf	??_MIN& (0+255),b
  1696  001B5C  0100               	movlb	0	; () banked
  1697  001B5E  5187               	movf	(MIN@a+1)& (0+255),w,b
  1698  001B60  0A80               	xorlw	128
  1699  001B62  0100               	movlb	0	; () banked
  1700  001B64  598A               	subwfb	??_MIN& (0+255),w,b
  1701  001B66  B0D8               	btfsc	status,0,c
  1702  001B68  D005               	goto	l315
  1703                           
  1704                           ; BSR set to: 0
  1705  001B6A  C088  F086         	movff	MIN@b,?_MIN
  1706  001B6E  C089  F087         	movff	MIN@b+1,?_MIN+1
  1707  001B72  D004               	goto	l316
  1708  001B74                     l315:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;user.c: 187: return a;
  1712  001B74  C086  F086         	movff	MIN@a,?_MIN
  1713  001B78  C087  F087         	movff	MIN@a+1,?_MIN+1
  1714  001B7C                     l316:
  1715                           
  1716                           ; BSR set to: 0
  1717  001B7C  0012               	return		;funcret
  1718  001B7E                     __end_of_MIN:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           postinc2	equ	0xFDE
  1730                           postdec2	equ	0xFDD
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _MAX *****************
  1736 ;; Defined at:
  1737 ;;		line 190 in file "user.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  a               2    6[BANK0 ] int 
  1740 ;;  b               2    8[BANK0 ] int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    6[BANK0 ] int 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;Total ram usage:        5 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    4
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_sensorComputation
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text7
  1767  001B7E                     __ptext7:
  1768                           	opt stack 0
  1769  001B7E                     _MAX:
  1770                           	opt stack 24
  1771                           
  1772                           ;user.c: 192: if(a>b) return a;
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;incstack = 0
  1776  001B7E  0100               	movlb	0	; () banked
  1777  001B80  5186               	movf	MAX@a& (0+255),w,b
  1778  001B82  0100               	movlb	0	; () banked
  1779  001B84  5D88               	subwf	MAX@b& (0+255),w,b
  1780  001B86  0100               	movlb	0	; () banked
  1781  001B88  5189               	movf	(MAX@b+1)& (0+255),w,b
  1782  001B8A  0A80               	xorlw	128
  1783  001B8C  0100               	movlb	0	; () banked
  1784  001B8E  6F8A               	movwf	??_MAX& (0+255),b
  1785  001B90  0100               	movlb	0	; () banked
  1786  001B92  5187               	movf	(MAX@a+1)& (0+255),w,b
  1787  001B94  0A80               	xorlw	128
  1788  001B96  0100               	movlb	0	; () banked
  1789  001B98  598A               	subwfb	??_MAX& (0+255),w,b
  1790  001B9A  B0D8               	btfsc	status,0,c
  1791  001B9C  D005               	goto	l319
  1792                           
  1793                           ; BSR set to: 0
  1794  001B9E  C086  F086         	movff	MAX@a,?_MAX
  1795  001BA2  C087  F087         	movff	MAX@a+1,?_MAX+1
  1796  001BA6  D004               	goto	l320
  1797  001BA8                     l319:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;user.c: 193: return b;
  1801  001BA8  C088  F086         	movff	MAX@b,?_MAX
  1802  001BAC  C089  F087         	movff	MAX@b+1,?_MAX+1
  1803  001BB0                     l320:
  1804                           
  1805                           ; BSR set to: 0
  1806  001BB0  0012               	return		;funcret
  1807  001BB2                     __end_of_MAX:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           intcon	equ	0xFF2
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _InitApp *****************
  1825 ;; Defined at:
  1826 ;;		line 35 in file "user.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    5
  1847 ;; This function calls:
  1848 ;;		_AlgorithmSelection
  1849 ;;		_delay
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text8
  1856  001A9A                     __ptext8:
  1857                           	opt stack 0
  1858  001A9A                     _InitApp:
  1859                           	opt stack 25
  1860                           
  1861                           ;user.c: 39: TRISC = 0;
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  001A9A  0E00               	movlw	0
  1866  001A9C  6E94               	movwf	3988,c	;volatile
  1867                           
  1868                           ;user.c: 43: TRISEbits.TRISE1=1;
  1869  001A9E  8296               	bsf	3990,1,c	;volatile
  1870                           
  1871                           ;user.c: 45: TRISEbits.TRISE2=1;
  1872  001AA0  8496               	bsf	3990,2,c	;volatile
  1873                           
  1874                           ;user.c: 47: TRISBbits.RB1=1;
  1875  001AA2  8293               	bsf	3987,1,c	;volatile
  1876                           
  1877                           ;user.c: 49: TRISBbits.RB0=1;
  1878  001AA4  8093               	bsf	3987,0,c	;volatile
  1879                           
  1880                           ;user.c: 52: TRISBbits.RB3=1;
  1881  001AA6  8693               	bsf	3987,3,c	;volatile
  1882                           
  1883                           ;user.c: 54: TRISBbits.RB2=1;
  1884  001AA8  8493               	bsf	3987,2,c	;volatile
  1885                           
  1886                           ;user.c: 58: ADCON1 =0b00000001;
  1887  001AAA  0E01               	movlw	1
  1888  001AAC  6EC1               	movwf	4033,c	;volatile
  1889                           
  1890                           ;user.c: 63: ADCON2=0b00001010;
  1891  001AAE  0E0A               	movlw	10
  1892  001AB0  6EC0               	movwf	4032,c	;volatile
  1893                           
  1894                           ;user.c: 68: ADCON0=0b00101011;
  1895  001AB2  0E2B               	movlw	43
  1896  001AB4  6EC2               	movwf	4034,c	;volatile
  1897                           
  1898                           ;user.c: 77: T0CON = 0b11000100;
  1899  001AB6  0EC4               	movlw	196
  1900  001AB8  6ED5               	movwf	4053,c	;volatile
  1901                           
  1902                           ;user.c: 85: INTCON2 = 0b11110100;
  1903  001ABA  0EF4               	movlw	244
  1904  001ABC  6EF1               	movwf	intcon2,c	;volatile
  1905                           
  1906                           ;user.c: 95: INTCON = 0b00100000;
  1907  001ABE  0E20               	movlw	32
  1908  001AC0  6EF2               	movwf	intcon,c	;volatile
  1909                           
  1910                           ;user.c: 105: AlgorithmSelection();
  1911  001AC2  ECFE  F00D         	call	_AlgorithmSelection	;wreg free
  1912                           
  1913                           ;user.c: 108: delay(1000);
  1914  001AC6  0E03               	movlw	3
  1915  001AC8  0100               	movlb	0	; () banked
  1916  001ACA  6F81               	movwf	(delay@ms+1)& (0+255),b
  1917  001ACC  0EE8               	movlw	232
  1918  001ACE  6F80               	movwf	delay@ms& (0+255),b
  1919  001AD0  EC2B  F00D         	call	_delay	;wreg free
  1920  001AD4  0012               	return		;funcret
  1921  001AD6                     __end_of_InitApp:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon	equ	0xFF2
  1930                           intcon2	equ	0xFF1
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postinc2	equ	0xFDE
  1934                           postdec2	equ	0xFDD
  1935                           fsr2h	equ	0xFDA
  1936                           fsr2l	equ	0xFD9
  1937                           status	equ	0xFD8
  1938                           
  1939 ;; *************** function _delay *****************
  1940 ;; Defined at:
  1941 ;;		line 29 in file "user.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  ms              2    0[BANK0 ] unsigned int 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  x               2    3[BANK0 ] int 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;		None               void
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1959 ;;Total ram usage:        5 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    4
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_InitApp
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text9
  1970  001A56                     __ptext9:
  1971                           	opt stack 0
  1972  001A56                     _delay:
  1973                           	opt stack 25
  1974                           
  1975                           ;user.c: 30: int x = 0;
  1976                           
  1977                           ;incstack = 0
  1978  001A56  0E00               	movlw	0
  1979  001A58  0100               	movlb	0	; () banked
  1980  001A5A  6F84               	movwf	(delay@x+1)& (0+255),b
  1981  001A5C  0E00               	movlw	0
  1982  001A5E  6F83               	movwf	delay@x& (0+255),b
  1983                           
  1984                           ;user.c: 31: for (x = 0; x < ms; x++)
  1985  001A60  0E00               	movlw	0
  1986  001A62  0100               	movlb	0	; () banked
  1987  001A64  6F84               	movwf	(delay@x+1)& (0+255),b
  1988  001A66  0E00               	movlw	0
  1989  001A68  6F83               	movwf	delay@x& (0+255),b
  1990  001A6A  D00C               	goto	l274
  1991  001A6C                     l1920:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;user.c: 32: _delay((unsigned long)((1)*(32000000/4000.0)));
  1995  001A6C  0E0B               	movlw	11
  1996  001A6E  0100               	movlb	0	; () banked
  1997  001A70  6F82               	movwf	??_delay& (0+255),b
  1998  001A72  0E62               	movlw	98
  1999  001A74                     u1747:
  2000  001A74  2EE8               	decfsz	wreg,f,c
  2001  001A76  D7FE               	goto	u1747
  2002  001A78  2F82               	decfsz	??_delay& (0+255),f,b
  2003  001A7A  D7FC               	goto	u1747
  2004  001A7C  D000               	nop2	
  2005  001A7E  0100               	movlb	0	; () banked
  2006  001A80  4B83               	infsnz	delay@x& (0+255),f,b
  2007  001A82  2B84               	incf	(delay@x+1)& (0+255),f,b
  2008  001A84                     l274:
  2009                           
  2010                           ; BSR set to: 0
  2011  001A84  0100               	movlb	0	; () banked
  2012  001A86  5180               	movf	delay@ms& (0+255),w,b
  2013  001A88  0100               	movlb	0	; () banked
  2014  001A8A  5D83               	subwf	delay@x& (0+255),w,b
  2015  001A8C  0100               	movlb	0	; () banked
  2016  001A8E  5181               	movf	(delay@ms+1)& (0+255),w,b
  2017  001A90  0100               	movlb	0	; () banked
  2018  001A92  5984               	subwfb	(delay@x+1)& (0+255),w,b
  2019  001A94  A0D8               	btfss	status,0,c
  2020  001A96  D7EA               	goto	l1920
  2021                           
  2022                           ; BSR set to: 0
  2023                           
  2024                           ; BSR set to: 0
  2025  001A98  0012               	return		;funcret
  2026  001A9A                     __end_of_delay:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           intcon	equ	0xFF2
  2035                           intcon2	equ	0xFF1
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postinc2	equ	0xFDE
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _AlgorithmSelection *****************
  2045 ;; Defined at:
  2046 ;;		line 112 in file "user.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;		None               void
  2053 ;; Registers used:
  2054 ;;		wreg, status,2, status,0
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used:    1
  2066 ;; Hardware stack levels required when called:    4
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_InitApp
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text10
  2075  001BFC                     __ptext10:
  2076                           	opt stack 0
  2077  001BFC                     _AlgorithmSelection:
  2078                           	opt stack 25
  2079                           
  2080                           ;user.c: 114: ADCON0 = 0b00100111;
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;incstack = 0
  2084  001BFC  0E27               	movlw	39
  2085  001BFE  6EC2               	movwf	4034,c	;volatile
  2086                           
  2087                           ;user.c: 116: ADCON0bits.GO_DONE = 1;
  2088  001C00  82C2               	bsf	4034,1,c	;volatile
  2089                           
  2090                           ;user.c: 117: while(ADCON0bits.GO_DONE != 0);
  2091  001C02  D000               	goto	l283
  2092  001C04                     l283:
  2093  001C04  B2C2               	btfsc	4034,1,c	;volatile
  2094  001C06  D7FE               	goto	l283
  2095                           
  2096                           ;user.c: 119: if(ADRESL > 0b10000000)
  2097  001C08  0E80               	movlw	128
  2098  001C0A  64C3               	cpfsgt	4035,c	;volatile
  2099  001C0C  D002               	goto	l1932
  2100                           
  2101                           ;user.c: 120: algorithm = LEFTWALL;
  2102  001C0E  0E00               	movlw	0
  2103  001C10  D001               	goto	L5
  2104  001C12                     l1932:
  2105                           
  2106                           ;user.c: 121: else
  2107                           ;user.c: 122: algorithm = RIGHTWALL;
  2108  001C12  0E01               	movlw	1
  2109  001C14                     L5:
  2110  001C14  6E35               	movwf	_algorithm,c
  2111  001C16  D000               	goto	l288
  2112  001C18                     l288:
  2113  001C18  0012               	return		;funcret
  2114  001C1A                     __end_of_AlgorithmSelection:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           prodh	equ	0xFF4
  2121                           prodl	equ	0xFF3
  2122                           intcon	equ	0xFF2
  2123                           intcon2	equ	0xFF1
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           fsr2h	equ	0xFDA
  2129                           fsr2l	equ	0xFD9
  2130                           status	equ	0xFD8
  2131                           
  2132 ;; *************** function _ConfigureOscillator *****************
  2133 ;; Defined at:
  2134 ;;		line 24 in file "system.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		wreg, status,2
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    4
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text11
  2163  001C7C                     __ptext11:
  2164                           	opt stack 0
  2165  001C7C                     _ConfigureOscillator:
  2166                           	opt stack 26
  2167                           
  2168                           ;system.c: 29: OSCCON = 0b01111100;
  2169                           
  2170                           ;incstack = 0
  2171  001C7C  0E7C               	movlw	124
  2172  001C7E  6ED3               	movwf	4051,c	;volatile
  2173                           
  2174                           ;system.c: 31: OSCTUNE = 0b01001111;
  2175  001C80  0E4F               	movlw	79
  2176  001C82  6E9B               	movwf	3995,c	;volatile
  2177  001C84  0012               	return		;funcret
  2178  001C86                     __end_of_ConfigureOscillator:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           intcon	equ	0xFF2
  2187                           intcon2	equ	0xFF1
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _low_isr *****************
  2197 ;; Defined at:
  2198 ;;		line 230 in file "interrupts.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;		None               void
  2205 ;; Registers used:
  2206 ;;		None
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:       17 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    3
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		Interrupt level 1
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	intcodelo
  2227  000018                     __pintcodelo:
  2228                           	opt stack 0
  2229  000018                     _low_isr:
  2230                           	opt stack 24
  2231                           
  2232                           ;incstack = 0
  2233  000018  CFD8 F038          	movff	status,??_low_isr
  2234  00001C  CFE8 F039          	movff	wreg,??_low_isr+1
  2235  000020  CFE0 F03A          	movff	bsr,??_low_isr+2
  2236  000024  CFFA F03B          	movff	pclath,??_low_isr+3
  2237  000028  CFFB F03C          	movff	pclatu,??_low_isr+4
  2238  00002C  CFE9 F03D          	movff	fsr0l,??_low_isr+5
  2239  000030  CFEA F03E          	movff	fsr0h,??_low_isr+6
  2240  000034  CFE1 F03F          	movff	fsr1l,??_low_isr+7
  2241  000038  CFE2 F040          	movff	fsr1h,??_low_isr+8
  2242  00003C  CFD9 F041          	movff	fsr2l,??_low_isr+9
  2243  000040  CFDA F042          	movff	fsr2h,??_low_isr+10
  2244  000044  CFF3 F043          	movff	prodl,??_low_isr+11
  2245  000048  CFF4 F044          	movff	prodh,??_low_isr+12
  2246  00004C  CFF6 F045          	movff	tblptrl,??_low_isr+13
  2247  000050  CFF7 F046          	movff	tblptrh,??_low_isr+14
  2248  000054  CFF8 F047          	movff	tblptru,??_low_isr+15
  2249  000058  CFF5 F048          	movff	tablat,??_low_isr+16
  2250  00005C  C048  FFF5         	movff	??_low_isr+16,tablat
  2251  000060  C047  FFF8         	movff	??_low_isr+15,tblptru
  2252  000064  C046  FFF7         	movff	??_low_isr+14,tblptrh
  2253  000068  C045  FFF6         	movff	??_low_isr+13,tblptrl
  2254  00006C  C044  FFF4         	movff	??_low_isr+12,prodh
  2255  000070  C043  FFF3         	movff	??_low_isr+11,prodl
  2256  000074  C042  FFDA         	movff	??_low_isr+10,fsr2h
  2257  000078  C041  FFD9         	movff	??_low_isr+9,fsr2l
  2258  00007C  C040  FFE2         	movff	??_low_isr+8,fsr1h
  2259  000080  C03F  FFE1         	movff	??_low_isr+7,fsr1l
  2260  000084  C03E  FFEA         	movff	??_low_isr+6,fsr0h
  2261  000088  C03D  FFE9         	movff	??_low_isr+5,fsr0l
  2262  00008C  C03C  FFFB         	movff	??_low_isr+4,pclatu
  2263  000090  C03B  FFFA         	movff	??_low_isr+3,pclath
  2264  000094  C03A  FFE0         	movff	??_low_isr+2,bsr
  2265  000098  C039  FFE8         	movff	??_low_isr+1,wreg
  2266  00009C  C038  FFD8         	movff	??_low_isr,status
  2267  0000A0  0010               	retfie	
  2268  0000A2                     __end_of_low_isr:
  2269                           	opt stack 0
  2270                           pclatu	equ	0xFFB
  2271                           pclath	equ	0xFFA
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           intcon2	equ	0xFF1
  2280                           postinc0	equ	0xFEE
  2281                           fsr0h	equ	0xFEA
  2282                           fsr0l	equ	0xFE9
  2283                           wreg	equ	0xFE8
  2284                           fsr1h	equ	0xFE2
  2285                           fsr1l	equ	0xFE1
  2286                           bsr	equ	0xFE0
  2287                           postinc2	equ	0xFDE
  2288                           postdec2	equ	0xFDD
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _high_isr *****************
  2294 ;; Defined at:
  2295 ;;		line 99 in file "interrupts.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;		None               void
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:       14 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    2
  2316 ;; This function calls:
  2317 ;;		_KController
  2318 ;;		_Reversing
  2319 ;;		_forward
  2320 ;;		_merge
  2321 ;;		_motorCounterUpdate
  2322 ;;		_moveMouse
  2323 ;;		_rotate
  2324 ;; This function is called by:
  2325 ;;		Interrupt level 2
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	intcode
  2330  000008                     __pintcode:
  2331                           	opt stack 0
  2332  000008                     _high_isr:
  2333                           	opt stack 24
  2334                           
  2335                           ;incstack = 0
  2336  000008  CFFA F050          	movff	pclath,??_high_isr
  2337  00000C  CFFB F051          	movff	pclatu,??_high_isr+1
  2338  000010  CFE9 F052          	movff	fsr0l,??_high_isr+2
  2339  000014  ED03  F008         	call	int_func,f	;refresh shadow registers
  2340                           pclatu	equ	0xFFB
  2341                           pclath	equ	0xFFA
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           intcon	equ	0xFF2
  2349                           intcon2	equ	0xFF1
  2350                           postinc0	equ	0xFEE
  2351                           fsr0h	equ	0xFEA
  2352                           fsr0l	equ	0xFE9
  2353                           wreg	equ	0xFE8
  2354                           fsr1h	equ	0xFE2
  2355                           fsr1l	equ	0xFE1
  2356                           bsr	equ	0xFE0
  2357                           postinc2	equ	0xFDE
  2358                           postdec2	equ	0xFDD
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363                           	psect	intcode_body
  2364  001006                     __pintcode_body:
  2365                           	opt stack 24
  2366  001006                     int_func:
  2367                           	opt stack 24
  2368  001006  0006               	pop		; remove dummy address from shadow register refresh
  2369  001008  CFEA F053          	movff	fsr0h,??_high_isr+3
  2370  00100C  CFE1 F054          	movff	fsr1l,??_high_isr+4
  2371  001010  CFE2 F055          	movff	fsr1h,??_high_isr+5
  2372  001014  CFD9 F056          	movff	fsr2l,??_high_isr+6
  2373  001018  CFDA F057          	movff	fsr2h,??_high_isr+7
  2374  00101C  CFF3 F058          	movff	prodl,??_high_isr+8
  2375  001020  CFF4 F059          	movff	prodh,??_high_isr+9
  2376  001024  CFF6 F05A          	movff	tblptrl,??_high_isr+10
  2377  001028  CFF7 F05B          	movff	tblptrh,??_high_isr+11
  2378  00102C  CFF8 F05C          	movff	tblptru,??_high_isr+12
  2379  001030  CFF5 F05D          	movff	tablat,??_high_isr+13
  2380                           
  2381                           ;interrupts.c: 118: if(INTCONbits.TMR0IF == 1)
  2382  001034  A4F2               	btfss	intcon,2,c	;volatile
  2383  001036  D141               	goto	i2l104
  2384                           
  2385                           ;interrupts.c: 119: {
  2386                           ;interrupts.c: 120: if(MotorDelayCounter > 2)
  2387  001038  BE1A               	btfsc	_MotorDelayCounter+1,7,c
  2388  00103A  D13B               	goto	i2l1786
  2389  00103C  501A               	movf	_MotorDelayCounter+1,w,c
  2390  00103E  E104               	bnz	i2u114_40
  2391  001040  0E03               	movlw	3
  2392  001042  5C19               	subwf	_MotorDelayCounter,w,c
  2393  001044  A0D8               	btfss	status,0,c
  2394  001046  D135               	goto	i2l1786
  2395  001048                     i2u114_40:
  2396                           
  2397                           ;interrupts.c: 121: {
  2398                           ;interrupts.c: 123: if(ControllerCounter > 0){
  2399  001048  BE12               	btfsc	_ControllerCounter+1,7,c
  2400  00104A  D01C               	goto	i2l1694
  2401  00104C  5012               	movf	_ControllerCounter+1,w,c
  2402  00104E  E103               	bnz	i2u115_40
  2403  001050  0411               	decf	_ControllerCounter,w,c
  2404  001052  A0D8               	btfss	status,0,c
  2405  001054  D017               	goto	i2l1694
  2406  001056                     i2u115_40:
  2407                           
  2408                           ;interrupts.c: 124: KController();
  2409  001056  ECC7  F00C         	call	_KController	;wreg free
  2410                           
  2411                           ;interrupts.c: 125: if (sensorValue[3] > 200 && sensorValue[2] > 200){
  2412  00105A  BE10               	btfsc	_sensorValue+7,7,c
  2413  00105C  D11E               	goto	i2l1784
  2414  00105E  5010               	movf	_sensorValue+7,w,c
  2415  001060  E104               	bnz	i2u116_40
  2416  001062  0EC9               	movlw	201
  2417  001064  5C0F               	subwf	_sensorValue+6,w,c
  2418  001066  A0D8               	btfss	status,0,c
  2419  001068  D118               	goto	i2l1784
  2420  00106A                     i2u116_40:
  2421  00106A  BE0E               	btfsc	_sensorValue+5,7,c
  2422  00106C  D116               	goto	i2l1784
  2423  00106E  500E               	movf	_sensorValue+5,w,c
  2424  001070  E104               	bnz	i2u117_40
  2425  001072  0EC9               	movlw	201
  2426  001074  5C0D               	subwf	_sensorValue+4,w,c
  2427  001076  A0D8               	btfss	status,0,c
  2428  001078  D110               	goto	i2l1784
  2429  00107A                     i2u117_40:
  2430                           
  2431                           ;interrupts.c: 126: ControllerCounter = 0;
  2432  00107A  0E00               	movlw	0
  2433  00107C  6E12               	movwf	_ControllerCounter+1,c
  2434  00107E  0E00               	movlw	0
  2435  001080  6E11               	movwf	_ControllerCounter,c
  2436                           
  2437                           ;interrupts.c: 127: }
  2438                           ;interrupts.c: 129: }
  2439  001082  D10B               	goto	i2l1784
  2440  001084                     i2l1694:
  2441                           
  2442                           ;interrupts.c: 131: else if (ForwardCounter > 0) {
  2443  001084  BE16               	btfsc	_ForwardCounter+1,7,c
  2444  001086  D008               	goto	i2l1698
  2445  001088  5016               	movf	_ForwardCounter+1,w,c
  2446  00108A  E103               	bnz	i2u118_40
  2447  00108C  0415               	decf	_ForwardCounter,w,c
  2448  00108E  A0D8               	btfss	status,0,c
  2449  001090  D003               	goto	i2l1698
  2450  001092                     i2u118_40:
  2451                           
  2452                           ;interrupts.c: 132: forward();
  2453  001092  EC0D  F00E         	call	_forward	;wreg free
  2454                           
  2455                           ;interrupts.c: 139: }
  2456  001096  D101               	goto	i2l1784
  2457  001098                     i2l1698:
  2458                           
  2459                           ;interrupts.c: 141: else if (ReverseCounter > 0) {
  2460  001098  BE1E               	btfsc	_ReverseCounter+1,7,c
  2461  00109A  D008               	goto	i2l1702
  2462  00109C  501E               	movf	_ReverseCounter+1,w,c
  2463  00109E  E103               	bnz	i2u119_40
  2464  0010A0  041D               	decf	_ReverseCounter,w,c
  2465  0010A2  A0D8               	btfss	status,0,c
  2466  0010A4  D003               	goto	i2l1702
  2467  0010A6                     i2u119_40:
  2468                           
  2469                           ;interrupts.c: 142: Reversing();
  2470  0010A6  EC1B  F00E         	call	_Reversing	;wreg free
  2471                           
  2472                           ;interrupts.c: 143: }
  2473  0010AA  D0F7               	goto	i2l1784
  2474  0010AC                     i2l1702:
  2475                           
  2476                           ;interrupts.c: 145: else if(RotateCounter > 0) {
  2477  0010AC  BE20               	btfsc	_RotateCounter+1,7,c
  2478  0010AE  D025               	goto	i2l1718
  2479  0010B0  5020               	movf	_RotateCounter+1,w,c
  2480  0010B2  E103               	bnz	i2u120_40
  2481  0010B4  041F               	decf	_RotateCounter,w,c
  2482  0010B6  A0D8               	btfss	status,0,c
  2483  0010B8  D020               	goto	i2l1718
  2484  0010BA                     i2u120_40:
  2485                           
  2486                           ;interrupts.c: 147: if ((sensorValue[2] > 800 || sensorValue[3] > 800)) {
  2487  0010BA  BE0E               	btfsc	_sensorValue+5,7,c
  2488  0010BC  D006               	goto	i2l1706
  2489  0010BE  0E21               	movlw	33
  2490  0010C0  5C0D               	subwf	_sensorValue+4,w,c
  2491  0010C2  0E03               	movlw	3
  2492  0010C4  580E               	subwfb	_sensorValue+5,w,c
  2493  0010C6  B0D8               	btfsc	status,0,c
  2494  0010C8  D008               	goto	i2l1708
  2495  0010CA                     i2l1706:
  2496  0010CA  BE10               	btfsc	_sensorValue+7,7,c
  2497  0010CC  D00D               	goto	i2l1712
  2498  0010CE  0E21               	movlw	33
  2499  0010D0  5C0F               	subwf	_sensorValue+6,w,c
  2500  0010D2  0E03               	movlw	3
  2501  0010D4  5810               	subwfb	_sensorValue+7,w,c
  2502  0010D6  A0D8               	btfss	status,0,c
  2503  0010D8  D007               	goto	i2l1712
  2504  0010DA                     i2l1708:
  2505                           
  2506                           ;interrupts.c: 148: ReverseCounter = 15;
  2507  0010DA  0E00               	movlw	0
  2508  0010DC  6E1E               	movwf	_ReverseCounter+1,c
  2509  0010DE  0E0F               	movlw	15
  2510  0010E0  6E1D               	movwf	_ReverseCounter,c
  2511                           
  2512                           ;interrupts.c: 149: Reversing();
  2513  0010E2  EC1B  F00E         	call	_Reversing	;wreg free
  2514                           
  2515                           ;interrupts.c: 150: } else {
  2516  0010E6  D0D9               	goto	i2l1784
  2517  0010E8                     i2l1712:
  2518                           
  2519                           ;interrupts.c: 151: rotate(rotatingSide);
  2520  0010E8  5037               	movf	_rotatingSide,w,c
  2521  0010EA  EC6B  F00D         	call	_rotate
  2522                           
  2523                           ;interrupts.c: 152: TurnRight = 0;
  2524  0010EE  0E00               	movlw	0
  2525  0010F0  6E24               	movwf	_TurnRight+1,c
  2526  0010F2  0E00               	movlw	0
  2527  0010F4  6E23               	movwf	_TurnRight,c
  2528  0010F6  D00D               	goto	L6
  2529                           
  2530                           ;interrupts.c: 154: }
  2531                           ;interrupts.c: 155: }
  2532                           
  2533                           ;interrupts.c: 153: TurnLeft = 0;
  2534  0010F8  D0D0               	goto	i2l1784
  2535  0010FA                     i2l1718:
  2536                           
  2537                           ;interrupts.c: 157: else if (TurnLeft == 1){
  2538  0010FA  0421               	decf	_TurnLeft,w,c
  2539  0010FC  1022               	iorwf	_TurnLeft+1,w,c
  2540  0010FE  A4D8               	btfss	status,2,c
  2541  001100  D00D               	goto	i2l1722
  2542                           
  2543                           ;interrupts.c: 158: RotateCounter = 167;
  2544  001102  0E00               	movlw	0
  2545  001104  6E20               	movwf	_RotateCounter+1,c
  2546  001106  0EA7               	movlw	167
  2547  001108  6E1F               	movwf	_RotateCounter,c
  2548                           
  2549                           ;interrupts.c: 159: rotatingSide = LEFT;
  2550  00110A  0E00               	movlw	0
  2551  00110C  6E37               	movwf	_rotatingSide,c
  2552                           
  2553                           ;interrupts.c: 160: justTurned = 1;
  2554  00110E  0E01               	movlw	1
  2555  001110  6E36               	movwf	_justTurned,c
  2556  001112                     L6:
  2557                           
  2558                           ;interrupts.c: 161: TurnLeft = 0;
  2559  001112  0E00               	movlw	0
  2560  001114  6E22               	movwf	_TurnLeft+1,c
  2561  001116  0E00               	movlw	0
  2562  001118  6E21               	movwf	_TurnLeft,c
  2563                           
  2564                           ;interrupts.c: 162: }
  2565  00111A  D0BF               	goto	i2l1784
  2566  00111C                     i2l1722:
  2567                           
  2568                           ;interrupts.c: 164: else if (TurnRight == 1 && sensorValue[3] > 510-20 && sensorValue[2]
      +                           > 510-20) {
  2569  00111C  0423               	decf	_TurnRight,w,c
  2570  00111E  1024               	iorwf	_TurnRight+1,w,c
  2571  001120  B4D8               	btfsc	status,2,c
  2572  001122  BE10               	btfsc	_sensorValue+7,7,c
  2573  001124  D016               	goto	i2l1730
  2574  001126  0EEB               	movlw	235
  2575  001128  5C0F               	subwf	_sensorValue+6,w,c
  2576  00112A  0E01               	movlw	1
  2577  00112C  5810               	subwfb	_sensorValue+7,w,c
  2578  00112E  B0D8               	btfsc	status,0,c
  2579  001130  BE0E               	btfsc	_sensorValue+5,7,c
  2580  001132  D00F               	goto	i2l1730
  2581  001134  0EEB               	movlw	235
  2582  001136  5C0D               	subwf	_sensorValue+4,w,c
  2583  001138  0E01               	movlw	1
  2584  00113A  580E               	subwfb	_sensorValue+5,w,c
  2585  00113C  A0D8               	btfss	status,0,c
  2586  00113E  D009               	goto	i2l1730
  2587                           
  2588                           ;interrupts.c: 165: RotateCounter = 167;
  2589  001140  0E00               	movlw	0
  2590  001142  6E20               	movwf	_RotateCounter+1,c
  2591  001144  0EA7               	movlw	167
  2592  001146  6E1F               	movwf	_RotateCounter,c
  2593                           
  2594                           ;interrupts.c: 166: rotatingSide = RIGHT;
  2595  001148  0E01               	movlw	1
  2596  00114A  6E37               	movwf	_rotatingSide,c
  2597                           
  2598                           ;interrupts.c: 167: justTurned = 1;
  2599  00114C  0E01               	movlw	1
  2600  00114E  6E36               	movwf	_justTurned,c
  2601  001150  D09F               	goto	i2l1782
  2602  001152                     i2l1730:
  2603                           
  2604                           ;interrupts.c: 171: else if (sensorValue[0] < 90 && algorithm == LEFTWALL) {
  2605  001152  BE0A               	btfsc	_sensorValue+1,7,c
  2606  001154  D006               	goto	i2l1732
  2607  001156  500A               	movf	_sensorValue+1,w,c
  2608  001158  E11A               	bnz	i2l1742
  2609  00115A  0E5A               	movlw	90
  2610  00115C  5C09               	subwf	_sensorValue,w,c
  2611  00115E  B0D8               	btfsc	status,0,c
  2612  001160  D016               	goto	i2l1742
  2613  001162                     i2l1732:
  2614  001162  5035               	movf	_algorithm,w,c
  2615  001164  A4D8               	btfss	status,2,c
  2616  001166  D013               	goto	i2l1742
  2617                           
  2618                           ;interrupts.c: 172: TurnLeft = 1;
  2619  001168  0E00               	movlw	0
  2620  00116A  6E22               	movwf	_TurnLeft+1,c
  2621  00116C  0E01               	movlw	1
  2622  00116E  6E21               	movwf	_TurnLeft,c
  2623                           
  2624                           ;interrupts.c: 173: if(justTurned == 0) {
  2625  001170  5036               	movf	_justTurned,w,c
  2626  001172  A4D8               	btfss	status,2,c
  2627  001174  D004               	goto	i2l1738
  2628                           
  2629                           ;interrupts.c: 174: ForwardCounter = 450;
  2630  001176  0E01               	movlw	1
  2631  001178  6E16               	movwf	_ForwardCounter+1,c
  2632  00117A  0EC2               	movlw	194
  2633  00117C  D003               	goto	L7
  2634  00117E                     i2l1738:
  2635                           
  2636                           ;interrupts.c: 176: ForwardCounter = 410;
  2637  00117E  0E01               	movlw	1
  2638  001180  6E16               	movwf	_ForwardCounter+1,c
  2639  001182  0E9A               	movlw	154
  2640  001184                     L7:
  2641  001184  6E15               	movwf	_ForwardCounter,c
  2642  001186  D000               	goto	i2l1740
  2643  001188                     i2l1740:
  2644                           
  2645                           ;interrupts.c: 177: }
  2646                           ;interrupts.c: 178: forward();
  2647  001188  EC0D  F00E         	call	_forward	;wreg free
  2648                           
  2649                           ;interrupts.c: 179: }
  2650  00118C  D086               	goto	i2l1784
  2651  00118E                     i2l1742:
  2652                           
  2653                           ;interrupts.c: 181: else if (sensorValue[1] < 90 && algorithm == LEFTWALL) {
  2654  00118E  BE0C               	btfsc	_sensorValue+3,7,c
  2655  001190  D006               	goto	i2l1744
  2656  001192  500C               	movf	_sensorValue+3,w,c
  2657  001194  E11A               	bnz	i2l1754
  2658  001196  0E5A               	movlw	90
  2659  001198  5C0B               	subwf	_sensorValue+2,w,c
  2660  00119A  B0D8               	btfsc	status,0,c
  2661  00119C  D016               	goto	i2l1754
  2662  00119E                     i2l1744:
  2663  00119E  5035               	movf	_algorithm,w,c
  2664  0011A0  A4D8               	btfss	status,2,c
  2665  0011A2  D013               	goto	i2l1754
  2666                           
  2667                           ;interrupts.c: 182: TurnRight = 1;
  2668  0011A4  0E00               	movlw	0
  2669  0011A6  6E24               	movwf	_TurnRight+1,c
  2670  0011A8  0E01               	movlw	1
  2671  0011AA  6E23               	movwf	_TurnRight,c
  2672                           
  2673                           ;interrupts.c: 183: if(justTurned == 0) {
  2674  0011AC  5036               	movf	_justTurned,w,c
  2675  0011AE  A4D8               	btfss	status,2,c
  2676  0011B0  D004               	goto	i2l1750
  2677                           
  2678                           ;interrupts.c: 184: ForwardCounter = 430;
  2679  0011B2  0E01               	movlw	1
  2680  0011B4  6E16               	movwf	_ForwardCounter+1,c
  2681  0011B6  0EAE               	movlw	174
  2682  0011B8  D003               	goto	L8
  2683  0011BA                     i2l1750:
  2684                           
  2685                           ;interrupts.c: 186: ForwardCounter = 390;
  2686  0011BA  0E01               	movlw	1
  2687  0011BC  6E16               	movwf	_ForwardCounter+1,c
  2688  0011BE  0E86               	movlw	134
  2689  0011C0                     L8:
  2690  0011C0  6E15               	movwf	_ForwardCounter,c
  2691  0011C2  D000               	goto	i2l1752
  2692  0011C4                     i2l1752:
  2693                           
  2694                           ;interrupts.c: 187: }
  2695                           ;interrupts.c: 188: forward();
  2696  0011C4  EC0D  F00E         	call	_forward	;wreg free
  2697                           
  2698                           ;interrupts.c: 189: }
  2699  0011C8  D068               	goto	i2l1784
  2700  0011CA                     i2l1754:
  2701                           
  2702                           ;interrupts.c: 191: else if ((sensorValue[0] > 90 && sensorValue[1] > 90 )
  2703                           ;interrupts.c: 192: && (sensorValue[3] > 510 && sensorValue[2] > 510) && RotateCounter <
      +                          = 0)
  2704  0011CA  BE0A               	btfsc	_sensorValue+1,7,c
  2705  0011CC  D02A               	goto	i2l1766
  2706  0011CE  500A               	movf	_sensorValue+1,w,c
  2707  0011D0  E104               	bnz	i2u133_40
  2708  0011D2  0E5B               	movlw	91
  2709  0011D4  5C09               	subwf	_sensorValue,w,c
  2710  0011D6  A0D8               	btfss	status,0,c
  2711  0011D8  D024               	goto	i2l1766
  2712  0011DA                     i2u133_40:
  2713  0011DA  BE0C               	btfsc	_sensorValue+3,7,c
  2714  0011DC  D022               	goto	i2l1766
  2715  0011DE  500C               	movf	_sensorValue+3,w,c
  2716  0011E0  E104               	bnz	i2u134_40
  2717  0011E2  0E5B               	movlw	91
  2718  0011E4  5C0B               	subwf	_sensorValue+2,w,c
  2719  0011E6  A0D8               	btfss	status,0,c
  2720  0011E8  D01C               	goto	i2l1766
  2721  0011EA                     i2u134_40:
  2722  0011EA  BE10               	btfsc	_sensorValue+7,7,c
  2723  0011EC  D01A               	goto	i2l1766
  2724  0011EE  280F               	incf	_sensorValue+6,w,c
  2725  0011F0  0E01               	movlw	1
  2726  0011F2  5810               	subwfb	_sensorValue+7,w,c
  2727  0011F4  B0D8               	btfsc	status,0,c
  2728  0011F6  BE0E               	btfsc	_sensorValue+5,7,c
  2729  0011F8  D014               	goto	i2l1766
  2730  0011FA  280D               	incf	_sensorValue+4,w,c
  2731  0011FC  0E01               	movlw	1
  2732  0011FE  580E               	subwfb	_sensorValue+5,w,c
  2733  001200  A0D8               	btfss	status,0,c
  2734  001202  D00F               	goto	i2l1766
  2735  001204  BE20               	btfsc	_RotateCounter+1,7,c
  2736  001206  D005               	goto	i2l1764
  2737  001208  5020               	movf	_RotateCounter+1,w,c
  2738  00120A  E10B               	bnz	i2l1766
  2739  00120C  041F               	decf	_RotateCounter,w,c
  2740  00120E  B0D8               	btfsc	status,0,c
  2741  001210  D008               	goto	i2l1766
  2742  001212                     i2l1764:
  2743                           
  2744                           ;interrupts.c: 193: {
  2745                           ;interrupts.c: 194: RotateCounter = 167*2;
  2746  001212  0E01               	movlw	1
  2747  001214  6E20               	movwf	_RotateCounter+1,c
  2748  001216  0E4E               	movlw	78
  2749  001218  6E1F               	movwf	_RotateCounter,c
  2750                           
  2751                           ;interrupts.c: 195: rotatingSide = LEFT;
  2752  00121A  0E00               	movlw	0
  2753  00121C  6E37               	movwf	_rotatingSide,c
  2754                           
  2755                           ;interrupts.c: 196: justTurned = 1;
  2756  00121E  0E01               	movlw	1
  2757  001220  D025               	goto	L9
  2758  001222                     i2l1766:
  2759                           
  2760                           ;interrupts.c: 199: else if ((sensorValue[0] > 90 && sensorValue[1] > 90) && sensorValue
      +                          [3] < 200 && sensorValue[2] < 200 ) {
  2761  001222  BE0A               	btfsc	_sensorValue+1,7,c
  2762  001224  D025               	goto	i2l1776
  2763  001226  500A               	movf	_sensorValue+1,w,c
  2764  001228  E104               	bnz	i2u138_40
  2765  00122A  0E5B               	movlw	91
  2766  00122C  5C09               	subwf	_sensorValue,w,c
  2767  00122E  A0D8               	btfss	status,0,c
  2768  001230  D01F               	goto	i2l1776
  2769  001232                     i2u138_40:
  2770  001232  BE0C               	btfsc	_sensorValue+3,7,c
  2771  001234  D01D               	goto	i2l1776
  2772  001236  500C               	movf	_sensorValue+3,w,c
  2773  001238  E104               	bnz	i2u139_40
  2774  00123A  0E5B               	movlw	91
  2775  00123C  5C0B               	subwf	_sensorValue+2,w,c
  2776  00123E  A0D8               	btfss	status,0,c
  2777  001240  D017               	goto	i2l1776
  2778  001242                     i2u139_40:
  2779  001242  BE10               	btfsc	_sensorValue+7,7,c
  2780  001244  D006               	goto	i2l1772
  2781  001246  5010               	movf	_sensorValue+7,w,c
  2782  001248  E113               	bnz	i2l1776
  2783  00124A  0EC8               	movlw	200
  2784  00124C  5C0F               	subwf	_sensorValue+6,w,c
  2785  00124E  B0D8               	btfsc	status,0,c
  2786  001250  D00F               	goto	i2l1776
  2787  001252                     i2l1772:
  2788  001252  BE0E               	btfsc	_sensorValue+5,7,c
  2789  001254  D006               	goto	i2l1774
  2790  001256  500E               	movf	_sensorValue+5,w,c
  2791  001258  E10B               	bnz	i2l1776
  2792  00125A  0EC8               	movlw	200
  2793  00125C  5C0D               	subwf	_sensorValue+4,w,c
  2794  00125E  B0D8               	btfsc	status,0,c
  2795  001260  D007               	goto	i2l1776
  2796  001262                     i2l1774:
  2797                           
  2798                           ;interrupts.c: 201: ControllerCounter = 3;
  2799  001262  0E00               	movlw	0
  2800  001264  6E12               	movwf	_ControllerCounter+1,c
  2801  001266  0E03               	movlw	3
  2802  001268  6E11               	movwf	_ControllerCounter,c
  2803                           
  2804                           ;interrupts.c: 202: justTurned = 0;
  2805  00126A  0E00               	movlw	0
  2806  00126C                     L9:
  2807  00126C  6E36               	movwf	_justTurned,c
  2808                           
  2809                           ;interrupts.c: 204: }
  2810  00126E  D015               	goto	i2l1784
  2811  001270                     i2l1776:
  2812                           
  2813                           ;interrupts.c: 210: else {
  2814                           ;interrupts.c: 211: motorCounterUpdate(RIGHT,0);
  2815  001270  0E00               	movlw	0
  2816  001272  6E49               	movwf	motorCounterUpdate@reverse,c
  2817  001274  0E01               	movlw	1
  2818  001276  EC6C  F00B         	call	_motorCounterUpdate
  2819                           
  2820                           ;interrupts.c: 212: motorCounterUpdate(LEFT,0);
  2821  00127A  0E00               	movlw	0
  2822  00127C  6E49               	movwf	motorCounterUpdate@reverse,c
  2823  00127E  0E00               	movlw	0
  2824  001280  EC6C  F00B         	call	_motorCounterUpdate
  2825                           
  2826                           ;interrupts.c: 213: justTurned = 0;
  2827  001284  0E00               	movlw	0
  2828  001286  6E36               	movwf	_justTurned,c
  2829                           
  2830                           ;interrupts.c: 214: TurnLeft = 0;
  2831  001288  0E00               	movlw	0
  2832  00128A  6E22               	movwf	_TurnLeft+1,c
  2833  00128C  0E00               	movlw	0
  2834  00128E  6E21               	movwf	_TurnLeft,c
  2835  001290                     i2l1782:
  2836                           
  2837                           ;interrupts.c: 215: TurnRight = 0;
  2838  001290  0E00               	movlw	0
  2839  001292  6E24               	movwf	_TurnRight+1,c
  2840  001294  0E00               	movlw	0
  2841  001296  6E23               	movwf	_TurnRight,c
  2842  001298  D000               	goto	i2l1784
  2843  00129A                     i2l1784:
  2844                           
  2845                           ;interrupts.c: 216: }
  2846                           ;interrupts.c: 217: moveMouse(merge(LMotorCounter,RMotorCounter));
  2847  00129A  C034  F049         	movff	_RMotorCounter,merge@right
  2848  00129E  5033               	movf	_LMotorCounter,w,c
  2849  0012A0  EC36  F00E         	call	_merge
  2850  0012A4  EC43  F00E         	call	_moveMouse
  2851                           
  2852                           ;interrupts.c: 218: MotorDelayCounter = 0;
  2853  0012A8  0E00               	movlw	0
  2854  0012AA  6E1A               	movwf	_MotorDelayCounter+1,c
  2855  0012AC  0E00               	movlw	0
  2856  0012AE  6E19               	movwf	_MotorDelayCounter,c
  2857  0012B0  D000               	goto	i2l1786
  2858  0012B2                     i2l1786:
  2859                           
  2860                           ;interrupts.c: 219: }
  2861                           ;interrupts.c: 221: MotorDelayCounter++;
  2862  0012B2  4A19               	infsnz	_MotorDelayCounter,f,c
  2863  0012B4  2A1A               	incf	_MotorDelayCounter+1,f,c
  2864                           
  2865                           ;interrupts.c: 222: INTCONbits.TMR0IF = 0;
  2866  0012B6  94F2               	bcf	intcon,2,c	;volatile
  2867  0012B8  D000               	goto	i2l104
  2868  0012BA                     i2l104:
  2869  0012BA  C05D  FFF5         	movff	??_high_isr+13,tablat
  2870  0012BE  C05C  FFF8         	movff	??_high_isr+12,tblptru
  2871  0012C2  C05B  FFF7         	movff	??_high_isr+11,tblptrh
  2872  0012C6  C05A  FFF6         	movff	??_high_isr+10,tblptrl
  2873  0012CA  C059  FFF4         	movff	??_high_isr+9,prodh
  2874  0012CE  C058  FFF3         	movff	??_high_isr+8,prodl
  2875  0012D2  C057  FFDA         	movff	??_high_isr+7,fsr2h
  2876  0012D6  C056  FFD9         	movff	??_high_isr+6,fsr2l
  2877  0012DA  C055  FFE2         	movff	??_high_isr+5,fsr1h
  2878  0012DE  C054  FFE1         	movff	??_high_isr+4,fsr1l
  2879  0012E2  C053  FFEA         	movff	??_high_isr+3,fsr0h
  2880  0012E6  C052  FFE9         	movff	??_high_isr+2,fsr0l
  2881  0012EA  C051  FFFB         	movff	??_high_isr+1,pclatu
  2882  0012EE  C050  FFFA         	movff	??_high_isr,pclath
  2883  0012F2  0011               	retfie		f
  2884  0012F4                     __end_of_high_isr:
  2885                           	opt stack 0
  2886                           pclatu	equ	0xFFB
  2887                           pclath	equ	0xFFA
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           intcon	equ	0xFF2
  2895                           intcon2	equ	0xFF1
  2896                           postinc0	equ	0xFEE
  2897                           fsr0h	equ	0xFEA
  2898                           fsr0l	equ	0xFE9
  2899                           wreg	equ	0xFE8
  2900                           fsr1h	equ	0xFE2
  2901                           fsr1l	equ	0xFE1
  2902                           bsr	equ	0xFE0
  2903                           postinc2	equ	0xFDE
  2904                           postdec2	equ	0xFDD
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _rotate *****************
  2910 ;; Defined at:
  2911 ;;		line 412 in file "interrupts.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  side            1    wreg     enum E4145
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  side            1   19[COMRAM] enum E4145
  2916 ;; Return value:  Size  Location     Type
  2917 ;;		None               void
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        1 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    1
  2932 ;; This function calls:
  2933 ;;		_motorCounterUpdate
  2934 ;; This function is called by:
  2935 ;;		_high_isr
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text14
  2940  001AD6                     __ptext14:
  2941                           	opt stack 0
  2942  001AD6                     _rotate:
  2943                           	opt stack 24
  2944                           
  2945                           ;incstack = 0
  2946                           ;rotate@side stored from wreg
  2947  001AD6  6E4B               	movwf	rotate@side,c
  2948                           
  2949                           ;interrupts.c: 414: if (side == LEFT){
  2950  001AD8  504B               	movf	rotate@side,w,c
  2951  001ADA  A4D8               	btfss	status,2,c
  2952  001ADC  D00B               	goto	i2l1614
  2953                           
  2954                           ;interrupts.c: 415: motorCounterUpdate(RIGHT,0);
  2955  001ADE  0E00               	movlw	0
  2956  001AE0  6E49               	movwf	motorCounterUpdate@reverse,c
  2957  001AE2  0E01               	movlw	1
  2958  001AE4  EC6C  F00B         	call	_motorCounterUpdate
  2959                           
  2960                           ;interrupts.c: 416: motorCounterUpdate(LEFT,1);
  2961  001AE8  0E01               	movlw	1
  2962  001AEA  6E49               	movwf	motorCounterUpdate@reverse,c
  2963  001AEC  0E00               	movlw	0
  2964  001AEE  EC6C  F00B         	call	_motorCounterUpdate
  2965                           
  2966                           ;interrupts.c: 417: } else {
  2967  001AF2  D00B               	goto	i2l1616
  2968  001AF4                     i2l1614:
  2969                           
  2970                           ;interrupts.c: 418: motorCounterUpdate(LEFT,0);
  2971  001AF4  0E00               	movlw	0
  2972  001AF6  6E49               	movwf	motorCounterUpdate@reverse,c
  2973  001AF8  0E00               	movlw	0
  2974  001AFA  EC6C  F00B         	call	_motorCounterUpdate
  2975                           
  2976                           ;interrupts.c: 419: motorCounterUpdate(RIGHT,1);
  2977  001AFE  0E01               	movlw	1
  2978  001B00  6E49               	movwf	motorCounterUpdate@reverse,c
  2979  001B02  0E01               	movlw	1
  2980  001B04  EC6C  F00B         	call	_motorCounterUpdate
  2981  001B08  D000               	goto	i2l1616
  2982  001B0A                     i2l1616:
  2983                           
  2984                           ;interrupts.c: 420: }
  2985                           ;interrupts.c: 421: RotateCounter--;
  2986  001B0A  061F               	decf	_RotateCounter,f,c
  2987  001B0C  A0D8               	btfss	status,0,c
  2988  001B0E  0620               	decf	_RotateCounter+1,f,c
  2989  001B10  0012               	return		;funcret
  2990  001B12                     __end_of_rotate:
  2991                           	opt stack 0
  2992                           pclatu	equ	0xFFB
  2993                           pclath	equ	0xFFA
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           prodh	equ	0xFF4
  2999                           prodl	equ	0xFF3
  3000                           intcon	equ	0xFF2
  3001                           intcon2	equ	0xFF1
  3002                           postinc0	equ	0xFEE
  3003                           fsr0h	equ	0xFEA
  3004                           fsr0l	equ	0xFE9
  3005                           wreg	equ	0xFE8
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           bsr	equ	0xFE0
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _moveMouse *****************
  3016 ;; Defined at:
  3017 ;;		line 319 in file "interrupts.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  action          1    wreg     unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  action          1   17[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; This function calls:
  3038 ;;		Nothing
  3039 ;; This function is called by:
  3040 ;;		_high_isr
  3041 ;;		_FrontController
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text15
  3046  001C86                     __ptext15:
  3047                           	opt stack 0
  3048  001C86                     _moveMouse:
  3049                           	opt stack 25
  3050                           
  3051                           ;incstack = 0
  3052                           ;moveMouse@action stored from wreg
  3053  001C86  6E49               	movwf	moveMouse@action,c
  3054                           
  3055                           ;interrupts.c: 321: LATC = action;
  3056  001C88  C049  FF8B         	movff	moveMouse@action,3979	;volatile
  3057  001C8C  0012               	return		;funcret
  3058  001C8E                     __end_of_moveMouse:
  3059                           	opt stack 0
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           postinc0	equ	0xFEE
  3071                           fsr0h	equ	0xFEA
  3072                           fsr0l	equ	0xFE9
  3073                           wreg	equ	0xFE8
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           bsr	equ	0xFE0
  3077                           postinc2	equ	0xFDE
  3078                           postdec2	equ	0xFDD
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _merge *****************
  3084 ;; Defined at:
  3085 ;;		line 312 in file "interrupts.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  left            1    wreg     unsigned char 
  3088 ;;  right           1   17[COMRAM] unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  left            1   18[COMRAM] unsigned char 
  3091 ;;  merged          1   19[COMRAM] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      unsigned char 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_high_isr
  3111 ;;		_FrontController
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text16
  3116  001C6C                     __ptext16:
  3117                           	opt stack 0
  3118  001C6C                     _merge:
  3119                           	opt stack 25
  3120                           
  3121                           ;incstack = 0
  3122                           ;merge@left stored from wreg
  3123  001C6C  6E4A               	movwf	merge@left,c
  3124                           
  3125                           ;interrupts.c: 314: unsigned char merged;
  3126                           ;interrupts.c: 315: merged = left + (right << 4);
  3127  001C6E  3849               	swapf	merge@right,w,c
  3128  001C70  0BF0               	andlw	240
  3129  001C72  244A               	addwf	merge@left,w,c
  3130  001C74  6E4B               	movwf	merge@merged,c
  3131                           
  3132                           ;interrupts.c: 316: return merged;
  3133  001C76  504B               	movf	merge@merged,w,c
  3134  001C78  D000               	goto	i2l148
  3135  001C7A                     i2l148:
  3136  001C7A  0012               	return		;funcret
  3137  001C7C                     __end_of_merge:
  3138                           	opt stack 0
  3139                           pclatu	equ	0xFFB
  3140                           pclath	equ	0xFFA
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           intcon	equ	0xFF2
  3148                           intcon2	equ	0xFF1
  3149                           postinc0	equ	0xFEE
  3150                           fsr0h	equ	0xFEA
  3151                           fsr0l	equ	0xFE9
  3152                           wreg	equ	0xFE8
  3153                           fsr1h	equ	0xFE2
  3154                           fsr1l	equ	0xFE1
  3155                           bsr	equ	0xFE0
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _forward *****************
  3163 ;; Defined at:
  3164 ;;		line 457 in file "interrupts.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;		None               void
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    1
  3185 ;; This function calls:
  3186 ;;		_motorCounterUpdate
  3187 ;; This function is called by:
  3188 ;;		_high_isr
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text17
  3193  001C1A                     __ptext17:
  3194                           	opt stack 0
  3195  001C1A                     _forward:
  3196                           	opt stack 24
  3197                           
  3198                           ;interrupts.c: 459: motorCounterUpdate(RIGHT,0);
  3199                           
  3200                           ;incstack = 0
  3201  001C1A  0E00               	movlw	0
  3202  001C1C  6E49               	movwf	motorCounterUpdate@reverse,c
  3203  001C1E  0E01               	movlw	1
  3204  001C20  EC6C  F00B         	call	_motorCounterUpdate
  3205                           
  3206                           ;interrupts.c: 460: motorCounterUpdate(LEFT,0);
  3207  001C24  0E00               	movlw	0
  3208  001C26  6E49               	movwf	motorCounterUpdate@reverse,c
  3209  001C28  0E00               	movlw	0
  3210  001C2A  EC6C  F00B         	call	_motorCounterUpdate
  3211                           
  3212                           ;interrupts.c: 461: ForwardCounter--;
  3213  001C2E  0615               	decf	_ForwardCounter,f,c
  3214  001C30  A0D8               	btfss	status,0,c
  3215  001C32  0616               	decf	_ForwardCounter+1,f,c
  3216  001C34  0012               	return		;funcret
  3217  001C36                     __end_of_forward:
  3218                           	opt stack 0
  3219                           pclatu	equ	0xFFB
  3220                           pclath	equ	0xFFA
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           intcon	equ	0xFF2
  3228                           intcon2	equ	0xFF1
  3229                           postinc0	equ	0xFEE
  3230                           fsr0h	equ	0xFEA
  3231                           fsr0l	equ	0xFE9
  3232                           wreg	equ	0xFE8
  3233                           fsr1h	equ	0xFE2
  3234                           fsr1l	equ	0xFE1
  3235                           bsr	equ	0xFE0
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _Reversing *****************
  3243 ;; Defined at:
  3244 ;;		line 436 in file "interrupts.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    1
  3265 ;; This function calls:
  3266 ;;		_motorCounterUpdate
  3267 ;; This function is called by:
  3268 ;;		_high_isr
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text18
  3273  001C36                     __ptext18:
  3274                           	opt stack 0
  3275  001C36                     _Reversing:
  3276                           	opt stack 24
  3277                           
  3278                           ;interrupts.c: 438: motorCounterUpdate(RIGHT,1);
  3279                           
  3280                           ;incstack = 0
  3281  001C36  0E01               	movlw	1
  3282  001C38  6E49               	movwf	motorCounterUpdate@reverse,c
  3283  001C3A  0E01               	movlw	1
  3284  001C3C  EC6C  F00B         	call	_motorCounterUpdate
  3285                           
  3286                           ;interrupts.c: 439: motorCounterUpdate(LEFT,1);
  3287  001C40  0E01               	movlw	1
  3288  001C42  6E49               	movwf	motorCounterUpdate@reverse,c
  3289  001C44  0E00               	movlw	0
  3290  001C46  EC6C  F00B         	call	_motorCounterUpdate
  3291                           
  3292                           ;interrupts.c: 440: ReverseCounter--;
  3293  001C4A  061D               	decf	_ReverseCounter,f,c
  3294  001C4C  A0D8               	btfss	status,0,c
  3295  001C4E  061E               	decf	_ReverseCounter+1,f,c
  3296  001C50  0012               	return		;funcret
  3297  001C52                     __end_of_Reversing:
  3298                           	opt stack 0
  3299                           pclatu	equ	0xFFB
  3300                           pclath	equ	0xFFA
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           intcon2	equ	0xFF1
  3309                           postinc0	equ	0xFEE
  3310                           fsr0h	equ	0xFEA
  3311                           fsr0l	equ	0xFE9
  3312                           wreg	equ	0xFE8
  3313                           fsr1h	equ	0xFE2
  3314                           fsr1l	equ	0xFE1
  3315                           bsr	equ	0xFE0
  3316                           postinc2	equ	0xFDE
  3317                           postdec2	equ	0xFDD
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function _KController *****************
  3323 ;; Defined at:
  3324 ;;		line 332 in file "interrupts.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;		None
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  diff            2   22[COMRAM] int 
  3329 ;;  correctTo       1   21[COMRAM] enum E4145
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;Total ram usage:        5 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    1
  3346 ;; This function calls:
  3347 ;;		_ABS
  3348 ;;		_motorCounterUpdate
  3349 ;; This function is called by:
  3350 ;;		_high_isr
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text19
  3355  00198E                     __ptext19:
  3356                           	opt stack 0
  3357  00198E                     _KController:
  3358                           	opt stack 24
  3359                           
  3360                           ;interrupts.c: 334: Side correctTo;
  3361                           ;interrupts.c: 335: int diff = 0;
  3362                           
  3363                           ;incstack = 0
  3364  00198E  0E00               	movlw	0
  3365  001990  6E4F               	movwf	KController@diff+1,c
  3366  001992  0E00               	movlw	0
  3367  001994  6E4E               	movwf	KController@diff,c
  3368                           
  3369                           ;interrupts.c: 336: if(ignoreControll > 0){
  3370  001996  505E               	movf	_ignoreControll,w,c
  3371  001998  B4D8               	btfsc	status,2,c
  3372  00199A  D00F               	goto	i2l1578
  3373                           
  3374                           ;interrupts.c: 337: motorCounterUpdate(RIGHT,0);
  3375  00199C  0E00               	movlw	0
  3376  00199E  6E49               	movwf	motorCounterUpdate@reverse,c
  3377  0019A0  0E01               	movlw	1
  3378  0019A2  EC6C  F00B         	call	_motorCounterUpdate
  3379                           
  3380                           ;interrupts.c: 338: motorCounterUpdate(LEFT,0);
  3381  0019A6  0E00               	movlw	0
  3382  0019A8  6E49               	movwf	motorCounterUpdate@reverse,c
  3383  0019AA  0E00               	movlw	0
  3384  0019AC  EC6C  F00B         	call	_motorCounterUpdate
  3385                           
  3386                           ;interrupts.c: 339: ignoreControll--;
  3387  0019B0  065E               	decf	_ignoreControll,f,c
  3388                           
  3389                           ;interrupts.c: 340: ControllerCounter--;
  3390  0019B2  0611               	decf	_ControllerCounter,f,c
  3391  0019B4  A0D8               	btfss	status,0,c
  3392  0019B6  0612               	decf	_ControllerCounter+1,f,c
  3393                           
  3394                           ;interrupts.c: 341: return;
  3395  0019B8  D04D               	goto	i2l159
  3396  0019BA                     i2l1578:
  3397                           
  3398                           ;interrupts.c: 342: }
  3399                           ;interrupts.c: 344: diff = ABS(sensorValue[1] - sensorValue[0]);
  3400  0019BA  C009  F04B         	movff	_sensorValue,??_KController
  3401  0019BE  C00A  F04C         	movff	_sensorValue+1,??_KController+1
  3402  0019C2  1E4B               	comf	??_KController,f,c
  3403  0019C4  1E4C               	comf	??_KController+1,f,c
  3404  0019C6  4A4B               	infsnz	??_KController,f,c
  3405  0019C8  2A4C               	incf	??_KController+1,f,c
  3406  0019CA  500B               	movf	_sensorValue+2,w,c
  3407  0019CC  244B               	addwf	??_KController,w,c
  3408  0019CE  6E49               	movwf	ABS@x,c
  3409  0019D0  500C               	movf	_sensorValue+3,w,c
  3410  0019D2  204C               	addwfc	??_KController+1,w,c
  3411  0019D4  6E4A               	movwf	ABS@x+1,c
  3412  0019D6  EC29  F00E         	call	_ABS	;wreg free
  3413  0019DA  C049  F04E         	movff	?_ABS,KController@diff
  3414  0019DE  C04A  F04F         	movff	?_ABS+1,KController@diff+1
  3415                           
  3416                           ;interrupts.c: 346: if(sensorValue[0] > sensorValue[1])
  3417  0019E2  5009               	movf	_sensorValue,w,c
  3418  0019E4  5C0B               	subwf	_sensorValue+2,w,c
  3419  0019E6  500C               	movf	_sensorValue+3,w,c
  3420  0019E8  0A80               	xorlw	128
  3421  0019EA  6E4B               	movwf	??_KController& (0+255),c
  3422  0019EC  500A               	movf	_sensorValue+1,w,c
  3423  0019EE  0A80               	xorlw	128
  3424  0019F0  584B               	subwfb	??_KController& (0+255),w,c
  3425  0019F2  B0D8               	btfsc	status,0,c
  3426  0019F4  D008               	goto	i2l1586
  3427                           
  3428                           ;interrupts.c: 347: {
  3429                           ;interrupts.c: 348: correctTo = LEFT;
  3430  0019F6  0E00               	movlw	0
  3431  0019F8  6E4D               	movwf	KController@correctTo,c
  3432                           
  3433                           ;interrupts.c: 349: motorCounterUpdate(correctTo,0);
  3434  0019FA  0E00               	movlw	0
  3435  0019FC  6E49               	movwf	motorCounterUpdate@reverse,c
  3436  0019FE  504D               	movf	KController@correctTo,w,c
  3437  001A00  EC6C  F00B         	call	_motorCounterUpdate
  3438                           
  3439                           ;interrupts.c: 350: }
  3440  001A04  D008               	goto	i2l1590
  3441  001A06                     i2l1586:
  3442                           
  3443                           ;interrupts.c: 351: else
  3444                           ;interrupts.c: 352: {
  3445                           ;interrupts.c: 353: correctTo = RIGHT;
  3446  001A06  0E01               	movlw	1
  3447  001A08  6E4D               	movwf	KController@correctTo,c
  3448                           
  3449                           ;interrupts.c: 354: motorCounterUpdate(correctTo,0);
  3450  001A0A  0E00               	movlw	0
  3451  001A0C  6E49               	movwf	motorCounterUpdate@reverse,c
  3452  001A0E  504D               	movf	KController@correctTo,w,c
  3453  001A10  EC6C  F00B         	call	_motorCounterUpdate
  3454  001A14  D000               	goto	i2l1590
  3455  001A16                     i2l1590:
  3456                           
  3457                           ;interrupts.c: 355: }
  3458                           ;interrupts.c: 357: if(diff > 60)
  3459  001A16  BE4F               	btfsc	KController@diff+1,7,c
  3460  001A18  D008               	goto	i2l1594
  3461  001A1A  504F               	movf	KController@diff+1,w,c
  3462  001A1C  E104               	bnz	i2u103_40
  3463  001A1E  0E3D               	movlw	61
  3464  001A20  5C4E               	subwf	KController@diff,w,c
  3465  001A22  A0D8               	btfss	status,0,c
  3466  001A24  D002               	goto	i2l1594
  3467  001A26                     i2u103_40:
  3468                           
  3469                           ;interrupts.c: 358: ignoreControll = 1;
  3470  001A26  0E01               	movlw	1
  3471  001A28  D013               	goto	L11
  3472  001A2A                     i2l1594:
  3473                           
  3474                           ;interrupts.c: 359: else if(diff <= 60 && diff > 20)
  3475  001A2A  BE4F               	btfsc	KController@diff+1,7,c
  3476  001A2C  D006               	goto	i2l1596
  3477  001A2E  504F               	movf	KController@diff+1,w,c
  3478  001A30  E10E               	bnz	i2l1600
  3479  001A32  0E3D               	movlw	61
  3480  001A34  5C4E               	subwf	KController@diff,w,c
  3481  001A36  B0D8               	btfsc	status,0,c
  3482  001A38  D00A               	goto	i2l1600
  3483  001A3A                     i2l1596:
  3484  001A3A  BE4F               	btfsc	KController@diff+1,7,c
  3485  001A3C  D008               	goto	i2l1600
  3486  001A3E  504F               	movf	KController@diff+1,w,c
  3487  001A40  E104               	bnz	i2u105_40
  3488  001A42  0E15               	movlw	21
  3489  001A44  5C4E               	subwf	KController@diff,w,c
  3490  001A46  A0D8               	btfss	status,0,c
  3491  001A48  D002               	goto	i2l1600
  3492  001A4A                     i2u105_40:
  3493                           
  3494                           ;interrupts.c: 360: ignoreControll = 5;
  3495  001A4A  0E05               	movlw	5
  3496  001A4C  D001               	goto	L11
  3497  001A4E                     i2l1600:
  3498                           
  3499                           ;interrupts.c: 361: else
  3500                           ;interrupts.c: 362: ignoreControll = 10;
  3501  001A4E  0E0A               	movlw	10
  3502  001A50                     L11:
  3503  001A50  6E5E               	movwf	_ignoreControll,c
  3504  001A52  D000               	goto	i2l159
  3505  001A54                     i2l159:
  3506  001A54  0012               	return		;funcret
  3507  001A56                     __end_of_KController:
  3508                           	opt stack 0
  3509                           pclatu	equ	0xFFB
  3510                           pclath	equ	0xFFA
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           intcon2	equ	0xFF1
  3519                           postinc0	equ	0xFEE
  3520                           fsr0h	equ	0xFEA
  3521                           fsr0l	equ	0xFE9
  3522                           wreg	equ	0xFE8
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           bsr	equ	0xFE0
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _motorCounterUpdate *****************
  3533 ;; Defined at:
  3534 ;;		line 267 in file "interrupts.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  side            1    wreg     enum E4145
  3537 ;;  reverse         1   17[COMRAM] unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  side            1   18[COMRAM] enum E4145
  3540 ;; Return value:  Size  Location     Type
  3541 ;;		None               void
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_high_isr
  3559 ;;		_KController
  3560 ;;		_rotate
  3561 ;;		_Reversing
  3562 ;;		_forward
  3563 ;;		_FrontController
  3564 ;;		_smoothTurn
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text20
  3569  0016D8                     __ptext20:
  3570                           	opt stack 0
  3571  0016D8                     _motorCounterUpdate:
  3572                           	opt stack 24
  3573                           
  3574                           ;incstack = 0
  3575                           ;motorCounterUpdate@side stored from wreg
  3576  0016D8  6E4A               	movwf	motorCounterUpdate@side,c
  3577                           
  3578                           ;interrupts.c: 269: if(side == LEFT && reverse == 1)
  3579  0016DA  504A               	movf	motorCounterUpdate@side,w,c
  3580  0016DC  A4D8               	btfss	status,2,c
  3581  0016DE  D01B               	goto	i2l1468
  3582  0016E0  0449               	decf	motorCounterUpdate@reverse,w,c
  3583  0016E2  B4D8               	btfsc	status,2,c
  3584  0016E4  D00B               	goto	i2l1466
  3585  0016E6  D017               	goto	i2l1468
  3586                           
  3587                           ;interrupts.c: 270: {
  3588                           ;interrupts.c: 271: switch(LMotorCounter)
  3589  0016E8  D009               	goto	i2l1466
  3590  0016EA                     i2l1456:
  3591  0016EA  0E02               	movlw	2
  3592  0016EC  D004               	goto	L14
  3593  0016EE                     i2l1458:
  3594  0016EE  0E04               	movlw	4
  3595  0016F0  D002               	goto	L14
  3596                           
  3597                           ;interrupts.c: 275: case 0b00000100: LMotorCounter = 0b00001000; break;
  3598  0016F2  D03E               	goto	i2l1500
  3599                           
  3600                           ;interrupts.c: 276: case 0b00001000: LMotorCounter = 0b00000001; break;
  3601  0016F4  D039               	goto	i2l1494
  3602  0016F6                     L14:
  3603  0016F6  6E33               	movwf	_LMotorCounter,c
  3604  0016F8  D068               	goto	i2l145
  3605                           
  3606                           ;interrupts.c: 277: default: LMotorCounter = 0b00000001;
  3607  0016FA  D036               	goto	i2l1494
  3608  0016FC                     i2l1466:
  3609  0016FC  5033               	movf	_LMotorCounter,w,c
  3610                           
  3611                           ; Switch size 1, requested type "space"
  3612                           ; Number of cases is 4, Range of values is 1 to 8
  3613                           ; switch strategies available:
  3614                           ; Name         Instructions Cycles
  3615                           ; simple_byte           13     7 (average)
  3616                           ;	Chosen strategy is simple_byte
  3617  0016FE  0A01               	xorlw	1	; case 1
  3618  001700  B4D8               	btfsc	status,2,c
  3619  001702  D7F3               	goto	i2l1456
  3620  001704  0A03               	xorlw	3	; case 2
  3621  001706  B4D8               	btfsc	status,2,c
  3622  001708  D7F2               	goto	i2l1458
  3623  00170A  0A06               	xorlw	6	; case 4
  3624  00170C  B4D8               	btfsc	status,2,c
  3625  00170E  D030               	goto	i2l1500
  3626  001710  0A0C               	xorlw	12	; case 8
  3627  001712  D02A               	goto	i2l1494
  3628                           
  3629                           ;interrupts.c: 279: } else if(side == RIGHT && reverse == 1)
  3630  001714  D05A               	goto	i2l145
  3631  001716                     i2l1468:
  3632  001716  044A               	decf	motorCounterUpdate@side,w,c
  3633  001718  A4D8               	btfss	status,2,c
  3634  00171A  D01D               	goto	i2l1486
  3635  00171C  0449               	decf	motorCounterUpdate@reverse,w,c
  3636  00171E  B4D8               	btfsc	status,2,c
  3637  001720  D00B               	goto	i2l1484
  3638  001722  D019               	goto	i2l1486
  3639                           
  3640                           ;interrupts.c: 280: {
  3641                           ;interrupts.c: 281: switch(RMotorCounter)
  3642  001724  D009               	goto	i2l1484
  3643  001726                     i2l1474:
  3644  001726  0E08               	movlw	8
  3645  001728  D040               	goto	L22
  3646  00172A                     i2l1476:
  3647  00172A  0E01               	movlw	1
  3648  00172C  D03E               	goto	L22
  3649  00172E                     i2l1478:
  3650  00172E  0E02               	movlw	2
  3651  001730  D03C               	goto	L22
  3652  001732                     i2l1480:
  3653  001732  0E04               	movlw	4
  3654  001734  D03A               	goto	L22
  3655                           
  3656                           ;interrupts.c: 287: default: RMotorCounter = 0b00001000;
  3657  001736  D7F7               	goto	i2l1474
  3658  001738                     i2l1484:
  3659  001738  5034               	movf	_RMotorCounter,w,c
  3660                           
  3661                           ; Switch size 1, requested type "space"
  3662                           ; Number of cases is 4, Range of values is 1 to 8
  3663                           ; switch strategies available:
  3664                           ; Name         Instructions Cycles
  3665                           ; simple_byte           13     7 (average)
  3666                           ;	Chosen strategy is simple_byte
  3667  00173A  0A01               	xorlw	1	; case 1
  3668  00173C  B4D8               	btfsc	status,2,c
  3669  00173E  D7F3               	goto	i2l1474
  3670  001740  0A03               	xorlw	3	; case 2
  3671  001742  B4D8               	btfsc	status,2,c
  3672  001744  D7F2               	goto	i2l1476
  3673  001746  0A06               	xorlw	6	; case 4
  3674  001748  B4D8               	btfsc	status,2,c
  3675  00174A  D7F1               	goto	i2l1478
  3676  00174C  0A0C               	xorlw	12	; case 8
  3677  00174E  B4D8               	btfsc	status,2,c
  3678  001750  D7F0               	goto	i2l1480
  3679  001752  D7E9               	goto	i2l1474
  3680                           
  3681                           ;interrupts.c: 289: } else if(side == LEFT && reverse == 0)
  3682  001754  D03A               	goto	i2l145
  3683  001756                     i2l1486:
  3684  001756  504A               	movf	motorCounterUpdate@side,w,c
  3685  001758  A4D8               	btfss	status,2,c
  3686  00175A  D01B               	goto	i2l1504
  3687  00175C  5049               	movf	motorCounterUpdate@reverse,w,c
  3688  00175E  B4D8               	btfsc	status,2,c
  3689  001760  D009               	goto	i2l1502
  3690  001762  D017               	goto	i2l1504
  3691                           
  3692                           ;interrupts.c: 290: {
  3693                           ;interrupts.c: 291: switch(LMotorCounter)
  3694  001764  D007               	goto	i2l1502
  3695                           
  3696                           ;interrupts.c: 292: {
  3697                           ;interrupts.c: 293: case 0b00000001: LMotorCounter = 0b00001000; break;
  3698  001766  D004               	goto	i2l1500
  3699  001768                     i2l1494:
  3700  001768  0E01               	movlw	1
  3701  00176A  D7C5               	goto	L14
  3702                           
  3703                           ;interrupts.c: 295: case 0b00000100: LMotorCounter = 0b00000010; break;
  3704  00176C  D7BE               	goto	i2l1456
  3705                           
  3706                           ;interrupts.c: 296: case 0b00001000: LMotorCounter = 0b00000100; break;
  3707  00176E  D7BF               	goto	i2l1458
  3708  001770                     i2l1500:
  3709  001770  0E08               	movlw	8
  3710  001772  D7C1               	goto	L14
  3711  001774                     i2l1502:
  3712  001774  5033               	movf	_LMotorCounter,w,c
  3713                           
  3714                           ; Switch size 1, requested type "space"
  3715                           ; Number of cases is 4, Range of values is 1 to 8
  3716                           ; switch strategies available:
  3717                           ; Name         Instructions Cycles
  3718                           ; simple_byte           13     7 (average)
  3719                           ;	Chosen strategy is simple_byte
  3720  001776  0A01               	xorlw	1	; case 1
  3721  001778  B4D8               	btfsc	status,2,c
  3722  00177A  D7FA               	goto	i2l1500
  3723  00177C  0A03               	xorlw	3	; case 2
  3724  00177E  B4D8               	btfsc	status,2,c
  3725  001780  D7F3               	goto	i2l1494
  3726  001782  0A06               	xorlw	6	; case 4
  3727  001784  B4D8               	btfsc	status,2,c
  3728  001786  D7B1               	goto	i2l1456
  3729  001788  0A0C               	xorlw	12	; case 8
  3730  00178A  B4D8               	btfsc	status,2,c
  3731  00178C  D7B0               	goto	i2l1458
  3732  00178E  D7F0               	goto	i2l1500
  3733                           
  3734                           ;interrupts.c: 299: } else if(side == RIGHT && reverse == 0)
  3735  001790  D01C               	goto	i2l145
  3736  001792                     i2l1504:
  3737  001792  044A               	decf	motorCounterUpdate@side,w,c
  3738  001794  A4D8               	btfss	status,2,c
  3739  001796  D019               	goto	i2l145
  3740  001798  5049               	movf	motorCounterUpdate@reverse,w,c
  3741  00179A  B4D8               	btfsc	status,2,c
  3742  00179C  D009               	goto	i2l1520
  3743  00179E  D015               	goto	i2l145
  3744                           
  3745                           ;interrupts.c: 300: {
  3746                           ;interrupts.c: 301: switch(RMotorCounter)
  3747  0017A0  D007               	goto	i2l1520
  3748                           
  3749                           ;interrupts.c: 302: {
  3750                           ;interrupts.c: 303: case 0b00000001: RMotorCounter = 0b00000010; break;
  3751  0017A2  D7C5               	goto	i2l1478
  3752                           
  3753                           ;interrupts.c: 304: case 0b00000010: RMotorCounter = 0b00000100; break;
  3754  0017A4  D7C6               	goto	i2l1480
  3755                           
  3756                           ;interrupts.c: 305: case 0b00000100: RMotorCounter = 0b00001000; break;
  3757  0017A6  D7BF               	goto	i2l1474
  3758                           
  3759                           ;interrupts.c: 306: case 0b00001000: RMotorCounter = 0b00000001; break;
  3760  0017A8  D7C0               	goto	i2l1476
  3761  0017AA                     L22:
  3762  0017AA  6E34               	movwf	_RMotorCounter,c
  3763  0017AC  D00E               	goto	i2l145
  3764                           
  3765                           ;interrupts.c: 307: default: RMotorCounter = 0b00000001;
  3766  0017AE  D7BD               	goto	i2l1476
  3767  0017B0                     i2l1520:
  3768  0017B0  5034               	movf	_RMotorCounter,w,c
  3769                           
  3770                           ; Switch size 1, requested type "space"
  3771                           ; Number of cases is 4, Range of values is 1 to 8
  3772                           ; switch strategies available:
  3773                           ; Name         Instructions Cycles
  3774                           ; simple_byte           13     7 (average)
  3775                           ;	Chosen strategy is simple_byte
  3776  0017B2  0A01               	xorlw	1	; case 1
  3777  0017B4  B4D8               	btfsc	status,2,c
  3778  0017B6  D7BB               	goto	i2l1478
  3779  0017B8  0A03               	xorlw	3	; case 2
  3780  0017BA  B4D8               	btfsc	status,2,c
  3781  0017BC  D7BA               	goto	i2l1480
  3782  0017BE  0A06               	xorlw	6	; case 4
  3783  0017C0  B4D8               	btfsc	status,2,c
  3784  0017C2  D7B1               	goto	i2l1474
  3785  0017C4  0A0C               	xorlw	12	; case 8
  3786  0017C6  D7B1               	goto	i2l1476
  3787  0017C8  D000               	goto	i2l145
  3788  0017CA                     i2l145:
  3789  0017CA  0012               	return		;funcret
  3790  0017CC                     __end_of_motorCounterUpdate:
  3791                           	opt stack 0
  3792                           pclatu	equ	0xFFB
  3793                           pclath	equ	0xFFA
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           intcon	equ	0xFF2
  3801                           intcon2	equ	0xFF1
  3802                           postinc0	equ	0xFEE
  3803                           fsr0h	equ	0xFEA
  3804                           fsr0l	equ	0xFE9
  3805                           wreg	equ	0xFE8
  3806                           fsr1h	equ	0xFE2
  3807                           fsr1l	equ	0xFE1
  3808                           bsr	equ	0xFE0
  3809                           postinc2	equ	0xFDE
  3810                           postdec2	equ	0xFDD
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function _ABS *****************
  3816 ;; Defined at:
  3817 ;;		line 325 in file "interrupts.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  x               2   17[COMRAM] int 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;		None
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  2   17[COMRAM] int 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;Total ram usage:        2 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; This function calls:
  3838 ;;		Nothing
  3839 ;; This function is called by:
  3840 ;;		_KController
  3841 ;;		_FrontController
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text21
  3846  001C52                     __ptext21:
  3847                           	opt stack 0
  3848  001C52                     _ABS:
  3849                           	opt stack 24
  3850                           
  3851                           ;interrupts.c: 327: if(x<0) x = -x;
  3852                           
  3853                           ;incstack = 0
  3854  001C52  AE4A               	btfss	ABS@x+1,7,c
  3855  001C54  D005               	goto	i2l1526
  3856  001C56  6C49               	negf	ABS@x,c
  3857  001C58  1E4A               	comf	ABS@x+1,f,c
  3858  001C5A  B0D8               	btfsc	status,0,c
  3859  001C5C  2A4A               	incf	ABS@x+1,f,c
  3860  001C5E  D000               	goto	i2l1526
  3861  001C60                     i2l1526:
  3862                           
  3863                           ;interrupts.c: 328: return x;
  3864  001C60  C049  F049         	movff	ABS@x,?_ABS
  3865  001C64  C04A  F04A         	movff	ABS@x+1,?_ABS+1
  3866  001C68  D000               	goto	i2l155
  3867  001C6A                     i2l155:
  3868  001C6A  0012               	return		;funcret
  3869  001C6C                     __end_of_ABS:
  3870                           	opt stack 0
  3871                           pclatu	equ	0xFFB
  3872                           pclath	equ	0xFFA
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           intcon	equ	0xFF2
  3880                           intcon2	equ	0xFF1
  3881                           postinc0	equ	0xFEE
  3882                           fsr0h	equ	0xFEA
  3883                           fsr0l	equ	0xFE9
  3884                           wreg	equ	0xFE8
  3885                           fsr1h	equ	0xFE2
  3886                           fsr1l	equ	0xFE1
  3887                           bsr	equ	0xFE0
  3888                           postinc2	equ	0xFDE
  3889                           postdec2	equ	0xFDD
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           pclatu	equ	0xFFB
  3894                           pclath	equ	0xFFA
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           fsr0h	equ	0xFEA
  3905                           fsr0l	equ	0xFE9
  3906                           wreg	equ	0xFE8
  3907                           fsr1h	equ	0xFE2
  3908                           fsr1l	equ	0xFE1
  3909                           bsr	equ	0xFE0
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916                           	psect	rparam
  3917  0000                     pclatu	equ	0xFFB
  3918                           pclath	equ	0xFFA
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           intcon2	equ	0xFF1
  3927                           postinc0	equ	0xFEE
  3928                           fsr0h	equ	0xFEA
  3929                           fsr0l	equ	0xFE9
  3930                           wreg	equ	0xFE8
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           bsr	equ	0xFE0
  3934                           postinc2	equ	0xFDE
  3935                           postdec2	equ	0xFDD
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        1
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      94
    BANK0           128    117     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sensorComputation@sensorTemp	PTR int [10] size(2) Largest target is 80
		 -> sensorUpdate@sensorTemp(BANK0[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_KController
    _rotate->_motorCounterUpdate
    _forward->_motorCounterUpdate
    _Reversing->_motorCounterUpdate
    _KController->_ABS
    _KController->_motorCounterUpdate

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sensorUpdate
    _setCorrection->___awdiv
    _sensorUpdate->_sensorComputation
    _sensorComputation->_MAX
    _sensorComputation->_MIN
    _MIN->___wmul
    _MAX->___wmul
    _InitApp->_delay

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5839
                _ConfigureOscillator
                            _InitApp
                       _sensorUpdate
                      _setCorrection
 ---------------------------------------------------------------------------------
 (1) _setCorrection                                        6     6      0    1095
                                              8 BANK0      6     6      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _sensorUpdate                                        91    91      0    4608
                                             26 BANK0     91    91      0
                             ___wmul
                  _sensorComputation
 ---------------------------------------------------------------------------------
 (2) _sensorComputation                                   15    12      3    3386
                                             11 BANK0     15    12      3
                                _MAX
                                _MIN
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     882
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     965
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _MIN                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MAX                                                  5     1      4     254
                                              6 BANK0      5     1      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0     136
                 _AlgorithmSelection
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     136
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _AlgorithmSelection                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0    7260
                                             24 COMRAM    14    14      0
                        _KController
                          _Reversing
                            _forward
                              _merge
                 _motorCounterUpdate
                          _moveMouse
                             _rotate
 ---------------------------------------------------------------------------------
 (6) _rotate                                               1     1      0    1364
                                             19 COMRAM     1     1      0
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _moveMouse                                            1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _merge                                                3     2      1     226
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (6) _forward                                              0     0      0    1342
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _Reversing                                            0     0      0    1342
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (6) _KController                                          5     5      0    1629
                                             19 COMRAM     5     5      0
                                _ABS
                 _motorCounterUpdate
 ---------------------------------------------------------------------------------
 (7) _motorCounterUpdate                                   2     1      1    1342
                                             17 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _ABS                                                  2     0      2     173
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _AlgorithmSelection
     _delay
   _sensorUpdate
     ___wmul
     _sensorComputation
       _MAX
         ___wmul (ARG)
       _MIN
         ___wmul (ARG)
       ___awdiv
       ___wmul
   _setCorrection
     ___awdiv

 _low_isr (ROOT)

 _high_isr (ROOT)
   _KController
     _ABS
     _motorCounterUpdate
   _Reversing
     _motorCounterUpdate
   _forward
     _motorCounterUpdate
   _merge
   _motorCounterUpdate
   _moveMouse
   _rotate
     _motorCounterUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     75      75       5       91.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      5E       1       74.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D3      34        0.0%
DATA                 0      0      D3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri May 01 19:25:37 2015

                  ___awdiv@sign 0085                              bsr 000FE0             ___wmul@multiplicand 0082  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                     __CFG_LVP$ON 000000  
                           l302 15B6                             l320 1BB0                             l315 1B74  
                           l323 1B48                             l316 1B7C                             l309 161C  
                           l319 1BA8                             l274 1A84                             l283 1C04  
                           l516 198C                             l288 1C18                             _ABS 1C52  
                  __CFG_CPB$OFF 000000                             _MAX 1B7E                             _MIN 1B4A  
                  __CFG_CPD$OFF 000000      __end_of_AlgorithmSelection 1C1A                    _rotatingSide 0037  
                           wreg 000FE8                            ABS@x 0049                            ?_ABS 0049  
                          ?_MAX 0086                            ?_MIN 0086                            MAX@a 0086  
                          MAX@b 0088                            MIN@a 0086                            MIN@b 0088  
                  __CFG_WDT$OFF 000000                            l2012 16C2                            l2008 16B8  
                          l2034 1BF0                            l1910 196C                            l1920 1A6C  
                          l1914 1982                            l1906 195C                            l1932 1C12  
                          l1940 1318                            l1950 13AA                            l1960 1538  
                          l1952 14C8                            l1882 18DC                            l1962 15A0  
                          l1946 133C                            l1956 14DE                            l1894 1912  
                          l1896 1920                            l1888 18F4                            l1992 15E0  
                          l1898 192A                            l1994 15EA                            l1988 15C6  
                          l1998 1604                            _LATC 000F8B                            u1620 1316  
                          u1630 133A                            u1715 162A                            u1747 1A74  
                          _main 1BDA                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A2                   __CFG_IESO$OFF 000000  
   sensorComputation@sensorTemp 008B                   __CFG_MCLRE$ON 000000                    ___param_bank 000010  
               __end_of_InitApp 1AD6           __end_of_setCorrection 18BE                           ??_ABS 004B  
                         ??_MAX 008A                           ??_MIN 008A      __size_of_sensorComputation 02C4  
                         ?_main 0038                 __end_of___awdiv 198E                           _T0CON 000FD5  
               ___awdiv@divisor 0082                           i2l104 12BA                           i2l145 17CA  
                         i2l155 1C6A                           i2l148 1C7A                           i2l159 1A54  
               ___awdiv@counter 0084                           _TRISC 000F94             _ConfigureOscillator 1C7C  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                           _delay 1A56  
                         _merge 1C6C                 __end_of_forward 1C36                 __end_of_low_isr 00A2  
                         tablat 000FF5                           status 000FD8            ?_ConfigureOscillator 0038  
             _ControllerCounter 0011                 __initialization 1BB2                    __end_of_main 1BFC  
                        ??_main 00F5                   __activetblptr 000002                          ?_delay 0080  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_merge 0049                          _ADRESH 000FC4                          _ADRESL 000FC3  
              ___awdiv@dividend 0080                          i2l1500 1770                          i2l1502 1774  
                        i2l1520 17B0                          i2l1504 1792                          i2l1600 1A4E  
                        i2l1526 1C60                          i2l1614 1AF4                          i2l1702 10AC  
                        i2l1480 1732                          i2l1456 16EA                          i2l1616 1B0A  
                        i2l1712 10E8                          i2l1474 1726                          i2l1458 16EE  
                        i2l1466 16FC                          i2l1730 1152                          i2l1722 111C  
                        i2l1706 10CA                          i2l1476 172A                          i2l1484 1738  
                        i2l1468 1716                          i2l1740 1188                          i2l1732 1162  
                        i2l1708 10DA                          i2l1494 1768                          i2l1478 172E  
                        i2l1486 1756                          i2l1590 1A16                          i2l1750 11BA  
                        i2l1742 118E                          i2l1718 10FA                          i2l1752 11C4  
                        i2l1744 119E                          i2l1594 1A2A                          i2l1586 1A06  
                        i2l1578 19BA                          i2l1754 11CA                          i2l1738 117E  
                        i2l1596 1A3A                          i2l1772 1252                          i2l1764 1212  
                        i2l1782 1290                          i2l1774 1262                          i2l1766 1222  
                        i2l1694 1084                          i2l1776 1270                          i2l1784 129A  
                        i2l1698 1098                          i2l1786 12B2                          _INTCON 000FF2  
                        _OSCCON 000FD3                       ??_InitApp 0085           ??_ConfigureOscillator 0080  
                   merge@merged 004B                  __CFG_XINST$OFF 000000              sensorComputation@i 0098  
            sensorComputation@j 0096                __end_of_high_isr 12F4                          ___wmul 1B12  
                     ??___awdiv 0084                  __CFG_STVREN$ON 000000                          _errorD 002B  
                        _errorP 002D                          delay@x 0083                          clear_0 1BB8  
              ___awdiv@quotient 0086                          _rotate 1AD6              __size_of_Reversing 001C  
                  __pdataCOMRAM 005E                       ??_forward 004B                    __mediumconst 0000  
                     ??_low_isr 0038                  _ReverseCounter 001D                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                      __accesstop 0080  
       __end_of__initialization 1BD0                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_KController 0038                  __pcstackCOMRAM 0038                   __end_of_delay 1A9A  
                    _TurnedLeft 0025                 moveMouse@action 0049                   __end_of_merge 1C7C  
          KController@correctTo 004D      __end_of_motorCounterUpdate 17CC                  _ignoreControll 005E  
                _ForwardCounter 0015                         ??_delay 0082                         ??_merge 004A  
            _AlgorithmSelection 1BFC                    _LTurnCounter 0017               __end_of_Reversing 1C52  
                    _delay_time 0029               _MotorDelayCounter 0019             ?_AlgorithmSelection 0038  
          setCorrection@sideAvg 008A                         ?___wmul 0080              __size_of_moveMouse 0008  
                       ?_rotate 0038                         _INTCON2 000FF1                         _OSCTUNE 000F9B  
          ??_AlgorithmSelection 0080                       ?_high_isr 0038                         _Deadend 0013  
                 _LMotorCounter 0033                         _InitApp 1A9A                         __Hparam 0000  
                       __Lparam 0000                         ___awdiv 18BE                 __size_of___wmul 0038  
                  __psmallconst 1000                         __pcinit 1BB2                         __ramtop 1000  
                       __ptext0 1BDA                         __ptext1 17CC                         __ptext2 15B8  
                       __ptext3 12F4                         __ptext4 1B12                         __ptext5 18BE  
                       __ptext6 1B4A                         __ptext7 1B7E                         __ptext8 1A9A  
                       __ptext9 1A56                 __size_of_rotate 003C                    __size_of_ABS 001A  
                  __size_of_MAX 0034                    __size_of_MIN 0034                         _forward 1C1A  
                       delay@ms 0080                         _low_isr 0018                   ?_sensorUpdate 0038  
                    ??_high_isr 0050                  __pintcode_body 1006          __size_of_setCorrection 00F2  
          end_of_initialization 1BD0                _sensorCorrection 0001               __end_of_moveMouse 1C8E  
                 __Lmediumconst 0000                         int_func 1006                      _justTurned 0036  
          __size_of_KController 00C8                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE                       _TRISBbits 000F93                       _TRISEbits 000F96  
                ??_sensorUpdate 009A     __end_of_ConfigureOscillator 1C86                      _totalError 0031  
                  _RTurnCounter 001B  sensorComputation@getCorrection 008D                   _setCorrection 17CC  
                __end_of___wmul 1B4A                   __pidataCOMRAM 1C8E                     _TurnedRight 0027  
                __end_of_rotate 1B12             start_initialization 1BB2                     __end_of_ABS 1C6C  
                   __end_of_MAX 1BB2                     __end_of_MIN 1B7E              _motorCounterUpdate 16D8  
              __CFG_OSC$INTIO67 000000             ?_motorCounterUpdate 0049                      merge@right 0049  
                     _Reversing 1C36                  ?_setCorrection 0038                        ??___wmul 0084  
              __CFG_LPT1OSC$OFF 000000                        ??_rotate 004B                  _sensorLocation 1001  
          ??_motorCounterUpdate 004A                     __pbssCOMRAM 0001                   __pcstackBANK0 0080  
                     _TurnRight 0023       sensorUpdate@getCorrection 00F0          sensorUpdate@sensorTemp 00A0  
             __size_of_high_isr 12EC                        ?_InitApp 0038               __CFG_CCP2MX$PORTC 000000  
                    ?_Reversing 0038                       _algorithm 0035                       __pintcode 0008  
         setCorrection@frontAvg 008C          motorCounterUpdate@side 004A                        ?___awdiv 0080  
          __end_of_sensorUpdate 16D8          __end_of_sensorLocation 1005                     __pintcodelo 0018  
                   __smallconst 1000                        ?_forward 0038                        ?_low_isr 0038  
                     _oldErrorP 002F                  __size_of_delay 0044     __size_of_AlgorithmSelection 001E  
                __size_of_merge 0010                  ___wmul@product 0084                       _moveMouse 1C86  
                      i2u103_40 1A26                        i2u120_40 10BA                        i2u105_40 1A4A  
                      i2u114_40 1048                        i2u115_40 1056                        i2u116_40 106A  
                      i2u133_40 11DA                        i2u117_40 107A                        i2u134_40 11EA  
                      i2u118_40 1092                        i2u119_40 10A6                        i2u138_40 1232  
               ??_setCorrection 0088                        i2u139_40 1242                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 0080                   _RMotorCounter 0034  
                    rotate@side 004B                   ??_KController 004B                      ?_moveMouse 0038  
              __size_of_InitApp 003C                        __Hrparam 0000                       merge@left 004A  
          sensorComputation@max 0090                        __Lrparam 0000            sensorComputation@min 0092  
          sensorComputation@sum 0094                     ??_Reversing 004B              __CFG_BOREN$SBORDIS 000000  
              __size_of___awdiv 00D0                        _TurnLeft 0021                __size_of_forward 001C  
              __size_of_low_isr 008A                        __ptext10 1BFC                        __ptext11 1C7C  
                      __ptext20 16D8                        __ptext21 1C52                        __ptext14 1AD6  
                      __ptext15 1C86                        __ptext16 1C6C                        __ptext17 1C1A  
                      __ptext18 1C36                        __ptext19 198E                        _high_isr 0008  
                 __size_of_main 0022                   _RotateCounter 001F           __size_of_sensorUpdate 0120  
  __size_of_ConfigureOscillator 000A             __end_of_KController 1A56               _sensorComputation 12F4  
                    _INTCONbits 000FF2              ?_sensorComputation 008B                   sensorUpdate@i 00F1  
                 sensorUpdate@j 00F3                    _sensorUpdate 15B8                        intlevel1 0000  
                      intlevel2 0000             ??_sensorComputation 008E                     ??_moveMouse 0049  
               KController@diff 004E       __end_of_sensorComputation 15B8                     _sensorValue 0009  
   __size_of_motorCounterUpdate 00F4       motorCounterUpdate@reverse 0049                     _KController 198E  
